diff --git Makefile Makefile
index 866aaa4..87cc5e5 100755
--- Makefile
+++ Makefile
@@ -2,7 +2,7 @@
 # Makefile to build CAD tools in Verilog-to-Routing (VTR) Framework #
 #####################################################################
 
-SUBDIRS = ODIN_II vpr abc_with_bb_support libarchfpga pcre printhandler ace2
+SUBDIRS = ODIN_II vpr abc_with_bb_support libarchfpga pcre printhandler ace2 torc yosys xdlrc2vpr bnpr2xdl vtr_flow/arch/xilinx
 
 all: notifications subdirs
 
@@ -10,6 +10,35 @@ subdirs: $(SUBDIRS)
 
 $(SUBDIRS):
 	@ $(MAKE) -C $@ --no-print-directory
+
+torc:
+ifeq ($(wildcard torc/*),)
+	@echo
+	@echo "Checking-out Torc v1.0 [torc-isi.sourceforge.net] in 5 seconds"
+	@echo
+	sleep 5
+	svn co https://torc-isi.svn.sourceforge.net/svnroot/torc-isi/tags/torc-1.0 torc
+else
+	cd torc && svn cleanup && svn up
+endif
+
+yosys:
+ifeq ($(wildcard yosys/*),)
+	@echo
+	@echo "Checking-out Yosys v0.5 [www.clifford.at/yosys] in 5 seconds"
+	@echo
+	sleep 5
+	git clone --branch yosys-0.5 http://github.com/cliffordwolf/yosys
+endif
+	@ $(MAKE) -C $@ --no-print-directory
+
+export BOOST_INCLUDE_DIR = /usr/include
+export BOOST_LIB_DIR = /usr/lib
+EXTRA_CCFLAGS = -Wno-error=unused-local-typedefs
+xdlrc2vpr bnpr2xdl: torc
+	@ $(MAKE) -C $@ --no-print-directory CC="$(CC) $(EXTRA_CCFLAGS)"
+
+vtr_flow/arch/xilinx: vpr xdlrc2vpr
 	
 notifications: 
 # checks if required packages are installed, and notifies the user if not
@@ -36,15 +65,11 @@ printhandler: pcre
 
 ace2: abc_with_bb_support
 clean:
-	@ cd ODIN_II && make clean
-	@ cd abc_with_bb_support && make clean
-	@ cd ace2 && make clean
-	@ cd vpr && make clean
-	@ cd libarchfpga && make clean
-	@ cd printhandler && make clean
-	@ cd pcre && make clean
+	for dir in $(SUBDIRS); do \
+		$(MAKE) -C $$dir $@; \
+	done
 
 clean_vpr:
-	@ cd vpr && make clean
+	@ $(MAKE) -C vpr clean
 
-.PHONY: packages subdirs $(SUBDIRS)
+.PHONY: clean packages subdirs $(SUBDIRS)
diff --git ODIN_II/Makefile ODIN_II/Makefile
index cfb8c39..85e5a16 100644
--- ODIN_II/Makefile
+++ ODIN_II/Makefile
@@ -78,7 +78,7 @@ OBJ = $(patsubst $(SRC_DIR)/%.c,$(OBJ_DIR)/%.o, \
 
 DEP = $(OBJ:.o=.d)
 
-all: CTAGS $(EXEO)
+all: $(EXEO)
 
 $(EXEO): $(OBJ)
 	g++ $(C_FLAGS) $(FLAGS) $(OBJ) -o $(EXEO) $(LIB)
diff --git abc_with_bb_support/src/base/abc/abcNtk.c abc_with_bb_support/src/base/abc/abcNtk.c
index 7c6ced9..14ea04e 100644
--- abc_with_bb_support/src/base/abc/abcNtk.c
+++ abc_with_bb_support/src/base/abc/abcNtk.c
@@ -331,6 +331,7 @@ Abc_Ntk_t * Abc_NtkDup( Abc_Ntk_t * pNtk )
         // duplicate the nets and nodes (CIs/COs/latches already dupped)
         Abc_NtkForEachObj( pNtk, pObj, i )
             if ( pObj->pCopy == NULL )
+		/* EH: Copy name (last parameter) when duplicating object */
                 Abc_NtkDupObj(pNtkNew, pObj, 0);
         // reconnect all objects (no need to transfer attributes on edges)
         Abc_NtkForEachObj( pNtk, pObj, i )
diff --git bnpr2xdl/Makefile bnpr2xdl/Makefile
new file mode 100644
index 0000000..fb176a0
--- /dev/null
+++ bnpr2xdl/Makefile
@@ -0,0 +1,103 @@
+# Torc - Copyright 2011-2013 University of Southern California.  All Rights Reserved.
+# $HeadURL$
+# $Id$
+
+# This program is free software: you can redistribute it and/or modify it under the terms of the 
+# GNU General Public License as published by the Free Software Foundation, either version 3 of the 
+# License, or (at your option) any later version.
+# 
+# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
+# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See 
+# the GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License along with this program.  If 
+# not, see <http://www.gnu.org/licenses/>.
+
+# Instructions:
+# 1. Define SRC_DIR as an environment variable, or set SRC_DIR in this file as a path to the
+#    torc/trunk/src directory.
+# 2. Define the USER_EXAMPLE_EXEC variable in this file to be the name of your executable.
+# 3. Define the USER_EXAMPLE_OBJS variable in this file to be the list of object files for your 
+#    program.  The Torc object files will be included through the TORC_REAL_OBJS_FILE variable.
+# 4. Create your user example source code, including a main() function.
+# 5. Invoke 'make' to build the Torc objects as well as your user executable.
+
+SRC_DIR = $(abspath ../torc/src)
+TORC_DIR = $(SRC_DIR)/torc
+-include $(SRC_DIR)/Makefile.local
+include $(TORC_DIR)/Makefile.objects
+
+# LDFLAGS
+LDFLAGS = \
+	-L/usr/local/lib \
+	-dead_strip \
+	$(BOOST_LIB_DIR_OPTION) \
+	-lboost_filesystem \
+	-lboost_regex \
+	-lboost_system \
+	-lstdc++ \
+	-lm \
+	-lxml2 \
+	$
+
+EXTRA_CCFLAGS = -std=c++11 \
+	-O3 -g \
+	-Wno-error=unused-variable \
+	-Wno-error=unused-local-typedefs \
+	-I/usr/include/libxml2 \
+	$
+
+# User Example Objects
+USER_EXAMPLE_EXEC := bnpr2xdl
+USER_EXAMPLE_OBJS := bnpr2xdl.o
+
+# Local objects
+OBJS = \
+	$(USER_EXAMPLE_OBJS) \
+	$
+
+# Torc Real Objects File
+TORC_REAL_OBJS_FILE = TorcRealObjects
+
+# Local dependencies
+DEPS = $(OBJS:.o=.d)
+
+.PHONY: all
+
+# Make everything by default
+all: \
+	$(USER_EXAMPLE_EXEC) \
+	$
+
+# Dependency Include
+ifneq ($(MAKECMDGOALS), clean)
+ifneq ($(MAKECMDGOALS), clean_torc)
+-include $(DEPS)
+-include $(TORC_DEPS)
+endif
+endif
+
+# Create torc real objects file
+$(TORC_REAL_OBJS_FILE): $(TORC_REAL_OBJS)
+	@echo $(TORC_REAL_OBJS) > $(TORC_REAL_OBJS_FILE)
+
+# make the user example executable
+$(USER_EXAMPLE_EXEC): $(TORC_REAL_OBJS_FILE) $(USER_EXAMPLE_OBJS)
+	$(CC) \
+	@$(TORC_REAL_OBJS_FILE) \
+	$(USER_EXAMPLE_OBJS) \
+	$(CCFLAGS) \
+	$(LDFLAGS) \
+	-o $@
+
+# clean everything (builds on Makefile.targets clean)
+clean::
+	rm -f $(USER_EXAMPLE_EXEC)
+	rm -f $(TORC_REAL_OBJS_FILE)
+
+# Clean Torc Objects / Dependencies
+clean_torc:
+	rm -f $(TORC_REAL_OBJS_FILE) $(TORC_REAL_OBJS) $(TORC_DEPS)
+
+# Include Makefile.targets
+include $(TORC_DIR)/Makefile.targets
diff --git bnpr2xdl/bnpr2xdl.cpp bnpr2xdl/bnpr2xdl.cpp
new file mode 100644
index 0000000..144ece0
--- /dev/null
+++ bnpr2xdl/bnpr2xdl.cpp
@@ -0,0 +1,2508 @@
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include <iostream>
+#include <iomanip>
+
+#include <boost/lexical_cast.hpp>
+#include <boost/filesystem.hpp>
+#include <boost/algorithm/string.hpp>
+#include <boost/algorithm/string/predicate.hpp>
+using boost::algorithm::starts_with;
+using boost::algorithm::ends_with;
+using boost::algorithm::to_upper_copy;
+
+#include "bnpr2xdl.hpp"
+
+const string design::whitespace = " \a\b\f\n\r\t\v";
+
+inline string escape(const string& s) {
+	string r(s);
+	string::size_type i = 0;
+	while (1) {
+		i = r.find_first_of(':', i);
+		if (i == string::npos)
+			break;
+		r.insert(i, "\\");
+		i += 2;
+	}
+	return r;
+}
+
+design::design(
+		const string& device,
+		const string& package,
+		const string& speed,
+		const string& version = "v3.2") 
+	: mDevice(device), mPackage(package), mSpeed(speed), mVersion(version), mDDB(device,package)
+{
+}
+
+void design::operator()(const string& circuit) {
+	parseNet(stringify(circuit, ".net"));
+	parsePlace(stringify(circuit, ".place"));
+	parseRoute(stringify(circuit, ".route"));
+	parseBlif(stringify(circuit, ".pre-vpr.blif"));
+	include();
+}
+
+void design::include(void) {
+	const string &fn = stringify(mDesignPtr->getDevice(), mDesignPtr->getPackage(), "_include.xdl");
+	ifstream fs(fn);
+	if(!fs.good())
+		return;
+	
+	cout << "Including instances from " << fn << "... " << endl;
+
+	XdlImporter importer;
+	importer(fs, fn);
+	auto inDesignPtr = importer.getDesignPtr();
+	auto it = inDesignPtr->instancesBegin(), ie = inDesignPtr->instancesEnd();
+	for (; it != ie; ++it) {
+		mDesignPtr->addInstance(*it);
+	}
+
+	fs.close();
+}
+
+void design::parseNet(const string &net) {
+	//mXml = new xmlpp::TextReader(net);
+	mXml = xmlNewTextReaderFilename(net.c_str());
+
+	advance(XML_READER_TYPE_ELEMENT, 0, "block");
+	assert(get_attribute("instance") == "FPGA_packed_netlist[0]");
+	const string& name = get_attribute("name");
+
+	mDesignPtr = Factory::newDesignPtr(name, mDevice, mPackage, mSpeed, mVersion);
+
+	// Ignore FPGA inputs
+	skip(XML_READER_TYPE_ELEMENT, 1, "inputs");
+
+	// Ignore FPGA outputs
+	skip(XML_READER_TYPE_ELEMENT, 1, "outputs");
+
+	// Ignore FPGA clocks
+	skip(XML_READER_TYPE_ELEMENT, 1, "clocks");
+
+	// Parse all blocks;
+	advance();
+	do {
+		check(XML_READER_TYPE_ELEMENT, 1, "block");
+		const string &mode = get_attribute("mode");
+		const string &instance = get_attribute("instance");
+		const string &type = instance.substr(0,instance.find_first_of('['));
+
+		if (type == "SLICEL")
+			parseSLICEL();
+		else if (type == "IOB")
+			parseIOB();
+		else if (type == "DSP48E1")
+			parseDSP();
+		else if (type == "BUFG")
+			parseBUFG();
+		else if (type == "PS7")
+			parsePS7();
+		else if (type == "RAMB36E1") {
+			if (mode == "RAMB18E1x2")
+				parseRAMB18x2();
+			else
+				parseRAMB36();
+		}
+		else throw;
+
+		advance();
+	} while(get_depth() > 0);
+
+	check(XML_READER_TYPE_END_ELEMENT, 0, "block");
+
+	//delete mXml;
+	xmlFreeTextReader(mXml);
+}
+
+void design::parsePlace(const string &place) {
+	const Tiles& tiles = mDDB.getTiles();
+
+	map<TileIndex, vector<string> > tile2sites;
+	genClbTile2Sites(tile2sites);
+
+	map<tuple<int,int,int>, string> iob2site;
+	readIob2Site(iob2site);
+
+	ifstream fs(place);
+	if (!fs) {
+		cout << "parsePlace() failed: '" << place << "' not found!" << endl;
+		throw;	
+	}
+
+	// Ignore the first five lines
+	fs.ignore(1024, '\n');
+	fs.ignore(1024, '\n');
+	fs.ignore(1024, '\n');
+	fs.ignore(1024, '\n');
+	fs.ignore(1024, '\n');
+
+	string block;
+	int x, y, subblk;
+	while (fs >> block >> x >> y >> subblk) {
+		y -= 1;
+		Design::InstanceSharedPtrConstIterator instPtrIt = mDesignPtr->findInstance(block);
+		assert(instPtrIt != mDesignPtr->instancesEnd());
+		InstanceSharedPtr instPtr = *instPtrIt;
+		const string& type = instPtr->getType();
+		if (type == "SLICEL") {
+			string tile;
+			TileIndex ti;
+			for (const auto p : { "CLBLM", "CLBLL", "CLBLM_L", "CLBLM_R", "CLBLL_L", "CLBLL_R" }) {
+				tile = stringify(p, "_X", x, "Y", y);
+				ti = tiles.findTileIndex(tile);
+				if (ti != TileIndex(-1))
+					break;
+			}
+			assert(ti != TileIndex(-1));
+			instPtr->setTile(tile);
+			instPtr->setSite(tile2sites.at(ti)[subblk]);
+		}
+		else if (type == "DSP48E1") {
+			string tile;
+			TileIndex ti;
+			for (const auto p : { "DSP", "DSP_L", "DSP_R" }) {
+				tile = stringify(p, "_X", x, "Y", y);
+				ti = tiles.findTileIndex(tile);
+				if (ti != TileIndex(-1))
+					break;
+			}
+			assert(ti != TileIndex(-1));
+			instPtr->setTile(tile);
+			instPtr->setSite(tile2sites.at(ti)[subblk]);
+		}
+		else if (type == "RAMB18E1") {
+			string tile;
+			TileIndex ti;
+			for (const auto p : { "BRAM", "BRAM_L", "BRAM_R" }) {
+				tile = stringify(p, "_X", x, "Y", y);
+				ti = tiles.findTileIndex(tile);
+				if (ti != TileIndex(-1))
+					break;
+			}
+			assert(ti != TileIndex(-1));
+			// FIXME: Fix ptc2name!!
+			const auto& site = tile2sites.at(ti)[1-subblk];
+			assert(starts_with(site, "RAMB18_"));
+			instPtr->setTile(tile);
+			instPtr->setSite(site);
+			
+			InstanceSharedPtr inst2Ptr = mSecondaryRAMB18.at(instPtr);
+			if (inst2Ptr) {
+				const auto& site2 = tile2sites.at(ti)[subblk];
+				assert(starts_with(site, "RAMB18_"));
+				inst2Ptr->setTile(tile);
+				inst2Ptr->setSite(site2);
+			}
+		}
+		else if (type == "RAMB36E1") {
+			string tile;
+			TileIndex ti;
+			for (const auto p : { "BRAM", "BRAM_L", "BRAM_R" }) {
+				tile = stringify(p, "_X", x, "Y", y);
+				ti = tiles.findTileIndex(tile);
+				if (ti != TileIndex(-1))
+					break;
+			}
+			assert(ti != TileIndex(-1));
+			instPtr->setTile(tile);
+			// RAMB36 is after 2xRAMB18s
+			const auto& site = tile2sites.at(ti)[2];
+			assert(starts_with(site, "RAMB36_"));
+			instPtr->setSite(site);
+		}
+		else if (type == "IOB") {
+			string tile;
+			if (mDDB.getDeviceName() == "xc7z020") {
+				switch (x) {
+					case 0: tile = stringify("LIOB33_X", x, "Y", y); break;
+					case 73: tile = stringify("RIOB33_X", x, "Y", y); x = 1; break;
+					default: throw;
+				}
+			}
+			else if (mDDB.getDeviceName() == "xc6vlx240t") {
+				switch (x) {
+					case 0: tile = stringify("LIOB_X", x, "Y", y); break;
+					case 41: tile = stringify("LIOB_FT_X", x, "Y", y); x = 1; break;
+					case 57: tile = stringify("RIOB_X", x, "Y", y); x = 2; break;
+					default: throw;
+				}
+				// FIXME: Fix ptc2name!!
+				if (subblk == 0)
+					y += 1;
+				else if (subblk == 1)
+					y -= 1;
+				else throw;
+			}
+			else throw;
+			assert(tiles.findTileIndex(tile) != TileIndex(-1));
+			instPtr->setTile(tile);
+			instPtr->setSite(iob2site.at(make_tuple(x,y,subblk)));
+			cout << instPtr->getName() << " -> " << instPtr->getSite() << endl;
+		}
+		else if (type == "PS7") {
+			if (x == 18)
+				x = 32;
+			else throw;
+			const string& tile = stringify("PSS2_X",x,"Y",y);
+			assert(tiles.findTileIndex(tile) != TileIndex(-1));
+			instPtr->setTile(tile);
+			string site = stringify(type, "_X", 0, "Y", 0);
+			instPtr->setSite(site);
+		}
+		else if (type == "BUFG") {
+			int z;
+			string tile;
+
+			if (mDDB.getDeviceName() == "xc7z020") {
+				assert(x == 33);
+				if (y == 46) {
+					z = subblk;
+					tile = "CLK_BUFG_BOT_R_X87Y48";
+				}
+				else if (y == 50) {
+					z = subblk + 16;
+					tile = "CLK_BUFG_TOP_R_X87Y53";
+				}
+				else throw;
+			}
+			else if (mDDB.getDeviceName() == "xc6vlx240t") {
+				assert(x == 52);
+				if (y == 118) {
+					z = subblk;
+					tile = "CMT_BUFG_BOT_X52Y118";
+				}
+				else if (y == 120) {
+					z = subblk + 16;
+					tile = "CMT_BUFG_TOP_X52Y120";
+				}
+				else throw;
+
+			}
+			assert(tiles.findTileIndex(tile) != TileIndex(-1));
+			instPtr->setTile(tile);
+			string site = stringify("BUFGCTRL_X0Y", z);
+			instPtr->setSite(site);
+		}
+		else throw;
+		fs.ignore(1024, '\n');
+		//cout << instPtr->getType() << " " << instPtr->getName() << " @ " << instPtr->getTile() << " " << instPtr->getSite() << endl;
+	}
+	fs.close();
+}
+
+void design::parseBlif(const string &blif) {
+	ifstream fs(blif);
+	if (!fs) {
+		cout << "parseBlif() failed: '" << blif << "' not found!" << endl;
+		throw;
+	}
+	fs.ignore(1024, '\n');
+
+	string begin, line;
+	string mask, tti, tto, ttoLast;
+	vector<string> vLine;
+	vector<string> in2ipin;
+	in2ipin.reserve(6);
+	vector<bool> ipinUsed;
+	ipinUsed.reserve(6);
+
+	while (fs >> begin) {
+		if (begin[0] != '.')
+			fs.ignore(1024, '\n');
+		else if (begin == ".names") {
+			getline(fs, line);
+			while (line.back() == '\\') {
+				string l;
+				getline(fs, l);
+				line.pop_back();
+				line += l;
+			}
+			static const regex re("\\s+");
+			const string& tline = trim(line);
+			sregex_token_iterator split_first{tline.begin(), tline.end(), re, -1}, split_last;
+			vLine = {split_first, split_last};
+			// Only one token, therefore constant (e.g. gnd), ignore
+			if (vLine.size() == 1) {
+				if (vLine[0] == "gnd" || vLine[0] == "vcc" || vLine[0] == "unconn")
+					continue;
+			}
+			const string out = vLine.back();
+			vLine.pop_back();
+			InstanceSharedPtr instPtr;
+			string config;
+			auto it = mNet2InstCfg.find(out);
+			if (it == mNet2InstCfg.end()) {
+				assert(vLine.size() == 1);
+				fs >> tti >> tto;
+				assert(tti == "1");
+				assert(tto == "1");
+				const string& in = vLine.front();
+				cout << "parseBlif(): Cannot find lut " << out << " (input net: " << in << ") --- assume trivial buffer, ignore" << endl;
+				continue;
+			}
+			std::tie(instPtr,config) = it->second;
+			assert(config[1] == '6' || config[1] == '5');
+
+			// Must be a constant
+			if (vLine.empty()) {
+				fs >> mask;
+				assert(mask == "0" || mask == "1");
+			}
+			else {
+				const char &lut = config[0];
+				const char &maxPin = instPtr->hasConfig(stringify(lut,"5LUT")) ? '5' : '6';
+				in2ipin.clear();
+				for (const auto &in : vLine) {
+					Circuit::NetSharedPtrConstIterator it = mDesignPtr->findNet(in);
+					assert(it != mDesignPtr->netsEnd());
+					NetSharedPtr inNet = *it;
+
+					string ipin;
+					for (auto it = inNet->sinksBegin(), ie = inNet->sinksEnd(); it != ie; ++it) {
+						if ((*it)->getInstancePtr().lock() == instPtr) {
+							const PinName &pinName = (*it)->getPinName();
+							if (pinName[0] == lut && pinName[1] >= '1' && pinName[1] <= maxPin) {
+								if (ipin.empty())
+									ipin = stringify('A', pinName[1]);
+								else
+									ipin += stringify("*A", pinName[1]);
+							}
+						}
+					}
+					assert(!ipin.empty());
+					if (ipin.size() > 2)
+						ipin = stringify("(", ipin, ")");
+					in2ipin.push_back(ipin);
+				}
+				assert(in2ipin.size() == vLine.size());
+
+				mask.clear();
+				ttoLast.clear();
+				ipinUsed.clear();
+				while(fs >> tti >> tto) {
+					assert(tto == "0" || tto == "1");
+					if (!ttoLast.empty())
+						assert(ttoLast == tto);
+					if (mask.empty()) {
+						if (tto == "0")
+							mask += "~";
+					}
+					else
+						mask += "+";
+					mask += "(";
+					if (ipinUsed.empty())
+						ipinUsed.resize(tti.size(), false);
+					else
+						assert(tti.size() == ipinUsed.size());
+					for (size_t i = 0; i < tti.size(); ++i) {
+						const char &c = tti[i];
+						if (i > 0)
+							mask += "*";
+						switch (c) {
+							case '0': mask += stringify("~",in2ipin[i]); break;
+							case '1': mask += in2ipin[i]; break;
+							case '-': mask += "1"; break;
+							default: throw;
+						}
+						if (c != '-')
+							ipinUsed[i] = true;
+					}
+					mask += ")";
+					fs.ignore(1024, '\n');
+					if (fs.peek() == '.')
+						break;
+					ttoLast = tto;
+				}
+
+				for (size_t i = 0; i < ipinUsed.size(); ++i) {
+					if (!ipinUsed[i])
+						mask += stringify("+", in2ipin[i],"*~",in2ipin[i]);
+				}
+			}
+
+			assert(instPtr->hasConfig(config));
+			string n, v;
+			instPtr->getConfig(config, n, v);
+			instPtr->setConfig(config, n, stringify(v, "(", mask, ")"));
+		}
+	}
+	fs.close();
+}
+
+void design::parseRoute(const string &route) {
+	vector<Tilewire> inode2tw;
+	int inodeOffset;
+	readInode2Tw(inode2tw, inodeOffset);
+
+	ifstream fs(route);
+	if (!fs) {
+		cout << "parseRoute() failed: '" << route << "' not found!" << endl;
+		return;
+	}
+
+	map<string, string> tile2site;
+	genIntTile2Site(tile2site);
+
+	string begin, net;
+	string node, rr_type;
+	int inet, inode, xlow, ylow;
+	WireUsage &wu = mDDB.getWireUsage();
+	while (fs >> begin) {
+		if (begin != "Net") {
+			fs.ignore(1024, '\n');
+		}
+		else {
+			fs >> inet >> net;
+
+			net = net.substr(1,string::npos);
+			// If ends in colon, means it's a global net
+			if (net.back() == ':') {
+				// But double check anyway
+				string global, net, connecting;
+				fs >> global >> net >> connecting;
+				assert(global == "global");
+				assert(net == "net");
+				assert(connecting == "connecting:");
+				continue;
+			}
+			assert(net.back() == ')');
+			net.pop_back();
+			fs.ignore(1024, '\n');
+
+			NetSharedPtr netPtr;
+			map< tuple<TileIndex,string>, vector<InstancePinSharedPtr> > tileLut2InstPin; 
+
+			Circuit::NetSharedPtrIterator netPtrIt = mDesignPtr->findNet(net);
+			if (netPtrIt == mDesignPtr->netsEnd()) {
+				static const regex re("GLOBAL_LOGIC([01])_X(\\d+)Y(\\d+)");
+				smatch m;
+				bool b = regex_match(net, m, re);
+				assert(b);
+				
+				const string type = m[1];
+				const int x = boost::lexical_cast<int>(m[2]);
+				const int y = boost::lexical_cast<int>(m[3])-1;
+				InstanceSharedPtr instPtr = findOrCreateTieoff(tile2site,x,y);
+
+				netPtr = torc::physical::Factory::newNetPtr(net);
+				if (type == "0") netPtr->setNetType(torc::physical::eNetTypeGround);
+				else if (type == "1") netPtr->setNetType(torc::physical::eNetTypePower);
+				else throw;
+				mDesignPtr->addNet(netPtr);
+
+				torc::physical::InstancePinSharedPtr outPin;
+				if (type == "0") {
+					instPtr->setConfig("_GND_SOURCE","","HARD0");
+					outPin = torc::physical::Factory::newInstancePinPtr(instPtr, "HARD0");
+
+				}
+				else if (type == "1") {
+					instPtr->setConfig("_VCC_SOURCE","","HARD1");
+					outPin = torc::physical::Factory::newInstancePinPtr(instPtr, "HARD1");
+				}
+				else throw;
+				netPtr->addSource(outPin);
+
+				// Populate tileLut2InstPin with the actual global net
+				if (type == "0" || type == "1") {
+					if (type == "0") net = "gnd";
+					else if (type == "1") net = "vcc";
+					else throw;
+					netPtrIt = mDesignPtr->findNet(net);
+				}
+				assert(netPtrIt != mDesignPtr->netsEnd());
+				genTileLut2InstPin(*netPtrIt, tileLut2InstPin);
+			}
+			else {
+				netPtr = *netPtrIt;
+				genTileLut2InstPin(netPtr, tileLut2InstPin);
+			}
+
+			Tilewire twLast;
+			while (fs >> node >> inode >> rr_type) {
+				assert(node == "Node:");
+				fs.ignore(2, '(');
+				fs >> xlow;
+				fs.ignore(1, ',');
+				fs >> ylow;
+
+				if (rr_type == "CHANX" || rr_type == "CHANY") {
+					const Tilewire &tw = inode2tw[inode-inodeOffset];
+					// If its the first tilewire of the net, then
+					// it must be the OPIN
+					if (twLast.isUndefined()) {
+						const ExtendedWireInfo ewi(mDDB, tw);
+						// If pin is A, but routing starts at AMUX, add an A -> AMUX routethrough pip
+						if (ends_with(ewi.mWireName, "MUX")) {
+							assert(netPtr->hasOneSource());
+							InstancePinSharedPtr srcPin = *netPtr->sourcesBegin();
+							const string& srcPinName = srcPin->getPinName();
+							if (srcPinName == "A" || srcPinName == "B" || srcPinName == "C" || srcPinName == "D") {
+								string srcPinWireName(ewi.mWireName);
+								srcPinWireName.erase(srcPinWireName.length()-3, string::npos);
+								const Pip& p = Factory::newPip(ewi.mTileName, srcPinWireName,
+										ewi.mWireName, ePipUnidirectionalBuffered);
+								assert(!netPtr->containsPip(p));
+								netPtr->addPip(p);
+							}
+						}
+					}
+					// If tilewire has already been marked as used (by us)
+					// then it means this is a branch point -- just ignore it
+					// so that it becomes twLast for use on the next tilewire
+					else if (!wu.isUsed(tw)) {
+						const Arc& a = findArc(twLast, tw);
+						assert(!a.isUndefined());
+						wu.use(twLast);
+						wu.use(tw);
+						//ddb.useSegment(tw);
+
+						ExtendedWireInfo ewiSrc(mDDB, a.getSourceTilewire());
+						ExtendedWireInfo ewiSnk(mDDB, a.getSinkTilewire());
+						const Pip& p = Factory::newPip(ewiSrc.mTileName, ewiSrc.mWireName,
+								ewiSnk.mWireName, ePipUnidirectionalBuffered);
+						assert(!netPtr->containsPip(p));
+						netPtr->addPip(p);
+					}
+					twLast = tw;
+				}
+				// If we arrive at an IPIN, look at the last tilewire and do
+				// any pin swapping necessary
+				else if (rr_type == "IPIN") {
+					assert(!twLast.isUndefined());
+					const auto& ewi = ExtendedWireInfo(mDDB, twLast);
+					const string wireName(ewi.mWireName);
+					if (isClb(ewi.mTileTypeName) 
+							&& wireName.back() >= '1' && wireName.back() <= '6') {
+						// From "CLBLL_L_A6" extract the "L_A" which indicates the site (L/M/LL) and the LUT
+						const auto& tileLut = make_tuple(ewi.mTileIndex, wireName.substr(6, wireName.length()-6-1));
+						auto it = tileLut2InstPin.find(tileLut);
+						if (it == tileLut2InstPin.end()) {
+							cout << netPtr->getName() << " to " << get<1>(tileLut) << " of " << ewi << " not found!" << endl;
+							throw;
+						}
+						assert(it != tileLut2InstPin.end());
+						const auto& newPinName = wireName.substr(wireName.length()-2, string::npos);
+						const char& lut = newPinName[0];
+						auto jt = it->second.rbegin(), je = it->second.rend();
+						for (; jt != je; ++jt) {
+							InstancePinSharedPtr instPinPtr = *jt;
+							// From "CLBLL_L_A6" extract the "A6"
+							const auto oldPinName = instPinPtr->getPinName();
+							InstanceSharedPtr instPtr = instPinPtr->getInstancePtr().lock();
+							// Do not swap vcc nets that go from/to [ABCD]6 of fractured LUTs
+							if (netPtr->getNetType() == torc::physical::eNetTypePower 
+									&& (oldPinName[1] == '6'|| newPinName[1] == '6')) {
+								const string& cfg6 = stringify(lut,"6LUT");
+								string n, v;
+								instPtr->getConfig(cfg6, n, v);
+								if (v.find("(A6+~A6)") != string::npos)
+									continue;
+							}
+							if (oldPinName != newPinName) {
+								instPinPtr->setPinName(newPinName);
+
+								// Check if LUT is a "pack-thru" (i.e. mode == "wire")
+								// and pin swap that if necessary
+								const string& cfg6 = stringify(lut,"6LUT");
+								string n, v;
+								instPtr->getConfig(cfg6, n, v);
+								if (starts_with(n, escape(net))
+										&& regex_match(v, regex(stringify("#LUT:O6=(\\(A6\\+~A6\\)\\*)?A",oldPinName[1]))))
+									instPtr->setConfig(cfg6, n, stringify(v.substr(0,v.length()-1), newPinName[1]));
+								const string& cfg5 = stringify(lut,"5LUT");
+								instPtr->getConfig(cfg5, n, v);
+								if (starts_with(n, escape(net))
+										&& regex_match(v, regex(stringify("#LUT:O5=A",oldPinName[1]))))
+									instPtr->setConfig(cfg5, n, stringify("#LUT:O5=A",newPinName[1]));
+
+								it->second.erase(--jt.base());
+								break;
+							}
+						}
+
+					}
+					twLast = Tilewire();
+				}
+
+				fs.ignore(1024, '\n');
+
+				const int &p = fs.peek();
+				if (p == EOF)
+					break;
+				if (p != 'N') {
+					if (p != '\n')
+						cout << p << " (" << static_cast<int>(p) << ")" << endl;
+					assert(p == '\n');
+					break;
+				}
+			}
+		}
+	}
+}
+
+
+Arc design::findArc(const Tilewire &twSrc, const Tilewire &twSnk) {
+	TilewireVector vSrcSeg, vSnkSeg;
+	mDDB.expandSegment(twSrc, vSrcSeg);
+	mDDB.expandSegment(twSnk, vSnkSeg);
+	for (const auto &tw : vSnkSeg) {
+		TilewireVector v;
+		mDDB.expandTilewireSources(tw, v);
+		auto it = find_first_of(v.begin(), v.end(), vSrcSeg.begin(), vSrcSeg.end());
+		if (it != v.end()) {
+			return Arc(*it,tw);
+		}
+	}
+	throw;
+}
+
+
+void design::readInode2Tw(vector<Tilewire> &inode2tw, int &inodeOffset) {
+	const string& fn = stringify(mDesignPtr->getDevice(), mDesignPtr->getPackage(), ".tws");
+	ifstream fs(fn, ios::binary);
+	if (!fs) {
+		cout << "readInode2Tw() failed: '" << fn << "' not found!" << endl;
+		throw;
+	}
+	fs.seekg(0, fs.end);
+	const size_t size = (fs.tellg()/sizeof(Tilewire))-sizeof(int);
+	inode2tw.resize(size);
+	fs.seekg(0, fs.beg);
+	fs.read(reinterpret_cast<char*>(&inodeOffset), sizeof(int));
+	fs.read(reinterpret_cast<char*>(inode2tw.data()), inode2tw.size()*sizeof(Tilewire));
+	fs.close();
+}
+
+void design::addInputPort(InstanceSharedPtr instPtr) {
+	const int &depth = get_depth();
+	check(XML_READER_TYPE_ELEMENT, depth, "port");
+	string name = get_attribute("name");
+	advance(XML_READER_TYPE_TEXT, depth+1, "#text");
+	const string &text = trim(get_value());
+	skip(depth+1);
+
+	static const regex re("\\s+");
+	sregex_token_iterator split_first{text.begin(), text.end(), re, -1}, split_last;
+	const vector<string> &vText = {split_first, split_last};
+
+	if (vText.size() == 1) {
+		if (vText[0] != "open")
+			addSink(vText[0], instPtr, name);
+		return;
+	}
+		
+	// If there a space exists, then this must be a vector,
+	// so start counting from -1
+	int index = 0;
+	// By default, increment by 1
+	int incr = 1;
+
+	// Exception is [ABCD]6-1, which starts at 6 and decrements
+	if (name == "A6-1" || name == "B6-1" || name == "C6-1" || name == "D6-1") {
+		name = name[0];
+		index = 6;
+		incr = -1;
+	}
+
+	for (const auto &net : vText) {
+		if (net != "open")
+			addSink(net, instPtr, stringify(name, index));
+		index += incr;
+	}
+}
+
+void design::parseInputPort(map<string,string>& inputs) {
+	const int& depth = get_depth();
+	check(XML_READER_TYPE_ELEMENT, depth, "port");
+	string name = get_attribute("name");
+	// Remove "s0_" and "s1_" used to diffrentiate
+	// RAMB18 ports from RAMB36 ones
+	if (starts_with(name, "s0_") || starts_with(name, "s1_"))
+		name = name.substr(3,string::npos);
+	advance(XML_READER_TYPE_TEXT, depth+1, "#text");
+	const string& text = get_value();
+
+	static const regex re("\\s+");
+	sregex_token_iterator split_first{text.begin(), text.end(), re, -1}, split_last;
+	const vector<string> &vText = {split_first, split_last};
+
+	if (vText.size() == 1) {
+		if (vText[0] != "open") {
+			bool b = inputs.insert(make_pair(name,vText[0])).second;
+			assert(b);
+		}
+		return;
+	}
+
+	// If there a space exists, then this must be a vector,
+	// so start counting from -1
+	int index = 0;
+	// By default, increment by 1
+	int incr = 1;
+
+	// Exception is [ABCD]6-1, which starts at 6 and decrements
+	if (name == "A6-1" || name == "B6-1" || name == "C6-1" || name == "D6-1") {
+		name = name[0];
+		index = 6;
+		incr = -1;
+	}
+		
+	for (const auto &net : vText) {
+		if (net != "open") {
+			bool b = inputs.insert(make_pair(stringify(name, index),net)).second;
+			assert(b);
+		}
+		index += incr;
+	}
+}
+
+void design::addOutputPort(InstanceSharedPtr instPtr) {
+	const int &depth = get_depth();
+	check(XML_READER_TYPE_ELEMENT, depth, "port");
+	const string &name = get_attribute("name");
+	advance(XML_READER_TYPE_TEXT, depth+1, "#text");
+	const string &text = get_value();
+	skip(depth+1);
+
+	static const regex re("\\s+");
+	sregex_token_iterator split_first{text.begin(), text.end(), re, -1}, split_last;
+	const vector<string> &vText = {split_first, split_last};
+
+	if (vText.size() == 1) {
+		if (vText[0] != "open")
+			addSource(vText[0], instPtr, to_upper_copy(name));
+		return;
+	}
+		
+	// If there a space exists, then this must be a vector,
+	// so start counting from 0
+	int index = 0;
+	// By default, increment by 1
+	int incr = 1;
+
+	for (const auto &net : vText) {	
+		if (net != "open") {
+			addSource(net, instPtr, to_upper_copy(stringify(name, index)));
+		}
+		index += incr;
+	}
+}
+
+void design::parseOutputPort(map<string,string>& outputs) {
+	const int& depth = get_depth();
+	check(XML_READER_TYPE_ELEMENT, depth, "port");
+	const string& name = get_attribute("name");
+	advance(XML_READER_TYPE_TEXT, depth+1, "#text");
+	const string& text = get_value();
+	// Check only one signal
+	assert(text.find_first_of(whitespace) == string::npos);
+
+	bool b = outputs.insert(make_pair(name,text)).second;
+	assert(b);
+
+	skip(depth);
+}
+
+void design::parseLUT6(
+		InstanceSharedPtr instPtr, 
+		const char& lut, 
+		const string& bleName,
+		const map<string,string>& parentInputs,
+		const map<string,string>& parentOutputs
+		) {
+	string name = get_attribute("name");
+	const string &instance = get_attribute("instance");
+	const string &mode = get_attribute("mode");
+	// Blank LUT
+	if (name == "open") {
+		if (mode != "wire") {
+			assert(mode.empty());
+			return;
+		}
+	}
+	string net = name;
+
+	// Parse LUT inputs
+	advance(XML_READER_TYPE_ELEMENT, 4, "inputs");
+	advance(XML_READER_TYPE_ELEMENT, 5, "port");
+	assert(get_attribute("name") == "in");
+	advance(XML_READER_TYPE_TEXT, 6, "#text");
+	char ipin = '\0';
+	if (mode == "wire") {
+		const string &inputs = get_value();
+		static const regex re("\\s+");
+		sregex_token_iterator split_first{inputs.begin(), inputs.end(), re, -1}, split_last;
+		const vector<string> &vInputs = {split_first, split_last};
+		if (instance == "LUT6[0]") {
+			assert(vInputs.size() == 6);
+			ipin = '6';
+		}
+		else if (instance == "LUT5[0]" || instance == "LUT5[1]") {
+			assert(vInputs.size() == 5);
+			ipin = '5';
+		}
+		else throw;
+		
+		bool found = false;
+		for (const auto &v : vInputs) {
+			assert(ipin > '0');
+			if (v != "open") {
+				assert(!found);
+				found = true;
+			}
+			if (!found)
+				--ipin;
+		}
+		assert(found);
+
+		auto it = parentInputs.find(stringify(lut, ipin));
+		assert(it != parentInputs.end());
+		name = stringify(it->second, "|", instPtr->getName());
+		net = it->second;
+	}
+	skip(4);
+
+	assert(net != "open");
+
+	// Ignore LUT outputs (because there is no ambiguity)
+	skip(XML_READER_TYPE_ELEMENT, 4, "outputs");
+
+	// Ignore LUT clocks (because there are none)
+	skip(XML_READER_TYPE_ELEMENT, 4, "clocks");
+
+	string outputs;
+	if (starts_with(mode, "LUT")) {
+		advance(XML_READER_TYPE_ELEMENT, 4, "block");
+		assert(get_attribute("name") == name);
+		assert(get_attribute("instance") == "lut[0]");
+
+		// Ignore LUT inputs (because there is no ambiguity)
+		skip(XML_READER_TYPE_ELEMENT, 5, "inputs");
+
+		// Parse LUT outputs
+		advance(XML_READER_TYPE_ELEMENT, 5, "outputs");
+		advance(XML_READER_TYPE_ELEMENT, 6, "port");
+		assert(get_attribute("name") == "out");
+		advance(XML_READER_TYPE_TEXT, 7, "#text");
+		outputs = get_value();
+		// Check only one output exists, and same as LUT name
+		assert(outputs.find_first_of(whitespace) == string::npos);
+		assert(outputs == name);
+	}
+
+	if (instance == "LUT6[0]") {
+		const string& config = stringify(lut, "6LUT");
+		
+		if (mode == "wire") {
+			name = escape(stringify(name, "|rt", lut, "6"));
+			assert(ipin);
+			instPtr->setConfig(config, name, stringify("#LUT:O6=A",ipin));
+		}
+		else if (mode == "LUT6") {
+			name = escape(name);
+			instPtr->setConfig(config, name, "#LUT:O6=");
+			bool b = mNet2InstCfg.insert(make_pair(net, make_tuple(instPtr,config))).second;
+			assert(b);
+
+			if (name == "gnd")
+				instPtr->setConfig(config, name, "#LUT:O6=0");
+			else if (name == "vcc")
+				instPtr->setConfig(config, name, "#LUT:O6=1");
+		}
+		else throw;
+
+		if (net != "gnd" && net != "vcc") {
+			// Activate A if either A or AMUX are O6
+			const string& out = parentOutputs.at(stringify("A"));
+			const string& outMUX = parentOutputs.at(stringify("AMUX"));
+			if (out == "LUT6[0].out[0]->A" || outMUX == "LUT6[0].out[0]->AMUX") {
+				addSource(net, instPtr, stringify(lut));
+				instPtr->setConfig(stringify(lut, "USED"), "", "0");
+			}
+		}
+
+		if (!mBels.insert(name).second) {
+			cout << config << ":" << name << " duplicated!" << endl;
+			throw;
+		}
+	}
+	else if (instance == "LUT5[0]" || instance == "LUT5[1]") {
+		if (instance == "LUT5[0]") {
+			const string& config = stringify(lut, "6LUT");
+			if (mode == "wire") {
+				name = escape(stringify(name, "|rt", lut, "6"));
+				assert(ipin);
+				instPtr->setConfig(config, name, stringify("#LUT:O6=A",ipin));
+			}
+			else if (mode == "LUT5") {
+				name = escape(name);
+				// Place holder for fractured LUT
+				instPtr->setConfig(config, name, "#LUT:O6=");
+				bool b = mNet2InstCfg.insert(make_pair(net, make_tuple(instPtr,config))).second;
+				assert(b);
+
+				if (name == "gnd")
+					instPtr->setConfig(config, name, "#LUT:O6=0");
+				else if (name == "vcc") 
+					instPtr->setConfig(config, name, "#LUT:O6=1");
+			}
+			else throw;
+
+			if (net != "gnd" && net != "vcc") {
+				// Activate A if either A or AMUX are O6
+				const string& out = parentOutputs.at(stringify("A"));
+				const string& outMUX = parentOutputs.at(stringify("AMUX"));
+				if (out == "LUT5[0].out[0]->A" || outMUX == "LUT5[0].out[0]->AMUX") {
+					addSource(net, instPtr, stringify(lut));
+					instPtr->setConfig(stringify(lut, "USED"), "", "0");
+				}
+			}
+
+			if (!mBels.insert(name).second) {
+				cout << config << ":" << name << " duplicated!" << endl;
+				throw;
+			}
+		}
+		else if (instance == "LUT5[1]") {
+			const string& config = stringify(lut, "5LUT");
+			if (mode == "wire") {
+				name = escape(stringify(name, "|rt", lut, "5"));
+				assert(ipin);
+				instPtr->setConfig(config, name, stringify("#LUT:O5=A",ipin));
+			}
+			else if (mode == "LUT5") {
+				name = escape(name);
+				instPtr->setConfig(config, name, "#LUT:O5=");
+				bool b = mNet2InstCfg.insert(make_pair(net, make_tuple(instPtr,config))).second;
+				assert(b);
+
+				if (net == "gnd")
+					instPtr->setConfig(config, name, "#LUT:O5=0");
+				else if (net == "vcc") 
+					instPtr->setConfig(config, name, "#LUT:O5=1");
+			}
+			else throw;
+
+			if (net != "gnd" && net != "vcc") {
+				const string& outMUX = parentOutputs.at(stringify("AMUX"));
+				if (outMUX == "LUT5[1].out[0]->AMUX") {
+					assert(!instPtr->hasConfig(stringify(lut, "OUTMUX")));
+					instPtr->setConfig(stringify(lut, "OUTMUX"), "", "O5");
+					addSource(net, instPtr, stringify(lut,"MUX"));
+				}
+			}
+
+			// If O6 and O5 are both used, fracture O6 by tying A6 to vcc
+			const string &cfg6 = stringify(lut,"6LUT");
+			if (instPtr->hasConfig(cfg6)) {
+				string n, v;
+				instPtr->getConfig(cfg6, n, v);
+				v.insert(v.rfind('=')+1, "(A6+~A6)*");
+				instPtr->setConfig(cfg6, n, v);
+				addSink("vcc", instPtr, stringify(lut,"6"));
+			}
+
+			if (!mBels.insert(name).second) {
+				cout << config << ":" << name << " duplicated!" << endl;
+				throw;
+			}
+		}
+		else throw;
+	}
+	else throw;
+
+	skip(3);
+}
+
+void design::parseLUT7(
+		InstanceSharedPtr instPtr, 
+		const char& lut, 
+		const string& bleName,
+		const map<string,string>& parentInputs,
+		const map<string,string>& parentOutputs
+		) {
+	assert(lut == 'A' || lut == 'C');
+	const string &name = get_attribute("name");
+	if (name == "open") {
+		return;
+	}
+	string net = name;
+
+	// HACK: Dummy mask used for now
+	instPtr->setConfig(stringify(static_cast<char>(lut+0),"6LUT"), stringify(escape(name), "|lut7a"), "#LUT:O6=A6@A5@A4@A3@A2@A1");
+	instPtr->setConfig(stringify(static_cast<char>(lut+1),"6LUT"), stringify(escape(name), "|lut7b"), "#LUT:O6=A6@A5@A4@A3@A2@A1");
+	switch (lut) {
+		case 'A': instPtr->setConfig("F7AMUX", stringify(escape(name), "|f7"), ""); break;
+		case 'C': instPtr->setConfig("F7BMUX", stringify(escape(name), "|f7"), ""); break;
+		default: throw;
+	}
+
+	const string& out = parentOutputs.at("AMUX");
+	// If out is used, or if it out and FF are not used
+	if (out == "LUT7[0].F7[0]->AMUX" || parentOutputs.at("AQ") == "open") {
+		if (out == "open" && parentOutputs.at("AQ") == "open")
+			cout << "parseLUT7(): LUT " << name << " does not exit SLICEL!" << endl;
+		instPtr->setConfig(stringify(lut, "OUTMUX"), "", "F7");
+		addSource(net, instPtr, stringify(lut, "MUX"));
+	}
+	else assert(out == "open");
+
+	skip(3);
+}
+
+void design::parseLUT8(
+		InstanceSharedPtr instPtr, 
+		const char& lut, 
+		const string& bleName,
+		const map<string,string>& parentInputs,
+		const map<string,string>& parentOutputs
+		) {
+	assert(lut == 'B');
+	const string &name = get_attribute("name");
+	assert(name != "open");
+	string net = name;
+
+	// HACK: Dummy mask used for now
+	instPtr->setConfig("A6LUT", stringify(escape(name), "|lut8a"), "#LUT:O6=A6@A5@A4@A3@A2@A1");
+	instPtr->setConfig("B6LUT", stringify(escape(name), "|lut8b"), "#LUT:O6=A6@A5@A4@A3@A2@A1");
+	instPtr->setConfig("C6LUT", stringify(escape(name), "|lut8c"), "#LUT:O6=A6@A5@A4@A3@A2@A1");
+	instPtr->setConfig("D6LUT", stringify(escape(name), "|lut8d"), "#LUT:O6=A6@A5@A4@A3@A2@A1");
+	instPtr->setConfig("F7AMUX", stringify(escape(name), "|f7a"), "");
+	instPtr->setConfig("F7BMUX", stringify(escape(name), "|f7b"), "");
+	instPtr->setConfig("F8MUX", stringify(escape(name), "|f8"), "");
+
+	const string& out = parentOutputs.at(stringify(lut, "MUX"));
+	// If out is used, or if it out and FF are not used
+	if (out == "LUT8[0].F8[0]->BMUX" || parentOutputs.at("BQ") == "open") {
+		if (out == "open" && parentOutputs.at("BQ") == "open")
+			cout << "parseLUT8(): LUT " << name << " does not exit SLICEL!" << endl;
+		instPtr->setConfig("BOUTMUX", "", "F8");
+		addSource(net, instPtr, "BMUX");
+	}
+	else assert(out == "open");
+
+	skip(3);
+}
+
+
+void design::parseXADDER(
+		InstanceSharedPtr instPtr, 
+		const char& lut, 
+		const map<string,string>& parentOutputs
+		) {
+	const string &name = get_attribute("name");
+	const string &mode = get_attribute("mode");
+	const string &instance = get_attribute("instance");
+	// Blank XADDER
+	if (name == "open") {
+		assert(mode.empty());
+		return;
+	}
+
+	// Parse XADDER inputs
+	advance(XML_READER_TYPE_ELEMENT, 4, "inputs");
+	advance(XML_READER_TYPE_ELEMENT, 5, "port");
+	assert(get_attribute("name") == "a_xor_b");
+	advance(XML_READER_TYPE_TEXT, 6, "#text");
+	const string &a_xor_b = get_value();
+	assert(a_xor_b.find_first_of(whitespace) == string::npos);
+	skip(5);
+	advance(XML_READER_TYPE_ELEMENT, 5, "port");
+	assert(get_attribute("name") == "a_and_b");
+	advance(XML_READER_TYPE_TEXT, 6, "#text");
+	const string &a_and_b = get_value();
+	assert(a_and_b.find_first_of(whitespace) == string::npos);
+	skip(5);
+	advance(XML_READER_TYPE_ELEMENT, 5, "port");
+	assert(get_attribute("name") == "cin");
+	advance(XML_READER_TYPE_TEXT, 6, "#text");
+	const string &cin = get_value();
+	assert(cin.find_first_of(whitespace) == string::npos);
+	skip(4);
+
+	// Parse XADDER outputs
+	advance(XML_READER_TYPE_ELEMENT, 4, "outputs");
+	advance(XML_READER_TYPE_ELEMENT, 5, "port");
+	assert(get_attribute("name") == "sumout");
+	advance(XML_READER_TYPE_TEXT, 6, "#text");
+	const string &sumout = get_value();
+	assert(sumout.find_first_of(whitespace) == string::npos);
+	skip(5);
+	advance(XML_READER_TYPE_ELEMENT, 5, "port");
+	assert(get_attribute("name") == "cout");
+	advance(XML_READER_TYPE_TEXT, 6, "#text");
+	const string &carryout = get_value();
+	assert(carryout.find_first_of(whitespace) == string::npos);
+	skip(4);
+
+	// Ignore XADDER clocks (because there are none)
+	skip(XML_READER_TYPE_ELEMENT, 4, "clocks");
+
+	assert(instance == "XADDER[0]");
+
+	assert(a_xor_b == "LUT5[0].out[0]->XADDER_a" /*|| a_xor_b == "open"*/);
+
+	if (a_and_b == "LUT5[1].out[0]->XADDER_b")
+		instPtr->setConfig(stringify(lut, "CY0"),
+				"",
+				"O5");
+	else if (a_and_b == "ble6.AX[0]->XADDER_b")
+		instPtr->setConfig(stringify(lut, "CY0"),
+				"",
+				stringify(lut, "X"));
+	else assert(a_and_b == "open");
+
+	if (cin == "open") {
+		instPtr->setConfig("PRECYINIT", "", "0");
+	}
+
+	//if (sumout != "open") {
+		const string& outMUX = parentOutputs.at(stringify("AMUX"));
+		assert(!instPtr->hasConfig(stringify(lut, "OUTMUX")));
+		instPtr->setConfig(stringify(lut, "OUTMUX"), "", "XOR");
+		if (outMUX == "XADDER[0].sumout[0]->AMUX") {
+			addSource(sumout, instPtr, stringify(lut,"MUX"));
+		}
+	//}
+
+	if (carryout != "open") {
+		const string& outMUX = parentOutputs.at(stringify("AMUX"));
+		const string& outCOUT = parentOutputs.at(stringify("COUT"));
+		if (lut == 'D') {
+			// If DMUX and COUT are both used, activate COUT and rely on route-through
+			if (outCOUT == "XADDER[0].cout[0]->COUT" || outMUX == "XADDER[0].cout[0]->AMUX") {
+				assert(!instPtr->hasConfig("COUTUSED"));
+				instPtr->setConfig("COUTUSED", "", "0");
+				addSource(carryout, instPtr, "COUT");
+			}
+		}
+		else if (outMUX == "XADDER[0].cout[0]->AMUX") {
+			assert(!instPtr->hasConfig(stringify(lut, "OUTMUX")));
+			instPtr->setConfig(stringify(lut, "OUTMUX"), "", "CY");
+			addSource(carryout, instPtr, stringify(lut,"MUX"));
+		}
+	}
+
+	/* Unless [ABCD]MUX is set to sumout (or carryout, which is currently impossible)
+	 * then this CARRY4 bel is "non-existent" according to xdl2ncd */
+	if (sumout != "open" /*|| carryout != "open"*/)
+		instPtr->setConfig("CARRY4", stringify(escape(instPtr->getName()),".CARRY4"), "");
+
+	skip(3);
+}
+
+
+void design::parseFF(
+		InstanceSharedPtr instPtr, 
+		const char& lut, 
+		const map<string,string>& parentOutputs
+		) {
+	const string &name = get_attribute("name");
+	const string &mode = get_attribute("mode");
+	const string &instance = get_attribute("instance");
+	// Blank FF
+	if (name == "open") {
+		assert(mode.empty());
+		return;
+	}
+
+	// Parse FF inputs
+	advance(XML_READER_TYPE_ELEMENT, 4, "inputs");
+	advance(XML_READER_TYPE_ELEMENT, 5, "port");
+	assert(get_attribute("name") == "D");
+	advance(XML_READER_TYPE_TEXT, 6, "#text");
+	const string &inputs = get_value();
+	assert(inputs.find_first_of(whitespace) == string::npos);
+	skip(4);
+
+	// Parse FF outputs
+	advance(XML_READER_TYPE_ELEMENT, 4, "outputs");
+	advance(XML_READER_TYPE_ELEMENT, 5, "port");
+	assert(get_attribute("name") == "Q");
+	advance(XML_READER_TYPE_TEXT, 6, "#text");
+	const string &outputs = get_value();
+	assert(outputs == name);
+	assert(inputs.find_first_of(whitespace) == string::npos);
+	skip(4);
+
+	// Ignore FF clocks (because there is no ambiguity)
+	skip(XML_READER_TYPE_ELEMENT, 4, "clocks");
+
+	if (instance == "FF[0]") {
+		instPtr->setConfig(stringify(lut, "FF"), escape(name), "#FF");
+
+		string ffmux;
+		if (inputs == "LUT6[0].out[0]->FF[0].D" || inputs == "LUT5[0].out[0]->FF[0].D")
+			ffmux = "O6";
+		else if (inputs == "LUT5[1].out[0]->FF[0].D")
+			ffmux = "O5";
+		else if (inputs == "ble6.AX[0]->FF[0].D") 
+			ffmux = stringify(lut, "X");
+		else if (inputs == "XADDER[0].sumout[0]->FF[0].D")
+			ffmux = "XOR";
+		else if (inputs == "LUT7[0].F7[0]->AFF")
+			ffmux = "F7";
+		else if (inputs == "LUT8[0].F8[0]->BFF")
+			ffmux = "F8";
+		else throw;
+		
+		if (inputs == "ble6.AX[0]->FF[0].D")
+			instPtr->setConfig(stringify(lut, "FFMUX"),
+					"",
+					stringify(lut,"X"));
+		else
+			instPtr->setConfig(stringify(lut, "FFMUX"), "", ffmux);
+		string out;
+		if (ffmux == "F8") {
+			out = parentOutputs.at("BQ");
+			assert(out == "FF[0].Q[0]->BQ");
+		}
+		else {
+			out = parentOutputs.at("AQ");
+			assert(out == "FF[0].Q[0]->AQ");
+		}
+		addSource(name, instPtr, stringify(lut,"Q"));
+	}
+	else if (instance == "FF[1]") {
+		instPtr->setConfig(stringify(lut, "5FF"),
+				escape(name),
+				"");
+		const char *ffmux;
+		if (inputs == "LUT5[1].out[0]->FF[1].D")
+			ffmux = "IN_A";
+		else if (inputs == "ble6.AX[0]->FF[1].D")
+			ffmux = "IN_B";
+		else throw;
+		instPtr->setConfig(stringify(lut, "5FFMUX"),
+				"",
+				ffmux);
+		const string& out = parentOutputs.at(stringify("AMUX"));
+		assert(out == "FF[1].Q[0]->AMUX");
+		assert(!instPtr->hasConfig(stringify(lut, "OUTMUX")));
+		instPtr->setConfig(stringify(lut, "OUTMUX"),
+				"",
+				stringify(lut,"5Q"));
+		addSource(name, instPtr, stringify(lut,"MUX"));
+
+	}
+	else throw;
+
+	if (!instPtr->hasConfig("CLKINV"))
+		instPtr->setConfig("CLKINV", "", "CLK");
+
+	skip(3);
+}
+
+void design::parseBLE6(InstanceSharedPtr instPtr, 
+		const char& lut,
+		const map<string,string>& parentInputs
+		) {
+	const string &name = get_attribute("name");
+	const string &mode = get_attribute("mode");
+
+	if (name == "open") {
+		assert(mode.empty());
+		return;
+	}
+	assert(mode == "O6LUT" || mode == "O6O5LUT" || mode == "O6O5LUT_XADDER");
+
+	// Ignore BLE inputs (because there is no ambiguity)
+	skip(XML_READER_TYPE_ELEMENT, 3, "inputs");
+
+	// Parse BLE outputs
+	advance(XML_READER_TYPE_ELEMENT, 3, "outputs");
+	map<string,string> outputs;
+	advance();
+	do {
+		parseOutputPort(outputs);
+		advance();
+	} while (get_depth() > 3);
+
+	// Ignore BLE clocks (because there is no ambiguity)
+	skip(XML_READER_TYPE_ELEMENT, 3, "clocks");
+
+	int nblock;
+	if (mode == "O6O5LUT_XADDER")
+		nblock = 5;
+	else if (mode == "O6O5LUT")
+		nblock = 4;
+	else if (mode == "O6LUT")
+		nblock = 3;
+	else throw;
+
+	for (int i = 0; i < nblock; ++i) {
+		advance(XML_READER_TYPE_ELEMENT, 3, "block");
+		const string &instance = get_attribute("instance");
+		if (instance == "LUT6[0]" || instance == "LUT5[0]" || instance == "LUT5[1]")
+			parseLUT6(instPtr, lut, name, parentInputs, outputs);
+		else if (instance == "XADDER[0]")
+			parseXADDER(instPtr, lut, outputs);
+		else if (instance == "FF[0]" || instance == "FF[1]")
+			parseFF(instPtr, lut, outputs);
+		else throw;
+	}
+
+	//cout << get_name() << " " << get_depth() << " " << get_value() << " " << get_attribute("name") << endl;
+	skip(2);
+}
+
+void design::parseBLE7(InstanceSharedPtr instPtr, 
+		const char& lut,
+		const map<string,string>& parentInputs
+		) {
+	const string &name = get_attribute("name");
+	const string &mode = get_attribute("mode");
+
+	if (name == "open") {
+		assert(mode.empty());
+		return;
+	}
+	assert(mode == "ble7");
+
+	// Ignore BLE inputs (because there is no ambiguity)
+	skip(XML_READER_TYPE_ELEMENT, 3, "inputs");
+
+	// Parse BLE outputs
+	advance(XML_READER_TYPE_ELEMENT, 3, "outputs");
+	map<string,string> outputs;
+	advance();
+	do {
+		parseOutputPort(outputs);
+		advance();
+	} while (get_depth() > 3);
+
+	// Ignore BLE clocks (because there is no ambiguity)
+	skip(XML_READER_TYPE_ELEMENT, 3, "clocks");
+
+	for (int i = 0; i < 2; ++i) {
+		advance(XML_READER_TYPE_ELEMENT, 3, "block");
+		const string &name = get_attribute("name");
+		const string &instance = get_attribute("instance");
+		if (instance == "LUT7[0]") {
+			parseLUT7(instPtr, lut, name, parentInputs, outputs);
+		}
+		else if (instance == "FF[0]") {
+			parseFF(instPtr, lut, outputs);
+		}
+		else throw;
+	}
+
+	skip(2);
+}
+
+void design::parseBLE8(InstanceSharedPtr instPtr, 
+		const char& lut,
+		const map<string,string>& parentInputs
+		) {
+	const string &name = get_attribute("name");
+	const string &mode = get_attribute("mode");
+
+	if (name == "open") {
+		assert(mode.empty());
+		return;
+	}
+	assert(mode == "ble8");
+
+	// Ignore BLE inputs (because there is no ambiguity)
+	skip(XML_READER_TYPE_ELEMENT, 3, "inputs");
+
+	// Parse BLE outputs
+	advance(XML_READER_TYPE_ELEMENT, 3, "outputs");
+	map<string,string> outputs;
+	advance();
+	do {
+		parseOutputPort(outputs);
+		advance();
+	} while (get_depth() > 3);
+
+	// Ignore BLE clocks (because there is no ambiguity)
+	skip(XML_READER_TYPE_ELEMENT, 3, "clocks");
+
+	for (int i = 0; i < 2; ++i) {
+		advance(XML_READER_TYPE_ELEMENT, 3, "block");
+		const string &instance = get_attribute("instance");
+		if (instance == "LUT8[0]") {
+			parseLUT8(instPtr, lut, name, parentInputs, outputs);
+		}
+		else if (instance == "FF[0]") {
+			parseFF(instPtr, lut, outputs);
+		}
+		else throw;
+	}
+
+	skip(2);
+}
+
+
+InstanceSharedPtr design::parseBlock(string& blockInstance) {
+	const string& name = get_attribute("name");
+	const string& instance = get_attribute("instance");
+	const string& type = instance.substr(0,instance.find_first_of('['));
+
+	InstanceSharedPtr instPtr = Factory::newInstancePtr(name, 
+								type,
+								"",
+								"");
+	bool b = mDesignPtr->addInstance(instPtr);
+	assert(b);
+	//cout << "Created " << instPtr->getType() << ": '" << instPtr->getName() << "'" << endl;
+
+	// Parse inputs
+	advance(XML_READER_TYPE_ELEMENT, 2, "inputs");
+	advance();
+	do {
+		addInputPort(instPtr);
+		advance();
+	} while (get_depth() > 2);
+
+	// Ignore outputs (because there is no ambiguity)
+	skip(XML_READER_TYPE_ELEMENT, 2, "outputs");
+
+	// Ignore clocks (because there are none)
+	skip(XML_READER_TYPE_ELEMENT, 2, "clocks");
+
+	// Parse block
+	advance(XML_READER_TYPE_ELEMENT, 2, "block");
+	assert(get_attribute("name") == name);
+	blockInstance = get_attribute("instance");
+
+	// Ignore block inputs
+	skip(XML_READER_TYPE_ELEMENT, 3, "inputs");
+
+	// Parse block outputs
+	advance(XML_READER_TYPE_ELEMENT, 3, "outputs");
+	advance();
+	while (get_depth() > 3) {
+		addOutputPort(instPtr);
+		advance();
+	}
+
+	return instPtr;
+}
+
+void design::parseIOB(void) {
+	const string& mode = get_attribute("mode");
+	assert(mode == "ibuf" || mode == "obuf");
+
+	string instance;
+	InstanceSharedPtr instPtr = parseBlock(instance);
+
+	if (instance == "ibuf[0]") {
+		instPtr->setConfig("IUSED", "", "0");
+		instPtr->setConfig("IBUF_LOW_PWR", "", "TRUE");
+		instPtr->setConfig("ISTANDARD", "", "LVCMOS25");
+	}
+	else if (instance == "obuf[0]") {
+		instPtr->setConfig("OUSED", "", "0");
+		instPtr->setConfig("OSTANDARD", "", "LVCMOS25");
+		instPtr->setConfig("DRIVE", "", "12");
+		instPtr->setConfig("SLEW", "", "SLOW");
+	}
+	else throw;
+	
+	skip(1);
+}
+
+
+
+void design::parsePS7() {
+	const string &mode = get_attribute("mode");
+	assert(mode == "PS7");
+
+	string instance;
+	InstanceSharedPtr instPtr = parseBlock(instance);
+	assert(instance == "PS[0]");
+
+	skip(1);
+}
+
+
+void design::parseBUFG(void) {
+	const string &mode = get_attribute("mode");
+	assert(mode == "BUFG");
+
+	string instance;
+	InstanceSharedPtr instPtr = parseBlock(instance);
+	assert(instance == "BUFGCTRL[0]");
+
+	skip(1);
+}
+
+void design::parseDSP(void) {
+	const string &mode = get_attribute("mode");
+	assert(mode == "mult_25x18_COMB");
+
+	string instance;
+	InstanceSharedPtr instPtr = parseBlock(instance);
+	assert(instance == "mult_25x18[0]");
+
+	instPtr->setConfig("ACASCREG", "", "0");
+	instPtr->setConfig("ADREG", "", "0");
+	instPtr->setConfig("ALUMODE0INV", "", "ALUMODE0");
+	instPtr->setConfig("ALUMODE1INV", "", "ALUMODE1");
+	instPtr->setConfig("ALUMODE2INV", "", "ALUMODE2");
+	instPtr->setConfig("ALUMODE3INV", "", "ALUMODE3");
+	instPtr->setConfig("ALUMODEREG", "", "0");
+	instPtr->setConfig("AREG", "", "0");
+	addSink("gnd", instPtr, "CEA1");
+	addSink("gnd", instPtr, "CEA2");
+	instPtr->setConfig("AUTORESET_PATDET", "", "NO_RESET");
+	instPtr->setConfig("A_INPUT", "", "DIRECT");
+
+	instPtr->setConfig("BCASCREG", "", "0");
+	instPtr->setConfig("BREG", "", "0");
+	addSink("gnd", instPtr, "CEB1");
+	addSink("gnd", instPtr, "CEB2");
+	instPtr->setConfig("B_INPUT", "", "DIRECT");
+
+	instPtr->setConfig("CARRYININV", "", "CARRYIN");
+	instPtr->setConfig("CARRYINREG", "", "0");
+	instPtr->setConfig("CARRYINSELREG", "", "0");
+	instPtr->setConfig("CLKINV", "", "CLK");
+	//instPtr->setConfig("CREG", "", "0");
+	//addSink("gnd", instPtr, "CEC");
+
+	instPtr->setConfig("DREG", "", "0");
+
+	instPtr->setConfig("INMODE0INV", "", "INMODE0");
+	instPtr->setConfig("INMODE1INV", "", "INMODE1");
+	instPtr->setConfig("INMODE2INV", "", "INMODE2");
+	instPtr->setConfig("INMODE3INV", "", "INMODE3");
+	instPtr->setConfig("INMODE4INV", "", "INMODE4");
+	addSink("vcc", instPtr, "INMODE2");
+	addSink("gnd", instPtr, "INMODE0");
+	addSink("gnd", instPtr, "INMODE1");
+	addSink("gnd", instPtr, "INMODE3");
+	addSink("gnd", instPtr, "INMODE4");
+	instPtr->setConfig("INMODEREG", "", "0");
+
+	instPtr->setConfig("MREG", "", "0");
+	addSink("gnd", instPtr, "CEM");
+
+	instPtr->setConfig("OPMODE0INV", "", "OPMODE0");
+	instPtr->setConfig("OPMODE1INV", "", "OPMODE1");
+	instPtr->setConfig("OPMODE2INV", "", "OPMODE2");
+	instPtr->setConfig("OPMODE3INV", "", "OPMODE3");
+	instPtr->setConfig("OPMODE4INV", "", "OPMODE4");
+	instPtr->setConfig("OPMODE5INV", "", "OPMODE5");
+	instPtr->setConfig("OPMODE6INV", "", "OPMODE6");
+	addSink("vcc", instPtr, "OPMODE0");
+	addSink("vcc", instPtr, "OPMODE2");
+	addSink("gnd", instPtr, "OPMODE1");
+	addSink("gnd", instPtr, "OPMODE3");
+	addSink("gnd", instPtr, "OPMODE4");
+	addSink("gnd", instPtr, "OPMODE5");
+	addSink("gnd", instPtr, "OPMODE6");
+	instPtr->setConfig("OPMODEREG", "", "0");
+
+	instPtr->setConfig("PREG", "", "0");
+	addSink("gnd", instPtr, "CEP");
+	
+	instPtr->setConfig("SEL_MASK", "", "MASK");
+	instPtr->setConfig("SEL_PATTERN", "", "PATTERN");
+
+	instPtr->setConfig("USE_DPORT", "", "FALSE");
+	instPtr->setConfig("USE_MULT", "", "MULTIPLY");
+	instPtr->setConfig("USE_PATTERN_DETECT", "", "NO_PATDET");
+	instPtr->setConfig("USE_SIMD", "", "ONE48");
+
+	instPtr->setConfig(instPtr->getType(), escape(instPtr->getName()), "");
+
+	stringstream ss;
+	ss << hex << 0x3fffffffffff;
+	instPtr->setConfig("MASK", "", ss.str());
+	ss.str("");
+	ss << setfill('0') << setw(12) << 0;
+	instPtr->setConfig("PATTERN", "", ss.str());
+	
+	skip(1);
+}
+
+void design::parseRAMB36(void) {
+	const string& mode = get_attribute("mode");
+	assert(mode.substr(0,9) == "RAMB36E1_");
+
+	const string& name = get_attribute("name");
+	const string& instance = get_attribute("instance");
+	const string& type = instance.substr(0,instance.find_first_of('['));
+	InstanceSharedPtr instPtr = Factory::newInstancePtr(name, 
+			type,
+			"",
+			"");
+	bool b = mDesignPtr->addInstance(instPtr);
+	assert(b);
+	map<string,string> inputs;
+	//cout << "Created " << instPtr->getType() << ": '" << instPtr->getName() << "'" << endl;
+
+	static const regex re("RAMB36E1_(\\d+)x(\\d+)_(REGAB|REGA|REGB|COMB)_([sd])p");
+	smatch m;
+	b = regex_match(mode, m, re);
+	assert(b);
+	const string& width = m[2];
+	const string& reg = m[3];
+	const string& ports = m[4];
+
+	// Parse RAMB inputs
+	advance(XML_READER_TYPE_ELEMENT, 2, "inputs");
+	advance();
+	do {
+		//addInputPort(instPtr);
+		parseInputPort(inputs);
+		skip(3);
+		advance();
+	} while (get_depth() > 2);
+
+	// Ignore RAMB outputs (because there is no ambiguity)
+	advance(XML_READER_TYPE_ELEMENT, 2, "outputs");
+	map<string,string> pinMap;
+	parseRAMB_outputs_top(3, pinMap, "DOADO");
+	skip(4);
+	parseRAMB_outputs_top(3, pinMap, "DOPADOP");
+	skip(4);
+	parseRAMB_outputs_top(3, pinMap, "DOBDO");
+	skip(4);
+	parseRAMB_outputs_top(3, pinMap, "DOPBDOP");
+	skip(4);
+	skip(2);
+
+	// Parse RAMB clocks
+	advance(XML_READER_TYPE_ELEMENT, 2, "clocks");
+	advance();
+	do {
+		addInputPort(instPtr);
+		advance();
+	} while (get_depth() > 2);
+
+	// Parse memory_slice
+	advance(XML_READER_TYPE_ELEMENT, 2, "block");
+	assert(get_attribute("mode") == "memory_slice");
+	const string& sliceInst = get_attribute("instance");
+	// Ignore memory_slice inputs
+	skip(XML_READER_TYPE_ELEMENT, 3, "inputs");
+	// Parse memory_slice outputs
+	advance(XML_READER_TYPE_ELEMENT, 3, "outputs");
+	if (ports == "s") {
+		parseRAMB_outputs_mid(4, pinMap, "out", sliceInst);
+		skip(5);
+	}
+	else if (ports == "d") {
+		parseRAMB_outputs_mid(4, pinMap, "out1", sliceInst);
+		skip(5);
+		parseRAMB_outputs_mid(4, pinMap, "out2", sliceInst);
+		skip(5);
+	}
+	else throw;
+	skip(3);
+
+	// Ignore memory_slice clocks
+	skip(XML_READER_TYPE_ELEMENT, 3, "clocks");
+
+	int islice = 0;
+	advance();
+	do {	
+		// Parse memory slice
+		check(XML_READER_TYPE_ELEMENT, 3, "block");
+		const string &memName = get_attribute("name");
+		if (memName != "open") {
+			const string &memInst = get_attribute("instance");
+			assert(memInst == stringify("memory_slice[",islice,"]"));
+
+			// Skip inputs
+			skip(XML_READER_TYPE_ELEMENT, 4, "inputs");
+
+			// Parse outputs
+			advance(XML_READER_TYPE_ELEMENT, 4, "outputs");
+
+			if (ports == "s") {
+				parseRAMB_outputs_bot(5, pinMap, "out", memInst, instPtr);
+				skip(5);
+			}
+			else if (ports == "d") {
+				parseRAMB_outputs_bot(5, pinMap, "out1", memInst, instPtr);
+				skip(5);
+				parseRAMB_outputs_bot(5, pinMap, "out2", memInst, instPtr);
+				skip(5);
+			}
+			else throw;
+			skip(4);
+			
+			// Skip clocks
+			skip(XML_READER_TYPE_ELEMENT, 4, "clocks");
+
+			skip(3);
+		}
+		++islice;
+		advance();
+	} while (get_depth() > 2);
+
+	// At its thinnest mode, connect DI[AB] to 1 as well as 0
+	if (width == "1") {
+		auto it = inputs.find("DIADI0");
+		if (it != inputs.end()) {
+			const string& net = it->second;
+			assert(net != "open");
+			bool b = inputs.insert(make_pair("DIADI1", net)).second;
+			assert(b);
+		}
+		it = inputs.find("DIBDI0");
+		if (it != inputs.end()) {
+			const string& net = it->second;
+			assert(net != "open");
+			bool b = inputs.insert(make_pair("DIBDI1", net)).second;
+			assert(b);
+		}
+	}
+	// At its widest mode, copy ADDRARDADDRL from ADDRBWRADDRL
+	else if (width == "72") {
+		for (int i = 0; i < 16; ++i) {
+			const string& name = stringify("ADDRBWRADDRL",i);
+			auto it = inputs.find(name);
+			if (it != inputs.end()) {
+				const string& net = it->second;
+				assert(net != "open");
+				bool b = inputs.insert(make_pair(stringify("ADDRARDADDRL",i),net)).second;
+				assert(b);
+			}
+		}
+	}
+
+	// Also tie high any unconnected ports (at the LSB end) of the address bus
+	bool foundA = false, foundB = false;
+	for (int i = 0; i < 16; ++i) {
+		if (ports == "d") {
+			const string& nameA = stringify("ADDRARDADDRL",i);
+			if (!foundA && inputs.count(nameA) == 0) {
+				bool b = inputs.insert(make_pair(nameA,"vcc")).second;
+				assert(b);
+			}
+		}
+		else foundA = true;
+		const string& nameB = stringify("ADDRBWRADDRL",i);
+		if (!foundB && inputs.count(nameB) == 0) {
+			bool b = inputs.insert(make_pair(nameB,"vcc")).second;
+			assert(b);
+		}
+		else foundB = true;
+	}
+
+	// Special case: duplicate WEAL0 and WEBWEL0 across all pins in vector,
+	// because VPR only accepts one pin for write enable
+	auto it = inputs.find("WEAL0");
+	if (it != inputs.end()) {
+		const string& name = it->first.substr(0,it->first.length()-1);
+		const string& net = it->second;
+		assert(net != "open");
+		for (int i = 1; i < 4; ++i) {
+			bool b = inputs.insert(make_pair(stringify(name, i), net)).second;
+			assert(b);
+		}
+	}
+	it = inputs.find("WEBWEL0");
+	if (it != inputs.end()) {
+		const string& name = it->first.substr(0,it->first.length()-1);
+		const string& net = it->second;
+		assert(net != "open");
+		for (int i = 1; i < 8; ++i) {
+			bool b = inputs.insert(make_pair(stringify(name, i), net)).second;
+			assert(b);
+		}
+	}
+	// For dual port RAMs, copy the first port clock to the second port
+	if (ports == "d") {
+		it = inputs.find("CLKARDCLKL");
+		if (it != inputs.end()) {
+			const string& net = it->second;
+			assert(net != "open");
+			bool b = inputs.insert(make_pair("CLKBWRCLKL", net)).second;
+			assert(b);
+		}
+	}
+
+	// Add inputs
+	for (const auto &it : inputs) {
+		const string& name = it.first;
+		const string& net = it.second;
+		assert(net != "open");
+		addSink(net, instPtr, name);
+	}
+
+	// Now copy all 'L' into 'U'
+	for (const auto &it : inputs) {
+		const string& name = it.first;
+		// ADDR{ARD,BWR}ADDRL15 does not have 'U' equiv
+		if (name == "ADDRARDADDRL15" || name == "ADDRBWRADDRL15"
+				|| starts_with(name, "DIADI")
+				|| starts_with(name, "DIPADIP")
+				|| starts_with(name, "DIBDI")
+				|| starts_with(name, "DIPBDIP")
+				|| starts_with(name, "DOADO")
+				|| starts_with(name, "DOPADOP")
+				|| starts_with(name, "DOBDO")
+				|| starts_with(name, "DOPBDOP")
+		   )
+			continue;
+		const string& net = it.second;
+		assert(net != "open");
+		if (name == "RSTRAMARSTRAMLRST")
+			addSink(net, instPtr, "RSTRAMARSTRAMU");
+		else {
+			auto pos = name.length()-1;
+			while (name[pos] >= '0' && name[pos] <= '9')
+				--pos;
+			assert(name[pos] == 'L');
+			string newName = name;
+			newName[pos] = 'U';
+			addSink(net, instPtr, newName);
+		}
+	}
+
+	instPtr->setConfig("CLKARDCLKLINV", "", "CLKARDCLKL");
+	instPtr->setConfig("CLKARDCLKUINV", "", "CLKARDCLKU");
+	instPtr->setConfig("CLKBWRCLKLINV", "", "CLKBWRCLKL");
+	instPtr->setConfig("CLKBWRCLKUINV", "", "CLKBWRCLKU");
+
+	if (reg == "REGAB") {
+		instPtr->setConfig("DOA_REG", "", "1");
+		instPtr->setConfig("DOB_REG", "", "1");
+	}
+	else if (reg == "REGA") {
+		instPtr->setConfig("DOA_REG", "", "1");
+		instPtr->setConfig("DOB_REG", "", "0");
+	}
+	else if (reg == "REGB") {
+		instPtr->setConfig("DOA_REG", "", "0");
+		instPtr->setConfig("DOB_REG", "", "1");
+	}
+	else if (reg == "COMB") {
+		instPtr->setConfig("DOA_REG", "", "0");
+		instPtr->setConfig("DOB_REG", "", "0");
+	}
+	else throw;
+
+	instPtr->setConfig("ENARDENLINV", "", "ENARDENL");
+	instPtr->setConfig("ENARDENUINV", "", "ENARDENU");
+	addSink("vcc", instPtr, "ENARDENL");
+	addSink("vcc", instPtr, "ENARDENU");
+	instPtr->setConfig("ENBWRENLINV", "", "ENBWRENL");
+	instPtr->setConfig("ENBWRENUINV", "", "ENBWRENU");
+	addSink("vcc", instPtr, "ENBWRENL");
+	addSink("vcc", instPtr, "ENBWRENU");
+	if (starts_with(mDDB.getDeviceName(), "xc7")) {
+		instPtr->setConfig("EN_ECC_READ", "", "FALSE");
+		instPtr->setConfig("EN_ECC_WRITE", "", "FALSE");
+		instPtr->setConfig("EN_PWRGATE", "", "NONE");
+	}
+
+	instPtr->setConfig("RAM_EXTENSION_A", "", "NONE");
+	instPtr->setConfig("RAM_EXTENSION_B", "", "NONE");
+	if (ports == "s")
+		instPtr->setConfig("RAM_MODE", "", "SDP");
+	else if (ports == "d")
+		instPtr->setConfig("RAM_MODE", "", "TDP");
+	else throw;
+
+	instPtr->setConfig("RDADDR_COLLISION_HWCONFIG", "", "DELAYED_WRITE");
+
+	instPtr->setConfig("READ_WIDTH_B", "", width);
+	if (ports == "d")
+		instPtr->setConfig("READ_WIDTH_A", "", width);
+	else
+		instPtr->setConfig("READ_WIDTH_A", "", "0");
+
+	instPtr->setConfig("REGCLKARDRCLKLINV", "", "REGCLKARDRCLKL");
+	instPtr->setConfig("REGCLKARDRCLKUINV", "", "REGCLKARDRCLKU");
+	addSink("gnd", instPtr, "REGCLKARDRCLKL");
+	addSink("gnd", instPtr, "REGCLKARDRCLKU");
+	instPtr->setConfig("REGCLKBLINV", "", "REGCLKBL");
+	instPtr->setConfig("REGCLKBUINV", "", "REGCLKBU");
+	addSink("gnd", instPtr, "REGCLKBL");
+	addSink("gnd", instPtr, "REGCLKBU");
+	instPtr->setConfig("RSTRAMARSTRAMLINV", "", "RSTRAMARSTRAML");
+	instPtr->setConfig("RSTRAMARSTRAMUINV", "", "RSTRAMARSTRAMU");
+	addSink("gnd", instPtr, "RSTRAMARSTRAML");
+	addSink("gnd", instPtr, "RSTRAMARSTRAMU");
+	instPtr->setConfig("RSTRAMBLINV", "", "RSTRAMBL");
+	instPtr->setConfig("RSTRAMBUINV", "", "RSTRAMBU");
+	addSink("gnd", instPtr, "RSTRAMBL");
+	addSink("gnd", instPtr, "RSTRAMBU");
+	instPtr->setConfig("RSTREGARSTREGLINV", "", "RSTREGARSTREGL");
+	instPtr->setConfig("RSTREGARSTREGUINV", "", "RSTREGARSTREGU");
+	addSink("gnd", instPtr, "RSTREGARSTREGL");
+	addSink("gnd", instPtr, "RSTREGARSTREGU");
+	instPtr->setConfig("RSTREGBLINV", "", "RSTREGBL");
+	instPtr->setConfig("RSTREGBUINV", "", "RSTREGBU");
+	addSink("gnd", instPtr, "RSTREGBL");
+	addSink("gnd", instPtr, "RSTREGBU");
+	instPtr->setConfig("RSTREG_PRIORITY_A", "", "RSTREG");
+	addSink("gnd", instPtr, "REGCEAREGCEL");
+	addSink("gnd", instPtr, "REGCEAREGCEU");
+	instPtr->setConfig("RSTREG_PRIORITY_B", "", "RSTREG");
+	addSink("gnd", instPtr, "REGCEBL");
+	addSink("gnd", instPtr, "REGCEBU");
+
+	instPtr->setConfig("SAVEDATA", "", "FALSE");
+
+	instPtr->setConfig("WRITE_MODE_A", "", "WRITE_FIRST");
+	instPtr->setConfig("WRITE_MODE_B", "", "WRITE_FIRST");
+
+	instPtr->setConfig("WRITE_WIDTH_B", "", width);
+	if (ports == "d")
+		instPtr->setConfig("WRITE_WIDTH_A", "", width);
+	else
+		instPtr->setConfig("WRITE_WIDTH_B", "", "0");
+
+	instPtr->setConfig(instPtr->getType(), escape(instPtr->getName()), "");
+
+	for (int i = 0; i < 0x80; ++i) {
+		stringstream ss[2];
+		ss[0] << setfill('0') << setw(2) << uppercase << hex << i;
+		ss[1] << setfill('0') << setw(64) << 0;
+		instPtr->setConfig(stringify("INIT_", ss[0].str()), "", ss[1].str());
+		if (i < 0x10)
+			instPtr->setConfig(stringify("INITP_", ss[0].str()), "", ss[1].str());
+	}
+
+	instPtr->setConfig("INIT_A","",  "000000000");
+	instPtr->setConfig("INIT_B", "", "000000000");
+	instPtr->setConfig("SRVAL_A", "", "000000000");
+	instPtr->setConfig("SRVAL_B", "", "000000000");
+
+	skip(1);
+}
+
+
+void design::parseRAMB_outputs_top(
+		const int& depth, 
+		map<string,string>& pinMap, 
+		const string& name) {
+	advance(XML_READER_TYPE_ELEMENT, depth, "port");
+	assert(get_attribute("name") == name);
+	advance(XML_READER_TYPE_TEXT, depth+1, "#text");
+	static const regex re("\\s+");
+	const string& value = get_value();
+	sregex_token_iterator split_first{value.begin(), value.end(), re, -1}, split_last;
+	const vector<string> &text = {split_first, split_last};
+	int i = 0;
+	for (const auto &d : text) {
+		if (d != "open") {
+			const size_t &p = d.rfind("->");
+			pinMap.insert(make_pair(d.substr(0,p), stringify(name, i)));
+		}
+		++i;
+	}
+}
+
+void design::parseRAMB_outputs_mid(
+		const int& depth,
+		map<string,string>& pinMap, 
+		const string& name,
+		const string& inst) {
+	advance(XML_READER_TYPE_ELEMENT, depth, "port");
+	assert(get_attribute("name") == name);
+	advance(XML_READER_TYPE_TEXT, depth+1, "#text");
+	static const regex re("\\s+");
+	const string& value = get_value();
+	sregex_token_iterator split_first{value.begin(), value.end(), re, -1}, split_last;
+	const vector<string> &text = {split_first, split_last};	
+	int i = 0;
+	for (const auto &d : text) {
+		if (d != "open") {
+			const size_t &p = d.rfind("->");
+			assert(p != string::npos);
+			const auto &it = pinMap.find(stringify(inst, ".", name, "[", i, "]"));
+			pinMap.insert(make_pair(d.substr(0,p), it->second));
+			pinMap.erase(it);
+		}
+		++i;
+	}
+}
+
+void design::parseRAMB_outputs_bot(
+		const int& depth,
+		const map<string,string>& pinMap, 
+		const string& name,
+		const string& inst,
+		InstanceSharedPtr instPtr) {
+	advance(XML_READER_TYPE_ELEMENT, depth, "port");
+	assert(get_attribute("name") == name);
+	advance(XML_READER_TYPE_TEXT, depth+1, "#text");
+	static const regex re("\\s+");
+	const string& value = get_value();
+	sregex_token_iterator split_first{value.begin(), value.end(), re, -1}, split_last;
+	const vector<string> &text = {split_first, split_last};	
+	int i = 0;
+	for (const auto &d : text) {
+		if (d != "open") {
+			addSource(d, instPtr, pinMap.at(
+						stringify(inst, ".", name, "[", i, "]")));
+		}
+		++i;
+	}
+}
+
+InstanceSharedPtr design::parseRAMB18(const map<string,string> &parentInputs) {
+	const string& name = get_attribute("name");
+	const string& mode = get_attribute("mode");
+	if (name == "open") {
+		assert(mode.empty());
+		return InstanceSharedPtr();
+	}
+	const string& instance = get_attribute("instance");
+	const string& type = instance.substr(0,instance.find_first_of('['));
+	InstanceSharedPtr instPtr = Factory::newInstancePtr(name, 
+			type,
+			"",
+			"");
+	bool b = mDesignPtr->addInstance(instPtr);
+	assert(b);
+	//cout << "Created " << instPtr->getType() << ": '" << instPtr->getName() << "'" << endl;
+
+	static const regex re("RAMB18E1_(\\d+)x(\\d+)_(REGAB|REGA|REGB|COMB)_([sd])p");
+	smatch m;
+	b = regex_match(mode, m, re);
+	assert(b);
+	const string& width = m[2];
+	const string& reg = m[3];
+	const string& ports = m[4];
+
+	// Ignore RAMB18E1 inputs
+	skip(XML_READER_TYPE_ELEMENT, 3, "inputs");
+
+	// Parse RAMB18E1 outputs
+	advance(XML_READER_TYPE_ELEMENT, 3, "outputs");
+	map<string,string> pinMap;
+	parseRAMB_outputs_top(4, pinMap, "DOADO");
+	skip(5);
+	parseRAMB_outputs_top(4, pinMap, "DOPADOP");
+	skip(5);
+	parseRAMB_outputs_top(4, pinMap, "DOBDO");
+	skip(5);
+	parseRAMB_outputs_top(4, pinMap, "DOPBDOP");
+	skip(3);
+	
+	// Ignore RAMB18E1 clocks
+	skip(XML_READER_TYPE_ELEMENT, 3, "clocks");
+
+	// Parse memory_slice
+	advance(XML_READER_TYPE_ELEMENT, 3, "block");
+	assert(get_attribute("mode") == "memory_slice");
+	const string& sliceInst = get_attribute("instance");
+	// Ignore memory_slice inputs
+	skip(XML_READER_TYPE_ELEMENT, 4, "inputs");
+	// Parse memory_slice outputs
+	advance(XML_READER_TYPE_ELEMENT, 4, "outputs");
+	if (ports == "s") {
+		parseRAMB_outputs_mid(5, pinMap, "out", sliceInst);
+		skip(6);
+	}
+	else if (ports == "d") {
+		parseRAMB_outputs_mid(5, pinMap, "out1", sliceInst);
+		skip(6);
+		parseRAMB_outputs_mid(5, pinMap, "out2", sliceInst);
+		skip(6);
+	}
+	else throw;
+	skip(4);
+	
+	// Ignore memory_slice clocks
+	skip(XML_READER_TYPE_ELEMENT, 4, "clocks");
+
+	int islice = 0;
+	advance();
+	do {	
+		// Parse memory slice
+		check(XML_READER_TYPE_ELEMENT, 4, "block");
+		const string &memName = get_attribute("name");
+		if (memName != "open") {
+			const string &memInst = get_attribute("instance");
+			assert(memInst == stringify("memory_slice[",islice,"]"));
+
+			// Skip inputs
+			skip(XML_READER_TYPE_ELEMENT, 5, "inputs");
+
+			// Parse outputs
+			advance(XML_READER_TYPE_ELEMENT, 5, "outputs");
+
+			if (ports == "s") {
+				parseRAMB_outputs_bot(6, pinMap, "out", memInst, instPtr);
+				skip(6);
+			}
+			else if (ports == "d") {
+				parseRAMB_outputs_bot(6, pinMap, "out1", memInst, instPtr);
+				skip(6);
+				parseRAMB_outputs_bot(6, pinMap, "out2", memInst, instPtr);
+				skip(6);
+			}
+			else throw;
+			skip(5);
+			
+			// Skip clocks
+			skip(XML_READER_TYPE_ELEMENT, 5, "clocks");
+
+			skip(4);
+		}
+		++islice;
+		advance();
+	} while (get_depth() > 3);
+
+	// RAMB18E1s always have these tied high
+	addSink("vcc", instPtr, "ADDRATIEHIGH0");
+	addSink("vcc", instPtr, "ADDRATIEHIGH1");
+	addSink("vcc", instPtr, "ADDRBTIEHIGH0");
+	addSink("vcc", instPtr, "ADDRBTIEHIGH1");
+
+	// At its widest mode, copy ADDRARDADDR from ADDRBWRADDR
+	if (width == "36") {
+		for (int i = 0; i < 14; ++i) {
+			const string& name = stringify("ADDRBWRADDR",i);
+			auto it = parentInputs.find(name);
+			if (it != parentInputs.end()) {
+				const string& net = it->second;
+				assert(net != "open");
+				addSink(net, instPtr, stringify("ADDRARDADDR",i));
+			}
+		}
+	}
+	// Also tie high any unconnected ports (at the LSB end) of the address bus
+	bool foundA = false, foundB = false;
+	for (int i = 0; i < 14; ++i) {
+		if (ports == "d") {
+			const string& nameA = stringify("ADDRARDADDR",i);
+			if (!foundA && parentInputs.count(nameA) == 0)
+				addSink("vcc", instPtr, nameA);
+			else foundA = true;
+		}
+		const string& nameB = stringify("ADDRBWRADDR",i);
+		if (!foundB && parentInputs.count(nameB) == 0)
+			addSink("vcc", instPtr, nameB);
+		else foundB = true;
+	}
+
+	// Special case: duplicate WEA0 and WEBWE0 across all pins in vector,
+	// because VPR only accepts one pin for write enable
+	auto it = parentInputs.find("WEA0");
+	if (it != parentInputs.end()) {
+		for (int i = 1; i < 4; ++i) 
+			addSink(it->second, instPtr, stringify(
+						it->first.substr(0,it->first.length()-1),
+						i));
+	}
+	it = parentInputs.find("WEBWE0");
+	if (it != parentInputs.end()) {
+		for (int i = 1; i < 4; ++i) 
+			addSink(it->second, instPtr, stringify(
+						it->first.substr(0,it->first.length()-1),
+						i));
+	}
+	// WEBWE[7:4] are always gnd for RAMB18E1
+	for (int i = 4; i < 8; ++i) 
+		addSink("gnd", instPtr, stringify("WEBWE", i));
+
+	// For dual port RAMs, copy the first port clock to the second port
+	if (ports == "d") {
+		it = parentInputs.find("CLKARDCLK");
+		assert(it->second != "open");
+		addSink(it->second, instPtr, "CLKBWRCLK");
+	}
+
+	// Add inputs from parents into this instance
+	for (const auto &it : parentInputs) {
+		const string& name = it.first;
+		const string& net = it.second;
+		assert(net != "open");
+		addSink(net, instPtr, name);
+	}
+
+	instPtr->setConfig("CLKARDCLKINV", "", "CLKARDCLK");
+	instPtr->setConfig("CLKBWRCLKINV", "", "CLKBWRCLK");
+
+	if (reg == "REGAB") {
+		instPtr->setConfig("DOA_REG", "", "1");
+		instPtr->setConfig("DOB_REG", "", "1");
+	}
+	else if (reg == "REGA") {
+		instPtr->setConfig("DOA_REG", "", "1");
+		instPtr->setConfig("DOB_REG", "", "0");
+	}
+	else if (reg == "REGB") {
+		instPtr->setConfig("DOA_REG", "", "0");
+		instPtr->setConfig("DOB_REG", "", "1");
+	}
+	else if (reg == "COMB") {
+		instPtr->setConfig("DOA_REG", "", "0");
+		instPtr->setConfig("DOB_REG", "", "0");
+	}
+	else throw;
+
+	instPtr->setConfig("ENARDENINV", "", "ENARDEN");
+	addSink("vcc", instPtr, "ENARDEN");
+	instPtr->setConfig("ENBWRENINV", "", "ENBWREN");
+	addSink("vcc", instPtr, "ENBWREN");
+	if (starts_with(mDDB.getDeviceName(), "xc7")) {
+		instPtr->setConfig("EN_PWRGATE", "", "NONE");
+	}
+
+	if (ports == "s")
+		instPtr->setConfig("RAM_MODE", "", "SDP");
+	else if (ports == "d")
+		instPtr->setConfig("RAM_MODE", "", "TDP");
+	else throw;
+
+	instPtr->setConfig("RDADDR_COLLISION_HWCONFIG", "", "DELAYED_WRITE");
+
+	instPtr->setConfig("READ_WIDTH_B", "", width);
+	if (ports == "d")
+		instPtr->setConfig("READ_WIDTH_A", "", width);
+	else
+		instPtr->setConfig("READ_WIDTH_A", "", "0");
+
+	instPtr->setConfig("REGCLKARDRCLKINV", "", "REGCLKARDRCLK");
+	addSink("gnd", instPtr, "REGCLKARDRCLK");
+	instPtr->setConfig("REGCLKBINV", "", "REGCLKB");
+	addSink("gnd", instPtr, "REGCLKB");
+	instPtr->setConfig("RSTRAMARSTRAMINV", "", "RSTRAMARSTRAM");
+	addSink("gnd", instPtr, "RSTRAMARSTRAM");
+	instPtr->setConfig("RSTRAMBINV", "", "RSTRAMB");
+	addSink("gnd", instPtr, "RSTRAMB");
+	instPtr->setConfig("RSTREGARSTREGINV", "", "RSTREGARSTREG");
+	addSink("gnd", instPtr, "RSTREGARSTREG");
+	instPtr->setConfig("RSTREGBINV", "", "RSTREGB");
+	addSink("gnd", instPtr, "RSTREGB");
+	instPtr->setConfig("RSTREG_PRIORITY_A", "", "RSTREG");
+	addSink("gnd", instPtr, "REGCEAREGCE");
+	instPtr->setConfig("RSTREG_PRIORITY_B", "", "RSTREG");
+	addSink("gnd", instPtr, "REGCEB");
+
+	instPtr->setConfig("SAVEDATA", "", "FALSE");
+
+	instPtr->setConfig("WRITE_MODE_A", "", "WRITE_FIRST");
+	instPtr->setConfig("WRITE_MODE_B", "", "WRITE_FIRST");
+
+	instPtr->setConfig("WRITE_WIDTH_B", "", width);
+	if (ports == "d")
+		instPtr->setConfig("WRITE_WIDTH_A", "", width);
+	else
+		instPtr->setConfig("WRITE_WIDTH_A", "", "0");
+
+	instPtr->setConfig(instPtr->getType(), escape(instPtr->getName()), "");
+
+	for (int i = 0; i < 0x40; ++i) {
+		stringstream ss[2];
+		ss[0] << setfill('0') << setw(2) << uppercase << hex << i;
+		ss[1] << setfill('0') << setw(64) << 0;
+		instPtr->setConfig(stringify("INIT_", ss[0].str()), "", ss[1].str());
+		if (i < 0x8)
+			instPtr->setConfig(stringify("INITP_", ss[0].str()), "", ss[1].str());
+	}
+
+	instPtr->setConfig("INIT_A","",  "000000000");
+	instPtr->setConfig("INIT_B", "", "000000000");
+	instPtr->setConfig("SRVAL_A", "", "000000000");
+	instPtr->setConfig("SRVAL_B", "", "000000000");
+
+	skip(2);
+
+	return instPtr;
+}
+
+void design::parseRAMB18x2(void) {
+	const string &name = get_attribute("name");
+	const string &mode = get_attribute("mode");
+	assert(mode == "RAMB18E1x2");
+	map<string,string> inputs[2];
+
+	// Parse RAMB inputs
+	advance(XML_READER_TYPE_ELEMENT, 2, "inputs");
+	advance();
+	do {
+		const string& portName = get_attribute("name");
+		if (starts_with(portName, "s0_"))
+			parseInputPort(inputs[0]);
+		else
+			parseInputPort(inputs[1]);
+		skip(3);
+		advance();
+	} while (get_depth() > 2);
+
+	// Ignore RAMB outputs (because there is no ambiguity)
+	skip(XML_READER_TYPE_ELEMENT, 2, "outputs");
+
+	// Parse RAMB clocks
+	advance(XML_READER_TYPE_ELEMENT, 2, "clocks");
+	advance();
+	do {
+		const string& portName = get_attribute("name");
+		if (starts_with(portName, "s0_"))
+			parseInputPort(inputs[0]);
+		else
+			parseInputPort(inputs[1]);
+		skip(3);
+		advance();
+	} while (get_depth() > 2);
+	
+	// Parse block
+	advance(XML_READER_TYPE_ELEMENT, 2, "block");
+	assert(get_attribute("instance") == "RAMB18E1[0]");
+	InstanceSharedPtr primaryRAMB = parseRAMB18(inputs[0]);
+
+	// Parse block
+	advance(XML_READER_TYPE_ELEMENT, 2, "block");
+	assert(get_attribute("instance") == "RAMB18E1[1]");
+	InstanceSharedPtr secondaryRAMB = parseRAMB18(inputs[1]);
+
+	if (!primaryRAMB || primaryRAMB->getName() != name) {
+		assert(!secondaryRAMB || secondaryRAMB->getName() == name);
+		swap(primaryRAMB,secondaryRAMB);
+	}
+	bool b = mSecondaryRAMB18.insert(make_pair(primaryRAMB,secondaryRAMB)).second;
+	assert(b);
+
+	skip(1);
+}
+
+void design::parseSLICEL(void) {
+	const string &name = get_attribute("name");
+	const string &instance = get_attribute("instance");
+	const string &type = instance.substr(0,instance.find_first_of('['));
+	const string &mode = get_attribute("mode");
+	InstanceSharedPtr instPtr = Factory::newInstancePtr(name, 
+								type,
+								"",
+								"");
+	bool b = mDesignPtr->addInstance(instPtr);
+	assert(b);
+	//cout << "Created " << instPtr->getType() << ": '" << instPtr->getName() << "'" << endl;
+
+	// Parse SLICE inputs
+	map<string,string> inputs;
+	advance(XML_READER_TYPE_ELEMENT, 2, "inputs");
+	advance();
+	do {
+		//addInputPort(instPtr);
+		parseInputPort(inputs);
+		skip(3);
+		advance();
+	} while (get_depth() > 2);
+	for (const auto it : inputs) {
+		const string& pin = it.first;
+		const string& net = it.second;
+		addSink(net, instPtr, pin);
+	}
+
+	// Ignore SLICE outputs (because there is no ambiguity)
+	skip(XML_READER_TYPE_ELEMENT, 2, "outputs");
+
+	// Parse SLICE clocks
+	advance(XML_READER_TYPE_ELEMENT, 2, "clocks");
+	advance();
+	do {
+		addInputPort(instPtr);
+		advance();
+	} while (get_depth() > 2);
+
+	if (mode == "LUT6x4" || mode == "SLICEL") {
+		for (int i = 0; i < 4; ++i) {
+			advance(XML_READER_TYPE_ELEMENT, 2, "block");
+			parseBLE6(instPtr, 'A'+i, inputs);
+		}
+	}
+	else if (mode == "LUT7x2") {
+		for (int i = 0; i < 2; ++i) {
+			advance(XML_READER_TYPE_ELEMENT, 2, "block");
+			parseBLE7(instPtr, 'A'+i*2, inputs);
+		}
+	}
+	else if (mode == "LUT8") {
+		advance(XML_READER_TYPE_ELEMENT, 2, "block");
+		parseBLE8(instPtr, 'B', inputs);
+	}
+	else throw;
+
+	skip(1);
+}
+
+
+void design::addSink(const string &net,
+			InstanceSharedPtr instPtr,
+			const string &pin) {
+	assert(net != "open");
+	Circuit::NetSharedPtrIterator netPtrIt = mDesignPtr->findNet(net);
+	NetSharedPtr netPtr;
+	if (netPtrIt == mDesignPtr->netsEnd()) {
+		ENetType type = eNetTypeNormal;
+		if (net == "vcc") type = eNetTypePower;
+		else if (net == "gnd") type = eNetTypeGround;
+		netPtr = Factory::newNetPtr(net, type);
+		mDesignPtr->addNet(netPtr);
+	}
+	else
+		netPtr = *netPtrIt;
+
+	InstancePinSharedPtr instPinPtr = Factory::newInstancePinPtr(instPtr, pin);
+	assert(!netPtr->containsSink(instPinPtr));
+	netPtr->addSink(instPinPtr);
+}
+
+void design::addSource(const string &net,
+			InstanceSharedPtr instPtr,
+			const string &pin) {
+	assert(net != "open");
+	if (net == "vcc" || net == "gnd")
+		return;
+	Circuit::NetSharedPtrIterator netPtrIt = mDesignPtr->findNet(net);
+	NetSharedPtr netPtr;
+	if (netPtrIt == mDesignPtr->netsEnd()) {
+		netPtr = Factory::newNetPtr(net);
+		mDesignPtr->addNet(netPtr);
+	}
+	else
+		netPtr = *netPtrIt;
+
+	InstancePinSharedPtr instPinPtr = Factory::newInstancePinPtr(instPtr, pin);
+	assert(!netPtr->hasAnySources());
+	netPtr->addSource(instPinPtr);
+}
+
+
+	int
+main(int argc, char* argv[])
+{
+	if (argc != 3) {
+		cerr << argv[0] << " <arch> <circuit>" << endl;
+		return -1;
+	}
+	const boost::regex re("(xc.*)((ff|ffg|clg)\\d+)(_.*)?");
+	boost::cmatch what;
+	bool b = boost::regex_match(argv[1], what, re);
+	if (!b) {
+		cerr << argv[0] << " <arch> <circuit>" << endl;
+		return -1;
+	}
+	const string device(what[1]);
+	const string package(what[2]);
+	const char *circuit = argv[2];
+	try
+	{
+		design d(device, package, "-1");
+		d(circuit);
+
+		const string &xdl = stringify(circuit,".xdl");
+		ofstream xdlExport(basename(xdl.c_str()));
+		d.writeXdl(xdlExport);
+		xdlExport.close();
+	}
+	catch(const exception& e)
+	{
+		cout << "Exception caught: " << e.what() << endl;
+	}
+
+	cout << "Success!" << endl;
+	return 0;
+}
diff --git bnpr2xdl/bnpr2xdl.hpp bnpr2xdl/bnpr2xdl.hpp
new file mode 100644
index 0000000..5527e85
--- /dev/null
+++ bnpr2xdl/bnpr2xdl.hpp
@@ -0,0 +1,370 @@
+#include <fstream>
+//#include <regex>
+#include <boost/regex.hpp>
+using boost::regex;
+using boost::smatch;
+using boost::sregex_token_iterator;
+
+//#include <libxml++/libxml++.h>
+//#include <libxml++/parsers/textreader.h>
+#include <libxml/xmlreader.h>
+
+#include "torc/physical/Factory.hpp"
+#include "torc/physical/XdlExporter.hpp"
+#include "torc/Architecture.hpp"
+//#include "torc/Common.hpp"
+
+using namespace std;
+using namespace torc::physical;
+//using namespace torc::common;
+//using namespace torc::architecture;
+//using namespace torc::architecture::Xilinx;
+
+namespace ta = torc::architecture;
+namespace tax = torc::architecture::xilinx;
+
+using ta::DDB;
+using ta::Tiles;
+using ta::Sites;
+using ta::WireUsage;
+using ta::Tilewire;
+using ta::TilewireVector;
+using ta::Arc;
+using ta::ExtendedWireInfo;
+using tax::TileIndex;
+
+template <class T>
+std::string stringify(T const &t) {
+    // This could use lexical_cast, but for now we'll keep dependencies to a minimum
+    std::stringstream b;
+    b << t;
+    return b.str();
+}
+
+template<typename T, typename... Args>
+std::string stringify(T arg, const Args&... args) {
+    return stringify(arg) + stringify(args...);
+}
+
+class design {
+	public:
+		design(		const string& device,
+				const string& package,
+				const string& speed,
+				const string& version);
+
+		void operator()(const string &circuit);
+		void writeXdl(ostream &fs) {
+			XdlExporter fileExporter(fs);
+			fileExporter(mDesignPtr);
+		}
+
+	protected:
+		const string mDevice, mPackage, mSpeed, mVersion;
+		DDB mDDB;
+		DesignSharedPtr mDesignPtr;
+		//xmlpp::TextReader *mXml;
+		xmlTextReaderPtr mXml;
+		map<string, tuple<InstanceSharedPtr, string> > mNet2InstCfg;
+		map<InstanceSharedPtr,InstanceSharedPtr> mSecondaryRAMB18;
+		set<string> mBels;
+
+		static const string whitespace;
+
+		static bool siteComp(const string &l, const string &r) {
+			static const regex re("(RAMB18|RAMB36)?.*_X(\\d+)Y\\d+");
+			static smatch ml, mr;
+			const bool &bl = regex_match(l, ml, re);
+			assert(bl);
+			const bool &br = regex_match(r, mr, re);
+			assert(br);
+			// In a BRAM tile, RAMB18 goes first
+			return (ml[1] < mr[1]) 
+				|| (boost::lexical_cast<int>(ml[2]) < boost::lexical_cast<int>(mr[2]));
+		}
+
+		void include(void);
+		void parseNet(const string &net);
+		void parsePlace(const string &place);
+		void genClbTile2Sites(map<TileIndex, vector<string> > &tile2sites) {
+			const Sites& sites = mDDB.getSites();
+			const Tiles& tiles = mDDB.getTiles();
+			for (const auto& s : sites.getSites()) {
+				const auto& ti = s.getTileIndex();
+				const auto& tInfo = tiles.getTileInfo(ti);
+				const std::string& tileTypeName = tiles.getTileTypeName(tInfo.getTypeIndex());
+				if (boost::starts_with(tileTypeName, "CLBLL") || boost::starts_with(tileTypeName, "CLBLM")
+						|| boost::starts_with(tileTypeName, "DSP")
+						|| boost::starts_with(tileTypeName, "BRAM")
+					) {
+					const auto& sn = s.getName();
+					const auto& it = tile2sites.find(ti);
+					if (it == tile2sites.end())
+						tile2sites.insert(make_pair(ti, vector<string>({ sn })));
+					else
+						it->second.push_back(sn);
+				}
+			}
+
+			for (auto& s : tile2sites) {
+				vector<string> &v = s.second;
+				sort(v.begin(), v.end(), siteComp);
+			}
+		}
+		void readIob2Site(map<tuple<int,int,int>, string> &iob2site) {
+			static const regex re("IOB_X(\\d+)Y(\\d+)");
+			smatch m;
+
+			ifstream fs(stringify(mDesignPtr->getDevice(), mDesignPtr->getPackage(), ".pkg"));
+			assert(fs);
+			fs.ignore(1024, '\n');
+			string what, tile, site;
+			while (fs >> what >> tile >> site) {
+				if (what == "pin") {
+					if (regex_match(tile, m, re)) {
+						const int x = boost::lexical_cast<int>(m[1]);
+						const int y = boost::lexical_cast<int>(m[2]);
+						const int z = 1 - (y % 2);
+						//cout << "iob2site: " << x << "," << y-(1-z) << "," << z << endl;
+						const bool &b = iob2site.insert(make_pair(make_tuple(x,y-z,z), site)).second;
+						assert(b);
+					}
+				}
+			}
+			fs.close();
+		}
+		void parseBlif(const string& blif);
+		void parseRoute(const string& route);
+		void readInode2Tw(vector<Tilewire>& inode2tw, int &inodeOffset);
+		void genTileLut2InstPin(NetSharedPtr netPtr, map< tuple<TileIndex,string>, vector<InstancePinSharedPtr> >& tileLut2InstPin) {
+			for (auto it = netPtr->sinksBegin(), ie = netPtr->sinksEnd(); it != ie; ++it) {
+				const auto& instPinPtr = ta::InstancePin::physicalToArchitecture(*it);
+				instPinPtr->updateTilewire(mDDB);
+				const auto& ewi = ExtendedWireInfo(mDDB, instPinPtr->getTilewire());
+				const std::string tileTypeName(ewi.mTileTypeName);
+				const std::string wireName(ewi.mWireName);
+				if (isClb(ewi.mTileTypeName) && wireName.back() >= '1' && wireName.back() <= '6') {
+					const auto& k = make_tuple(ewi.mTileIndex, wireName.substr(6, wireName.length()-6-1));
+					auto jt = tileLut2InstPin.find(k);
+					if (jt == tileLut2InstPin.end())
+						jt = tileLut2InstPin.insert(make_pair(k, vector<InstancePinSharedPtr>() )).first;
+					jt->second.push_back(*it);
+				}
+			}
+		}
+		void genIntTile2Site(map<string, string> &tile2site) {
+			const Sites& sites = mDDB.getSites();
+			const Tiles& tiles = mDDB.getTiles();
+			for (const auto& s : sites.getSites()) {
+				const auto& ti = s.getTileIndex();
+				const auto& tInfo = tiles.getTileInfo(ti);
+				const std::string& tileTypeName = tiles.getTileTypeName(tInfo.getTypeIndex());
+				if (boost::starts_with(tileTypeName, "INT")) {
+					const auto& sn = s.getName();
+					const auto& tn = tInfo.getName();
+					bool b = tile2site.insert(make_pair(tn, sn)).second;
+					assert(b);
+				}
+			}
+		}
+
+
+		Arc findArc(const Tilewire& twSrc, const Tilewire& twSnk);
+		inline bool isClb(const std::string& tileTypeName) {
+			return boost::starts_with(tileTypeName, "CLBLL") || boost::starts_with(tileTypeName, "CLBLM");
+		}
+
+		InstanceSharedPtr findOrCreateTieoff(const map<string, string> &tile2site, int x, int y) {
+			auto it = tile2site.find(stringify("INT_X",x,"Y",y));
+			if (it == tile2site.end())
+				it = tile2site.find(stringify("INT_L_X",x,"Y",y));
+			if (it == tile2site.end())
+				it = tile2site.find(stringify("INT_R_X",x,"Y",y));
+			assert(it != tile2site.end());
+			const string& tile = it->first;
+			const string& site = it->second;
+			const string& instName = stringify("XDL_DUMMY_", tile, "_", site);
+			InstanceSharedPtr instPtr;
+			Design::InstanceSharedPtrIterator jt = mDesignPtr->findInstance(instName);
+			if (jt != mDesignPtr->instancesEnd()) {
+				instPtr = *jt;
+			}
+			else {
+				instPtr = Factory::newInstancePtr(instName, "TIEOFF", tile, site);
+				instPtr->setConfig("_NO_USER_LOGIC","","");
+				bool b = mDesignPtr->addInstance(instPtr);
+				assert(b);
+			}
+			return instPtr;
+		}
+
+		void parsePS7(void);
+		void parseBUFG(void);
+		void parseIOB(void);
+		void parseSLICEL(void);
+		void parseDSP(void);
+		void parseRAMB36(void);
+		void parseRAMB18x2(void);
+		InstanceSharedPtr parseRAMB18(const map<string,string>& parentInputs);
+		void parseRAMB_outputs_top(
+				const int& depth, 
+				map<string,string>& pinMap, 
+				const string& name);
+		void parseRAMB_outputs_mid(
+				const int& depth,
+				map<string,string>& pinMap, 
+				const string& name, 
+				const string& inst);
+		void parseRAMB_outputs_bot(
+				const int& depth,
+				const map<string,string>& pinMap, 
+				const string& name, 
+				const string& inst, 
+				InstanceSharedPtr instPtr);
+		InstanceSharedPtr parseBlock(string& blockInstance);
+
+		inline bool read(void) {
+			//return mXml->read();
+			return xmlTextReaderRead(mXml) == 1;
+		}
+
+		inline void advance(void) {
+			assert(read());
+			//while (get_node_type() == xmlpp::TextReader::SignificantWhitespace)
+			while (get_node_type() == XML_READER_TYPE_SIGNIFICANT_WHITESPACE)
+				assert(read());
+		}
+
+		inline void check(
+				//const xmlpp::TextReader::xmlNodeType &type, 
+				const int& type, 
+				const int& depth,
+				const char *name) {
+			assert(get_node_type() == type);
+			assert(get_depth() == depth);
+			assert(get_name() == name);
+		}
+
+		inline void advance(
+				//const xmlpp::TextReader::xmlNodeType &type, 
+				const int& type, 
+				const int& depth,
+				const char *name) {
+			advance();
+			return check(type, depth, name);
+		}
+
+		inline void skip(
+				//const xmlpp::TextReader::xmlNodeType &type, 
+				const int& type, 
+				const int& depth,
+				const char *name) {
+			advance(type, depth, name);
+			skip(depth);
+		}
+
+		inline void skip(const int &depth) {
+			//assert(get_depth() > depth);
+			do {
+				advance();
+			} while(get_depth() > depth);
+		}
+
+		inline void skip(void) {
+			const int &depth = get_depth();
+			skip(depth);
+		}
+
+		//inline xmlpp::TextReader::xmlNodeType get_node_type(void) {
+		inline int get_node_type(void) {
+			//return mXml->get_node_type();
+			return xmlTextReaderNodeType(mXml);
+		}
+
+		inline string get_name(void) {
+			//return mXml->get_name();
+			xmlChar* s = xmlTextReaderName(mXml);
+			string str(reinterpret_cast<char*>(s));
+			xmlFree(s);
+			return str;
+		}
+
+		inline int get_depth(void) {
+			//return mXml->get_depth();
+			return xmlTextReaderDepth(mXml);
+		}
+
+		// General tool to strip spaces from both ends of a string
+		// from Bruce Eckel's "Thinking in C++" book
+		inline string trim(const string& s) {
+			if(s.length() == 0)
+				return s;
+			size_t beg = s.find_first_not_of(whitespace);
+			size_t end = s.find_last_not_of(whitespace);
+			if(beg == string::npos) // No non-spaces
+				return "";
+			return string(s, beg, end - beg + 1);
+		}
+
+		inline string get_value(void) {
+			//return trim(mXml->get_value());
+			xmlChar* s = xmlTextReaderValue(mXml);
+			if (!s) return "";
+			string str(reinterpret_cast<char*>(s));
+			xmlFree(s);
+			return trim(str);
+		}
+
+		inline string get_attribute(const char* a) {
+			//return mXml->get_attribute(a);
+			xmlChar* s = xmlTextReaderGetAttribute(mXml, reinterpret_cast<const xmlChar*>(a));
+			if (!s) return "";
+			string str(reinterpret_cast<char*>(s));
+			xmlFree(s);
+			return str;
+		}
+
+		void addSink(const string &net,
+				InstanceSharedPtr instPtr,
+				const string &pin);
+		void addSource(const string &net,
+				InstanceSharedPtr instPtr,
+				const string &pin);
+
+		void addInputPort(InstanceSharedPtr instPtr);
+		void addOutputPort(InstanceSharedPtr instPtr);
+		void parseInputPort(map<string,string>& inputs);
+		void parseOutputPort(map<string,string>& outputs);
+		void parseBLE6(InstanceSharedPtr instPtr, 
+				const char& lut,
+				const map<string,string>& parentInputs);
+		void parseBLE7(InstanceSharedPtr instPtr, 
+				const char& lut,
+				const map<string,string>& parentInputs);
+		void parseBLE8(InstanceSharedPtr instPtr, 
+				const char& lut,
+				const map<string,string>& parentInputs);
+		void parseLUT6(InstanceSharedPtr instPtr, 
+				const char& lut, 
+				const string& bleName,
+				const map<string,string>& parentInputs,
+				const map<string,string>& parentOutputs);
+		void parseLUT7(InstanceSharedPtr instPtr, 
+				const char& lut, 
+				const string& bleName,
+				const map<string,string>& parentInputs,
+				const map<string,string>& parentOutputs);
+		void parseLUT8(InstanceSharedPtr instPtr, 
+				const char& lut, 
+				const string& bleName,
+				const map<string,string>& parentInputs,
+				const map<string,string>& parentOutputs);
+
+
+		void parseFF(InstanceSharedPtr instPtr, 
+				const char& lut, 
+				const map<string,string>& parentOutputs);
+		void parseXADDER(InstanceSharedPtr instPtr, 
+				const char& lut, 
+				const map<string,string>& parentOutputs);
+};
diff --git libarchfpga/include/physical_types.h libarchfpga/include/physical_types.h
index ac5d136..ad68f32 100644
--- libarchfpga/include/physical_types.h
+++ libarchfpga/include/physical_types.h
@@ -776,6 +776,16 @@ typedef struct s_direct_inf {
 	int line;
 } t_direct_inf;
 
+/* EH */
+struct s_override
+{
+	int startx, starty;
+	int endx, endy;
+	int incx, incy;
+	char *type;
+};
+typedef struct s_override t_override;
+
 /*   Detailed routing architecture */
 typedef struct s_arch t_arch;
 struct s_arch {
@@ -799,6 +809,9 @@ struct s_arch {
 	t_model *model_library;
 	t_power_arch * power;
 	t_clock_arch * clocks;
+	/* EH */
+	int num_overrides;
+	t_override *overrides;
 };
 
 #endif
diff --git libarchfpga/read_xml_arch_file.c libarchfpga/read_xml_arch_file.c
index 1c3ca94..551baf7 100644
--- libarchfpga/read_xml_arch_file.c
+++ libarchfpga/read_xml_arch_file.c
@@ -96,6 +96,8 @@ static void ProcessSegments(INOUTP ezxml_t Parent,
 		INP boolean timing_enabled);
 static void ProcessCB_SB(INOUTP ezxml_t Node, INOUTP boolean * list,
 		INP int len);
+static void ProcessOverrides(INOUTP ezxml_t Parent, int *num_overrides, 
+		t_override **overrides);
 static void ProcessPower( INOUTP ezxml_t parent,
 		INOUTP t_power_arch * power_arch, INP t_type_descriptor * Types,
 		INP int NumTypes);
@@ -1689,47 +1691,50 @@ static void ProcessModels(INOUTP ezxml_t Node, OUTP struct s_arch *arch) {
 		/* Process the inputs */
 		p = ezxml_child(child, "input_ports");
 		junkp = p;
-		if (p == NULL)
+		if (p == NULL) {
 			vpr_printf(TIO_MESSAGE_ERROR,
 					"Required input ports not found for element '%s'.\n",
 					temp->name);
-
-		p = ezxml_child(p, "port");
-		if (p != NULL) {
-			while (p != NULL) {
-				tp = (t_model_ports*) my_calloc(1, sizeof(t_model_ports));
-				Prop = FindProperty(p, "name", TRUE);
-				tp->name = my_strdup(Prop);
-				ezxml_set_attr(p, "name", NULL);
-				tp->size = -1; /* determined later by pb_types */
-				tp->min_size = -1; /* determined later by pb_types */
-				tp->next = temp->inputs;
-				tp->dir = IN_PORT;
-				tp->is_non_clock_global = GetBooleanProperty(p,
-						"is_non_clock_global", FALSE, FALSE);
-				tp->is_clock = FALSE;
-				Prop = FindProperty(p, "is_clock", FALSE);
-				if (Prop && my_atoi(Prop) != 0) {
-					tp->is_clock = TRUE;
-				}
-				ezxml_set_attr(p, "is_clock", NULL);
-				if (tp->is_clock == TRUE && tp->is_non_clock_global == TRUE) {
-					vpr_printf(TIO_MESSAGE_ERROR,
-							"[LINE %d] Signal cannot be both a clock and a non-clock signal simultaneously\n",
-							p->line);
+			
+		}
+		else {
+			p = ezxml_child(p, "port");
+			if (p != NULL) {
+				while (p != NULL) {
+					tp = (t_model_ports*) my_calloc(1, sizeof(t_model_ports));
+					Prop = FindProperty(p, "name", TRUE);
+					tp->name = my_strdup(Prop);
+					ezxml_set_attr(p, "name", NULL);
+					tp->size = -1; /* determined later by pb_types */
+					tp->min_size = -1; /* determined later by pb_types */
+					tp->next = temp->inputs;
+					tp->dir = IN_PORT;
+					tp->is_non_clock_global = GetBooleanProperty(p,
+							"is_non_clock_global", FALSE, FALSE);
+					tp->is_clock = FALSE;
+					Prop = FindProperty(p, "is_clock", FALSE);
+					if (Prop && my_atoi(Prop) != 0) {
+						tp->is_clock = TRUE;
+					}
+					ezxml_set_attr(p, "is_clock", NULL);
+					if (tp->is_clock == TRUE && tp->is_non_clock_global == TRUE) {
+						vpr_printf(TIO_MESSAGE_ERROR,
+								"[LINE %d] Signal cannot be both a clock and a non-clock signal simultaneously\n",
+								p->line);
+					}
+					temp->inputs = tp;
+					junk = p;
+					p = ezxml_next(p);
+					FreeNode(junk);
 				}
-				temp->inputs = tp;
-				junk = p;
-				p = ezxml_next(p);
-				FreeNode(junk);
+			} else /* No input ports? */
+			{
+				vpr_printf(TIO_MESSAGE_ERROR,
+						"Required input ports not found for element '%s'.\n",
+						temp->name);
 			}
-		} else /* No input ports? */
-		{
-			vpr_printf(TIO_MESSAGE_ERROR,
-					"Required input ports not found for element '%s'.\n",
-					temp->name);
+			FreeNode(junkp);
 		}
-		FreeNode(junkp);
 
 		/* Process the outputs */
 		p = ezxml_child(child, "output_ports");
@@ -2461,9 +2466,9 @@ static void ProcessComplexBlocks(INOUTP ezxml_t Node,
 		Type->pb_type = (t_pb_type*) my_malloc(sizeof(t_pb_type));
 		Type->pb_type->name = my_strdup(Type->name);
 		if (i == IO_TYPE_INDEX) {
-			if (strcmp(Type->name, "io") != 0) {
+			if (strcmp(Type->name, "IOB") != 0) {
 				vpr_printf(TIO_MESSAGE_ERROR,
-						"First complex block must be named \"io\" and define the inputs and outputs for the FPGA");
+						"First complex block must be named \"IOB\" and define the inputs and outputs for the FPGA");
 				exit(1);
 			}
 		}
@@ -2629,6 +2634,15 @@ void XmlReadArch(INP const char *ArchFile, INP boolean timing_enabled,
 		}
 		FreeNode(Next);
 	}
+
+	// Process list of overrides
+	Next = FindElement(Cur, "overrideslist", FALSE);
+	if(Next != NULL)
+	{
+		ProcessOverrides(Next, &arch->num_overrides, &arch->overrides);
+		FreeNode(Next);
+	}
+
 	SyncModelsPbTypes(arch, *Types, *NumTypes);
 	UpdateAndCheckModels(arch);
 
@@ -3053,7 +3067,7 @@ static void CreateModelLibrary(OUTP struct s_arch *arch) {
 	model_library[0].outputs = (t_model_ports*) my_calloc(1,
 			sizeof(t_model_ports));
 	model_library[0].outputs->dir = OUT_PORT;
-	model_library[0].outputs->name = my_strdup("inpad");
+	model_library[0].outputs->name = my_strdup("i");
 	model_library[0].outputs->next = NULL;
 	model_library[0].outputs->size = 1;
 	model_library[0].outputs->min_size = 1;
@@ -3065,7 +3079,7 @@ static void CreateModelLibrary(OUTP struct s_arch *arch) {
 	model_library[1].inputs = (t_model_ports*) my_calloc(1,
 			sizeof(t_model_ports));
 	model_library[1].inputs->dir = IN_PORT;
-	model_library[1].inputs->name = my_strdup("outpad");
+	model_library[1].inputs->name = my_strdup("o");
 	model_library[1].inputs->next = NULL;
 	model_library[1].inputs->size = 1;
 	model_library[1].inputs->min_size = 1;
@@ -3516,6 +3530,35 @@ static void ProcessClocks(ezxml_t Parent, t_clock_arch * clocks) {
 	}
 }
 
+/* EH: Function to read in the <override> addition to the architecture file */
+static void ProcessOverrides(INOUTP ezxml_t Parent, int *num_overrides, 
+		t_override **overrides)
+{
+	int i;
+
+	*num_overrides = CountChildren(Parent, "region", 1);
+	*overrides = (t_override*) malloc(sizeof(t_override)*(*num_overrides));
+	for (i = 0; i < *num_overrides; i++)
+	{
+		ezxml_t Node;
+		const char *Prop;
+
+		Node = ezxml_child(Parent, "region");
+		(*overrides)[i].startx = GetIntProperty(Node, "startx", TRUE, 0);
+		(*overrides)[i].starty = GetIntProperty(Node, "starty", TRUE, 0);
+		(*overrides)[i].endx = GetIntProperty(Node, "endx", TRUE, 0);
+		(*overrides)[i].endy = GetIntProperty(Node, "endy", TRUE, 0);
+		(*overrides)[i].incx = GetIntProperty(Node, "incx", FALSE, 1);
+		(*overrides)[i].incy = GetIntProperty(Node, "incy", FALSE, 1);
+
+		Prop = FindProperty(Node, "type", TRUE);
+		(*overrides)[i].type = strdup(Prop);
+		ezxml_set_attr(Node, "type", NULL);
+
+		FreeNode(Node);
+	}
+}
+
 e_power_estimation_method power_method_inherited(
 		e_power_estimation_method parent_power_method) {
 	switch (parent_power_method) {
diff --git vpr/Makefile vpr/Makefile
index 2676521..1b02934 100755
--- vpr/Makefile
+++ vpr/Makefile
@@ -23,14 +23,15 @@ OPTIMIZATION_LEVEL_FOR_RELEASE_BUILD = -O3
 
 CC = $(COMPILER)
 LIB_DIR = -L.
-LIB = -lm -lvpr
+LIB = -lm -lvpr -lz
 SRC_DIR = SRC
 OBJ_DIR = OBJ
+OBJ_DIR_DEBUG = OBJ_DEBUG
 OTHER_DIR = -ISRC/util -ISRC/timing -ISRC/pack -ISRC/place -ISRC/base -ISRC/route -ISRC/power -I../printhandler/SRC/TIO_InputOutputHandlers
 
 WARN_FLAGS = -Wall -Wpointer-arith -Wcast-qual -D__USE_FIXED_PROTOTYPES__ -ansi -pedantic -Wshadow -Wcast-align -D_POSIX_SOURCE -Wno-write-strings
 
-DEBUG_FLAGS = -g 
+DEBUG_FLAGS = -O0 -g 
 OPT_FLAGS = $(OPTIMIZATION_LEVEL_FOR_RELEASE_BUILD)
 INC_FLAGS = -I../libarchfpga/include
 
@@ -67,14 +68,25 @@ else
 endif
 
 EXE = vpr
+EXE_DEBUG = vpr_debug
 
 OBJ = $(patsubst $(SRC_DIR)/%.c, $(OBJ_DIR)/%.o,$(wildcard $(SRC_DIR)/*.c $(SRC_DIR)/*/*.c))
 OBJ_DIRS=$(sort $(dir $(OBJ)))
 DEP := $(OBJ:.o=.d)
 
+OBJ_DEBUG = $(patsubst $(SRC_DIR)/%.c, $(OBJ_DIR_DEBUG)/%.o,$(wildcard $(SRC_DIR)/*.c $(SRC_DIR)/*/*.c))
+OBJ_DIRS_DEBUG=$(sort $(dir $(OBJ_DEBUG)))
+DEP_DEBUG := $(OBJ_DEBUG:.o=.d)
+
+all: $(EXE) $(EXE_DEBUG)
+
 # notify is an order-only prerequisite - note the "|"
 $(EXE): $(OBJ) Makefile libvpr.a | notify
-	$(CC) $(FLAGS) OBJ/main.o -o $(EXE) $(LIB_DIR) $(LIB)
+	$(CC) $(FLAGS) $(OPT_FLAGS) OBJ/main.o -o $(EXE) $(LIB_DIR) -lvpr $(LIB)
+
+$(EXE_DEBUG): $(OBJ_DEBUG) Makefile libvpr_debug.a | notify
+	$(CC) $(FLAGS) $(DEBUG_FLAGS) OBJ_DEBUG/main.o -o $(EXE_DEBUG) $(LIB_DIR) -lvpr_debug $(LIB)
+
 
 # if graphics enabled but libx11-dev is not installed, notify the user
 notify:
@@ -93,6 +105,12 @@ libvpr.a: $(OBJ) Makefile libarchfpga
 	@ ar rcs $@ $(OBJ)
 	@ ar d $@ main.o
 
+libvpr_debug.a: $(OBJ_DEBUG) Makefile libarchfpga
+	@ cp ../libarchfpga/libarchfpga.a $@
+	@ ar rcs $@ $(OBJ_DEBUG)
+	@ ar d $@ main.o
+
+
 # Enable a second round of expansion so that we may include
 # the target directory as a prerequisite of the object file.
 .SECONDEXPANSION:
@@ -102,16 +120,21 @@ libvpr.a: $(OBJ) Makefile libarchfpga
 # without this, all but the last file written to a directory would appear
 # to be out of date.
 $(OBJ): OBJ/%.o:$(SRC_DIR)/%.c | $$(dir $$@D)
-	$(CC) $(FLAGS) -MD -MP -I$(OTHER_DIR) -ISRC/util -c $< -o $@
+	$(CC) $(FLAGS) $(OPT_FLAGS) -MD -MP -I$(OTHER_DIR) -ISRC/util -c $< -o $@
+
+$(OBJ_DEBUG): OBJ_DEBUG/%.o:$(SRC_DIR)/%.c | $$(dir $$@D)
+	$(CC) $(FLAGS) $(DEBUG_FLAGS) -MD -MP -I$(OTHER_DIR) -ISRC/util -c $< -o $@
 
 # Silently create target directories as need
-$(OBJ_DIRS):
+$(OBJ_DIRS) $(OBJ_DIRS_DEBUG):
 	@ mkdir -p $@
 
 -include $(DEP)
+-include $(DEP_DEBUG)
 
 clean:
 	rm -f $(EXE) $(OBJ) $(DEP)
+	rm -f $(EXE_DEBUG) $(OBJ_DEBUG) $(DEP_DEBUG)
 	cd ../libarchfpga && make clean
 
 clean_coverage: clean
diff --git vpr/SRC/base/CheckOptions.c vpr/SRC/base/CheckOptions.c
index aeaeeaf..eada647 100644
--- vpr/SRC/base/CheckOptions.c
+++ vpr/SRC/base/CheckOptions.c
@@ -108,8 +108,8 @@ void CheckOptions(INP t_options Options, INP boolean TimingEnabled) {
 		Cur = OptionBaseTokenList;
 		while (Cur->Str) {
 			if (Yes == Cur->Enum) {
-				vpr_printf(TIO_MESSAGE_ERROR, "Option '%s' is not allowed when placement is not run.\n", Cur->Str);
-				exit(1);
+				vpr_printf(TIO_MESSAGE_WARNING, "Option '%s' ignored when placement is not run.\n", Cur->Str);
+				/*exit(1);*/
 			}
 			++Cur;
 		}
diff --git vpr/SRC/base/CheckSetup.c vpr/SRC/base/CheckSetup.c
index e72b3d0..995b303 100644
--- vpr/SRC/base/CheckSetup.c
+++ vpr/SRC/base/CheckSetup.c
@@ -41,8 +41,8 @@ void CheckSetup(INP enum e_operation Operation,
 	}
 
 	if (!PlacerOpts.doPlacement && (USER == PlacerOpts.pad_loc_type)) {
-		vpr_printf(TIO_MESSAGE_ERROR, "A pad location file requires that placement is enabled.\n");
-		exit(1);
+		vpr_printf(TIO_MESSAGE_WARNING, "A pad location file requires that placement is enabled.\n");
+		/*exit(1);*/
 	}
 
 	if (RouterOpts.doRouting) {
diff --git vpr/SRC/base/OptionTokens.c vpr/SRC/base/OptionTokens.c
index fe2ddc5..ec35a8a 100644
--- vpr/SRC/base/OptionTokens.c
+++ vpr/SRC/base/OptionTokens.c
@@ -10,7 +10,8 @@ struct s_TokenPair OptionBaseTokenList[] = {
 				OT_RECOMPUTE_CRIT_ITER }, { "inner_loop_recompute_divider",
 				OT_INNER_LOOP_RECOMPUTE_DIVIDER }, { "fix_pins", OT_FIX_PINS },
 		{ "full_stats", OT_FULL_STATS }, { "fast", OT_FAST }, { "echo_file",
-				OT_CREATE_ECHO_FILE }, { "gen_postsynthesis_netlist",
+				OT_CREATE_ECHO_FILE }, 
+		{ "gen_postsynthesis_netlist",
 				OT_GENERATE_POST_SYNTHESIS_NETLIST }, { "timing_analysis",
 				OT_TIMING_ANALYSIS }, { "timing_analyze_only_with_net_delay",
 				OT_TIMING_ANALYZE_ONLY_WITH_NET_DELAY },
@@ -57,6 +58,11 @@ struct s_TokenPair OptionBaseTokenList[] = {
 		{ "power_output_file", OT_POWER_OUT_FILE }, /* Output file for power results */
 		{ "power", OT_POWER }, /* Run power estimation? */
 		{ "tech_properties", OT_CMOS_TECH_BEHAVIOR_FILE }, /* Technology properties */
+		/* EH: */
+		{ "dump_vtb_rrg", OT_DUMP_VTB_RRG },
+		{ "no_routethru", OT_NO_ROUTETHRU },
+		{ "no_reroute", OT_NO_REROUTE },
+		{ "no_globals", OT_NO_GLOBALS },
 		{ NULL, OT_BASE_UNKNOWN } /* End of list marker */
 };
 
diff --git vpr/SRC/base/OptionTokens.h vpr/SRC/base/OptionTokens.h
index f88504b..c1aec10 100644
--- vpr/SRC/base/OptionTokens.h
+++ vpr/SRC/base/OptionTokens.h
@@ -74,6 +74,11 @@ enum e_OptionBaseToken {
 	OT_ACTIVITY_FILE,
 	OT_POWER_OUT_FILE,
 	OT_CMOS_TECH_BEHAVIOR_FILE,
+	/* EH: */
+	OT_DUMP_VTB_RRG,
+	OT_NO_ROUTETHRU,
+	OT_NO_REROUTE,
+	OT_NO_GLOBALS,
 	OT_BASE_UNKNOWN /* Must be last since used for counting enum items */
 };
 
diff --git vpr/SRC/base/ReadOptions.c vpr/SRC/base/ReadOptions.c
index e54bf87..98e2f1d 100644
--- vpr/SRC/base/ReadOptions.c
+++ vpr/SRC/base/ReadOptions.c
@@ -10,6 +10,7 @@
 #include "globals.h"
 
 static boolean EchoEnabled;
+static boolean DumpVtbEnabled;
 
 static boolean Generate_PostSynthesis_Netlist;
 
@@ -144,6 +145,7 @@ void alloc_and_load_echo_file_info() {
 	setEchoFileName(E_ECHO_PLACEMENT_CRITICAL_PATH, "placement_critical_path.echo");
 	setEchoFileName(E_ECHO_PLACEMENT_LOWER_BOUND_SINK_DELAYS, "placement_lower_bound_sink_delays.echo");
 	setEchoFileName(E_ECHO_PLACEMENT_LOGIC_SINK_DELAYS, "placement_logic_sink_delays.echo");
+	setEchoFileName(E_ECHO_PLACEMENT_LOOKUP, "lookup_dump.echo");
 	setEchoFileName(E_ECHO_ROUTING_SINK_DELAYS, "routing_sink_delays.echo");
 	setEchoFileName(E_ECHO_POST_FLOW_TIMING_GRAPH, "post_flow_timing_graph.blif");
 	setEchoFileName(E_ECHO_POST_PACK_NETLIST, "post_pack_netlist.blif");
@@ -166,6 +168,7 @@ void alloc_and_load_echo_file_info() {
 	setEchoFileName(E_ECHO_CRITICALITY, "criticality.echo");
 	setEchoFileName(E_ECHO_COMPLETE_NET_TRACE, "complete_net_trace.echo");
 	setEchoFileName(E_ECHO_SEG_DETAILS, "seg_details.txt");
+	setEchoFileName(E_ECHO_PLACEMENT_MACROS, "placement_macros.echo");
 }
 
 void free_echo_file_info() {
@@ -474,6 +477,13 @@ ProcessOption(INP char **Args, INOUTP t_options * Options) {
 	case OT_CMOS_TECH_BEHAVIOR_FILE:
 		return ReadString(Args, &Options->CmosTechFile);
 
+		/* EH */
+	case OT_DUMP_VTB_RRG:
+	case OT_NO_ROUTETHRU:
+	case OT_NO_REROUTE:
+	case OT_NO_GLOBALS:
+		return Args;
+
 	default:
 		vpr_printf(TIO_MESSAGE_ERROR, "Unexpected option '%s' on command line.\n", *PrevArgs);
 		exit(1);
@@ -964,4 +974,20 @@ ReadString(INP char **Args, OUTP char **Val) {
 	return ++Args;
 }
 
+boolean IsDumpVtbEnabled(INP t_options *Options) {
+	if (Options->Count[OT_DUMP_VTB_RRG]) {
+		return TRUE;
+	}
+	return FALSE;
+}
+
+
+boolean getDumpVtbEnabled(void) {
+	return DumpVtbEnabled;
+}
+
+void setDumpVtbEnabled(boolean dump_enabled) {
+	DumpVtbEnabled = dump_enabled;
+}
+
 
diff --git vpr/SRC/base/ReadOptions.h vpr/SRC/base/ReadOptions.h
index 6ab5fc8..073ad65 100644
--- vpr/SRC/base/ReadOptions.h
+++ vpr/SRC/base/ReadOptions.h
@@ -90,6 +90,9 @@ struct s_options {
 
 	/* Last read settings file */
 	int read_settings;
+
+	/* EH */
+	boolean DumpVtbRrg;
 };
 
 enum e_echo_files {
@@ -108,6 +111,7 @@ enum e_echo_files {
 	E_ECHO_PLACEMENT_CRITICAL_PATH,
 	E_ECHO_PLACEMENT_LOWER_BOUND_SINK_DELAYS,
 	E_ECHO_PLACEMENT_LOGIC_SINK_DELAYS,
+	E_ECHO_PLACEMENT_LOOKUP,
 	E_ECHO_ROUTING_SINK_DELAYS,
 	E_ECHO_POST_FLOW_TIMING_GRAPH,
 	E_ECHO_POST_PACK_NETLIST,
@@ -130,6 +134,7 @@ enum e_echo_files {
 	E_ECHO_CRITICALITY,
 	E_ECHO_COMPLETE_NET_TRACE,
 	E_ECHO_SEG_DETAILS,
+	E_ECHO_PLACEMENT_MACROS,
 	E_ECHO_END_TOKEN
 };
 
@@ -171,4 +176,9 @@ boolean GetPostSynthesisOption(void);
 void SetPostSynthesisOption(boolean post_synthesis_enabled);
 
 boolean IsPostSynthesisEnabled(INP t_options *Options);
+
+/* EH */
+boolean getDumpVtbEnabled(void);
+void setDumpVtbEnabled(boolean dump_enabled);
+boolean IsDumpVtbEnabled(INP t_options *Options);
 #endif
diff --git vpr/SRC/base/SetupGrid.c vpr/SRC/base/SetupGrid.c
index c009b7d..3534b72 100644
--- vpr/SRC/base/SetupGrid.c
+++ vpr/SRC/base/SetupGrid.c
@@ -19,7 +19,7 @@ static void CheckGrid(void);
 static t_type_ptr find_type_col(INP int x);
 
 /* Create and fill FPGA architecture grid.         */
-void alloc_and_load_grid(INOUTP int *num_instances_type) {
+void alloc_and_load_grid(INOUTP int *num_instances_type, const t_arch *arch) {
 
 	int i, j;
 	t_type_ptr type;
@@ -90,22 +90,88 @@ void alloc_and_load_grid(INOUTP int *num_instances_type) {
 		type = find_type_col(i);
 		for (j = 1; j <= ny; j++) {
 			grid[i][j].type = type;
-			grid[i][j].offset = (j - 1) % type->height;
-			if (j + grid[i][j].type->height - 1 - grid[i][j].offset > ny) {
-				grid[i][j].type = EMPTY_TYPE;
-				grid[i][j].offset = 0;
-			}
+			if (type != IO_TYPE) {
+				int k;
+				grid[i][j].offset = (j - 1) % type->height;
+				if (j + grid[i][j].type->height - 1 - grid[i][j].offset > ny) {
+					grid[i][j].type = EMPTY_TYPE;
+					grid[i][j].offset = 0;
+				}
 
-			if (type->capacity > 1) {
-				vpr_printf(TIO_MESSAGE_ERROR, "in FillArch(), expected core blocks to have capacity <= 1 but (%d, %d) has type '%s' and capacity %d.\n", 
-						i, j, grid[i][j].type->name, grid[i][j].type->capacity);
-				exit(1);
+				//if (type->capacity > 1) {
+				//	vpr_printf(TIO_MESSAGE_ERROR, "in FillArch(), expected core blocks to have capacity <= 1 but (%d, %d) has type '%s' and capacity %d.\n", 
+				//			i, j, grid[i][j].type->name, grid[i][j].type->capacity);
+				//	exit(1);
+				//}
+
+				grid[i][j].blocks = (int *) my_malloc(sizeof(int) * type->capacity);
+				for (k = 0; k < type->capacity; ++k) {
+					grid[i][j].blocks[k] = EMPTY;
+					if (grid[i][j].offset == 0) {
+						num_instances_type[grid[i][j].type->index]++;
+					}
+				}
+			}
+			else {
+				int k;
+				grid[i][j].blocks = (int *)my_malloc(sizeof(int) * IO_TYPE->capacity);
+				for(k = 0; k < IO_TYPE->capacity; k++)
+				{
+					grid[i][j].blocks[k] = EMPTY;
+					if(grid[i][j].offset == 0)
+					{
+						num_instances_type[IO_TYPE->index]++;
+					}
+				}
 			}
+		}
+	}
+
+	/* EH: Add support for overriding blocks */
+	for (i = 0; i < arch->num_overrides; i++)
+	{
+		int startx, starty, endx, endy, incx, incy;
+		int x, y, h;
+		int itype;
+
+		startx = arch->overrides[i].startx;
+		starty = arch->overrides[i].starty;
+		endx = arch->overrides[i].endx;
+		endy = arch->overrides[i].endy;
+		incx = arch->overrides[i].incx;
+		incy = arch->overrides[i].incy;
+		assert(startx >= 0 && startx <= nx+1);
+		assert(starty >= 0 && starty <= ny+1);
+		assert(endx >= 0 && endx <= (nx+1)+1);
+		assert(endy >= 0 && endy <= (ny+1)+1);
+		assert(incx > 0 && incx <= nx+1);
+		assert(incy > 0 && incy <= ny+1);
+
+		for (itype = 0; itype < num_types; itype++) {
+			if (strcmp(type_descriptors[itype].name, arch->overrides[i].type) == 0)
+				break;
+		}
+		if (itype == num_types) {
+			vpr_printf(TIO_MESSAGE_ERROR, "overrideslist type %s not recognised!\n", arch->overrides[i].type);
+			exit(1);
+		}
 
-			grid[i][j].blocks = (int *) my_malloc(sizeof(int));
-			grid[i][j].blocks[0] = EMPTY;
-			if (grid[i][j].offset == 0) {
-				num_instances_type[grid[i][j].type->index]++;
+		for (x = startx; x <= endx; x += incx)
+		{
+			for (y = starty; y <= endy; y += incy)
+			{
+				type = grid[x][y].type;
+				if (grid[x][y].offset == 0)
+					num_instances_type[type->index] -= type->capacity;
+				if (&type_descriptors[itype] == EMPTY_TYPE)
+					++num_instances_type[type_descriptors[itype].index];
+				else 
+					num_instances_type[type_descriptors[itype].index] += type_descriptors[itype].capacity;
+				for (h = 0; h < type_descriptors[itype].height; ++h) {
+					assert(y+h <= (ny+1));
+					grid[x][y+h].type = &type_descriptors[itype];
+					grid[x][y+h].offset = h;
+				}
 			}
 		}
 	}
@@ -185,8 +251,9 @@ static t_type_ptr find_type_col(INP int x) {
 	column_type = FILL_TYPE;
 
 	for (i = 0; i < num_types; i++) {
-		if (&type_descriptors[i] == IO_TYPE
-				|| &type_descriptors[i] == EMPTY_TYPE
+		// EH: Do not ignore IO_TYPE
+		if (/*&type_descriptors[i] == IO_TYPE
+				||*/ &type_descriptors[i] == EMPTY_TYPE
 				|| &type_descriptors[i] == FILL_TYPE)
 			continue;
 		num_loc = type_descriptors[i].num_grid_loc_def;
diff --git vpr/SRC/base/SetupGrid.h vpr/SRC/base/SetupGrid.h
index ba864ca..a14fa9a 100644
--- vpr/SRC/base/SetupGrid.h
+++ vpr/SRC/base/SetupGrid.h
@@ -9,7 +9,7 @@
 
  */
 
-void alloc_and_load_grid(INOUTP int *num_instances_type); /* [0..num_types-1] */
+void alloc_and_load_grid(INOUTP int *num_instances_type, const t_arch *arch); /* [0..num_types-1] */
 void freeGrid(void);
 
 #endif
diff --git vpr/SRC/base/SetupVPR.c vpr/SRC/base/SetupVPR.c
index 7cb9571..8adb04f 100644
--- vpr/SRC/base/SetupVPR.c
+++ vpr/SRC/base/SetupVPR.c
@@ -179,7 +179,7 @@ void SetupVPR(INP t_options *Options, INP boolean TimingEnabled,
 	for (i = 0; i < num_types; i++) {
 		if (strcmp(type_descriptors[i].name, "<EMPTY>") == 0) {
 			EMPTY_TYPE = &type_descriptors[i];
-		} else if (strcmp(type_descriptors[i].name, "io") == 0) {
+		} else if (strcmp(type_descriptors[i].name, "IOB") == 0) {
 			IO_TYPE = &type_descriptors[i];
 		} else {
 			for (j = 0; j < type_descriptors[i].num_grid_loc_def; j++) {
@@ -457,6 +457,20 @@ static void SetupRouterOpts(INP t_options Options, INP boolean TimingEnabled,
 			RouterOpts->doRouting = TRUE;
 	}
 
+	/* EH */
+	RouterOpts->noRoutethru = FALSE;
+	if (Options.Count[OT_NO_ROUTETHRU]) {
+		RouterOpts->noRoutethru = TRUE;
+	}
+	RouterOpts->noReroute = FALSE;
+	if (Options.Count[OT_NO_REROUTE]) {
+		RouterOpts->noReroute = TRUE;
+	}
+	RouterOpts->noGlobals = FALSE;
+	if (Options.Count[OT_NO_GLOBALS]) {
+		RouterOpts->noGlobals = TRUE;
+	}
+
 }
 
 static void SetupAnnealSched(INP t_options Options,
diff --git vpr/SRC/base/check_netlist.c vpr/SRC/base/check_netlist.c
index 964da69..7900b58 100644
--- vpr/SRC/base/check_netlist.c
+++ vpr/SRC/base/check_netlist.c
@@ -130,6 +130,10 @@ static int check_connections_to_global_clb_pins(int inet) {
 				vpr_printf(TIO_MESSAGE_WARNING, "\tnet #%d (%s) is driven by CLB output pin (#%d) on block #%d (%s).\n", 
 						inet, clb_net[inet].name, node_block_pin, iblk, block[iblk].name);
 			} else { /* Otherwise -> Error */
+				/* EH: Allow global clocks to connect to BUFGs */
+				boolean is_bufg = (strcmp(block[iblk].type->name, "BUFG") == 0 ? TRUE : FALSE);
+				if (is_bufg)
+					continue;
 				vpr_printf(TIO_MESSAGE_ERROR, "in check_connections_to_global_clb_pins:\n");
 				vpr_printf(TIO_MESSAGE_ERROR, "\tpin %d on net #%d (%s) connects to CLB input pin (#%d) on block #%d (%s).\n", 
 						ipin, inet, clb_net[inet].name, node_block_pin, iblk, block[iblk].name);
diff --git vpr/SRC/base/draw.c vpr/SRC/base/draw.c
index 2b66c59..fc40e25 100755
--- vpr/SRC/base/draw.c
+++ vpr/SRC/base/draw.c
@@ -512,28 +512,38 @@ static void drawplace(void) {
 			height = grid[i][j].type->height;
 
 			if (num_sub_tiles < 1) {
+/* EH: Do not draw empty blocks */
+#if 0
 				setcolor(BLACK);
 				setlinestyle(DASHED);
 				drawrect(tile_x[i], tile_y[j], tile_x[i] + tile_width,
 						tile_y[j] + tile_width);
 				draw_x(tile_x[i] + (tile_width / 2),
 						tile_y[j] + (tile_width / 2), (tile_width / 2));
+#endif
 			}
 
 			for (k = 0; k < num_sub_tiles; ++k) {
 				/* Graphics will look unusual for multiple height and capacity */
 				assert(height == 1 || num_sub_tiles == 1);
 				/* Get coords of current sub_tile */
+/* EH: Do not draw top/bottom I/Os; 
+ *     do not restrict I/Os to i==0 or i==(nx+1) */
+#if 0
 				if ((i < 1) || (i > nx)) { /* left and right fringes */
+#endif
+				if (grid[i][j].type == IO_TYPE) {
 					x1 = tile_x[i];
 					y1 = tile_y[j] + (k * sub_tile_step);
 					x2 = x1 + tile_width;
 					y2 = y1 + sub_tile_step;
+#if 0
 				} else if ((j < 1) || (j > ny)) { /* top and bottom fringes */
 					x1 = tile_x[i] + (k * sub_tile_step);
 					y1 = tile_y[j];
 					x2 = x1 + sub_tile_step;
 					y2 = y1 + tile_width;
+#endif
 				} else {
 					assert(num_sub_tiles <= 1);
 					/* Need to change draw code to support */
diff --git vpr/SRC/base/place_and_route.c vpr/SRC/base/place_and_route.c
index 1735081..e1ebfda 100644
--- vpr/SRC/base/place_and_route.c
+++ vpr/SRC/base/place_and_route.c
@@ -85,7 +85,8 @@ void place_and_route(enum e_operation operation,
 				(PLACE_ONCE == placer_opts.place_freq) || (PLACE_ALWAYS == placer_opts.place_freq));
 		begin = clock();
 		try_place(placer_opts, annealing_sched, chan_width_dist, router_opts,
-				det_routing_arch, segment_inf, timing_inf, directs, num_directs);
+				det_routing_arch, segment_inf, timing_inf, directs, num_directs,
+				arch_file);
 		print_place(place_file, net_file, arch_file);
 		end = clock();
 #ifdef CLOCKS_PER_SEC
@@ -122,6 +123,10 @@ void place_and_route(enum e_operation operation,
 		}
 		/* Other constraints can be left to rr_graph to check since this is one pass routing */
 
+		// EH
+		fix_bram_connections();
+		split_gnd_vcc_nets(&router_opts);
+
 		/* Allocate the major routing structures. */
 
 		clb_opins_used_locally = alloc_route_structs();
@@ -130,9 +135,17 @@ void place_and_route(enum e_operation operation,
 		net_delay = alloc_net_delay(&net_delay_ch, clb_net,
 					num_nets);
 
+		// EH: Transform clocks into non-global nets 
+		// so that they get routed
+		// (but only after timing graph is built)
+		if (!router_opts.noGlobals) {
+			transform_clocks();
+		}
+
 		success = try_route(width_fac, router_opts, det_routing_arch,
 				segment_inf, timing_inf, net_delay, slacks, chan_width_dist,
-				clb_opins_used_locally, &Fc_clipped, directs, num_directs);
+				clb_opins_used_locally, &Fc_clipped, directs, num_directs,
+				arch_file);
 
 		if (Fc_clipped) {
 			vpr_printf(TIO_MESSAGE_WARNING, "Fc_output was too high and was clipped to full (maximum) connectivity.\n");
@@ -349,11 +362,11 @@ static int binary_search_place_and_route(struct s_placer_opts placer_opts,
 			placer_opts.place_chan_width = current;
 			try_place(placer_opts, annealing_sched, chan_width_dist,
 					router_opts, det_routing_arch, segment_inf, timing_inf,
-					directs, num_directs);
+					directs, num_directs, arch_file);
 		}
 		success = try_route(current, router_opts, det_routing_arch, segment_inf,
 				timing_inf, net_delay, slacks, chan_width_dist,
-				clb_opins_used_locally, &Fc_clipped, directs, num_directs);
+				clb_opins_used_locally, &Fc_clipped, directs, num_directs, arch_file);
 		attempt_count++;
 		fflush(stdout);
 #if 1
@@ -456,11 +469,12 @@ static int binary_search_place_and_route(struct s_placer_opts placer_opts,
 				placer_opts.place_chan_width = current;
 				try_place(placer_opts, annealing_sched, chan_width_dist,
 						router_opts, det_routing_arch, segment_inf, timing_inf,
-						directs, num_directs);
+						directs, num_directs, arch_file);
 			}
 			success = try_route(current, router_opts, det_routing_arch,
 					segment_inf, timing_inf, net_delay, slacks,
-					chan_width_dist, clb_opins_used_locally, &Fc_clipped, directs, num_directs);
+					chan_width_dist, clb_opins_used_locally, &Fc_clipped, directs, 
+					num_directs, arch_file);
 
 			if (success && Fc_clipped == FALSE) {
 				final = current;
@@ -504,7 +518,7 @@ static int binary_search_place_and_route(struct s_placer_opts placer_opts,
 			det_routing_arch.global_route_switch,
 			det_routing_arch.delayless_switch, timing_inf,
 			det_routing_arch.wire_to_ipin_switch, router_opts.base_cost_type,
-			directs, num_directs, FALSE,
+			directs, num_directs, FALSE, arch_file,
 			&warnings);
 
 	restore_routing(best_routing, clb_opins_used_locally,
diff --git vpr/SRC/base/read_blif.c vpr/SRC/base/read_blif.c
index 2015bc8..b8322ad 100644
--- vpr/SRC/base/read_blif.c
+++ vpr/SRC/base/read_blif.c
@@ -570,6 +570,7 @@ static void add_subckt(int doall, t_model *user_models) {
 			subckt_signal_name[subckt_index_signals] = my_strdup(ptr);
 
 			toggle = 1;
+
 		} else if (toggle == 1) {
 			/* copy in the circuit_signal name */
 			circuit_signal_name[subckt_index_signals] = my_strdup(ptr);
@@ -704,21 +705,23 @@ static void add_subckt(int doall, t_model *user_models) {
 								subckt_signal_name[i], subckt_name);
 					}
 					found_subckt_signal = TRUE;
-					if (port->is_clock) {
-						assert(
-								logical_block[num_logical_blocks-1].clock_net == OPEN);
-						assert(my_atoi(pin_number) == 0);
-						logical_block[num_logical_blocks - 1].clock_net =
+					if (strcmp(circuit_signal_name[i], "unconn") != 0) {
+						if (port->is_clock) {
+							assert(
+									logical_block[num_logical_blocks-1].clock_net == OPEN);
+							assert(my_atoi(pin_number) == 0);
+							logical_block[num_logical_blocks - 1].clock_net = 
 								add_vpack_net(circuit_signal_name[i], RECEIVER,
 										num_logical_blocks - 1, port->index,
 										my_atoi(pin_number), TRUE, doall);
-					} else {
-						logical_block[num_logical_blocks - 1].input_nets[port->index][my_atoi(
-								pin_number)] = add_vpack_net(
-								circuit_signal_name[i], RECEIVER,
-								num_logical_blocks - 1, port->index,
-								my_atoi(pin_number), FALSE, doall);
-						input_net_count++;
+						} else {
+							logical_block[num_logical_blocks - 1].input_nets[port->index][my_atoi(
+									pin_number)] = add_vpack_net(
+										circuit_signal_name[i], RECEIVER,
+										num_logical_blocks - 1, port->index,
+										my_atoi(pin_number), FALSE, doall);
+							input_net_count++;
+						}
 					}
 				}
 				port = port->next;
@@ -945,7 +948,12 @@ static int add_vpack_net(char *ptr, int type, int bnum, int bport, int bpin,
 			vpack_net[nindex].node_block[j] = bnum;
 			vpack_net[nindex].node_block_port[j] = bport;
 			vpack_net[nindex].node_block_pin[j] = bpin;
-			vpack_net[nindex].is_global = is_global;
+			/* EH: allow global flag to be set, but not unset,
+			 * to allow clocks (into latches) to be set as global,
+			 * but not later unset because of connecting normally
+			 * into a BUFG */ 
+			if (!vpack_net[nindex].is_global)
+				vpack_net[nindex].is_global = is_global;
 			return (nindex);
 		}
 		prev_ptr = h_ptr;
@@ -1273,6 +1281,13 @@ static void check_net(boolean sweep_hanging_nets_and_inputs) {
 						L_check_net =
 								logical_block[iblk].input_nets[iport][ipin];
 					}
+					/* EH: Allow global clocks to connect to BUFGs */
+					if (L_check_net == OPEN) {
+						assert(strcmp(logical_block[iblk].model->name, "bufgctrl") == 0);
+						L_check_net =
+								logical_block[iblk].input_nets[iport][ipin];
+					}
+					assert(L_check_net != OPEN);
 					if (L_check_net != i) {
 						vpr_printf(TIO_MESSAGE_ERROR,
 								"Input net for block %s #%d is net %s #%d but connecting net is %s #%d.\n",
@@ -1659,7 +1674,7 @@ static void compress_netlist(void) {
 					for (ipin = 0; ipin < port->size; ipin++) {
 						if (port->is_clock) {
 							assert(
-									port->size == 1 && port->index == 0 && ipin == 0);
+									port->size >= 1 && port->index == 0 /*&& ipin == 0*/);
 							if (logical_block[index].clock_net == OPEN)
 								continue;
 							logical_block[index].clock_net =
diff --git vpr/SRC/base/read_netlist.c vpr/SRC/base/read_netlist.c
index 592b8a8..64dc535 100644
--- vpr/SRC/base/read_netlist.c
+++ vpr/SRC/base/read_netlist.c
@@ -173,6 +173,7 @@ void read_netlist(INP const char *net_file, INP const t_arch *arch,
 			exit(1);
 		}
 	}
+
 	/* TODO: Add additional check to make sure net connections match */
 
 	
@@ -923,7 +924,12 @@ static void load_external_nets_and_cb(INP int L_num_blocks,
 					(*ext_nets)[netnum].node_block[count[netnum]] = i;
 					(*ext_nets)[netnum].node_block_pin[count[netnum]] = j;
 
-					(*ext_nets)[netnum].is_global = block_list[i].type->is_global_pin[j]; /* Error check performed later to ensure no mixing of global and non-global signals */
+					/* EH: Allow global flag to be set, but not unset
+					 * to prevent .subckt bufgctrl unsetting clocks,
+					 * this is important so that it bails on the block
+					 * with the non-clock input below... */
+					if (!(*ext_nets)[netnum].is_global)
+						(*ext_nets)[netnum].is_global = block_list[i].type->is_global_pin[j]; /* Error check performed later to ensure no mixing of global and non-global signals */
 				} else {
 					assert(
 							DRIVER == block_list[i].type->class_inf[block_list[i].type->pin_class[j]].type);
@@ -945,7 +951,19 @@ static void load_external_nets_and_cb(INP int L_num_blocks,
 		}
 		for (j = 0; j < num_tokens; j++) {
 			if (strcmp(circuit_clocks[j], (*ext_nets)[i].name) == 0) {
-				assert((*ext_nets)[i].is_global == TRUE); /* above code should have caught this case, if not, then bug in code */
+				/* EH: Allow clocks that only connect to BUFG to be non global */
+				boolean is_bufg;
+				if ((*ext_nets)[i].num_sinks == 1) {
+					int iblk = (*ext_nets)[i].node_block[1];
+					is_bufg = (strcmp(block_list[iblk].type->name, "BUFG") == 0 ? TRUE : FALSE);
+				}
+				else {
+					is_bufg = FALSE;
+				}
+			
+				if (!is_bufg) {
+					assert((*ext_nets)[i].is_global == TRUE); /* above code should have caught this case, if not, then bug in code */
+				}
 			}
 		}
 	}
diff --git vpr/SRC/base/read_place.c vpr/SRC/base/read_place.c
index d8889c5..92b436c 100644
--- vpr/SRC/base/read_place.c
+++ vpr/SRC/base/read_place.c
@@ -56,9 +56,9 @@ void read_place(INP const char *place_file, INP const char *arch_file,
 		exit(1);
 	}
 	if (0 != strcmp(tokens[5], net_file)) {
-		vpr_printf(TIO_MESSAGE_ERROR, "'%s' - Netlist file that generated placement (%s) does not match current netlist file (%s).\n", 
+		vpr_printf(TIO_MESSAGE_WARNING, "'%s' - Netlist file that generated placement (%s) does not match current netlist file (%s).\n", 
 				place_file, tokens[5], net_file);
-		exit(1);
+		//exit(1);
 	}
 	free(*tokens);
 	free(tokens);
@@ -226,6 +226,7 @@ void read_user_pad_loc(char *pad_loc_file) {
 
 		block[bnum].x = i; /* Will be reloaded by initial_placement anyway. */
 		block[bnum].y = j; /* I need to set .x only as a done flag.         */
+		block[bnum].z = k;
 		block[bnum].isFixed = TRUE;
 
 		if (grid[i][j].type != IO_TYPE) {
diff --git vpr/SRC/base/stats.c vpr/SRC/base/stats.c
index 6a034e1..551b7ff 100644
--- vpr/SRC/base/stats.c
+++ vpr/SRC/base/stats.c
@@ -168,11 +168,11 @@ static void get_channel_occupancy_stats(void) {
 
 	int i, j, max_occ, total_x, total_y;
 	float av_occ;
-	int **chanx_occ; /* [1..nx][0..ny] */
-	int **chany_occ; /* [0..nx][1..ny] */
+	int **chanx_occ; /* [0..nx][0..ny] */
+	int **chany_occ; /* [0..nx][0..ny] */
 
-	chanx_occ = (int **) alloc_matrix(1, nx, 0, ny, sizeof(int));
-	chany_occ = (int **) alloc_matrix(0, nx, 1, ny, sizeof(int));
+	chanx_occ = (int **) alloc_matrix(0, nx, 0, ny, sizeof(int));
+	chany_occ = (int **) alloc_matrix(0, nx, 0, ny, sizeof(int));
 	load_channel_occupancies(chanx_occ, chany_occ);
 
 	vpr_printf(TIO_MESSAGE_INFO, "\n");
@@ -215,8 +215,8 @@ static void get_channel_occupancy_stats(void) {
 	vpr_printf(TIO_MESSAGE_INFO, "Total tracks in x-direction: %d, in y-direction: %d\n", total_x, total_y);
 	vpr_printf(TIO_MESSAGE_INFO, "\n");
 
-	free_matrix(chanx_occ, 1, nx, 0, sizeof(int));
-	free_matrix(chany_occ, 0, nx, 1, sizeof(int));
+	free_matrix(chanx_occ, 0, nx, 0, sizeof(int));
+	free_matrix(chany_occ, 0, nx, 0, sizeof(int));
 }
 
 static void load_channel_occupancies(int **chanx_occ, int **chany_occ) {
@@ -283,6 +283,7 @@ void get_num_bends_and_length(int inet, int *bends_ptr, int *len_ptr,
 	int inode;
 	t_rr_type curr_type, prev_type;
 	int bends, length, segments;
+	int cost_index, default_cost, default_cost_ortho;
 
 	bends = 0;
 	length = 0;
@@ -295,12 +296,15 @@ void get_num_bends_and_length(int inet, int *bends_ptr, int *len_ptr,
 	}
 	inode = prevptr->index;
 	prev_type = rr_node[inode].type;
+	default_cost = 4;
+	default_cost_ortho = rr_indexed_data[default_cost].ortho_cost_index;
 
 	tptr = prevptr->next;
 
 	while (tptr != NULL) {
 		inode = tptr->index;
 		curr_type = rr_node[inode].type;
+		cost_index = rr_node[inode].cost_index;
 
 		if (curr_type == SINK) { /* Starting a new segment */
 			tptr = tptr->next; /* Link to existing path - don't add to len. */
@@ -311,13 +315,15 @@ void get_num_bends_and_length(int inet, int *bends_ptr, int *len_ptr,
 		}
 
 		else if (curr_type == CHANX || curr_type == CHANY) {
-			segments++;
-			length += 1 + rr_node[inode].xhigh - rr_node[inode].xlow
-					+ rr_node[inode].yhigh - rr_node[inode].ylow;
-
-			if (curr_type != prev_type
-					&& (prev_type == CHANX || prev_type == CHANY))
-				bends++;
+			if (cost_index != default_cost && cost_index != default_cost_ortho) {
+				segments++;
+				length += 1 + rr_node[inode].xhigh - rr_node[inode].xlow
+						+ rr_node[inode].yhigh - rr_node[inode].ylow;
+
+				if (curr_type != prev_type
+						&& (prev_type == CHANX || prev_type == CHANY))
+					bends++;
+			}
 		}
 
 		prev_type = curr_type;
diff --git vpr/SRC/base/vpr_api.c vpr/SRC/base/vpr_api.c
index 985bfc3..51d49e8 100644
--- vpr/SRC/base/vpr_api.c
+++ vpr/SRC/base/vpr_api.c
@@ -194,6 +194,7 @@ void vpr_init(INP int argc, INP char **argv, OUTP t_options *options,
 	vpr_setup->TimingEnabled = IsTimingEnabled(options);
 	/* Determine whether echo is on or off */
 	setEchoEnabled(IsEchoEnabled(options));
+	setDumpVtbEnabled(IsDumpVtbEnabled(options));
 	SetPostSynthesisOption(IsPostSynthesisEnabled(options));
 	vpr_setup->constant_net_delay = options->constant_net_delay;
 
@@ -280,7 +281,7 @@ void vpr_init_pre_place_and_route(INP t_vpr_setup vpr_setup, INP t_arch Arch) {
 				vpr_printf(TIO_MESSAGE_INFO,
 						"Auto-sizing FPGA at x = %d y = %d\n", nx, ny);
 #endif
-				alloc_and_load_grid(num_instances_type);
+				alloc_and_load_grid(num_instances_type, &Arch);
 				freeGrid();
 
 				/* Test if netlist fits in grid */
@@ -321,13 +322,13 @@ void vpr_init_pre_place_and_route(INP t_vpr_setup vpr_setup, INP t_arch Arch) {
 				nx = current;
 				ny = nint(current / Arch.clb_grid.Aspect);
 			}
-			alloc_and_load_grid(num_instances_type);
+			alloc_and_load_grid(num_instances_type, &Arch);
 			vpr_printf(TIO_MESSAGE_INFO, "FPGA auto-sized to x = %d y = %d\n",
 					nx, ny);
 		} else {
 			nx = Arch.clb_grid.W;
 			ny = Arch.clb_grid.H;
-			alloc_and_load_grid(num_instances_type);
+			alloc_and_load_grid(num_instances_type, &Arch);
 		}
 
 		vpr_printf(TIO_MESSAGE_INFO,
diff --git vpr/SRC/base/vpr_types.h vpr/SRC/base/vpr_types.h
index bc13714..3d299da 100755
--- vpr/SRC/base/vpr_types.h
+++ vpr/SRC/base/vpr_types.h
@@ -710,6 +710,10 @@ struct s_router_opts {
 	boolean verify_binary_search;
 	boolean full_stats;
 	boolean doRouting;
+	/* EH */
+	boolean noRoutethru;
+	boolean noReroute;
+	boolean noGlobals;
 };
 
 /* All the parameters controlling the router's operation are in this        *
@@ -903,11 +907,13 @@ typedef struct s_rr_node {
 	int *edges;
 	short *switches;
 
+	/* EH */
 	float R;
 	float C;
 
 	enum e_direction direction; /* UDSD by AY */
-	enum e_drivers drivers; /* UDSD by AY */
+	/* EH */
+	enum e_drivers drivers;
 	int num_wire_drivers; /* UDSD by WMF */
 	int num_opin_drivers; /* UDSD by WMF (could use "short") */
 
@@ -1048,5 +1054,70 @@ typedef struct s_vpr_setup {
 	t_power_opts PowerOpts;
 } t_vpr_setup;
 
+/* EH */
+#define DEFAULT_SWITCH_INDEX	0
+#define L1_SWITCH_INDEX		1
+#define L2_SWITCH_INDEX		2
+#define L4_SWITCH_INDEX		3
+#define L6_SWITCH_INDEX		4
+#define LH12_SWITCH_INDEX	5
+#define LV12_SWITCH_INDEX	6
+#define L16_SWITCH_INDEX	7
+#define LV18_SWITCH_INDEX	8
+#define A6_SWITCH_INDEX		9
+#define A5_SWITCH_INDEX		10
+#define A4_SWITCH_INDEX		11
+#define A3_SWITCH_INDEX		12
+#define A2_SWITCH_INDEX		13
+#define A1_SWITCH_INDEX		14
+#define LUT_SWITCH_INDEX	15
+#define BYP_SWITCH_INDEX	16
+#define BYP_B_SWITCH_INDEX	17
+#define FAN_SWITCH_INDEX	18
+#define BRAM_DI_SWITCH_INDEX	19
+#define BRAM_AD_SWITCH_INDEX	20
+#define BRAM_WE_SWITCH_INDEX	21
+#define DSP_A_SWITCH_INDEX	22
+#define DSP_B_SWITCH_INDEX	23
+#define CLK2GEN_SWITCH_INDEX	24
+#define GEN2CLK_SWITCH_INDEX	25
+
+				/* 4 */
+#define DEFAULT_COST_INDEX	CHANX_COST_INDEX_START
+				/* 5 */
+#define CLOCK_COST_INDEX	DEFAULT_COST_INDEX+1
+				/* 6 */
+#define L1_COST_INDEX		DEFAULT_COST_INDEX+2
+				/* 7 */
+#define L2_COST_INDEX		DEFAULT_COST_INDEX+3
+				/* 8 */
+#define L4_COST_INDEX		DEFAULT_COST_INDEX+4
+				/* 9 */
+#define L6_COST_INDEX		DEFAULT_COST_INDEX+5
+				/* 10 */
+#define LH12_COST_INDEX		DEFAULT_COST_INDEX+6
+				/* 11 */
+#define LV12_COST_INDEX		DEFAULT_COST_INDEX+7
+				/* 12 */
+#define L16_COST_INDEX		DEFAULT_COST_INDEX+8
+				/* 13 */
+#define LV18_COST_INDEX		DEFAULT_COST_INDEX+9
+#define INV_COST_INDEX_OFFSET	10
+
+#define PTC_SLICEL_A6		0
+#define PTC_SLICEL_A5		1
+#define PTC_SLICEL_A4		2
+#define PTC_SLICEL_A3		3
+#define PTC_SLICEL_A2		4
+#define PTC_SLICEL_A1		5
+#define PTC_SLICEL_A6_VCCONLY	6
+#define PTC_SLICEL_AX		7
+#define PTC_SLICEL_CIN		32
+#define PTC_SLICEL_A		33
+
+#define PINS_PER_SLICEL		49
+#define IPINS_PER_BLE		8
+#define OPINS_PER_BLE		3
+
 #endif
 
diff --git vpr/SRC/pack/cluster.c vpr/SRC/pack/cluster.c
index e2745e7..ab4b5fb 100755
--- vpr/SRC/pack/cluster.c
+++ vpr/SRC/pack/cluster.c
@@ -325,8 +325,16 @@ void do_clustering(const t_arch *arch, t_pack_molecule *molecule_head,
 		hill_climbing_inputs_avail = NULL; /* if used, die hard */
 	}
 
-	/* TODO: make better estimate for nx and ny */
-	nx = ny = 1;
+	/* EH: Fix for fixed-size architectures */
+	num_instances_type = (int*)my_calloc(num_types, sizeof(int));
+	if (arch->clb_grid.IsAuto) {
+		/* TODO: make better estimate for nx and ny */
+		nx = ny = 1;
+	} else {
+		nx = arch->clb_grid.W;
+		ny = arch->clb_grid.H;
+		alloc_and_load_grid(num_instances_type, arch);
+	}
 
 	check_clocks(is_clock);
 #if 0
@@ -341,7 +349,7 @@ void do_clustering(const t_arch *arch, t_pack_molecule *molecule_head,
 	early_exit = FALSE;
 	num_blocks_hill_added = 0;
 	num_used_instances_type = (int*) my_calloc(num_types, sizeof(int));
-	num_instances_type = (int*) my_calloc(num_types, sizeof(int));
+	/*num_instances_type = (int*) my_calloc(num_types, sizeof(int));*/
 
 	assert(max_cluster_size < MAX_SHORT);
 	/* Limit maximum number of elements for each cluster */
@@ -632,12 +640,18 @@ static void check_clocks(boolean *is_clock) {
 				for (ipin = 0; ipin < port->size; ipin++) {
 					inet = logical_block[iblk].input_nets[port->index][ipin];
 					if (inet != OPEN) {
+						/* EH: Only error out if it's not a bufgctrl,
+						 * because these can have clocks on their 
+						 * regular ipins */
 						if (is_clock[inet]) {
-							vpr_printf(TIO_MESSAGE_ERROR, "Error in check_clocks.\n");
-							vpr_printf(TIO_MESSAGE_ERROR, "Net %d (%s) is a clock, but also connects to a logic block input on logical_block %d (%s).\n",
-									inet, vpack_net[inet].name, iblk, logical_block[iblk].name);
-							vpr_printf(TIO_MESSAGE_ERROR, "This would break the current clustering implementation and is electrically questionable, so clustering has been aborted.\n");
-							exit(1);
+							boolean is_bufg = (strcmp(logical_block[iblk].model->name, "bufgctrl") == 0 ? TRUE : FALSE);
+							if (!is_bufg) {
+								vpr_printf(TIO_MESSAGE_ERROR, "Error in check_clocks.\n");
+								vpr_printf(TIO_MESSAGE_ERROR, "Net %d (%s) is a clock, but also connects to a logic block input on logical_block %d (%s).\n",
+										inet, vpack_net[inet].name, iblk, logical_block[iblk].name);
+								vpr_printf(TIO_MESSAGE_ERROR, "This would break the current clustering implementation and is electrically questionable, so clustering has been aborted.\n");
+								exit(1);
+							}
 						}
 					}
 				}
@@ -923,7 +937,9 @@ static boolean primitive_type_and_memory_feasible(int iblk,
 						}
 					} else {
 						assert(port->dir == IN_PORT && port->is_clock);
-						assert(j == 0);
+						/* EH: Modify this check to allow clock bus on RAMs
+						 * so that RAMB36.CLK(ARD|BWD)CLK[LU]? can all be driven */
+						assert(j >= 0);
 						if (memory_class_pb) {
 							if (logical_block[iblk].clock_net
 									!= logical_block[sibling_memory_blk].clock_net) {
@@ -1977,7 +1993,7 @@ static void start_new_cluster(
 						nx, ny);
 				exit(1);
 			}
-			alloc_and_load_grid(num_instances_type);
+			alloc_and_load_grid(num_instances_type, arch);
 			freeGrid();
 		}
 	}
@@ -2248,6 +2264,7 @@ static void check_clustering(int num_clb, t_block *clb, boolean *is_clock) {
 	/* 
 	 * Check that each logical block connects to one primitive and that the primitive links up to the parent clb
 	 */
+	// TODO: This should be num_logical_blocks!?!
 	for (i = 0; i < num_blocks; i++) {
 		if (logical_block[i].pb->logical_block != i) {
 			vpr_printf(TIO_MESSAGE_ERROR, "pb %s does not contain logical block %s but logical block %s #%d links to pb.\n",
@@ -2532,7 +2549,9 @@ static void compute_and_mark_lookahead_pins_used(int ilogical_block) {
 		prim_port = &pb_type->ports[i];
 		if (prim_port->is_clock) {
 			assert(prim_port->type == IN_PORT);
-			assert(prim_port->num_pins == 1 && clock_port == 0);
+			/* EH: Modify this check to allow clock bus on RAMs
+			 * so that RAMB36.CLK(ARD|BWD)CLK[LU]? can all be driven */
+			assert(prim_port->num_pins >= 1 && clock_port == 0);
 			/* currently support only one clock for primitives */
 			if (logical_block[ilogical_block].clock_net != OPEN) {
 				compute_and_mark_lookahead_pins_used_for_pin(
diff --git vpr/SRC/pack/cluster_legality.c vpr/SRC/pack/cluster_legality.c
index 8080160..8b724a3 100755
--- vpr/SRC/pack/cluster_legality.c
+++ vpr/SRC/pack/cluster_legality.c
@@ -166,8 +166,25 @@ void reload_ext_net_rr_terminal_cluster(void) {
 				(logical_block[vpack_net[net_index].node_block[0]].clb_index
 						!= curr_cluster_index);
 		if (has_ext_source) {
+			/* EH: Go through all sinks and find the logical block
+			 * corresponding to this current cluster, and then
+			 * check if it's a BUFG */
+			boolean is_bufg = FALSE;
+			for (j = 1; j <= vpack_net[net_index].num_sinks; j++) {
+				int iblk = vpack_net[net_index].node_block[j];
+				if (logical_block[iblk].clb_index == curr_cluster_index) {
+					if (!strcmp(logical_block[iblk].model->name, "bufgctrl"))
+						is_bufg = TRUE;
+					break;
+				}
+			}
+			assert(j <= vpack_net[net_index].num_sinks);
+
 			/* Instantiate a source of this net */
-			if (vpack_net[net_index].is_global) {
+			/* EH: Only count the clock if net is global 
+			 * and this cluster is not a BUFG, because the
+			 * BUFG uses regular inputs (not clock inputs) */
+			if (vpack_net[net_index].is_global && !is_bufg) {
 				net_rr_terminals[net_index][0] = curr_ext_clock;
 				curr_ext_clock++;
 			} else {
@@ -972,7 +989,9 @@ void setup_intracluster_routing_for_logical_block(INP int iblock,
 	while (port) {
 		for (ipin = 0; ipin < port->size; ipin++) {
 			if (port->is_clock) {
-				assert(port->size == 1);
+				/* EH: Modify this check to allow clock bus on RAMs
+				 * so that RAMB36.CLK(ARD|BWD)CLK[LU]? can all be driven */
+				assert(port->size >= 1);
 				iblk_net = logical_block[iblock].clock_net;
 			} else {
 				iblk_net = logical_block[iblock].input_nets[port->index][ipin];
diff --git vpr/SRC/pack/output_blif.c vpr/SRC/pack/output_blif.c
index a11affe..4468e5c 100644
--- vpr/SRC/pack/output_blif.c
+++ vpr/SRC/pack/output_blif.c
@@ -360,7 +360,7 @@ static void print_primitive(FILE *fpout, int iblk) {
 				truth_table = truth_table->next;
 			}
 		} else {
-			vpr_printf(TIO_MESSAGE_WARNING, "TODO: Implement blif dumper for subckt %s model %s", logical_block[iblk].name, logical_block[iblk].model->name);
+			vpr_printf(TIO_MESSAGE_WARNING, "TODO: Implement blif dumper for subckt %s model %s\n", logical_block[iblk].name, logical_block[iblk].model->name);
 		}
 	}
 }
diff --git vpr/SRC/place/place.c vpr/SRC/place/place.c
index a867f46..6b15704 100755
--- vpr/SRC/place/place.c
+++ vpr/SRC/place/place.c
@@ -311,7 +311,8 @@ void try_place(struct s_placer_opts placer_opts,
 		struct s_annealing_sched annealing_sched,
 		t_chan_width_dist chan_width_dist, struct s_router_opts router_opts,
 		struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf,
-		t_timing_inf timing_inf, t_direct_inf *directs, int num_directs) {
+		t_timing_inf timing_inf, t_direct_inf *directs, int num_directs,
+		const char *arch_file) {
 
 	/* Does almost all the work of placing a circuit.  Width_fac gives the   *
 	 * width of the widest channel.  Place_cost_exp says what exponent the   *
@@ -349,7 +350,8 @@ void try_place(struct s_placer_opts placer_opts,
 			|| placer_opts.enable_timing_computations) {
 		/*do this before the initial placement to avoid messing up the initial placement */
 		slacks = alloc_lookups_and_criticalities(chan_width_dist, router_opts,
-				det_routing_arch, segment_inf, timing_inf, &net_delay, directs, num_directs);
+				det_routing_arch, segment_inf, timing_inf, &net_delay, directs, 
+				num_directs, arch_file);
 
 		remember_net_delay_original_ptr = net_delay;
 
@@ -1215,7 +1217,6 @@ static int find_affected_blocks(int b_from, int x_to, int y_to, int z_to) {
 		z_swap_offset = z_to - z_from;
 		
 		for (imember = 0; imember < pl_macros[imacro].num_blocks && abort_swap == FALSE; imember++) {
-
 			// Gets the new from and to info for every block in the macro
 			// cannot use the old from and to info
 			curr_b_from = pl_macros[imacro].members[imember].blk_index;
@@ -1227,9 +1228,11 @@ static int find_affected_blocks(int b_from, int x_to, int y_to, int z_to) {
 			curr_x_to = curr_x_from + x_swap_offset;
 			curr_y_to = curr_y_from + y_swap_offset;
 			curr_z_to = curr_z_from + z_swap_offset;
+			assert(curr_z_to < block[b_from].type->capacity);
 			
 			// Make sure that the swap_to location is still on the chip
-			if (curr_x_to < 1 || curr_x_to > nx || curr_y_to < 1 || curr_y_to > ny || curr_z_to < 0) {
+			if (curr_x_to < 1 || curr_x_to > nx || curr_y_to < 1 || curr_y_to > ny || curr_z_to < 0
+			    || grid[curr_x_to][curr_y_to].type != block[b_from].type) {
 				abort_swap = TRUE;
 			} else {
 				curr_b_to = grid[curr_x_to][curr_y_to].blocks[curr_z_to];
@@ -2060,6 +2063,21 @@ static void alloc_and_load_placement_structs(
 	alloc_and_load_try_swap_structs();
 
 	num_pl_macros = alloc_and_load_placement_macros(directs, num_directs, &pl_macros);
+
+	if (getEchoEnabled() && isEchoFileEnabled(E_ECHO_PLACEMENT_MACROS)) {
+		int imacro, imember;
+		FILE *fp;
+		fp = my_fopen(getEchoFileName(E_ECHO_PLACEMENT_MACROS), "w", 0);
+		for (imacro = 0; imacro < num_pl_macros; imacro++) {
+			fprintf(fp, "Macro %d (%d members):\n", imacro, pl_macros[imacro].num_blocks);
+			for (imember = 0; imember < pl_macros[imacro].num_blocks; imember++) {
+				int member_iblk = pl_macros[imacro].members[imember].blk_index;
+				fprintf(fp, "\t%d: %d -- %s\n", imember, member_iblk, block[member_iblk].name);
+			}
+			fprintf(fp, "\n");
+		}
+		fclose(fp);
+	}
 }
 
 static void alloc_and_load_try_swap_structs() {
diff --git vpr/SRC/place/place.h vpr/SRC/place/place.h
index 2d9d2c8..3860a5a 100755
--- vpr/SRC/place/place.h
+++ vpr/SRC/place/place.h
@@ -2,4 +2,5 @@ void try_place(struct s_placer_opts placer_opts,
 		struct s_annealing_sched annealing_sched,
 		t_chan_width_dist chan_width_dist, struct s_router_opts router_opts,
 		struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf,
-		t_timing_inf timing_inf, t_direct_inf *directs, int num_directs);
+		t_timing_inf timing_inf, t_direct_inf *directs, int num_directs,
+		const char *arch_file);
diff --git vpr/SRC/place/timing_place.c vpr/SRC/place/timing_place.c
index c6805ae..585280c 100755
--- vpr/SRC/place/timing_place.c
+++ vpr/SRC/place/timing_place.c
@@ -122,7 +122,7 @@ t_slack * alloc_lookups_and_criticalities(t_chan_width_dist chan_width_dist,
 		struct s_router_opts router_opts,
 		struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf,
 		t_timing_inf timing_inf, float ***net_delay, INP t_direct_inf *directs, 
-		INP int num_directs) {
+		INP int num_directs, INP const char *arch_file) {
 
 	t_slack * slacks = alloc_and_load_timing_graph(timing_inf);
 
@@ -130,7 +130,7 @@ t_slack * alloc_lookups_and_criticalities(t_chan_width_dist chan_width_dist,
 			num_nets);
 
 	compute_delay_lookup_tables(router_opts, det_routing_arch, segment_inf,
-			timing_inf, chan_width_dist, directs, num_directs);
+			timing_inf, chan_width_dist, directs, num_directs, arch_file);
 	
 	timing_place_crit = alloc_crit(&timing_place_crit_ch);
 
diff --git vpr/SRC/place/timing_place.h vpr/SRC/place/timing_place.h
index c53dcca..558bd59 100755
--- vpr/SRC/place/timing_place.h
+++ vpr/SRC/place/timing_place.h
@@ -5,7 +5,7 @@ t_slack * alloc_lookups_and_criticalities(t_chan_width_dist chan_width_dist,
 		struct s_router_opts router_opts,
 		struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf,
 		t_timing_inf timing_inf, float ***net_delay, INP t_direct_inf *directs, 
-		INP int num_directs);
+		INP int num_directs, INP const char *arch_file);
 
 void free_lookups_and_criticalities(float ***net_delay, t_slack * slacks);
 
diff --git vpr/SRC/place/timing_place_lookup.c vpr/SRC/place/timing_place_lookup.c
index 0930b61..ce3a2dc 100755
--- vpr/SRC/place/timing_place_lookup.c
+++ vpr/SRC/place/timing_place_lookup.c
@@ -13,6 +13,7 @@
 #include "route_export.h"
 #include <assert.h>
 #include "read_xml_arch_file.h"
+#include "ReadOptions.h"
 
 /*this file contains routines that generate the array containing*/
 /*the delays between blocks, this is used in the timing driven  */
@@ -54,9 +55,6 @@
 
 #define DEBUG_TIMING_PLACE_LOOKUP	/*initialize arrays to known state */
 
-#define DUMPFILE "lookup_dump.echo"
-/* #define PRINT_ARRAYS *//*only used during debugging, calls routine to  */
-/*print out the various lookup arrays           */
 
 /***variables that are exported to other modules***/
 
@@ -87,10 +85,9 @@ static int num_types_backup;
 
 static t_ivec **clb_opins_used_locally;
 
-#ifdef PRINT_ARRAYS
-static FILE *lookup_dump; /* If debugging mode is on, print out to
+/* If debugging mode is on, print out to
  * the file defined in DUMPFILE */
-#endif /* PRINT_ARRAYS */
+static FILE *lookup_dump; 
 
 /*** Function Prototypes *****/
 
@@ -115,7 +112,7 @@ static void setup_chan_width(struct s_router_opts router_opts,
 static void alloc_routing_structs(struct s_router_opts router_opts,
 		struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf,
 		t_timing_inf timing_inf, INP t_direct_inf *directs, 
-		INP int num_directs);
+		INP int num_directs, INP const char *arch_file);
 
 static void free_routing_structs(struct s_router_opts router_opts,
 		struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf,
@@ -155,11 +152,11 @@ static void compute_delta_clb_to_io(struct s_router_opts router_opts,
 
 static void compute_delta_io_to_io(struct s_router_opts router_opts,
 		struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf,
-		t_timing_inf timing_inf);
+		t_timing_inf timing_inf, const char *arch_file);
 
 static void compute_delta_arrays(struct s_router_opts router_opts,
 		struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf,
-		t_timing_inf timing_inf, int longest_length);
+		t_timing_inf timing_inf, int longest_length, const char *arch_file);
 
 static int get_first_pin(enum e_pin_type pintype, t_type_ptr type);
 
@@ -167,13 +164,11 @@ static int get_longest_segment_length(
 		struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf);
 static void reset_placement(void);
 
-#ifdef PRINT_ARRAYS
 static void print_array(float **array_to_print,
 		int x1,
 		int x2,
 		int y1,
 		int y2);
-#endif
 /**************************************/
 static int get_first_pin(enum e_pin_type pintype, t_type_ptr type) {
 
@@ -422,7 +417,7 @@ static void setup_chan_width(struct s_router_opts router_opts,
 static void alloc_routing_structs(struct s_router_opts router_opts,
 		struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf,
 		t_timing_inf timing_inf, INP t_direct_inf *directs, 
-		INP int num_directs) {
+		INP int num_directs, INP const char *arch_file) {
 
 	int bb_factor;
 	int warnings;
@@ -446,7 +441,7 @@ static void alloc_routing_structs(struct s_router_opts router_opts,
 						GRAPH_BIDIR : GRAPH_UNIDIR);
 	}
 
-	build_rr_graph(graph_type, num_types, dummy_type_descriptors, nx, ny, grid,
+	build_rr_graph(graph_type, num_types, /*dummy_*/type_descriptors, nx, ny, grid,
 			chan_width_x[0], NULL, det_routing_arch.switch_block_type,
 			det_routing_arch.Fs, det_routing_arch.num_segment,
 			det_routing_arch.num_switch, segment_inf,
@@ -454,6 +449,7 @@ static void alloc_routing_structs(struct s_router_opts router_opts,
 			det_routing_arch.delayless_switch, timing_inf,
 			det_routing_arch.wire_to_ipin_switch, router_opts.base_cost_type,
 			NULL, 0, TRUE, /* do not send in direct connections because we care about general placement timing instead of special pin placement timing */
+			arch_file,
 			&warnings);
 
 	alloc_and_load_rr_node_route_structs();
@@ -494,11 +490,34 @@ static void assign_locations(t_type_ptr source_type, int source_x_loc,
 		int source_y_loc, int source_z_loc, t_type_ptr sink_type,
 		int sink_x_loc, int sink_y_loc, int sink_z_loc) {
 	/*all routing occurs between block 0 (source) and block 1 (sink) */
+	int i;
+	i = 1;
+	while (grid[source_x_loc][source_y_loc].type != source_type) {
+		source_x_loc -= i;
+		if (source_x_loc < 0 || source_x_loc >= nx+1) { 
+			source_x_loc += i;
+			i = -i;
+		}
+		if (i < 0) --i;
+		else ++i;
+	}
+	assert(grid[source_x_loc][source_y_loc].type == source_type);
 	block[SOURCE_BLOCK].type = source_type;
 	block[SOURCE_BLOCK].x = source_x_loc;
 	block[SOURCE_BLOCK].y = source_y_loc;
 	block[SOURCE_BLOCK].z = source_z_loc;
 
+	i = 1;
+	while (grid[sink_x_loc][sink_y_loc].type != sink_type) {
+		sink_x_loc -= i;
+		if (sink_x_loc < 0 || sink_x_loc >= nx+1) { 
+			sink_x_loc += i;
+			i = -i;
+		}
+		if (i < 0) --i;
+		else ++i;
+	}
+	assert(grid[sink_x_loc][sink_y_loc].type == sink_type);
 	block[SINK_BLOCK].type = sink_type;
 	block[SINK_BLOCK].x = sink_x_loc;
 	block[SINK_BLOCK].y = sink_y_loc;
@@ -549,7 +568,7 @@ static float assign_blocks_and_route_net(t_type_ptr source_type,
 			router_opts.max_criticality, router_opts.criticality_exp,
 			router_opts.astar_fac, router_opts.bend_cost, 
 			pin_criticality, sink_order, rt_node_of_sink, 
-			net_delay[NET_USED], NULL);
+			net_delay[NET_USED], NULL, NULL, NULL, NULL);
 
 	net_delay_value = net_delay[NET_USED][NET_USED_SINK_BLOCK];
 
@@ -752,6 +771,7 @@ static void compute_delta_io_to_clb(struct s_router_opts router_opts,
 	delta_io_to_clb[0][0] = IMPOSSIBLE;
 	delta_io_to_clb[nx][ny] = IMPOSSIBLE;
 
+	/* All CLBs to bottom left I/O column */
 	source_x = 0;
 	source_y = 1;
 
@@ -763,6 +783,8 @@ static void compute_delta_io_to_clb(struct s_router_opts router_opts,
 			source_y, start_x, end_x, start_y, end_y, router_opts,
 			det_routing_arch, segment_inf, timing_inf);
 
+#if 0
+	/* Bottom left on I/O row to CLB column above */
 	source_x = 1;
 	source_y = 0;
 
@@ -774,6 +796,7 @@ static void compute_delta_io_to_clb(struct s_router_opts router_opts,
 			source_y, start_x, end_x, start_y, end_y, router_opts,
 			det_routing_arch, segment_inf, timing_inf);
 
+	/* Bottom left on I/O row to top CLB row */
 	start_x = 1;
 	end_x = nx;
 	start_y = ny;
@@ -781,6 +804,7 @@ static void compute_delta_io_to_clb(struct s_router_opts router_opts,
 	generic_compute_matrix(&delta_io_to_clb, source_type, sink_type, source_x,
 			source_y, start_x, end_x, start_y, end_y, router_opts,
 			det_routing_arch, segment_inf, timing_inf);
+#endif
 }
 
 /**************************************/
@@ -797,6 +821,7 @@ static void compute_delta_clb_to_io(struct s_router_opts router_opts,
 	delta_clb_to_io[0][0] = IMPOSSIBLE;
 	delta_clb_to_io[nx][ny] = IMPOSSIBLE;
 
+	/* All CLBs to bottom left on I/O column */
 	sink_x = 0;
 	sink_y = 1;
 	for (source_x = 1; source_x <= nx; source_x++) {
@@ -810,6 +835,8 @@ static void compute_delta_clb_to_io(struct s_router_opts router_opts,
 		}
 	}
 
+#if 0
+	/* Bottom left on I/O row to CLB column above */
 	sink_x = 1;
 	sink_y = 0;
 	source_x = 1;
@@ -821,6 +848,7 @@ static void compute_delta_clb_to_io(struct s_router_opts router_opts,
 				router_opts, det_routing_arch, segment_inf, timing_inf);
 	}
 
+	/* Top CLB row to bottom left on I/O row */
 	sink_x = 1;
 	sink_y = 0;
 	source_y = ny;
@@ -831,12 +859,13 @@ static void compute_delta_clb_to_io(struct s_router_opts router_opts,
 				source_type, source_x, source_y, sink_type, sink_x, sink_y,
 				router_opts, det_routing_arch, segment_inf, timing_inf);
 	}
+#endif
 }
 
 /**************************************/
 static void compute_delta_io_to_io(struct s_router_opts router_opts,
 		struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf,
-		t_timing_inf timing_inf) {
+		t_timing_inf timing_inf, const char *arch_file) {
 	int source_x, source_y, sink_x, sink_y;
 	int delta_x, delta_y;
 	t_type_ptr source_type, sink_type;
@@ -851,74 +880,104 @@ static void compute_delta_io_to_io(struct s_router_opts router_opts,
 	delta_io_to_io[nx][ny + 1] = IMPOSSIBLE;
 	delta_io_to_io[nx + 1][ny] = IMPOSSIBLE;
 
-	source_x = 0;
-	source_y = 1;
-	sink_x = 0;
-	delta_x = abs(sink_x - source_x);
-
-	for (sink_y = 2; sink_y <= ny; sink_y++) {
-		delta_y = abs(sink_y - source_y);
-		delta_io_to_io[delta_x][delta_y] = assign_blocks_and_route_net(
-				source_type, source_x, source_y, sink_type, sink_x, sink_y,
-				router_opts, det_routing_arch, segment_inf, timing_inf);
+	/* TODO: Write more generic code that can handle pairwise
+	 * I/O columns */
+	
+	if (strncmp(arch_file, "xc6vlx240tff1156", strlen("xc6vlx240tff1156")) == 0) {
+		/* Bottom left corner to left edge */
+		source_x = 0;
+		source_y = 1;
+		sink_x = 0;
+		delta_x = abs(sink_x - source_x);
+		assert(grid[source_x][source_y].type == IO_TYPE);
 
-	}
+		for(sink_y = 2; sink_y <= ny; sink_y++)
+		{
+			delta_y = abs(sink_y - source_y);
+			if (grid[sink_x][sink_y].type != IO_TYPE) {
+				delta_io_to_io[delta_x][delta_y] = IMPOSSIBLE;
+				continue;
+			}
+			delta_io_to_io[delta_x][delta_y] =
+				assign_blocks_and_route_net(source_type, source_x, source_y,
+						sink_type, sink_x, sink_y,
+						router_opts, det_routing_arch,
+						segment_inf, timing_inf);
 
-	source_x = 0;
-	source_y = 1;
-	sink_x = nx + 1;
-	delta_x = abs(sink_x - source_x);
+		}
 
-	for (sink_y = 1; sink_y <= ny; sink_y++) {
-		delta_y = abs(sink_y - source_y);
-		delta_io_to_io[delta_x][delta_y] = assign_blocks_and_route_net(
-				source_type, source_x, source_y, sink_type, sink_x, sink_y,
-				router_opts, det_routing_arch, segment_inf, timing_inf);
+		/* Bottom left corner to middle edge */
+		source_x = 0;
+		source_y = 1;
+		sink_x = 41;
+		delta_x = abs(sink_x - source_x);
+		assert(grid[source_x][source_y].type == IO_TYPE);
 
-	}
+		for(sink_y = 1; sink_y <= ny; sink_y++)
+		{
+			delta_y = abs(sink_y - source_y);
+			if (grid[sink_x][sink_y].type != IO_TYPE) {
+				delta_io_to_io[delta_x][delta_y] = IMPOSSIBLE;
+				continue;
+			}
+			delta_io_to_io[delta_x][delta_y] =
+				assign_blocks_and_route_net(source_type, source_x, source_y,
+						sink_type, sink_x, sink_y,
+						router_opts, det_routing_arch,
+						segment_inf, timing_inf);
 
-	source_x = 1;
-	source_y = 0;
-	sink_y = 0;
-	delta_y = abs(sink_y - source_y);
+		}
 
-	for (sink_x = 2; sink_x <= nx; sink_x++) {
+		/* Bottom left corner to right edge */
+		source_x = 0;
+		source_y = 1;
+		sink_x = 57;
 		delta_x = abs(sink_x - source_x);
-		delta_io_to_io[delta_x][delta_y] = assign_blocks_and_route_net(
-				source_type, source_x, source_y, sink_type, sink_x, sink_y,
-				router_opts, det_routing_arch, segment_inf, timing_inf);
+		assert(grid[source_x][source_y].type == IO_TYPE);
 
-	}
+		for(sink_y = 1; sink_y <= ny; sink_y++)
+		{
+			delta_y = abs(sink_y - source_y);
+			if (grid[sink_x][sink_y].type != IO_TYPE) {
+				delta_io_to_io[delta_x][delta_y] = IMPOSSIBLE;
+				continue;
+			}
+			delta_io_to_io[delta_x][delta_y] =
+				assign_blocks_and_route_net(source_type, source_x, source_y,
+						sink_type, sink_x, sink_y,
+						router_opts, det_routing_arch,
+						segment_inf, timing_inf);
 
-	source_x = 1;
-	source_y = 0;
-	sink_y = ny + 1;
-	delta_y = abs(sink_y - source_y);
+		}
 
-	for (sink_x = 1; sink_x <= nx; sink_x++) {
+		/* Middle left corner to right edge */
+		source_x = 41;
+		source_y = 1;
+		sink_x = 57;
 		delta_x = abs(sink_x - source_x);
-		delta_io_to_io[delta_x][delta_y] = assign_blocks_and_route_net(
-				source_type, source_x, source_y, sink_type, sink_x, sink_y,
-				router_opts, det_routing_arch, segment_inf, timing_inf);
-
-	}
+		assert(grid[source_x][source_y].type == IO_TYPE);
 
-	source_x = 0;
-	sink_y = ny + 1;
-	for (source_y = 1; source_y <= ny; source_y++) {
-		for (sink_x = 1; sink_x <= nx; sink_x++) {
-			delta_y = abs(source_y - sink_y);
-			delta_x = abs(source_x - sink_x);
-			delta_io_to_io[delta_x][delta_y] = assign_blocks_and_route_net(
-					source_type, source_x, source_y, sink_type, sink_x, sink_y,
-					router_opts, det_routing_arch, segment_inf, timing_inf);
+		for(sink_y = 1; sink_y <= ny; sink_y++)
+		{
+			delta_y = abs(sink_y - source_y);
+			if (grid[sink_x][sink_y].type != IO_TYPE) {
+				delta_io_to_io[delta_x][delta_y] = IMPOSSIBLE;
+				continue;
+			}
+			delta_io_to_io[delta_x][delta_y] =
+				assign_blocks_and_route_net(source_type, source_x, source_y,
+						sink_type, sink_x, sink_y,
+						router_opts, det_routing_arch,
+						segment_inf, timing_inf);
 
 		}
 	}
+	else {
+		vpr_printf(TIO_MESSAGE_ERROR, "arch_file = %s not recognised!\n", arch_file);
+		exit(1);
+	}
 }
-
 /**************************************/
-#ifdef PRINT_ARRAYS
 static void
 print_array(float **array_to_print,
 		int x1,
@@ -942,14 +1001,13 @@ print_array(float **array_to_print,
 	}
 	fprintf(lookup_dump, "\n\n");
 }
-#endif
 /**************************************/
 static void compute_delta_arrays(struct s_router_opts router_opts,
 		struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf,
-		t_timing_inf timing_inf, int longest_length) {
+		t_timing_inf timing_inf, int longest_length, const char *arch_file) {
 
 	vpr_printf(TIO_MESSAGE_INFO, "Computing delta_io_to_io lookup matrix, may take a few seconds, please wait...\n");
-	compute_delta_io_to_io(router_opts, det_routing_arch, segment_inf, timing_inf);
+	compute_delta_io_to_io(router_opts, det_routing_arch, segment_inf, timing_inf, arch_file);
 	vpr_printf(TIO_MESSAGE_INFO, "Computing delta_io_to_clb lookup matrix, may take a few seconds, please wait...\n");
 	compute_delta_io_to_clb(router_opts, det_routing_arch, segment_inf, timing_inf);
 	vpr_printf(TIO_MESSAGE_INFO, "Computing delta_clb_to_io lookup matrix, may take a few seconds, please wait...\n");
@@ -957,18 +1015,18 @@ static void compute_delta_arrays(struct s_router_opts router_opts,
 	vpr_printf(TIO_MESSAGE_INFO, "Computing delta_clb_to_clb lookup matrix, may take a few seconds, please wait...\n");
 	compute_delta_clb_to_clb(router_opts, det_routing_arch, segment_inf, timing_inf, longest_length);
 
-#ifdef PRINT_ARRAYS
-	lookup_dump = my_fopen(DUMPFILE, "w", 0);
-	fprintf(lookup_dump, "\n\nprinting delta_clb_to_clb\n");
-	print_array(delta_clb_to_clb, 0, nx - 1, 0, ny - 1);
-	fprintf(lookup_dump, "\n\nprinting delta_io_to_clb\n");
-	print_array(delta_io_to_clb, 0, nx, 0, ny);
-	fprintf(lookup_dump, "\n\nprinting delta_clb_to_io\n");
-	print_array(delta_clb_to_io, 0, nx, 0, ny);
-	fprintf(lookup_dump, "\n\nprinting delta_io_to_io\n");
-	print_array(delta_io_to_io, 0, nx + 1, 0, ny + 1);
-	fclose(lookup_dump);
-#endif
+	if (getEchoEnabled() && isEchoFileEnabled(E_ECHO_PLACEMENT_LOOKUP)) {
+		lookup_dump = my_fopen(getEchoFileName(E_ECHO_PLACEMENT_LOOKUP), "w", 0);
+		fprintf(lookup_dump, "\n\nprinting delta_clb_to_clb\n");
+		print_array(delta_clb_to_clb, 0, nx - 1, 0, ny - 1);
+		fprintf(lookup_dump, "\n\nprinting delta_io_to_clb\n");
+		print_array(delta_io_to_clb, 0, nx, 0, ny);
+		fprintf(lookup_dump, "\n\nprinting delta_clb_to_io\n");
+		print_array(delta_clb_to_io, 0, nx, 0, ny);
+		fprintf(lookup_dump, "\n\nprinting delta_io_to_io\n");
+		print_array(delta_io_to_io, 0, nx + 1, 0, ny + 1);
+		fclose(lookup_dump);
+	}
 
 }
 
@@ -978,7 +1036,7 @@ static void compute_delta_arrays(struct s_router_opts router_opts,
 void compute_delay_lookup_tables(struct s_router_opts router_opts,
 		struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf,
 		t_timing_inf timing_inf, t_chan_width_dist chan_width_dist, INP t_direct_inf *directs, 
-		INP int num_directs) {
+		INP int num_directs, INP const char *arch_file) {
 
 	static struct s_net *original_net; /*this will be used as a pointer to remember what */
 
@@ -991,27 +1049,31 @@ void compute_delay_lookup_tables(struct s_router_opts router_opts,
 	static int original_num_blocks;
 	static int longest_length;
 
-	load_simplified_device();
+	//load_simplified_device();
 
 	alloc_and_assign_internal_structures(&original_net, &original_block,
 			&original_num_nets, &original_num_blocks);
 	setup_chan_width(router_opts, chan_width_dist);
 
 	alloc_routing_structs(router_opts, det_routing_arch, segment_inf,
-			timing_inf, directs, num_directs);
+			timing_inf, directs, num_directs, arch_file);
+
+	/* EH: Do not consider RTs for placement lookup */
+	/* Subseqent stages (e.g. routing) reload the graph anyway */
+	delete_all_rt();
 
 	longest_length = get_longest_segment_length(det_routing_arch, segment_inf);
 
 	/*now setup and compute the actual arrays */
 	alloc_delta_arrays();
 	compute_delta_arrays(router_opts, det_routing_arch, segment_inf, timing_inf,
-			longest_length);
+			longest_length, arch_file);
 
 	/*free all data structures that are no longer needed */
 	free_routing_structs(router_opts, det_routing_arch, segment_inf,
 			timing_inf);
 
-	restore_original_device();
+	//restore_original_device();
 
 	free_and_reset_internal_structures(original_net, original_block,
 			original_num_nets, original_num_blocks);
diff --git vpr/SRC/place/timing_place_lookup.h vpr/SRC/place/timing_place_lookup.h
index fd24062..24ac4e5 100755
--- vpr/SRC/place/timing_place_lookup.h
+++ vpr/SRC/place/timing_place_lookup.h
@@ -4,7 +4,7 @@
 void compute_delay_lookup_tables(struct s_router_opts router_opts,
 		struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf,
 		t_timing_inf timing_inf, t_chan_width_dist chan_width_dist, INP t_direct_inf *directs, 
-		INP int num_directs);
+		INP int num_directs, INP const char *arch_file);
 void free_place_lookup_structs(void);
 
 extern float **delta_io_to_clb;
diff --git vpr/SRC/route/check_route.c vpr/SRC/route/check_route.c
index c0abe74..feca0e5 100755
--- vpr/SRC/route/check_route.c
+++ vpr/SRC/route/check_route.c
@@ -197,7 +197,7 @@ static void check_sink(int inode, int inet, boolean * pin_done) {
 		vpr_printf(TIO_MESSAGE_ERROR, "in check_sink: node %d does not connect to any terminal of net %s #%d.\n"
 									  "This error is usually caused by incorrectly specified logical equivalence in your architecture file.\n"
 									  "You should try to respecify what pins are equivalent or turn logical equivalence off.\n", inode, clb_net[inet].name, inet);
-		exit(1);
+		/*exit(1);*/
 	}
 }
 
@@ -315,6 +315,10 @@ static boolean check_adjacent(int from_node, int to_node) {
 	if (!reached)
 		return (FALSE);
 
+	/* EH: Do not check for adjacency because Xilinx wires
+	 * can be diagonal (e.g. NE, SW, etc.) */
+	return (TRUE);
+
 	/* Now we know the rr graph says these two nodes are adjacent.  Double  *
 	 * check that this makes sense, to verify the rr graph.                 */
 
diff --git vpr/SRC/route/check_rr_graph.c vpr/SRC/route/check_rr_graph.c
index 37467ae..48c2d74 100755
--- vpr/SRC/route/check_rr_graph.c
+++ vpr/SRC/route/check_rr_graph.c
@@ -154,8 +154,9 @@ void check_rr_graph(INP t_graph_type graph_type, INP t_type_ptr types,
 						|| rr_node[inode].type == CHANY);
 
 				if (!is_chain && !is_fringe && !is_wire) {
+					/* EH: Suppressed for Xilinx RRG
 					vpr_printf(TIO_MESSAGE_ERROR, "in check_rr_graph: node %d has no fanin.\n", inode);
-					exit(1);
+					exit(1);*/
 				} else if (!is_chain && !is_fringe_warning_sent) {
 					vpr_printf(TIO_MESSAGE_WARNING, "in check_rr_graph: fringe node %d has no fanin.\n", inode);
 					vpr_printf(TIO_MESSAGE_WARNING, "\tThis is possible on the fringe for low Fc_out, N, and certain Lengths\n");
@@ -258,11 +259,12 @@ void check_node(int inode, enum e_route_type route_type) {
 		break;
 
 	case CHANX:
+		/* EH: Suppressed for Xilinx RRG
 		if (xlow < 1 || xhigh > nx || yhigh > ny || yhigh != ylow) {
 			vpr_printf(TIO_MESSAGE_ERROR, "in check_node: CHANX out of range for endpoints (%d,%d) and (%d,%d)\n", 
 					xlow, ylow, xhigh, yhigh);
 			exit(1);
-		}
+		}*/
 		if (route_type == GLOBAL && xlow != xhigh) {
 			vpr_printf(TIO_MESSAGE_ERROR, "in check_node: node %d spans multiple channel segments (not allowed for global routing).\n",
 					inode);
@@ -271,11 +273,12 @@ void check_node(int inode, enum e_route_type route_type) {
 		break;
 
 	case CHANY:
+		/* EH: Suppressed for Xilinx RRG
 		if (xhigh > nx || ylow < 1 || yhigh > ny || xlow != xhigh) {
 			vpr_printf(TIO_MESSAGE_ERROR, "Error in check_node: CHANY out of range for endpoints (%d,%d) and (%d,%d)\n", 
 					xlow, ylow, xhigh, yhigh);
 			exit(1);
-		}
+		}*/
 		if (route_type == GLOBAL && ylow != yhigh) {
 			vpr_printf(TIO_MESSAGE_ERROR, "in check_node: node %d spans multiple channel segments (not allowed for global routing).\n",
 					inode);
@@ -294,12 +297,13 @@ void check_node(int inode, enum e_route_type route_type) {
 
 	case SOURCE:
 
+		/* EH: Suppressed for Xilinx RRG
 		if (ptc_num >= type->num_class
 				|| type->class_inf[ptc_num].type != DRIVER) {
 			vpr_printf(TIO_MESSAGE_ERROR, "in check_node: inode %d (type %d) had a ptc_num of %d.\n", 
 					inode, rr_type, ptc_num);
 			exit(1);
-		}
+		}*/
 		if (type->class_inf[ptc_num].num_pins != capacity) {
 			vpr_printf(TIO_MESSAGE_ERROR, "in check_node: inode %d (type %d) had a capacity of %d.\n",
 					inode, rr_type, capacity);
@@ -310,12 +314,13 @@ void check_node(int inode, enum e_route_type route_type) {
 
 	case SINK:
 
+		/* EH: Suppressed for Xilinx RRG
 		if (ptc_num >= type->num_class
 				|| type->class_inf[ptc_num].type != RECEIVER) {
 			vpr_printf(TIO_MESSAGE_ERROR, "in check_node: inode %d (type %d) had a ptc_num of %d.\n", 
 					inode, rr_type, ptc_num);
 			exit(1);
-		}
+		}*/
 		if (type->class_inf[ptc_num].num_pins != capacity) {
 			vpr_printf(TIO_MESSAGE_ERROR, "in check_node: inode %d (type %d) has a capacity of %d.\n", 
 					inode, rr_type, capacity);
@@ -362,11 +367,12 @@ void check_node(int inode, enum e_route_type route_type) {
 			tracks_per_node = chan_width_x[ylow];
 		}
 
+		/* EH: Suppressed for Xilinx RRG
 		if (ptc_num >= nodes_per_chan) {
 			vpr_printf(TIO_MESSAGE_ERROR, "in check_node: inode %d (type %d) has a ptc_num of %d.\n", 
 					inode, rr_type, ptc_num);
 			exit(1);
-		}
+		}*/
 
 		if (capacity != tracks_per_node) {
 			vpr_printf(TIO_MESSAGE_ERROR, "in check_node: inode %d (type %d) has a capacity of %d.\n", 
@@ -384,11 +390,12 @@ void check_node(int inode, enum e_route_type route_type) {
 			tracks_per_node = chan_width_y[xlow];
 		}
 
+		/* EH: Suppressed for Xilinx RRG
 		if (ptc_num >= nodes_per_chan) {
 			vpr_printf(TIO_MESSAGE_ERROR, "in check_node: inode %d (type %d) has a ptc_num of %d.\n", 
 					inode, rr_type, ptc_num);
 			exit(1);
-		}
+		}*/
 
 		if (capacity != tracks_per_node) {
 			vpr_printf(TIO_MESSAGE_ERROR, "in check_node: inode %d (type %d) has a capacity of %d.\n", 
@@ -411,7 +418,8 @@ void check_node(int inode, enum e_route_type route_type) {
 			/* Just a warning, since a very poorly routable rr-graph could have nodes with no edges.  *
 			 * If such a node was ever used in a final routing (not just in an rr_graph), other       *
 			 * error checks in check_routing will catch it.                                           */ 
-			vpr_printf(TIO_MESSAGE_WARNING, "in check_node: node %d has no edges.\n", inode);
+			/* EH: Suppressed for Xilinx RRG
+			vpr_printf(TIO_MESSAGE_WARNING, "in check_node: node %d has no edges.\n", inode);*/
 		}
 	}
 
@@ -445,11 +453,12 @@ void check_node(int inode, enum e_route_type route_type) {
 	}
 
 	cost_index = rr_node[inode].cost_index;
+	/* EH: Suppressed for Xilinx RRG
 	if (cost_index < 0 || cost_index >= num_rr_indexed_data) {
 		vpr_printf(TIO_MESSAGE_ERROR, "in check_node: node %d cost index (%d) is out of range.\n", 
 				inode, cost_index);
 		exit(1);
-	}
+	}*/
 }
 
 static void check_pass_transistors(int from_node) {
@@ -495,13 +504,14 @@ static void check_pass_transistors(int from_node) {
 			}
 		}
 
+		/* EH: Suppressed for Xilinx RRG
 		if (trans_matched == FALSE) {
 			vpr_printf(TIO_MESSAGE_ERROR, "in check_pass_transistors:\n");
 			vpr_printf(TIO_MESSAGE_ERROR, "connection from node %d to node %d uses a pass transistor (switch type %d)\n",
 					from_node, to_node, from_switch_type);
 			vpr_printf(TIO_MESSAGE_ERROR, "but there is no corresponding pass transistor edge in the other direction.\n");
 			exit(1);
-		}
+		}*/
 
 	} /* End for all from_node edges */
 }
diff --git vpr/SRC/route/route_common.c vpr/SRC/route/route_common.c
index ff56454..ed8e725 100755
--- vpr/SRC/route/route_common.c
+++ vpr/SRC/route/route_common.c
@@ -2,6 +2,7 @@
 #include <stdio.h>
 #include <assert.h>
 #include <time.h>
+#include <string.h>
 #include "util.h"
 #include "vpr_types.h"
 #include "vpr_utils.h"
@@ -15,6 +16,9 @@
 #include "rr_graph.h"
 #include "read_xml_arch_file.h"
 #include "ReadOptions.h"
+#include "rr_graph_util.h"
+#include "rr_graph2.h"
+#include <set>
 
 /***************** Variables shared only by route modules *******************/
 
@@ -94,6 +98,16 @@ static t_ivec **alloc_and_load_clb_opins_used_locally(void);
 static void adjust_one_rr_occ_and_pcost(int inode, int add_or_sub,
 		float pres_fac);
 
+/* EH */
+static void
+block_routing_nodes(struct s_router_opts *router_opts);
+static void
+reserve_slice_ipins(void);
+static void
+reserve_net_ipins(int inet);
+static void
+reserve_byps(void);
+
 /************************** Subroutine definitions ***************************/
 
 void save_routing(struct s_trace **best_routing,
@@ -216,12 +230,12 @@ void get_serial_num(void) {
 	}
 	vpr_printf(TIO_MESSAGE_INFO, "Serial number (magic cookie) for the routing is: %d\n", serial_num);
 }
-
 boolean try_route(int width_fac, struct s_router_opts router_opts,
 		struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf,
 		t_timing_inf timing_inf, float **net_delay, t_slack * slacks,
 		t_chan_width_dist chan_width_dist, t_ivec ** clb_opins_used_locally,
-		boolean * Fc_clipped, t_direct_inf *directs, int num_directs) {
+		boolean * Fc_clipped, t_direct_inf *directs, int num_directs,
+		const char *arch_file) {
 
 	/* Attempts a routing via an iterated maze router algorithm.  Width_fac *
 	 * specifies the relative width of the channels, while the members of   *
@@ -234,6 +248,7 @@ boolean try_route(int width_fac, struct s_router_opts router_opts,
 	clock_t begin, end;
 	boolean success;
 	t_graph_type graph_type;
+	int inet, num_global_nets;
 
 	if (router_opts.route_type == GLOBAL) {
 		graph_type = GRAPH_GLOBAL;
@@ -262,7 +277,7 @@ boolean try_route(int width_fac, struct s_router_opts router_opts,
 			det_routing_arch.global_route_switch,
 			det_routing_arch.delayless_switch, timing_inf,
 			det_routing_arch.wire_to_ipin_switch, router_opts.base_cost_type,
-			directs, num_directs, FALSE,
+			directs, num_directs, FALSE, arch_file,
 			&tmp);
 
 	end = clock();
@@ -277,8 +292,19 @@ boolean try_route(int width_fac, struct s_router_opts router_opts,
 
 	alloc_and_load_rr_node_route_structs();
 
+	/* EH: Block all routing nodes which have been used
+	 * for local intra-CLB feedback */
+	block_routing_nodes(&router_opts);
+
 	init_route_structs(router_opts.bb_factor);
 
+	num_global_nets = 0;
+	for (inet = 0; inet < num_nets; ++inet) {
+		if (clb_net[inet].is_global)
+			++num_global_nets;
+	}
+
+	vpr_printf(TIO_MESSAGE_INFO, "Number of nets to be routed: %d (not including %d global nets).\n", num_nets-num_global_nets, num_global_nets);
 	if (router_opts.router_algorithm == BREADTH_FIRST) {
 		vpr_printf(TIO_MESSAGE_INFO, "Confirming Router Algorithm: BREADTH_FIRST.\n");
 		success = try_breadth_first_route(router_opts, clb_opins_used_locally,
@@ -312,7 +338,7 @@ boolean feasible_routing(void) {
 	return (TRUE);
 }
 
-void pathfinder_update_one_cost(struct s_trace *route_segment_start,
+int pathfinder_update_one_cost(struct s_trace *route_segment_start,
 		int add_or_sub, float pres_fac) {
 
 	/* This routine updates the occupancy and pres_cost of the rr_nodes that are *
@@ -325,10 +351,13 @@ void pathfinder_update_one_cost(struct s_trace *route_segment_start,
 
 	struct s_trace *tptr;
 	int inode, occ, capacity;
+	int score;
+
+	score = 0;
 
 	tptr = route_segment_start;
 	if (tptr == NULL) /* No routing yet. */
-		return;
+		return score;
 
 	for (;;) {
 		inode = tptr->index;
@@ -346,9 +375,11 @@ void pathfinder_update_one_cost(struct s_trace *route_segment_start,
 			rr_node_route_inf[inode].pres_cost = 1.;
 		} else {
 			rr_node_route_inf[inode].pres_cost = 1.
-					+ (occ + 1 - capacity) * pres_fac;
+				+ (occ + 1 - capacity) * pres_fac;
 		}
 
+		score += std::max(0, occ - capacity);
+
 		if (rr_node[inode].type == SINK) {
 			tptr = tptr->next; /* Skip next segment. */
 			if (tptr == NULL)
@@ -358,9 +389,11 @@ void pathfinder_update_one_cost(struct s_trace *route_segment_start,
 		tptr = tptr->next;
 
 	} /* End while loop -- did an entire traceback. */
+
+	return score;
 }
 
-void pathfinder_update_cost(float pres_fac, float acc_fac) {
+void pathfinder_update_cost(float pres_fac, float acc_fac)  {
 
 	/* This routine recomputes the pres_cost and acc_cost of each routing        *
 	 * resource for the pathfinder algorithm after all nets have been routed.    *
@@ -371,7 +404,6 @@ void pathfinder_update_cost(float pres_fac, float acc_fac) {
 	 * DATE.                                                                     */
 
 	int inode, occ, capacity;
-
 	for (inode = 0; inode < num_rr_nodes; inode++) {
 		occ = rr_node[inode].occ;
 		capacity = rr_node[inode].capacity;
@@ -710,7 +742,8 @@ alloc_and_load_clb_opins_used_locally(void) {
 				iclass = type->pin_class[clb_pin];
 				if(type->class_inf[iclass].type == DRIVER) {
 					/* Check to make sure class is in same range as that assigned to block */
-					assert(iclass >= class_low && iclass <= class_high);
+					if (iclass >= class_low && iclass <= class_high)
+					//assert(iclass >= class_low && iclass <= class_high);
 					clb_opins_used_locally[iblk][iclass].nelem++;
 				}
 			}
@@ -803,6 +836,7 @@ void alloc_and_load_rr_node_route_structs(void) {
 		rr_node_route_inf[inode].acc_cost = 1.;
 		rr_node_route_inf[inode].path_cost = HUGE_POSITIVE_FLOAT;
 		rr_node_route_inf[inode].target_flag = 0;
+		rr_node_route_inf[inode].reserved_for = OPEN;
 	}
 }
 
@@ -822,6 +856,7 @@ void reset_rr_node_route_structs(void) {
 		rr_node_route_inf[inode].acc_cost = 1.;
 		rr_node_route_inf[inode].path_cost = HUGE_POSITIVE_FLOAT;
 		rr_node_route_inf[inode].target_flag = 0;
+		rr_node_route_inf[inode].reserved_for = OPEN;
 	}
 }
 
@@ -851,13 +886,19 @@ static void load_route_bb(int bb_factor) {
 	int k, xmax, ymax, xmin, ymin, x, y, inet;
 
 	for (inet = 0; inet < num_nets; inet++) {
+		int iblk;
+		/* EH: Ignore bb for global nets */
+		if (clb_net[inet].is_global)
+			continue;
+
 		x = block[clb_net[inet].node_block[0]].x;
 		y =
 				block[clb_net[inet].node_block[0]].y
-						+ block[clb_net[inet].node_block[0]].type->pin_height[clb_net[inet].node_block_pin[0]];
+						/*+ block[clb_net[inet].node_block[0]].type->pin_height[clb_net[inet].node_block_pin[0]];*/
+						+ block[clb_net[inet].node_block[0]].type->height;
 
 		xmin = x;
-		ymin = y;
+		ymin = block[clb_net[inet].node_block[0]].y;
 		xmax = x;
 		ymax = y;
 
@@ -865,7 +906,7 @@ static void load_route_bb(int bb_factor) {
 			x = block[clb_net[inet].node_block[k]].x;
 			y =
 					block[clb_net[inet].node_block[k]].y
-							+ block[clb_net[inet].node_block[k]].type->pin_height[clb_net[inet].node_block_pin[k]];
+							/*+ block[clb_net[inet].node_block[k]].type->pin_height[clb_net[inet].node_block_pin[k]]*/;
 
 			if (x < xmin) {
 				xmin = x;
@@ -875,23 +916,45 @@ static void load_route_bb(int bb_factor) {
 
 			if (y < ymin) {
 				ymin = y;
-			} else if (y > ymax) {
+			} 
+			
+			y = block[clb_net[inet].node_block[k]].y + block[clb_net[inet].node_block[k]].type->height;
+			if (y > ymax) {
 				ymax = y;
 			}
 		}
 
 		/* Want the channels on all 4 sides to be usuable, even if bb_factor = 0. */
 
+		/* EH:
 		xmin -= 1;
-		ymin -= 1;
+		ymin -= 1;*/
 
 		/* Expand the net bounding box by bb_factor, then clip to the physical *
 		 * chip area.                                                          */
 
-		route_bb[inet].xmin = std::max(xmin - bb_factor, 0);
-		route_bb[inet].xmax = std::min(xmax + bb_factor, nx + 1);
-		route_bb[inet].ymin = std::max(ymin - bb_factor, 0);
-		route_bb[inet].ymax = std::min(ymax + bb_factor, ny + 1);
+		/* EH: For nets starting at BUFG (e.g. global opin)
+		 * then consider clock regions above and below */
+		iblk = clb_net[inet].node_block[0];
+		assert(iblk != OPEN);
+		if (strncmp(clb_net[inet].name, "GLOBAL_LOGIC", strlen("GLOBAL_LOGIC")) == 0) {
+			route_bb[inet].xmin = xmin;
+			route_bb[inet].xmax = xmax;
+			route_bb[inet].ymin = ymin;
+			route_bb[inet].ymax = ymax;
+		}
+		else if (strcmp(block[iblk].type->name, "BUFG") == 0) {
+			route_bb[inet].xmin = std::max(xmin - bb_factor, 0);
+			route_bb[inet].xmax = std::min(xmax + bb_factor, nx + 1);
+			route_bb[inet].ymin = std::max(ymin - std::max(bb_factor, 25), 0);
+			route_bb[inet].ymax = std::min(ymax + std::max(bb_factor, 25), ny + 1);
+		}
+		else {
+			route_bb[inet].xmin = std::max(xmin - bb_factor, 0);
+			route_bb[inet].xmax = std::min(xmax + bb_factor, nx + 1);
+			route_bb[inet].ymin = std::max(ymin - bb_factor, 0);
+			route_bb[inet].ymax = std::min(ymax + bb_factor, ny + 1);
+		}
 	}
 }
 
@@ -1162,7 +1225,6 @@ void print_route(char *route_file) {
 					}
 
 					fprintf(fp, "%d  ", rr_node[inode].ptc_num);
-
 					/* Uncomment line below if you're debugging and want to see the switch types *
 					 * used in the routing.                                                      */
 					/*          fprintf (fp, "Switch: %d", tptr->iswitch);    */
@@ -1180,6 +1242,10 @@ void print_route(char *route_file) {
 
 			for (ipin = 0; ipin <= clb_net[inet].num_sinks; ipin++) {
 				bnum = clb_net[inet].node_block[ipin];
+				if (bnum == OPEN) {
+					assert(ipin == 0);
+					continue;
+				}
 
 				node_block_pin = clb_net[inet].node_block_pin[ipin];
 				iclass = block[bnum].type->pin_class[node_block_pin];
@@ -1290,4 +1356,1356 @@ void free_chunk_memory_trace(void) {
 	}
 }
 
+/* EH */
+#define NUM_MOST_CONGESTED 10
+int feasible_routing_score(void) {
+
+	/* This routine checks to see if this is a resource-feasible routing.      *
+	 * That is, are all rr_node capacity limitations respected?  It assumes    *
+	 * that the occupancy arrays are up to date when it is called.             */
+
+	int inode;
+	int score, total_score /*, count*/;
+	std::set<std::pair<int,int> > most_congested;
+
+	total_score = 0;
+	//count = 0;
+	for (inode = 0; inode < num_rr_nodes; inode++) {
+		if (rr_node[inode].occ > rr_node[inode].capacity) {
+			score = std::max(0, rr_node[inode].occ - rr_node[inode].capacity);
+			total_score += score;
+
+#ifdef NUM_MOST_CONGESTED
+			if (score > 0) {
+				if ((rr_node[inode].type == CHANX || rr_node[inode].type == CHANY)
+						&& rr_node[inode].prev_node == OPEN) {
+					if (most_congested.size() < NUM_MOST_CONGESTED)
+						most_congested.insert(std::make_pair(score, inode));
+					else if (most_congested.size() == NUM_MOST_CONGESTED) {
+						std::pair<int,int> smallest = *most_congested.begin();
+						if (smallest.first < score) {
+							most_congested.erase(most_congested.begin());
+							most_congested.insert(std::make_pair(score, inode));
+						}
+					}
+				}
+			}
+#endif
+		}
+	}
+	
+#ifdef NUM_MOST_CONGESTED
+	if (!most_congested.empty()) {
+		std::set<std::pair<int,int> >::const_reverse_iterator it = most_congested.rbegin();
+		std::set<std::pair<int,int> >::const_reverse_iterator ie = most_congested.rend();
+		vpr_printf(TIO_MESSAGE_INFO, "Top %d most congested nodes:", NUM_MOST_CONGESTED);
+		vpr_printf(TIO_MESSAGE_INFO, "\n");
+		for (; it != ie; ++it) {
+			score = it->first;
+			inode = it->second;
+			vpr_printf(TIO_MESSAGE_INFO, "\t");
+			vpr_printf(TIO_MESSAGE_INFO, " %d: %d", score, inode);
+			/*vpr_printf(TIO_MESSAGE_INFO, " (%d@%d)", rr_node[inode].ptc_num, rr_node[inode].net_num);*/
+			vpr_printf(TIO_MESSAGE_INFO, "\n");
+		}
+	}
+
+	int inet;
+	struct s_trace *tptr;
+	most_congested.clear();
+	for (inet = 0; inet < num_nets; ++inet) {
+		tptr = trace_head[inet];
+		score = 0;
+		while (tptr != NULL) {
+			inode = tptr->index;
+			if (rr_node[inode].occ > rr_node[inode].capacity)
+				score += std::max(0, rr_node[inode].occ - rr_node[inode].capacity);
+			tptr = tptr->next;
+		}
+
+		if (score > 0) {
+			if (most_congested.size() < NUM_MOST_CONGESTED)
+				most_congested.insert(std::make_pair(score, inet));
+			else if (most_congested.size() == NUM_MOST_CONGESTED) {
+				std::pair<int,int> smallest = *most_congested.begin();
+				if (smallest.first < score) {
+					most_congested.erase(most_congested.begin());
+					most_congested.insert(std::make_pair(score, inet));
+				}
+			}
+		}
+	}
+
+	if (!most_congested.empty()) {
+		std::set<std::pair<int,int> >::const_reverse_iterator it = most_congested.rbegin();
+		std::set<std::pair<int,int> >::const_reverse_iterator ie = most_congested.rend();
+		vpr_printf(TIO_MESSAGE_INFO, "Top %d most congested nets:", NUM_MOST_CONGESTED);
+		vpr_printf(TIO_MESSAGE_INFO, "\n");
+		for (; it != ie; ++it) {
+			score = it->first;
+			inet = it->second;
+			vpr_printf(TIO_MESSAGE_INFO, "\t");
+			vpr_printf(TIO_MESSAGE_INFO, " %d: inet %d (%s, %d sinks, bb: (%d,%d)-(%d,%d))\n", 
+					score, inet, clb_net[inet].name, clb_net[inet].num_sinks,
+					route_bb[inet].xmin, route_bb[inet].ymin,
+					route_bb[inet].xmax, route_bb[inet].ymax);
+		}
+	}
+#endif
+
+	return total_score;
+}
+
+static short*
+find_switch(int src_inode, int sink_inode)
+{
+	int iedge;
+	assert(rr_node[src_inode].num_edges > 0);
+	for (iedge = 0; iedge < rr_node[src_inode].num_edges; ++iedge)
+	{
+		int inode;
+		inode = rr_node[src_inode].edges[iedge];
+		if (inode == sink_inode)
+			break;
+	}
+	/*assert(iedge < rr_node[src_inode].num_edges);*/
+	if (iedge == rr_node[src_inode].num_edges)
+		return NULL;
+	return &rr_node[src_inode].switches[iedge];
+}
+
+short*
+find_rt(int x, int y, int src_ptc, int sink_ptc) 
+{
+	int src_inode, sink_inode;
+	short *pswitch;
+
+	src_inode = get_rr_node_index(x, y, IPIN, src_ptc, rr_node_indices);
+	assert(rr_node[src_inode].xlow == x);
+	assert(rr_node[src_inode].ylow == y);
+	assert(rr_node[src_inode].type == IPIN);
+	src_inode = rr_node[src_inode].prev_node;
+	assert(src_inode != OPEN);
+	assert(rr_node[src_inode].type == CHANX || rr_node[src_inode].type == CHANY);
+
+	sink_inode = get_rr_node_index(x, y, OPIN, sink_ptc, rr_node_indices);
+	assert(rr_node[sink_inode].xlow == x);
+	assert(rr_node[sink_inode].ylow == y);
+	assert(rr_node[sink_inode].type == OPIN);
+	assert(rr_node[sink_inode].num_edges == 1);
+	sink_inode = rr_node[sink_inode].edges[0];
+	assert(sink_inode != OPEN);
+	assert(rr_node[sink_inode].type == CHANX || rr_node[sink_inode].type == CHANY);
+
+	pswitch = find_switch(src_inode, sink_inode);
+	if (pswitch && *pswitch == OPEN)
+		return NULL;
+	return pswitch;
+}
+
+static void
+delete_rt(int x, int y, int src_ptc, int sink_ptc)
+{
+	short *pswitch;
+
+	pswitch = find_rt(x, y, src_ptc, sink_ptc);
+	if (pswitch) {
+		assert(*pswitch == LUT_SWITCH_INDEX);
+		*pswitch = OPEN;
+	}
+}
+
+static void
+reserve_ipin_and_delete_other_edges(int x, int y, int ptc, int inet)
+{
+	int inode, prev_node;
+	//short *pswitch;
+
+	inode = get_rr_node_index(x, y, IPIN, ptc, rr_node_indices);
+	assert(rr_node[inode].xlow == x);
+	assert(rr_node[inode].ylow == y);
+	assert(rr_node[inode].type == IPIN);
+
+	prev_node = rr_node[inode].prev_node;
+	assert(prev_node != OPEN);
+
+	rr_node_route_inf[prev_node].reserved_for = inet;
+	 
+	// Erase all other edges apart from prev_node to
+	// the IPIN node we want to reserve
+	if (rr_node[prev_node].num_edges > 1) {
+		int iedge;
+		for (iedge = 0; iedge < rr_node[prev_node].num_edges; ++iedge) {
+			if (rr_node[prev_node].edges[iedge] != inode) {
+				rr_node[prev_node].switches[iedge] = OPEN;
+			}
+		}
+	}
+
+	//pswitch = find_switch(rr_node[inode].prev_node, inode);
+	//assert(pswitch);
+	//if (*pswitch == OPEN)
+	//	return;
+	//assert(*pswitch == DEFAULT_SWITCH_INDEX);
+	//*pswitch = OPEN;
+}
+
+static void
+block_routing_nodes(struct s_router_opts *router_opts) {
+	int inet, inet_vcc, inet_gnd;
+
+	reserve_slice_ipins();
+
+	inet_vcc = inet_gnd = OPEN;
+	for (inet = 0; inet < num_nets; ++inet) {
+		if (strcmp(clb_net[inet].name, "gnd") == 0)
+			inet_gnd = inet;
+		else if (strcmp(clb_net[inet].name, "vcc") == 0)
+			inet_vcc = inet;
+		if (inet_vcc != OPEN && inet_gnd != OPEN)
+			break;
+	}
+	assert(inet_vcc != OPEN && inet_gnd != OPEN);
+
+	assert(strcmp(FILL_TYPE->name, "SLICEL") == 0);
+	for (inet = 0; inet < num_nets; ++inet) {
+		int isink, inet_ref;
+		char c;
+		if (strncmp(clb_net[inet].name, "GLOBAL_LOGIC", strlen("GLOBAL_LOGIC")) != 0)
+			continue;
+
+		c = clb_net[inet].name[strlen("GLOBAL_LOGIC")];
+		if (c == '0')
+			inet_ref = inet_gnd;
+		else if (c == '1')
+			inet_ref = inet_vcc;
+		else assert(FALSE);
+
+		for (isink = 1; isink <= clb_net[inet].num_sinks; ++isink) {
+			int iblk, ptc, inode, prev_node;
+			iblk = clb_net[inet].node_block[isink];
+			if (block[iblk].type != FILL_TYPE)
+				continue;
+			ptc = clb_net[inet].node_block_pin[isink];
+			inode = get_rr_node_index(block[iblk].x, block[iblk].y, IPIN, ptc, rr_node_indices);
+			assert(inode != OPEN);
+			prev_node = rr_node[inode].prev_node;
+			assert(prev_node != OPEN);
+			if (rr_node_route_inf[prev_node].reserved_for == inet_ref)
+				rr_node_route_inf[prev_node].reserved_for = inet;
+		}
+	}
+
+	reserve_byps();
+
+	if (router_opts->noRoutethru)
+		delete_all_rt();
+
+	/* If global net routing not performed, reserve their IPINs? */
+	if (router_opts->noGlobals) {
+		for (inet = 0; inet < num_nets; ++inet) {
+			if (strcmp(clb_net[inet].name, "gnd") == 0)
+				reserve_net_ipins(inet);
+			else if (strcmp(clb_net[inet].name, "vcc") == 0)
+				reserve_net_ipins(inet);
+		}
+	}
+
+}
+
+/* Block route-throughs for LUT sites in user circuit
+ * and remove A6 IPIN (from being pinswap-pable) for
+ * fractured LUTs since A6 must be tied to vcc */
+static void
+reserve_slice_ipins(void) {
+	int iblk;
+	int inet_vcc;
+	assert(strcmp(FILL_TYPE->name, "SLICEL") == 0);
+
+	for (inet_vcc = 0; inet_vcc < num_nets; ++inet_vcc) {
+		if (strcmp(clb_net[inet_vcc].name, "vcc") == 0)
+			break;
+	}
+	assert(inet_vcc < num_nets);
+
+	for (iblk = 0; iblk < num_blocks; ++iblk)
+	{
+		int slice_mode;
+		int bx, by, bz;
+		int imode;
+		int num_bles, ible;
+
+		if (block[iblk].type != FILL_TYPE)
+			continue;
+
+		//assert(block[iblk].pb->pb_graph_node->pb_type->num_modes == 3);
+
+		bx = block[iblk].x;
+		by = block[iblk].y;
+		bz = block[iblk].z;
+
+		assert(block[iblk].pb->child_pbs);
+		assert(block[iblk].pb->child_pbs[0]);
+
+		imode = block[iblk].pb->mode;
+		//if (strcmp(block[iblk].pb->pb_graph_node->pb_type->modes[imode].pb_type_children->name, "ble6") != 0)
+		//	continue;
+		num_bles = block[iblk].pb->pb_graph_node->pb_type->modes[imode].pb_type_children->num_pb;
+		for (ible = 0; ible < num_bles; ++ible)
+		{
+			const char *bleModeName;
+
+			if (!block[iblk].pb->child_pbs[0][ible].child_pbs)
+				continue;
+
+			imode = block[iblk].pb->child_pbs[0][ible].mode;
+			bleModeName = block[iblk].pb->child_pbs[0][ible].pb_graph_node->pb_type->modes[imode].name;
+			if (strcmp(bleModeName, "O6LUT") == 0
+					|| strcmp(bleModeName, "ble7") == 0
+					|| strcmp(bleModeName, "ble8") == 0) {
+				int lut_in, lut_out;
+
+				/* Delete A6:A1 -> {A,AQ,AMUX} RTs */
+				if (strcmp(bleModeName, "ble7") == 0)
+					for (lut_in = 0; lut_in < 6; ++lut_in) {
+						for (lut_out = 0; lut_out < 3; ++lut_out) {
+							delete_rt(bx, by, bz*PINS_PER_SLICEL + (ible*2+0)*IPINS_PER_BLE + lut_in, 
+									bz*PINS_PER_SLICEL + (ible*2+0)*OPINS_PER_BLE + PTC_SLICEL_A + lut_out);
+							delete_rt(bx, by, bz*PINS_PER_SLICEL + (ible*2+1)*IPINS_PER_BLE + lut_in, 
+									bz*PINS_PER_SLICEL + (ible*2+1)*OPINS_PER_BLE + PTC_SLICEL_A + lut_out);
+						}
+					}
+				else if (strcmp(bleModeName, "ble8") == 0)
+					for (lut_in = 0; lut_in < 6; ++lut_in) {
+						for (lut_out = 0; lut_out < 3; ++lut_out) {
+							delete_rt(bx, by, bz*PINS_PER_SLICEL + 0*IPINS_PER_BLE + lut_in, 
+									bz*PINS_PER_SLICEL + 0*OPINS_PER_BLE + PTC_SLICEL_A + lut_out);
+							delete_rt(bx, by, bz*PINS_PER_SLICEL + 1*IPINS_PER_BLE + lut_in, 
+									bz*PINS_PER_SLICEL + 1*OPINS_PER_BLE + PTC_SLICEL_A + lut_out);
+							delete_rt(bx, by, bz*PINS_PER_SLICEL + 2*IPINS_PER_BLE + lut_in, 
+									bz*PINS_PER_SLICEL + 2*OPINS_PER_BLE + PTC_SLICEL_A + lut_out);
+							delete_rt(bx, by, bz*PINS_PER_SLICEL + 3*IPINS_PER_BLE + lut_in, 
+									bz*PINS_PER_SLICEL + 3*OPINS_PER_BLE + PTC_SLICEL_A + lut_out);
+						}
+					}
+				else
+					for (lut_in = 0; lut_in < 6; ++lut_in) {
+						for (lut_out = 0; lut_out < 3; ++lut_out) {
+							delete_rt(bx, by, bz*PINS_PER_SLICEL + ible*IPINS_PER_BLE + lut_in, 
+									bz*PINS_PER_SLICEL + ible*OPINS_PER_BLE + PTC_SLICEL_A + lut_out);
+						}
+					}
+			}
+			else {
+				int num_flut, iflut;
+				int lut_in, lut_out;
+				assert(strncmp(bleModeName, "O6O5LUT", strlen("O6O5LUT")) == 0);
+				lut_in = 0;
+				lut_out = 0;
+				/* Delete A6->A route through */
+				delete_rt(bx, by, bz*PINS_PER_SLICEL + ible*IPINS_PER_BLE + lut_in, 
+						bz*PINS_PER_SLICEL + ible*OPINS_PER_BLE + PTC_SLICEL_A + lut_out);
+
+				num_flut = block[iblk].pb->child_pbs[0][ible].child_pbs[0][0].pb_graph_node->pb_type->num_pb;
+				for (iflut = 0; iflut < num_flut; ++iflut) {
+					if (!block[iblk].pb->child_pbs[0][ible].child_pbs[0][iflut].parent_pb)
+						continue;
+
+					if (iflut == 0) {
+						/* Delete A5:A1 -> A RTs too */
+						lut_out = 0;
+						for (lut_in = 1; lut_in < 6; ++lut_in) {
+							delete_rt(bx, by, bz*PINS_PER_SLICEL + ible*IPINS_PER_BLE + lut_in, 
+									bz*PINS_PER_SLICEL + ible*OPINS_PER_BLE + PTC_SLICEL_A + lut_out);
+						}
+					}
+					else {
+						assert(iflut == 1);
+						lut_in = PTC_SLICEL_A6_VCCONLY;
+						// Reserve A6 IPIN if O6 is not used (to prevent routethru)
+						reserve_ipin_and_delete_other_edges(bx, by, bz*PINS_PER_SLICEL + ible*IPINS_PER_BLE + lut_in, inet_vcc);
+					}
+				}	
+			}
+		}
+	}
+}
+
+void delete_all_rt(void) {
+	int x, y;
+	assert(strcmp(FILL_TYPE->name, "SLICEL") == 0);
+	for (y = 0; y <= ny+1; ++y) {
+		for (x = 0; x <=  nx+1; ++x) {
+			int z, ible;
+			if (grid[x][y].type != FILL_TYPE)
+				continue;
+			for (z = 0; z < 2; ++z) {
+				for (ible = 0; ible < 4; ++ible) {
+					int lut_in, lut_out;
+					for (lut_in = 0; lut_in < 6; ++lut_in) {
+						for (lut_out = 0; lut_out < 3; ++lut_out) {
+							delete_rt(x, y, z*PINS_PER_SLICEL + ible*IPINS_PER_BLE + lut_in, 
+									z*PINS_PER_SLICEL + ible*OPINS_PER_BLE + PTC_SLICEL_A + lut_out);
+						}
+					}
+				}
+			}
+
+		}
+	}
+}
+
+
+static int
+add_sink(int iblk, int inet, int ptc)
+{
+	int num_sinks;
+	assert(inet != OPEN);
+	num_sinks = clb_net[inet].num_sinks;
+	clb_net[inet].node_block = (int*)realloc(clb_net[inet].node_block, (num_sinks+2)*sizeof(int));
+	clb_net[inet].node_block[num_sinks+1] = iblk;
+	clb_net[inet].node_block_pin = (int*)realloc(clb_net[inet].node_block_pin, (num_sinks+2)*sizeof(int));
+	clb_net[inet].node_block_pin[num_sinks+1] = ptc;
+	++clb_net[inet].num_sinks;
+	//assert(block[iblk].pb->rr_graph[ptc].net_num == OPEN);
+	//block[iblk].pb->rr_graph[ptc].net_num = clb_to_vpack_net_mapping[inet];
+	ptc %= block[iblk].type->num_pins / block[iblk].type->capacity;
+	return block[iblk].pb->rr_graph[ptc].net_num;
+}
+
+static void
+connect_vcc_to_A6(int inet_vcc, int iblk) {
+	int bz;
+	int imode;
+	int num_bles, ible;
+
+	assert(strcmp(block[iblk].pb->pb_graph_node->pb_type->name, "SLICEL") == 0);
+	//assert(block[iblk].pb->pb_graph_node->pb_type->num_modes == 3);
+
+	assert(block[iblk].pb->child_pbs);
+	assert(block[iblk].pb->child_pbs[0]);
+
+	bz = block[iblk].z;
+
+	imode = block[iblk].pb->mode;
+	if (strcmp(block[iblk].pb->pb_graph_node->pb_type->modes[imode].pb_type_children->name, "ble6") != 0)
+		return;
+
+	num_bles = block[iblk].pb->pb_graph_node->pb_type->modes[imode].pb_type_children->num_pb;
+	for (ible = 0; ible < num_bles; ++ible)
+	{
+		const char *bleModeName;
+
+		if (!block[iblk].pb->child_pbs[0][ible].child_pbs)
+			continue;
+
+		imode = block[iblk].pb->child_pbs[0][ible].mode;
+		bleModeName = block[iblk].pb->child_pbs[0][ible].pb_graph_node->pb_type->modes[imode].name;
+		if (strncmp(bleModeName, "O6O5LUT", strlen("O6O5LUT")) == 0) {
+			boolean O6used = FALSE;
+			int num_flut, iflut;
+			num_flut = block[iblk].pb->child_pbs[0][ible].child_pbs[0][0].pb_graph_node->pb_type->num_pb;
+			for (iflut = 0; iflut < num_flut; ++iflut)
+			{
+				if (!block[iblk].pb->child_pbs[0][ible].child_pbs[0][iflut].parent_pb)
+					continue;
+
+				if (iflut == 0) {
+					O6used = TRUE;
+				}
+				/* If O5 is used, connect A6 to VCC */
+				else {
+					int lut_in;
+					int net_num;
+					assert(iflut == 1);
+					if (O6used) {
+						lut_in = PTC_SLICEL_A6_VCCONLY;
+						net_num = add_sink(iblk, inet_vcc, bz*PINS_PER_SLICEL + ible*IPINS_PER_BLE + lut_in);
+						assert(net_num == OPEN);
+					}
+				}
+			}
+		}
+		else {
+			assert(strcmp(bleModeName, "O6LUT") == 0);
+		}
+	}
+}
+
+static void
+connect_gnd_vcc_to_BRAM(int inet_gnd, int inet_vcc, int iblk) {
+	int num_slices;
+	int imode;
+	char *modeName;
+
+	assert(!strcmp(block[iblk].pb->pb_graph_node->pb_type->name, "RAMB36E1"));
+	//assert(block[iblk].pb->pb_graph_node->pb_type->num_modes == 1);
+
+	num_slices = block[iblk].pb->pb_graph_node->pb_type->modes[0].num_pb_type_children;
+
+	imode = block[iblk].pb->mode;
+	modeName = block[iblk].pb->pb_graph_node->pb_type->modes[imode].name;
+	if (strncmp(modeName, "RAMB36E1", 8) == 0) {
+		int iport, num_ports;
+		int ptc;
+		size_t modeNameLen;
+		boolean singlePort = FALSE;
+
+		assert(num_slices == 1);
+
+		modeNameLen = strlen(modeName);
+		if (strncmp(modeName+modeNameLen-3, "_sp", 3) == 0)
+			singlePort = TRUE;
+
+		num_ports = block[iblk].type->pb_type->num_ports;
+		ptc = 0;
+		for (iport = 0; iport < num_ports; ++iport) {
+			int net_num = OPEN;
+			char *portName = block[iblk].type->pb_type->ports[iport].name;
+			int num_pins = block[iblk].type->pb_type->ports[iport].num_pins;
+
+			/* Tie off EN{ARD,BWR}{L,U} to vcc */
+			if (strcmp(portName, "ENARDENL") == 0
+				|| strcmp(portName, "ENARDENU") == 0
+				|| strcmp(portName, "ENBWRENL") == 0
+				|| strcmp(portName, "ENBWRENU") == 0) {
+				assert(num_pins == 1);
+				net_num = add_sink(iblk, inet_vcc, ptc);
+			}
+			/* Tie off all ADDR unused LSBs to vcc */
+			else if (strcmp(portName, "ADDRARDADDRL") == 0
+					|| strcmp(portName, "ADDRBWRADDRL") == 0) {
+				int ipin;
+				int not_open_from = -1;
+				assert(num_pins == 16);
+				for (ipin = 0; ipin < num_pins-1; ++ipin) {
+					if (not_open_from < 0) {
+						if (block[iblk].nets[ptc+ipin] != OPEN)
+							not_open_from = ipin;
+					}
+					else
+						assert(block[iblk].nets[ptc+ipin] != OPEN);
+				}
+				assert(block[iblk].nets[ptc+num_pins-1] == OPEN);
+				net_num = add_sink(iblk, inet_vcc, ptc+num_pins-1);
+				assert(net_num == OPEN);
+				for (ipin = 0; ipin < not_open_from; ++ipin) {
+					net_num = add_sink(iblk, inet_vcc, ptc+ipin);
+					assert(net_num == OPEN);
+				}
+
+				if (strcmp(portName, "ADDRARDADDRL") == 0)
+					assert(strcmp(block[iblk].type->pb_type->ports[iport+1].name, "ADDRARDADDRU") == 0);
+				else if (strcmp(portName, "ADDRBWRADDRL") == 0)
+					assert(strcmp(block[iblk].type->pb_type->ports[iport+1].name, "ADDRBWRADDRU") == 0);
+				else assert(FALSE);
+
+				assert(block[iblk].type->pb_type->ports[iport+1].num_pins == 15);
+
+				/* Then copy ADDRARDADDRL into ADDRARDADDRU */
+				for (ipin = 0; ipin < not_open_from; ++ipin) {
+					assert(block[iblk].nets[ptc+num_pins+ipin] == OPEN);
+					net_num = add_sink(iblk, inet_vcc, ptc+num_pins+ipin);
+					assert(net_num == OPEN);
+				}
+			}
+			/* Tie off various REG/RST to gnd */
+			else if (strcmp(portName, "REGCLKARDRCLKL") == 0
+				|| strcmp(portName, "REGCLKARDRCLKU") == 0 
+				|| strcmp(portName, "REGCLKBL") == 0
+				|| strcmp(portName, "REGCLKBU") == 0
+				|| strcmp(portName, "REGCEAREGCEL") == 0
+				|| strcmp(portName, "REGCEAREGCEU") == 0
+				|| strcmp(portName, "REGCEBL") == 0
+				|| strcmp(portName, "REGCEBU") == 0
+				|| strcmp(portName, "RSTRAMARSTRAMLRST") == 0
+				|| strcmp(portName, "RSTRAMARSTRAMU") == 0
+				|| strcmp(portName, "RSTRAMBL") == 0
+				|| strcmp(portName, "RSTRAMBU") == 0
+				|| strcmp(portName, "RSTREGARSTREGL") == 0
+				|| strcmp(portName, "RSTREGARSTREGU") == 0
+				|| strcmp(portName, "RSTREGBL") == 0
+				|| strcmp(portName, "RSTREGBU") == 0
+				) {
+				assert(num_pins == 1);
+				net_num = add_sink(iblk, inet_gnd, ptc);
+			}
+			/* If single port, tie off WEAL to gnd 
+			 * then fix_bram_connections() will copy into WEAU */
+			else if (singlePort && strcmp(portName, "WEAL") == 0) {
+				int ipin;
+				assert(num_pins == 4);
+				for (ipin = 0; ipin < num_pins; ++ipin) {
+					net_num = add_sink(iblk, inet_gnd, ptc+ipin);
+					assert(net_num == OPEN);
+				}
+			}
+			else 
+			assert(net_num == OPEN);
+			ptc += block[iblk].type->pb_type->ports[iport].num_pins;
+		}
+	}
+	else if (strcmp(modeName, "RAMB18E1x2") == 0) {
+		int iport, num_ports;
+		int islice;
+		int ptc;
+
+		assert(num_slices == 1);
+
+		num_slices = block[iblk].pb->child_pbs[0][0].pb_graph_node->pb_type->num_pb;
+		for (islice = 0; islice < num_slices; ++islice) {
+			if (!block[iblk].pb->child_pbs[0][islice].child_pbs)
+				continue;
+
+			num_ports = block[iblk].type->pb_type->num_ports;
+			ptc = 0;
+			for (iport = 0; iport < num_ports; ++iport) {
+				int net_num = OPEN;
+				char *portName = block[iblk].type->pb_type->ports[iport].name;
+				int num_pins = block[iblk].type->pb_type->ports[iport].num_pins;
+
+				/* Tie off EN{ARD,BWR}EN to vcc */
+				if ((islice == 0 && 
+					(strcmp(portName, "s0_ENARDEN") == 0
+					|| strcmp(portName, "s0_ENBWREN") == 0)) ||
+					(islice == 1 && 
+					(strcmp(portName, "s1_ENARDEN") == 0
+					|| strcmp(portName, "s1_ENBWREN") == 0))) {
+					assert(num_pins == 1);
+					net_num = add_sink(iblk, inet_vcc, ptc);
+				}
+				/* Tie off unused LSBs in ADDR{ARD,BWR}ADDR to vcc */
+				else if ((islice == 0 && 
+					(strcmp(portName, "s0_ADDRARDADDR") == 0
+					|| strcmp(portName, "s0_ADDRBWRADDR") == 0)) ||
+					(islice == 1 && 
+					(strcmp(portName, "s1_ADDRARDADDR") == 0
+					|| strcmp(portName, "s1_ADDRBWRADDR") == 0))) {
+					// Tie off all unused LSBs to vcc
+					int ipin;
+					int not_open_from = -1;
+					assert(num_pins == 14);
+					for (ipin = 0; ipin < num_pins; ++ipin) {
+						if (not_open_from < 0) {
+							if (block[iblk].nets[ptc+ipin] != OPEN)
+								not_open_from = ipin;
+						}
+						/*else
+							assert(block[iblk].nets[ptc+ipin] != OPEN);*/
+					}
+					for (ipin = 0; ipin < not_open_from; ++ipin) {
+						net_num = add_sink(iblk, inet_vcc, ptc+ipin);
+						assert(net_num == OPEN);
+					}
+				}
+				/* Tie off ADDR{A,B}TIEHIGH to vcc */
+				else if ((islice == 0 && 
+					(strcmp(portName, "s0_ADDRATIEHIGH") == 0
+					|| strcmp(portName, "s0_ADDRBTIEHIGH") == 0)) ||
+					(islice == 1 && 
+					(strcmp(portName, "s1_ADDRATIEHIGH") == 0
+					|| strcmp(portName, "s1_ADDRBTIEHIGH") == 0))) {
+					int ipin;
+					assert(num_pins == 2);
+					for (ipin = 0; ipin < num_pins; ++ipin) {
+						net_num = add_sink(iblk, inet_vcc, ptc+ipin);
+						assert(net_num == OPEN);
+					}
+				}
+				/* Tie off various REG/RST to gnd */
+				else if ((islice == 0 && 
+					(strcmp(portName, "s0_REGCLKARDRCLK") == 0
+					|| strcmp(portName, "s0_REGCLKB") == 0
+					|| strcmp(portName, "s0_REGCEAREGCE") == 0
+					|| strcmp(portName, "s0_REGCEB") == 0
+					|| strcmp(portName, "s0_RSTRAMARSTRAM") == 0
+					|| strcmp(portName, "s0_RSTRAMB") == 0
+					|| strcmp(portName, "s0_RSTREGARSTREG") == 0
+					|| strcmp(portName, "s0_RSTREGB") == 0
+					)) ||
+					(islice == 1 &&
+					(strcmp(portName, "s1_REGCLKARDRCLK") == 0
+					|| strcmp(portName, "s1_REGCLKB") == 0
+					|| strcmp(portName, "s1_REGCEAREGCE") == 0
+					|| strcmp(portName, "s1_REGCEB") == 0
+					|| strcmp(portName, "s1_RSTRAMARSTRAM") == 0
+					|| strcmp(portName, "s1_RSTRAMB") == 0
+					|| strcmp(portName, "s1_RSTREGARSTREG") == 0
+					|| strcmp(portName, "s1_RSTREGB") == 0
+					))) {
+					assert(num_pins == 1);
+					net_num = add_sink(iblk, inet_gnd, ptc);
+				}
+				/* In RAMB18 mode, WEBWE[7:4] are always tied off to gnd */
+				else if ((islice == 0 && strcmp(portName, "s0_WEBWE") == 0) ||
+						(islice == 1 && strcmp(portName, "s1_WEBWE") == 0)) {
+					int ipin;
+					assert(num_pins == 8);
+					for (ipin = 4; ipin < num_pins; ++ipin) {
+						net_num = add_sink(iblk, inet_gnd, ptc+ipin);
+						assert(net_num == OPEN);
+					}
+				}
+				assert(net_num == OPEN);
+				ptc += block[iblk].type->pb_type->ports[iport].num_pins;
+			}
+		}
+	}
+	else {
+		vpr_printf(TIO_MESSAGE_ERROR, "RAMB36 mode %s not recognised!\n", modeName);
+		exit(1);
+	}
+}
+
+static void
+connect_gnd_vcc_to_DSP(int inet_gnd, int inet_vcc, int iblk) {
+	int num_slices;
+	int iport, num_ports;
+	int imode;
+	int ptc;
+
+	assert(!strcmp(block[iblk].pb->pb_graph_node->pb_type->name, "DSP48E1"));
+	assert(block[iblk].pb->pb_graph_node->pb_type->num_modes == 1);
+
+	imode = block[iblk].pb->mode;
+	assert(imode == 0);
+
+	num_slices = block[iblk].pb->pb_graph_node->pb_type->modes[imode].num_pb_type_children;
+	assert(num_slices == 4);
+
+	assert(strcmp(block[iblk].pb->child_pbs[0][0].pb_graph_node->pb_type->name, "mult_25x18") == 0);
+	//assert(block[iblk].pb->child_pbs[0][0].pb_graph_node->pb_type->num_modes == 1);
+
+	num_slices = block[iblk].pb->child_pbs[0][0].pb_graph_node->pb_type->num_pb;
+	assert(num_slices == 1);
+	assert(block[iblk].pb->child_pbs[0]);
+
+	num_ports = block[iblk].type->pb_type->num_ports;
+	ptc = block[iblk].z * block[iblk].type->num_pins / block[iblk].type->capacity;
+	for (iport = 0; iport < num_ports; ++iport) {
+		int net_num = OPEN;
+		char *portName = block[iblk].type->pb_type->ports[iport].name;
+		if (strcmp(portName, "CEA1") == 0
+			|| strcmp(portName, "CEA2") == 0 
+			|| strcmp(portName, "CEB1") == 0
+			|| strcmp(portName, "CEB2") == 0
+			|| strcmp(portName, "CEM") == 0
+			|| strcmp(portName, "CEP") == 0) {
+			net_num = add_sink(iblk, inet_gnd, ptc);
+		}
+		else if (strcmp(portName, "INMODE") == 0) {
+			assert(block[iblk].type->pb_type->ports[iport].num_pins == 5);
+			net_num = add_sink(iblk, inet_vcc, ptc + 2);
+
+			net_num = add_sink(iblk, inet_gnd, ptc + 0);
+			net_num = add_sink(iblk, inet_gnd, ptc + 1);
+			net_num = add_sink(iblk, inet_gnd, ptc + 3);
+			net_num = add_sink(iblk, inet_gnd, ptc + 4);
+		}
+		else if (strcmp(portName, "OPMODE") == 0) {
+			assert(block[iblk].type->pb_type->ports[iport].num_pins == 7);
+			net_num = add_sink(iblk, inet_vcc, ptc + 0);
+			net_num = add_sink(iblk, inet_vcc, ptc + 2);
+
+			net_num = add_sink(iblk, inet_gnd, ptc + 1);
+			net_num = add_sink(iblk, inet_gnd, ptc + 3);
+			net_num = add_sink(iblk, inet_gnd, ptc + 4);
+			net_num = add_sink(iblk, inet_gnd, ptc + 5);
+			net_num = add_sink(iblk, inet_gnd, ptc + 6);
+		}
+		assert(net_num == OPEN);
+		ptc += block[iblk].type->pb_type->ports[iport].num_pins;
+	}
+}
+
+static int 
+add_net(const char *name) {
+	clb_net = (struct s_net*)realloc(clb_net, sizeof(struct s_net)*(num_nets+1));
+	clb_net[num_nets].name = my_strdup(name);
+	clb_net[num_nets].is_global = FALSE;
+
+	clb_net[num_nets].num_sinks = 0;
+	clb_net[num_nets].node_block = (int*)malloc(sizeof(int));
+	clb_net[num_nets].node_block[0] = OPEN;
+	clb_net[num_nets].node_block_port = NULL;
+	clb_net[num_nets].node_block_pin = (int*)malloc(sizeof(int));
+	clb_net[num_nets].node_block_pin[0] = OPEN;
+	return num_nets++;
+}
+
+static void
+connect_gnd_vcc(int inet_vcc, int inet_gnd) {
+	int iblk;
+	assert(strcmp(FILL_TYPE->name, "SLICEL") == 0);
+	for (iblk = 0; iblk < num_blocks; ++iblk)
+	{
+		if (block[iblk].type == FILL_TYPE) {
+			connect_vcc_to_A6(inet_vcc, iblk);
+		}
+		else if (strcmp(block[iblk].type->name, "RAMB36E1") == 0) {
+			connect_gnd_vcc_to_BRAM(inet_gnd, inet_vcc, iblk);
+		}
+		else if (strcmp(block[iblk].type->name, "DSP48E1") == 0) {
+			connect_gnd_vcc_to_DSP(inet_gnd, inet_vcc, iblk);
+		}
+	}
+}
+
+static void
+reserve_net_ipins(int inet) {
+	int isink, num_sinks;
+	assert(strcmp(FILL_TYPE->name, "SLICEL") == 0);
+	num_sinks = clb_net[inet].num_sinks;
+	for (isink = 1; isink <= num_sinks; ++isink) {
+		int iblk, ptc;
+		iblk = clb_net[inet].node_block[isink];
+		if (block[iblk].type != FILL_TYPE)
+			continue;
+		ptc = clb_net[inet].node_block_pin[isink];
+		ptc %= FILL_TYPE->num_pins / FILL_TYPE->capacity;
+		/* Only if [ABCD] LUT */
+		if (ptc / IPINS_PER_BLE > 3)
+			continue;
+
+		/* Only if [ABCD][1-6] */
+		if (ptc % IPINS_PER_BLE < PTC_SLICEL_A6 
+				|| ptc % IPINS_PER_BLE > PTC_SLICEL_A1)
+			continue;
+
+		ptc = clb_net[inet].node_block_pin[isink];
+		reserve_ipin_and_delete_other_edges(block[iblk].x, block[iblk].y, ptc, inet);
+	}
+}
+
+static void
+reserve_byps(void) {
+	int inet;
+	assert(strcmp(FILL_TYPE->name, "SLICEL") == 0);
+	for (inet = 0; inet < num_nets; ++inet) {
+		int isink, num_sinks;
+
+		/* Ignore vcc/gnd nets, because their sinks have
+		 * been split into GLOBAL_LOGIC[01] */
+		if (strcmp(clb_net[inet].name, "vcc") == 0
+				|| strcmp(clb_net[inet].name, "gnd") == 0)
+			continue;
+
+		num_sinks = clb_net[inet].num_sinks;
+		for (isink = 1; isink <= num_sinks; ++isink) {
+			int iblk, ptc;
+			int ipin_node, clb_x_node, byp_b_node, byp_node;
+
+			iblk = clb_net[inet].node_block[isink];
+			if (block[iblk].type != FILL_TYPE)
+				continue;
+			ptc = clb_net[inet].node_block_pin[isink];
+			ptc %= FILL_TYPE->num_pins / FILL_TYPE->capacity;
+			/* Only if [ABCD] LUT */
+			if (ptc / IPINS_PER_BLE > 3)
+				continue;
+
+			/* Only if [ABCD]X */
+			if (ptc % IPINS_PER_BLE != PTC_SLICEL_AX)
+				continue;
+
+			ptc = clb_net[inet].node_block_pin[isink];
+			ipin_node = get_rr_node_index(block[iblk].x, block[iblk].y, IPIN, ptc, rr_node_indices);
+			assert(ipin_node != OPEN);
+
+			clb_x_node = rr_node[ipin_node].prev_node;
+			assert(clb_x_node != OPEN);
+
+			byp_b_node = rr_node[clb_x_node].prev_node;
+			assert(byp_b_node != OPEN);
+
+			byp_node = rr_node[byp_b_node].prev_node;
+			assert(byp_node != OPEN);
+
+			assert(rr_node[byp_node].num_edges == 2);
+
+			//if (rr_node[byp_node].edges[0] != byp_b_node) {
+			//	assert(rr_node[byp_node].edges[1] == byp_b_node);
+			//	rr_node[byp_node].edges[0] = byp_b_node;
+			//}
+			//rr_node[byp_node].num_edges = 1;
+
+			/* Reserve this BYP node exclusively for this
+			 * net only */
+			rr_node_route_inf[byp_node].reserved_for = inet;
+		}
+	}
+}
+
+
+void
+split_gnd_vcc_nets(struct s_router_opts *router_opts) {
+	int inet;
+	int inet_vcc;
+	int inet_gnd;
+
+	inet_vcc = inet_gnd = OPEN;
+	for (inet = 0; inet < num_nets; ++inet) {
+		if (strcmp(clb_net[inet].name, "vcc") == 0) inet_vcc = inet;
+		else if (strcmp(clb_net[inet].name, "gnd") == 0) inet_gnd = inet;
+		if (inet_vcc != OPEN && inet_gnd != OPEN) break;
+	}
+	if (inet == num_nets) {
+		if (inet_vcc == OPEN) {
+			inet_vcc = add_net("vcc");
+			clb_net[inet_vcc].is_global = TRUE;
+		}
+		if (inet_gnd == OPEN) {
+			inet_gnd = add_net("gnd");
+			clb_net[inet_gnd].is_global = TRUE;
+		}
+	}
+	assert(inet_vcc != OPEN && inet_gnd != OPEN);
+	assert(clb_net[inet_vcc].is_global);
+	assert(clb_net[inet_gnd].is_global);
+
+	/* First, add all fractured LUTs' A6 pin
+	 * to VCC before splitting */
+	connect_gnd_vcc(inet_vcc, inet_gnd);
+
+	assert(strcmp(FILL_TYPE->name, "SLICEL") == 0);
+
+	if (!router_opts->noGlobals) {
+		std::map<std::pair<char,std::pair<int,int> >,int> xy2net;
+		typedef std::map<std::pair<char,std::pair<int,int> >,int>::const_iterator t_it;
+
+		for (inet = 0; inet < num_nets; ++inet) {
+			char *port_name, *net_name;
+			char vcc_not_gnd;
+			if (!clb_net[inet].is_global)
+				continue;
+			port_name = NULL;
+			vcc_not_gnd = -1;
+			if (inet == inet_gnd) {
+				port_name = "GND_WIRE";
+				net_name = "GLOBAL_LOGIC0";
+				vcc_not_gnd = 0;
+			}
+			else if (inet == inet_vcc) {
+				port_name = "VCC_WIRE";
+				net_name = "GLOBAL_LOGIC1";
+				vcc_not_gnd = 1;
+			}
+			if (port_name) {
+				int isink;
+				int num_sinks = clb_net[inet].num_sinks;
+				int iblk = clb_net[inet].node_block[0];
+				int ipin;
+				if (iblk != OPEN) {
+					ipin = clb_net[inet].node_block_pin[0] 
+						% (block[iblk].type->num_pins / block[iblk].type->capacity);
+					assert(block[iblk].pb->rr_graph[ipin].net_num == clb_to_vpack_net_mapping[inet]);
+				}
+				//block[clb_net[inet].node_block[0]].pb->rr_graph[clb_net[inet].node_block_pin[0]].net_num = OPEN;
+
+				for (isink = 1; isink <= num_sinks; ++isink) {
+					int jnet, ptc;
+					iblk = clb_net[inet].node_block[isink];
+					assert(iblk != OPEN);
+
+					int x = block[iblk].x;
+					int y = block[iblk].y;
+					int z = block[iblk].z;
+					t_it it = xy2net.find(std::make_pair(vcc_not_gnd,std::make_pair(x,y)));
+					if (it == xy2net.end()) {
+						int iport, num_ports;
+						char buf[32];
+
+						sprintf(buf, "%s_X%dY%d", net_name, x, y);
+						jnet = add_net(buf);
+
+						/* Find the lowest z block at this grid to host GND/VCC wire */
+						for (; z >= 0; --z) {
+							if (grid[x][y].blocks[z] != OPEN)
+								clb_net[jnet].node_block[0] = grid[x][y].blocks[z];
+						}
+						++z;
+
+						/* Find the ptc for the appropriate wire */
+						num_ports = block[iblk].type->pb_type->num_ports;
+						ptc = 0;
+						for (iport = 0; iport < num_ports; ++iport) {
+							if (!strcmp(block[iblk].type->pb_type->ports[iport].name, port_name))
+								break;
+							ptc += block[iblk].type->pb_type->ports[iport].num_pins;
+						}
+						assert(iport != num_ports);
+						assert(block[iblk].type->class_inf[iport].num_pins == 1);
+
+						assert(z == 0);
+						ptc += z * (block[iblk].type->num_pins / block[iblk].type->capacity);
+						clb_net[jnet].node_block_pin[0] = ptc;
+						//printf("%s at (%d,%d,%d)\n", buf, block[iblk].x, block[iblk].y, ptc);
+
+						// Necessary to prevent reserve_locally_used_opins() from
+						// occupying the const outpin
+						assert(block[clb_net[jnet].node_block[0]].nets[ptc] == inet
+							|| block[clb_net[jnet].node_block[0]].nets[ptc] == OPEN);
+						block[clb_net[jnet].node_block[0]].nets[ptc] = jnet;
+
+						xy2net.insert(std::make_pair(std::make_pair(vcc_not_gnd,std::make_pair(x,y)),jnet));
+					}
+					else {
+						jnet = it->second;
+					}
+
+					ptc = clb_net[inet].node_block_pin[isink];
+					if (block[iblk].type == FILL_TYPE
+							&& ptc % (FILL_TYPE->num_pins / FILL_TYPE->capacity) == PTC_SLICEL_CIN) {
+#if defined(__x86_64__)
+						asm("int3");
+#endif
+						assert(FALSE);
+					}
+					add_sink(iblk, jnet, ptc);
+				}
+			}
+		}
+	}
+}
+
+void
+fix_bram_connections(void) {
+	int iblk;
+	for (iblk = 0; iblk < num_blocks; ++iblk) {
+		int num_slices;
+		int imode;
+		char *modeName;
+		if (strcmp(block[iblk].type->name, "RAMB36E1") == 0) {
+			int num_children;
+			assert(!strcmp(block[iblk].pb->pb_graph_node->pb_type->name, "RAMB36E1"));
+
+			num_children = block[iblk].pb->pb_graph_node->pb_type->modes[0].num_pb_type_children;
+
+			imode = block[iblk].pb->mode;
+			modeName = block[iblk].pb->pb_graph_node->pb_type->modes[imode].name;
+
+			if (strncmp(modeName, "RAMB36E1", 6) == 0) {
+				int iport, num_ports;
+				int ptc;
+				size_t modeNameLen;
+				boolean singlePort = FALSE;
+
+				assert(num_children == 1);
+				assert(block[iblk].pb->child_pbs[0][0].child_pbs);
+
+				modeNameLen = strlen(modeName);
+				if (strncmp(modeName+modeNameLen-3, "_sp", 3) == 0)
+					singlePort = TRUE;
+
+				num_ports = block[iblk].type->pb_type->num_ports;
+				ptc = 0;
+				for (iport = 0; iport < num_ports; ++iport) {
+					char *portName = block[iblk].type->pb_type->ports[iport].name;
+					if (strcmp(portName, "DIADI") == 0 || strcmp(portName, "DIBDI") == 0) {
+						/* For the thinnest RAMB36E1 mode, 
+						 * connect the 1 bit input to DI[AB]DI1 as well as 0 
+						 * (which translates to DI[AB]DIU0 */
+						if (strncmp(modeName, "RAMB36E1_32768x1_", strlen("RAMB36E1_32768x1_")) == 0) {
+							int inet, net_num;
+							inet = block[iblk].nets[ptc];
+							assert(inet != OPEN);
+							assert(block[iblk].nets[ptc+16] == OPEN);
+							net_num = add_sink(iblk, inet, ptc+16);
+							assert(net_num == OPEN);
+						}
+					}
+					/* Copy ADDRARDADDRL to U */
+					else if (strcmp(portName, "ADDRARDADDRL") == 0) {
+						int ipin, num_pins1, num_pins2;
+						int inet;
+						int net_num;
+						num_pins1 = block[iblk].type->pb_type->ports[iport].num_pins;
+						//inet = block[iblk].nets[ptc];
+						//assert(inet != OPEN);
+						assert(num_pins1 == 16);
+
+						assert(strcmp(block[iblk].type->pb_type->ports[iport+1].name, "ADDRARDADDRU") == 0);
+						num_pins2 = block[iblk].type->pb_type->ports[iport+1].num_pins;
+						assert(num_pins2 == 15);
+
+						/* For the widest mode, copy ADDRARDADDRL from ADDRBWRADDRL */
+						if (strncmp(modeName, "RAMB36E1_512x72_sp", strlen("RAMB36E1_512x72_sp")) == 0) {
+							assert(strcmp(block[iblk].type->pb_type->ports[iport+2].name, "ADDRBWRADDRL") == 0);
+							assert(block[iblk].type->pb_type->ports[iport+2].num_pins == num_pins1);
+							for (ipin = 0; ipin < num_pins1; ++ipin) {
+								assert(block[iblk].nets[ptc+ipin] == OPEN);
+								inet = block[iblk].nets[ptc+num_pins1+num_pins2+ipin];
+								if (inet != OPEN) {
+									net_num = add_sink(iblk, inet, ptc+ipin);
+									assert(net_num == OPEN);
+									block[iblk].nets[ptc+ipin] = inet;
+								}
+							}
+						}
+
+						/* Then copy ADDRARDADDRL into ADDRARDADDRU */
+						for (ipin = 0; ipin < num_pins2; ++ipin) {
+							inet = block[iblk].nets[ptc+ipin];
+							assert(block[iblk].nets[ptc+num_pins1+ipin] == OPEN);
+							if (inet != OPEN) {
+								net_num = add_sink(iblk, inet, ptc+num_pins1+ipin);
+								assert(net_num == OPEN);
+							}
+						}
+						//vpr_printf(TIO_MESSAGE_INFO, "%s\n", portName);
+						ptc += num_pins1;
+						++iport;
+					}
+					/* If dual port, extend ADDRBWRADDRL to U */
+					else if (!singlePort && strcmp(portName, "ADDRBWRADDRL") == 0) {
+						int ipin, num_pins1, num_pins2;
+						int inet;
+						int net_num;
+						num_pins1 = block[iblk].type->pb_type->ports[iport].num_pins;
+						//inet = block[iblk].nets[ptc];
+						//assert(inet != OPEN);
+						assert(num_pins1 == 16);
+
+						assert(strcmp(block[iblk].type->pb_type->ports[iport+1].name, "ADDRBWRADDRU") == 0);
+						num_pins2 = block[iblk].type->pb_type->ports[iport+1].num_pins;
+						assert(num_pins2 == 15);
+						for (ipin = 0; ipin < num_pins2; ++ipin) {
+							inet = block[iblk].nets[ptc+ipin];
+							assert(block[iblk].nets[ptc+num_pins1+ipin] == OPEN);
+							if (inet != OPEN) {
+								net_num = add_sink(iblk, inet, ptc+num_pins1+ipin);
+								assert(net_num == OPEN);
+							}
+						}
+						//vpr_printf(TIO_MESSAGE_INFO, "%s\n", portName);
+						ptc += num_pins1;
+						++iport;
+					}
+					/* If dual port, extend WEAL and copy to WEAU */
+					else if (!singlePort && strcmp(portName, "WEAL") == 0) {
+						int ipin, num_pins;
+						int inet;
+						int net_num;
+						num_pins = block[iblk].type->pb_type->ports[iport].num_pins;
+						inet = block[iblk].nets[ptc];
+						assert(inet != OPEN);
+						assert(num_pins == 4);
+						for (ipin = 1; ipin < num_pins; ++ipin) {
+							assert(block[iblk].nets[ptc+ipin] == OPEN);
+							net_num = add_sink(iblk, inet, ptc+ipin);
+							assert(net_num == OPEN);
+						}
+						assert(strcmp(block[iblk].type->pb_type->ports[iport+1].name, "WEAU") == 0);
+						ptc += num_pins;
+						++iport;
+						num_pins = block[iblk].type->pb_type->ports[iport].num_pins;
+						assert(num_pins == 4);
+						for (ipin = 0; ipin < num_pins; ++ipin) {
+							assert(block[iblk].nets[ptc+ipin] == OPEN);
+							net_num = add_sink(iblk, inet, ptc+ipin);
+							assert(net_num == OPEN);
+						}
+						//vpr_printf(TIO_MESSAGE_INFO, "%d:%s %s <-- %s\n", iblk, block[iblk].name, portName, clb_net[inet].name);
+					}
+					/* Extend WEBWEL, and copy into WEBWEU */
+					else if (strcmp(portName, "WEBWEL") == 0) {
+						int ipin, num_pins;
+						int inet;
+						int net_num;
+						num_pins = block[iblk].type->pb_type->ports[iport].num_pins;
+						inet = block[iblk].nets[ptc];
+						assert(inet != OPEN);
+						assert(num_pins == 8);
+						for (ipin = 1; ipin < num_pins; ++ipin) {
+							assert(block[iblk].nets[ptc+ipin] == OPEN);
+							net_num = add_sink(iblk, inet, ptc+ipin);
+							assert(net_num == OPEN);
+						}
+
+						assert(strcmp(block[iblk].type->pb_type->ports[iport+1].name, "WEBWEU") == 0);
+						ptc += num_pins;
+						++iport;
+						num_pins = block[iblk].type->pb_type->ports[iport].num_pins;
+						assert(num_pins == 8);
+						for (ipin = 0; ipin < num_pins; ++ipin) {
+							assert(block[iblk].nets[ptc+ipin] == OPEN);
+							net_num = add_sink(iblk, inet, ptc+ipin);
+							assert(net_num == OPEN);
+						}
+						//vpr_printf(TIO_MESSAGE_INFO, "%s\n", portName);
+					}
+					/* If dual port, extend ARDCLKL to U and copy into BWR */
+					else if (!singlePort && strcmp(portName, "CLKARDCLKL") == 0) {
+						int num_pins;
+						int inet;
+						int net_num;
+						num_pins = block[iblk].type->pb_type->ports[iport].num_pins;
+						assert(num_pins == 1);
+						inet = block[iblk].nets[ptc];
+						assert(inet != OPEN);
+						++iport;
+						ptc += num_pins;
+
+						assert(strcmp(block[iblk].type->pb_type->ports[iport].name, "CLKARDCLKU") == 0);
+						num_pins = block[iblk].type->pb_type->ports[iport].num_pins;
+						assert(num_pins == 1);
+						assert(block[iblk].nets[ptc] == OPEN);
+						net_num = add_sink(iblk, inet, ptc);
+						assert(net_num == OPEN);
+						ptc += num_pins;
+						++iport;
+
+						assert(strcmp(block[iblk].type->pb_type->ports[iport].name, "CLKBWRCLKL") == 0);
+						num_pins = block[iblk].type->pb_type->ports[iport].num_pins;
+						assert(num_pins == 1);
+						assert(block[iblk].nets[ptc] == OPEN);
+						net_num = add_sink(iblk, inet, ptc);
+						assert(net_num == OPEN);
+						ptc += num_pins;
+						++iport;
+
+						assert(strcmp(block[iblk].type->pb_type->ports[iport].name, "CLKBWRCLKU") == 0);
+						num_pins = block[iblk].type->pb_type->ports[iport].num_pins;
+						assert(num_pins == 1);
+						assert(block[iblk].nets[ptc] == OPEN);
+						net_num = add_sink(iblk, inet, ptc);
+						assert(net_num == OPEN);
+					}
+
+					ptc += block[iblk].type->pb_type->ports[iport].num_pins;
+				}
+			}
+			else if (strncmp(modeName, "RAMB18E1", 8) == 0) {
+				assert(num_children == 1);
+
+				assert(block[iblk].pb->child_pbs[0]);
+				int islice;
+				num_slices = block[iblk].pb->child_pbs[0][0].pb_graph_node->pb_type->num_pb;
+				for (islice = 0; islice < num_slices; ++islice) {
+					int iport, num_ports;
+					int ptc;
+					size_t modeNameLen;
+					boolean singlePort = FALSE;
+
+					if (!block[iblk].pb->child_pbs[0][islice].child_pbs)
+						continue;
+
+					imode = block[iblk].pb->child_pbs[0][islice].mode;
+					modeName = block[iblk].pb->child_pbs[0][islice].pb_graph_node->pb_type->modes[imode].name;
+
+					modeNameLen = strlen(modeName);
+					if (strncmp(modeName+modeNameLen-3, "_sp", 3) == 0)
+						singlePort = TRUE;
+
+
+					num_ports = block[iblk].type->pb_type->num_ports;
+					ptc = 0;
+					for (iport = 0; iport < num_ports; ++iport) {
+						char *portName = block[iblk].type->pb_type->ports[iport].name;
+						if (strcmp(portName, "ADDRARDADDR") == 0) {
+							int ipin, num_pins;
+							int inet;
+							int net_num;
+							num_pins = block[iblk].type->pb_type->ports[iport].num_pins;
+							assert(num_pins == 14);
+
+							/* For the widest mode, copy ADDRARDADDR from ADDRBWRADDR */
+							if (strncmp(modeName, "RAMB18E1_512x36_sp", strlen("RAMB18E1_512x36_sp")) == 0) {
+								assert(strcmp(block[iblk].type->pb_type->ports[iport+1].name, "ADDRBWRADDR") == 0);
+								assert(block[iblk].type->pb_type->ports[iport+1].num_pins == num_pins);
+								for (ipin = 0; ipin < num_pins; ++ipin) {
+									assert(block[iblk].nets[ptc+ipin] == OPEN);
+									inet = block[iblk].nets[ptc+num_pins+ipin];
+									if (inet != OPEN) {
+										net_num = add_sink(iblk, inet, ptc+ipin);
+										assert(net_num == OPEN);
+										block[iblk].nets[ptc+ipin] = inet;
+									}
+								}
+							}
+						}
+						/* If dual port, extend WEA */
+						else if (!singlePort && (
+							(islice == 0 && strcmp(portName, "s0_WEA") == 0) ||
+							(islice == 1 && strcmp(portName, "s1_WEA") == 0))) {
+							int ipin, num_pins;
+							int inet;
+							int net_num;
+							num_pins = block[iblk].type->pb_type->ports[iport].num_pins;
+							assert(num_pins == 4);
+							inet = block[iblk].nets[ptc];
+							assert(inet != OPEN);
+							for (ipin = 1; ipin < num_pins; ++ipin) {
+								assert(block[iblk].nets[ptc+ipin] == OPEN);
+								net_num = add_sink(iblk, inet, ptc+ipin);
+								assert(net_num == OPEN);
+							}
+							//vpr_printf(TIO_MESSAGE_INFO, "%s\n", portName);
+						}
+						/* Extend WEBWE */
+						else if ((islice == 0 && strcmp(portName, "s0_WEBWE") == 0) ||
+							(islice == 1 && strcmp(portName, "s1_WEBWE") == 0)) {
+							int ipin, num_pins;
+							int inet;
+							int net_num;
+							num_pins = block[iblk].type->pb_type->ports[iport].num_pins;
+							assert(num_pins == 8);
+							inet = block[iblk].nets[ptc];
+							if (inet != OPEN) {
+								for (ipin = 1; ipin < 4; ++ipin) {
+									assert(block[iblk].nets[ptc+ipin] == OPEN);
+									net_num = add_sink(iblk, inet, ptc+ipin);
+									assert(net_num == OPEN);
+								}
+							}
+							//vpr_printf(TIO_MESSAGE_INFO, "%s\n", portName);
+						}
+						/* If dual port, copy ARDCLK into BWR */
+						else if (!singlePort && 
+							((islice == 0 && strcmp(portName, "s0_CLKARDCLK") == 0) ||
+							(islice == 1 && strcmp(portName, "s1_CLKARDCLK") == 0))) {
+							int ipin, num_pins1, num_pins2;
+							int inet;
+							int net_num;
+							num_pins1 = block[iblk].type->pb_type->ports[iport].num_pins;
+							assert(num_pins1 == 1);
+							inet = block[iblk].nets[ptc];
+							assert(inet != OPEN);
+							if (islice == 0)
+								assert(strcmp(block[iblk].type->pb_type->ports[iport+1].name, "s0_CLKBWRCLK") == 0);
+							else if (islice == 1)
+								assert(strcmp(block[iblk].type->pb_type->ports[iport+1].name, "s1_CLKBWRCLK") == 0);
+							num_pins2 = block[iblk].type->pb_type->ports[iport+1].num_pins;
+							assert(num_pins2 == 1);
+							for (ipin = 0; ipin < num_pins2; ++ipin) {
+								assert(block[iblk].nets[ptc+num_pins1+ipin] == OPEN);
+								net_num = add_sink(iblk, inet, ptc+num_pins1+ipin);
+								assert(net_num == OPEN);
+							}
+							ptc += num_pins1;
+							++iport;
+						}
+
+						ptc += block[iblk].type->pb_type->ports[iport].num_pins;
+					}
+				}
+				num_slices = block[iblk].pb->pb_graph_node->pb_type->modes[0].num_pb_type_children;
+			}
+		}
+	}
+}
+
+void
+transform_clocks(void) {
+	int inet;
+	for (inet = 0; inet < num_nets; ++inet) {
+		if (!clb_net[inet].is_global)
+			continue;
+		if (strcmp(clb_net[inet].name, "gnd") != 0 &&
+			strcmp(clb_net[inet].name, "vcc") != 0) {
+			clb_net[inet].is_global = FALSE;
+		}
+	}
+}
+
 
diff --git vpr/SRC/route/route_common.h vpr/SRC/route/route_common.h
index 1a1ba63..0e0c4fd 100755
--- vpr/SRC/route/route_common.h
+++ vpr/SRC/route/route_common.h
@@ -39,6 +39,8 @@ typedef struct {
 	float backward_path_cost;
 	short prev_edge;
 	short target_flag;
+	/* EH */
+	int reserved_for;
 } t_rr_node_route_inf;
 
 /* Extra information about each rr_node needed only during routing (i.e.    *
@@ -67,7 +69,7 @@ extern struct s_bb *route_bb; /* [0..num_nets-1]     */
 
 /******* Subroutines in route_common used only by other router modules ******/
 
-void pathfinder_update_one_cost(struct s_trace *route_segment_start,
+int pathfinder_update_one_cost(struct s_trace *route_segment_start,
 		int add_or_sub, float pres_fac);
 
 void pathfinder_update_cost(float pres_fac, float acc_fac);
@@ -114,4 +116,9 @@ void reserve_locally_used_opins(float pres_fac, boolean rip_up_local_opins,
 
 void free_chunk_memory_trace(void);
 
-
+void split_gnd_vcc_nets(struct s_router_opts *router_opts);
+void fix_bram_connections(void);
+void transform_clocks(void);
+void expose_local_fb_nets(void);
+short* find_rt(int x, int y, int src_ptc, int sink_ptc);
+void delete_all_rt(void);
diff --git vpr/SRC/route/route_export.h vpr/SRC/route/route_export.h
index 9b21072..9a0eb60 100755
--- vpr/SRC/route/route_export.h
+++ vpr/SRC/route/route_export.h
@@ -5,9 +5,11 @@ boolean try_route(int width_fac, struct s_router_opts router_opts,
 		struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf,
 		t_timing_inf timing_inf, float **net_delay, t_slack * slacks,
 		t_chan_width_dist chan_width_dist, t_ivec ** clb_opins_used_locally,
-		boolean * Fc_clipped, t_direct_inf *directs, int num_directs);
+		boolean * Fc_clipped, t_direct_inf *directs, int num_directs,
+		const char *arch_file);
 
 boolean feasible_routing(void);
+int feasible_routing_score(void);
 
 t_ivec **alloc_route_structs(void);
 
diff --git vpr/SRC/route/route_timing.c vpr/SRC/route/route_timing.c
index cf0d9ca..500e61c 100755
--- vpr/SRC/route/route_timing.c
+++ vpr/SRC/route/route_timing.c
@@ -2,6 +2,7 @@
 #include <math.h>
 #include <time.h>
 #include <assert.h>
+#include <string.h>
 #include "util.h"
 #include "vpr_types.h"
 #include "globals.h"
@@ -20,11 +21,12 @@
 static int get_max_pins_per_net(void);
 
 static void add_route_tree_to_heap(t_rt_node * rt_node, int target_node,
-		float target_criticality, float astar_fac);
+		float target_criticality, float astar_fac, float *exp_cost, int inet, float ipin_cost);
 
 static void timing_driven_expand_neighbours(struct s_heap *current, int inet,
 		float bend_cost, float criticality_fac, int target_node,
-		float astar_fac, int highfanout_rlim);
+		float astar_fac, int highfanout_rlim, 
+		float ipin_cost, e_sink_type sink_type);
 
 static float get_timing_driven_expected_cost(int inode, int target_node,
 		float criticality_fac, float R_upstream);
@@ -39,6 +41,9 @@ static void timing_driven_check_net_delays(float **net_delay);
 static int mark_node_expansion_by_bin(int inet, int target_node,
 		t_rt_node * rt_node);
 
+/* EH */
+static void mark_node_expansion_by_clock(int inet, t_rt_node * rt_node);
+
 /************************ Subroutine definitions *****************************/
 
 boolean try_timing_driven_route(struct s_router_opts router_opts,
@@ -50,16 +55,26 @@ boolean try_timing_driven_route(struct s_router_opts router_opts,
 
 	int itry, inet, ipin, i, bends, wirelength, total_wirelength, available_wirelength, 
 		segments, *net_index, *sink_order /* [1..max_pins_per_net-1] */;
-	boolean success, is_routable, rip_up_local_opins;
+	boolean /*success,*/ is_routable, rip_up_local_opins;
 	float *pin_criticality /* [1..max_pins_per_net-1] */, pres_fac, *sinks, 
 		critical_path_delay, init_timing_criticality_val;
 	t_rt_node **rt_node_of_sink; /* [1..max_pins_per_net-1] */
 	clock_t begin,end;
+	int score;
+	FILE *fp;
+	clock_t begin_net,end_net;
+	int num_heap_popped, total_heap_popped;
+
 	sinks = (float*)my_malloc(sizeof(float) * num_nets);
 	net_index = (int*)my_malloc(sizeof(int) * num_nets);
 
 	for (i = 0; i < num_nets; i++) {
-		sinks[i] = clb_net[i].num_sinks;
+		/* EH: Assign all vcc/gnd nets the lowest priority
+		 * (i.e. routed last) by setting their number of sinks to zero */
+		if (strncmp(clb_net[i].name, "GLOBAL_LOGIC", strlen("GLOBAL_LOGIC")) == 0)
+			sinks[i] = 0;
+		else
+			sinks[i] = clb_net[i].num_sinks;
 		net_index[i] = i;
 	}
 	heapsort(net_index, sinks, num_nets, 1);
@@ -78,6 +93,7 @@ boolean try_timing_driven_route(struct s_router_opts router_opts,
 		init_timing_criticality_val = 0.;
 	}
 
+
 	for (inet = 0; inet < num_nets; inet++) {
 		if (clb_net[inet].is_global == FALSE) {
 			for (ipin = 1; ipin <= clb_net[inet].num_sinks; ipin++)
@@ -98,20 +114,49 @@ boolean try_timing_driven_route(struct s_router_opts router_opts,
 
 	pres_fac = router_opts.first_iter_pres_fac; /* Typically 0 -> ignore cong. */
 
+	available_wirelength = 0;
+	fp = NULL;
+
 	for (itry = 1; itry <= router_opts.max_router_iterations; itry++) {
 		begin = clock();
 		vpr_printf(TIO_MESSAGE_INFO, "\n");
 		vpr_printf(TIO_MESSAGE_INFO, "Routing iteration: %d\n", itry);
 
+#if 0
+		if (getEchoEnabled()) {
+			char fn[128];
+			sprintf(fn, "route_timing_it%04d.echo", itry);
+			fp = my_fopen(fn, "w", 0);
+			setbuf(fp, NULL);
+		}
+#endif
+
+		total_heap_popped = 0;
 		for (i = 0; i < num_nets; i++) {
 			inet = net_index[i];
 			if (clb_net[inet].is_global == FALSE) { /* Skip global nets. */
 
+				begin_net = clock();
+				//vpr_printf(TIO_MESSAGE_INFO, "%d %s:", inet, clb_net[inet].name);
+				//fflush(stdout);
+
 				is_routable = timing_driven_route_net(inet, pres_fac,
 					router_opts.max_criticality,
 					router_opts.criticality_exp, router_opts.astar_fac,
 					router_opts.bend_cost, pin_criticality,
-					sink_order, rt_node_of_sink, net_delay[inet], slacks);
+					sink_order, rt_node_of_sink, net_delay[inet], slacks, 
+					fp, &num_heap_popped, &score);
+				end_net = clock();
+				total_heap_popped += num_heap_popped;
+
+				if (((float)(end_net - begin_net) / CLOCKS_PER_SEC) > 1.) {
+					vpr_printf(TIO_MESSAGE_INFO, "%d/%d: inet %d %s (%d sinks, %d popped, current congestion %d)", i, num_nets, inet, clb_net[inet].name, clb_net[inet].num_sinks, num_heap_popped, score);
+#ifdef CLOCKS_PER_SEC
+					vpr_printf(TIO_MESSAGE_INFO, " took %g seconds.\n", (float)(end_net - begin_net) / CLOCKS_PER_SEC);
+#else
+#error
+#endif
+				}
 
 				/* Impossible to route? (disconnected rr_graph) */
 
@@ -127,20 +172,26 @@ boolean try_timing_driven_route(struct s_router_opts router_opts,
 		}
 
 		if (itry == 1) {
+			int cost_index;
 			/* Early exit code for cases where it is obvious that a successful route will not be found 
 			 Heuristic: If total wirelength used in first routing iteration is X% of total available wirelength, exit
 			 */
-			total_wirelength = 0;
 			available_wirelength = 0;
 
 			for (i = 0; i < num_rr_nodes; i++) {
 				if (rr_node[i].type == CHANX || rr_node[i].type == CHANY) {
-					available_wirelength += 1 + rr_node[i].xhigh
-							- rr_node[i].xlow + rr_node[i].yhigh
-							- rr_node[i].ylow;
+					cost_index = rr_node[i].cost_index;
+					if (cost_index != DEFAULT_COST_INDEX && rr_indexed_data[cost_index].ortho_cost_index != DEFAULT_COST_INDEX
+						&& cost_index != CLOCK_COST_INDEX && rr_indexed_data[cost_index].ortho_cost_index != CLOCK_COST_INDEX) {
+						available_wirelength += 1 + rr_node[i].xhigh
+								- rr_node[i].xlow + rr_node[i].yhigh
+								- rr_node[i].ylow;
+					}
 				}
 			}
-
+		}
+		{
+			total_wirelength = 0;
 			for (inet = 0; inet < num_nets; inet++) {
 				if (clb_net[inet].is_global == FALSE
 						&& clb_net[inet].num_sinks != 0) { /* Globals don't count. */
@@ -150,11 +201,14 @@ boolean try_timing_driven_route(struct s_router_opts router_opts,
 					total_wirelength += wirelength;
 				}
 			}
+		}
+		if (itry == 1)
+		{
 			vpr_printf(TIO_MESSAGE_INFO, "Wire length after first iteration %d, total available wire length %d, ratio %g\n",
 					total_wirelength, available_wirelength,
 					(float) (total_wirelength) / (float) (available_wirelength));
 			if ((float) (total_wirelength) / (float) (available_wirelength)> FIRST_ITER_WIRELENTH_LIMIT) {
-				vpr_printf(TIO_MESSAGE_INFO, "Wire length usage ratio exceeds limit of %g, fail routing.\n",
+				vpr_printf(TIO_MESSAGE_INFO, "Wire length usage ratio exceeds limit of %g\n"/*, fail routing.\n"*/,
 						FIRST_ITER_WIRELENTH_LIMIT);
 				free_timing_driven_route_structs(pin_criticality, sink_order,
 						rt_node_of_sink);
@@ -163,6 +217,13 @@ boolean try_timing_driven_route(struct s_router_opts router_opts,
 				return FALSE;
 			}
 		}
+		else {
+			vpr_printf(TIO_MESSAGE_INFO, "Wire length %d, total available wire length %d, ratio %g\n",
+					total_wirelength, available_wirelength,
+					(float) (total_wirelength) / (float) (available_wirelength));
+		}
+
+		vpr_printf(TIO_MESSAGE_INFO, "Average number of nodes popped per net: %d\n", total_heap_popped / num_nets);
 
 		/* Make sure any CLB OPINs used up by subblocks being hooked directly     *
 		 * to them are reserved for that purpose.                                 */
@@ -178,8 +239,8 @@ boolean try_timing_driven_route(struct s_router_opts router_opts,
 		/* Pathfinder guys quit after finding a feasible route. I may want to keep *
 		 * going longer, trying to improve timing.  Think about this some.         */
 
-		success = feasible_routing();
-		if (success) {
+		score = feasible_routing_score();
+		if (score == 0 /*&& !noReroute*/) {
 			vpr_printf(TIO_MESSAGE_INFO, "Successfully routed after %d routing iterations.\n", itry);
 			free_timing_driven_route_structs(pin_criticality, sink_order, rt_node_of_sink);
 #ifdef DEBUG
@@ -189,6 +250,8 @@ boolean try_timing_driven_route(struct s_router_opts router_opts,
 			free(sinks);
 			return (TRUE);
 		}
+		vpr_printf(TIO_MESSAGE_INFO, "Congestion score: %d\n", score);
+
 
 		if (itry == 1) {
 			pres_fac = router_opts.initial_pres_fac;
@@ -198,7 +261,6 @@ boolean try_timing_driven_route(struct s_router_opts router_opts,
 
 			/* Avoid overflow for high iteration counts, even if acc_cost is big */
 			pres_fac = std::min(pres_fac, static_cast<float>(HUGE_POSITIVE_FLOAT / 1e5));
-
 			pathfinder_update_cost(pres_fac, router_opts.acc_fac);
 		}
 
@@ -240,6 +302,11 @@ boolean try_timing_driven_route(struct s_router_opts router_opts,
 		#endif
 		
 		fflush(stdout);
+
+		if (fp) {
+			fprintf(fp, "\n");
+			fclose(fp);
+		}
 	}
 
 	vpr_printf(TIO_MESSAGE_INFO, "Routing failed.\n");
@@ -307,10 +374,11 @@ static int get_max_pins_per_net(void) {
 boolean timing_driven_route_net(int inet, float pres_fac, float max_criticality,
 		float criticality_exp, float astar_fac, float bend_cost,
 		float *pin_criticality, int *sink_order,
-		t_rt_node ** rt_node_of_sink, float *net_delay, t_slack * slacks) {
+		t_rt_node ** rt_node_of_sink, float *net_delay, t_slack * slacks, 
+		FILE *fp, int *p_num_heap_popped, int *p_score) {
 
 	/* Returns TRUE as long is found some way to hook up this net, even if that *
-	 * way resulted in overuse of resources (congestion).  If there is no way   *
+	 * way resulted in overuse of resources (congestion).  If there is no way   *[MaO
 	 * to route this net, even ignoring congestion, it returns FALSE.  In this  *
 	 * case the rr_graph is disconnected and you can give up. If slacks = NULL, *
 	 * give each net a dummy criticality of 0.									*/
@@ -322,12 +390,27 @@ boolean timing_driven_route_net(int inet, float pres_fac, float max_criticality,
 	struct s_heap *current;
 	struct s_trace *new_route_start_tptr;
 	int highfanout_rlim;
+	//float *exp_cost;
+	float ipin_cost;
+	e_sink_type sink_type;
+	int target_block;
+	int num_heap_popped, score;
 
 	/* Rip-up any old routing. */
 
 	pathfinder_update_one_cost(trace_head[inet], -1, pres_fac);
+
 	free_traceback(inet);
 	
+	/* TODO: STOP BEING LAZY and move both allocations outside */
+	static float *exp_cost = (float*)malloc(num_rr_nodes*sizeof(float));
+	num_heap_popped = 0;
+	score = 0;
+
+	if (fp) {
+		fprintf(fp, "inet %d (%s):\n", inet, clb_net[inet].name);
+	}
+	
 	for (ipin = 1; ipin <= clb_net[inet].num_sinks; ipin++) { 
 		if (!slacks) {
 			/* Use criticality of 1. This makes all nets critical.  Note: There is a big difference between setting pin criticality to 0
@@ -372,31 +455,100 @@ boolean timing_driven_route_net(int inet, float pres_fac, float max_criticality,
 
 	rt_root = init_route_tree_to_source(inet);
 
+	assert(strcmp(FILL_TYPE->name, "SLICEL") == 0);
+
 	for (itarget = 1; itarget <= num_sinks; itarget++) {
 		target_pin = sink_order[itarget];
 		target_node = net_rr_terminals[inet][target_pin];
 
 		target_criticality = pin_criticality[target_pin];
 
+		target_block = clb_net[inet].node_block[target_pin];
+		ipin_cost = 0.;
+		sink_type = SINK_TYPE_NONE;
+		if (block[target_block].type == FILL_TYPE) {
+			int ptc;
+			float ipin_Tdel;
+
+			ptc = clb_net[inet].node_block_pin[target_pin];
+			ptc %= FILL_TYPE->num_pins / FILL_TYPE->capacity;
+			/* Only if [ABCD] LUT */
+			if (ptc / IPINS_PER_BLE <= 3) {
+				switch (ptc % IPINS_PER_BLE) {
+					/* For A1-A6 LUT ipins, use the (best-case) 
+					 * delay of A6 for expected cost calculations */
+					case PTC_SLICEL_A6: 
+					case PTC_SLICEL_A5: 
+					case PTC_SLICEL_A4: 
+					case PTC_SLICEL_A3: 	
+					case PTC_SLICEL_A2: 
+					case PTC_SLICEL_A1: 
+					case PTC_SLICEL_A6_VCCONLY:
+						sink_type = SINK_TYPE_LUT;
+						ipin_Tdel = switch_inf[A6_SWITCH_INDEX].Tdel; 
+						break;
+					case PTC_SLICEL_AX:
+						sink_type = SINK_TYPE_X;
+						ipin_Tdel = switch_inf[BYP_SWITCH_INDEX].Tdel; 
+						break;
+					default: assert(FALSE);
+				}
+
+				switch (sink_type) {
+					case SINK_TYPE_NONE:
+						break;
+					case SINK_TYPE_LUT:
+						ipin_cost = astar_fac * (target_criticality * ipin_Tdel 
+								+ (1.-target_criticality) * rr_indexed_data[DEFAULT_COST_INDEX].base_cost);
+						break;
+					case SINK_TYPE_X:
+						ipin_cost = astar_fac * (target_criticality * ipin_Tdel 
+								+ (1.-target_criticality) * rr_indexed_data[DEFAULT_COST_INDEX].base_cost);
+						break;
+				}
+			}
+		}
+
 		highfanout_rlim = mark_node_expansion_by_bin(inet, target_node,
 				rt_root);
 
+		mark_node_expansion_by_clock(inet, rt_root);
+
 		add_route_tree_to_heap(rt_root, target_node, target_criticality,
-				astar_fac);
+				astar_fac, exp_cost, inet, ipin_cost);
 
 		current = get_heap_head();
+		++num_heap_popped;
 
 		if (current == NULL) { /* Infeasible routing.  No possible path for net. */
 			vpr_printf(TIO_MESSAGE_INFO, "Cannot route net #%d (%s) to sink #%d -- no possible path.\n",
 					   inet, clb_net[inet].name, itarget);
 			reset_path_costs();
 			free_route_tree(rt_root);
+			if (p_num_heap_popped) *p_num_heap_popped = num_heap_popped;
+			if (p_score) *p_score = score;
 			return (FALSE);
 		}
 
 		inode = current->index;
 
+		if (fp) {
+			fprintf(fp, "%d (%d,%d,%d):", target_pin, rr_node[target_node].xlow, rr_node[target_node].ylow,
+					rr_node[target_node].ptc_num);
+		}
+
 		while (inode != target_node) {
+			if (fp) {
+				if (rr_node[inode].type == CHANX || rr_node[inode].type == CHANY) {
+					fprintf(fp, " (%d,%d,%d@%d)", rr_node[inode].xlow, rr_node[inode].ylow, 
+							rr_node[inode].ptc_num, rr_node[inode].net_num);
+				}
+				else {
+					fprintf(fp, " (%d,%d,%d)", rr_node[inode].xlow, rr_node[inode].ylow, 
+							rr_node[inode].ptc_num);
+				}
+			}
+
 			old_tcost = rr_node_route_inf[inode].path_cost;
 			new_tcost = current->cost;
 
@@ -426,22 +578,30 @@ boolean timing_driven_route_net(int inet, float pres_fac, float max_criticality,
 
 				timing_driven_expand_neighbours(current, inet, bend_cost,
 						target_criticality, target_node, astar_fac,
-						highfanout_rlim);
+						highfanout_rlim, ipin_cost, sink_type);
 			}
 
 			free_heap_data(current);
 			current = get_heap_head();
+			++num_heap_popped;
 
 			if (current == NULL) { /* Impossible routing.  No path for net. */
 				vpr_printf(TIO_MESSAGE_INFO, "Cannot route net #%d (%s) to sink #%d -- no possible path.\n",
 						 inet, clb_net[inet].name, itarget);
 				reset_path_costs();
 				free_route_tree(rt_root);
+				if (fp) fclose(fp);
+				asm("int3");
+				if (p_num_heap_popped) *p_num_heap_popped = num_heap_popped;
+				if (p_score) *p_score = score;
 				return (FALSE);
 			}
 
 			inode = current->index;
 		}
+		if (fp) {
+			fprintf(fp, "\n");
+		}
 
 		/* NB:  In the code below I keep two records of the partial routing:  the   *
 		 * traceback and the route_tree.  The route_tree enables fast recomputation *
@@ -455,7 +615,7 @@ boolean timing_driven_route_net(int inet, float pres_fac, float max_criticality,
 		new_route_start_tptr = update_traceback(current, inet);
 		rt_node_of_sink[target_pin] = update_route_tree(current);
 		free_heap_data(current);
-		pathfinder_update_one_cost(new_route_start_tptr, 1, pres_fac);
+		score = pathfinder_update_one_cost(new_route_start_tptr, 1, pres_fac);
 
 		empty_heap();
 		reset_path_costs();
@@ -465,11 +625,15 @@ boolean timing_driven_route_net(int inet, float pres_fac, float max_criticality,
 
 	update_net_delays_from_route_tree(net_delay, rt_node_of_sink, inet);
 	free_route_tree(rt_root);
+
+	//free(exp_cost);
+	if (p_num_heap_popped) *p_num_heap_popped = num_heap_popped;
+	if (p_score) *p_score = score;
 	return (TRUE);
 }
 
 static void add_route_tree_to_heap(t_rt_node * rt_node, int target_node,
-		float target_criticality, float astar_fac) {
+		float target_criticality, float astar_fac, float *exp_cost, int inet, float ipin_cost) {
 
 	/* Puts the entire partial routing below and including rt_node onto the heap *
 	 * (except for those parts marked as not to be expanded) by calling itself   *
@@ -479,6 +643,8 @@ static void add_route_tree_to_heap(t_rt_node * rt_node, int target_node,
 	t_rt_node *child_node;
 	t_linked_rt_edge *linked_rt_edge;
 	float tot_cost, backward_path_cost, R_upstream;
+	int from_node;
+	int cost_index;
 
 	/* Pre-order depth-first traversal */
 
@@ -486,10 +652,28 @@ static void add_route_tree_to_heap(t_rt_node * rt_node, int target_node,
 		inode = rt_node->inode;
 		backward_path_cost = target_criticality * rt_node->Tdel;
 		R_upstream = rt_node->R_upstream;
-		tot_cost = backward_path_cost
-				+ astar_fac
+		if (rt_node->parent_node)
+			from_node = rt_node->parent_node->inode;
+		else
+			from_node = OPEN;
+
+		/* EH: If not a wire node, then inherit cost from
+		 * previous node */
+		cost_index = rr_node[inode].cost_index;
+		if (cost_index == DEFAULT_COST_INDEX 
+			|| rr_indexed_data[cost_index].ortho_cost_index == DEFAULT_COST_INDEX) {
+			assert(from_node != OPEN);
+			exp_cost[inode] = exp_cost[from_node];
+		}
+		else 
+		{
+			exp_cost[inode] = astar_fac
 						* get_timing_driven_expected_cost(inode, target_node,
-								target_criticality, R_upstream);
+							target_criticality, R_upstream);
+			if (rr_node[inode].type == CHANX || rr_node[inode].type == CHANY)
+				exp_cost[inode] += ipin_cost;
+		}
+		tot_cost = backward_path_cost + exp_cost[inode];
 		node_to_heap(inode, tot_cost, NO_PREVIOUS, NO_PREVIOUS,
 				backward_path_cost, R_upstream);
 	}
@@ -499,14 +683,15 @@ static void add_route_tree_to_heap(t_rt_node * rt_node, int target_node,
 	while (linked_rt_edge != NULL) {
 		child_node = linked_rt_edge->child;
 		add_route_tree_to_heap(child_node, target_node, target_criticality,
-				astar_fac);
+				astar_fac, exp_cost, inet, ipin_cost);
 		linked_rt_edge = linked_rt_edge->next;
 	}
 }
 
 static void timing_driven_expand_neighbours(struct s_heap *current, int inet,
 		float bend_cost, float criticality_fac, int target_node,
-		float astar_fac, int highfanout_rlim) {
+		float astar_fac, int highfanout_rlim, 
+		float ipin_cost, e_sink_type sink_type) {
 
 	/* Puts all the rr_nodes adjacent to current on the heap.  rr_nodes outside *
 	 * the expanded bounding box specified in route_bb are not added to the     *
@@ -516,6 +701,9 @@ static void timing_driven_expand_neighbours(struct s_heap *current, int inet,
 	t_rr_type from_type, to_type;
 	float new_tot_cost, old_back_pcost, new_back_pcost, R_upstream;
 	float new_R_upstream, Tdel;
+	int cost_index;
+	float old_tot_cost, old_exp_cost;
+	bool to_overlaps_target;
 
 	inode = current->index;
 	old_back_pcost = current->backward_path_cost;
@@ -525,9 +713,18 @@ static void timing_driven_expand_neighbours(struct s_heap *current, int inet,
 	target_x = rr_node[target_node].xhigh;
 	target_y = rr_node[target_node].yhigh;
 
+	old_tot_cost = current->cost;
+	old_exp_cost = old_tot_cost - old_back_pcost;
+
 	for (iconn = 0; iconn < num_edges; iconn++) {
 		to_node = rr_node[inode].edges[iconn];
 
+		/* EH: Check if this node is being reserved
+		 * for a particular net */
+		if (rr_node_route_inf[to_node].reserved_for != OPEN
+				&& rr_node_route_inf[to_node].reserved_for != inet)
+			continue;
+
 		if (rr_node[to_node].xhigh < route_bb[inet].xmin
 				|| rr_node[to_node].xlow > route_bb[inet].xmax
 				|| rr_node[to_node].yhigh < route_bb[inet].ymin
@@ -542,17 +739,51 @@ static void timing_driven_expand_neighbours(struct s_heap *current, int inet,
 				continue; /* Node is outside high fanout bin. */
 		}
 
+
 		/* Prune away IPINs that lead to blocks other than the target one.  Avoids  *
 		 * the issue of how to cost them properly so they don't get expanded before *
 		 * more promising routes, but makes route-throughs (via CLBs) impossible.   *
 		 * Change this if you want to investigate route-throughs.                   */
-
 		to_type = rr_node[to_node].type;
 		if (to_type == IPIN
 				&& (rr_node[to_node].xhigh != target_x
 						|| rr_node[to_node].yhigh != target_y))
 			continue;
 
+		iswitch = rr_node[inode].switches[iconn];
+		to_overlaps_target = (rr_node[to_node].xlow == target_x && rr_node[to_node].ylow == target_y);
+		switch(iswitch) {
+			case OPEN: 
+				continue;
+			/* EH: Do not allow use of BYP and FANs unless
+			 * at target area, +/- 1 row 
+			 * (because in the V6 architecture, BYP/FAN nodes can 
+			 * bounce to ipins in row above/below) */
+			case BYP_SWITCH_INDEX:
+			case FAN_SWITCH_INDEX:
+				if (rr_node[to_node].xlow > target_x
+						|| rr_node[to_node].xhigh < target_x
+						|| rr_node[to_node].ylow > rr_node[target_node].yhigh + 1
+						|| rr_node[to_node].yhigh < rr_node[target_node].ylow - 1)
+					continue;
+				break;
+			/* EH: Do not consider route-throughs within the target area */
+			/* (but what if I accidentally RT through another target's LUT?) */
+			case LUT_SWITCH_INDEX:
+				if (to_overlaps_target)
+					continue;
+				break;
+			/* EH: Do not go from a clock resource to a non-clock resource
+			 * unless at the target node tile */
+			case CLK2GEN_SWITCH_INDEX:
+				if (!to_overlaps_target)
+					continue;
+				break;
+			/* EH: Do not go from a non-clock resource to a clock resource */
+			case GEN2CLK_SWITCH_INDEX:
+				assert(FALSE);
+		}
+
 		/* new_back_pcost stores the "known" part of the cost to this node -- the   *
 		 * congestion cost of all the routing resources back to the existing route  *
 		 * plus the known delay of the total path back to the source.  new_tot_cost *
@@ -561,7 +792,6 @@ static void timing_driven_expand_neighbours(struct s_heap *current, int inet,
 		new_back_pcost = old_back_pcost
 				+ (1. - criticality_fac) * get_rr_cong_cost(to_node);
 
-		iswitch = rr_node[inode].switches[iconn];
 		if (switch_inf[iswitch].buffered) {
 			new_R_upstream = switch_inf[iswitch].R;
 		} else {
@@ -581,10 +811,53 @@ static void timing_driven_expand_neighbours(struct s_heap *current, int inet,
 				new_back_pcost += bend_cost;
 		}
 
-		new_tot_cost = new_back_pcost
+		cost_index = rr_node[to_node].cost_index;
+		/* EH: If it's not a wire, use the old expected cost (instead of computing
+		 * a new expected cost), because we haven't moved anywhere */
+		if (cost_index == DEFAULT_COST_INDEX 
+			|| rr_indexed_data[cost_index].ortho_cost_index == DEFAULT_COST_INDEX) {
+			new_tot_cost = new_back_pcost + old_exp_cost;
+
+			/* If at target location */
+			if (to_overlaps_target) {
+				switch (sink_type) {
+					case SINK_TYPE_LUT: 
+						/* Give a discount if going into any LUT input */
+						if (iswitch >= A6_SWITCH_INDEX && iswitch <= A1_SWITCH_INDEX)
+							new_tot_cost -= ipin_cost;
+						/* But if the RT path is taken, add cost back */
+						else if (iswitch == LUT_SWITCH_INDEX) {
+							/* No RTs allowed in target area */
+#if defined(__x86_64__)
+							asm("int3");
+#endif
+							new_tot_cost += ipin_cost;
+						}
+						break;
+					case SINK_TYPE_X:
+					      /* Discount if going into a BYP[0-7] */
+					      if (iswitch == BYP_SWITCH_INDEX)
+						      new_tot_cost -= ipin_cost;
+					      /* But restore if not going to BYP_B[0-7] 
+					       * (which then leads to the [ABCD]X input) */
+					      else if (iswitch != BYP_B_SWITCH_INDEX)
+						      new_tot_cost += ipin_cost;
+					      break;
+					default: break;
+				}
+			}
+		}
+		else {
+			new_tot_cost = new_back_pcost
 				+ astar_fac
-						* get_timing_driven_expected_cost(to_node, target_node,
-								criticality_fac, new_R_upstream);
+					* get_timing_driven_expected_cost(to_node, target_node,
+						criticality_fac, new_R_upstream, inet);
+
+			if (sink_type != SINK_TYPE_NONE
+					&& (to_type == CHANX || to_type == CHANY)) {
+				new_tot_cost += ipin_cost;
+			}
+		}
 
 		node_to_heap(to_node, new_tot_cost, inode, iconn, new_back_pcost,
 				new_R_upstream);
@@ -606,35 +879,50 @@ static float get_timing_driven_expected_cost(int inode, int target_node,
 	rr_type = rr_node[inode].type;
 
 	if (rr_type == CHANX || rr_type == CHANY) {
-		num_segs_same_dir = get_expected_segs_to_target(inode, target_node,
-				&num_segs_ortho_dir);
 		cost_index = rr_node[inode].cost_index;
 		ortho_cost_index = rr_indexed_data[cost_index].ortho_cost_index;
 
+		assert(!(cost_index == DEFAULT_COST_INDEX || ortho_cost_index == DEFAULT_COST_INDEX));
+
+		/* EH: If its a clock wire, give it a cost the same as L1 
+		 * so that get_expected_segs_to_target() works */
+		if (cost_index == CLOCK_COST_INDEX) {
+			cost_index = L1_COST_INDEX;
+			ortho_cost_index = rr_indexed_data[L1_COST_INDEX].ortho_cost_index;
+		}
+		else if (ortho_cost_index == CLOCK_COST_INDEX) {
+			cost_index = rr_indexed_data[L1_COST_INDEX].ortho_cost_index;
+			ortho_cost_index = L1_COST_INDEX;
+		}
+
+		num_segs_same_dir = get_expected_segs_to_target(inode, target_node,
+			&num_segs_ortho_dir);
+
 		cong_cost = num_segs_same_dir * rr_indexed_data[cost_index].base_cost
 				+ num_segs_ortho_dir
-						* rr_indexed_data[ortho_cost_index].base_cost;
+					* rr_indexed_data[ortho_cost_index].base_cost;
 		cong_cost += rr_indexed_data[IPIN_COST_INDEX].base_cost
 				+ rr_indexed_data[SINK_COST_INDEX].base_cost;
 
 		Tdel =
-				num_segs_same_dir * rr_indexed_data[cost_index].T_linear
-						+ num_segs_ortho_dir
-								* rr_indexed_data[ortho_cost_index].T_linear
-						+ num_segs_same_dir * num_segs_same_dir
-								* rr_indexed_data[cost_index].T_quadratic
-						+ num_segs_ortho_dir * num_segs_ortho_dir
-								* rr_indexed_data[ortho_cost_index].T_quadratic
-						+ R_upstream
-								* (num_segs_same_dir
-										* rr_indexed_data[cost_index].C_load
-										+ num_segs_ortho_dir
-												* rr_indexed_data[ortho_cost_index].C_load);
-
+			num_segs_same_dir * rr_indexed_data[cost_index].T_linear
+					+ num_segs_ortho_dir
+							* rr_indexed_data[ortho_cost_index].T_linear
+					+ num_segs_same_dir * num_segs_same_dir
+							* rr_indexed_data[cost_index].T_quadratic
+					+ num_segs_ortho_dir * num_segs_ortho_dir
+							* rr_indexed_data[ortho_cost_index].T_quadratic
+					+ R_upstream
+							* (num_segs_same_dir
+									* rr_indexed_data[cost_index].C_load
+									+ num_segs_ortho_dir
+											* rr_indexed_data[ortho_cost_index].C_load);
 		Tdel += rr_indexed_data[IPIN_COST_INDEX].T_linear;
 
 		expected_cost = criticality_fac * Tdel
 				+ (1. - criticality_fac) * cong_cost;
+		
+		//assert(expected_cost >= 0.);
 		return (expected_cost);
 	}
 
@@ -661,7 +949,7 @@ static int get_expected_segs_to_target(int inode, int target_node,
 
 	t_rr_type rr_type;
 	int target_x, target_y, num_segs_same_dir, cost_index, ortho_cost_index;
-	int no_need_to_pass_by_clb;
+	/*int no_need_to_pass_by_clb;*/
 	float inv_length, ortho_inv_length, ylow, yhigh, xlow, xhigh;
 
 	target_x = rr_node[target_node].xlow;
@@ -673,6 +961,7 @@ static int get_expected_segs_to_target(int inode, int target_node,
 	rr_type = rr_node[inode].type;
 
 	if (rr_type == CHANX) {
+		yhigh = rr_node[inode].yhigh;
 		ylow = rr_node[inode].ylow;
 		xhigh = rr_node[inode].xhigh;
 		xlow = rr_node[inode].xlow;
@@ -681,57 +970,57 @@ static int get_expected_segs_to_target(int inode, int target_node,
 
 		if (ylow > target_y) { /* Coming from a row above target? */
 			*num_segs_ortho_dir_ptr =
-					(int)(ROUND_UP((ylow - target_y + 1.) * ortho_inv_length));
-			no_need_to_pass_by_clb = 1;
-		} else if (ylow < target_y - 1) { /* Below the CLB bottom? */
+					(int)(ROUND_UP((ylow - target_y /*+ 1.*/) * ortho_inv_length));
+			/*no_need_to_pass_by_clb = 1;*/
+		} else if (ylow < target_y /*- 1*/) { /* Below the CLB bottom? */
 			*num_segs_ortho_dir_ptr = (int)(ROUND_UP((target_y - ylow) *
-					ortho_inv_length));
-			no_need_to_pass_by_clb = 1;
+						ortho_inv_length));
+			/*no_need_to_pass_by_clb = 1;*/
 		} else { /* In a row that passes by target CLB */
 			*num_segs_ortho_dir_ptr = 0;
-			no_need_to_pass_by_clb = 0;
+			/*no_need_to_pass_by_clb = 0;*/
 		}
 
 		/* Now count horizontal (same dir. as inode) segs. */
 
-		if (xlow > target_x + no_need_to_pass_by_clb) {
-			num_segs_same_dir = (int)(ROUND_UP((xlow - no_need_to_pass_by_clb -
+		if (xlow > target_x /*+ no_need_to_pass_by_clb*/) {
+			num_segs_same_dir = (int)(ROUND_UP((xlow /*- no_need_to_pass_by_clb*/ -
 							target_x) * inv_length));
-		} else if (xhigh < target_x - no_need_to_pass_by_clb) {
-			num_segs_same_dir = (int)(ROUND_UP((target_x - no_need_to_pass_by_clb -
+		} else if (xhigh < target_x /*- no_need_to_pass_by_clb*/) {
+			num_segs_same_dir = (int)(ROUND_UP((target_x /*- no_need_to_pass_by_clb*/ -
 							xhigh) * inv_length));
 		} else {
 			num_segs_same_dir = 0;
 		}
 	}
-
 	else { /* inode is a CHANY */
 		ylow = rr_node[inode].ylow;
 		yhigh = rr_node[inode].yhigh;
 		xlow = rr_node[inode].xlow;
+		xhigh = rr_node[inode].xhigh;
 
 		/* Count horizontal (orthogonal to inode) segs first. */
 
 		if (xlow > target_x) { /* Coming from a column right of target? */
 			*num_segs_ortho_dir_ptr = (int)(
-					ROUND_UP((xlow - target_x + 1.) * ortho_inv_length));
-			no_need_to_pass_by_clb = 1;
-		} else if (xlow < target_x - 1) { /* Left of and not adjacent to the CLB? */
+					ROUND_UP((xlow - target_x /*+ 1.*/) * ortho_inv_length));
+			/*no_need_to_pass_by_clb = 1;*/
+		} else if (xlow < target_x /*- 1*/) { /* Left of and not adjacent to the CLB? */
 			*num_segs_ortho_dir_ptr = (int)(ROUND_UP((target_x - xlow) *
 					ortho_inv_length));
-			no_need_to_pass_by_clb = 1;
+			/*no_need_to_pass_by_clb = 1;*/
 		} else { /* In a column that passes by target CLB */
 			*num_segs_ortho_dir_ptr = 0;
-			no_need_to_pass_by_clb = 0;
+			/*no_need_to_pass_by_clb = 0;*/
 		}
 
 		/* Now count vertical (same dir. as inode) segs. */
 
-		if (ylow > target_y + no_need_to_pass_by_clb) {
-			num_segs_same_dir = (int)(ROUND_UP((ylow - no_need_to_pass_by_clb -
+		if (ylow > target_y /*+ no_need_to_pass_by_clb*/) {
+			num_segs_same_dir = (int)(ROUND_UP((ylow /*- no_need_to_pass_by_clb*/ -
 							target_y) * inv_length));
-		} else if (yhigh < target_y - no_need_to_pass_by_clb) {
-			num_segs_same_dir = (int)(ROUND_UP((target_y - no_need_to_pass_by_clb -
+		} else if (yhigh < target_y /*- no_need_to_pass_by_clb*/) {
+			num_segs_same_dir = (int)(ROUND_UP((target_y /*- no_need_to_pass_by_clb*/ -
 							yhigh) * inv_length));
 		} else {
 			num_segs_same_dir = 0;
@@ -775,6 +1064,7 @@ static int mark_node_expansion_by_bin(int inet, int target_node,
 	boolean success;
 	t_linked_rt_edge *linked_rt_edge;
 	t_rt_node * child_node;
+	int iblk;
 
 	target_x = rr_node[target_node].xlow;
 	target_y = rr_node[target_node].ylow;
@@ -784,6 +1074,13 @@ static int mark_node_expansion_by_bin(int inet, int target_node,
 		return 1;
 	}
 
+	/* EH: For BUFG nets, do not do any bounding box-ing
+	 * by setting rlim to the whole chip */
+	iblk = clb_net[inet].node_block[0];
+	assert(iblk != OPEN);
+	if (strcmp(block[iblk].type->name, "BUFG") == 0)
+		return std::max(nx, ny);
+
 	area = (route_bb[inet].xmax - route_bb[inet].xmin)
 			* (route_bb[inet].ymax - route_bb[inet].ymin);
 	if (area <= 0) {
@@ -874,7 +1171,7 @@ static void timing_driven_check_net_delays(float **net_delay) {
 		for (ipin = 1; ipin <= clb_net[inet].num_sinks; ipin++) {
 			if (net_delay_check[inet][ipin] == 0.) { /* Should be only GLOBAL nets */
 				if (fabs(net_delay[inet][ipin]) > ERROR_TOL) {
-					vpr_printf(TIO_MESSAGE_ERROR, "in timing_driven_check_net_delays: net %d pin %d.\n",
+					vpr_printf(TIO_MESSAGE_ERROR, "in timing_driven_check_net_delays: net %d (pin %d.\n",
 							inet, ipin);
 					vpr_printf(TIO_MESSAGE_ERROR, "\tIncremental calc. net_delay is %g, but from scratch net delay is %g.\n",
 							net_delay[inet][ipin], net_delay_check[inet][ipin]);
@@ -886,7 +1183,7 @@ static void timing_driven_check_net_delays(float **net_delay) {
 							inet, ipin);
 					vpr_printf(TIO_MESSAGE_ERROR, "\tIncremental calc. net_delay is %g, but from scratch net delay is %g.\n",
 							net_delay[inet][ipin], net_delay_check[inet][ipin]);
-					exit(1);
+					/*exit(1);*/
 				}
 			}
 		}
@@ -895,3 +1192,29 @@ static void timing_driven_check_net_delays(float **net_delay) {
 	free_net_delay(net_delay_check, &list_head_net_delay_check_ch);
 	vpr_printf(TIO_MESSAGE_INFO, "Completed net delay value cross check successfully.\n");
 }
+
+/* EH */
+static void
+mark_node_expansion_by_clock(int inet, t_rt_node * rt_node) {
+	int iblk;
+	t_linked_rt_edge *linked_rt_edge;
+	t_rt_node * child_node;
+	short iswitch;
+
+	iblk = clb_net[inet].node_block[0];
+	assert(iblk != OPEN);
+	if (strcmp(block[iblk].type->name, "BUFG") != 0)
+		return;
+
+	linked_rt_edge = rt_node->u.child_list;
+	while (linked_rt_edge != NULL) {
+		child_node = linked_rt_edge->child;
+		iswitch = linked_rt_edge->iswitch;
+		if (iswitch == CLK2GEN_SWITCH_INDEX) {
+			child_node->re_expand = FALSE;
+		}
+		linked_rt_edge = linked_rt_edge->next;
+	}
+}
+
+
diff --git vpr/SRC/route/route_timing.h vpr/SRC/route/route_timing.h
index d6f6192..77bff10 100755
--- vpr/SRC/route/route_timing.h
+++ vpr/SRC/route/route_timing.h
@@ -4,8 +4,11 @@ boolean try_timing_driven_route(struct s_router_opts router_opts,
 boolean timing_driven_route_net(int inet, float pres_fac, float max_criticality,
 		float criticality_exp, float astar_fac, float bend_cost,
 		float *pin_criticality, int *sink_order, t_rt_node ** rt_node_of_sink, 
-		float *net_delay, t_slack * slacks);
+		float *net_delay, t_slack * slacks, 
+		FILE *fp, int *p_num_heap_popped, int *p_score);
 void alloc_timing_driven_route_structs(float **pin_criticality_ptr,
 		int **sink_order_ptr, t_rt_node *** rt_node_of_sink_ptr);
 void free_timing_driven_route_structs(float *pin_criticality, int *sink_order,
 		t_rt_node ** rt_node_of_sink);
+
+enum e_sink_type { SINK_TYPE_NONE, SINK_TYPE_LUT, SINK_TYPE_X };
diff --git vpr/SRC/route/rr_graph.c vpr/SRC/route/rr_graph.c
index c7efdc3..ff96cb7 100755
--- vpr/SRC/route/rr_graph.c
+++ vpr/SRC/route/rr_graph.c
@@ -2,6 +2,7 @@
 #include <math.h>
 #include <assert.h>
 #include <string.h>
+#include <zlib.h>
 #include "util.h"
 #include "vpr_types.h"
 #include "globals.h"
@@ -42,6 +43,19 @@ typedef struct s_clb_to_clb_directs {
 	int to_clb_pin_end_index;
 } t_clb_to_clb_directs;
 
+static void
+print_rr_node_noedges(FILE * fp,
+		t_rr_node *node,
+		int *edge_length);
+
+static void
+print_rr_node_justedges(FILE * fp,
+		t_rr_node node,
+		int *edge_length);
+
+static void
+dump_rr_graph_vtb(INP const char *arch_file);
+
 /* UDSD Modifications by WMF End */
 
 /******************* Variables local to this module. ***********************/
@@ -147,6 +161,8 @@ static void alloc_and_load_rr_clb_source(t_ivec *** L_rr_node_indices);
 
 static t_clb_to_clb_directs *alloc_and_load_clb_to_clb_directs(INP t_direct_inf *directs, INP int num_directs);
 
+static void load_rr_graph(const char *arch_file);
+
 #if 0
 static void load_uniform_opin_switch_pattern_paired(INP int *Fc_out,
 		INP int num_pins,
@@ -198,7 +214,8 @@ void build_rr_graph(INP t_graph_type graph_type, INP int L_num_types,
 		INP int global_route_switch, INP int delayless_switch,
 		INP t_timing_inf timing_inf, INP int wire_to_ipin_switch,
 		INP enum e_base_cost_type base_cost_type, INP t_direct_inf *directs, 
-		INP int num_directs, INP boolean ignore_Fc_0, OUTP int *Warnings) {
+		INP int num_directs, INP boolean ignore_Fc_0, INP const char *arch_file,
+		OUTP int *Warnings) {
 	/* Temp structures used to build graph */
 	int nodes_per_chan, i, j;
 	t_seg_details *seg_details = NULL;
@@ -424,10 +441,20 @@ void build_rr_graph(INP t_graph_type graph_type, INP int L_num_types,
 	rr_graph_externals(timing_inf, segment_inf, num_seg_types, nodes_per_chan,
 			wire_to_ipin_switch, base_cost_type);
 	if (getEchoEnabled() && isEchoFileEnabled(E_ECHO_RR_GRAPH)) {
-		dump_rr_graph(getEchoFileName(E_ECHO_RR_GRAPH));
+		//dump_rr_graph(getEchoFileName(E_ECHO_RR_GRAPH));
 	} else
 		;
 
+	if (getDumpVtbEnabled()) {
+		dump_rr_graph_vtb(arch_file);
+		vpr_printf(TIO_MESSAGE_INFO, "Successfully dumped RRG for VTB.\n");
+		vpr_printf(TIO_MESSAGE_INFO, "Exiting!\n");
+		vpr_printf(TIO_MESSAGE_INFO, "\n");
+		exit(0);
+	}
+
+	load_rr_graph(arch_file);
+
 	check_rr_graph(graph_type, types, L_nx, L_ny, nodes_per_chan, Fs,
 			num_seg_types, num_switches, segment_inf, global_route_switch,
 			delayless_switch, wire_to_ipin_switch, seg_details, Fc_in, Fc_out,
@@ -815,6 +842,7 @@ void free_rr_graph(void) {
 	if(net_rr_terminals != NULL) {
 		free(net_rr_terminals);
 	}
+#if 0
 	for (i = 0; i < num_rr_nodes; i++) {
 		if (rr_node[i].edges != NULL) {
 			free(rr_node[i].edges);
@@ -823,6 +851,8 @@ void free_rr_graph(void) {
 			free(rr_node[i].switches);
 		}
 	}
+#endif
+	free(rr_node[0].edges);
 
 	assert(rr_node_indices);
 	free_rr_node_indices(rr_node_indices);
@@ -863,6 +893,8 @@ void load_net_rr_terminals(t_ivec *** L_rr_node_indices) {
 	t_type_ptr type;
 
 	for (inet = 0; inet < num_nets; inet++) {
+		/* EH: Skip for global nets */
+		if (clb_net[inet].is_global) continue;
 		for (ipin = 0; ipin <= clb_net[inet].num_sinks; ipin++) {
 			iblk = clb_net[inet].node_block[ipin];
 			i = block[iblk].x;
@@ -943,6 +975,9 @@ static void build_rr_sinks_sources(INP int i, INP int j,
 		return;
 
 	type = L_grid[i][j].type;
+	/* EH: Do not build sources/sinks for EMPTY grid pos */
+	if (type == EMPTY_TYPE)
+		return;
 	num_class = type->num_class;
 	class_inf = type->class_inf;
 	num_pins = type->num_pins;
@@ -1194,11 +1229,15 @@ static void build_rr_xchan(INP int i, INP int j,
 		length = iend - istart + 1;
 		L_rr_node[inode].R = length * seg_details[itrack].Rmetal;
 		L_rr_node[inode].C = length * seg_details[itrack].Cmetal;
+		assert(L_rr_node[inode].R == length * seg_details[itrack].Rmetal);
+		assert(L_rr_node[inode].C == length * seg_details[itrack].Cmetal);
+
 
 		L_rr_node[inode].ptc_num = itrack;
 		L_rr_node[inode].type = CHANX;
 		L_rr_node[inode].direction = seg_details[itrack].direction;
 		L_rr_node[inode].drivers = seg_details[itrack].drivers;
+		assert(L_rr_node[inode].drivers == seg_details[itrack].drivers);
 	}
 }
 
@@ -1287,11 +1326,14 @@ static void build_rr_ychan(INP int i, INP int j,
 		length = iend - istart + 1;
 		L_rr_node[inode].R = length * seg_details[itrack].Rmetal;
 		L_rr_node[inode].C = length * seg_details[itrack].Cmetal;
+		assert(L_rr_node[inode].R == length * seg_details[itrack].Rmetal);
+		assert(L_rr_node[inode].C == length * seg_details[itrack].Cmetal);
 
 		L_rr_node[inode].ptc_num = itrack;
 		L_rr_node[inode].type = CHANY;
 		L_rr_node[inode].direction = seg_details[itrack].direction;
 		L_rr_node[inode].drivers = seg_details[itrack].drivers;
+		assert(L_rr_node[inode].drivers == seg_details[itrack].drivers);
 	}
 }
 
@@ -1682,12 +1724,13 @@ static void check_all_tracks_reach_pins(t_type_ptr type,
 		}
 	}
 
+	/* EH: Suppressed for Xilinx RRG
 	for (itrack = 0; itrack < nodes_per_chan; itrack++) {
 		if (num_conns_to_track[itrack] <= 0) {
 			vpr_printf(TIO_MESSAGE_ERROR, "check_all_tracks_reach_pins: Track %d does not connect to any CLB %ss.\n", 
 				itrack, (ipin_or_opin == DRIVER ? "OPIN" : "IPIN"));
 		}
-	}
+	}*/
 
 	free(num_conns_to_track);
 }
@@ -1782,6 +1825,105 @@ alloc_and_load_track_to_pin_lookup(INP int ****pin_to_track_map, INP int *Fc,
 	return track_to_pin_lookup;
 }
 
+/* Prints all the data about node inode to file fp.                    */
+static void
+print_rr_node_noedges(FILE * fp,
+		t_rr_node *node,
+		int *edge_length)
+{
+	/* For all OPINs, override and write-out one (dummy) outgoing edge */
+	if (node->type == OPIN) {
+		if (node->num_edges == 0) {
+			assert(node->edges == NULL);
+			node->edges = (int*)malloc(sizeof(int));
+			assert(node->switches == NULL);
+			node->switches = (short*)malloc(sizeof(short));
+		}
+		node->num_edges = 0;
+		//node->edges[0] = OPEN;
+		//node->switches[0] = OPEN;
+	}
+
+	//assert(node.pb_graph_pin == NULL);
+	assert(node->tnode == NULL);
+	fwrite(node, sizeof(t_rr_node), 1, fp);
+}
+
+static void
+print_rr_node_justedges(FILE * fp,
+		t_rr_node node,
+		int *edge_length)
+{
+	fwrite(node.edges, sizeof(int), node.num_edges, fp);
+	fwrite(node.switches, sizeof(short), node.num_edges, fp);
+	*edge_length += (sizeof(int)+sizeof(short)) * node.num_edges;
+}
+
+static void
+dump_rr_graph_vtb(INP const char *arch_file)
+{
+
+	int size, inode, num_nodes;
+	int edge_length;
+	FILE *fp;
+
+	char *file_name = (char*)malloc(strlen(arch_file)+1);
+	strcpy(file_name, arch_file);
+	strcpy(file_name+strlen(arch_file)-3, "vpr");
+
+	fp = my_fopen(file_name, "wb", 0);
+	assert(fp); 
+	free(file_name);
+
+	/* Size of an RR node */
+	size = sizeof(t_rr_node);
+	fwrite(&size, sizeof(int), 1, fp);
+	/* Number of nodes */
+	fwrite(&inode, sizeof(int), 1, fp);
+	/* Size of edge/switch data */
+	fwrite(&inode, sizeof(int), 1, fp);
+
+	num_nodes = 0;
+	bool chan = false;
+	for(inode = 0; inode < num_rr_nodes; inode++)
+	{
+		t_rr_type rr_type;
+		rr_type = rr_node[inode].type;
+
+		if (rr_type == SOURCE || rr_type == SINK || rr_type == IPIN || rr_type == OPIN) 
+		{
+			assert(!chan);
+			print_rr_node_noedges(fp, &rr_node[inode], &edge_length);
+			num_nodes++;
+		}
+		else
+		{
+			chan = true;
+			//break;
+		}
+	}
+
+	edge_length = 0;
+	for(inode = 0; inode < num_nodes; inode++)
+	{
+		print_rr_node_justedges(fp, rr_node[inode], &edge_length);
+	}
+
+	for(inode = 0; inode < num_nodes; inode++)
+	{
+		const int x = rr_node[inode].xlow;
+		const int y = rr_node[inode].ylow;
+		//const t_type_ptr type = grid[x][y].type;
+		fwrite(&grid[x][y].type->index, sizeof(int), 1, fp);
+	}
+
+	fseek(fp, sizeof(int), SEEK_SET);
+	fwrite(&num_nodes, sizeof(int), 1, fp);
+	fwrite(&edge_length, sizeof(int), 1, fp);
+
+	fclose(fp);
+}
+
 /* A utility routine to dump the contents of the routing resource graph   *
  * (everything -- connectivity, occupancy, cost, etc.) into a file.  Used *
  * only for debugging.                                                    */
@@ -1799,7 +1941,6 @@ void dump_rr_graph(INP const char *file_name) {
 
 #if 0
 	fprintf(fp, "\n\n%d rr_indexed_data entries.\n\n", num_rr_indexed_data);
-
 	for (index = 0; index < num_rr_indexed_data; index++)
 	{
 		print_rr_indexed_data(fp, index);
@@ -2691,10 +2832,12 @@ static int get_opin_direct_connecions(int x, int y, int opin, INOUTP t_linked_ed
 			if(max_index >= opin && min_index <= opin) {
 				offset = opin - min_index;
 				/* This opin is specified to connect directly to an ipin, now compute which ipin to connect to */
+
 				if(x + directs[i].x_offset < nx + 1 &&
 				   x + directs[i].x_offset > 0 &&
 				   y + directs[i].y_offset < ny + 1 &&
-				   y + directs[i].y_offset > 0) {
+				   y + directs[i].y_offset > 0 &&
+				   grid[x+directs[i].x_offset][y+directs[i].y_offset].type == clb_to_clb_directs[i].to_clb_type) {
 					   ipin = OPEN;
 						if(clb_to_clb_directs[i].to_clb_pin_start_index > clb_to_clb_directs[i].to_clb_pin_end_index) {
 							if(swap == TRUE) {
@@ -2722,5 +2865,62 @@ static int get_opin_direct_connecions(int x, int y, int opin, INOUTP t_linked_ed
 	return new_edges;
 }
 
+static void 
+load_rr_graph(const char *arch_file)
+{
+	gzFile gzfp;
+	int inode, size, edge_length;
+	char *edge_switch;
+	int nread;
+
+	size_t len;
+	char *fn;
+
+	len = strlen(arch_file);
+	fn = (char*)malloc(len+1+3);
+	strcpy(fn, arch_file);
+	strcpy(fn+(len-3), "rrg.gz");
+
+	for (inode = 0; inode < num_rr_nodes; ++inode) {
+		free(rr_node[inode].edges);
+		free(rr_node[inode].switches);
+	}
+	free(rr_node);
+
+	gzfp = gzopen(fn, "rb");
+	if (!gzfp) {
+		vpr_printf(TIO_MESSAGE_ERROR, "load_rr_graph() failed because file '%s' not found!\n", fn);
+		exit(1);
+	}
 
+	nread = gzread(gzfp, &size, sizeof(int));
+	assert(nread == sizeof(int));
+	if (size != sizeof(t_rr_node)) {
+		vpr_printf(TIO_MESSAGE_ERROR, "sizeof(t_rr_node) = %d in VPR, but %d in .rrg.gz\n", sizeof(t_rr_node), size);
+		exit(-1);
+	}
+	nread = gzread(gzfp, &num_rr_nodes, sizeof(int));
+	assert(nread == sizeof(int));
+	nread = gzread(gzfp, &edge_length, sizeof(int));
+	assert(nread == sizeof(int));
+
+	vpr_printf(TIO_MESSAGE_INFO, "Loading %d nodes and %d bytes of edge/switch data from %s...\n", num_rr_nodes, edge_length, arch_file);
+	/*rr_node = realloc(rr_node, sizeof(t_rr_node)*num_rr_nodes);*/
+	rr_node = (t_rr_node*)malloc(sizeof(t_rr_node)*num_rr_nodes);
+	edge_switch = (char*)malloc(edge_length);
+
+	nread = gzread(gzfp, rr_node, sizeof(t_rr_node)*num_rr_nodes);
+	assert(nread == ((int)sizeof(t_rr_node))*num_rr_nodes);
+	nread = gzread(gzfp, edge_switch, sizeof(char)*edge_length);
+	assert(nread == ((int)sizeof(char))*edge_length);
+
+	gzclose(gzfp);
+
+	for (inode = 0; inode < num_rr_nodes; ++inode) {
+		rr_node[inode].edges = (int*)(edge_switch + ((long)rr_node[inode].edges));
+		rr_node[inode].switches = (short*)(edge_switch + ((long)rr_node[inode].switches));
+	}
+
+	free(fn);
+}
 
diff --git vpr/SRC/route/rr_graph.h vpr/SRC/route/rr_graph.h
index d8fc2a7..3e6826a 100755
--- vpr/SRC/route/rr_graph.h
+++ vpr/SRC/route/rr_graph.h
@@ -39,6 +39,7 @@ void build_rr_graph(INP t_graph_type graph_type,
 		INP t_direct_inf *directs, 
 		INP int num_directs,
 		INP boolean ignore_Fc_0,
+		INP const char *arch_file,
 		OUTP int *Warnings);
 
 void free_rr_graph(void);
diff --git vpr/SRC/route/rr_graph_indexed_data.c vpr/SRC/route/rr_graph_indexed_data.c
index 014536e..0417a74 100755
--- vpr/SRC/route/rr_graph_indexed_data.c
+++ vpr/SRC/route/rr_graph_indexed_data.c
@@ -288,6 +288,9 @@ static void load_rr_indexed_data_T_values(int index_start,
 			rr_indexed_data[cost_index].T_linear = OPEN;
 			rr_indexed_data[cost_index].T_quadratic = OPEN;
 			rr_indexed_data[cost_index].C_load = OPEN;
+			iseg = rr_indexed_data[cost_index].seg_index;
+			if (segment_inf[iseg].frequency > 0)
+				vpr_printf(TIO_MESSAGE_WARNING, "cost_index = %d has no segments!\n", cost_index);
 		} else {
 			Rnode = R_total[cost_index] / num_nodes_of_index[cost_index];
 			Cnode = C_total[cost_index] / num_nodes_of_index[cost_index];
diff --git vpr/SRC/route/rr_graph_timing_params.c vpr/SRC/route/rr_graph_timing_params.c
index 4d683a8..d2eadbb 100755
--- vpr/SRC/route/rr_graph_timing_params.c
+++ vpr/SRC/route/rr_graph_timing_params.c
@@ -72,8 +72,11 @@ void add_rr_graph_C_from_switches(float C_ipin_cblock) {
 					 * input capacitance of the largest one.                        */
 
 					if (!buffered && inode < to_node) { /* Pass transistor. */
+						/* EH
 						rr_node[inode].C += Cin;
-						rr_node[to_node].C += Cout;
+						rr_node[to_node].C += Cout;*/
+						assert(rr_node[inode].C == Cin);
+						assert(rr_node[to_node].C == Cout);
 					}
 
 					else if (buffered) {
@@ -81,7 +84,9 @@ void add_rr_graph_C_from_switches(float C_ipin_cblock) {
 						if (rr_node[to_node].drivers != SINGLE) {
 							/* For multiple-driver architectures the output capacitance can
 							 * be added now since each edge is actually a driver */
-							rr_node[to_node].C += Cout;
+							/* EH
+							rr_node[to_node].C += Cout;*/
+							assert(rr_node[to_node].C == Cout);
 						}
 						isblock = seg_index_of_sblock(inode, to_node);
 						buffer_Cin[isblock] = std::max(buffer_Cin[isblock], Cin);
@@ -98,7 +103,9 @@ void add_rr_graph_C_from_switches(float C_ipin_cblock) {
 
 					icblock = seg_index_of_cblock(from_rr_type, to_node);
 					if (cblock_counted[icblock] == FALSE) {
-						rr_node[inode].C += C_ipin_cblock;
+						/*
+						rr_node[inode].C += C_ipin_cblock;*/
+						assert(rr_node[inode].C == C_ipin_cblock);
 						cblock_counted[icblock] = TRUE;
 					}
 				}
@@ -130,7 +137,9 @@ void add_rr_graph_C_from_switches(float C_ipin_cblock) {
 			}
 
 			for (isblock = iseg_low - 1; isblock <= iseg_high; isblock++) {
-				rr_node[inode].C += buffer_Cin[isblock]; /* Biggest buf Cin at loc */
+				/* EH
+				rr_node[inode].C += buffer_Cin[isblock];*/ /* Biggest buf Cin at loc */
+				assert(rr_node[inode].C == buffer_Cin[isblock]);
 				buffer_Cin[isblock] = 0.;
 			}
 
@@ -147,7 +156,9 @@ void add_rr_graph_C_from_switches(float C_ipin_cblock) {
 				if (rr_node[to_node].drivers != SINGLE) {
 					Cout = switch_inf[switch_index].Cout;
 					to_node = rr_node[inode].edges[iedge]; /* Will be CHANX or CHANY or IPIN */
-					rr_node[to_node].C += Cout;
+					/* EH:
+					rr_node[to_node].C += Cout;*/
+					assert(rr_node[to_node].C == Cout);
 				}
 			}
 		}
@@ -186,7 +197,9 @@ void add_rr_graph_C_from_switches(float C_ipin_cblock) {
 		}
 	}
 	for (inode = 0; inode < num_rr_nodes; inode++) {
-		rr_node[inode].C += Couts_to_add[inode];
+		/* EH 
+		rr_node[inode].C += Couts_to_add[inode];*/
+		assert(rr_node[inode].C == Couts_to_add[inode]);
 	}
 	free(Couts_to_add);
 	free(cblock_counted);
diff --git vpr/SRC/timing/path_delay.c vpr/SRC/timing/path_delay.c
index f38e0f7..11489e0 100755
--- vpr/SRC/timing/path_delay.c
+++ vpr/SRC/timing/path_delay.c
@@ -377,6 +377,17 @@ void load_timing_graph_net_delays(float **net_delay) {
 
 	for (inet = 0; inet < num_timing_nets; inet++) {
 		inode = f_net_to_driver_tnode[inet];
+		/* EH: Ignore split vcc/gnd nets
+		 * which don't have full connectivity */
+		if (inode == OPEN) {
+			if (strcmp(clb_net[inet].name, "gnd") == 0 ||
+				strcmp(clb_net[inet].name, "vcc") == 0 ||
+				strncmp(clb_net[inet].name, "GLOBAL_LOGIC", strlen("GLOBAL_LOGIC")) == 0) {
+				continue;
+			}
+		}
+		assert(inode != OPEN);
+
 		tedge = tnode[inode].out_edges;
 
 		/* Note that the edges of a tnode corresponding to a CLB or INPAD opin must  *
@@ -535,9 +546,20 @@ void print_slack(float ** slack, boolean slack_is_normalized, const char *fname)
 
 	for (inet = 0; inet < num_timing_nets; inet++) {
 		driver_tnode = f_net_to_driver_tnode[inet];
+		slk = slack[inet][1];
+		/* EH: Ignore split vcc/gnd nets
+		 * which don't have full connectivity */
+		if (driver_tnode == OPEN) {
+			if (strcmp(clb_net[inet].name, "gnd") == 0 ||
+				strcmp(clb_net[inet].name, "vcc") == 0 ||
+				strncmp(clb_net[inet].name, "GLOBAL_LOGIC", strlen("GLOBAL_LOGIC")) == 0) {
+				fprintf(fp, "%5d\t%5d\t\t%5d\t--\n", inet, driver_tnode, OPEN);
+				continue;
+			}
+		}
+		assert(driver_tnode != OPEN);
 		num_edges = tnode[driver_tnode].num_edges;
 		tedge = tnode[driver_tnode].out_edges;
-		slk = slack[inet][1];
 		if (slk < HUGE_POSITIVE_FLOAT - 1) {
 			fprintf(fp, "%5d\t%5d\t\t%5d\t%g\n", inet, driver_tnode, tedge[0].to_node, slk);
 		} else { /* Slack is meaningless, so replace with --. */
@@ -585,6 +607,18 @@ void print_criticality(t_slack * slacks, boolean criticality_is_normalized, cons
 
 	for (inet = 0; inet < num_timing_nets; inet++) {
 		driver_tnode = f_net_to_driver_tnode[inet];
+		/* EH: Ignore split vcc/gnd nets
+		 * which don't have full connectivity */
+		if (driver_tnode == OPEN) {
+			if (strcmp(clb_net[inet].name, "gnd") == 0 ||
+				strcmp(clb_net[inet].name, "vcc") == 0 ||
+				strncmp(clb_net[inet].name, "GLOBAL_LOGIC", strlen("GLOBAL_LOGIC")) == 0) {
+				fprintf(fp, "\n%5d\t%5d\t\t%5d\t\t%.6f", inet, driver_tnode, OPEN, slacks->timing_criticality[inet][1]);
+				continue;
+			}
+		}
+		assert(driver_tnode != OPEN);
+
 		num_edges = tnode[driver_tnode].num_edges;
 		tedge = tnode[driver_tnode].out_edges;
 
@@ -681,6 +715,12 @@ void print_net_delay(float **net_delay, const char *fname) {
 
 	for (inet = 0; inet < num_timing_nets; inet++) {
 		driver_tnode = f_net_to_driver_tnode[inet];
+		/* EH: Some nets that I've added after the timing graph
+		 * was created will not have a driver --- skip those */
+		if (driver_tnode == OPEN) {
+			fprintf(fp, "%5d\t%5d\t\t%5d\t%g\n", inet, OPEN, OPEN, net_delay[inet][1]);
+			continue;
+		}
 		num_edges = tnode[driver_tnode].num_edges;
 		tedge = tnode[driver_tnode].out_edges;
 		fprintf(fp, "%5d\t%5d\t\t%5d\t%g\n", inet, driver_tnode, tedge[0].to_node, net_delay[inet][1]);
@@ -738,6 +778,7 @@ static void alloc_and_load_tnodes(t_timing_inf timing_inf) {
 	t_pb_graph_pin *ipb_graph_pin;
 	t_rr_node *local_rr_graph, *d_rr_graph;
 	int num_dangling_pins;
+	int isink;
 
 	f_net_to_driver_tnode = (int*)my_malloc(num_timing_nets * sizeof(int));
 
@@ -757,6 +798,9 @@ static void alloc_and_load_tnodes(t_timing_inf timing_inf) {
 						|| block[i].pb->rr_graph[j].pb_graph_pin->type
 								== PB_PIN_SEQUENTIAL) {
 					num_nodes_in_block += 2;
+				/* EH: Treat bufgctrl.o as PI */
+				} else if (strcmp(block[i].type->name, "BUFG") == 0 && strcmp(block[i].pb->rr_graph[j].pb_graph_pin->port->name, "o") == 0) {
+					num_nodes_in_block += 2;
 				} else {
 					num_nodes_in_block++;
 				}
@@ -793,6 +837,7 @@ static void alloc_and_load_tnodes(t_timing_inf timing_inf) {
 		 */
 		count = 0;
 		iblock = tnode[i].block;
+
 		switch (tnode[i].type) {
 		case TN_INPAD_OPIN:
 		case TN_INTERMEDIATE_NODE:
@@ -907,11 +952,15 @@ static void alloc_and_load_tnodes(t_timing_inf timing_inf) {
 			tnode[i].out_edges = (t_tedge *) my_chunk_malloc(
 					clb_net[inet].num_sinks * sizeof(t_tedge),
 					&tedge_ch);
-			for (j = 1; j <= clb_net[inet].num_sinks; j++) {
-				dblock = clb_net[inet].node_block[j];
+			/* EH: Separate the clb_net sink count from the
+			 * tnode edge count, necessary for removing timing graph
+			 * edges (below) */
+			j = 1;
+			for (isink = 1; isink <= clb_net[inet].num_sinks; isink++) {
+				dblock = clb_net[inet].node_block[isink];
 				normalization = block[dblock].type->num_pins
 						/ block[dblock].type->capacity;
-				normalized_pin = clb_net[inet].node_block_pin[j]
+				normalized_pin = clb_net[inet].node_block_pin[isink]
 						% normalization;
 				d_rr_graph = block[dblock].pb->rr_graph;
 				dpin = OPEN;
@@ -953,12 +1002,29 @@ static void alloc_and_load_tnodes(t_timing_inf timing_inf) {
 								block[dblock].pb->pb_graph_node->num_clock_pins[k];
 					}
 					assert(dpin != OPEN);
+					/* EH: If the destination PB RRG has an empty net_num, it can only
+					 * be a gnd net or a clock net, so check for global */
+					if (d_rr_graph[block[dblock].pb->pb_graph_node->clock_pins[dport][dpin].pin_count_in_cluster].net_num == OPEN) {
+						assert(clb_net[inet].is_global);
+						/* Remove this edge from the timing graph*/
+						--tnode[i].num_edges;
+						continue;
+					}
+
 					assert(
 							inet == vpack_to_clb_net_mapping[d_rr_graph[block[dblock].pb->pb_graph_node->clock_pins[dport][dpin].pin_count_in_cluster].net_num]);
 					tnode[i].out_edges[j - 1].to_node =
 							get_tnode_index(d_rr_graph[block[dblock].pb->pb_graph_node->clock_pins[dport][dpin].pin_count_in_cluster].tnode);
 				} else {
 					assert(dpin != OPEN);
+					/* EH: If the destination PB RRG has an empty net_num, it may be
+					 * be a global net, or a duplicated connection (e.g. we[0] -> we[1:7]) */
+					if (d_rr_graph[block[dblock].pb->pb_graph_node->input_pins[dport][dpin].pin_count_in_cluster].net_num == OPEN) {
+						// Remove this edge from the timing graph
+						--tnode[i].num_edges;
+						continue;
+					}
+
 					assert(
 							inet == vpack_to_clb_net_mapping[d_rr_graph[block[dblock].pb->pb_graph_node->input_pins[dport][dpin].pin_count_in_cluster].net_num]);
 					/* delays are assigned post routing */
@@ -967,6 +1033,8 @@ static void alloc_and_load_tnodes(t_timing_inf timing_inf) {
 				}
 				tnode[i].out_edges[j - 1].Tdel = 0;
 				assert(inet != OPEN);
+				// EH: Increment edge count here
+				++j;
 			}
 			break;
 		case TN_OUTPAD_IPIN:
@@ -1049,6 +1117,10 @@ static void alloc_and_load_tnodes_from_prepacked_netlist(float block_delay,
 				for (k = 0; k < model_port->size; k++) {
 					if (logical_block[i].output_nets[j][k] != OPEN) {
 						num_tnodes += incr;
+						/* EH: Treat bufgctrl.o as PI */
+						if (strcmp(logical_block[i].model->name, "bufgctrl") == 0 && strcmp(model_port->name, "o") == 0) {
+							num_tnodes += 2-incr;
+						}
 					}
 				}
 				j++;
@@ -1056,6 +1128,7 @@ static void alloc_and_load_tnodes_from_prepacked_netlist(float block_delay,
 			}
 			logical_block[i].output_net_tnodes = (t_tnode ***)my_calloc(j,
 					sizeof(t_tnode**));
+
 		}
 	}
 	tnode = (t_tnode *)my_calloc(num_tnodes, sizeof(t_tnode));
@@ -1135,7 +1208,20 @@ static void alloc_and_load_tnodes_from_prepacked_netlist(float block_delay,
 								tnode[inode].num_edges * sizeof(t_tedge),
 								&tedge_ch);
 
-						if (logical_block[i].clock_net == OPEN) {
+						/* EH: Treat bufgctrl.o as PI */
+						if (strcmp(logical_block[i].model->name, "bufgctrl") == 0 && strcmp(model_port->name, "o") == 0) {
+							tnode[inode].type = TN_INPAD_OPIN;
+
+							tnode[inode + 1].num_edges = 1;
+							tnode[inode + 1].out_edges = (t_tedge *) my_chunk_malloc(
+									1 * sizeof(t_tedge), &tedge_ch);
+							tnode[inode + 1].out_edges->Tdel = 0;
+							tnode[inode + 1].out_edges->to_node = inode;
+							tnode[inode + 1].type = TN_INPAD_SOURCE;
+							tnode[inode + 1].block = i;
+							inode += 2;
+						}
+						else if (logical_block[i].clock_net == OPEN) {
 							tnode[inode].type = TN_PRIMITIVE_OPIN;
 							inode++;
 						} else {
@@ -1377,8 +1463,24 @@ static void load_tnode(INP t_pb_graph_pin *pb_graph_pin, INP int iblock,
 				tnode[i].type = TN_PRIMITIVE_IPIN;
 			} else {
 				assert(tnode[i].pb_graph_pin->port->type == OUT_PORT);
-				assert(tnode[i].pb_graph_pin->type == PB_PIN_TERMINAL);
-				tnode[i].type = TN_PRIMITIVE_OPIN;
+				/* EH: Treat bufgctrl.o as PI */
+				if (strcmp(block[iblock].type->name, "BUFG") == 0 && strcmp(tnode[i].pb_graph_pin->port->name, "o") == 0) {
+					tnode[i].type = TN_INPAD_OPIN;
+					tnode[i + 1].num_edges = 1;
+					tnode[i + 1].out_edges = (t_tedge *) my_chunk_malloc(
+							1 * sizeof(t_tedge), &tedge_ch);
+					tnode[i + 1].out_edges->Tdel = 0;
+					tnode[i + 1].out_edges->to_node = i;
+					tnode[i + 1].pb_graph_pin = pb_graph_pin; /* Necessary for propagate_clock_domain_and_skew(). */
+					tnode[i + 1].type = TN_INPAD_SOURCE;
+					tnode[i + 1].block = iblock;
+					(*inode)++;
+				}
+				else 
+				{
+					assert(tnode[i].pb_graph_pin->type == PB_PIN_TERMINAL);
+					tnode[i].type = TN_PRIMITIVE_OPIN;
+				}
 			}
 		}
 	}
@@ -2363,7 +2465,19 @@ static void update_slacks(t_slack * slacks, int source_clock_domain, int sink_cl
 	float T_arr, Tdel, T_req, slk, timing_criticality;
 
 	for (inet = 0; inet < num_timing_nets; inet++) {
+
 		inode = f_net_to_driver_tnode[inet];
+		/* EH: Ignore split vcc/gnd nets, and BUFG output nets, 
+		 * which don't have full connectivity */
+		if (inode == OPEN) {
+			if (strcmp(clb_net[inet].name, "gnd") == 0 ||
+				strcmp(clb_net[inet].name, "vcc") == 0 ||
+				strncmp(clb_net[inet].name, "GLOBAL_LOGIC", strlen("GLOBAL_LOGIC")) == 0) {
+				continue;
+			}
+		}
+		assert(inode != OPEN);
+
 		T_arr = tnode[inode].T_arr;
 
 		if (!(has_valid_T_arr(inode) && has_valid_T_req(inode))) {
@@ -2970,7 +3084,9 @@ static t_tnode * find_ff_clock_tnode(int inode, boolean is_prepacked) {
 		parent_pb_graph_node = ff_source_or_sink_pb_graph_pin->parent_node;
 		/* Make sure there's only one clock port and only one clock pin in that port */
 		assert(parent_pb_graph_node->num_clock_ports == 1);
-		assert(parent_pb_graph_node->num_clock_pins[0] == 1);
+		/* EH: Modify this check to allow clock bus on RAMs
+		 * so that RAMB36.CLK(ARD|BWD)CLK[LU]? can all be driven */
+		assert(parent_pb_graph_node->num_clock_pins[0] >= 1);
 		clock_pb_graph_pin = &parent_pb_graph_node->clock_pins[0][0];
 		ff_clock_tnode = rr_graph[clock_pb_graph_pin->pin_count_in_cluster].tnode;
 	}
diff --git vpr/SRC/timing/read_sdc.c vpr/SRC/timing/read_sdc.c
index b55689f..91dfec2 100644
--- vpr/SRC/timing/read_sdc.c
+++ vpr/SRC/timing/read_sdc.c
@@ -380,7 +380,8 @@ static void count_netlist_clocks_as_constrained_clocks(void) {
 		if (logical_block[iblock].clock_net != OPEN) {
 			clock_net = logical_block[iblock].clock_net;
 			assert(clock_net != OPEN);
-			name = logical_block[clock_net].name;
+			/* EH: BUG fixed */
+			name = vpack_net[clock_net].name;
 			/* Now that we've found a clock, let's see if we've counted it already */
 			found = FALSE;
 			for (i = 0; !found && i < g_sdc->num_constrained_clocks; i++) {
diff --git vtr_flow/arch/xilinx/Makefile vtr_flow/arch/xilinx/Makefile
new file mode 100644
index 0000000..8240e1e
--- /dev/null
+++ vtr_flow/arch/xilinx/Makefile
@@ -0,0 +1,47 @@
+ARCH = $(wilcard *.xml)
+RRG = $(ARCH:%.xml=%.rrg.gz)
+DEVICES = xc6vlx240t
+DBS = $(DEVICES) Virtex6
+DBFILES = $(addsuffix .db,$(DBS))
+PTCFILES = $(addsuffix .ptc2name,$(DEVICES))
+PKG = $(ARCH:%.xml=%.pkg)
+BENCH = majority.blif
+
+XDLRC2VPR = ../../../xdlrc2vpr/xdlrc2vpr
+
+all: $(PKG) $(RRG)
+
+%.pkg: %.xml partgen
+	partgen -p $(@:%.pkg=%)
+	rm -f partlist.xct partlist.xml
+
+.PHONY: partlist.rrg.gz
+%.rrg.gz: %.xml $(BENCH) $(DBFILES) $(XDLRC2VPR)/xdlrc2vpr
+	rm -f $@
+	../../../vpr/vpr $(word 1,$^) $(word 2,$^) --route_chan_width 18 --dump_vtb_rrg --nodisp
+	$(eval WIDTH := $(shell GREP_OPTIONS="" grep -Po '<layout width="\K[^"]+' $(word 1,$^)))
+	$(eval HEIGHT := $(shell GREP_OPTIONS="" grep -Po '<layout width="[^"]+" height="\K[^"]+' $(word 1,$^)))
+	( /usr/bin/time -v $(XDLRC2VPR) $(@:%.rrg.gz=%) $(WIDTH) $(HEIGHT) 2>&1 ) | tee xdlrc2vpr.out
+	cat $(@:%.rrg.gz=%.header_and_shim.gz) $(@:%.rrg.gz=%.nodes.gz) $(@:%.rrg.gz=%.edge_switch.gz) > $@
+	rm $(@:%.rrg.gz=%.header_and_shim.gz) \
+		$(@:%.rrg.gz=%.nodes.gz) \
+		$(@:%.rrg.gz=%.edge_switch.gz) \
+		$(@:%.rrg.gz=%.vpr) \
+		*.net
+
+$(XDLRC2VPR):
+	$(MAKE) -C $(dir XDLRC2VPR)
+
+$(DBFILES):
+	ln -sf ../../../torc/src/torc/devices/$@ .
+
+$(BENCH):
+	ln -sf ../../benchmarks/blif/6/$@ .
+
+partgen:
+ifeq ($(shell which partgen),)
+	$(error "Xilinx ISE tool 'partgen' not found on $$PATH, please source Xilinx settings script!")
+endif
+
+clean:
+	rm -f *.rrg.gz *.echo *.net *.vpr *.out *.log *.pkg *.tws *.tws.txt partlist.xct partlist.xml $(DBFILES) $(BENCH)
diff --git vtr_flow/arch/xilinx/ml605.ioplace vtr_flow/arch/xilinx/ml605.ioplace
new file mode 100644
index 0000000..9b6ed60
--- /dev/null
+++ vtr_flow/arch/xilinx/ml605.ioplace
@@ -0,0 +1,571 @@
+# VPR pin constraints file generated from '/home/eddieh/Dropbox/ML605.ucf' using '/home/eddieh/Dropbox/xc6vlx240tff1156.pkg' as template
+
+##block name    x       y       subblk  block number
+#----------     --      --      ------  ------------
+
+CLK_33MHZ_SYSACE	56	19	1
+CPU_RESET	56	147	1
+DDR3_A0	56	179	0
+DDR3_A1	56	177	1
+DDR3_A2	56	177	0
+DDR3_A3	56	173	1
+DDR3_A4	56	173	0
+DDR3_A5	56	171	1
+DDR3_A6	56	169	1
+DDR3_A7	56	169	0
+DDR3_A8	56	167	1
+DDR3_A9	56	167	0
+DDR3_A10	56	165	1
+DDR3_A11	56	165	0
+DDR3_A12	56	163	1
+DDR3_A13	56	163	0
+DDR3_A14	56	161	1
+DDR3_A15	56	161	0
+DDR3_BA0	56	187	1
+DDR3_BA1	56	187	0
+DDR3_BA2	56	179	1
+DDR3_CAS_B	56	189	1
+DDR3_CKE0	56	185	1
+DDR3_CKE1	56	185	0
+DDR3_CLK0_N	56	183	0
+DDR3_CLK0_P	56	183	1
+DDR3_CLK1_N	56	181	0
+DDR3_CLK1_P	56	181	1
+DDR3_D0	56	131	1
+DDR3_D1	56	129	1
+DDR3_D2	56	129	0
+DDR3_D3	56	127	1
+DDR3_D4	56	127	0
+DDR3_D5	56	123	1
+DDR3_D6	56	123	0
+DDR3_D7	56	121	1
+DDR3_D8	56	141	0
+DDR3_D9	56	143	0
+DDR3_D10	56	145	0
+DDR3_D11	56	145	1
+DDR3_D12	56	147	0
+DDR3_D13	56	139	0
+DDR3_D14	56	137	0
+DDR3_D15	56	133	1
+DDR3_D16	56	155	1
+DDR3_D17	56	155	0
+DDR3_D18	56	157	1
+DDR3_D19	56	157	0
+DDR3_D20	56	151	1
+DDR3_D21	56	159	1
+DDR3_D22	56	149	1
+DDR3_D23	56	159	0
+DDR3_D24	41	181	0
+DDR3_D25	41	179	0
+DDR3_D26	41	173	1
+DDR3_D27	41	183	0
+DDR3_D28	41	185	1
+DDR3_D29	41	185	0
+DDR3_D30	41	187	1
+DDR3_D31	41	187	0
+DDR3_D32	41	195	1
+DDR3_D33	41	189	1
+DDR3_D34	41	197	1
+DDR3_D35	41	197	0
+DDR3_D36	41	199	1
+DDR3_D37	41	199	0
+DDR3_D38	41	191	1
+DDR3_D39	41	195	0
+DDR3_D40	41	159	0
+DDR3_D41	41	155	0
+DDR3_D42	41	149	1
+DDR3_D43	41	155	1
+DDR3_D44	41	157	1
+DDR3_D45	41	159	1
+DDR3_D46	41	151	1
+DDR3_D47	41	157	0
+DDR3_D48	41	145	0
+DDR3_D49	41	141	0
+DDR3_D50	41	139	0
+DDR3_D51	41	145	1
+DDR3_D52	41	147	0
+DDR3_D53	41	133	1
+DDR3_D54	41	143	0
+DDR3_D55	41	137	0
+DDR3_D56	41	131	1
+DDR3_D57	41	121	1
+DDR3_D58	41	123	0
+DDR3_D59	41	123	1
+DDR3_D60	41	129	0
+DDR3_D61	41	129	1
+DDR3_D62	41	127	1
+DDR3_D63	41	127	0
+DDR3_DM0	56	121	0
+DDR3_DM1	56	133	0
+DDR3_DM2	56	149	0
+DDR3_DM3	41	173	0
+DDR3_DM4	41	189	0
+DDR3_DM5	41	149	0
+DDR3_DM6	41	133	0
+DDR3_DM7	41	121	0
+DDR3_DQS0_N	56	125	0
+DDR3_DQS0_P	56	125	1
+DDR3_DQS1_N	56	135	0
+DDR3_DQS1_P	56	135	1
+DDR3_DQS2_N	56	153	0
+DDR3_DQS2_P	56	153	1
+DDR3_DQS3_N	41	177	0
+DDR3_DQS3_P	41	177	1
+DDR3_DQS4_N	41	193	0
+DDR3_DQS4_P	41	193	1
+DDR3_DQS5_N	41	153	0
+DDR3_DQS5_P	41	153	1
+DDR3_DQS6_N	41	135	0
+DDR3_DQS6_P	41	135	1
+DDR3_DQS7_N	41	125	0
+DDR3_DQS7_P	41	125	1
+DDR3_ODT0	56	199	1
+DDR3_ODT1	56	199	0
+DDR3_RAS_B	56	191	1
+DDR3_RESET_B	56	197	1
+DDR3_S0_B	56	195	1
+DDR3_S1_B	56	195	0
+DDR3_TEMP_EVENT	56	197	0
+DDR3_WE_B	56	189	0
+DVI_D0	56	11	1
+DVI_D1	56	11	0
+DVI_D2	56	9	1
+DVI_D3	56	9	0
+DVI_D4	56	7	1
+DVI_D5	56	7	0
+DVI_D6	56	5	1
+DVI_D7	56	5	0
+DVI_D8	56	3	1
+DVI_D9	56	3	0
+DVI_D10	56	1	1
+DVI_D11	56	1	0
+DVI_DE	56	19	0
+DVI_GPIO1_FMC_C2M_PG_LS	56	103	0
+DVI_H	56	13	1
+DVI_RESET_B_LS	56	13	0
+DVI_V	56	21	0
+DVI_XCLK_N	56	17	0
+DVI_XCLK_P	56	17	1
+FLASH_A0	56	93	0
+FLASH_A1	56	93	1
+FLASH_A2	56	95	0
+FLASH_A3	56	95	1
+FLASH_A4	56	105	0
+FLASH_A5	56	105	1
+FLASH_A6	56	107	0
+FLASH_A7	56	107	1
+FLASH_A8	56	109	0
+FLASH_A9	56	109	1
+FLASH_A10	56	111	0
+FLASH_A11	56	111	1
+FLASH_A12	56	113	0
+FLASH_A13	56	113	1
+FLASH_A14	56	115	0
+FLASH_A15	56	115	1
+FLASH_A16	56	83	0
+FLASH_A17	56	83	1
+FLASH_A18	56	85	0
+FLASH_A19	56	85	1
+FLASH_A20	56	87	0
+FLASH_A21	56	87	1
+FLASH_A22	56	89	0
+FLASH_A23	41	87	1
+FLASH_D0	41	93	0
+FLASH_D1	41	93	1
+FLASH_D2	41	95	0
+FLASH_D3	41	95	1
+FLASH_D4	41	105	0
+FLASH_D5	41	105	1
+FLASH_D6	41	107	0
+FLASH_D7	41	107	1
+FLASH_D8	41	109	0
+FLASH_D9	41	109	1
+FLASH_D10	41	111	0
+FLASH_D11	41	111	1
+FLASH_D12	41	113	0
+FLASH_D13	41	113	1
+FLASH_D14	41	115	0
+FLASH_D15	41	115	1
+FLASH_WAIT	0	197	1
+FPGA_FWE_B	41	89	1
+FPGA_FOE_B	41	91	0
+PLATFLASH_L_B	41	83	1
+FPGA_FCS_B	41	91	1
+FMC_HPC_CLK0_M2C_N	41	117	0
+FMC_HPC_CLK0_M2C_P	41	117	1
+FMC_HPC_CLK1_M2C_N	41	21	0
+FMC_HPC_CLK1_M2C_P	41	21	1
+FMC_HPC_CLK2_M2C_IO_N	0	61	0
+FMC_HPC_CLK2_M2C_IO_P	0	61	1
+FMC_HPC_CLK3_M2C_IO_N	0	63	0
+FMC_HPC_CLK3_M2C_IO_P	0	63	1
+FMC_HPC_HA00_CC_N	0	59	0
+FMC_HPC_HA00_CC_P	0	59	1
+FMC_HPC_HA01_CC_N	0	57	0
+FMC_HPC_HA01_CC_P	0	57	1
+FMC_HPC_HA02_N	0	41	0
+FMC_HPC_HA02_P	0	41	1
+FMC_HPC_HA03_N	0	67	0
+FMC_HPC_HA03_P	0	67	1
+FMC_HPC_HA04_N	0	53	0
+FMC_HPC_HA04_P	0	53	1
+FMC_HPC_HA05_N	0	49	0
+FMC_HPC_HA05_P	0	49	1
+FMC_HPC_HA06_N	0	65	0
+FMC_HPC_HA06_P	0	65	1
+FMC_HPC_HA07_N	0	45	0
+FMC_HPC_HA07_P	0	45	1
+FMC_HPC_HA08_N	0	43	0
+FMC_HPC_HA08_P	0	43	1
+FMC_HPC_HA09_N	0	73	0
+FMC_HPC_HA09_P	0	73	1
+FMC_HPC_HA10_N	0	75	0
+FMC_HPC_HA10_P	0	75	1
+FMC_HPC_HA11_N	0	47	0
+FMC_HPC_HA11_P	0	47	1
+FMC_HPC_HA12_N	0	51	0
+FMC_HPC_HA12_P	0	51	1
+FMC_HPC_HA13_N	0	69	0
+FMC_HPC_HA13_P	0	69	1
+FMC_HPC_HA14_N	0	77	0
+FMC_HPC_HA14_P	0	77	1
+FMC_HPC_HA15_N	0	55	0
+FMC_HPC_HA15_P	0	55	1
+FMC_HPC_HA16_N	0	71	0
+FMC_HPC_HA16_P	0	71	1
+FMC_HPC_HA17_CC_N	0	101	0
+FMC_HPC_HA17_CC_P	0	101	1
+FMC_HPC_HA18_N	0	111	0
+FMC_HPC_HA18_P	0	111	1
+FMC_HPC_HA19_N	0	107	0
+FMC_HPC_HA19_P	0	107	1
+FMC_HPC_HA20_N	0	95	0
+FMC_HPC_HA20_P	0	95	1
+FMC_HPC_HA21_N	0	103	0
+FMC_HPC_HA21_P	0	103	1
+FMC_HPC_HA22_N	0	105	0
+FMC_HPC_HA22_P	0	105	1
+FMC_HPC_HA23_N	0	109	0
+FMC_HPC_HA23_P	0	109	1
+FMC_HPC_HB00_CC_N	0	19	0
+FMC_HPC_HB00_CC_P	0	19	1
+FMC_HPC_HB01_N	0	5	0
+FMC_HPC_HB01_P	0	5	1
+FMC_HPC_HB02_N	0	3	0
+FMC_HPC_HB02_P	0	3	1
+FMC_HPC_HB03_N	0	1	0
+FMC_HPC_HB03_P	0	1	1
+FMC_HPC_HB04_N	0	7	0
+FMC_HPC_HB04_P	0	7	1
+FMC_HPC_HB05_N	0	23	0
+FMC_HPC_HB05_P	0	23	1
+FMC_HPC_HB06_CC_N	0	17	0
+FMC_HPC_HB06_CC_P	0	17	1
+FMC_HPC_HB07_N	0	31	0
+FMC_HPC_HB07_P	0	31	1
+FMC_HPC_HB08_N	0	11	0
+FMC_HPC_HB08_P	0	11	1
+FMC_HPC_HB09_N	0	27	0
+FMC_HPC_HB09_P	0	27	1
+FMC_HPC_HB10_N	0	29	0
+FMC_HPC_HB10_P	0	29	1
+FMC_HPC_HB11_N	0	13	0
+FMC_HPC_HB11_P	0	13	1
+FMC_HPC_HB12_N	0	15	0
+FMC_HPC_HB12_P	0	15	1
+FMC_HPC_HB13_N	0	35	0
+FMC_HPC_HB13_P	0	35	1
+FMC_HPC_HB14_N	0	37	0
+FMC_HPC_HB14_P	0	37	1
+FMC_HPC_HB15_N	0	33	0
+FMC_HPC_HB15_P	0	33	1
+FMC_HPC_HB16_N	0	25	0
+FMC_HPC_HB16_P	0	25	1
+FMC_HPC_HB17_CC_N	0	21	0
+FMC_HPC_HB17_CC_P	0	21	1
+FMC_HPC_HB18_N	0	39	0
+FMC_HPC_HB18_P	0	39	1
+FMC_HPC_HB19_N	0	9	0
+FMC_HPC_HB19_P	0	9	1
+FMC_HPC_LA00_CC_N	41	17	0
+FMC_HPC_LA00_CC_P	41	17	1
+FMC_HPC_LA01_CC_N	41	19	0
+FMC_HPC_LA01_CC_P	41	19	1
+FMC_HPC_LA02_N	41	27	0
+FMC_HPC_LA02_P	41	27	1
+FMC_HPC_LA03_N	41	11	0
+FMC_HPC_LA03_P	41	11	1
+FMC_HPC_LA04_N	41	23	0
+FMC_HPC_LA04_P	41	23	1
+FMC_HPC_LA05_N	41	35	0
+FMC_HPC_LA05_P	41	35	1
+FMC_HPC_LA06_N	41	3	0
+FMC_HPC_LA06_P	41	3	1
+FMC_HPC_LA07_N	41	7	0
+FMC_HPC_LA07_P	41	7	1
+FMC_HPC_LA08_N	41	31	0
+FMC_HPC_LA08_P	41	31	1
+FMC_HPC_LA09_N	41	37	0
+FMC_HPC_LA09_P	41	37	1
+FMC_HPC_LA10_N	41	25	0
+FMC_HPC_LA10_P	41	25	1
+FMC_HPC_LA11_N	41	5	0
+FMC_HPC_LA11_P	41	5	1
+FMC_HPC_LA12_N	41	13	0
+FMC_HPC_LA12_P	41	13	1
+FMC_HPC_LA13_N	41	33	0
+FMC_HPC_LA13_P	41	33	1
+FMC_HPC_LA14_N	41	29	0
+FMC_HPC_LA14_P	41	29	1
+FMC_HPC_LA15_N	41	9	0
+FMC_HPC_LA15_P	41	9	1
+FMC_HPC_LA16_N	41	1	0
+FMC_HPC_LA16_P	41	1	1
+FMC_HPC_LA17_CC_N	41	61	0
+FMC_HPC_LA17_CC_P	41	61	1
+FMC_HPC_LA18_CC_N	41	63	0
+FMC_HPC_LA18_CC_P	41	63	1
+FMC_HPC_LA19_N	41	45	0
+FMC_HPC_LA19_P	41	45	1
+FMC_HPC_LA20_N	41	43	0
+FMC_HPC_LA20_P	41	43	1
+FMC_HPC_LA21_N	41	69	0
+FMC_HPC_LA21_P	41	69	1
+FMC_HPC_LA22_N	41	49	0
+FMC_HPC_LA22_P	41	49	1
+FMC_HPC_LA23_N	41	53	0
+FMC_HPC_LA23_P	41	53	1
+FMC_HPC_LA24_N	41	77	0
+FMC_HPC_LA24_P	41	77	1
+FMC_HPC_LA25_N	41	65	0
+FMC_HPC_LA25_P	41	65	1
+FMC_HPC_LA26_N	41	47	0
+FMC_HPC_LA26_P	41	47	1
+FMC_HPC_LA27_N	41	73	0
+FMC_HPC_LA27_P	41	73	1
+FMC_HPC_LA28_N	41	59	0
+FMC_HPC_LA28_P	41	59	1
+FMC_HPC_LA29_N	41	67	0
+FMC_HPC_LA29_P	41	67	1
+FMC_HPC_LA30_N	41	51	0
+FMC_HPC_LA30_P	41	51	1
+FMC_HPC_LA31_N	41	71	0
+FMC_HPC_LA31_P	41	71	1
+FMC_HPC_LA32_N	41	75	0
+FMC_HPC_LA32_P	41	75	1
+FMC_HPC_LA33_N	41	57	0
+FMC_HPC_LA33_P	41	57	1
+FMC_HPC_PG_M2C_LS	0	197	0
+FMC_HPC_PRSNT_M2C_L	41	41	1
+FMC_LPC_CLK0_M2C_N	56	117	0
+FMC_LPC_CLK0_M2C_P	56	117	1
+FMC_LPC_CLK1_M2C_N	0	179	0
+FMC_LPC_CLK1_M2C_P	0	179	1
+FMC_LPC_IIC_SCL_LS	56	55	1
+FMC_LPC_IIC_SDA_LS	56	55	0
+FMC_LPC_LA00_CC_N	0	181	0
+FMC_LPC_LA00_CC_P	0	181	1
+FMC_LPC_LA01_CC_N	0	177	0
+FMC_LPC_LA01_CC_P	0	177	1
+FMC_LPC_LA02_N	0	189	0
+FMC_LPC_LA02_P	0	189	1
+FMC_LPC_LA03_N	0	161	0
+FMC_LPC_LA03_P	0	161	1
+FMC_LPC_LA04_N	0	185	0
+FMC_LPC_LA04_P	0	185	1
+FMC_LPC_LA05_N	0	171	0
+FMC_LPC_LA05_P	0	171	1
+FMC_LPC_LA06_N	0	167	0
+FMC_LPC_LA06_P	0	167	1
+FMC_LPC_LA07_N	0	165	0
+FMC_LPC_LA07_P	0	165	1
+FMC_LPC_LA08_N	0	173	0
+FMC_LPC_LA08_P	0	173	1
+FMC_LPC_LA09_N	0	163	0
+FMC_LPC_LA09_P	0	163	1
+FMC_LPC_LA10_N	0	193	0
+FMC_LPC_LA10_P	0	193	1
+FMC_LPC_LA11_N	0	169	0
+FMC_LPC_LA11_P	0	169	1
+FMC_LPC_LA12_N	0	195	0
+FMC_LPC_LA12_P	0	195	1
+FMC_LPC_LA13_N	0	183	0
+FMC_LPC_LA13_P	0	183	1
+FMC_LPC_LA14_N	0	187	0
+FMC_LPC_LA14_P	0	187	1
+FMC_LPC_LA15_N	0	199	0
+FMC_LPC_LA15_P	0	199	1
+FMC_LPC_LA16_N	0	191	0
+FMC_LPC_LA16_P	0	191	1
+FMC_LPC_LA17_CC_N	0	141	0
+FMC_LPC_LA17_CC_P	0	141	1
+FMC_LPC_LA18_CC_N	0	137	0
+FMC_LPC_LA18_CC_P	0	137	1
+FMC_LPC_LA19_N	0	125	0
+FMC_LPC_LA19_P	0	125	1
+FMC_LPC_LA20_N	0	121	0
+FMC_LPC_LA20_P	0	121	1
+FMC_LPC_LA21_N	0	129	0
+FMC_LPC_LA21_P	0	129	1
+FMC_LPC_LA22_N	0	149	0
+FMC_LPC_LA22_P	0	149	1
+FMC_LPC_LA23_N	0	133	0
+FMC_LPC_LA23_P	0	133	1
+FMC_LPC_LA24_N	0	143	0
+FMC_LPC_LA24_P	0	143	1
+FMC_LPC_LA25_N	0	151	0
+FMC_LPC_LA25_P	0	151	1
+FMC_LPC_LA26_N	0	147	0
+FMC_LPC_LA26_P	0	147	1
+FMC_LPC_LA27_N	0	131	0
+FMC_LPC_LA27_P	0	131	1
+FMC_LPC_LA28_N	0	139	0
+FMC_LPC_LA28_P	0	139	1
+FMC_LPC_LA29_N	0	123	0
+FMC_LPC_LA29_P	0	123	1
+FMC_LPC_LA30_N	0	153	0
+FMC_LPC_LA30_P	0	153	1
+FMC_LPC_LA31_N	0	159	0
+FMC_LPC_LA31_P	0	159	1
+FMC_LPC_LA32_N	0	157	0
+FMC_LPC_LA32_P	0	157	1
+FMC_LPC_LA33_N	0	155	0
+FMC_LPC_LA33_P	0	155	1
+FMC_LPC_PRSNT_M2C_L	56	91	1
+GPIO_DIP_SW1	41	161	0
+GPIO_DIP_SW2	41	161	1
+GPIO_DIP_SW3	41	163	0
+GPIO_DIP_SW4	41	163	1
+GPIO_DIP_SW5	41	165	0
+GPIO_DIP_SW6	41	165	1
+GPIO_DIP_SW7	41	167	0
+GPIO_DIP_SW8	41	167	1
+GPIO_LED_0	41	81	1
+GPIO_LED_1	41	83	0
+GPIO_LED_2	41	85	0
+GPIO_LED_3	41	85	1
+GPIO_LED_4	41	87	0
+GPIO_LED_5	41	89	0
+GPIO_LED_6	41	97	0
+GPIO_LED_7	41	97	1
+GPIO_LED_C	41	41	0
+GPIO_LED_E	41	39	1
+GPIO_LED_N	41	79	1
+GPIO_LED_S	41	79	0
+GPIO_LED_W	41	39	0
+GPIO_SW_C	41	147	1
+GPIO_SW_E	56	193	0
+GPIO_SW_N	41	169	0
+GPIO_SW_S	41	169	1
+GPIO_SW_W	56	193	1
+IIC_SCL_DVI	56	81	1
+IIC_SCL_MAIN_LS	56	89	1
+IIC_SCL_SFP	0	79	1
+IIC_SDA_DVI	56	81	0
+IIC_SDA_MAIN_LS	56	91	0
+IIC_SDA_SFP	0	79	0
+LCD_DB4_LS	56	75	1
+LCD_DB5_LS	56	77	0
+LCD_DB6_LS	56	77	1
+LCD_DB7_LS	56	79	0
+LCD_E_LS	56	73	1
+LCD_RS_LS	0	117	1
+LCD_RW_LS	56	75	0
+P30_CS_SEL	56	73	0
+PCIE_PERST_B_LS	56	79	1
+PCIE_WAKE_B_LS	41	81	0
+PHY_COL	56	45	1
+PHY_CRS	56	45	0
+PHY_INT	56	43	0
+PHY_MDC	56	41	1
+PHY_MDIO	56	41	0
+PHY_RESET	56	43	1
+PHY_RXCLK	56	57	1
+PHY_RXCTL_RXDV	56	49	0
+PHY_RXD0	56	49	1
+PHY_RXD1	56	51	0
+PHY_RXD2	56	51	1
+PHY_RXD3	56	53	0
+PHY_RXD4	56	53	1
+PHY_RXD5	56	59	0
+PHY_RXD6	56	61	0
+PHY_RXD7	56	61	1
+PHY_RXER	56	47	1
+PHY_TXCLK	56	59	1
+PHY_TXCTL_TXEN	56	63	1
+PHY_TXC_GTXCLK	56	47	0
+PHY_TXD0	56	65	0
+PHY_TXD1	56	65	1
+PHY_TXD2	56	67	0
+PHY_TXD3	56	67	1
+PHY_TXD4	56	69	0
+PHY_TXD5	56	69	1
+PHY_TXD6	56	71	0
+PHY_TXD7	56	71	1
+PHY_TXER	56	63	0
+PMBUS_ALERT_LS	56	97	1
+PMBUS_CLK_LS	56	99	1
+PMBUS_CTRL_LS	56	97	0
+PMBUS_DATA_LS	56	99	0
+SFP_LOS	41	99	0
+SFP_TX_DISABLE_FPGA	56	57	0
+SM_FAN_PWM	56	101	1
+SM_FAN_TACH	56	101	0
+SYSACE_D0	56	29	0
+SYSACE_D1	56	27	1
+SYSACE_D2	56	27	0
+SYSACE_D3	56	25	1
+SYSACE_D4	56	31	1
+SYSACE_D5	56	35	0
+SYSACE_D6	56	31	0
+SYSACE_D7	56	29	1
+SYSACE_MPA00	56	21	1
+SYSACE_MPA01	56	25	0
+SYSACE_MPA02	56	23	0
+SYSACE_MPA03	56	23	1
+SYSACE_MPA04	56	39	1
+SYSACE_MPA05	56	39	0
+SYSACE_MPA06	56	37	1
+SYSACE_MPBRDY	56	35	1
+SYSACE_MPCE	56	37	0
+SYSACE_MPIRQ	56	103	1
+SYSACE_MPOE	56	33	1
+SYSACE_MPWE	56	33	0
+SYSCLK_N	56	119	0
+SYSCLK_P	56	119	1
+USB_1_CTS	41	103	1
+USB_1_RTS	41	103	0
+USB_1_RX	41	101	1
+USB_1_TX	41	101	0
+USB_A0_LS	0	93	1
+USB_A1_LS	0	81	0
+USB_CS_B_LS	0	81	1
+USB_D0_LS	0	115	1
+USB_D1_LS	0	115	0
+USB_D2_LS	0	113	1
+USB_D3_LS	0	113	0
+USB_D4_LS	0	117	0
+USB_D5_LS	0	97	1
+USB_D6_LS	0	97	0
+USB_D7_LS	0	119	1
+USB_D8_LS	0	85	1
+USB_D9_LS	0	87	0
+USB_D10_LS	0	87	1
+USB_D11_LS	0	89	0
+USB_D12_LS	0	89	1
+USB_D13_LS	0	91	0
+USB_D14_LS	0	91	1
+USB_D15_LS	0	93	0
+USB_INT_LS	0	85	0
+USB_RD_B_LS	0	83	1
+USB_RESET_B_LS	0	119	0
+USB_WR_B_LS	0	83	0
+USER_CLOCK	41	99	1
+USER_SMA_CLOCK_N	41	119	0
+USER_SMA_CLOCK_P	41	119	1
+USER_SMA_GPIO_N	0	99	0
+USER_SMA_GPIO_P	0	99	1
+VAUX_CURR_N	0	135	0
+VAUX_CURR_P	0	135	1
+VAUX_VOLT_N	0	145	0
+VAUX_VOLT_P	0	145	1
diff --git vtr_flow/arch/xilinx/xc6vlx240t.ptc2name vtr_flow/arch/xilinx/xc6vlx240t.ptc2name
new file mode 100644
index 0000000..bfa8ec7
--- /dev/null
+++ vtr_flow/arch/xilinx/xc6vlx240t.ptc2name
@@ -0,0 +1,1093 @@
+#pb_type	ptc	type	wirename
+1	0	IPIN	LIOB_O0
+1	1	OPIN	LIOB_IBUF0
+1	2	OPIN	GND_WIRE
+1	3	OPIN	VCC_WIRE
+1	4	IPIN	LIOB_O1
+1	5	OPIN	LIOB_IBUF1
+1	0	IPIN	RIOB_O0
+1	1	OPIN	RIOB_IBUF0
+1	4	IPIN	RIOB_O1
+1	5	OPIN	RIOB_IBUF1
+2	0	IPIN	CLBLM_M_A6
+2	1	IPIN	CLBLM_M_A5
+2	2	IPIN	CLBLM_M_A4
+2	3	IPIN	CLBLM_M_A3
+2	4	IPIN	CLBLM_M_A2
+2	5	IPIN	CLBLM_M_A1
+2	6	IPIN	CLBLM_M_A6
+2	7 	IPIN	CLBLM_M_AX
+2	8       IPIN	CLBLM_M_B6
+2	9       IPIN	CLBLM_M_B5
+2	10      IPIN	CLBLM_M_B4
+2	11	IPIN	CLBLM_M_B3
+2	12	IPIN	CLBLM_M_B2
+2	13	IPIN	CLBLM_M_B1
+2	14	IPIN	CLBLM_M_B6
+2	15	IPIN	CLBLM_M_BX
+2	16	IPIN	CLBLM_M_C6
+2	17	IPIN	CLBLM_M_C5
+2	18	IPIN	CLBLM_M_C4
+2	19	IPIN	CLBLM_M_C3
+2	20	IPIN	CLBLM_M_C2
+2	21	IPIN	CLBLM_M_C1
+2	22	IPIN	CLBLM_M_C6
+2	23	IPIN	CLBLM_M_CX
+2	24	IPIN	CLBLM_M_D6
+2	25	IPIN	CLBLM_M_D5
+2	26	IPIN	CLBLM_M_D4
+2	27	IPIN	CLBLM_M_D3
+2	28	IPIN	CLBLM_M_D2
+2	29	IPIN	CLBLM_M_D1
+2	30	IPIN	CLBLM_M_D6
+2	31	IPIN	CLBLM_M_DX
+2	32	IPIN	CLBLM_M_CIN
+2	33	OPIN	CLBLM_M_A
+2	34	OPIN	CLBLM_M_AQ
+2	35	OPIN	CLBLM_M_AMUX
+2	36	OPIN	CLBLM_M_B
+2	37	OPIN	CLBLM_M_BQ
+2	38	OPIN	CLBLM_M_BMUX
+2	39	OPIN	CLBLM_M_C
+2	40	OPIN	CLBLM_M_CQ
+2	41	OPIN	CLBLM_M_CMUX
+2	42	OPIN	CLBLM_M_D
+2	43	OPIN	CLBLM_M_DQ
+2	44	OPIN	CLBLM_M_DMUX
+2	45	OPIN	CLBLM_M_COUT
+2	46	OPIN	GND_WIRE
+2	47	OPIN	VCC_WIRE
+2	48	IPIN	CLBLM_M_CLK
+2	49	IPIN	CLBLM_L_A6
+2	50	IPIN	CLBLM_L_A5
+2	51	IPIN	CLBLM_L_A4
+2	52	IPIN	CLBLM_L_A3
+2	53	IPIN	CLBLM_L_A2
+2	54	IPIN	CLBLM_L_A1
+2	55	IPIN	CLBLM_L_A6
+2	56	IPIN	CLBLM_L_AX
+2	57	IPIN	CLBLM_L_B6
+2	58	IPIN	CLBLM_L_B5
+2	59	IPIN	CLBLM_L_B4
+2	60	IPIN	CLBLM_L_B3
+2	61	IPIN	CLBLM_L_B2
+2	62	IPIN	CLBLM_L_B1
+2	63	IPIN	CLBLM_L_B6
+2	64	IPIN	CLBLM_L_BX
+2	65	IPIN	CLBLM_L_C6
+2	66	IPIN	CLBLM_L_C5
+2	67	IPIN	CLBLM_L_C4
+2	68	IPIN	CLBLM_L_C3
+2	69	IPIN	CLBLM_L_C2
+2	70	IPIN	CLBLM_L_C1
+2	71	IPIN	CLBLM_L_C6
+2	72	IPIN	CLBLM_L_CX
+2	73	IPIN	CLBLM_L_D6
+2	74	IPIN	CLBLM_L_D5
+2	75	IPIN	CLBLM_L_D4
+2	76	IPIN	CLBLM_L_D3
+2	77	IPIN	CLBLM_L_D2
+2	78	IPIN	CLBLM_L_D1
+2	79	IPIN	CLBLM_L_D6
+2	80	IPIN	CLBLM_L_DX
+2	81	IPIN	CLBLM_L_CIN
+2	82	OPIN	CLBLM_L_A
+2	83	OPIN	CLBLM_L_AQ
+2	84	OPIN	CLBLM_L_AMUX
+2	85	OPIN	CLBLM_L_B
+2	86	OPIN	CLBLM_L_BQ
+2	87	OPIN	CLBLM_L_BMUX
+2	88	OPIN	CLBLM_L_C
+2	89	OPIN	CLBLM_L_CQ
+2	90	OPIN	CLBLM_L_CMUX
+2	91	OPIN	CLBLM_L_D
+2	92	OPIN	CLBLM_L_DQ
+2	93	OPIN	CLBLM_L_DMUX
+2	94	OPIN	CLBLM_L_COUT
+2	97	IPIN	CLBLM_L_CLK
+2	0	IPIN	CLBLL_LL_A6
+2	1	IPIN	CLBLL_LL_A5
+2	2	IPIN	CLBLL_LL_A4
+2	3	IPIN	CLBLL_LL_A3
+2	4	IPIN	CLBLL_LL_A2
+2	5	IPIN	CLBLL_LL_A1
+2	6	IPIN	CLBLL_LL_A6
+2	7 	IPIN	CLBLL_LL_AX
+2	8       IPIN	CLBLL_LL_B6
+2	9       IPIN	CLBLL_LL_B5
+2	10      IPIN	CLBLL_LL_B4
+2	11	IPIN	CLBLL_LL_B3
+2	12	IPIN	CLBLL_LL_B2
+2	13	IPIN	CLBLL_LL_B1
+2	14	IPIN	CLBLL_LL_B6
+2	15	IPIN	CLBLL_LL_BX
+2	16	IPIN	CLBLL_LL_C6
+2	17	IPIN	CLBLL_LL_C5
+2	18	IPIN	CLBLL_LL_C4
+2	19	IPIN	CLBLL_LL_C3
+2	20	IPIN	CLBLL_LL_C2
+2	21	IPIN	CLBLL_LL_C1
+2	22	IPIN	CLBLL_LL_C6
+2	23	IPIN	CLBLL_LL_CX
+2	24	IPIN	CLBLL_LL_D6
+2	25	IPIN	CLBLL_LL_D5
+2	26	IPIN	CLBLL_LL_D4
+2	27	IPIN	CLBLL_LL_D3
+2	28	IPIN	CLBLL_LL_D2
+2	29	IPIN	CLBLL_LL_D1
+2	30	IPIN	CLBLL_LL_D6
+2	31	IPIN	CLBLL_LL_DX
+2	32	IPIN	CLBLL_LL_CIN
+2	33	OPIN	CLBLL_LL_A
+2	34	OPIN	CLBLL_LL_AQ
+2	35	OPIN	CLBLL_LL_AMUX
+2	36	OPIN	CLBLL_LL_B
+2	37	OPIN	CLBLL_LL_BQ
+2	38	OPIN	CLBLL_LL_BMUX
+2	39	OPIN	CLBLL_LL_C
+2	40	OPIN	CLBLL_LL_CQ
+2	41	OPIN	CLBLL_LL_CMUX
+2	42	OPIN	CLBLL_LL_D
+2	43	OPIN	CLBLL_LL_DQ
+2	44	OPIN	CLBLL_LL_DMUX
+2	45	OPIN	CLBLL_LL_COUT
+2	48	IPIN	CLBLL_LL_CLK
+2	49	IPIN	CLBLL_L_A6
+2	50	IPIN	CLBLL_L_A5
+2	51	IPIN	CLBLL_L_A4
+2	52	IPIN	CLBLL_L_A3
+2	53	IPIN	CLBLL_L_A2
+2	54	IPIN	CLBLL_L_A1
+2	55	IPIN	CLBLL_L_A6
+2	56	IPIN	CLBLL_L_AX
+2	57	IPIN	CLBLL_L_B6
+2	58	IPIN	CLBLL_L_B5
+2	59	IPIN	CLBLL_L_B4
+2	60	IPIN	CLBLL_L_B3
+2	61	IPIN	CLBLL_L_B2
+2	62	IPIN	CLBLL_L_B1
+2	63	IPIN	CLBLL_L_B6
+2	64	IPIN	CLBLL_L_BX
+2	65	IPIN	CLBLL_L_C6
+2	66	IPIN	CLBLL_L_C5
+2	67	IPIN	CLBLL_L_C4
+2	68	IPIN	CLBLL_L_C3
+2	69	IPIN	CLBLL_L_C2
+2	70	IPIN	CLBLL_L_C1
+2	71	IPIN	CLBLL_L_C6
+2	72	IPIN	CLBLL_L_CX
+2	73	IPIN	CLBLL_L_D6
+2	74	IPIN	CLBLL_L_D5
+2	75	IPIN	CLBLL_L_D4
+2	76	IPIN	CLBLL_L_D3
+2	77	IPIN	CLBLL_L_D2
+2	78	IPIN	CLBLL_L_D1
+2	79	IPIN	CLBLL_L_D6
+2	80	IPIN	CLBLL_L_DX
+2	81	IPIN	CLBLL_L_CIN
+2	82	OPIN	CLBLL_L_A
+2	83	OPIN	CLBLL_L_AQ
+2	84	OPIN	CLBLL_L_AMUX
+2	85	OPIN	CLBLL_L_B
+2	86	OPIN	CLBLL_L_BQ
+2	87	OPIN	CLBLL_L_BMUX
+2	88	OPIN	CLBLL_L_C
+2	89	OPIN	CLBLL_L_CQ
+2	90	OPIN	CLBLL_L_CMUX
+2	91	OPIN	CLBLL_L_D
+2	92	OPIN	CLBLL_L_DQ
+2	93	OPIN	CLBLL_L_DMUX
+2	94	OPIN	CLBLL_L_COUT
+2	97	IPIN	CLBLL_L_CLK
+3	0       IPIN	DSP_0_A0
+3	1       IPIN	DSP_0_A1
+3	2       IPIN	DSP_0_A2
+3	3       IPIN	DSP_0_A3
+3	4       IPIN	DSP_0_A4
+3	5       IPIN	DSP_0_A5
+3	6       IPIN	DSP_0_A6
+3	7       IPIN	DSP_0_A7
+3	8       IPIN	DSP_0_A8
+3	9       IPIN	DSP_0_A9
+3	10      IPIN	DSP_0_A10
+3	11      IPIN	DSP_0_A11
+3	12      IPIN	DSP_0_A12
+3	13      IPIN	DSP_0_A13
+3	14      IPIN	DSP_0_A14
+3	15      IPIN	DSP_0_A15
+3	16      IPIN	DSP_0_A16
+3	17      IPIN	DSP_0_A17
+3	18      IPIN	DSP_0_A18
+3	19      IPIN	DSP_0_A19
+3	20      IPIN	DSP_0_A20
+3	21      IPIN	DSP_0_A21
+3	22      IPIN	DSP_0_A22
+3	23      IPIN	DSP_0_A23
+3	24      IPIN	DSP_0_A24
+3	25      IPIN	DSP_0_A25
+3	26      IPIN	DSP_0_A26
+3	27      IPIN	DSP_0_A27
+3	28      IPIN	DSP_0_A28
+3	29      IPIN	DSP_0_A29
+3	30      IPIN	DSP_0_B0
+3	31 	IPIN	DSP_0_B1
+3	32 	IPIN	DSP_0_B2
+3	33 	IPIN	DSP_0_B3
+3	34 	IPIN	DSP_0_B4
+3	35 	IPIN	DSP_0_B5
+3	36 	IPIN	DSP_0_B6
+3	37 	IPIN	DSP_0_B7
+3	38 	IPIN	DSP_0_B8
+3	39 	IPIN	DSP_0_B9
+3	40      IPIN	DSP_0_B10
+3	41      IPIN	DSP_0_B11
+3	42      IPIN	DSP_0_B12
+3	43      IPIN	DSP_0_B13
+3	44      IPIN	DSP_0_B14
+3	45      IPIN	DSP_0_B15
+3	46      IPIN	DSP_0_B16
+3	47      IPIN	DSP_0_B17
+3	48      IPIN	DSP_0_CEA1
+3	49      IPIN	DSP_0_CEA2
+3	50      IPIN	DSP_0_CEB1
+3	51      IPIN	DSP_0_CEB2
+3	52      IPIN	DSP_0_CEM
+3	53      IPIN	DSP_0_CEP
+3	54 	IPIN	DSP_0_INMODE0
+3	55 	IPIN	DSP_0_INMODE1
+3	56 	IPIN	DSP_0_INMODE2
+3	57 	IPIN	DSP_0_INMODE3
+3	58 	IPIN	DSP_0_INMODE4
+3	59 	IPIN	DSP_0_OPMODE0
+3	60 	IPIN	DSP_0_OPMODE1
+3	61 	IPIN	DSP_0_OPMODE2
+3	62 	IPIN	DSP_0_OPMODE3
+3	63 	IPIN	DSP_0_OPMODE4
+3	64 	IPIN	DSP_0_OPMODE5
+3	65 	IPIN	DSP_0_OPMODE6
+3	66  	OPIN	DSP_0_P0
+3	67      OPIN	DSP_0_P1
+3	68      OPIN	DSP_0_P2
+3	69      OPIN	DSP_0_P3
+3	70 	OPIN	DSP_0_P4
+3	71 	OPIN	DSP_0_P5
+3	72 	OPIN	DSP_0_P6
+3	73 	OPIN	DSP_0_P7
+3	74 	OPIN	DSP_0_P8
+3	75 	OPIN	DSP_0_P9
+3	76 	OPIN	DSP_0_P10
+3	77 	OPIN	DSP_0_P11
+3	78 	OPIN	DSP_0_P12
+3	79 	OPIN	DSP_0_P13
+3	80 	OPIN	DSP_0_P14
+3	81 	OPIN	DSP_0_P15
+3	82 	OPIN	DSP_0_P16
+3	83 	OPIN	DSP_0_P17
+3	84 	OPIN	DSP_0_P18
+3	85 	OPIN	DSP_0_P19
+3	86 	OPIN	DSP_0_P20
+3	87 	OPIN	DSP_0_P21
+3	88 	OPIN	DSP_0_P22
+3	89 	OPIN	DSP_0_P23
+3	90 	OPIN	DSP_0_P24
+3	91 	OPIN	DSP_0_P25
+3	92 	OPIN	DSP_0_P26
+3	93 	OPIN	DSP_0_P27
+3	94 	OPIN	DSP_0_P28
+3	95 	OPIN	DSP_0_P29
+3	96 	OPIN	DSP_0_P30
+3	97 	OPIN	DSP_0_P31
+3	98 	OPIN	DSP_0_P32
+3	99 	OPIN	DSP_0_P33
+3	100	OPIN	DSP_0_P34
+3	101	OPIN	DSP_0_P35
+3	102	OPIN	DSP_0_P36
+3	103	OPIN	DSP_0_P37
+3	104	OPIN	DSP_0_P38
+3	105	OPIN	DSP_0_P39
+3	106	OPIN	DSP_0_P40
+3	107	OPIN	DSP_0_P41
+3	108	OPIN	DSP_0_P42
+3	109	OPIN	DSP_0_P43
+3	110	OPIN	DSP_0_P44
+3	111	OPIN	DSP_0_P45
+3	112	OPIN	DSP_0_P46
+3	113	OPIN	DSP_0_P47
+3	114	OPIN	GND_WIRE
+3	115	OPIN	VCC_WIRE
+3	116	IPIN	DSP_0_CLK
+3	117	IPIN	DSP_1_A0
+3	118     IPIN	DSP_1_A1
+3	119	IPIN	DSP_1_A2
+3	120	IPIN	DSP_1_A3
+3	121     IPIN	DSP_1_A4
+3	122	IPIN	DSP_1_A5
+3	123	IPIN	DSP_1_A6
+3	124	IPIN	DSP_1_A7
+3	125	IPIN	DSP_1_A8
+3	126	IPIN	DSP_1_A9
+3	127     IPIN	DSP_1_A10
+3	128     IPIN	DSP_1_A11
+3	129     IPIN	DSP_1_A12
+3	130     IPIN	DSP_1_A13
+3	131     IPIN	DSP_1_A14
+3	132     IPIN	DSP_1_A15
+3	133     IPIN	DSP_1_A16
+3	134     IPIN	DSP_1_A17
+3	135     IPIN	DSP_1_A18
+3	136     IPIN	DSP_1_A19
+3	137     IPIN	DSP_1_A20
+3	138     IPIN	DSP_1_A21
+3	139     IPIN	DSP_1_A22
+3	140     IPIN	DSP_1_A23
+3	141     IPIN	DSP_1_A24
+3	142     IPIN	DSP_1_A25
+3	143     IPIN	DSP_1_A26
+3	144     IPIN	DSP_1_A27
+3	145     IPIN	DSP_1_A28
+3	146     IPIN	DSP_1_A29
+3	147     IPIN	DSP_1_B0
+3	148	IPIN	DSP_1_B1
+3	149	IPIN	DSP_1_B2
+3	150	IPIN	DSP_1_B3
+3	151	IPIN	DSP_1_B4
+3	152	IPIN	DSP_1_B5
+3	153	IPIN	DSP_1_B6
+3	154	IPIN	DSP_1_B7
+3	155	IPIN	DSP_1_B8
+3	156	IPIN	DSP_1_B9
+3	157     IPIN	DSP_1_B10
+3	158     IPIN	DSP_1_B11
+3	159	IPIN	DSP_1_B12
+3	160	IPIN	DSP_1_B13
+3	161	IPIN	DSP_1_B14
+3	162	IPIN	DSP_1_B15
+3	163	IPIN	DSP_1_B16
+3	164	IPIN	DSP_1_B17
+3	165	IPIN	DSP_1_CEA1
+3	166	IPIN	DSP_1_CEA2
+3	167	IPIN	DSP_1_CEB1
+3	168	IPIN	DSP_1_CEB2
+3	169	IPIN	DSP_1_CEM
+3	170	IPIN	DSP_1_CEP
+3	171	IPIN	DSP_1_INMODE0
+3	172	IPIN	DSP_1_INMODE1
+3	173	IPIN	DSP_1_INMODE2
+3	174	IPIN	DSP_1_INMODE3
+3	175	IPIN	DSP_1_INMODE4
+3	176	IPIN	DSP_1_OPMODE0
+3	177	IPIN	DSP_1_OPMODE1
+3	178	IPIN	DSP_1_OPMODE2
+3	179	IPIN	DSP_1_OPMODE3
+3	180	IPIN	DSP_1_OPMODE4
+3	181	IPIN	DSP_1_OPMODE5
+3	182	IPIN	DSP_1_OPMODE6
+3	183	OPIN	DSP_1_P0
+3	184	OPIN	DSP_1_P1
+3	185	OPIN	DSP_1_P2
+3	186	OPIN	DSP_1_P3
+3	187	OPIN	DSP_1_P4
+3	188	OPIN	DSP_1_P5
+3	189	OPIN	DSP_1_P6
+3	190	OPIN	DSP_1_P7
+3	191	OPIN	DSP_1_P8
+3	192	OPIN	DSP_1_P9
+3	193	OPIN	DSP_1_P10
+3	194	OPIN	DSP_1_P11
+3	195	OPIN	DSP_1_P12
+3	196	OPIN	DSP_1_P13
+3	197	OPIN	DSP_1_P14
+3	198	OPIN	DSP_1_P15
+3	199	OPIN	DSP_1_P16
+3	200	OPIN	DSP_1_P17
+3	201	OPIN	DSP_1_P18
+3	202	OPIN	DSP_1_P19
+3	203	OPIN	DSP_1_P20
+3	204	OPIN	DSP_1_P21
+3	205	OPIN	DSP_1_P22
+3	206	OPIN	DSP_1_P23
+3	207	OPIN	DSP_1_P24
+3	208	OPIN	DSP_1_P25
+3	209	OPIN	DSP_1_P26
+3	210	OPIN	DSP_1_P27
+3	211	OPIN	DSP_1_P28
+3	212	OPIN	DSP_1_P29
+3	213	OPIN	DSP_1_P30
+3	214	OPIN	DSP_1_P31
+3	215	OPIN	DSP_1_P32
+3	216	OPIN	DSP_1_P33
+3	217	OPIN	DSP_1_P34
+3	218	OPIN	DSP_1_P35
+3	219	OPIN	DSP_1_P36
+3	220	OPIN	DSP_1_P37
+3	221	OPIN	DSP_1_P38
+3	222	OPIN	DSP_1_P39
+3	223	OPIN	DSP_1_P40
+3	224	OPIN	DSP_1_P41
+3	225	OPIN	DSP_1_P42
+3	226	OPIN	DSP_1_P43
+3	227	OPIN	DSP_1_P44
+3	228	OPIN	DSP_1_P45
+3	229	OPIN	DSP_1_P46
+3	230	OPIN	DSP_1_P47
+3	233	IPIN	DSP_1_CLK
+4	0	IPIN	BRAM_FIFO36_ADDRARDADDRL0
+4	1	IPIN	BRAM_FIFO36_ADDRARDADDRL1
+4	2	IPIN	BRAM_FIFO36_ADDRARDADDRL2
+4	3	IPIN	BRAM_FIFO36_ADDRARDADDRL3
+4	4	IPIN	BRAM_FIFO36_ADDRARDADDRL4
+4	5	IPIN	BRAM_FIFO36_ADDRARDADDRL5
+4	6	IPIN	BRAM_FIFO36_ADDRARDADDRL6
+4	7	IPIN	BRAM_FIFO36_ADDRARDADDRL7
+4	8	IPIN	BRAM_FIFO36_ADDRARDADDRL8
+4	9	IPIN	BRAM_FIFO36_ADDRARDADDRL9
+4	10	IPIN	BRAM_FIFO36_ADDRARDADDRL10
+4	11	IPIN	BRAM_FIFO36_ADDRARDADDRL11
+4	12	IPIN	BRAM_FIFO36_ADDRARDADDRL12
+4	13	IPIN	BRAM_FIFO36_ADDRARDADDRL13
+4	14	IPIN	BRAM_FIFO36_ADDRARDADDRL14
+4	15	IPIN	BRAM_FIFO36_ADDRARDADDRL15
+4	16	IPIN	BRAM_FIFO36_ADDRARDADDRU0
+4	17	IPIN	BRAM_FIFO36_ADDRARDADDRU1
+4	18	IPIN	BRAM_FIFO36_ADDRARDADDRU2
+4	19	IPIN	BRAM_FIFO36_ADDRARDADDRU3
+4	20	IPIN	BRAM_FIFO36_ADDRARDADDRU4
+4	21	IPIN	BRAM_FIFO36_ADDRARDADDRU5
+4	22	IPIN	BRAM_FIFO36_ADDRARDADDRU6
+4	23	IPIN	BRAM_FIFO36_ADDRARDADDRU7
+4	24	IPIN	BRAM_FIFO36_ADDRARDADDRU8
+4	25	IPIN	BRAM_FIFO36_ADDRARDADDRU9
+4	26	IPIN	BRAM_FIFO36_ADDRARDADDRU10
+4	27	IPIN	BRAM_FIFO36_ADDRARDADDRU11
+4	28	IPIN	BRAM_FIFO36_ADDRARDADDRU12
+4	29	IPIN	BRAM_FIFO36_ADDRARDADDRU13
+4	30	IPIN	BRAM_FIFO36_ADDRARDADDRU14
+4	31	IPIN	BRAM_FIFO36_ADDRBWRADDRL0
+4	32      IPIN	BRAM_FIFO36_ADDRBWRADDRL1
+4	33      IPIN	BRAM_FIFO36_ADDRBWRADDRL2
+4	34      IPIN	BRAM_FIFO36_ADDRBWRADDRL3
+4	35      IPIN	BRAM_FIFO36_ADDRBWRADDRL4
+4	36      IPIN	BRAM_FIFO36_ADDRBWRADDRL5
+4	37      IPIN	BRAM_FIFO36_ADDRBWRADDRL6
+4	38      IPIN	BRAM_FIFO36_ADDRBWRADDRL7
+4	39      IPIN	BRAM_FIFO36_ADDRBWRADDRL8
+4	40      IPIN	BRAM_FIFO36_ADDRBWRADDRL9
+4	41      IPIN	BRAM_FIFO36_ADDRBWRADDRL10
+4	42      IPIN	BRAM_FIFO36_ADDRBWRADDRL11
+4	43      IPIN	BRAM_FIFO36_ADDRBWRADDRL12
+4	44      IPIN	BRAM_FIFO36_ADDRBWRADDRL13
+4	45      IPIN	BRAM_FIFO36_ADDRBWRADDRL14
+4	46      IPIN	BRAM_FIFO36_ADDRBWRADDRL15
+4	47      IPIN	BRAM_FIFO36_ADDRBWRADDRU0
+4	48      IPIN	BRAM_FIFO36_ADDRBWRADDRU1
+4	49      IPIN	BRAM_FIFO36_ADDRBWRADDRU2
+4	50      IPIN	BRAM_FIFO36_ADDRBWRADDRU3
+4	51      IPIN	BRAM_FIFO36_ADDRBWRADDRU4
+4	52      IPIN	BRAM_FIFO36_ADDRBWRADDRU5
+4	53      IPIN	BRAM_FIFO36_ADDRBWRADDRU6
+4	54      IPIN	BRAM_FIFO36_ADDRBWRADDRU7
+4	55      IPIN	BRAM_FIFO36_ADDRBWRADDRU8
+4	56      IPIN	BRAM_FIFO36_ADDRBWRADDRU9
+4	57      IPIN	BRAM_FIFO36_ADDRBWRADDRU10
+4	58      IPIN	BRAM_FIFO36_ADDRBWRADDRU11
+4	59      IPIN	BRAM_FIFO36_ADDRBWRADDRU12
+4	60      IPIN	BRAM_FIFO36_ADDRBWRADDRU13
+4	61      IPIN	BRAM_FIFO36_ADDRBWRADDRU14
+4	62      IPIN	BRAM_FIFO36_DIADIL0
+4	63      IPIN	BRAM_FIFO36_DIADIL1
+4	64      IPIN	BRAM_FIFO36_DIADIL2
+4	65      IPIN	BRAM_FIFO36_DIADIL3
+4	66      IPIN	BRAM_FIFO36_DIADIL4
+4	67      IPIN	BRAM_FIFO36_DIADIL5
+4	68      IPIN	BRAM_FIFO36_DIADIL6
+4	69      IPIN	BRAM_FIFO36_DIADIL7
+4	70      IPIN	BRAM_FIFO36_DIADIL8
+4	71      IPIN	BRAM_FIFO36_DIADIL9
+4	72      IPIN	BRAM_FIFO36_DIADIL10
+4	73      IPIN	BRAM_FIFO36_DIADIL11
+4	74      IPIN	BRAM_FIFO36_DIADIL12
+4	75      IPIN	BRAM_FIFO36_DIADIL13
+4	76      IPIN	BRAM_FIFO36_DIADIL14
+4	77      IPIN	BRAM_FIFO36_DIADIL15
+4	78      IPIN	BRAM_FIFO36_DIADIU0
+4	79      IPIN	BRAM_FIFO36_DIADIU1
+4	80      IPIN	BRAM_FIFO36_DIADIU2
+4	81      IPIN	BRAM_FIFO36_DIADIU3
+4	82      IPIN	BRAM_FIFO36_DIADIU4
+4	83      IPIN	BRAM_FIFO36_DIADIU5
+4	84      IPIN	BRAM_FIFO36_DIADIU6
+4	85      IPIN	BRAM_FIFO36_DIADIU7
+4	86      IPIN	BRAM_FIFO36_DIADIU8
+4	87      IPIN	BRAM_FIFO36_DIADIU9
+4	88      IPIN	BRAM_FIFO36_DIADIU10
+4	89      IPIN	BRAM_FIFO36_DIADIU11
+4	90      IPIN	BRAM_FIFO36_DIADIU12
+4	91      IPIN	BRAM_FIFO36_DIADIU13
+4	92      IPIN	BRAM_FIFO36_DIADIU14
+4	93      IPIN	BRAM_FIFO36_DIADIU15
+4	94      IPIN	BRAM_FIFO36_DIPADIPL0
+4	95      IPIN	BRAM_FIFO36_DIPADIPL1
+4	96      IPIN	BRAM_FIFO36_DIPADIPU0
+4	97      IPIN	BRAM_FIFO36_DIPADIPU1
+4	98 	IPIN	BRAM_FIFO36_WEAL0
+4	99 	IPIN	BRAM_FIFO36_WEAL1
+4	100	IPIN	BRAM_FIFO36_WEAL2
+4	101	IPIN	BRAM_FIFO36_WEAL3
+4	102	IPIN	BRAM_FIFO36_WEAU0
+4	103	IPIN	BRAM_FIFO36_WEAU1
+4	104	IPIN	BRAM_FIFO36_WEAU2
+4	105	IPIN	BRAM_FIFO36_WEAU3
+4	106	IPIN	BRAM_FIFO36_DIBDIL0
+4	107	IPIN	BRAM_FIFO36_DIBDIL1
+4	108	IPIN	BRAM_FIFO36_DIBDIL2
+4	109	IPIN	BRAM_FIFO36_DIBDIL3
+4	110	IPIN	BRAM_FIFO36_DIBDIL4
+4	111	IPIN	BRAM_FIFO36_DIBDIL5
+4	112	IPIN	BRAM_FIFO36_DIBDIL6
+4	113	IPIN	BRAM_FIFO36_DIBDIL7
+4	114	IPIN	BRAM_FIFO36_DIBDIL8
+4	115	IPIN	BRAM_FIFO36_DIBDIL9
+4	116	IPIN	BRAM_FIFO36_DIBDIL10
+4	117	IPIN	BRAM_FIFO36_DIBDIL11
+4	118	IPIN	BRAM_FIFO36_DIBDIL12
+4	119	IPIN	BRAM_FIFO36_DIBDIL13
+4	120	IPIN	BRAM_FIFO36_DIBDIL14
+4	121	IPIN	BRAM_FIFO36_DIBDIL15
+4	122	IPIN	BRAM_FIFO36_DIBDIU0
+4	123	IPIN	BRAM_FIFO36_DIBDIU1
+4	124	IPIN	BRAM_FIFO36_DIBDIU2
+4	125	IPIN	BRAM_FIFO36_DIBDIU3
+4	126	IPIN	BRAM_FIFO36_DIBDIU4
+4	127	IPIN	BRAM_FIFO36_DIBDIU5
+4	128	IPIN	BRAM_FIFO36_DIBDIU6
+4	129	IPIN	BRAM_FIFO36_DIBDIU7
+4	130	IPIN	BRAM_FIFO36_DIBDIU8
+4	131	IPIN	BRAM_FIFO36_DIBDIU9
+4	132	IPIN	BRAM_FIFO36_DIBDIU10
+4	133	IPIN	BRAM_FIFO36_DIBDIU11
+4	134	IPIN	BRAM_FIFO36_DIBDIU12
+4	135	IPIN	BRAM_FIFO36_DIBDIU13
+4	136	IPIN	BRAM_FIFO36_DIBDIU14
+4	137	IPIN	BRAM_FIFO36_DIBDIU15
+4	138	IPIN	BRAM_FIFO36_DIPBDIPL0
+4	139	IPIN	BRAM_FIFO36_DIPBDIPL1
+4	140	IPIN	BRAM_FIFO36_DIPBDIPU0
+4	141	IPIN	BRAM_FIFO36_DIPBDIPU1
+4	142	IPIN	BRAM_FIFO36_WEBWEL0
+4	143	IPIN	BRAM_FIFO36_WEBWEL1
+4	144	IPIN	BRAM_FIFO36_WEBWEL2
+4	145	IPIN	BRAM_FIFO36_WEBWEL3
+4	146	IPIN	BRAM_FIFO36_WEBWEL4
+4	147	IPIN	BRAM_FIFO36_WEBWEL5
+4	148	IPIN	BRAM_FIFO36_WEBWEL6
+4	149	IPIN	BRAM_FIFO36_WEBWEL7
+4	150	IPIN	BRAM_FIFO36_WEBWEU0
+4	151	IPIN	BRAM_FIFO36_WEBWEU1
+4	152	IPIN	BRAM_FIFO36_WEBWEU2
+4	153	IPIN	BRAM_FIFO36_WEBWEU3
+4	154	IPIN	BRAM_FIFO36_WEBWEU4
+4	155	IPIN	BRAM_FIFO36_WEBWEU5
+4	156	IPIN	BRAM_FIFO36_WEBWEU6
+4	157	IPIN	BRAM_FIFO36_WEBWEU7
+4	158	IPIN 	BRAM_FIFO36_ENARDENL
+4	159	IPIN 	BRAM_FIFO36_ENARDENU
+4	160	IPIN 	BRAM_FIFO36_ENBWRENL
+4	161	IPIN 	BRAM_FIFO36_ENBWRENU
+4	162	IPIN	BRAM_FIFO36_REGCEAREGCEL
+4	163	IPIN	BRAM_FIFO36_REGCEAREGCEU
+4	164	IPIN	BRAM_FIFO36_REGCEBL
+4	165	IPIN	BRAM_FIFO36_REGCEBU
+4	166	IPIN	BRAM_FIFO36_RSTRAMARSTRAMLRST
+4	167	IPIN	BRAM_FIFO36_RSTRAMARSTRAMU
+4	168	IPIN	BRAM_FIFO36_RSTRAMBL
+4	169	IPIN	BRAM_FIFO36_RSTRAMBU
+4	170	IPIN	BRAM_FIFO36_RSTREGARSTREGL
+4	171	IPIN	BRAM_FIFO36_RSTREGARSTREGU
+4	172	IPIN	BRAM_FIFO36_RSTREGBL
+4	173	IPIN	BRAM_FIFO36_RSTREGBU
+4	174	IPIN	BRAM_FIFO18_ADDRARDADDR0
+4	175	IPIN	BRAM_FIFO18_ADDRARDADDR1
+4	176	IPIN	BRAM_FIFO18_ADDRARDADDR2
+4	177	IPIN	BRAM_FIFO18_ADDRARDADDR3
+4	178	IPIN	BRAM_FIFO18_ADDRARDADDR4
+4	179	IPIN	BRAM_FIFO18_ADDRARDADDR5
+4	180	IPIN	BRAM_FIFO18_ADDRARDADDR6
+4	181	IPIN	BRAM_FIFO18_ADDRARDADDR7
+4	182	IPIN	BRAM_FIFO18_ADDRARDADDR8
+4	183	IPIN	BRAM_FIFO18_ADDRARDADDR9
+4	184	IPIN	BRAM_FIFO18_ADDRARDADDR10
+4	185	IPIN	BRAM_FIFO18_ADDRARDADDR11
+4	186	IPIN	BRAM_FIFO18_ADDRARDADDR12
+4	187	IPIN	BRAM_FIFO18_ADDRARDADDR13
+4	188	IPIN	BRAM_FIFO18_ADDRBWRADDR0
+4	189	IPIN	BRAM_FIFO18_ADDRBWRADDR1
+4	190	IPIN	BRAM_FIFO18_ADDRBWRADDR2
+4	191	IPIN	BRAM_FIFO18_ADDRBWRADDR3
+4	192	IPIN	BRAM_FIFO18_ADDRBWRADDR4
+4	193	IPIN	BRAM_FIFO18_ADDRBWRADDR5
+4	194	IPIN	BRAM_FIFO18_ADDRBWRADDR6
+4	195	IPIN	BRAM_FIFO18_ADDRBWRADDR7
+4	196	IPIN	BRAM_FIFO18_ADDRBWRADDR8
+4	197	IPIN	BRAM_FIFO18_ADDRBWRADDR9
+4	198	IPIN	BRAM_FIFO18_ADDRBWRADDR10
+4	199	IPIN	BRAM_FIFO18_ADDRBWRADDR11
+4	200	IPIN	BRAM_FIFO18_ADDRBWRADDR12
+4	201	IPIN	BRAM_FIFO18_ADDRBWRADDR13
+4	202	IPIN	BRAM_FIFO18_DIADI0
+4	203	IPIN	BRAM_FIFO18_DIADI1
+4	204	IPIN	BRAM_FIFO18_DIADI2
+4	205	IPIN	BRAM_FIFO18_DIADI3
+4	206	IPIN	BRAM_FIFO18_DIADI4
+4	207	IPIN	BRAM_FIFO18_DIADI5
+4	208	IPIN	BRAM_FIFO18_DIADI6
+4	209	IPIN	BRAM_FIFO18_DIADI7
+4	210	IPIN	BRAM_FIFO18_DIADI8
+4	211	IPIN	BRAM_FIFO18_DIADI9
+4	212	IPIN	BRAM_FIFO18_DIADI10
+4	213	IPIN	BRAM_FIFO18_DIADI11
+4	214	IPIN	BRAM_FIFO18_DIADI12
+4	215	IPIN	BRAM_FIFO18_DIADI13
+4	216	IPIN	BRAM_FIFO18_DIADI14
+4	217	IPIN	BRAM_FIFO18_DIADI15
+4	218	IPIN	BRAM_FIFO18_DIPADIP0
+4	219	IPIN	BRAM_FIFO18_DIPADIP1
+4	220	IPIN	BRAM_FIFO18_WEA0
+4	221	IPIN	BRAM_FIFO18_WEA1
+4	222	IPIN	BRAM_FIFO18_WEA2
+4	223	IPIN	BRAM_FIFO18_WEA3
+4	224	IPIN	BRAM_FIFO18_DIBDI0
+4	225	IPIN	BRAM_FIFO18_DIBDI1
+4	226	IPIN	BRAM_FIFO18_DIBDI2
+4	227	IPIN	BRAM_FIFO18_DIBDI3
+4	228	IPIN	BRAM_FIFO18_DIBDI4
+4	229	IPIN	BRAM_FIFO18_DIBDI5
+4	230	IPIN	BRAM_FIFO18_DIBDI6
+4	231	IPIN	BRAM_FIFO18_DIBDI7
+4	232	IPIN	BRAM_FIFO18_DIBDI8
+4	233	IPIN	BRAM_FIFO18_DIBDI9
+4	234	IPIN	BRAM_FIFO18_DIBDI10
+4	235	IPIN	BRAM_FIFO18_DIBDI11
+4	236	IPIN	BRAM_FIFO18_DIBDI12
+4	237	IPIN	BRAM_FIFO18_DIBDI13
+4	238	IPIN	BRAM_FIFO18_DIBDI14
+4	239	IPIN	BRAM_FIFO18_DIBDI15
+4	240	IPIN	BRAM_FIFO18_DIPBDIP0
+4	241	IPIN	BRAM_FIFO18_DIPBDIP1
+4	242	IPIN	BRAM_FIFO18_WEBWE0
+4	243	IPIN	BRAM_FIFO18_WEBWE1
+4	244	IPIN	BRAM_FIFO18_WEBWE2
+4	245	IPIN	BRAM_FIFO18_WEBWE3
+4	246	IPIN	BRAM_FIFO18_WEBWE4
+4	247	IPIN	BRAM_FIFO18_WEBWE5
+4	248	IPIN	BRAM_FIFO18_WEBWE6
+4	249	IPIN	BRAM_FIFO18_WEBWE7
+4	250	IPIN 	BRAM_FIFO18_ENARDEN
+4	251	IPIN 	BRAM_FIFO18_ENBWREN
+4	252	IPIN 	BRAM_FIFO18_ADDRATIEHIGH0
+4	253	IPIN 	BRAM_FIFO18_ADDRATIEHIGH1
+4	254	IPIN 	BRAM_FIFO18_ADDRBTIEHIGH0
+4	255	IPIN 	BRAM_FIFO18_ADDRBTIEHIGH1
+4	256	IPIN 	BRAM_FIFO18_REGCEAREGCE
+4	257	IPIN 	BRAM_FIFO18_REGCEB
+4	258	IPIN 	BRAM_FIFO18_RSTRAMARSTRAM
+4	259	IPIN 	BRAM_FIFO18_RSTRAMB
+4	260	IPIN 	BRAM_FIFO18_RSTREGARSTREG
+4	261	IPIN 	BRAM_FIFO18_RSTREGB
+4	262	IPIN	BRAM_RAMB18_ADDRARDADDR0
+4	263	IPIN	BRAM_RAMB18_ADDRARDADDR1
+4	264	IPIN	BRAM_RAMB18_ADDRARDADDR2
+4	265	IPIN	BRAM_RAMB18_ADDRARDADDR3
+4	266	IPIN	BRAM_RAMB18_ADDRARDADDR4
+4	267	IPIN	BRAM_RAMB18_ADDRARDADDR5
+4	268	IPIN	BRAM_RAMB18_ADDRARDADDR6
+4	269	IPIN	BRAM_RAMB18_ADDRARDADDR7
+4	270	IPIN	BRAM_RAMB18_ADDRARDADDR8
+4	271	IPIN	BRAM_RAMB18_ADDRARDADDR9
+4	272	IPIN	BRAM_RAMB18_ADDRARDADDR10
+4	273	IPIN	BRAM_RAMB18_ADDRARDADDR11
+4	274	IPIN	BRAM_RAMB18_ADDRARDADDR12
+4	275	IPIN	BRAM_RAMB18_ADDRARDADDR13
+4	276	IPIN	BRAM_RAMB18_ADDRBWRADDR0
+4	277	IPIN	BRAM_RAMB18_ADDRBWRADDR1
+4	278	IPIN	BRAM_RAMB18_ADDRBWRADDR2
+4	279	IPIN	BRAM_RAMB18_ADDRBWRADDR3
+4	280	IPIN	BRAM_RAMB18_ADDRBWRADDR4
+4	281	IPIN	BRAM_RAMB18_ADDRBWRADDR5
+4	282	IPIN	BRAM_RAMB18_ADDRBWRADDR6
+4	283	IPIN	BRAM_RAMB18_ADDRBWRADDR7
+4	284	IPIN	BRAM_RAMB18_ADDRBWRADDR8
+4	285	IPIN	BRAM_RAMB18_ADDRBWRADDR9
+4	286	IPIN	BRAM_RAMB18_ADDRBWRADDR10
+4	287	IPIN	BRAM_RAMB18_ADDRBWRADDR11
+4	288	IPIN	BRAM_RAMB18_ADDRBWRADDR12
+4	289	IPIN	BRAM_RAMB18_ADDRBWRADDR13
+4	290	IPIN	BRAM_RAMB18_DIADI0
+4	291	IPIN	BRAM_RAMB18_DIADI1
+4	292	IPIN	BRAM_RAMB18_DIADI2
+4	293	IPIN	BRAM_RAMB18_DIADI3
+4	294	IPIN	BRAM_RAMB18_DIADI4
+4	295	IPIN	BRAM_RAMB18_DIADI5
+4	296	IPIN	BRAM_RAMB18_DIADI6
+4	297	IPIN	BRAM_RAMB18_DIADI7
+4	298	IPIN	BRAM_RAMB18_DIADI8
+4	299	IPIN	BRAM_RAMB18_DIADI9
+4	300	IPIN	BRAM_RAMB18_DIADI10
+4	301	IPIN	BRAM_RAMB18_DIADI11
+4	302	IPIN	BRAM_RAMB18_DIADI12
+4	303	IPIN	BRAM_RAMB18_DIADI13
+4	304	IPIN	BRAM_RAMB18_DIADI14
+4	305	IPIN	BRAM_RAMB18_DIADI15
+4	306	IPIN	BRAM_RAMB18_DIPADIP0
+4	307	IPIN	BRAM_RAMB18_DIPADIP1
+4	308	IPIN	BRAM_RAMB18_WEA0
+4	309	IPIN	BRAM_RAMB18_WEA1
+4	310	IPIN	BRAM_RAMB18_WEA2
+4	311	IPIN	BRAM_RAMB18_WEA3
+4	312	IPIN	BRAM_RAMB18_DIBDI0
+4	313	IPIN	BRAM_RAMB18_DIBDI1
+4	314	IPIN	BRAM_RAMB18_DIBDI2
+4	315	IPIN	BRAM_RAMB18_DIBDI3
+4	316	IPIN	BRAM_RAMB18_DIBDI4
+4	317	IPIN	BRAM_RAMB18_DIBDI5
+4	318	IPIN	BRAM_RAMB18_DIBDI6
+4	319	IPIN	BRAM_RAMB18_DIBDI7
+4	320	IPIN	BRAM_RAMB18_DIBDI8
+4	321	IPIN	BRAM_RAMB18_DIBDI9
+4	322	IPIN	BRAM_RAMB18_DIBDI10
+4	323	IPIN	BRAM_RAMB18_DIBDI11
+4	324	IPIN	BRAM_RAMB18_DIBDI12
+4	325	IPIN	BRAM_RAMB18_DIBDI13
+4	326	IPIN	BRAM_RAMB18_DIBDI14
+4	327	IPIN	BRAM_RAMB18_DIBDI15
+4	328	IPIN	BRAM_RAMB18_DIPBDIP0
+4	329	IPIN	BRAM_RAMB18_DIPBDIP1
+4	330	IPIN	BRAM_RAMB18_WEBWE0
+4	331	IPIN	BRAM_RAMB18_WEBWE1
+4	332	IPIN	BRAM_RAMB18_WEBWE2
+4	333	IPIN	BRAM_RAMB18_WEBWE3
+4	334	IPIN	BRAM_RAMB18_WEBWE4
+4	335	IPIN	BRAM_RAMB18_WEBWE5
+4	336	IPIN	BRAM_RAMB18_WEBWE6
+4	337	IPIN	BRAM_RAMB18_WEBWE7
+4	338	IPIN 	BRAM_RAMB18_ENARDEN
+4	339	IPIN 	BRAM_RAMB18_ENBWREN
+4	340	IPIN 	BRAM_RAMB18_ADDRATIEHIGH0
+4	341	IPIN 	BRAM_RAMB18_ADDRATIEHIGH1
+4	342	IPIN 	BRAM_RAMB18_ADDRBTIEHIGH0
+4	343	IPIN 	BRAM_RAMB18_ADDRBTIEHIGH1
+4	344	IPIN 	BRAM_RAMB18_REGCEAREGCE
+4	345	IPIN 	BRAM_RAMB18_REGCEB
+4	346	IPIN 	BRAM_RAMB18_RSTRAMARSTRAM
+4	347	IPIN 	BRAM_RAMB18_RSTRAMB
+4	348	IPIN 	BRAM_RAMB18_RSTREGARSTREG
+4	349	IPIN 	BRAM_RAMB18_RSTREGB
+4	350	OPIN	BRAM_FIFO36_DOADOL0
+4	351	OPIN	BRAM_FIFO36_DOADOL1
+4	352	OPIN	BRAM_FIFO36_DOADOL2
+4	353	OPIN	BRAM_FIFO36_DOADOL3
+4	354	OPIN	BRAM_FIFO36_DOADOL4
+4	355	OPIN	BRAM_FIFO36_DOADOL5
+4	356	OPIN	BRAM_FIFO36_DOADOL6
+4	357	OPIN	BRAM_FIFO36_DOADOL7
+4	358	OPIN	BRAM_FIFO36_DOADOL8
+4	359	OPIN	BRAM_FIFO36_DOADOL9
+4	360	OPIN	BRAM_FIFO36_DOADOL10
+4	361	OPIN	BRAM_FIFO36_DOADOL11
+4	362	OPIN	BRAM_FIFO36_DOADOL12
+4	363	OPIN	BRAM_FIFO36_DOADOL13
+4	364	OPIN	BRAM_FIFO36_DOADOL14
+4	365	OPIN	BRAM_FIFO36_DOADOL15
+4	366	OPIN	BRAM_FIFO36_DOADOU0
+4	367	OPIN	BRAM_FIFO36_DOADOU1
+4	368	OPIN	BRAM_FIFO36_DOADOU2
+4	369	OPIN	BRAM_FIFO36_DOADOU3
+4	370	OPIN	BRAM_FIFO36_DOADOU4
+4	371	OPIN	BRAM_FIFO36_DOADOU5
+4	372	OPIN	BRAM_FIFO36_DOADOU6
+4	373	OPIN	BRAM_FIFO36_DOADOU7
+4	374	OPIN	BRAM_FIFO36_DOADOU8
+4	375	OPIN	BRAM_FIFO36_DOADOU9
+4	376	OPIN	BRAM_FIFO36_DOADOU10
+4	377	OPIN	BRAM_FIFO36_DOADOU11
+4	378	OPIN	BRAM_FIFO36_DOADOU12
+4	379	OPIN	BRAM_FIFO36_DOADOU13
+4	380	OPIN	BRAM_FIFO36_DOADOU14
+4	381	OPIN	BRAM_FIFO36_DOADOU15
+4	382	OPIN	BRAM_FIFO36_DOPADOPL0
+4	383	OPIN	BRAM_FIFO36_DOPADOPL1
+4	384	OPIN	BRAM_FIFO36_DOPADOPU0
+4	385	OPIN	BRAM_FIFO36_DOPADOPU1
+4	386	OPIN	BRAM_FIFO36_DOBDOL0
+4	387	OPIN	BRAM_FIFO36_DOBDOL1
+4	388	OPIN	BRAM_FIFO36_DOBDOL2
+4	389	OPIN	BRAM_FIFO36_DOBDOL3
+4	390	OPIN	BRAM_FIFO36_DOBDOL4
+4	391	OPIN	BRAM_FIFO36_DOBDOL5
+4	392	OPIN	BRAM_FIFO36_DOBDOL6
+4	393	OPIN	BRAM_FIFO36_DOBDOL7
+4	394	OPIN	BRAM_FIFO36_DOBDOL8
+4	395	OPIN	BRAM_FIFO36_DOBDOL9
+4	396	OPIN	BRAM_FIFO36_DOBDOL10
+4	397	OPIN	BRAM_FIFO36_DOBDOL11
+4	398	OPIN	BRAM_FIFO36_DOBDOL12
+4	399	OPIN	BRAM_FIFO36_DOBDOL13
+4	400	OPIN	BRAM_FIFO36_DOBDOL14
+4	401	OPIN	BRAM_FIFO36_DOBDOL15
+4	402	OPIN	BRAM_FIFO36_DOBDOU0
+4	403	OPIN	BRAM_FIFO36_DOBDOU1
+4	404	OPIN	BRAM_FIFO36_DOBDOU2
+4	405	OPIN	BRAM_FIFO36_DOBDOU3
+4	406	OPIN	BRAM_FIFO36_DOBDOU4
+4	407	OPIN	BRAM_FIFO36_DOBDOU5
+4	408	OPIN	BRAM_FIFO36_DOBDOU6
+4	409	OPIN	BRAM_FIFO36_DOBDOU7
+4	410	OPIN	BRAM_FIFO36_DOBDOU8
+4	411	OPIN	BRAM_FIFO36_DOBDOU9
+4	412	OPIN	BRAM_FIFO36_DOBDOU10
+4	413	OPIN	BRAM_FIFO36_DOBDOU11
+4	414	OPIN	BRAM_FIFO36_DOBDOU12
+4	415	OPIN	BRAM_FIFO36_DOBDOU13
+4	416	OPIN	BRAM_FIFO36_DOBDOU14
+4	417	OPIN	BRAM_FIFO36_DOBDOU15
+4	418	OPIN	BRAM_FIFO36_DOPBDOPL0
+4	419	OPIN	BRAM_FIFO36_DOPBDOPL1
+4	420	OPIN	BRAM_FIFO36_DOPBDOPU0
+4	421	OPIN	BRAM_FIFO36_DOPBDOPU1
+4	422	OPIN	BRAM_FIFO18_DOADO0
+4	423	OPIN	BRAM_FIFO18_DOADO1
+4	424	OPIN	BRAM_FIFO18_DOADO2
+4	425	OPIN	BRAM_FIFO18_DOADO3
+4	426	OPIN	BRAM_FIFO18_DOADO4
+4	427	OPIN	BRAM_FIFO18_DOADO5
+4	428	OPIN	BRAM_FIFO18_DOADO6
+4	429	OPIN	BRAM_FIFO18_DOADO7
+4	430	OPIN	BRAM_FIFO18_DOADO8
+4	431	OPIN	BRAM_FIFO18_DOADO9
+4	432	OPIN	BRAM_FIFO18_DOADO10
+4	433	OPIN	BRAM_FIFO18_DOADO11
+4	434	OPIN	BRAM_FIFO18_DOADO12
+4	435	OPIN	BRAM_FIFO18_DOADO13
+4	436	OPIN	BRAM_FIFO18_DOADO14
+4	437	OPIN	BRAM_FIFO18_DOADO15
+4	438	OPIN	BRAM_FIFO18_DOPADOP0
+4	439	OPIN	BRAM_FIFO18_DOPADOP1
+4	440	OPIN	BRAM_FIFO18_DOBDO0
+4	441	OPIN	BRAM_FIFO18_DOBDO1
+4	442	OPIN	BRAM_FIFO18_DOBDO2
+4	443	OPIN	BRAM_FIFO18_DOBDO3
+4	444	OPIN	BRAM_FIFO18_DOBDO4
+4	445	OPIN	BRAM_FIFO18_DOBDO5
+4	446	OPIN	BRAM_FIFO18_DOBDO6
+4	447	OPIN	BRAM_FIFO18_DOBDO7
+4	448	OPIN	BRAM_FIFO18_DOBDO8
+4	449	OPIN	BRAM_FIFO18_DOBDO9
+4	450	OPIN	BRAM_FIFO18_DOBDO10
+4	451	OPIN	BRAM_FIFO18_DOBDO11
+4	452	OPIN	BRAM_FIFO18_DOBDO12
+4	453	OPIN	BRAM_FIFO18_DOBDO13
+4	454	OPIN	BRAM_FIFO18_DOBDO14
+4	455	OPIN	BRAM_FIFO18_DOBDO15
+4	456	OPIN	BRAM_FIFO18_DOPBDOP0
+4	457	OPIN	BRAM_FIFO18_DOPBDOP1
+4	458	OPIN	BRAM_RAMB18_DOADO0
+4	459	OPIN	BRAM_RAMB18_DOADO1
+4	460	OPIN	BRAM_RAMB18_DOADO2
+4	461	OPIN	BRAM_RAMB18_DOADO3
+4	462	OPIN	BRAM_RAMB18_DOADO4
+4	463	OPIN	BRAM_RAMB18_DOADO5
+4	464	OPIN	BRAM_RAMB18_DOADO6
+4	465	OPIN	BRAM_RAMB18_DOADO7
+4	466	OPIN	BRAM_RAMB18_DOADO8
+4	467	OPIN	BRAM_RAMB18_DOADO9
+4	468	OPIN	BRAM_RAMB18_DOADO10
+4	469	OPIN	BRAM_RAMB18_DOADO11
+4	470	OPIN	BRAM_RAMB18_DOADO12
+4	471	OPIN	BRAM_RAMB18_DOADO13
+4	472	OPIN	BRAM_RAMB18_DOADO14
+4	473	OPIN	BRAM_RAMB18_DOADO15
+4	474	OPIN	BRAM_RAMB18_DOPADOP0
+4	475	OPIN	BRAM_RAMB18_DOPADOP1
+4	476	OPIN	BRAM_RAMB18_DOBDO0
+4	477	OPIN	BRAM_RAMB18_DOBDO1
+4	478	OPIN	BRAM_RAMB18_DOBDO2
+4	479	OPIN	BRAM_RAMB18_DOBDO3
+4	480	OPIN	BRAM_RAMB18_DOBDO4
+4	481	OPIN	BRAM_RAMB18_DOBDO5
+4	482	OPIN	BRAM_RAMB18_DOBDO6
+4	483	OPIN	BRAM_RAMB18_DOBDO7
+4	484	OPIN	BRAM_RAMB18_DOBDO8
+4	485	OPIN	BRAM_RAMB18_DOBDO9
+4	486	OPIN	BRAM_RAMB18_DOBDO10
+4	487	OPIN	BRAM_RAMB18_DOBDO11
+4	488	OPIN	BRAM_RAMB18_DOBDO12
+4	489	OPIN	BRAM_RAMB18_DOBDO13
+4	490	OPIN	BRAM_RAMB18_DOBDO14
+4	491	OPIN	BRAM_RAMB18_DOBDO15
+4	492	OPIN	BRAM_RAMB18_DOPBDOP0
+4	493	OPIN	BRAM_RAMB18_DOPBDOP1
+4	494	OPIN	GND_WIRE
+4	495	OPIN	VCC_WIRE
+4	496	IPIN	BRAM_FIFO36_CLKARDCLKL
+4	497	IPIN	BRAM_FIFO36_CLKARDCLKU
+4	498	IPIN	BRAM_FIFO36_CLKBWRCLKL
+4	499	IPIN	BRAM_FIFO36_CLKBWRCLKU
+4	500	IPIN	BRAM_FIFO18_CLKARDCLK
+4	501	IPIN	BRAM_FIFO18_CLKBWRCLK
+4	502	IPIN	BRAM_RAMB18_CLKARDCLK
+4	503	IPIN	BRAM_RAMB18_CLKBWRCLK
+4	504	IPIN 	BRAM_FIFO36_REGCLKARDRCLKL
+4	505	IPIN 	BRAM_FIFO36_REGCLKARDRCLKU
+4	506	IPIN 	BRAM_FIFO36_REGCLKBL
+4	507	IPIN 	BRAM_FIFO36_REGCLKBU
+4	508	IPIN 	BRAM_FIFO18_REGCLKARDRCLK
+4	509	IPIN 	BRAM_FIFO18_REGCLKB
+4	510	IPIN 	BRAM_RAMB18_REGCLKARDRCLK
+4	511	IPIN 	BRAM_RAMB18_REGCLKB
+5	0       IPIN	CMT_BUFG_BUFGCTRL0_I0	
+5	1  	IPIN	CMT_BUFG_BUFGCTRL0_I1
+5	2  	IPIN	CMT_BUFG_BUFGCTRL0_S0
+5	3  	IPIN	CMT_BUFG_BUFGCTRL0_S1
+5	4  	IPIN	CMT_BUFG_BUFGCTRL0_CE0
+5	5  	IPIN	CMT_BUFG_BUFGCTRL0_CE1
+5	6  	IPIN	CMT_BUFG_BUFGCTRL0_IGNORE0
+5	7   	IPIN	CMT_BUFG_BUFGCTRL0_IGNORE1
+5	8   	OPIN	CMT_BUFG_BUFGCTRL0_O
+5	9   	OPIN	GND_WIRE
+5	10  	OPIN	VCC_WIRE
+5	11      IPIN	CMT_BUFG_BUFGCTRL1_I0	
+5	12 	IPIN	CMT_BUFG_BUFGCTRL1_I1
+5	13 	IPIN	CMT_BUFG_BUFGCTRL1_S0
+5	14 	IPIN	CMT_BUFG_BUFGCTRL1_S1
+5	15 	IPIN	CMT_BUFG_BUFGCTRL1_CE0
+5	16 	IPIN	CMT_BUFG_BUFGCTRL1_CE1
+5	17 	IPIN	CMT_BUFG_BUFGCTRL1_IGNORE0
+5	18 	IPIN	CMT_BUFG_BUFGCTRL1_IGNORE1
+5	19  	OPIN	CMT_BUFG_BUFGCTRL1_O
+5	22      IPIN	CMT_BUFG_BUFGCTRL2_I0	
+5	23 	IPIN	CMT_BUFG_BUFGCTRL2_I1
+5	24 	IPIN	CMT_BUFG_BUFGCTRL2_S0
+5	25 	IPIN	CMT_BUFG_BUFGCTRL2_S1
+5	26 	IPIN	CMT_BUFG_BUFGCTRL2_CE0
+5	27 	IPIN	CMT_BUFG_BUFGCTRL2_CE1
+5	28 	IPIN	CMT_BUFG_BUFGCTRL2_IGNORE0
+5	29 	IPIN	CMT_BUFG_BUFGCTRL2_IGNORE1
+5	30  	OPIN	CMT_BUFG_BUFGCTRL2_O
+5	33      IPIN	CMT_BUFG_BUFGCTRL3_I0	
+5	34 	IPIN	CMT_BUFG_BUFGCTRL3_I1
+5	35 	IPIN	CMT_BUFG_BUFGCTRL3_S0
+5	36 	IPIN	CMT_BUFG_BUFGCTRL3_S1
+5	37 	IPIN	CMT_BUFG_BUFGCTRL3_CE0
+5	38 	IPIN	CMT_BUFG_BUFGCTRL3_CE1
+5	39 	IPIN	CMT_BUFG_BUFGCTRL3_IGNORE0
+5	40 	IPIN	CMT_BUFG_BUFGCTRL3_IGNORE1
+5	41  	OPIN	CMT_BUFG_BUFGCTRL3_O
+5	44      IPIN	CMT_BUFG_BUFGCTRL4_I0	
+5	45 	IPIN	CMT_BUFG_BUFGCTRL4_I1
+5	46 	IPIN	CMT_BUFG_BUFGCTRL4_S0
+5	47 	IPIN	CMT_BUFG_BUFGCTRL4_S1
+5	48 	IPIN	CMT_BUFG_BUFGCTRL4_CE0
+5	49 	IPIN	CMT_BUFG_BUFGCTRL4_CE1
+5	50 	IPIN	CMT_BUFG_BUFGCTRL4_IGNORE0
+5	51 	IPIN	CMT_BUFG_BUFGCTRL4_IGNORE1
+5	52  	OPIN	CMT_BUFG_BUFGCTRL4_O
+5	55      IPIN	CMT_BUFG_BUFGCTRL5_I0	
+5	56 	IPIN	CMT_BUFG_BUFGCTRL5_I1
+5	57 	IPIN	CMT_BUFG_BUFGCTRL5_S0
+5	58 	IPIN	CMT_BUFG_BUFGCTRL5_S1
+5	59 	IPIN	CMT_BUFG_BUFGCTRL5_CE0
+5	60 	IPIN	CMT_BUFG_BUFGCTRL5_CE1
+5	61 	IPIN	CMT_BUFG_BUFGCTRL5_IGNORE0
+5	62 	IPIN	CMT_BUFG_BUFGCTRL5_IGNORE1
+5	63  	OPIN	CMT_BUFG_BUFGCTRL5_O
+5	66      IPIN	CMT_BUFG_BUFGCTRL6_I0	
+5	67 	IPIN	CMT_BUFG_BUFGCTRL6_I1
+5	68 	IPIN	CMT_BUFG_BUFGCTRL6_S0
+5	69 	IPIN	CMT_BUFG_BUFGCTRL6_S1
+5	70 	IPIN	CMT_BUFG_BUFGCTRL6_CE0
+5	71 	IPIN	CMT_BUFG_BUFGCTRL6_CE1
+5	72 	IPIN	CMT_BUFG_BUFGCTRL6_IGNORE0
+5	73 	IPIN	CMT_BUFG_BUFGCTRL6_IGNORE1
+5	74  	OPIN	CMT_BUFG_BUFGCTRL6_O
+5	77      IPIN	CMT_BUFG_BUFGCTRL7_I0	
+5	78 	IPIN	CMT_BUFG_BUFGCTRL7_I1
+5	79 	IPIN	CMT_BUFG_BUFGCTRL7_S0
+5	80 	IPIN	CMT_BUFG_BUFGCTRL7_S1
+5	81 	IPIN	CMT_BUFG_BUFGCTRL7_CE0
+5	82 	IPIN	CMT_BUFG_BUFGCTRL7_CE1
+5	83 	IPIN	CMT_BUFG_BUFGCTRL7_IGNORE0
+5	84 	IPIN	CMT_BUFG_BUFGCTRL7_IGNORE1
+5	85  	OPIN	CMT_BUFG_BUFGCTRL7_O
+5	88      IPIN	CMT_BUFG_BUFGCTRL8_I0	
+5	89 	IPIN	CMT_BUFG_BUFGCTRL8_I1
+5	90 	IPIN	CMT_BUFG_BUFGCTRL8_S0
+5	91 	IPIN	CMT_BUFG_BUFGCTRL8_S1
+5	92 	IPIN	CMT_BUFG_BUFGCTRL8_CE0
+5	93 	IPIN	CMT_BUFG_BUFGCTRL8_CE1
+5	94 	IPIN	CMT_BUFG_BUFGCTRL8_IGNORE0
+5	95 	IPIN	CMT_BUFG_BUFGCTRL8_IGNORE1
+5	96  	OPIN	CMT_BUFG_BUFGCTRL8_O
+5	99      IPIN	CMT_BUFG_BUFGCTRL9_I0	
+5	100	IPIN	CMT_BUFG_BUFGCTRL9_I1
+5	101	IPIN	CMT_BUFG_BUFGCTRL9_S0
+5	102	IPIN	CMT_BUFG_BUFGCTRL9_S1
+5	103	IPIN	CMT_BUFG_BUFGCTRL9_CE0
+5	104	IPIN	CMT_BUFG_BUFGCTRL9_CE1
+5	105	IPIN	CMT_BUFG_BUFGCTRL9_IGNORE0
+5	106	IPIN	CMT_BUFG_BUFGCTRL9_IGNORE1
+5	107 	OPIN	CMT_BUFG_BUFGCTRL9_O
+5	110     IPIN	CMT_BUFG_BUFGCTRL10_I0	
+5	111	IPIN	CMT_BUFG_BUFGCTRL10_I1
+5	112	IPIN	CMT_BUFG_BUFGCTRL10_S0
+5	113	IPIN	CMT_BUFG_BUFGCTRL10_S1
+5	114	IPIN	CMT_BUFG_BUFGCTRL10_CE0
+5	115	IPIN	CMT_BUFG_BUFGCTRL10_CE1
+5	116	IPIN	CMT_BUFG_BUFGCTRL10_IGNORE0
+5	117	IPIN	CMT_BUFG_BUFGCTRL10_IGNORE1
+5	118 	OPIN	CMT_BUFG_BUFGCTRL10_O
+5	121     IPIN	CMT_BUFG_BUFGCTRL11_I0	
+5	122	IPIN	CMT_BUFG_BUFGCTRL11_I1
+5	123	IPIN	CMT_BUFG_BUFGCTRL11_S0
+5	124	IPIN	CMT_BUFG_BUFGCTRL11_S1
+5	125	IPIN	CMT_BUFG_BUFGCTRL11_CE0
+5	126	IPIN	CMT_BUFG_BUFGCTRL11_CE1
+5	127	IPIN	CMT_BUFG_BUFGCTRL11_IGNORE0
+5	128	IPIN	CMT_BUFG_BUFGCTRL11_IGNORE1
+5	129 	OPIN	CMT_BUFG_BUFGCTRL11_O
+5	132     IPIN	CMT_BUFG_BUFGCTRL12_I0	
+5	133	IPIN	CMT_BUFG_BUFGCTRL12_I1
+5	134	IPIN	CMT_BUFG_BUFGCTRL12_S0
+5	135	IPIN	CMT_BUFG_BUFGCTRL12_S1
+5	136	IPIN	CMT_BUFG_BUFGCTRL12_CE0
+5	137	IPIN	CMT_BUFG_BUFGCTRL12_CE1
+5	138	IPIN	CMT_BUFG_BUFGCTRL12_IGNORE0
+5	139	IPIN	CMT_BUFG_BUFGCTRL12_IGNORE1
+5	140 	OPIN	CMT_BUFG_BUFGCTRL12_O
+5	143     IPIN	CMT_BUFG_BUFGCTRL13_I0	
+5	144	IPIN	CMT_BUFG_BUFGCTRL13_I1
+5	145	IPIN	CMT_BUFG_BUFGCTRL13_S0
+5	146	IPIN	CMT_BUFG_BUFGCTRL13_S1
+5	147	IPIN	CMT_BUFG_BUFGCTRL13_CE0
+5	148	IPIN	CMT_BUFG_BUFGCTRL13_CE1
+5	149	IPIN	CMT_BUFG_BUFGCTRL13_IGNORE0
+5	150	IPIN	CMT_BUFG_BUFGCTRL13_IGNORE1
+5	151	OPIN	CMT_BUFG_BUFGCTRL13_O
+5	154     IPIN	CMT_BUFG_BUFGCTRL14_I0	
+5	155	IPIN	CMT_BUFG_BUFGCTRL14_I1
+5	156	IPIN	CMT_BUFG_BUFGCTRL14_S0
+5	157	IPIN	CMT_BUFG_BUFGCTRL14_S1
+5	158	IPIN	CMT_BUFG_BUFGCTRL14_CE0
+5	159	IPIN	CMT_BUFG_BUFGCTRL14_CE1
+5	160	IPIN	CMT_BUFG_BUFGCTRL14_IGNORE0
+5	161	IPIN	CMT_BUFG_BUFGCTRL14_IGNORE1
+5	162	OPIN	CMT_BUFG_BUFGCTRL14_O
+5	165     IPIN	CMT_BUFG_BUFGCTRL15_I0	
+5	166	IPIN	CMT_BUFG_BUFGCTRL15_I1
+5	167	IPIN	CMT_BUFG_BUFGCTRL15_S0
+5	168	IPIN	CMT_BUFG_BUFGCTRL15_S1
+5	169	IPIN	CMT_BUFG_BUFGCTRL15_CE0
+5	170	IPIN	CMT_BUFG_BUFGCTRL15_CE1
+5	171	IPIN	CMT_BUFG_BUFGCTRL15_IGNORE0
+5	172	IPIN	CMT_BUFG_BUFGCTRL15_IGNORE1
+5	173 	OPIN	CMT_BUFG_BUFGCTRL15_O
+
+
diff --git vtr_flow/arch/xilinx/xc6vlx240tff1156.xml vtr_flow/arch/xilinx/xc6vlx240tff1156.xml
new file mode 100644
index 0000000..070986e
--- /dev/null
+++ vtr_flow/arch/xilinx/xc6vlx240tff1156.xml
@@ -0,0 +1,4573 @@
+<architecture>
+	<!-- ODIN II specific config -->
+	<models>
+		<model name="multiply">
+			<input_ports>
+				<port name="a"/>
+				<port name="b"/>
+			</input_ports>
+			<output_ports>
+				<port name="p"/>
+			</output_ports>
+		</model>
+		
+		<model name="single_port_ram">
+			<input_ports>
+				<port name="we"/> 
+				<port name="addr"/>
+				<port name="data"/>
+				<port name="clk" is_clock="1"/>
+			</input_ports>
+			<output_ports>
+				<port name="out"/>
+			</output_ports>
+		</model>
+
+		<model name="dual_port_ram">
+			<input_ports>
+				<port name="we1"/>
+				<port name="we2"/>
+				<port name="addr1"/>
+				<port name="addr2"/>
+				<port name="data1"/>
+				<port name="data2"/>
+				<port name="clk" is_clock="1"/>
+			</input_ports>
+			<output_ports>
+				<port name="out1"/> 
+				<port name="out2"/>
+			</output_ports>
+		</model>
+
+		<model name="adder">
+			<input_ports>
+				<port name="a"/>
+				<port name="b"/>
+				<port name="cin"/>
+			</input_ports>
+			<output_ports>
+				<port name="cout"/>
+				<port name="sumout"/>
+			</output_ports>
+		</model>
+
+		<model name="xadder">
+			<input_ports>
+				<port name="a_xor_b"/>
+				<port name="a_and_b"/>
+				<port name="cin"/>
+			</input_ports>
+			<output_ports>
+				<port name="cout"/>
+				<port name="sumout"/>
+			</output_ports>
+		</model>
+
+		<model name="bufgctrl">
+			<input_ports>
+				<port name="i"/>
+				<port name="s"/>
+				<port name="ce"/>
+				<port name="ignore"/>
+			</input_ports>
+			<output_ports>
+				<port name="o"/>
+			</output_ports>
+		</model>
+
+		<model name="lut7">
+			<input_ports>
+				<port name="A6-1"/>
+				<port name="B6-1"/>
+				<port name="AX"/>
+			</input_ports>
+			<output_ports>
+				<port name="F7"/>
+			</output_ports>
+		</model>
+
+		<model name="lut8">
+			<input_ports>
+				<port name="A6-1"/>
+				<port name="B6-1"/>
+				<port name="C6-1"/>
+				<port name="D6-1"/>
+				<port name="AX"/>
+				<port name="BX"/>
+				<port name="CX"/>
+			</input_ports>
+			<output_ports>
+				<port name="F8"/>
+			</output_ports>
+		</model>
+	</models>
+	<!-- ODIN II specific config ends -->
+ 
+	<layout width="102" height="240"/>
+	<device>
+		<sizing R_minW_nmos="0" R_minW_pmos="0" ipin_mux_trans_size="0"/>
+		<timing C_ipin_cblock="0" T_ipin_cblock="0"/>
+		<area grid_logic_tile_area="0"/> 
+		<chan_width_distr>
+			<io width="1.000000"/>
+			<x distr="uniform" peak="1.000000"/>
+			<y distr="uniform" peak="1.000000"/>
+		</chan_width_distr>
+		<switch_block type="wilton" fs="3"/>
+	</device>
+	<switchlist>
+		<switch type="mux" name="default" R="0" Cin="0" Cout="0" Tdel="0"       mux_trans_size="1" buf_size="0"/>
+		<switch type="mux" name="L1"      R="0" Cin="0" Cout="0" Tdel="0.11e-9" mux_trans_size="1" buf_size="0"/>
+		<switch type="mux" name="L2"      R="0" Cin="0" Cout="0" Tdel="0.15e-9" mux_trans_size="1" buf_size="0"/>
+		<switch type="mux" name="L4"      R="0" Cin="0" Cout="0" Tdel="0.20e-9" mux_trans_size="1" buf_size="0"/>
+		<!-- No L6 in V6 -->
+		<switch type="mux" name="L6"      R="0" Cin="0" Cout="0" Tdel="0"       mux_trans_size="1" buf_size="0"/>
+		<!-- No L12 in V6 -->
+		<switch type="mux" name="LH12"    R="0" Cin="0" Cout="0" Tdel="0"       mux_trans_size="1" buf_size="0"/>
+		<switch type="mux" name="LV12"    R="0" Cin="0" Cout="0" Tdel="0"       mux_trans_size="1" buf_size="0"/>
+		<switch type="mux" name="L16"     R="0" Cin="0" Cout="0" Tdel="0.60e-9" mux_trans_size="1" buf_size="0"/>
+		<!-- No L18 in V6 -->
+		<switch type="mux" name="LV18"    R="0" Cin="0" Cout="0" Tdel="0"       mux_trans_size="1" buf_size="0"/>
+		<!-- iswitch = 9 -->
+		<switch type="mux" name="A6"      R="0" Cin="0" Cout="0" Tdel="0.12e-9" mux_trans_size="1" buf_size="0"/>
+		<switch type="mux" name="A5"      R="0" Cin="0" Cout="0" Tdel="0.19e-9" mux_trans_size="1" buf_size="0"/>
+		<switch type="mux" name="A4"      R="0" Cin="0" Cout="0" Tdel="0.29e-9" mux_trans_size="1" buf_size="0"/>
+		<switch type="mux" name="A3"      R="0" Cin="0" Cout="0" Tdel="0.35e-9" mux_trans_size="1" buf_size="0"/>
+		<switch type="mux" name="A2"      R="0" Cin="0" Cout="0" Tdel="0.48e-9" mux_trans_size="1" buf_size="0"/>
+		<switch type="mux" name="A1"      R="0" Cin="0" Cout="0" Tdel="0.49e-9" mux_trans_size="1" buf_size="0"/>
+		<switch type="mux" name="LUT"     R="0" Cin="0" Cout="0" Tdel="0.068e-9" mux_trans_size="1" buf_size="0"/>
+		<!-- iswitch = 16 -->
+		<switch type="mux" name="BYP"     R="0" Cin="0" Cout="0" Tdel="0.11e-9" mux_trans_size="1" buf_size="0"/>
+		<switch type="mux" name="BYP_B"   R="0" Cin="0" Cout="0" Tdel="0"       mux_trans_size="1" buf_size="0"/>
+		<switch type="mux" name="FAN"     R="0" Cin="0" Cout="0" Tdel="0.11e-9" mux_trans_size="1" buf_size="0"/>
+
+		<!-- iswitch = 19 -->
+		<switch type="mux" name="BRAM_DI" R="0" Cin="0" Cout="0" Tdel="0"       mux_trans_size="1" buf_size="0"/>
+		<switch type="mux" name="BRAM_AD" R="0" Cin="0" Cout="0" Tdel="0"       mux_trans_size="1" buf_size="0"/>
+		<switch type="mux" name="BRAM_WE" R="0" Cin="0" Cout="0" Tdel="0"       mux_trans_size="1" buf_size="0"/>
+
+		<!-- iswitch = 22 -->
+		<switch type="mux" name="DSP_A"   R="0" Cin="0" Cout="0" Tdel="0"       mux_trans_size="1" buf_size="0"/>
+		<switch type="mux" name="DSP_B"   R="0" Cin="0" Cout="0" Tdel="0"       mux_trans_size="1" buf_size="0"/>
+
+		<!-- iswitch = 24 -->
+		<switch type="mux" name="clk2gen" R="0" Cin="0" Cout="0" Tdel="0"       mux_trans_size="1" buf_size="0"/>
+		<switch type="mux" name="gen2clk" R="0" Cin="0" Cout="0" Tdel="0"       mux_trans_size="1" buf_size="0"/>
+	</switchlist>
+	<segmentlist>
+		<!-- cost_index = CHANX_COST_INDEX_START = 4 -->
+		<segment freq="1" length="1" type="unidir" Rmetal="0" Cmetal="0">
+			<mux name="default"/>
+			<sb type="pattern">0 0</sb>
+			<cb type="pattern"> 0 </cb>
+		</segment>
+		<!-- clock cost index -->
+		<segment freq="1" length="1" type="unidir" Rmetal="0" Cmetal="0">
+			<mux name="default"/>
+			<sb type="pattern">0 0</sb>
+			<cb type="pattern"> 0 </cb>
+		</segment>
+		<!-- cost_index = 6 -->
+		<segment freq="1" length="1" type="unidir" Rmetal="0" Cmetal="0">
+			<mux name="L1"/>
+			<sb type="pattern">1 1</sb>
+			<cb type="pattern"> 1 </cb>
+		</segment>
+		<segment freq="1" length="2" type="unidir" Rmetal="0" Cmetal="0">
+			<mux name="L2"/>
+			<sb type="pattern">1 1 1</sb>
+			<cb type="pattern"> 1 1 </cb>
+		</segment>
+		<segment freq="1" length="4" type="unidir" Rmetal="0" Cmetal="0">
+			<mux name="L4"/>
+			<sb type="pattern">1 1 1 1 1</sb>
+			<cb type="pattern"> 1 1 1 1 </cb>
+		</segment>
+		<!-- No L6, L12 or L16 in V6 -->
+		<segment freq="0" length="6" type="unidir" Rmetal="0" Cmetal="0">
+			<mux name="L6"/>
+			<sb type="pattern">1 1 1 1 1 1 1</sb>
+			<cb type="pattern"> 1 1 1 1 1 1</cb>
+		</segment>
+		<segment freq="0" length="12" type="unidir" Rmetal="0" Cmetal="0">
+			<mux name="LH12"/>
+			<sb type="pattern">1 0 0 0 0 0 1 0 0 0 0 0 1</sb>
+			<cb type="pattern"> 1 0 0 0 0 0 0 0 0 0 0 1 </cb>
+		</segment>
+		<segment freq="0" length="12" type="unidir" Rmetal="0" Cmetal="0">
+			<mux name="LV12"/>
+			<sb type="pattern">1 0 0 0 0 0 0 0 0 0 0 0 1</sb>
+			<cb type="pattern"> 1 0 0 0 0 0 0 0 0 0 0 1 </cb>
+		</segment>
+		<segment freq="1" length="16" type="unidir" Rmetal="0" Cmetal="0">
+			<mux name="L16"/>
+			<sb type="pattern">1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1</sb>
+			<cb type="pattern"> 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 </cb>
+		</segment>
+		<segment freq="0" length="18" type="unidir" Rmetal="0" Cmetal="0">
+			<mux name="LV18"/>
+			<sb type="pattern">1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1</sb>
+			<cb type="pattern"> 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 </cb>
+		</segment>
+	</segmentlist>
+	<overrideslist>
+		<!-- Unbonded IOBs -->
+		<region type="<EMPTY>" startx="0" starty="2" endx="0" endy="200" incy="2"/>
+		<region type="<EMPTY>" startx="0" starty="201" endx="0" endy="240"/>
+		<region type="<EMPTY>" startx="41" starty="2" endx="41" endy="200" incy="2"/>
+		<region type="<EMPTY>" startx="41" starty="201" endx="41" endy="240"/>
+		<region type="<EMPTY>" startx="57" starty="2" endx="57" endy="200" incy="2"/>
+		<region type="<EMPTY>" startx="57" starty="201" endx="57" endy="240"/>
+
+		<!-- IO right edge -->
+		<region type="<EMPTY>" startx="103" starty="1" endx="103" endy="240"/>
+
+		<!-- IO top and bottom edge -->
+		<region type="<EMPTY>" startx="1" starty="0" endx="102" endy="0"/>
+		<region type="<EMPTY>" startx="1" starty="241" endx="102" endy="241"/>
+
+		<!-- Empty region in the middle -->
+		<region type="<EMPTY>" startx="46" starty="81" endx="51" endy="160"/>
+
+		<!-- PCIE/EMACs on far right-->
+		<region type="<EMPTY>" startx="98" starty="41" endx="101" endy="60"/>
+		<region type="<EMPTY>" startx="101" starty="81" endx="101" endy="100"/>
+		<region type="<EMPTY>" startx="98" starty="121" endx="101" endy="140"/>
+		<region type="<EMPTY>" startx="101" starty="161" endx="101" endy="180"/>
+
+		<!-- Empty columns at 52 (CMT) and 102 (GTX) -->
+		<region type="<EMPTY>" startx="52" starty="1" endx="52" endy="118"/>
+		<region type="<EMPTY>" startx="52" starty="123" endx="52" endy="240"/>
+		<region type="<EMPTY>" startx="102" starty="1" endx="102" endy="240"/>
+	</overrideslist>
+
+	<!-- Used for determining placement macros only? -->
+	<directlist>
+		<direct name="SLICEL_CIN_COUT" from_pin="SLICEL.COUT" to_pin="SLICEL.CIN" x_offset="0" y_offset="1" z_offset="0"/>
+
+		<!-- Doesn't seem to do anything ...
+		<direct name="SLICE_A1_DIRECT[0]"  from_pin="SLICE.CQ"   to_pin="SLICE.A6-1 [5:5]" x_offset="0" y_offset="0" z_offset="0" />
+		<direct name="SLICE_A1_DIRECT[1]+" from_pin="SLICE.AMUX" to_pin="SLICE.A6-1 [5:5]" x_offset="0" y_offset="0" z_offset="1" />
+		<direct name="SLICE_A1_DIRECT[1]-" from_pin="SLICE.AMUX" to_pin="SLICE.A6-1 [5:5]" x_offset="0" y_offset="0" z_offset="-1"/>
+		<direct name="SLICE_A1_DIRECT[2]+" from_pin="SLICE.C"    to_pin="SLICE.A6-1 [5:5]" x_offset="0" y_offset="0" z_offset="1" />
+		<direct name="SLICE_A1_DIRECT[2]-" from_pin="SLICE.C"    to_pin="SLICE.A6-1 [5:5]" x_offset="0" y_offset="0" z_offset="-1"/>
+
+		<direct name="SLICE_A2_DIRECT[0]"  from_pin="SLICE.B"    to_pin="SLICE.A6-1 [4:4]" x_offset="0" y_offset="0" z_offset="0" />
+		<direct name="SLICE_A2_DIRECT[1]"  from_pin="SLICE.DMUX" to_pin="SLICE.A6-1 [4:4]" x_offset="0" y_offset="0" z_offset="0" />
+		<direct name="SLICE_A2_DIRECT[2]+" from_pin="SLICE.BQ"   to_pin="SLICE.A6-1 [4:4]" x_offset="0" y_offset="0" z_offset="1" />
+		<direct name="SLICE_A2_DIRECT[2]-" from_pin="SLICE.BQ"   to_pin="SLICE.A6-1 [4:4]" x_offset="0" y_offset="0" z_offset="-1"/>
+
+		<direct name="SLICE_A3_DIRECT[0]"  from_pin="SLICE.AMUX" to_pin="SLICE.A6-1 [3:3]" x_offset="0" y_offset="0" z_offset="0" />
+		<direct name="SLICE_A3_DIRECT[1]"  from_pin="SLICE.C"    to_pin="SLICE.A6-1 [3:3]" x_offset="0" y_offset="0" z_offset="0" />
+		<direct name="SLICE_A3_DIRECT[2]+" from_pin="SLICE.CQ"   to_pin="SLICE.A6-1 [3:3]" x_offset="0" y_offset="0" z_offset="1" />
+		<direct name="SLICE_A3_DIRECT[2]-" from_pin="SLICE.CQ"   to_pin="SLICE.A6-1 [3:3]" x_offset="0" y_offset="0" z_offset="-1"/>
+
+		<direct name="SLICE_A4_DIRECT[0]"  from_pin="SLICE.DQ"   to_pin="SLICE.A6-1 [2:2]" x_offset="0" y_offset="0" z_offset="0" />
+		<direct name="SLICE_A4_DIRECT[1]+" from_pin="SLICE.BMUX" to_pin="SLICE.A6-1 [2:2]" x_offset="0" y_offset="0" z_offset="1" />
+		<direct name="SLICE_A4_DIRECT[1]-" from_pin="SLICE.BMUX" to_pin="SLICE.A6-1 [2:2]" x_offset="0" y_offset="0" z_offset="-1"/>
+		<direct name="SLICE_A4_DIRECT[2]+" from_pin="SLICE.D"    to_pin="SLICE.A6-1 [2:2]" x_offset="0" y_offset="0" z_offset="1" />
+		<direct name="SLICE_A4_DIRECT[2]-" from_pin="SLICE.D"    to_pin="SLICE.A6-1 [2:2]" x_offset="0" y_offset="0" z_offset="-1"/>
+
+		<direct name="SLICE_A5_DIRECT[0]"  from_pin="SLICE.AQ"   to_pin="SLICE.A6-1 [1:1]" x_offset="0" y_offset="0" z_offset="0" />
+		<direct name="SLICE_A5_DIRECT[1]+" from_pin="SLICE.A"    to_pin="SLICE.A6-1 [1:1]" x_offset="0" y_offset="0" z_offset="1" />
+		<direct name="SLICE_A5_DIRECT[1]-" from_pin="SLICE.A"    to_pin="SLICE.A6-1 [1:1]" x_offset="0" y_offset="0" z_offset="-1"/>
+		<direct name="SLICE_A5_DIRECT[2]+" from_pin="SLICE.CMUX" to_pin="SLICE.A6-1 [1:1]" x_offset="0" y_offset="0" z_offset="1" />
+		<direct name="SLICE_A5_DIRECT[2]-" from_pin="SLICE.CMUX" to_pin="SLICE.A6-1 [1:1]" x_offset="0" y_offset="0" z_offset="-1"/>
+
+		<direct name="SLICE_A6_DIRECT[0]"  from_pin="SLICE.B"    to_pin="SLICE.A6-1 [0:0]" x_offset="0" y_offset="0" z_offset="0" />
+		<direct name="SLICE_A6_DIRECT[1]"  from_pin="SLICE.DMUX" to_pin="SLICE.A6-1 [0:0]" x_offset="0" y_offset="0" z_offset="0" />
+		<direct name="SLICE_A6_DIRECT[2]+" from_pin="SLICE.BQ"   to_pin="SLICE.A6-1 [0:0]" x_offset="0" y_offset="0" z_offset="1" />
+		<direct name="SLICE_A6_DIRECT[2]-" from_pin="SLICE.BQ"   to_pin="SLICE.A6-1 [0:0]" x_offset="0" y_offset="0" z_offset="-1"/>
+
+		<direct name="SLICE_B1_DIRECT[0]"  from_pin="SLICE.AQ"   to_pin="SLICE.B6-1 [5:5]" x_offset="0" y_offset="0" z_offset="0" />
+		<direct name="SLICE_B1_DIRECT[1]+" from_pin="SLICE.A"    to_pin="SLICE.B6-1 [5:5]" x_offset="0" y_offset="0" z_offset="1" />
+		<direct name="SLICE_B1_DIRECT[1]-" from_pin="SLICE.A"    to_pin="SLICE.B6-1 [5:5]" x_offset="0" y_offset="0" z_offset="-1"/>
+		<direct name="SLICE_B1_DIRECT[2]+" from_pin="SLICE.CMUX" to_pin="SLICE.B6-1 [5:5]" x_offset="0" y_offset="0" z_offset="1" />
+		<direct name="SLICE_B1_DIRECT[2]-" from_pin="SLICE.CMUX" to_pin="SLICE.B6-1 [5:5]" x_offset="0" y_offset="0" z_offset="-1"/>
+
+		<direct name="SLICE_B2_DIRECT[0]"  from_pin="SLICE.BMUX" to_pin="SLICE.B6-1 [4:4]" x_offset="0" y_offset="0" z_offset="0" />
+		<direct name="SLICE_B2_DIRECT[1]+" from_pin="SLICE.D"    to_pin="SLICE.B6-1 [4:4]" x_offset="0" y_offset="0" z_offset="0" />
+		<direct name="SLICE_B2_DIRECT[2]+" from_pin="SLICE.DQ"   to_pin="SLICE.B6-1 [4:4]" x_offset="0" y_offset="0" z_offset="1" />
+		<direct name="SLICE_B2_DIRECT[2]-" from_pin="SLICE.DQ"   to_pin="SLICE.B6-1 [4:4]" x_offset="0" y_offset="0" z_offset="-1"/>
+
+		<direct name="SLICE_B3_DIRECT[0]"  from_pin="SLICE.A"    to_pin="SLICE.B6-1 [3:3]" x_offset="0" y_offset="0" z_offset="0" />
+		<direct name="SLICE_B3_DIRECT[1]+" from_pin="SLICE.CMUX" to_pin="SLICE.B6-1 [3:3]" x_offset="0" y_offset="0" z_offset="0" />
+		<direct name="SLICE_B3_DIRECT[2]+" from_pin="SLICE.AQ"   to_pin="SLICE.B6-1 [3:3]" x_offset="0" y_offset="0" z_offset="1" />
+		<direct name="SLICE_B3_DIRECT[2]-" from_pin="SLICE.AQ"   to_pin="SLICE.B6-1 [3:3]" x_offset="0" y_offset="0" z_offset="-1"/>
+
+		<direct name="SLICE_B4_DIRECT[0]"  from_pin="SLICE.BQ"   to_pin="SLICE.B6-1 [2:2]" x_offset="0" y_offset="0" z_offset="0" />
+		<direct name="SLICE_B4_DIRECT[1]+" from_pin="SLICE.B"    to_pin="SLICE.B6-1 [2:2]" x_offset="0" y_offset="0" z_offset="1" />
+		<direct name="SLICE_B4_DIRECT[1]-" from_pin="SLICE.B"    to_pin="SLICE.B6-1 [2:2]" x_offset="0" y_offset="0" z_offset="-1"/>
+		<direct name="SLICE_B4_DIRECT[2]+" from_pin="SLICE.DMUX" to_pin="SLICE.B6-1 [2:2]" x_offset="0" y_offset="0" z_offset="1" />
+		<direct name="SLICE_B4_DIRECT[2]-" from_pin="SLICE.DMUX" to_pin="SLICE.B6-1 [2:2]" x_offset="0" y_offset="0" z_offset="-1"/>
+
+		<direct name="SLICE_B5_DIRECT[0]"  from_pin="SLICE.CQ"   to_pin="SLICE.B6-1 [1:1]" x_offset="0" y_offset="0" z_offset="0" />
+		<direct name="SLICE_B5_DIRECT[1]+" from_pin="SLICE.AMUX" to_pin="SLICE.B6-1 [1:1]" x_offset="0" y_offset="0" z_offset="1" />
+		<direct name="SLICE_B5_DIRECT[1]-" from_pin="SLICE.AMUX" to_pin="SLICE.B6-1 [1:1]" x_offset="0" y_offset="0" z_offset="-1"/>
+		<direct name="SLICE_B5_DIRECT[2]+" from_pin="SLICE.C"    to_pin="SLICE.B6-1 [1:1]" x_offset="0" y_offset="0" z_offset="1" />
+		<direct name="SLICE_B5_DIRECT[2]-" from_pin="SLICE.C"    to_pin="SLICE.B6-1 [1:1]" x_offset="0" y_offset="0" z_offset="-1"/>
+
+		<direct name="SLICE_B6_DIRECT[0]"  from_pin="SLICE.BMUX" to_pin="SLICE.B6-1 [0:0]" x_offset="0" y_offset="0" z_offset="0" />
+		<direct name="SLICE_B6_DIRECT[1]+" from_pin="SLICE.B"    to_pin="SLICE.A6-1 [0:0]" x_offset="0" y_offset="0" z_offset="0" />
+		<direct name="SLICE_B6_DIRECT[2]+" from_pin="SLICE.DQ"   to_pin="SLICE.A6-1 [0:0]" x_offset="0" y_offset="0" z_offset="1" />
+		<direct name="SLICE_B6_DIRECT[2]-" from_pin="SLICE.DQ"   to_pin="SLICE.A6-1 [0:0]" x_offset="0" y_offset="0" z_offset="-1"/>
+
+		<direct name="SLICE_C1_DIRECT[0]"  from_pin="SLICE.AQ"   to_pin="SLICE.C6-1 [5:5]" x_offset="0" y_offset="0" z_offset="0" />
+		<direct name="SLICE_C1_DIRECT[1]+" from_pin="SLICE.A"    to_pin="SLICE.C6-1 [5:5]" x_offset="0" y_offset="0" z_offset="1" />
+		<direct name="SLICE_C1_DIRECT[1]-" from_pin="SLICE.A"    to_pin="SLICE.C6-1 [5:5]" x_offset="0" y_offset="0" z_offset="-1"/>
+		<direct name="SLICE_C1_DIRECT[2]+" from_pin="SLICE.CMUX" to_pin="SLICE.C6-1 [5:5]" x_offset="0" y_offset="0" z_offset="1" />
+		<direct name="SLICE_C1_DIRECT[2]-" from_pin="SLICE.CMUX" to_pin="SLICE.C6-1 [5:5]" x_offset="0" y_offset="0" z_offset="-1"/>
+
+		<direct name="SLICE_C2_DIRECT[0]"  from_pin="SLICE.BMUX" to_pin="SLICE.C6-1 [4:4]" x_offset="0" y_offset="0" z_offset="0" />
+		<direct name="SLICE_C2_DIRECT[1]+" from_pin="SLICE.D"    to_pin="SLICE.C6-1 [4:4]" x_offset="0" y_offset="0" z_offset="0" />
+		<direct name="SLICE_C2_DIRECT[2]+" from_pin="SLICE.DQ"   to_pin="SLICE.C6-1 [4:4]" x_offset="0" y_offset="0" z_offset="1" />
+		<direct name="SLICE_C2_DIRECT[2]-" from_pin="SLICE.DQ"   to_pin="SLICE.C6-1 [4:4]" x_offset="0" y_offset="0" z_offset="-1"/>
+
+		<direct name="SLICE_C3_DIRECT[0]"  from_pin="SLICE.A"    to_pin="SLICE.C6-1 [3:3]" x_offset="0" y_offset="0" z_offset="0" />
+		<direct name="SLICE_C3_DIRECT[1]+" from_pin="SLICE.CMUX" to_pin="SLICE.C6-1 [3:3]" x_offset="0" y_offset="0" z_offset="0" />
+		<direct name="SLICE_C3_DIRECT[2]+" from_pin="SLICE.AQ"   to_pin="SLICE.C6-1 [3:3]" x_offset="0" y_offset="0" z_offset="1" />
+		<direct name="SLICE_C3_DIRECT[2]-" from_pin="SLICE.AQ"   to_pin="SLICE.C6-1 [3:3]" x_offset="0" y_offset="0" z_offset="-1"/>
+
+		<direct name="SLICE_C4_DIRECT[0]"  from_pin="SLICE.BQ"   to_pin="SLICE.C6-1 [2:2]" x_offset="0" y_offset="0" z_offset="0" />
+		<direct name="SLICE_C4_DIRECT[1]+" from_pin="SLICE.B"    to_pin="SLICE.C6-1 [2:2]" x_offset="0" y_offset="0" z_offset="1" />
+		<direct name="SLICE_C4_DIRECT[1]-" from_pin="SLICE.B"    to_pin="SLICE.C6-1 [2:2]" x_offset="0" y_offset="0" z_offset="-1"/>
+		<direct name="SLICE_C4_DIRECT[2]+" from_pin="SLICE.DMUX" to_pin="SLICE.C6-1 [2:2]" x_offset="0" y_offset="0" z_offset="1" />
+		<direct name="SLICE_C4_DIRECT[2]-" from_pin="SLICE.DMUX" to_pin="SLICE.C6-1 [2:2]" x_offset="0" y_offset="0" z_offset="-1"/>
+
+		<direct name="SLICE_C5_DIRECT[0]"  from_pin="SLICE.CQ"   to_pin="SLICE.C6-1 [1:1]" x_offset="0" y_offset="0" z_offset="0" />
+		<direct name="SLICE_C5_DIRECT[1]+" from_pin="SLICE.AMUX" to_pin="SLICE.C6-1 [1:1]" x_offset="0" y_offset="0" z_offset="1" />
+		<direct name="SLICE_C5_DIRECT[1]-" from_pin="SLICE.AMUX" to_pin="SLICE.C6-1 [1:1]" x_offset="0" y_offset="0" z_offset="-1"/>
+		<direct name="SLICE_C5_DIRECT[2]+" from_pin="SLICE.C"    to_pin="SLICE.C6-1 [1:1]" x_offset="0" y_offset="0" z_offset="1" />
+		<direct name="SLICE_C5_DIRECT[2]-" from_pin="SLICE.C"    to_pin="SLICE.C6-1 [1:1]" x_offset="0" y_offset="0" z_offset="-1"/>
+
+		<direct name="SLICE_C6_DIRECT[0]"  from_pin="SLICE.BMUX" to_pin="SLICE.C6-1 [0:0]" x_offset="0" y_offset="0" z_offset="0" />
+		<direct name="SLICE_C6_DIRECT[1]"  from_pin="SLICE.D"    to_pin="SLICE.C6-1 [0:0]" x_offset="0" y_offset="0" z_offset="0" />
+		<direct name="SLICE_C6_DIRECT[2]+" from_pin="SLICE.DQ"   to_pin="SLICE.C6-1 [0:0]" x_offset="0" y_offset="0" z_offset="1" />
+		<direct name="SLICE_C6_DIRECT[2]-" from_pin="SLICE.DQ"   to_pin="SLICE.C6-1 [0:0]" x_offset="0" y_offset="0" z_offset="-1"/>
+
+		<direct name="SLICE_D1_DIRECT[0]"  from_pin="SLICE.CQ"   to_pin="SLICE.D6-1 [5:5]" x_offset="0" y_offset="0" z_offset="0" />
+		<direct name="SLICE_D1_DIRECT[1]+" from_pin="SLICE.AMUX" to_pin="SLICE.D6-1 [5:5]" x_offset="0" y_offset="0" z_offset="1" />
+		<direct name="SLICE_D1_DIRECT[1]-" from_pin="SLICE.AMUX" to_pin="SLICE.D6-1 [5:5]" x_offset="0" y_offset="0" z_offset="-1"/>
+		<direct name="SLICE_D1_DIRECT[2]+" from_pin="SLICE.C"    to_pin="SLICE.D6-1 [5:5]" x_offset="0" y_offset="0" z_offset="1" />
+		<direct name="SLICE_D1_DIRECT[2]-" from_pin="SLICE.C"    to_pin="SLICE.D6-1 [5:5]" x_offset="0" y_offset="0" z_offset="-1"/>
+
+		<direct name="SLICE_D2_DIRECT[0]"  from_pin="SLICE.B"    to_pin="SLICE.D6-1 [4:4]" x_offset="0" y_offset="0" z_offset="0" />
+		<direct name="SLICE_D2_DIRECT[1]"  from_pin="SLICE.DMUX" to_pin="SLICE.D6-1 [4:4]" x_offset="0" y_offset="0" z_offset="0" />
+		<direct name="SLICE_D2_DIRECT[2]+" from_pin="SLICE.BQ"   to_pin="SLICE.D6-1 [4:4]" x_offset="0" y_offset="0" z_offset="1" />
+		<direct name="SLICE_D2_DIRECT[2]-" from_pin="SLICE.BQ"   to_pin="SLICE.D6-1 [4:4]" x_offset="0" y_offset="0" z_offset="-1"/>
+
+		<direct name="SLICE_D3_DIRECT[0]"  from_pin="SLICE.A"    to_pin="SLICE.D6-1 [3:3]" x_offset="0" y_offset="0" z_offset="0" />
+		<direct name="SLICE_D3_DIRECT[1]"  from_pin="SLICE.AMUX" to_pin="SLICE.D6-1 [3:3]" x_offset="0" y_offset="0" z_offset="0" />
+		<direct name="SLICE_D3_DIRECT[2]+" from_pin="SLICE.CQ"   to_pin="SLICE.D6-1 [3:3]" x_offset="0" y_offset="0" z_offset="1" />
+		<direct name="SLICE_D3_DIRECT[2]-" from_pin="SLICE.CQ"   to_pin="SLICE.D6-1 [3:3]" x_offset="0" y_offset="0" z_offset="-1"/>
+
+		<direct name="SLICE_D4_DIRECT[0]"  from_pin="SLICE.DQ"   to_pin="SLICE.D6-1 [2:2]" x_offset="0" y_offset="0" z_offset="0" />
+		<direct name="SLICE_D4_DIRECT[1]+" from_pin="SLICE.BMUX" to_pin="SLICE.D6-1 [2:2]" x_offset="0" y_offset="0" z_offset="1" />
+		<direct name="SLICE_D4_DIRECT[1]-" from_pin="SLICE.BMUX" to_pin="SLICE.D6-1 [2:2]" x_offset="0" y_offset="0" z_offset="-1"/>
+		<direct name="SLICE_D4_DIRECT[2]+" from_pin="SLICE.D"    to_pin="SLICE.D6-1 [2:2]" x_offset="0" y_offset="0" z_offset="1" />
+		<direct name="SLICE_D4_DIRECT[2]-" from_pin="SLICE.D"    to_pin="SLICE.D6-1 [2:2]" x_offset="0" y_offset="0" z_offset="-1"/>
+
+		<direct name="SLICE_D5_DIRECT[0]"  from_pin="SLICE.AQ"   to_pin="SLICE.D6-1 [1:1]" x_offset="0" y_offset="0" z_offset="0" />
+		<direct name="SLICE_D5_DIRECT[1]+" from_pin="SLICE.A"    to_pin="SLICE.D6-1 [1:1]" x_offset="0" y_offset="0" z_offset="1" />
+		<direct name="SLICE_D5_DIRECT[1]-" from_pin="SLICE.A"    to_pin="SLICE.D6-1 [1:1]" x_offset="0" y_offset="0" z_offset="-1"/>
+		<direct name="SLICE_D5_DIRECT[2]+" from_pin="SLICE.CMUX" to_pin="SLICE.D6-1 [1:1]" x_offset="0" y_offset="0" z_offset="1" />
+		<direct name="SLICE_D5_DIRECT[2]-" from_pin="SLICE.CMUX" to_pin="SLICE.D6-1 [1:1]" x_offset="0" y_offset="0" z_offset="-1"/>
+
+		<direct name="SLICE_D6_DIRECT[0]"  from_pin="SLICE.B"    to_pin="SLICE.D6-1 [0:0]" x_offset="0" y_offset="0" z_offset="0" />
+		<direct name="SLICE_D6_DIRECT[1]"  from_pin="SLICE.DMUX" to_pin="SLICE.D6-1 [0:0]" x_offset="0" y_offset="0" z_offset="0" />
+		<direct name="SLICE_D6_DIRECT[2]+" from_pin="SLICE.BQ"   to_pin="SLICE.D6-1 [0:0]" x_offset="0" y_offset="0" z_offset="1" />
+		<direct name="SLICE_D6_DIRECT[2]-" from_pin="SLICE.BQ"   to_pin="SLICE.D6-1 [0:0]" x_offset="0" y_offset="0" z_offset="-1"/>
+		-->
+	</directlist>
+
+	<complexblocklist>
+		<!-- Capacity is a unique property of I/Os, it is the maximum number of I/Os that can be placed at the same (X,Y) location on the FPGA -->
+		<!-- TODO: Support IOB registers -->
+		<pb_type name="IOB" capacity="2">
+			<!-- 0 and 4 -->
+			<input name="O" num_pins="1"/>
+			<!-- 1 and 5 -->
+			<output name="I" num_pins="1"/>
+
+			<!-- 2 and 6 -->
+			<output name="GND_WIRE" num_pins="1"/>
+			<!-- 3 and 7 -->
+			<output name="VCC_WIRE" num_pins="1"/>
+
+			<!-- IOs can operate as either inputs or outputs -->
+			<mode name="ibuf">
+				<pb_type name="ibuf" blif_model=".input" num_pb="1">
+					<output name="i" num_pins="1"/>
+				</pb_type>
+				<interconnect>
+					<direct name="i" input="ibuf.i" output="IOB.I">
+						<!-- TRCE: Tiopi LVCMOS25 -->
+						<delay_constant max="0.846e-9" in_port="ibuf.i" out_port="IOB.I"/>
+					</direct>
+				</interconnect>
+			</mode>
+
+			<mode name="obuf">
+				<pb_type name="obuf" blif_model=".output" num_pb="1">
+					<input name="o" num_pins="1"/>
+				</pb_type>
+				<interconnect>
+					<direct name="o" input="IOB.O" output="obuf.o">
+						<!-- TRCE: Tioop LVCMOS25 -->
+						<delay_constant max="2.349e-9" in_port="IOB.O" out_port="obuf.o"/>
+					</direct>
+				</interconnect>
+			</mode>
+
+			<fc default_in_type="abs" default_in_val="1" default_out_type="abs" default_out_val="1"/>
+
+			<pinlocations pattern="spread"/>
+
+			<gridlocations>
+				<!--loc type="col" start="0" priority="10"/-->
+				<loc type="col" start="41" priority="10"/>
+				<loc type="col" start="57" priority="10"/>
+			</gridlocations>
+		</pb_type>
+		
+		<!-- TODO: Support F7/F8MUX -->
+		<pb_type name="SLICEL" capacity="2">
+			<!-- 0 / 95: -->
+			<input name="A6-1"      num_pins="6" equivalent="true" />
+			<input name="A6_VCCONLY" num_pins="1" equivalent="false"/>
+			<input name="AX"          num_pins="1" equivalent="false"/>
+			<input name="B6-1"      num_pins="6" equivalent="true" />
+			<input name="B6_VCCONLY" num_pins="1" equivalent="false"/>
+			<input name="BX"          num_pins="1" equivalent="false"/>
+			<input name="C6-1"      num_pins="6" equivalent="true" />
+			<input name="C6_VCCONLY" num_pins="1" equivalent="false"/>
+			<input name="CX"          num_pins="1" equivalent="false"/>
+			<input name="D6-1"      num_pins="6" equivalent="true" />
+			<input name="D6_VCCONLY" num_pins="1" equivalent="false"/>
+			<input name="DX"          num_pins="1" equivalent="false"/>
+
+			<!-- 32 / 81: -->
+			<input name="CIN"        num_pins="1" equivalent="false"/>
+
+			<!-- 33 / 73: -->
+			<output name="A"           num_pins="1" equivalent="false"/>
+			<output name="AQ"         num_pins="1" equivalent="false"/>
+			<output name="AMUX"     num_pins="1" equivalent="false"/>
+			<output name="B"           num_pins="1" equivalent="false"/>
+			<output name="BQ"         num_pins="1" equivalent="false"/>
+			<output name="BMUX"     num_pins="1" equivalent="false"/>
+			<output name="C"           num_pins="1" equivalent="false"/>
+			<output name="CQ"         num_pins="1" equivalent="false"/>
+			<output name="CMUX"     num_pins="1" equivalent="false"/>
+			<output name="D"           num_pins="1" equivalent="false"/>
+			<output name="DQ"         num_pins="1" equivalent="false"/>
+			<output name="DMUX"     num_pins="1" equivalent="false"/>
+
+			<!-- 45 / 94: -->
+			<output name="COUT"     num_pins="1" equivalent="false"/>
+
+			<!-- 46 / 95: -->
+			<output name="GND_WIRE" num_pins="1"/>
+			<output name="VCC_WIRE" num_pins="1"/>
+	
+			<!-- 48 / 97: -->
+			<clock name="CLK"    num_pins="1"/>
+
+			<mode name = "LUT6x4">
+				<pb_type name="ble6" num_pb="4">
+					<input name="A6-1"  num_pins="6"/>
+					<input name="AX"    num_pins="1"/>
+					<input name="CIN"   num_pins="1"/>
+					<output name="A"    num_pins="1"/>
+					<output name="AQ"   num_pins="1"/>
+					<output name="AMUX" num_pins="1"/>
+					<output name="COUT" num_pins="1"/>
+					<clock name="CLK"   num_pins="1"/>
+
+					<mode name="O6O5LUT">
+						<pb_type name="LUT5" blif_model=".names" num_pb="2" class="lut">
+							<input name="in"   num_pins="5" port_class="lut_in" />
+							<output name="out" num_pins="1" port_class="lut_out"/>
+							<!-- TRCE: Tilo -->
+							<delay_matrix type="max" in_port="LUT5.in" out_port="LUT5.out">
+								0.068e-9
+								0.068e-9
+								0.068e-9
+								0.068e-9
+								0.068e-9
+							</delay_matrix>
+						</pb_type>
+						<pb_type name="FF" blif_model=".latch" num_pb="2" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<!-- TRCE: Tas -->
+							<T_setup      value="0.301e-9" port="FF.D" clock="clk"/>
+							<!-- TRCE: Tcko -->
+							<T_clock_to_Q max="0.381e-9"   port="FF.Q" clock="clk"/>
+						</pb_type>
+						<interconnect>
+							<direct name="A6-1[0]" input="ble6.A6-1[5:1]" output="LUT5[0].in[4:0]"/>
+							<direct name="A6-1[1]" input="ble6.A6-1[5:1]" output="LUT5[1].in[4:0]"/>
+							<direct name="A"       input="LUT5[0].out"   output="ble6.A"/>
+							<direct name="AQ"      input="FF[0].Q"       output="ble6.AQ"/>
+							<mux name="AMUX" input="FF[1].Q LUT5[1].out" output="ble6.AMUX">
+								<!-- TRCE: Tshcko = 0.468ns - Tcko = 0.381ns -->
+								<delay_constant max="0.087e-9" in_port="FF[1].Q" out_port="ble6.AMUX"/>
+								<!-- TRCE: Tilo (BMUX) = 0.205ns - Tilo = 0.068ns -->
+								<!--delay_constant max="0.137e-9" in_port="LUT5[0].out" out_port="ble6.AMUX"/-->
+								<delay_constant max="0.137e-9" in_port="LUT5[1].out" out_port="ble6.AMUX"/>
+							</mux>
+							<mux name="FF[0].D"  input="LUT5[0].out LUT5[1].out ble6.AX" output="FF[0].D">
+								<pack_pattern name="LUT5-FF"     in_port="LUT5[0].out"   out_port="FF[0].D"/>
+								<!-- TODO: -->
+								<delay_constant max="0.0e-9" in_port="ble6.AX" out_port="FF[0].D"/>
+							</mux>
+							<mux name="FF[1].D"  input="LUT5[1].out ble6.AX" output="FF[1].D">
+								<pack_pattern name="LUT5-FF" in_port="LUT5[1].out"   out_port="FF[1].D"/>
+							</mux>
+							<complete name="clk" input="ble6.CLK" output="FF.clk"/>
+						</interconnect>
+					</mode>
+
+					<mode name="O6O5LUT_XADDER">
+						<pb_type name="LUT5" blif_model=".names" num_pb="2" class="lut">
+							<input name="in"   num_pins="5" port_class="lut_in" />
+							<output name="out" num_pins="1" port_class="lut_out"/>
+							<!-- TRCE: Tilo -->
+							<delay_matrix type="max" in_port="LUT5.in" out_port="LUT5.out">
+								0.068e-9
+								0.068e-9
+								0.068e-9
+								0.068e-9
+								0.068e-9
+							</delay_matrix>
+						</pb_type>
+						<pb_type name="XADDER" blif_model=".subckt xadder" num_pb="1">
+							<input name="a_xor_b" num_pins="1"/>
+							<input name="a_and_b" num_pins="1"/>
+							<input name="cin"     num_pins="1"/>
+							<output name="sumout" num_pins="1"/>
+							<output name="cout"   num_pins="1"/>
+							<!-- TRCE: Topaa (Ax - AMUX) = 0.329 - Tilo -->
+							<delay_constant max="0.261e-9" in_port="XADDER.a_xor_b" out_port="XADDER.sumout"/>
+							<delay_constant max="0.261e-9" in_port="XADDER.a_and_b" out_port="XADDER.sumout"/>
+							<!-- TRCE: Tcina (CIN - AMUX) -->
+							<delay_constant max="0.248e-9" in_port="XADDER.cin"     out_port="XADDER.sumout"/>
+							<!-- TRCE: Topcyd (Dx - COUT) = 0.319 - Tilo -->
+							<delay_constant max="0.251e-9" in_port="XADDER.a_xor_b" out_port="XADDER.cout"/>
+							<delay_constant max="0.251e-9" in_port="XADDER.a_and_b" out_port="XADDER.cout"/>
+							<!-- TRCE: Tbyp = 0.078 / 4 -->
+							<delay_constant max="0.020e-9" in_port="XADDER.cin"     out_port="XADDER.cout"/>
+						</pb_type>
+						<pb_type name="FF" blif_model=".latch" num_pb="2" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<!-- TRCE: Tas -->
+							<T_setup      value="0.301e-9" port="FF.D" clock="clk"/>
+							<!-- TRCE: Tcko -->
+							<T_clock_to_Q max="0.381e-9"   port="FF.Q" clock="clk"/>
+						</pb_type>
+						<interconnect>
+							<direct name="A6-1[0]" input="ble6.A6-1[5:1]" output="LUT5[0].in[4:0]"/>
+							<direct name="A6-1[1]" input="ble6.A6-1[5:1]" output="LUT5[1].in[4:0]"/>
+							<direct name="A"       input="LUT5[0].out"   output="ble6.A"/>
+							<direct name="AQ"      input="FF[0].Q"       output="ble6.AQ"/>
+							<direct name="CIN"     input="ble6.CIN"       output="XADDER.cin">
+								<pack_pattern name="SLICEL_carry" in_port="ble6.CIN" out_port="XADDER.cin"/>
+							</direct>
+							<direct name="COUT"     input="XADDER.cout" output="ble6.COUT">
+								<pack_pattern name="SLICEL_carry" in_port="XADDER.cout" out_port="ble6.COUT"/>
+							</direct>
+							<direct name="XADDER_a" input="LUT5[0].out" output="XADDER.a_xor_b">
+								<pack_pattern name="SLICEL_carry" in_port="LUT5[0].out" out_port="XADDER.a_xor_b"/>
+							</direct>
+							<mux name="XADDER_b" input="LUT5[1].out ble6.AX" output="XADDER.a_and_b">
+								<!-- TODO: this pattern doesn't work, either in combination with one above,
+								     or by itself; pre-pack works, but clustering fails to allow molecule 
+								     to be implemented .... -->
+								<!--pack_pattern name="SLICEL_carry" in_port="LUT5[1].out" out_port="XADDER.a_and_b"/-->
+								<!-- TODO: TRCE: Taxcy=0.295ns - Topcya=0.410ns -->
+								<delay_constant max="0.0e-9" in_port="ble6.AX" out_port="XADDER.a_and_b"/>
+							</mux>
+							<!-- Do not allow XADDER.cout to go out on AMUX, because sometimes the packer
+							     will take this route (instead of COUT) and break the carry chain -->
+							<mux name="AMUX" input="XADDER.sumout" output="ble6.AMUX"/>
+							<!-- 
+							     TODO: Adding this creates a lot of "Routing failed. Disconnected rr_graph." 
+							     messages during packing (but ultimately still works)!?!
+							<mux name="FF[0].D"  input="XADDER.sumout" output="FF[0].D">
+								<pack_pattern name="SLICEL_carry" in_port="XADDER.sumout" out_port="FF[0].D"/>
+								<!- -pack_pattern name="SLICEL_carry" in_port="XADDER.cout" out_port="FF[0].D"/- ->
+								<!- - TODO: - ->
+								<delay_constant max="0.0e-9" in_port="ble6.AX" out_port="FF[0].D"/>
+							</mux>
+							-->
+							<!--mux name="FF[1].D"  input="LUT5[1].out ble6.AX" output="FF[1].D">
+								<pack_pattern name="LUT5-FF" in_port="LUT5[1].out"   out_port="FF[1].D"/>
+							</mux-->
+							<complete name="clk" input="ble6.CLK" output="FF.clk"/>
+						</interconnect>
+					</mode>
+
+					<mode name="O6LUT">
+						<pb_type name="LUT6" blif_model=".names" num_pb="1" class="lut">
+							<input name="in"   num_pins="6" port_class="lut_in" />
+							<output name="out" num_pins="1" port_class="lut_out"/>
+							<delay_matrix type="max" in_port="LUT6.in" out_port="LUT6.out">
+								0.068e-9
+								0.068e-9
+								0.068e-9
+								0.068e-9
+								0.068e-9
+								0.068e-9
+							</delay_matrix>
+						</pb_type>
+						<pb_type name="FF" blif_model=".latch" num_pb="2" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<!-- TRCE: Tas -->
+							<T_setup      value="0.301e-9" port="FF.D" clock="clk"/>
+							<!-- TRCE: Tcko -->
+							<T_clock_to_Q max="0.381e-9"   port="FF.Q" clock="clk"/>
+						</pb_type>
+						<interconnect>
+							<direct name="A6-1" input="ble6.A6-1[5:0]" output="LUT6.in[5:0]"/>
+							<direct name="A"    input="LUT6.out" output="ble6.A"/>
+							<direct name="AQ"   input="FF[0].Q"  output="ble6.AQ"/>
+							<mux name="AMUX" input="FF[1].Q" output="ble6.AMUX">
+								<delay_constant max="0.087e-9" in_port="FF[1].Q" out_port="ble6.AMUX"/>
+								<delay_constant max="0.137e-9" in_port="LUT6.out" out_port="ble6.AMUX"/>
+							</mux>
+							<mux name="FF[0].D"  input="LUT6.out ble6.AX" output="FF[0].D">
+								<pack_pattern name="LUT6-FF" in_port="LUT6.out"      out_port="FF[0].D"/>
+								<delay_constant max="0.0e-9" in_port="ble6.AX" out_port="FF[0].D"/>
+							</mux>
+							<mux name="FF[1].D"  input="ble6.AX" output="FF[1].D">
+								<delay_constant max="0.0e-9" in_port="ble6.AX" out_port="FF[1].D"/>
+							</mux>
+							<complete name="clk" input="ble6.CLK" output="FF.clk"/>
+						</interconnect>
+					</mode>
+				</pb_type>
+				<pb_type name="DUMMY" blif_model=".subckt adder" num_pb="1">
+					<input name="a"       num_pins="1"/>
+					<input name="b"       num_pins="1"/>
+					<input name="cin"     num_pins="1"/>
+					<output name="sumout" num_pins="1"/>
+					<output name="cout"   num_pins="1"/>
+				</pb_type>
+				<interconnect>
+					<direct name="A6-1" input="SLICEL.A6-1"  output="ble6[0].A6-1"/>
+					<direct name="AX"   input="SLICEL.AX"    output="ble6[0].AX"  />
+					<direct name="A"    input="ble6[0].A"    output="SLICEL.A"    />
+					<direct name="AQ"   input="ble6[0].AQ"   output="SLICEL.AQ"   />
+					<direct name="AMUX" input="ble6[0].AMUX" output="SLICEL.AMUX" />
+
+					<direct name="B6-1" input="SLICEL.B6-1"  output="ble6[1].A6-1"/>
+					<direct name="BX"   input="SLICEL.BX"    output="ble6[1].AX"  />
+					<direct name="B"    input="ble6[1].A"    output="SLICEL.B"    />
+					<direct name="BQ"   input="ble6[1].AQ"   output="SLICEL.BQ"   />
+					<direct name="BMUX" input="ble6[1].AMUX" output="SLICEL.BMUX" />
+
+					<direct name="C6-1" input="SLICEL.C6-1"  output="ble6[2].A6-1"/>
+					<direct name="CX"   input="SLICEL.CX"    output="ble6[2].AX"  />
+					<direct name="C"    input="ble6[2].A"    output="SLICEL.C"    />
+					<direct name="CQ"   input="ble6[2].AQ"   output="SLICEL.CQ"   />
+					<direct name="CMUX" input="ble6[2].AMUX" output="SLICEL.CMUX" />
+
+					<direct name="D6-1" input="SLICEL.D6-1"  output="ble6[3].A6-1"/>
+					<direct name="DX"   input="SLICEL.DX"    output="ble6[3].AX"  />
+					<direct name="D"    input="ble6[3].A"    output="SLICEL.D"    />
+					<direct name="DQ"   input="ble6[3].AQ"   output="SLICEL.DQ"   />
+					<direct name="DMUX" input="ble6[3].AMUX" output="SLICEL.DMUX" />
+
+					<!--direct name="const0" input="const0.out" output="SLICEL.GND_WIRE"/>
+					<direct name="const1" input="const1.out" output="SLICEL.VCC_WIRE"/-->
+
+					<direct name="COUT" input="ble6[3].COUT" output="SLICEL.COUT">
+						<pack_pattern name="SLICEL_carry" in_port="ble6[3].COUT" out_port="SLICEL.COUT"/>
+					</direct>
+					<direct name="chain" input="ble6[2:0].COUT" output="ble6[3:1].CIN">
+						<pack_pattern name="SLICEL_carry" in_port="ble6[2:0].COUT" out_port="ble6[3:1].CIN"/>
+					</direct>
+					<!-- CIN can be sourced from dedicated CIN pin or from AX port -->
+					<!-- FIXME: But enabling it exposes a bug in the packer: sometimes it chooses
+					     to go from COUT -> AX, even though COUT is marked as having no
+					     access to the general routing... -->
+					<!--mux name="CIN"  input="SLICEL.AX SLICEL.CIN"  output="ble6[0].CIN"-->
+					<mux name="CIN"  input="SLICEL.CIN"  output="ble6[0].CIN">
+						<pack_pattern name="SLICEL_carry" in_port="SLICEL.CIN" out_port="ble6[0].CIN"/>
+						<!--delay_constant max="0.28e-9" in_port="SLICEL.CIN" out_port="ble6[0].CIN"/-->
+					</mux>
+
+					<complete name="CLK" input="SLICEL.CLK" output="ble6[3:0].CLK"/>
+				</interconnect>
+			</mode>
+			<mode name="LUT7x2">
+				<pb_type name="ble7" num_pb="2">
+					<input name="A6-1"  num_pins="6"/>
+					<input name="B6-1"  num_pins="6"/>
+					<input name="AX"    num_pins="1"/>
+					<output name="AMUX" num_pins="1"/>
+					<output name="AQ"   num_pins="1"/>
+					<clock name="CLK"   num_pins="1"/>
+
+					<pb_type name="LUT7" blif_model=".subckt lut7" num_pb="1">
+						<input name="A6-1"  num_pins="6"/>
+						<input name="B6-1"  num_pins="6"/>
+						<input name="AX"    num_pins="1"/>
+						<output name="F7"   num_pins="1"/>
+						<!-- TRCE: Tilo (A1 -> AMUX) -->
+						<delay_matrix type="max" in_port="LUT7.A6-1" out_port="LUT7.F7">
+							0.329e-9
+							0.329e-9
+							0.329e-9
+							0.329e-9
+							0.329e-9
+							0.329e-9
+						</delay_matrix>
+						<!-- TRCE: Topba = 0.334 / Topdc = 0.355 -->
+						<delay_matrix type="max" in_port="LUT7.B6-1" out_port="LUT7.F7">
+							0.345e-9
+							0.345e-9
+							0.345e-9
+							0.345e-9
+							0.345e-9
+							0.345e-9
+						</delay_matrix>
+						<!-- Taxa -->
+						<delay_constant max="0.42e-9" in_port="LUT7.AX" out_port="LUT7.F7"/>
+					</pb_type>
+					<pb_type name="FF" blif_model=".latch" num_pb="1" class="flipflop">
+						<input  name="D"   num_pins="1" port_class="D"    />
+						<output name="Q"   num_pins="1" port_class="Q"    />
+						<clock  name="clk" num_pins="1" port_class="clock"/>
+						<!-- Tdick -->
+						<T_setup      value="0.43e-9" port="FF.D" clock="clk"/>
+						<!-- Tcko -->
+						<T_clock_to_Q max="0.32e-9"   port="FF.Q" clock="clk"/>
+					</pb_type>
+					<interconnect>
+						<direct name="A6-1" input="ble7.A6-1" output="LUT7.A6-1"/>
+						<direct name="B6-1" input="ble7.B6-1" output="LUT7.B6-1"/>
+						<direct name="AX"   input="ble7.AX"   output="LUT7.AX"  />
+						<direct name="AMUX" input="LUT7.F7" output="ble7.AMUX"  />
+						<direct name="AFF"  input="LUT7.F7" output="FF.D"      >
+							<pack_pattern name="LUT7-FF" in_port="LUT7.F7" out_port="FF.D"/>
+						</direct>
+						<direct name="AQ"   input="FF.Q"    output="ble7.AQ"    />
+						<complete name="CLK"  input="ble7.CLK"  output="FF.clk"    />
+					</interconnect>
+				</pb_type>
+				<interconnect>
+					<direct name="A6-1" input="SLICEL.A6-1" output="ble7[0].A6-1"/>
+					<direct name="B6-1" input="SLICEL.B6-1" output="ble7[0].B6-1"/>
+					<direct name="C6-1" input="SLICEL.C6-1" output="ble7[1].A6-1"/>
+					<direct name="D6-1" input="SLICEL.D6-1" output="ble7[1].B6-1"/>
+					<direct name="AX"   input="SLICEL.AX"   output="ble7[0].AX"  />
+					<direct name="CX"   input="SLICEL.CX"   output="ble7[1].AX"  />
+					<direct name="AMUX" input="ble7[0].AMUX" output="SLICEL.AMUX"  />
+					<direct name="CMUX" input="ble7[1].AMUX" output="SLICEL.CMUX"  />
+					<direct name="AQ"   input="ble7[0].AQ"    output="SLICEL.AQ"    />
+					<direct name="CQ"   input="ble7[1].AQ"    output="SLICEL.CQ"    />
+					<complete name="CLK"  input="SLICEL.CLK"  output="ble7.CLK"  />
+				</interconnect>
+			</mode>
+			<mode name="LUT8">
+				<pb_type name="ble8" num_pb="1">
+					<input name="A6-1"  num_pins="6"/>
+					<input name="B6-1"  num_pins="6"/>
+					<input name="C6-1"  num_pins="6"/>
+					<input name="D6-1"  num_pins="6"/>
+					<input name="AX"    num_pins="1"/>
+					<input name="BX"    num_pins="1"/>
+					<input name="CX"    num_pins="1"/>
+					<output name="BMUX"   num_pins="1"/>
+					<output name="BQ"   num_pins="1"/>
+					<clock name="CLK"   num_pins="1"/>
+
+					<pb_type name="LUT8" blif_model=".subckt lut8" num_pb="1">
+						<input name="A6-1"  num_pins="6"/>
+						<input name="B6-1"  num_pins="6"/>
+						<input name="C6-1"  num_pins="6"/>
+						<input name="D6-1"  num_pins="6"/>
+						<input name="AX"    num_pins="1"/>
+						<input name="BX"    num_pins="1"/>
+						<input name="CX"    num_pins="1"/>
+						<output name="F8"   num_pins="1"/>
+						<!-- TRCE: Topab (not carry chain) -->
+						<delay_matrix type="max" in_port="LUT8.A6-1" out_port="LUT8.F8">
+							0.395e-9
+							0.395e-9
+							0.395e-9
+							0.395e-9
+							0.395e-9
+							0.395e-9
+						</delay_matrix>
+						<!-- TRCE: Topbb (not carry chain) -->
+						<delay_matrix type="max" in_port="LUT8.B6-1" out_port="LUT8.F8">
+							0.392e-9
+							0.392e-9
+							0.392e-9
+							0.392e-9
+							0.392e-9
+							0.392e-9
+						</delay_matrix>
+						<!-- TRCE: Topcb -->
+						<delay_matrix type="max" in_port="LUT8.C6-1" out_port="LUT8.F8">
+							0.417e-9
+							0.417e-9
+							0.417e-9
+							0.417e-9
+							0.417e-9
+							0.417e-9
+						</delay_matrix>
+						<!-- TRCE: Topdb -->
+						<delay_matrix type="max" in_port="LUT8.D6-1" out_port="LUT8.F8">
+							0.414e-9
+							0.414e-9
+							0.414e-9
+							0.414e-9
+							0.414e-9
+							0.414e-9
+						</delay_matrix>
+						<!-- Taxb -->
+						<delay_constant max="0.47e-9" in_port="LUT8.AX" out_port="LUT8.F8"/>
+						<!-- Tbxb -->
+						<delay_constant max="0.39e-9" in_port="LUT8.BX" out_port="LUT8.F8"/>
+						<!-- No Tcxb, so Tcxd -->
+						<delay_constant max="0.40e-9" in_port="LUT8.CX" out_port="LUT8.F8"/>
+					</pb_type>
+					<pb_type name="FF" blif_model=".latch" num_pb="1" class="flipflop">
+						<input  name="D"   num_pins="1" port_class="D"    />
+						<output name="Q"   num_pins="1" port_class="Q"    />
+						<clock  name="clk" num_pins="1" port_class="clock"/>
+						<!-- Tdick -->
+						<T_setup      value="0.43e-9" port="FF.D" clock="clk"/>
+						<!-- Tcko -->
+						<T_clock_to_Q max="0.32e-9"   port="FF.Q" clock="clk"/>
+					</pb_type>
+					<interconnect>
+						<direct name="A6-1" input="ble8.A6-1" output="LUT8.A6-1"/>
+						<direct name="B6-1" input="ble8.B6-1" output="LUT8.B6-1"/>
+						<direct name="C6-1" input="ble8.C6-1" output="LUT8.C6-1"/>
+						<direct name="D6-1" input="ble8.D6-1" output="LUT8.D6-1"/>
+						<direct name="AX"   input="ble8.AX"   output="LUT8.AX"  />
+						<direct name="BX"   input="ble8.BX"   output="LUT8.BX"  />
+						<direct name="CX"   input="ble8.CX"   output="LUT8.CX"  />
+						<direct name="BMUX" input="LUT8.F8"    output="ble8.BMUX"/>
+						<direct name="BFF"  input="LUT8.F8"    output="FF.D"       >
+							<pack_pattern name="LUT8-FF" in_port="LUT8.F8" out_port="FF.D"/>
+						</direct>
+						<direct name="BQ"   input="FF.Q"       output="ble8.BQ"  />
+						<direct name="CLK"  input="ble8.CLK"  output="FF.clk"    />
+					</interconnect>
+				</pb_type>
+				<interconnect>
+					<direct name="A6-1" input="SLICEL.A6-1" output="ble8.A6-1"/>
+					<direct name="B6-1" input="SLICEL.B6-1" output="ble8.B6-1"/>
+					<direct name="C6-1" input="SLICEL.C6-1" output="ble8.C6-1"/>
+					<direct name="D6-1" input="SLICEL.D6-1" output="ble8.D6-1"/>
+					<direct name="AX"   input="SLICEL.AX"   output="ble8.AX"  />
+					<direct name="BX"   input="SLICEL.BX"   output="ble8.BX"  />
+					<direct name="CX"   input="SLICEL.CX"   output="ble8.CX"  />
+					<direct name="BMUX" input="ble8.BMUX"   output="SLICEL.BMUX"/>
+					<direct name="BQ"   input="ble8.BQ"     output="SLICEL.BQ"  />
+					<direct name="CLK"  input="SLICEL.CLK"  output="ble8.CLK"    />
+				</interconnect>
+			</mode>
+
+			<fc default_in_type="abs" default_in_val="1" default_out_type="abs" default_out_val="1">
+				<!-- Carry chain pins have no access to general routing -->
+				<pin name="CIN"  fc_type="frac" fc_val="0"/>
+				<pin name="COUT" fc_type="frac" fc_val="0"/>
+			</fc>
+
+			<pinlocations pattern="spread"/>
+			<gridlocations>
+				<loc type="fill" priority="1"/>
+			</gridlocations>
+		</pb_type>
+
+		<pb_type name="DSP48E1" height="5" capacity="2">
+			<!-- 0: -->
+			<input name="A"    num_pins="30"/>
+			<!-- 30: -->
+			<input name="B"    num_pins="18"/>
+			<!-- 48: -->
+			<input name="CEA1" num_pins="1"/>
+			<input name="CEA2" num_pins="1"/>
+			<input name="CEB1" num_pins="1"/>
+			<input name="CEB2" num_pins="1"/>
+			<input name="CEM"  num_pins="1"/>
+			<input name="CEP"  num_pins="1"/>
+			<input name="INMODE"  num_pins="5"/>
+			<input name="OPMODE"  num_pins="7"/>
+
+			<!-- 66: -->
+			<output name="P" num_pins="48"/>
+
+			<!-- 114: -->
+			<output name="GND_WIRE" num_pins="1"/>
+			<output name="VCC_WIRE" num_pins="1"/>
+
+			<!-- 116: -->
+			<clock name="CLK" num_pins="1"/>
+
+			<!-- Cannot do bussy muxes, so use modes instead -->
+			<!--mode name="mult_25x18_REGABP">
+				<pb_type name="mult_25x18" blif_model=".subckt multiply" num_pb="1">
+					<input name="a" num_pins="25"   />
+					<input name="b" num_pins="18"   />
+					<output name="p" num_pins="43"/>
+					<!- - TRCE: T_dspdo_a_p_mult - ->
+					<delay_constant max="3.826e-9" in_port="mult_25x18.a" out_port="mult_25x18.p"/>
+					<!- - TRCE: T_dspdo_b_p_mult - ->
+					<delay_constant max="3.597e-9" in_port="mult_25x18.b" out_port="mult_25x18.p"/>
+				</pb_type>
+				<pb_type name="AREG" blif_model=".latch" num_pb="25" class="flipflop">
+					<input   name="D"         num_pins="1" port_class="D"    />
+					<output  name="Q"         num_pins="1" port_class="Q"    />
+					<clock   name="clk"       num_pins="1" port_class="clock"/>
+					<!- - T_dspdck_a_areg - ->
+					<T_setup value="0.24e-9" port="AREG.D"  clock="clk"/>
+				</pb_type>
+				<pb_type name="BREG" blif_model=".latch" num_pb="18" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<!- - T_dspdck_b_breg - ->
+					<T_setup value="0.28e-9" port="BREG.D"  clock="clk"/>
+				</pb_type>
+				<pb_type name="PREG" blif_model=".latch" num_pb="43" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<!- - T_dspcko_p_preg - ->
+					<T_clock_to_Q max="0.33e-9"   port="PREG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="AREG"  input="DSP48E1.A[24:0]"  output="AREG.D"                  />
+					<direct name="A"     input="AREG.Q"         output="mult_25x18.a"            />
+					<direct name="BREG"  input="DSP48E1.B[17:0]"  output="BREG.D"                  />
+					<direct name="B"     input="BREG.Q"         output="mult_25x18.b"             >
+						<!- - FIXME: These patterns do form molecules, but VPR packer
+						     overlooks this as a find suitable site - ->
+						<!- -pack_pattern name="DSP-BREG" in_port="BREG[17:0].Q" out_port="mult_25x18.b"/- ->
+					</direct>
+					<direct name="PREG"  input="mult_25x18.p" output="PREG.D"                   >
+						<!- - FIXME: In rare cases (e.g. bgm), some of the multiplier's outputs
+						     will be registered, whilst others are not, this causes the pre-packer
+						     to pack the subset that is registered into a molecule (e.g. p[17:0])
+						     whilst leaving the unregistered pputs (e.g. p[25:18]) alone causing
+						     an unpack-able situation - ->
+						<!- - Enumerate all widths as pack patterns - ->
+						<!- -pack_pattern name="DSP_P[42:0]-PREG" in_port="mult_25x18.p[42:0]" out_port="PREG[42:0].D"/>
+						<pack_pattern name="DSP_P[41:0]-PREG" in_port="mult_25x18.p[41:0]" out_port="PREG[41:0].D"/>
+						<pack_pattern name="DSP_P[40:0]-PREG" in_port="mult_25x18.p[40:0]" out_port="PREG[40:0].D"/>
+						<pack_pattern name="DSP_P[39:0]-PREG" in_port="mult_25x18.p[39:0]" out_port="PREG[39:0].D"/>
+						<pack_pattern name="DSP_P[38:0]-PREG" in_port="mult_25x18.p[38:0]" out_port="PREG[38:0].D"/>
+						<pack_pattern name="DSP_P[37:0]-PREG" in_port="mult_25x18.p[37:0]" out_port="PREG[37:0].D"/>
+						<pack_pattern name="DSP_P[36:0]-PREG" in_port="mult_25x18.p[36:0]" out_port="PREG[36:0].D"/>
+						<pack_pattern name="DSP_P[35:0]-PREG" in_port="mult_25x18.p[35:0]" out_port="PREG[35:0].D"/>
+						<pack_pattern name="DSP_P[34:0]-PREG" in_port="mult_25x18.p[34:0]" out_port="PREG[34:0].D"/>
+						<pack_pattern name="DSP_P[33:0]-PREG" in_port="mult_25x18.p[33:0]" out_port="PREG[33:0].D"/>
+						<pack_pattern name="DSP_P[32:0]-PREG" in_port="mult_25x18.p[32:0]" out_port="PREG[32:0].D"/>
+						<pack_pattern name="DSP_P[31:0]-PREG" in_port="mult_25x18.p[31:0]" out_port="PREG[31:0].D"/>
+						<pack_pattern name="DSP_P[30:0]-PREG" in_port="mult_25x18.p[30:0]" out_port="PREG[30:0].D"/>
+						<pack_pattern name="DSP_P[29:0]-PREG" in_port="mult_25x18.p[29:0]" out_port="PREG[29:0].D"/>
+						<pack_pattern name="DSP_P[28:0]-PREG" in_port="mult_25x18.p[28:0]" out_port="PREG[28:0].D"/>
+						<pack_pattern name="DSP_P[27:0]-PREG" in_port="mult_25x18.p[27:0]" out_port="PREG[27:0].D"/>
+						<pack_pattern name="DSP_P[26:0]-PREG" in_port="mult_25x18.p[26:0]" out_port="PREG[26:0].D"/>
+						<pack_pattern name="DSP_P[25:0]-PREG" in_port="mult_25x18.p[25:0]" out_port="PREG[25:0].D"/>
+						<pack_pattern name="DSP_P[24:0]-PREG" in_port="mult_25x18.p[24:0]" out_port="PREG[24:0].D"/>
+						<pack_pattern name="DSP_P[23:0]-PREG" in_port="mult_25x18.p[23:0]" out_port="PREG[23:0].D"/>
+						<pack_pattern name="DSP_P[22:0]-PREG" in_port="mult_25x18.p[22:0]" out_port="PREG[22:0].D"/>
+						<pack_pattern name="DSP_P[21:0]-PREG" in_port="mult_25x18.p[21:0]" out_port="PREG[21:0].D"/>
+						<pack_pattern name="DSP_P[20:0]-PREG" in_port="mult_25x18.p[20:0]" out_port="PREG[20:0].D"/>
+						<pack_pattern name="DSP_P[19:0]-PREG" in_port="mult_25x18.p[19:0]" out_port="PREG[19:0].D"/>
+						<pack_pattern name="DSP_P[18:0]-PREG" in_port="mult_25x18.p[18:0]" out_port="PREG[18:0].D"/>
+						<pack_pattern name="DSP_P[17:0]-PREG" in_port="mult_25x18.p[17:0]" out_port="PREG[17:0].D"/>
+						<pack_pattern name="DSP_P[16:0]-PREG" in_port="mult_25x18.p[16:0]" out_port="PREG[16:0].D"/>
+						<pack_pattern name="DSP_P[15:0]-PREG" in_port="mult_25x18.p[15:0]" out_port="PREG[15:0].D"/>
+						<pack_pattern name="DSP_P[14:0]-PREG" in_port="mult_25x18.p[14:0]" out_port="PREG[14:0].D"/>
+						<pack_pattern name="DSP_P[13:0]-PREG" in_port="mult_25x18.p[13:0]" out_port="PREG[13:0].D"/>
+						<pack_pattern name="DSP_P[12:0]-PREG" in_port="mult_25x18.p[12:0]" out_port="PREG[12:0].D"/>
+						<pack_pattern name="DSP_P[11:0]-PREG" in_port="mult_25x18.p[11:0]" out_port="PREG[11:0].D"/>
+						<pack_pattern name="DSP_P[10:0]-PREG" in_port="mult_25x18.p[10:0]" out_port="PREG[10:0].D"/>
+						<pack_pattern name="DSP_P[ 9:0]-PREG" in_port="mult_25x18.p[ 9:0]" out_port="PREG[ 9:0].D"/>
+						<pack_pattern name="DSP_P[ 8:0]-PREG" in_port="mult_25x18.p[ 8:0]" out_port="PREG[ 8:0].D"/>
+						<pack_pattern name="DSP_P[ 7:0]-PREG" in_port="mult_25x18.p[ 7:0]" out_port="PREG[ 7:0].D"/>
+						<pack_pattern name="DSP_P[ 6:0]-PREG" in_port="mult_25x18.p[ 6:0]" out_port="PREG[ 6:0].D"/>
+						<pack_pattern name="DSP_P[ 5:0]-PREG" in_port="mult_25x18.p[ 5:0]" out_port="PREG[ 5:0].D"/>
+						<pack_pattern name="DSP_P[ 4:0]-PREG" in_port="mult_25x18.p[ 4:0]" out_port="PREG[ 4:0].D"/>
+						<pack_pattern name="DSP_P[ 3:0]-PREG" in_port="mult_25x18.p[ 3:0]" out_port="PREG[ 3:0].D"/>
+						<pack_pattern name="DSP_P[ 2:0]-PREG" in_port="mult_25x18.p[ 2:0]" out_port="PREG[ 2:0].D"/>
+						<pack_pattern name="DSP_P[ 1:0]-PREG" in_port="mult_25x18.p[ 1:0]" out_port="PREG[ 1:0].D"/>
+						<pack_pattern name="DSP_P[ 0:0]-PREG" in_port="mult_25x18.p[ 0:0]" out_port="PREG[ 0:0].D"/- ->
+					</direct>
+					<direct name="P"     input="PREG.Q"          output="DSP48E1.P[42:0]"          />
+					<complete name="clk" input="DSP48E1.CLK"      output="AREG.clk BREG.clk PREG.clk"/>
+				</interconnect>
+			</mode>
+			<mode name="mult_25x18_REGP">
+				<pb_type name="mult_25x18" blif_model=".subckt multiply" num_pb="1">
+					<input name="a" num_pins="25"   />
+					<input name="b" num_pins="18"   />
+					<output name="p" num_pins="43"/>
+					<delay_constant max="3.826e-9" in_port="mult_25x18.a" out_port="mult_25x18.p"/>
+					<delay_constant max="3.597e-9" in_port="mult_25x18.b" out_port="mult_25x18.p"/>
+				</pb_type>
+				<pb_type name="AREG" blif_model=".latch" num_pb="25" class="flipflop">
+					<input   name="D"         num_pins="1" port_class="D"    />
+					<output  name="Q"         num_pins="1" port_class="Q"    />
+					<clock   name="clk"       num_pins="1" port_class="clock"/>
+					<!- - T_dspdck_a_areg - ->
+					<T_setup value="0.24e-9" port="AREG.D"  clock="clk"/>
+				</pb_type>
+				<pb_type name="BREG" blif_model=".latch" num_pb="18" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<!- - T_dspdck_b_breg - ->
+					<T_setup value="0.28e-9" port="BREG.D"  clock="clk"/>
+				</pb_type>
+				<pb_type name="PREG" blif_model=".latch" num_pb="43" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.33e-9"   port="PREG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="A"     input="DSP48E1.A[24:0]"  output="mult_25x18.a" />
+					<direct name="B"     input="DSP48E1.B[17:0]"  output="mult_25x18.b" />
+					<direct name="PREG"  input="mult_25x18.p" output="PREG.D"       />
+					<direct name="P"     input="PREG.Q"          output="DSP48E1.P[42:0]"/>
+
+					<complete name="clk" input="DSP48E1.CLK"      output="AREG.clk BREG.clk PREG.clk"/>
+				</interconnect>
+			</mode>
+			<!- -mode name="mult_25x18_REGAB">
+				<pb_type name="mult_25x18" blif_model=".subckt multiply" num_pb="1">
+					<input name="a" num_pins="25"/>
+					<input name="b" num_pins="18"/>
+					<output name="p" num_pins="43"/>
+					<delay_constant max="3.826e-9" in_port="mult_25x18.a" out_port="mult_25x18.p"/>
+					<delay_constant max="3.597e-9" in_port="mult_25x18.b" out_port="mult_25x18.p"/>
+				</pb_type>
+				<pb_type name="AREG" blif_model=".latch" num_pb="25" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_setup value="0.24e-9" port="AREG.D"  clock="clk"/>
+					<T_clock_to_Q max="0" port="AREG.Q"  clock="clk"/>
+				</pb_type>
+				<pb_type name="BREG" blif_model=".latch" num_pb="18" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_setup value="0.28e-9" port="BREG.D"  clock="clk"/>
+					<T_clock_to_Q max="0" port="BREG.Q"  clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct   name="AREG" input="DSP48E1.A[24:0]"  output="AREG.D"          />
+					<direct   name="A"    input="AREG.Q"         output="mult_25x18.a"   />
+					<direct   name="BREG" input="DSP48E1.B[17:0]"  output="BREG.D"          />
+					<direct   name="B"    input="BREG.Q"         output="mult_25x18.b"   />
+					<direct   name="P"    input="mult_25x18.p" output="DSP48E1.P[42:0]"  />
+					<complete name="clk"  input="DSP48E1.CLK"      output="AREG.clk BREG.clk"/>
+				</interconnect>
+			</mode-->
+			<!--mode name="mult_25x18_REGA">
+				<pb_type name="mult_25x18" blif_model=".subckt multiply" num_pb="1">
+					<input name="a" num_pins="25"/>
+					<input name="b" num_pins="18"/>
+					<output name="p" num_pins="43"/>
+					<delay_constant max="3.826e-9" in_port="mult_25x18.a" out_port="mult_25x18.p"/>
+					<delay_constant max="3.597e-9" in_port="mult_25x18.b" out_port="mult_25x18.p"/>
+				</pb_type>
+				<pb_type name="AREG" blif_model=".latch" num_pb="25" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_setup value="0.24e-9" port="AREG.D"  clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct   name="AREG" input="DSP48E1.A[24:0]"  output="AREG.D"        />
+					<direct   name="A"    input="AREG.Q"         output="mult_25x18.a" />
+					<direct   name="B"    input="DSP48E1.B[17:0]"  output="mult_25x18.b" />
+					<direct   name="P"    input="mult_25x18.p" output="DSP48E1.P[42:0]"/>
+					<complete name="clk"  input="DSP48E1.CLK"      output="AREG.clk"      />
+				</interconnect>
+			</mode>
+			<mode name="mult_25x18_REGB">
+				<pb_type name="mult_25x18" blif_model=".subckt multiply" num_pb="1">
+					<input name="a" num_pins="25"/>
+					<input name="b" num_pins="18"/>
+					<output name="p" num_pins="43"/>
+					<delay_constant max="3.826e-9" in_port="mult_25x18.a" out_port="mult_25x18.p"/>
+					<delay_constant max="3.597e-9" in_port="mult_25x18.b" out_port="mult_25x18.p"/>
+				</pb_type>
+				<pb_type name="BREG" blif_model=".latch" num_pb="18" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_setup value="0.28e-9" port="BREG.D"  clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct   name="A"    input="DSP48E1.A[24:0]"  output="mult_25x18.a" />
+					<direct   name="BREG" input="DSP48E1.B[17:0]"  output="BREG.D"        />
+					<direct   name="B"    input="BREG.Q"         output="mult_25x18.b" />
+					<direct   name="P"    input="mult_25x18.p" output="DSP48E1.P[42:0]"/>
+					<complete name="clk"  input="DSP48E1.CLK"      output="BREG.clk"      />
+				</interconnect>
+			</mode-->
+			<mode name="mult_25x18_COMB">
+				<pb_type name="mult_25x18" blif_model=".subckt multiply" num_pb="1">
+					<input name="a" num_pins="25"/>
+					<input name="b" num_pins="18"/>
+					<output name="p" num_pins="43"/>
+					<delay_constant max="3.826e-9" in_port="mult_25x18.a" out_port="mult_25x18.p"/>
+					<delay_constant max="3.597e-9" in_port="mult_25x18.b" out_port="mult_25x18.p"/>
+				</pb_type>
+				<pb_type name="AREG" blif_model=".latch" num_pb="25" class="flipflop">
+					<input   name="D"         num_pins="1" port_class="D"    />
+					<output  name="Q"         num_pins="1" port_class="Q"    />
+					<clock   name="clk"       num_pins="1" port_class="clock"/>
+					<!-- T_dspdck_a_areg -->
+					<T_setup value="0.24e-9" port="AREG.D"  clock="clk"/>
+				</pb_type>
+				<pb_type name="BREG" blif_model=".latch" num_pb="18" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<!-- T_dspdck_b_breg -->
+					<T_setup value="0.28e-9" port="BREG.D"  clock="clk"/>
+				</pb_type>
+				<pb_type name="PREG" blif_model=".latch" num_pb="43" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.33e-9"   port="PREG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="A" input="DSP48E1.A[24:0]"  output="mult_25x18.a" />
+					<direct name="B" input="DSP48E1.B[17:0]"  output="mult_25x18.b" />
+					<direct name="P" input="mult_25x18.p" output="DSP48E1.P[42:0]"/>
+
+					<complete name="clk" input="DSP48E1.CLK"      output="AREG.clk BREG.clk PREG.clk"/>
+				</interconnect>
+			</mode>
+
+			<fc default_in_type="abs" default_in_val="1" default_out_type="abs" default_out_val="1"/>
+			<pinlocations pattern="spread"/>
+
+			<gridlocations>
+				<loc type="col" start="8" priority="2"/>
+				<loc type="col" start="13" priority="2"/>
+				<loc type="col" start="28" priority="2"/>
+				<loc type="col" start="33" priority="2"/>
+				<loc type="col" start="65" priority="2"/>
+				<loc type="col" start="70" priority="2"/>
+				<loc type="col" start="85" priority="2"/>
+				<loc type="col" start="90" priority="2"/>
+			</gridlocations>
+		</pb_type>
+
+		<pb_type name="RAMB36E1" height="5">
+			<!-- These inputs are for FIFO36E1 -->
+			<input name="ADDRARDADDRL" num_pins="16"/>
+			<input name="ADDRARDADDRU" num_pins="15"/>
+			<input name="ADDRBWRADDRL" num_pins="16"/>
+			<input name="ADDRBWRADDRU" num_pins="15"/>
+			<!--input name="DIADIL" num_pins="16"/>
+			<input name="DIADIU" num_pins="16"/>
+			<input name="DIPADIPL" num_pins="2"/>
+			<input name="DIPADIPU" num_pins="2"/-->
+			<input name="DIADI" num_pins="32"/>
+			<input name="DIPADIP" num_pins="4"/>
+			<input name="WEAL" num_pins="4"/>
+			<input name="WEAU" num_pins="4"/>
+			<!--input name="DIBDIL" num_pins="16"/>
+			<input name="DIBDIU" num_pins="16"/>
+			<input name="DIPBDIPL" num_pins="2"/>
+			<input name="DIPBDIPU" num_pins="2"/-->
+			<input name="DIBDI" num_pins="32"/>
+			<input name="DIPBDIP" num_pins="4"/>
+			<input name="WEBWEL" num_pins="8"/>
+			<input name="WEBWEU" num_pins="8"/>
+			<input name="ENARDENL"      num_pins="1"/>
+			<input name="ENARDENU"      num_pins="1"/>
+			<input name="ENBWRENL"      num_pins="1"/>
+			<input name="ENBWRENU"      num_pins="1"/>
+			<input name="REGCEAREGCEL" num_pins="1"/>
+			<input name="REGCEAREGCEU" num_pins="1"/>
+			<input name="REGCEBL" num_pins="1"/>
+			<input name="REGCEBU" num_pins="1"/>
+			<input name="RSTRAMARSTRAMLRST" num_pins="1"/>
+			<input name="RSTRAMARSTRAMU" num_pins="1"/>
+			<input name="RSTRAMBL" num_pins="1"/>
+			<input name="RSTRAMBU" num_pins="1"/>
+			<input name="RSTREGARSTREGL" num_pins="1"/>
+			<input name="RSTREGARSTREGU" num_pins="1"/>
+			<input name="RSTREGBL" num_pins="1"/>
+			<input name="RSTREGBU" num_pins="1"/>
+
+			<!-- These inputs are for the FIFO18E1 slice -->
+			<input name="s0_ADDRARDADDR" num_pins="14"/>
+			<input name="s0_ADDRBWRADDR" num_pins="14"/>
+			<input name="s0_DIADI" num_pins="16"/>
+			<input name="s0_DIPADIP" num_pins="2"/>
+			<input name="s0_WEA" num_pins="4"/>
+			<input name="s0_DIBDI" num_pins="16"/>
+			<input name="s0_DIPBDIP" num_pins="2"/>
+			<input name="s0_WEBWE" num_pins="8"/>
+			<input name="s0_ENARDEN"      num_pins="1"/>
+			<input name="s0_ENBWREN"      num_pins="1"/>
+			<input name="s0_ADDRATIEHIGH" num_pins="2"/>
+			<input name="s0_ADDRBTIEHIGH" num_pins="2"/>
+			<input name="s0_REGCEAREGCE" num_pins="1"/>
+			<input name="s0_REGCEB" num_pins="1"/>
+			<input name="s0_RSTRAMARSTRAM" num_pins="1"/>
+			<input name="s0_RSTRAMB" num_pins="1"/>
+			<input name="s0_RSTREGARSTREG" num_pins="1"/>
+			<input name="s0_RSTREGB" num_pins="1"/>
+
+			<!-- These inputs (with underscores) for RAMB18E1 -->
+			<input name="s1_ADDRARDADDR" num_pins="14"/>
+			<input name="s1_ADDRBWRADDR" num_pins="14"/>
+			<input name="s1_DIADI" num_pins="16"/>
+			<input name="s1_DIPADIP" num_pins="2"/>
+			<input name="s1_WEA" num_pins="4"/>
+			<input name="s1_DIBDI" num_pins="16"/>
+			<input name="s1_DIPBDIP" num_pins="2"/>
+			<input name="s1_WEBWE" num_pins="8"/>
+			<input name="s1_ENARDEN"      num_pins="1"/>
+			<input name="s1_ENBWREN"      num_pins="1"/>
+			<input name="s1_ADDRATIEHIGH" num_pins="2"/>
+			<input name="s1_ADDRBTIEHIGH" num_pins="2"/>
+			<input name="s1_REGCEAREGCE" num_pins="1"/>
+			<input name="s1_REGCEB" num_pins="1"/>
+			<input name="s1_RSTRAMARSTRAM" num_pins="1"/>
+			<input name="s1_RSTRAMB" num_pins="1"/>
+			<input name="s1_RSTREGARSTREG" num_pins="1"/>
+			<input name="s1_RSTREGB" num_pins="1"/>
+
+			<!--output name ="DOADOL" num_pins="16"/>
+			<output name ="DOADOU" num_pins="16"/>
+			<output name ="DOPADOPL" num_pins="2"/>
+			<output name ="DOPADOPU" num_pins="2"/>
+			<output name ="DOBDOL" num_pins="16"/>
+			<output name ="DOBDOU" num_pins="16"/>
+			<output name ="DOPBDOPL" num_pins="2"/>
+			<output name ="DOPBDOPU" num_pins="2"/-->
+			<output name ="DOADO" num_pins="32"/>
+			<output name ="DOPADOP" num_pins="4"/>
+			<output name ="DOBDO" num_pins="32"/>
+			<output name ="DOPBDOP" num_pins="4"/>
+
+			<output name ="s0_DOADO" num_pins="16"/>
+			<output name ="s0_DOPADOP" num_pins="2"/>
+			<output name ="s0_DOBDO" num_pins="16"/>
+			<output name ="s0_DOPBDOP" num_pins="2"/>
+
+			<output name ="s1_DOADO" num_pins="16"/>
+			<output name ="s1_DOPADOP" num_pins="2"/>
+			<output name ="s1_DOBDO" num_pins="16"/>
+			<output name ="s1_DOPBDOP" num_pins="2"/>
+
+			<!-- 462: -->
+			<output name="GND_WIRE" num_pins="1"/>
+			<output name="VCC_WIRE" num_pins="1"/>
+
+			<!-- 464: -->
+			<clock name="CLKARDCLKL"    num_pins="1"/>
+			<clock name="CLKARDCLKU"    num_pins="1"/>
+			<clock name="CLKBWRCLKL"    num_pins="1"/>
+			<clock name="CLKBWRCLKU"    num_pins="1"/>
+			<clock name="s0_CLKARDCLK"     num_pins="1"/>
+			<clock name="s0_CLKBWRCLK"     num_pins="1"/>
+			<clock name="s1_CLKARDCLK"     num_pins="1"/>
+			<clock name="s1_CLKBWRCLK"     num_pins="1"/>
+
+			<!-- 472: -->
+			<clock name="REGCLKARDRCLKL" num_pins="1"/>
+			<clock name="REGCLKARDRCLKU" num_pins="1"/>
+			<clock name="REGCLKBL"      num_pins="1"/>
+			<clock name="REGCLKBU"      num_pins="1"/>	
+			<clock name="s0_REGCLKARDRCLK"  num_pins="1"/>
+			<clock name="s0_REGCLKB"       num_pins="1"/>	
+			<clock name="s1_REGCLKARDRCLK"  num_pins="1"/>
+			<clock name="s1_REGCLKB"       num_pins="1"/>
+
+			<!-- RAMB18E1 -->
+			<mode name="RAMB18E1x2">
+				<pb_type name="RAMB18E1" num_pb="2">
+					<input name="ADDRARDADDR" num_pins="14" port_class="addr1"/>
+					<input name="ADDRBWRADDR" num_pins="14" port_class="addr2"/>
+					<input name="DIADI" num_pins="16" port_class="data_in1"/>
+					<input name="DIPADIP" num_pins="2" port_class="data_in1"/>
+					<input name="WEA" num_pins="4" port_class="write_en1"/>
+					<input name="DIBDI" num_pins="16" port_class="data_in2"/>
+					<input name="DIPBDIP" num_pins="2" port_class="data_in2"/>
+					<input name="WEBWE" num_pins="8" port_class="write_en2"/>
+					<output name="DOADO" num_pins="16" port_class="data_out1"/>
+					<output name="DOPADOP" num_pins="2" port_class="data_out1"/>
+					<output name="DOBDO" num_pins="16" port_class="data_out2"/>
+					<output name="DOPBDOP" num_pins="2" port_class="data_out2"/>
+					<clock name="CLKARDCLK" num_pins="1" port_class="clock"/>
+					<clock name="CLKBWRCLK" num_pins="1" port_class="clock"/>
+					<mode name="RAMB18E1_512x36_REGB_sp">
+						<pb_type name="RAMB18E1_512x36_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
+							<input  name="addr" num_pins="9"  port_class="address" />
+							<input  name="data" num_pins="36" port_class="data_in" />
+							<input  name="we"   num_pins="1"  port_class="write_en"/>
+							<output name="out"  num_pins="36" port_class="data_out"/>
+							<clock  name="clk"  num_pins="1"  port_class="clock" />
+							<!-- TRCE: Trcck_addrb -->
+							<T_setup value="0.480e-9" port="RAMB18E1_512x36_sp.addr" clock="clk"/>
+							<!-- TRCE: Trdck_dib -->
+							<T_setup value="0.707e-9" port="RAMB18E1_512x36_sp.data" clock="clk"/>
+							<!-- TRCE: Trcck_web -->
+							<T_setup value="0.515e-9" port="RAMB18E1_512x36_sp.we" clock="clk"/>
+							<!-- TRCE: Trcko_doa -->
+							<T_clock_to_Q max="2.073e-9" port="RAMB18E1_512x36_sp.out" clock="clk"/>
+						</pb_type>
+						<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<!-- Trcko_do_reg -->
+							<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+						</pb_type>
+						<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<!-- Trcko_do_reg -->
+							<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+						</pb_type>
+						<interconnect>
+							<direct name="addr"  input="RAMB18E1.ADDRBWRADDR[13:5]" output="RAMB18E1_512x36_sp.addr"          />
+							<direct name="data"     input="RAMB18E1.DIADI[15:0]"       output="RAMB18E1_512x36_sp.data[15:0]"    />
+							<direct name="data2"     input="RAMB18E1.DIBDI[15:0]"       output="RAMB18E1_512x36_sp.data[31:16]"   />
+							<direct name="datap"    input="RAMB18E1.DIPADIP[1:0]"      output="RAMB18E1_512x36_sp.data[33:32]"   />
+							<direct name="data2"    input="RAMB18E1.DIPBDIP[1:0]"      output="RAMB18E1_512x36_sp.data[35:34]"   />
+							<direct name="we"  input="RAMB18E1.WEBWE[0]"          output="RAMB18E1_512x36_sp.we"            />
+							<direct name ="dff"      input="RAMB18E1_512x36_sp.out"                 output="DOB_REG[35:0].D"                 >
+								<!--pack_pattern name="RAMB18E1_512x36_sp_DOB" in_port="RAMB18E1_512x36_sp.out" out_port="DOB_REG.D"/-->
+							</direct>
+							<direct name="out"  input="DOB_REG[15: 0].Q"                     output="RAMB18E1.DOADO[15:0]" />
+							<direct name="out"  input="DOB_REG[31:16].Q"                     output="RAMB18E1.DOBDO[15:0]" />
+							<direct name="out" input="DOB_REG[33:32].Q"                     output="RAMB18E1.DOPADOP[1:0]"/>
+							<direct name="out" input="DOB_REG[35:34].Q"                     output="RAMB18E1.DOPBDOP[1:0]"/>
+
+							<direct name="clk"       input="RAMB18E1.CLKARDCLK"         output="RAMB18E1_512x36_sp.clk[0]"        />
+							<complete name="clk"     input="RAMB18E1.CLKARDCLK"         output="DOA_REG.clk DOB_REG.clk"        />
+						</interconnect>
+					</mode>
+					<mode name="RAMB18E1_512x36_COMB_sp">
+						<pb_type name="RAMB18E1_512x36_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
+							<input name="addr" num_pins="9" port_class="address"/>
+							<input name="data" num_pins="36" port_class="data_in"/>
+							<input name="we" num_pins="1" port_class="write_en"/>
+							<output name="out" num_pins="36" port_class="data_out"/>
+							<clock name="clk" num_pins="1" port_class="clock"/>
+							<!-- Trcck_addr -->
+							<T_setup value="0.480e-9" port="RAMB18E1_512x36_sp.addr" clock="clk"/>
+							<!-- Trdck_d -->
+							<T_setup value="0.707e-9" port="RAMB18E1_512x36_sp.data" clock="clk"/>
+							<!-- Trcck_we -->
+							<T_setup value="0.515e-9" port="RAMB18E1_512x36_sp.we" clock="clk"/>
+							<!-- Trcko_do -->
+							<T_clock_to_Q max="2.073e-9" port="RAMB18E1_512x36_sp.out" clock="clk"/>
+						</pb_type>
+						<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+						</pb_type>
+						<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+						</pb_type>
+						<interconnect>
+							<direct name="addr"  input="RAMB18E1.ADDRBWRADDR[13:5]" output="RAMB18E1_512x36_sp.addr"          />
+							<direct name="data"     input="RAMB18E1.DIADI[15:0]"       output="RAMB18E1_512x36_sp.data[15:0]"    />
+							<direct name="data2"     input="RAMB18E1.DIBDI[15:0]"       output="RAMB18E1_512x36_sp.data[31:16]"   />
+							<direct name="datap"    input="RAMB18E1.DIPADIP[1:0]"      output="RAMB18E1_512x36_sp.data[33:32]"   />
+							<direct name="data2"    input="RAMB18E1.DIPBDIP[1:0]"      output="RAMB18E1_512x36_sp.data[35:34]"   />
+							<direct name="we"  input="RAMB18E1.WEBWE[0]"          output="RAMB18E1_512x36_sp.we"            />
+							<direct name="out"  input="RAMB18E1_512x36_sp.out[15:0]"           output="RAMB18E1.DOADO[15:0]" />
+							<direct name="out"  input="RAMB18E1_512x36_sp.out[31:16]"          output="RAMB18E1.DOBDO[15:0]" />
+							<direct name="out" input="RAMB18E1_512x36_sp.out[33:32]"          output="RAMB18E1.DOPADOP[1:0]"/>
+							<direct name="out" input="RAMB18E1_512x36_sp.out[35:34]"          output="RAMB18E1.DOPBDOP[1:0]"/>
+
+							<direct name="clk"       input="RAMB18E1.CLKARDCLK"         output="RAMB18E1_512x36_sp.clk[0]"        />
+							<complete name="clk"     input="RAMB18E1.CLKARDCLK"         output="DOA_REG.clk DOB_REG.clk"        />
+						</interconnect>
+					</mode>
+					<mode name="RAMB18E1_1024x18_REGB_sp">
+						<pb_type name="RAMB18E1_1024x18_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
+							<input  name="addr" num_pins="10" port_class="address" />
+							<input  name="data" num_pins="18" port_class="data_in" />
+							<input  name="we"   num_pins="1"  port_class="write_en"/>
+							<output name="out"  num_pins="18" port_class="data_out"/>
+							<clock  name="clk"  num_pins="1"  port_class="clock"   />
+							<T_setup      value="0.480e-9" port="RAMB18E1_1024x18_sp.addr" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_1024x18_sp.data" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_1024x18_sp.we"   clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_1024x18_sp.out"  clock="clk"/>
+						</pb_type>
+						<pb_type name="DOA_REG" blif_model=".latch" num_pb="18" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+						</pb_type>
+						<pb_type name="DOB_REG" blif_model=".latch" num_pb="18" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+						</pb_type>
+						<interconnect>
+							<direct name="addr"  input="RAMB18E1.ADDRBWRADDR[13:4]" output="RAMB18E1_1024x18_sp.addr"         />
+							<direct name="data"     input="RAMB18E1.DIBDI[15:0]"       output="RAMB18E1_1024x18_sp.data[15:0]"   />
+							<direct name="datap"    input="RAMB18E1.DIPBDIP[1:0]"      output="RAMB18E1_1024x18_sp.data[17:16]"  />
+							<direct name="we"  input="RAMB18E1.WEBWE[0]"          output="RAMB18E1_1024x18_sp.we"           />
+							<direct name="out"  input="RAMB18E1_1024x18_sp.out"                output="DOB_REG[17:0].D"                 >
+								<!--pack_pattern name="RAMB18E1_1024x18_sp_DOB" in_port="RAMB18E1_1024x18_sp.out" out_port="DOB_REG.D"/-->
+							</direct>
+							<direct name="out"  input="DOB_REG[15: 0].Q"                     output="RAMB18E1.DOBDO[15:0]" />
+							<direct name="out" input="DOB_REG[17:16].Q"                     output="RAMB18E1.DOPBDOP[1:0]"/>
+
+							<direct name="clk"       input="RAMB18E1.CLKARDCLK"         output="RAMB18E1_1024x18_sp.clk[0]"       />
+							<complete name="clk"     input="RAMB18E1.CLKARDCLK"         output="DOA_REG.clk DOB_REG.clk"        />
+						</interconnect>
+					</mode>
+					<mode name="RAMB18E1_1024x18_COMB_sp">
+						<pb_type name="RAMB18E1_1024x18_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
+							<input  name="addr" num_pins="10" port_class="address" />
+							<input  name="data" num_pins="18" port_class="data_in" />
+							<input  name="we"   num_pins="1"  port_class="write_en"/>
+							<output name="out"  num_pins="18" port_class="data_out"/>
+							<clock  name="clk"  num_pins="1"  port_class="clock"   />
+							<T_setup      value="0.480e-9" port="RAMB18E1_1024x18_sp.addr" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_1024x18_sp.data" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_1024x18_sp.we"   clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_1024x18_sp.out"  clock="clk"/>
+						</pb_type>
+						<pb_type name="DOA_REG" blif_model=".latch" num_pb="18" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+						</pb_type>
+						<pb_type name="DOB_REG" blif_model=".latch" num_pb="18" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+						</pb_type>
+						<interconnect>
+							<direct name="addr"  input="RAMB18E1.ADDRBWRADDR[13:4]" output="RAMB18E1_1024x18_sp.addr"         />
+							<direct name="data"     input="RAMB18E1.DIBDI[15:0]"       output="RAMB18E1_1024x18_sp.data[15:0]"   />
+							<direct name="datap"    input="RAMB18E1.DIPBDIP[1:0]"      output="RAMB18E1_1024x18_sp.data[17:16]"  />
+							<direct name="we"  input="RAMB18E1.WEBWE[0]"          output="RAMB18E1_1024x18_sp.we"           />
+							<direct name="out"  input="RAMB18E1_1024x18_sp.out[15:0]"          output="RAMB18E1.DOBDO[15:0]" />
+							<direct name="out" input="RAMB18E1_1024x18_sp.out[17:16]"         output="RAMB18E1.DOPBDOP[1:0]"/>
+
+							<complete name="clk"     input="RAMB18E1.CLKARDCLK"         output="RAMB18E1_1024x18_sp.clk[0]"       />
+							<complete name="clk"     input="RAMB18E1.CLKARDCLK"         output="DOA_REG.clk DOB_REG.clk"        />
+						</interconnect>
+					</mode>
+					<mode name="RAMB18E1_2048x9_REGB_sp">
+						<pb_type name="RAMB18E1_2048x9_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
+							<input  name="addr" num_pins="11" port_class="address" />
+							<input  name="data" num_pins="9"  port_class="data_in" />
+							<input  name="we"   num_pins="1"  port_class="write_en"/>
+							<output name="out"  num_pins="9"  port_class="data_out"/>
+							<clock  name="clk"  num_pins="1"  port_class="clock"   />
+							<T_setup      value="0.480e-9" port="RAMB18E1_2048x9_sp.addr" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_2048x9_sp.data" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_2048x9_sp.we"   clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_2048x9_sp.out"  clock="clk"/>
+						</pb_type>
+						<pb_type name="DOA_REG" blif_model=".latch" num_pb="9" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+						</pb_type>
+						<pb_type name="DOB_REG" blif_model=".latch" num_pb="9" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+						</pb_type>
+						<interconnect>
+							<direct name="addr"  input="RAMB18E1.ADDRBWRADDR[13:3]" output="RAMB18E1_2048x9_sp.addr"        />
+							<direct name="data"     input="RAMB18E1.DIBDI[7:0]"        output="RAMB18E1_2048x9_sp.data[7:0]"   />
+							<direct name="datap"    input="RAMB18E1.DIPBDIP[0]"        output="RAMB18E1_2048x9_sp.data[8]"     />
+							<direct name="we"  input="RAMB18E1.WEBWE[0]"          output="RAMB18E1_2048x9_sp.we"          />
+							<direct name="out"  input="RAMB18E1_2048x9_sp.out"                 output="DOB_REG[8:0].D"                >
+								<!--pack_pattern name="RAMB18E1_2048x9_sp_DOB" in_port="RAMB18E1_2048x9_sp.out" out_port="DOB_REG.D"/-->
+							</direct>
+							<direct name="out"  input="DOB_REG[7:0].Q"                       output="RAMB18E1.DOBDO[7:0]"/>
+							<direct name="out" input="DOB_REG[8].Q"                         output="RAMB18E1.DOPBDOP[0]"/>
+
+							<direct name="clk"       input="RAMB18E1.CLKARDCLK"         output="RAMB18E1_2048x9_sp.clk[0]"      />
+							<complete name="clk"     input="RAMB18E1.CLKARDCLK"         output="DOA_REG.clk DOB_REG.clk"      />
+						</interconnect>
+					</mode>
+					<mode name="RAMB18E1_2048x9_COMB_sp">
+						<pb_type name="RAMB18E1_2048x9_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
+							<input  name="addr" num_pins="11" port_class="address" />
+							<input  name="data" num_pins="9"  port_class="data_in" />
+							<input  name="we"   num_pins="1"  port_class="write_en"/>
+							<output name="out"  num_pins="9"  port_class="data_out"/>
+							<clock  name="clk"  num_pins="1"  port_class="clock"   />
+							<T_setup      value="0.480e-9" port="RAMB18E1_2048x9_sp.addr" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_2048x9_sp.data" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_2048x9_sp.we"   clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_2048x9_sp.out"  clock="clk"/>
+						</pb_type>
+						<pb_type name="DOA_REG" blif_model=".latch" num_pb="9" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+						</pb_type>
+						<pb_type name="DOB_REG" blif_model=".latch" num_pb="9" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+						</pb_type>
+						<interconnect>
+							<direct name="addr"  input="RAMB18E1.ADDRBWRADDR[13:3]" output="RAMB18E1_2048x9_sp.addr"        />
+							<direct name="data"     input="RAMB18E1.DIBDI[7:0]"        output="RAMB18E1_2048x9_sp.data[7:0]"   />
+							<direct name="datap"    input="RAMB18E1.DIPBDIP[0]"        output="RAMB18E1_2048x9_sp.data[8]"     />
+							<direct name="we"  input="RAMB18E1.WEBWE[0]"          output="RAMB18E1_2048x9_sp.we"          />
+							<direct name="out"  input="RAMB18E1_2048x9_sp.out[7:0]"            output="RAMB18E1.DOBDO[7:0]"/>
+							<direct name="out" input="RAMB18E1_2048x9_sp.out[8]"              output="RAMB18E1.DOPBDOP[0]"/>
+
+							<direct name="clk"       input="RAMB18E1.CLKARDCLK"         output="RAMB18E1_2048x9_sp.clk[0]"      />
+							<complete name="clk"     input="RAMB18E1.CLKARDCLK"         output="DOA_REG.clk DOB_REG.clk"      />
+						</interconnect>
+					</mode>
+					<mode name="RAMB18E1_4096x4_REGB_sp">
+						<pb_type name="RAMB18E1_4096x4_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
+							<input  name="addr" num_pins="12" port_class="address" />
+							<input  name="data" num_pins="4"  port_class="data_in" />
+							<input  name="we"   num_pins="1"  port_class="write_en"/>
+							<output name="out"  num_pins="4"  port_class="data_out"/>
+							<clock  name="clk"  num_pins="1"  port_class="clock"   />
+							<T_setup      value="0.480e-9" port="RAMB18E1_4096x4_sp.addr" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_4096x4_sp.data" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_4096x4_sp.we"   clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_4096x4_sp.out"  clock="clk"/>
+						</pb_type>
+						<pb_type name="DOA_REG" blif_model=".latch" num_pb="4" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+						</pb_type>
+						<pb_type name="DOB_REG" blif_model=".latch" num_pb="4" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+						</pb_type>
+						<interconnect>
+							<direct name="addr" input="RAMB18E1.ADDRBWRADDR[13:2]" output="RAMB18E1_4096x4_sp.addr"        />
+							<direct name="data"    input="RAMB18E1.DIBDI[3:0]"        output="RAMB18E1_4096x4_sp.data[3:0]"   />
+							<direct name="we" input="RAMB18E1.WEBWE[0]"          output="RAMB18E1_4096x4_sp.we"          />
+							<direct name="out" input="RAMB18E1_4096x4_sp.out[3:0]"            output="DOB_REG[3:0].D"                >
+								<!--pack_pattern name="RAMB18E1_4096x4_sp_DOB" in_port="RAMB18E1_4096x4_sp.out" out_port="DOB_REG.D"/-->
+							</direct>
+							<direct name="out" input="DOB_REG[3:0].Q"                       output="RAMB18E1.DOBDO[3:0]"/>
+							<direct name="clk"      input="RAMB18E1.CLKARDCLK"         output="RAMB18E1_4096x4_sp.clk[0]"      />
+							<complete name="clk"    input="RAMB18E1.CLKARDCLK"         output="DOA_REG.clk DOB_REG.clk"      />
+						</interconnect>
+					</mode>
+					<mode name="RAMB18E1_4096x4_COMB_sp">
+						<pb_type name="RAMB18E1_4096x4_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
+							<input  name="addr" num_pins="12" port_class="address" />
+							<input  name="data" num_pins="4"  port_class="data_in" />
+							<input  name="we"   num_pins="1"  port_class="write_en"/>
+							<output name="out"  num_pins="4"  port_class="data_out"/>
+							<clock  name="clk"  num_pins="1"  port_class="clock"   />
+							<T_setup      value="0.480e-9" port="RAMB18E1_4096x4_sp.addr" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_4096x4_sp.data" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_4096x4_sp.we"   clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_4096x4_sp.out"  clock="clk"/>
+						</pb_type>
+						<pb_type name="DOA_REG" blif_model=".latch" num_pb="4" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+						</pb_type>
+						<pb_type name="DOB_REG" blif_model=".latch" num_pb="4" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+						</pb_type>
+						<interconnect>
+							<direct name="addr" input="RAMB18E1.ADDRBWRADDR[13:2]" output="RAMB18E1_4096x4_sp.addr"        />
+							<direct name="data"    input="RAMB18E1.DIBDI[3:0]"        output="RAMB18E1_4096x4_sp.data"        />
+							<direct name="we" input="RAMB18E1.WEBWE[0]"          output="RAMB18E1_4096x4_sp.we"          />
+							<direct name="out" input="RAMB18E1_4096x4_sp.out"                 output="RAMB18E1.DOBDO[3:0]"/>
+
+							<direct name="clk"      input="RAMB18E1.CLKARDCLK"         output="RAMB18E1_4096x4_sp.clk[0]"      />
+							<complete name="clk"    input="RAMB18E1.CLKARDCLK"         output="DOA_REG.clk DOB_REG.clk"      />
+						</interconnect>
+					</mode>
+					<mode name="RAMB18E1_8192x2_REGB_sp">
+						<pb_type name="RAMB18E1_8192x2_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
+							<input  name="addr" num_pins="13" port_class="address" />
+							<input  name="data" num_pins="2"  port_class="data_in" />
+							<input  name="we"   num_pins="1"  port_class="write_en"/>
+							<output name="out"  num_pins="2"  port_class="data_out"/>
+							<clock  name="clk"  num_pins="1"  port_class="clock"   />
+							<T_setup      value="0.480e-9" port="RAMB18E1_8192x2_sp.addr" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_8192x2_sp.data" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_8192x2_sp.we"   clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_8192x2_sp.out"  clock="clk"/>
+						</pb_type>
+						<pb_type name="DOA_REG" blif_model=".latch" num_pb="2" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+						</pb_type>
+						<pb_type name="DOB_REG" blif_model=".latch" num_pb="2" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+						</pb_type>
+						<interconnect>
+							<direct name="addr" input="RAMB18E1.ADDRBWRADDR[13:1]" output="RAMB18E1_8192x2_sp.addr"        />
+							<direct name="data"    input="RAMB18E1.DIBDI[1:0]"        output="RAMB18E1_8192x2_sp.data"        />
+							<direct name="we" input="RAMB18E1.WEBWE[0]"          output="RAMB18E1_8192x2_sp.we"          />
+							<direct name="out" input="RAMB18E1_8192x2_sp.out"                 output="DOB_REG[1:0].D"                >
+								<!--pack_pattern name="RAMB18E1_8192x2_sp_DOB" in_port="RAMB18E1_8192x2_sp.out" out_port="DOB_REG.D"/-->
+							</direct>
+							<direct name="out" input="DOB_REG[1:0].Q"                       output="RAMB18E1.DOBDO[1:0]"/>
+
+							<direct name="clk"      input="RAMB18E1.CLKARDCLK"         output="RAMB18E1_8192x2_sp.clk[0]"      />
+							<complete name="clk"    input="RAMB18E1.CLKARDCLK"         output="DOA_REG.clk DOB_REG.clk"      />
+						</interconnect>
+					</mode>
+					<mode name="RAMB18E1_8192x2_COMB_sp">
+						<pb_type name="RAMB18E1_8192x2_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
+							<input  name="addr" num_pins="13" port_class="address" />
+							<input  name="data" num_pins="2"  port_class="data_in" />
+							<input  name="we"   num_pins="1"  port_class="write_en"/>
+							<output name="out"  num_pins="2"  port_class="data_out"/>
+							<clock  name="clk"  num_pins="1"  port_class="clock"   />
+							<T_setup      value="0.480e-9" port="RAMB18E1_8192x2_sp.addr" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_8192x2_sp.data" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_8192x2_sp.we"   clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_8192x2_sp.out"  clock="clk"/>
+						</pb_type>
+						<pb_type name="DOA_REG" blif_model=".latch" num_pb="2" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+						</pb_type>
+						<pb_type name="DOB_REG" blif_model=".latch" num_pb="2" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+						</pb_type>
+						<interconnect>
+							<direct name="addr" input="RAMB18E1.ADDRBWRADDR[13:1]" output="RAMB18E1_8192x2_sp.addr"        />
+							<direct name="data"    input="RAMB18E1.DIBDI[1:0]"        output="RAMB18E1_8192x2_sp.data"        />
+							<direct name="we" input="RAMB18E1.WEBWE[0]"          output="RAMB18E1_8192x2_sp.we"          />
+							<direct name="out" input="RAMB18E1_8192x2_sp.out"                 output="RAMB18E1.DOBDO[1:0]"/>
+
+							<direct name="clk"      input="RAMB18E1.CLKARDCLK"         output="RAMB18E1_8192x2_sp.clk[0]"      />
+							<complete name="clk"    input="RAMB18E1.CLKARDCLK"         output="DOA_REG.clk DOB_REG.clk"      />
+						</interconnect>
+					</mode>
+					<mode name="RAMB18E1_16384x1_REGB_sp">
+						<pb_type name="RAMB18E1_16384x1_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
+							<input  name="addr" num_pins="14" port_class="address" />
+							<input  name="data" num_pins="1"  port_class="data_in" />
+							<input  name="we"   num_pins="1"  port_class="write_en"/>
+							<output name="out"  num_pins="1"  port_class="data_out"/>
+							<clock  name="clk"  num_pins="1"  port_class="clock"   />
+							<T_setup      value="0.480e-9" port="RAMB18E1_16384x1_sp.addr" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_16384x1_sp.data" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_16384x1_sp.we"   clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_16384x1_sp.out"  clock="clk"/>
+						</pb_type>
+						<pb_type name="DOA_REG" blif_model=".latch" num_pb="1" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+						</pb_type>
+						<pb_type name="DOB_REG" blif_model=".latch" num_pb="1" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+						</pb_type>
+						<interconnect>
+							<direct name="addr" input="RAMB18E1.ADDRBWRADDR[13:0]" output="RAMB18E1_16384x1_sp.addr"     />
+							<direct name="data"    input="RAMB18E1.DIBDI[0]"          output="RAMB18E1_16384x1_sp.data"     />
+							<direct name="we" input="RAMB18E1.WEBWE[0]"          output="RAMB18E1_16384x1_sp.we"       />
+							<direct name="out" input="RAMB18E1_16384x1_sp.out"                output="DOB_REG[0].D"                >
+								<!--pack_pattern name="RAMB18E1_16384x1_sp_DOB" in_port="RAMB18E1_16384x1_sp.out" out_port="DOB_REG.D"/-->
+							</direct>
+							<direct name="out" input="DOB_REG[0].Q"                         output="RAMB18E1.DOBDO[0]"/>
+
+							<direct name="clk"      input="RAMB18E1.CLKARDCLK"         output="RAMB18E1_16384x1_sp.clk[0]"   />
+							<complete name="clk"    input="RAMB18E1.CLKARDCLK"         output="DOA_REG.clk DOB_REG.clk"    />
+						</interconnect>
+					</mode>
+					<mode name="RAMB18E1_16384x1_COMB_sp">
+						<pb_type name="RAMB18E1_16384x1_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
+							<input  name="addr" num_pins="14" port_class="address" />
+							<input  name="data" num_pins="1"  port_class="data_in" />
+							<input  name="we"   num_pins="1"  port_class="write_en"/>
+							<output name="out"  num_pins="1"  port_class="data_out"/>
+							<clock  name="clk"  num_pins="1"  port_class="clock"   />
+							<T_setup      value="0.480e-9" port="RAMB18E1_16384x1_sp.addr" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_16384x1_sp.data" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_16384x1_sp.we"   clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_16384x1_sp.out"  clock="clk"/>
+						</pb_type>
+						<pb_type name="DOA_REG" blif_model=".latch" num_pb="1" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+						</pb_type>
+						<pb_type name="DOB_REG" blif_model=".latch" num_pb="1" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+						</pb_type>
+						<interconnect>
+							<direct name="addr" input="RAMB18E1.ADDRBWRADDR[13:0]" output="RAMB18E1_16384x1_sp.addr"     />
+							<direct name="data"    input="RAMB18E1.DIBDI[0]"          output="RAMB18E1_16384x1_sp.data"     />
+							<direct name="we" input="RAMB18E1.WEBWE[0]"          output="RAMB18E1_16384x1_sp.we"       />
+							<direct name="out" input="RAMB18E1_16384x1_sp.out"                output="RAMB18E1.DOBDO[0]"/>
+
+							<direct name="clk"      input="RAMB18E1.CLKARDCLK"         output="RAMB18E1_16384x1_sp.clk[0]"   />
+							<complete name="clk"    input="RAMB18E1.CLKARDCLK"         output="DOA_REG.clk DOB_REG.clk"    />
+						</interconnect>
+					</mode>
+					<!-- RAMB18E1 Dual-port RAM -->
+					<mode name="RAMB18E1_1024x18_REGAB_dp">
+						<pb_type name="RAMB18E1_1024x18_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+							<input  name="addr1" num_pins="10" port_class="addr1" />
+							<input  name="addr2" num_pins="10" port_class="addr2" />
+							<input  name="data1" num_pins="18" port_class="data_in1" />
+							<input  name="data2" num_pins="18" port_class="data_in2" />
+							<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+							<input  name="we2"   num_pins="1"  port_class="write_en2"/>
+							<output name="out1"  num_pins="18" port_class="data_out1"/>
+							<output name="out2"  num_pins="18" port_class="data_out2"/>
+							<clock  name="clk"   num_pins="1"  port_class="clock"    />
+							<T_setup      value="0.480e-9" port="RAMB18E1_1024x18_dp.addr1" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_1024x18_dp.data1" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_1024x18_dp.we1"   clock="clk"/>
+							<T_setup      value="0.480e-9" port="RAMB18E1_1024x18_dp.addr2" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_1024x18_dp.data2" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_1024x18_dp.we2"   clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_1024x18_dp.out1"  clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_1024x18_dp.out2"  clock="clk"/>
+						</pb_type>
+						<pb_type name="DOA_REG" blif_model=".latch" num_pb="18" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+						</pb_type>
+						<pb_type name="DOB_REG" blif_model=".latch" num_pb="18" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+						</pb_type>
+						<interconnect>
+							<direct name="addr1"  input="RAMB18E1.ADDRARDADDR[13:4]" output="RAMB18E1_1024x18_dp.addr1"         />
+							<direct name="addr2"  input="RAMB18E1.ADDRBWRADDR[13:4]" output="RAMB18E1_1024x18_dp.addr2"         />
+							<direct name="data1"     input="RAMB18E1.DIADI[15:0]"       output="RAMB18E1_1024x18_dp.data1[15:0]"   />
+							<direct name="data1"    input="RAMB18E1.DIPADIP[1:0]"      output="RAMB18E1_1024x18_dp.data1[17:16]"  />
+							<direct name="data2"     input="RAMB18E1.DIBDI[15:0]"       output="RAMB18E1_1024x18_dp.data2[15:0]"   />
+							<direct name="data2"    input="RAMB18E1.DIPBDIP[1:0]"      output="RAMB18E1_1024x18_dp.data2[17:16]"  />
+							<direct name="we1"  input="RAMB18E1.WEA[0]"            output="RAMB18E1_1024x18_dp.we1"           />
+							<direct name="we2"  input="RAMB18E1.WEBWE[0]"          output="RAMB18E1_1024x18_dp.we2"           />
+							<direct name="out1"  input="RAMB18E1_1024x18_dp.out1"               output="DOA_REG[17:0].D"                  >
+								<!-- FIXME: This pattern is obsolete because of problem below -->
+								<!--pack_pattern name="RAMB18E1_1024x18_dp_DOA" in_port="RAMB18E1_1024x18_dp.out1" out_port="DOA_REG.D"/-->
+							</direct>
+							<direct name="out1"  input="DOA_REG[15: 0].Q"                     output="RAMB18E1.DOADO[15:0]"  />
+							<direct name="out1" input="DOA_REG[17:16].Q"                     output="RAMB18E1.DOPADOP[1:0]" />
+							<direct name="out2"  input="RAMB18E1_1024x18_dp.out2"               output="DOB_REG[17:0].D"                  >
+								<!-- FIXME: For circuit with both DOA_REG and DOB_REG, this pattern is not recognised -->
+								<!--pack_pattern name="RAMB18E1_1024x18_dp_DOB" in_port="RAMB18E1_1024x18_dp.out2" out_port="DOB_REG.D"/-->
+							</direct>
+							<direct name="out2"  input="DOB_REG[15: 0].Q"                     output="RAMB18E1.DOBDO[15:0]"  />
+							<direct name="out2" input="DOB_REG[17:16].Q"                     output="RAMB18E1.DOPBDOP[1:0]" />
+
+							<direct name="clk"       input="RAMB18E1.CLKARDCLK"         output="RAMB18E1_1024x18_dp.clk[0]"        />
+							<complete name="clk"     input="RAMB18E1.CLKARDCLK"         output="DOA_REG.clk DOB_REG.clk"         />
+						</interconnect>
+					</mode>
+					<mode name="RAMB18E1_1024x18_REGA_dp">
+						<pb_type name="RAMB18E1_1024x18_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+							<input  name="addr1" num_pins="10" port_class="addr1" />
+							<input  name="addr2" num_pins="10" port_class="addr2" />
+							<input  name="data1" num_pins="18" port_class="data_in1" />
+							<input  name="data2" num_pins="18" port_class="data_in2" />
+							<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+							<input  name="we2"   num_pins="1"  port_class="write_en2"/>
+							<output name="out1"  num_pins="18" port_class="data_out1"/>
+							<output name="out2"  num_pins="18" port_class="data_out2"/>
+							<clock  name="clk"   num_pins="1"  port_class="clock"    />
+							<T_setup      value="0.480e-9" port="RAMB18E1_1024x18_dp.addr1" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_1024x18_dp.data1" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_1024x18_dp.we1"   clock="clk"/>
+							<T_setup      value="0.480e-9" port="RAMB18E1_1024x18_dp.addr2" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_1024x18_dp.data2" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_1024x18_dp.we2"   clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_1024x18_dp.out1"  clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_1024x18_dp.out2"  clock="clk"/>
+						</pb_type>
+						<pb_type name="DOA_REG" blif_model=".latch" num_pb="18" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+						</pb_type>
+						<pb_type name="DOB_REG" blif_model=".latch" num_pb="18" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+						</pb_type>
+						<interconnect>
+							<direct name="addr1"  input="RAMB18E1.ADDRARDADDR[13:4]" output="RAMB18E1_1024x18_dp.addr1"         />
+							<direct name="addr2"  input="RAMB18E1.ADDRBWRADDR[13:4]" output="RAMB18E1_1024x18_dp.addr2"         />
+							<direct name="data1"     input="RAMB18E1.DIADI[15:0]"       output="RAMB18E1_1024x18_dp.data1[15:0]"   />
+							<direct name="data1"    input="RAMB18E1.DIPADIP[1:0]"      output="RAMB18E1_1024x18_dp.data1[17:16]"  />
+							<direct name="data2"     input="RAMB18E1.DIBDI[15:0]"       output="RAMB18E1_1024x18_dp.data2[15:0]"   />
+							<direct name="data2"    input="RAMB18E1.DIPBDIP[1:0]"      output="RAMB18E1_1024x18_dp.data2[17:16]"  />
+							<direct name="we1"  input="RAMB18E1.WEA[0]"            output="RAMB18E1_1024x18_dp.we1"           />
+							<direct name="we2"  input="RAMB18E1.WEBWE[0]"          output="RAMB18E1_1024x18_dp.we2"           />
+							<direct name="out1"  input="RAMB18E1_1024x18_dp.out1"               output="DOA_REG[17:0].D"                  >
+								<!--pack_pattern name="RAMB18E1_1024x18_dp_DOA" in_port="RAMB18E1_1024x18_dp.out1" out_port="DOA_REG.D"/-->
+							</direct>
+							<direct name="out1"  input="DOA_REG[15: 0].Q"                     output="RAMB18E1.DOADO[15:0]"  />
+							<direct name="out1" input="DOA_REG[17:16].Q"                     output="RAMB18E1.DOPADOP[1:0]" />
+							<direct name="out2"  input="RAMB18E1_1024x18_dp.out2[15:0]"         output="RAMB18E1.DOBDO[15:0]"  />
+							<direct name="out2" input="RAMB18E1_1024x18_dp.out2[17:16]"        output="RAMB18E1.DOPBDOP[1:0]" />
+
+							<direct name="clk"       input="RAMB18E1.CLKARDCLK"         output="RAMB18E1_1024x18_dp.clk[0]"        />
+							<complete name="clk"     input="RAMB18E1.CLKARDCLK"         output="DOA_REG.clk DOB_REG.clk"         />
+						</interconnect>
+					</mode>
+					<mode name="RAMB18E1_1024x18_REGB_dp">
+						<pb_type name="RAMB18E1_1024x18_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+							<input  name="addr1" num_pins="10" port_class="addr1" />
+							<input  name="addr2" num_pins="10" port_class="addr2" />
+							<input  name="data1" num_pins="18" port_class="data_in1" />
+							<input  name="data2" num_pins="18" port_class="data_in2" />
+							<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+							<input  name="we2"   num_pins="1"  port_class="write_en2"/>
+							<output name="out1"  num_pins="18" port_class="data_out1"/>
+							<output name="out2"  num_pins="18" port_class="data_out2"/>
+							<clock  name="clk"   num_pins="1"  port_class="clock"    />
+							<T_setup      value="0.480e-9" port="RAMB18E1_1024x18_dp.addr1" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_1024x18_dp.data1" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_1024x18_dp.we1"   clock="clk"/>
+							<T_setup      value="0.480e-9" port="RAMB18E1_1024x18_dp.addr2" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_1024x18_dp.data2" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_1024x18_dp.we2"   clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_1024x18_dp.out1"  clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_1024x18_dp.out2"  clock="clk"/>
+						</pb_type>
+						<pb_type name="DOA_REG" blif_model=".latch" num_pb="18" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+						</pb_type>
+						<pb_type name="DOB_REG" blif_model=".latch" num_pb="18" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+						</pb_type>
+						<interconnect>
+							<direct name="addr1"  input="RAMB18E1.ADDRARDADDR[13:4]" output="RAMB18E1_1024x18_dp.addr1"         />
+							<direct name="addr2"  input="RAMB18E1.ADDRBWRADDR[13:4]" output="RAMB18E1_1024x18_dp.addr2"         />
+							<direct name="data1"     input="RAMB18E1.DIADI[15:0]"       output="RAMB18E1_1024x18_dp.data1[15:0]"   />
+							<direct name="data1"    input="RAMB18E1.DIPADIP[1:0]"      output="RAMB18E1_1024x18_dp.data1[17:16]"  />
+							<direct name="data2"     input="RAMB18E1.DIBDI[15:0]"       output="RAMB18E1_1024x18_dp.data2[15:0]"   />
+							<direct name="data2"    input="RAMB18E1.DIPBDIP[1:0]"      output="RAMB18E1_1024x18_dp.data2[17:16]"  />
+							<direct name="we1"  input="RAMB18E1.WEA[0]"            output="RAMB18E1_1024x18_dp.we1"           />
+							<direct name="we2"  input="RAMB18E1.WEBWE[0]"          output="RAMB18E1_1024x18_dp.we2"           />
+							<direct name="out1"  input="RAMB18E1_1024x18_dp.out1[15:0]"         output="RAMB18E1.DOADO[15:0]"  />
+							<direct name="out1" input="RAMB18E1_1024x18_dp.out1[17:16]"        output="RAMB18E1.DOPADOP[1:0]" />
+							<direct name="out2"  input="RAMB18E1_1024x18_dp.out2"               output="DOB_REG[17:0].D"                  >
+								<!-- FIXME: For circuit with just DOB_REG, this pattern is recognised, 
+								     but VPR cannot find any logic block to implement the resulting molecule -->
+								<!--pack_pattern name="RAMB18E1_1024x18_dp_DOB" in_port="RAMB18E1_1024x18_dp.out2" out_port="DOB_REG.D"/-->
+							</direct>
+							<direct name="out2"  input="DOB_REG[15: 0].Q"                     output="RAMB18E1.DOBDO[15:0]"  />
+							<direct name="out2" input="DOB_REG[17:16].Q"                     output="RAMB18E1.DOPBDOP[1:0]" />
+
+							<direct name="clk"       input="RAMB18E1.CLKARDCLK"         output="RAMB18E1_1024x18_dp.clk[0]"        />
+							<complete name="clk"     input="RAMB18E1.CLKARDCLK"         output="DOA_REG.clk DOB_REG.clk"         />
+						</interconnect>
+					</mode>
+					<mode name="RAMB18E1_1024x18_COMB_dp">
+						<pb_type name="RAMB18E1_1024x18_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+							<input  name="addr1" num_pins="10" port_class="addr1" />
+							<input  name="addr2" num_pins="10" port_class="addr2" />
+							<input  name="data1" num_pins="18" port_class="data_in1" />
+							<input  name="data2" num_pins="18" port_class="data_in2" />
+							<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+							<input  name="we2"   num_pins="1"  port_class="write_en2"/>
+							<output name="out1"  num_pins="18" port_class="data_out1"/>
+							<output name="out2"  num_pins="18" port_class="data_out2"/>
+							<clock  name="clk"   num_pins="1"  port_class="clock"    />
+							<T_setup      value="0.480e-9" port="RAMB18E1_1024x18_dp.addr1" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_1024x18_dp.data1" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_1024x18_dp.we1"   clock="clk"/>
+							<T_setup      value="0.480e-9" port="RAMB18E1_1024x18_dp.addr2" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_1024x18_dp.data2" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_1024x18_dp.we2"   clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_1024x18_dp.out1"  clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_1024x18_dp.out2"  clock="clk"/>
+						</pb_type>
+						<pb_type name="DOA_REG" blif_model=".latch" num_pb="18" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+						</pb_type>
+						<pb_type name="DOB_REG" blif_model=".latch" num_pb="18" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+						</pb_type>
+						<interconnect>
+							<direct name="addr1"  input="RAMB18E1.ADDRARDADDR[13:4]" output="RAMB18E1_1024x18_dp.addr1"        />
+							<direct name="addr2"  input="RAMB18E1.ADDRBWRADDR[13:4]" output="RAMB18E1_1024x18_dp.addr2"        />
+							<direct name="data1"     input="RAMB18E1.DIADI[15:0]"       output="RAMB18E1_1024x18_dp.data1[15:0]"  />
+							<direct name="data1"    input="RAMB18E1.DIPADIP[1:0]"      output="RAMB18E1_1024x18_dp.data1[17:16]" />
+							<direct name="data2"     input="RAMB18E1.DIBDI[15:0]"       output="RAMB18E1_1024x18_dp.data2[15:0]"  />
+							<direct name="data2"    input="RAMB18E1.DIPBDIP[1:0]"      output="RAMB18E1_1024x18_dp.data2[17:16]" />
+							<direct name="we1"  input="RAMB18E1.WEA[0]"            output="RAMB18E1_1024x18_dp.we1"          />
+							<direct name="we2"  input="RAMB18E1.WEBWE[0]"          output="RAMB18E1_1024x18_dp.we2"          />
+							<direct name="out1"  input="RAMB18E1_1024x18_dp.out1[15:0]"         output="RAMB18E1.DOADO[15:0]" />
+							<direct name="out1" input="RAMB18E1_1024x18_dp.out1[17:16]"        output="RAMB18E1.DOPADOP[1:0]"/>
+							<direct name="out2"  input="RAMB18E1_1024x18_dp.out2[15:0]"         output="RAMB18E1.DOBDO[15:0]" />
+							<direct name="out2" input="RAMB18E1_1024x18_dp.out2[17:16]"        output="RAMB18E1.DOPBDOP[1:0]"/>
+
+							<direct name="clk"       input="RAMB18E1.CLKARDCLK"         output="RAMB18E1_1024x18_dp.clk[0]"       />
+							<complete name="clk"     input="RAMB18E1.CLKARDCLK"         output="DOA_REG.clk DOB_REG.clk"        />
+						</interconnect>
+					</mode>
+					<mode name="RAMB18E1_2048x9_REGAB_dp">
+						<pb_type name="RAMB18E1_2048x9_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+							<input  name="addr1" num_pins="11" port_class="addr1" />
+							<input  name="addr2" num_pins="11" port_class="addr2" />
+							<input  name="data1" num_pins="9"  port_class="data_in1" />
+							<input  name="data2" num_pins="9"  port_class="data_in2" />
+							<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+							<input  name="we2"   num_pins="1"  port_class="write_en2"/>
+							<output name="out1"  num_pins="9"  port_class="data_out1"/>
+							<output name="out2"  num_pins="9"  port_class="data_out2"/>
+							<clock  name="clk"   num_pins="1"  port_class="clock"    />
+							<T_setup      value="0.480e-9" port="RAMB18E1_2048x9_dp.addr1" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_2048x9_dp.data1" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_2048x9_dp.we1"   clock="clk"/>
+							<T_setup      value="0.480e-9" port="RAMB18E1_2048x9_dp.addr2" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_2048x9_dp.data2" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_2048x9_dp.we2"   clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_2048x9_dp.out1"  clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_2048x9_dp.out2"  clock="clk"/>
+						</pb_type>
+						<pb_type name="DOA_REG" blif_model=".latch" num_pb="9" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+						</pb_type>
+						<pb_type name="DOB_REG" blif_model=".latch" num_pb="9" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+						</pb_type>
+						<interconnect>
+							<direct name="addr1"  input="RAMB18E1.ADDRARDADDR[13:3]" output="RAMB18E1_2048x9_dp.addr1"       />
+							<direct name="addr2"  input="RAMB18E1.ADDRBWRADDR[13:3]" output="RAMB18E1_2048x9_dp.addr2"       />
+							<direct name="data1"     input="RAMB18E1.DIADI[7:0]"        output="RAMB18E1_2048x9_dp.data1[7:0]"  />
+							<direct name="data1"    input="RAMB18E1.DIPADIP[0]"        output="RAMB18E1_2048x9_dp.data1[8]"    />
+							<direct name="data2"     input="RAMB18E1.DIBDI[7:0]"        output="RAMB18E1_2048x9_dp.data2[7:0]"  />
+							<direct name="data2"    input="RAMB18E1.DIPBDIP[0]"        output="RAMB18E1_2048x9_dp.data2[8]"    />
+							<direct name="we1"  input="RAMB18E1.WEA[0]"            output="RAMB18E1_2048x9_dp.we1"         />
+							<direct name="we2"  input="RAMB18E1.WEBWE[0]"          output="RAMB18E1_2048x9_dp.we2"         />
+							<direct name="out1"  input="RAMB18E1_2048x9_dp.out1"                output="DOA_REG[8:0].D"               />
+							<direct name="out1"  input="DOA_REG[7:0].Q"                       output="RAMB18E1.DOADO[7:0]"/>
+							<direct name="out1" input="DOA_REG[8].Q"                         output="RAMB18E1.DOPADOP[0]"/>
+							<direct name="out2"  input="RAMB18E1_2048x9_dp.out2"                output="DOB_REG[8:0].D"               />
+							<direct name="out2"  input="DOB_REG[7:0].Q"                       output="RAMB18E1.DOBDO[7:0]"/>
+							<direct name="out2" input="DOB_REG[8].Q"                         output="RAMB18E1.DOPBDOP[0]"/>
+
+							<direct name="clk"       input="RAMB18E1.CLKARDCLK"         output="RAMB18E1_2048x9_dp.clk[0]"      />
+							<complete name="clk"     input="RAMB18E1.CLKARDCLK"         output="DOA_REG.clk DOB_REG.clk"      />
+						</interconnect>
+					</mode>
+					<mode name="RAMB18E1_2048x9_REGA_dp">
+						<pb_type name="RAMB18E1_2048x9_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+							<input  name="addr1" num_pins="11" port_class="addr1" />
+							<input  name="addr2" num_pins="11" port_class="addr2" />
+							<input  name="data1" num_pins="9"  port_class="data_in1" />
+							<input  name="data2" num_pins="9"  port_class="data_in2" />
+							<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+							<input  name="we2"   num_pins="1"  port_class="write_en2"/>
+							<output name="out1"  num_pins="9"  port_class="data_out1"/>
+							<output name="out2"  num_pins="9"  port_class="data_out2"/>
+							<clock  name="clk"   num_pins="1"  port_class="clock"    />
+							<T_setup      value="0.480e-9" port="RAMB18E1_2048x9_dp.addr1" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_2048x9_dp.data1" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_2048x9_dp.we1"   clock="clk"/>
+							<T_setup      value="0.480e-9" port="RAMB18E1_2048x9_dp.addr2" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_2048x9_dp.data2" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_2048x9_dp.we2"   clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_2048x9_dp.out1"  clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_2048x9_dp.out2"  clock="clk"/>
+						</pb_type>
+						<pb_type name="DOA_REG" blif_model=".latch" num_pb="9" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+						</pb_type>
+						<pb_type name="DOB_REG" blif_model=".latch" num_pb="9" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+						</pb_type>
+						<interconnect>
+							<direct name="addr1"  input="RAMB18E1.ADDRARDADDR[13:3]" output="RAMB18E1_2048x9_dp.addr1"       />
+							<direct name="addr2"  input="RAMB18E1.ADDRBWRADDR[13:3]" output="RAMB18E1_2048x9_dp.addr2"       />
+							<direct name="data1"     input="RAMB18E1.DIADI[7:0]"        output="RAMB18E1_2048x9_dp.data1[7:0]"  />
+							<direct name="data1"    input="RAMB18E1.DIPADIP[0]"        output="RAMB18E1_2048x9_dp.data1[8]"    />
+							<direct name="data2"     input="RAMB18E1.DIBDI[7:0]"        output="RAMB18E1_2048x9_dp.data2[7:0]"  />
+							<direct name="data2"    input="RAMB18E1.DIPBDIP[0]"        output="RAMB18E1_2048x9_dp.data2[8]"    />
+							<direct name="we1"  input="RAMB18E1.WEA[0]"            output="RAMB18E1_2048x9_dp.we1"         />
+							<direct name="we2"  input="RAMB18E1.WEBWE[0]"          output="RAMB18E1_2048x9_dp.we2"         />
+							<direct name="out1"  input="RAMB18E1_2048x9_dp.out1"                output="DOA_REG[8:0].D"                >
+								<!--pack_pattern name="RAMB18E1_2048x9_dp_DOA" in_port="RAMB18E1_2048x9_dp.out1" out_port="DOA_REG.D"/-->
+							</direct>
+							<direct name="out1"  input="DOA_REG[7:0].Q"                       output="RAMB18E1.DOADO[7:0]"/>
+							<direct name="out1" input="DOA_REG[8].Q"                         output="RAMB18E1.DOPADOP[0]"/>
+							<direct name="out2"  input="RAMB18E1_2048x9_dp.out2[7:0]"           output="RAMB18E1.DOBDO[7:0]"/>
+							<direct name="out2" input="RAMB18E1_2048x9_dp.out2[8]"             output="RAMB18E1.DOPBDOP[0]"/>
+
+							<direct name="clk"       input="RAMB18E1.CLKARDCLK"         output="RAMB18E1_2048x9_dp.clk[0]"      />
+							<complete name="clk"     input="RAMB18E1.CLKARDCLK"         output="DOA_REG.clk DOB_REG.clk"      />
+						</interconnect>
+					</mode>
+					<mode name="RAMB18E1_2048x9_REGB_dp">
+						<pb_type name="RAMB18E1_2048x9_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+							<input  name="addr1" num_pins="11" port_class="addr1" />
+							<input  name="addr2" num_pins="11" port_class="addr2" />
+							<input  name="data1" num_pins="9"  port_class="data_in1" />
+							<input  name="data2" num_pins="9"  port_class="data_in2" />
+							<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+							<input  name="we2"   num_pins="1"  port_class="write_en2"/>
+							<output name="out1"  num_pins="9"  port_class="data_out1"/>
+							<output name="out2"  num_pins="9"  port_class="data_out2"/>
+							<clock  name="clk"   num_pins="1"  port_class="clock"    />
+							<T_setup      value="0.480e-9" port="RAMB18E1_2048x9_dp.addr1" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_2048x9_dp.data1" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_2048x9_dp.we1"   clock="clk"/>
+							<T_setup      value="0.480e-9" port="RAMB18E1_2048x9_dp.addr2" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_2048x9_dp.data2" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_2048x9_dp.we2"   clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_2048x9_dp.out1"  clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_2048x9_dp.out2"  clock="clk"/>
+						</pb_type>
+						<pb_type name="DOA_REG" blif_model=".latch" num_pb="9" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+						</pb_type>
+						<pb_type name="DOB_REG" blif_model=".latch" num_pb="9" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+						</pb_type>
+						<interconnect>
+							<direct name="addr1"  input="RAMB18E1.ADDRARDADDR[13:3]" output="RAMB18E1_2048x9_dp.addr1"       />
+							<direct name="addr2"  input="RAMB18E1.ADDRBWRADDR[13:3]" output="RAMB18E1_2048x9_dp.addr2"       />
+							<direct name="data1"     input="RAMB18E1.DIADI[7:0]"        output="RAMB18E1_2048x9_dp.data1[7:0]"  />
+							<direct name="data1"    input="RAMB18E1.DIPADIP[0]"        output="RAMB18E1_2048x9_dp.data1[8]"    />
+							<direct name="data2"     input="RAMB18E1.DIBDI[7:0]"        output="RAMB18E1_2048x9_dp.data2[7:0]"  />
+							<direct name="data2"    input="RAMB18E1.DIPBDIP[0]"        output="RAMB18E1_2048x9_dp.data2[8]"    />
+							<direct name="we1"  input="RAMB18E1.WEA[0]"            output="RAMB18E1_2048x9_dp.we1"         />
+							<direct name="we2"  input="RAMB18E1.WEBWE[0]"          output="RAMB18E1_2048x9_dp.we2"         />
+							<direct name="out1"  input="RAMB18E1_2048x9_dp.out1[7:0]"           output="RAMB18E1.DOADO[7:0]"/>
+							<direct name="out1" input="RAMB18E1_2048x9_dp.out1[8]"             output="RAMB18E1.DOPADOP[0]"/>
+							<direct name="out2"  input="RAMB18E1_2048x9_dp.out2"                output="DOB_REG[8:0].D"               />
+							<direct name="out2"  input="DOB_REG[7:0].Q"                       output="RAMB18E1.DOBDO[7:0]"/>
+							<direct name="out2" input="DOB_REG[8].Q"                         output="RAMB18E1.DOPBDOP[0]"/>
+
+							<direct name="clk"       input="RAMB18E1.CLKARDCLK"         output="RAMB18E1_2048x9_dp.clk[0]"      />
+							<complete name="clk"     input="RAMB18E1.CLKARDCLK"         output="DOA_REG.clk DOB_REG.clk"      />
+						</interconnect>
+					</mode>
+					<mode name="RAMB18E1_2048x9_COMB_dp">
+						<pb_type name="RAMB18E1_2048x9_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+							<input  name="addr1" num_pins="11" port_class="addr1" />
+							<input  name="addr2" num_pins="11" port_class="addr2" />
+							<input  name="data1" num_pins="9"  port_class="data_in1" />
+							<input  name="data2" num_pins="9"  port_class="data_in2" />
+							<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+							<input  name="we2"   num_pins="1"  port_class="write_en2"/>
+							<output name="out1"  num_pins="9"  port_class="data_out1"/>
+							<output name="out2"  num_pins="9"  port_class="data_out2"/>
+							<clock  name="clk"   num_pins="1"  port_class="clock"    />
+							<T_setup      value="0.480e-9" port="RAMB18E1_2048x9_dp.addr1" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_2048x9_dp.data1" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_2048x9_dp.we1"   clock="clk"/>
+							<T_setup      value="0.480e-9" port="RAMB18E1_2048x9_dp.addr2" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_2048x9_dp.data2" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_2048x9_dp.we2"   clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_2048x9_dp.out1"  clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_2048x9_dp.out2"  clock="clk"/>
+						</pb_type>
+						<pb_type name="DOA_REG" blif_model=".latch" num_pb="9" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+						</pb_type>
+						<pb_type name="DOB_REG" blif_model=".latch" num_pb="9" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+						</pb_type>
+						<interconnect>
+							<direct name="addr1"  input="RAMB18E1.ADDRARDADDR[13:3]" output="RAMB18E1_2048x9_dp.addr1"       />
+							<direct name="addr2"  input="RAMB18E1.ADDRBWRADDR[13:3]" output="RAMB18E1_2048x9_dp.addr2"       />
+							<direct name="data1"     input="RAMB18E1.DIADI[7:0]"        output="RAMB18E1_2048x9_dp.data1[7:0]"  />
+							<direct name="data1"    input="RAMB18E1.DIPADIP[0]"        output="RAMB18E1_2048x9_dp.data1[8]"    />
+							<direct name="data2"     input="RAMB18E1.DIBDI[7:0]"        output="RAMB18E1_2048x9_dp.data2[7:0]"  />
+							<direct name="data2"    input="RAMB18E1.DIPBDIP[0]"        output="RAMB18E1_2048x9_dp.data2[8]"    />
+							<direct name="we1"  input="RAMB18E1.WEA[0]"            output="RAMB18E1_2048x9_dp.we1"         />
+							<direct name="we2"  input="RAMB18E1.WEBWE[0]"          output="RAMB18E1_2048x9_dp.we2"         />
+							<direct name="out1"  input="RAMB18E1_2048x9_dp.out1[7:0]"           output="RAMB18E1.DOADO[7:0]"/>
+							<direct name="out1" input="RAMB18E1_2048x9_dp.out1[8]"             output="RAMB18E1.DOPADOP[0]"/>
+							<direct name="out2"  input="RAMB18E1_2048x9_dp.out2[7:0]"           output="RAMB18E1.DOBDO[7:0]"/>
+							<direct name="out2" input="RAMB18E1_2048x9_dp.out2[8]"             output="RAMB18E1.DOPBDOP[0]"/>
+
+							<direct name="clk"       input="RAMB18E1.CLKARDCLK"         output="RAMB18E1_2048x9_dp.clk[0]"      />
+							<complete name="clk"     input="RAMB18E1.CLKARDCLK"         output="DOA_REG.clk DOB_REG.clk"      />
+						</interconnect>
+					</mode>
+					<mode name="RAMB18E1_4096x4_REGAB_dp">
+						<pb_type name="RAMB18E1_4096x4_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+							<input  name="addr1" num_pins="12" port_class="addr1" />
+							<input  name="addr2" num_pins="12" port_class="addr2" />
+							<input  name="data1" num_pins="4"  port_class="data_in1" />
+							<input  name="data2" num_pins="4"  port_class="data_in2" />
+							<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+							<input  name="we2"   num_pins="1"  port_class="write_en2"/>
+							<output name="out1"  num_pins="4"  port_class="data_out1"/>
+							<output name="out2"  num_pins="4"  port_class="data_out2"/>
+							<clock  name="clk"   num_pins="1"  port_class="clock"    />
+							<T_setup      value="0.480e-9" port="RAMB18E1_4096x4_dp.addr1" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_4096x4_dp.data1" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_4096x4_dp.we1"   clock="clk"/>
+							<T_setup      value="0.480e-9" port="RAMB18E1_4096x4_dp.addr2" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_4096x4_dp.data2" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_4096x4_dp.we2"   clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_4096x4_dp.out1"  clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_4096x4_dp.out2"  clock="clk"/>
+						</pb_type>
+						<pb_type name="DOA_REG" blif_model=".latch" num_pb="4" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+						</pb_type>
+						<pb_type name="DOB_REG" blif_model=".latch" num_pb="4" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+						</pb_type>
+						<interconnect>
+							<direct name="addr1" input="RAMB18E1.ADDRARDADDR[13:2]" output="RAMB18E1_4096x4_dp.addr1"       />
+							<direct name="addr2" input="RAMB18E1.ADDRBWRADDR[13:2]" output="RAMB18E1_4096x4_dp.addr2"       />
+							<direct name="data1"    input="RAMB18E1.DIADI[3:0]"        output="RAMB18E1_4096x4_dp.data1"       />
+							<direct name="data2"    input="RAMB18E1.DIBDI[3:0]"        output="RAMB18E1_4096x4_dp.data2"       />
+							<direct name="we1" input="RAMB18E1.WEA[0]"            output="RAMB18E1_4096x4_dp.we1"         />
+							<direct name="we2" input="RAMB18E1.WEBWE[0]"          output="RAMB18E1_4096x4_dp.we2"         />
+							<direct name="out1" input="RAMB18E1_4096x4_dp.out1"                output="DOA_REG[3:0].D"               />
+							<direct name="out1" input="DOA_REG[3:0].Q"                       output="RAMB18E1.DOADO[3:0]"/>
+							<direct name="out2" input="RAMB18E1_4096x4_dp.out2"                output="DOB_REG[3:0].D"               />
+							<direct name="out2" input="DOB_REG[3:0].Q"                       output="RAMB18E1.DOBDO[3:0]"/>
+
+							<direct name="clk"      input="RAMB18E1.CLKARDCLK"         output="RAMB18E1_4096x4_dp.clk[0]"      />
+							<complete name="clk"    input="RAMB18E1.CLKARDCLK"         output="DOA_REG.clk DOB_REG.clk"      />
+						</interconnect>
+					</mode>
+					<mode name="RAMB18E1_4096x4_REGA_dp">
+						<pb_type name="RAMB18E1_4096x4_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+							<input  name="addr1" num_pins="12" port_class="addr1" />
+							<input  name="addr2" num_pins="12" port_class="addr2" />
+							<input  name="data1" num_pins="4"  port_class="data_in1" />
+							<input  name="data2" num_pins="4"  port_class="data_in2" />
+							<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+							<input  name="we2"   num_pins="1"  port_class="write_en2"/>
+							<output name="out1"  num_pins="4"  port_class="data_out1"/>
+							<output name="out2"  num_pins="4"  port_class="data_out2"/>
+							<clock  name="clk"   num_pins="1"  port_class="clock"    />
+							<T_setup      value="0.480e-9" port="RAMB18E1_4096x4_dp.addr1" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_4096x4_dp.data1" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_4096x4_dp.we1"   clock="clk"/>
+							<T_setup      value="0.480e-9" port="RAMB18E1_4096x4_dp.addr2" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_4096x4_dp.data2" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_4096x4_dp.we2"   clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_4096x4_dp.out1"  clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_4096x4_dp.out2"  clock="clk"/>
+						</pb_type>
+						<pb_type name="DOA_REG" blif_model=".latch" num_pb="4" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+						</pb_type>
+						<pb_type name="DOB_REG" blif_model=".latch" num_pb="4" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+						</pb_type>
+						<interconnect>
+							<direct name="addr1" input="RAMB18E1.ADDRARDADDR[13:2]" output="RAMB18E1_4096x4_dp.addr1"       />
+							<direct name="addr2" input="RAMB18E1.ADDRBWRADDR[13:2]" output="RAMB18E1_4096x4_dp.addr2"       />
+							<direct name="data1"    input="RAMB18E1.DIADI[3:0]"        output="RAMB18E1_4096x4_dp.data1"       />
+							<direct name="data2"    input="RAMB18E1.DIBDI[3:0]"        output="RAMB18E1_4096x4_dp.data2"       />
+							<direct name="we1" input="RAMB18E1.WEA[0]"            output="RAMB18E1_4096x4_dp.we1"         />
+							<direct name="we2" input="RAMB18E1.WEBWE[0]"          output="RAMB18E1_4096x4_dp.we2"         />
+							<direct name="out1" input="RAMB18E1_4096x4_dp.out1"                output="DOA_REG[3:0].D"                >
+								<!--pack_pattern name="RAMB18E1_4096x4_dp_DOA" in_port="RAMB18E1_4096x4_dp.out1" out_port="DOA_REG.D"/-->
+							</direct>
+							<direct name="out1" input="DOA_REG[3:0].Q"                       output="RAMB18E1.DOADO[3:0]"/>
+							<direct name="out2" input="RAMB18E1_4096x4_dp.out2"                output="RAMB18E1.DOBDO[3:0]"/>
+
+							<direct name="clk"      input="RAMB18E1.CLKARDCLK"         output="RAMB18E1_4096x4_dp.clk[0]"      />
+							<complete name="clk"    input="RAMB18E1.CLKARDCLK"         output="DOA_REG.clk DOB_REG.clk"      />
+						</interconnect>
+					</mode>
+					<mode name="RAMB18E1_4096x4_REGB_dp">
+						<pb_type name="RAMB18E1_4096x4_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+							<input  name="addr1" num_pins="12" port_class="addr1" />
+							<input  name="addr2" num_pins="12" port_class="addr2" />
+							<input  name="data1" num_pins="4"  port_class="data_in1" />
+							<input  name="data2" num_pins="4"  port_class="data_in2" />
+							<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+							<input  name="we2"   num_pins="1"  port_class="write_en2"/>
+							<output name="out1"  num_pins="4"  port_class="data_out1"/>
+							<output name="out2"  num_pins="4"  port_class="data_out2"/>
+							<clock  name="clk"   num_pins="1"  port_class="clock"    />
+							<T_setup      value="0.480e-9" port="RAMB18E1_4096x4_dp.addr1" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_4096x4_dp.data1" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_4096x4_dp.we1"   clock="clk"/>
+							<T_setup      value="0.480e-9" port="RAMB18E1_4096x4_dp.addr2" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_4096x4_dp.data2" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_4096x4_dp.we2"   clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_4096x4_dp.out1"  clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_4096x4_dp.out2"  clock="clk"/>
+						</pb_type>
+						<pb_type name="DOA_REG" blif_model=".latch" num_pb="4" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+						</pb_type>
+						<pb_type name="DOB_REG" blif_model=".latch" num_pb="4" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+						</pb_type>
+						<interconnect>
+							<direct name="addr1" input="RAMB18E1.ADDRARDADDR[13:2]" output="RAMB18E1_4096x4_dp.addr1"         />
+							<direct name="addr2" input="RAMB18E1.ADDRBWRADDR[13:2]" output="RAMB18E1_4096x4_dp.addr2"         />
+							<direct name="data1"    input="RAMB18E1.DIADI[3:0]"        output="RAMB18E1_4096x4_dp.data1"         />
+							<direct name="data2"    input="RAMB18E1.DIBDI[3:0]"        output="RAMB18E1_4096x4_dp.data2"         />
+							<direct name="we1" input="RAMB18E1.WEA[0]"            output="RAMB18E1_4096x4_dp.we1"           />
+							<direct name="we2" input="RAMB18E1.WEBWE[0]"          output="RAMB18E1_4096x4_dp.we2"           />
+							<direct name="out1" input="RAMB18E1_4096x4_dp.out1"                output="RAMB18E1.DOADO[3:0]"  />
+							<direct name="out2" input="RAMB18E1_4096x4_dp.out2"                output="DOB_REG[3:0].D"                     />
+							<direct name="out2" input="DOB_REG[3:0].Q"                       output="RAMB18E1.DOBDO[3:0]"  />
+
+							<direct name="clk"      input="RAMB18E1.CLKARDCLK"         output="RAMB18E1_4096x4_dp.clk[0]"      />
+							<complete name="clk"    input="RAMB18E1.CLKARDCLK"         output="DOA_REG.clk DOB_REG.clk"      />
+						</interconnect>
+					</mode>
+					<mode name="RAMB18E1_4096x4_COMB_dp">
+						<pb_type name="RAMB18E1_4096x4_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+							<input  name="addr1" num_pins="12" port_class="addr1" />
+							<input  name="addr2" num_pins="12" port_class="addr2" />
+							<input  name="data1" num_pins="4"  port_class="data_in1" />
+							<input  name="data2" num_pins="4"  port_class="data_in2" />
+							<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+							<input  name="we2"   num_pins="1"  port_class="write_en2"/>
+							<output name="out1"  num_pins="4"  port_class="data_out1"/>
+							<output name="out2"  num_pins="4"  port_class="data_out2"/>
+							<clock  name="clk"   num_pins="1"  port_class="clock"    />
+							<T_setup      value="0.480e-9" port="RAMB18E1_4096x4_dp.addr1" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_4096x4_dp.data1" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_4096x4_dp.we1"   clock="clk"/>
+							<T_setup      value="0.480e-9" port="RAMB18E1_4096x4_dp.addr2" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_4096x4_dp.data2" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_4096x4_dp.we2"   clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_4096x4_dp.out1"  clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_4096x4_dp.out2"  clock="clk"/>
+						</pb_type>
+						<pb_type name="DOA_REG" blif_model=".latch" num_pb="4" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+						</pb_type>
+						<pb_type name="DOB_REG" blif_model=".latch" num_pb="4" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+						</pb_type>
+						<interconnect>
+							<direct name="addr1" input="RAMB18E1.ADDRARDADDR[13:2]" output="RAMB18E1_4096x4_dp.addr1"       />
+							<direct name="addr2" input="RAMB18E1.ADDRBWRADDR[13:2]" output="RAMB18E1_4096x4_dp.addr2"       />
+							<direct name="data1"    input="RAMB18E1.DIADI[3:0]"        output="RAMB18E1_4096x4_dp.data1"       />
+							<direct name="data2"    input="RAMB18E1.DIBDI[3:0]"        output="RAMB18E1_4096x4_dp.data2"       />
+							<direct name="we1" input="RAMB18E1.WEA[0]"            output="RAMB18E1_4096x4_dp.we1"         />
+							<direct name="we2" input="RAMB18E1.WEBWE[0]"          output="RAMB18E1_4096x4_dp.we2"         />
+							<direct name="out1" input="RAMB18E1_4096x4_dp.out1"                output="RAMB18E1.DOADO[3:0]"/>
+							<direct name="out2" input="RAMB18E1_4096x4_dp.out2"                output="RAMB18E1.DOBDO[3:0]"/>
+
+							<direct name="clk"      input="RAMB18E1.CLKARDCLK"         output="RAMB18E1_4096x4_dp.clk[0]"      />
+							<complete name="clk"    input="RAMB18E1.CLKARDCLK"         output="DOA_REG.clk DOB_REG.clk"      />
+						</interconnect>
+					</mode>
+					<mode name="RAMB18E1_8192x2_REGAB_dp">
+						<pb_type name="RAMB18E1_8192x2_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+							<input  name="addr1" num_pins="13" port_class="addr1" />
+							<input  name="addr2" num_pins="13" port_class="addr2" />
+							<input  name="data1" num_pins="2"  port_class="data_in1" />
+							<input  name="data2" num_pins="2"  port_class="data_in2" />
+							<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+							<input  name="we2"   num_pins="1"  port_class="write_en2"/>
+							<output name="out1"  num_pins="2"  port_class="data_out1"/>
+							<output name="out2"  num_pins="2"  port_class="data_out2"/>
+							<clock  name="clk"   num_pins="1"  port_class="clock"    />
+							<T_setup      value="0.480e-9" port="RAMB18E1_8192x2_dp.addr1" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_8192x2_dp.data1" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_8192x2_dp.we1"   clock="clk"/>
+							<T_setup      value="0.480e-9" port="RAMB18E1_8192x2_dp.addr2" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_8192x2_dp.data2" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_8192x2_dp.we2"   clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"  port="RAMB18E1_8192x2_dp.out1"  clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"  port="RAMB18E1_8192x2_dp.out2"  clock="clk"/>
+						</pb_type>
+						<pb_type name="DOA_REG" blif_model=".latch" num_pb="2" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+						</pb_type>
+						<pb_type name="DOB_REG" blif_model=".latch" num_pb="2" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+						</pb_type>
+						<interconnect>
+							<direct   name="addr1" input="RAMB18E1.ADDRARDADDR[13:1]" output="RAMB18E1_8192x2_dp.addr1"       />
+							<direct   name="addr2" input="RAMB18E1.ADDRBWRADDR[13:1]" output="RAMB18E1_8192x2_dp.addr2"       />
+							<direct   name="data1"    input="RAMB18E1.DIADI[1:0]"        output="RAMB18E1_8192x2_dp.data1"       />
+							<direct   name="data2"    input="RAMB18E1.DIBDI[1:0]"        output="RAMB18E1_8192x2_dp.data2"       />
+							<direct   name="we1" input="RAMB18E1.WEA[0]"            output="RAMB18E1_8192x2_dp.we1"         />
+							<direct   name="we2" input="RAMB18E1.WEBWE[0]"          output="RAMB18E1_8192x2_dp.we2"         />
+							<direct   name="out1" input="RAMB18E1_8192x2_dp.out1"                output="DOA_REG[1:0].D"               />
+							<direct   name="out1" input="DOA_REG[1:0].Q"                       output="RAMB18E1.DOADO[1:0]"/>
+							<direct   name="out2" input="RAMB18E1_8192x2_dp.out2"                output="DOB_REG[1:0].D"               />
+							<direct   name="out2" input="DOB_REG[1:0].Q"                       output="RAMB18E1.DOBDO[1:0]"/>
+
+							<direct   name="clk"      input="RAMB18E1.CLKARDCLK"         output="RAMB18E1_8192x2_dp.clk[0]"      />
+							<complete name="clk"      input="RAMB18E1.CLKARDCLK"         output="DOA_REG.clk DOB_REG.clk"      />
+						</interconnect>
+					</mode>
+					<mode name="RAMB18E1_8192x2_REGA_dp">
+						<pb_type name="RAMB18E1_8192x2_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+							<input  name="addr1" num_pins="13" port_class="addr1" />
+							<input  name="addr2" num_pins="13" port_class="addr2" />
+							<input  name="data1" num_pins="2"  port_class="data_in1" />
+							<input  name="data2" num_pins="2"  port_class="data_in2" />
+							<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+							<input  name="we2"   num_pins="1"  port_class="write_en2"/>
+							<output name="out1"  num_pins="2"  port_class="data_out1"/>
+							<output name="out2"  num_pins="2"  port_class="data_out2"/>
+							<clock  name="clk"   num_pins="1"  port_class="clock"    />
+							<T_setup      value="0.480e-9" port="RAMB18E1_8192x2_dp.addr1" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_8192x2_dp.data1" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_8192x2_dp.we1"   clock="clk"/>
+							<T_setup      value="0.480e-9" port="RAMB18E1_8192x2_dp.addr2" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_8192x2_dp.data2" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_8192x2_dp.we2"   clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"  port="RAMB18E1_8192x2_dp.out1"  clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"  port="RAMB18E1_8192x2_dp.out2"  clock="clk"/>
+						</pb_type>
+						<pb_type name="DOA_REG" blif_model=".latch" num_pb="2" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+						</pb_type>
+						<pb_type name="DOB_REG" blif_model=".latch" num_pb="2" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+						</pb_type>
+						<interconnect>
+							<direct   name="addr1" input="RAMB18E1.ADDRARDADDR[13:1]" output="RAMB18E1_8192x2_dp.addr1"       />
+							<direct   name="addr2" input="RAMB18E1.ADDRBWRADDR[13:1]" output="RAMB18E1_8192x2_dp.addr2"       />
+							<direct   name="data1"    input="RAMB18E1.DIADI[1:0]"        output="RAMB18E1_8192x2_dp.data1"       />
+							<direct   name="data2"    input="RAMB18E1.DIBDI[1:0]"        output="RAMB18E1_8192x2_dp.data2"       />
+							<direct   name="we1" input="RAMB18E1.WEA[0]"            output="RAMB18E1_8192x2_dp.we1"         />
+							<direct   name="we2" input="RAMB18E1.WEBWE[0]"          output="RAMB18E1_8192x2_dp.we2"         />
+							<direct   name="out1" input="RAMB18E1_8192x2_dp.out1"                output="DOA_REG[1:0].D"               />
+							<direct   name="out1" input="DOA_REG[1:0].Q"                       output="RAMB18E1.DOADO[1:0]" >
+								<!--pack_pattern name="RAMB18E1_8192x2_dp_DOA" in_port="RAMB18E1_8192x2_dp.out1" out_port="DOA_REG.D"/-->
+							</direct>
+							<direct   name="out2" input="RAMB18E1_8192x2_dp.out2"                output="RAMB18E1.DOBDO[1:0]"/>
+
+							<direct   name="clk"      input="RAMB18E1.CLKARDCLK"         output="RAMB18E1_8192x2_dp.clk[0]"      />
+							<complete name="clk"      input="RAMB18E1.CLKARDCLK"         output="DOA_REG.clk DOB_REG.clk"      />
+						</interconnect>
+					</mode>
+					<mode name="RAMB18E1_8192x2_REGB_dp">
+						<pb_type name="RAMB18E1_8192x2_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+							<input  name="addr1" num_pins="13" port_class="addr1" />
+							<input  name="addr2" num_pins="13" port_class="addr2" />
+							<input  name="data1" num_pins="2"  port_class="data_in1" />
+							<input  name="data2" num_pins="2"  port_class="data_in2" />
+							<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+							<input  name="we2"   num_pins="1"  port_class="write_en2"/>
+							<output name="out1"  num_pins="2"  port_class="data_out1"/>
+							<output name="out2"  num_pins="2"  port_class="data_out2"/>
+							<clock  name="clk"   num_pins="1"  port_class="clock"    />
+							<T_setup      value="0.480e-9" port="RAMB18E1_8192x2_dp.addr1" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_8192x2_dp.data1" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_8192x2_dp.we1"   clock="clk"/>
+							<T_setup      value="0.480e-9" port="RAMB18E1_8192x2_dp.addr2" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_8192x2_dp.data2" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_8192x2_dp.we2"   clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"  port="RAMB18E1_8192x2_dp.out1"  clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"  port="RAMB18E1_8192x2_dp.out2"  clock="clk"/>
+						</pb_type>
+						<pb_type name="DOA_REG" blif_model=".latch" num_pb="2" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+						</pb_type>
+						<pb_type name="DOB_REG" blif_model=".latch" num_pb="2" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+						</pb_type>
+						<interconnect>
+							<direct   name="addr1" input="RAMB18E1.ADDRARDADDR[13:1]" output="RAMB18E1_8192x2_dp.addr1"       />
+							<direct   name="addr2" input="RAMB18E1.ADDRBWRADDR[13:1]" output="RAMB18E1_8192x2_dp.addr2"       />
+							<direct   name="data1"    input="RAMB18E1.DIADI[1:0]"        output="RAMB18E1_8192x2_dp.data1"       />
+							<direct   name="data2"    input="RAMB18E1.DIBDI[1:0]"        output="RAMB18E1_8192x2_dp.data2"       />
+							<direct   name="we1" input="RAMB18E1.WEA[0]"            output="RAMB18E1_8192x2_dp.we1"         />
+							<direct   name="we2" input="RAMB18E1.WEBWE[0]"          output="RAMB18E1_8192x2_dp.we2"         />
+							<direct   name="out1" input="RAMB18E1_8192x2_dp.out1"                output="RAMB18E1.DOADO[1:0]"/>
+							<direct   name="out2" input="RAMB18E1_8192x2_dp.out2"                output="DOB_REG[1:0].D"               />
+							<direct   name="out2" input="DOB_REG[1:0].Q"                       output="RAMB18E1.DOBDO[1:0]"/>
+
+							<direct   name="clk"      input="RAMB18E1.CLKARDCLK"         output="RAMB18E1_8192x2_dp.clk[0]"      />
+							<complete name="clk"      input="RAMB18E1.CLKARDCLK"         output="DOA_REG.clk DOB_REG.clk"      />
+						</interconnect>
+					</mode>
+					<mode name="RAMB18E1_8192x2_COMB_dp">
+						<pb_type name="RAMB18E1_8192x2_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+							<input  name="addr1" num_pins="13" port_class="addr1" />
+							<input  name="addr2" num_pins="13" port_class="addr2" />
+							<input  name="data1" num_pins="2"  port_class="data_in1" />
+							<input  name="data2" num_pins="2"  port_class="data_in2" />
+							<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+							<input  name="we2"   num_pins="1"  port_class="write_en2"/>
+							<output name="out1"  num_pins="2"  port_class="data_out1"/>
+							<output name="out2"  num_pins="2"  port_class="data_out2"/>
+							<clock  name="clk"   num_pins="1"  port_class="clock"    />
+							<T_setup      value="0.480e-9" port="RAMB18E1_8192x2_dp.addr1" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_8192x2_dp.data1" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_8192x2_dp.we1"   clock="clk"/>
+							<T_setup      value="0.480e-9" port="RAMB18E1_8192x2_dp.addr2" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_8192x2_dp.data2" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_8192x2_dp.we2"   clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"  port="RAMB18E1_8192x2_dp.out1"  clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"  port="RAMB18E1_8192x2_dp.out2"  clock="clk"/>
+						</pb_type>
+						<pb_type name="DOA_REG" blif_model=".latch" num_pb="2" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+						</pb_type>
+						<pb_type name="DOB_REG" blif_model=".latch" num_pb="2" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+						</pb_type>
+						<interconnect>
+							<direct   name="addr1" input="RAMB18E1.ADDRARDADDR[13:1]" output="RAMB18E1_8192x2_dp.addr1"       />
+							<direct   name="addr2" input="RAMB18E1.ADDRBWRADDR[13:1]" output="RAMB18E1_8192x2_dp.addr2"       />
+							<direct   name="data1"    input="RAMB18E1.DIADI[1:0]"        output="RAMB18E1_8192x2_dp.data1"       />
+							<direct   name="data2"    input="RAMB18E1.DIBDI[1:0]"        output="RAMB18E1_8192x2_dp.data2"       />
+							<direct   name="we1" input="RAMB18E1.WEA[0]"            output="RAMB18E1_8192x2_dp.we1"         />
+							<direct   name="we2" input="RAMB18E1.WEBWE[0]"          output="RAMB18E1_8192x2_dp.we2"         />
+							<direct   name="out1" input="RAMB18E1_8192x2_dp.out1"                output="RAMB18E1.DOADO[1:0]"/>
+							<direct   name="out2" input="RAMB18E1_8192x2_dp.out2"                output="RAMB18E1.DOBDO[1:0]"/>
+
+							<direct   name="clk"      input="RAMB18E1.CLKARDCLK"         output="RAMB18E1_8192x2_dp.clk[0]"      />
+							<complete name="clk"      input="RAMB18E1.CLKARDCLK"         output="DOA_REG.clk DOB_REG.clk"      />
+						</interconnect>
+					</mode>
+					<mode name="RAMB18E1_16384x1_REGAB_dp">
+						<pb_type name="RAMB18E1_16384x1_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+							<input  name="addr1" num_pins="14" port_class="addr1" />
+							<input  name="addr2" num_pins="14" port_class="addr2" />
+							<input  name="data1" num_pins="1"  port_class="data_in1" />
+							<input  name="data2" num_pins="1"  port_class="data_in2" />
+							<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+							<input  name="we2"   num_pins="1"  port_class="write_en2"/>
+							<output name="out1"  num_pins="1"  port_class="data_out1"/>
+							<output name="out2"  num_pins="1"  port_class="data_out2"/>
+							<clock  name="clk"   num_pins="1"  port_class="clock"    />
+							<T_setup      value="0.480e-9" port="RAMB18E1_16384x1_dp.addr1" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_16384x1_dp.data1" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_16384x1_dp.we1"   clock="clk"/>
+							<T_setup      value="0.480e-9" port="RAMB18E1_16384x1_dp.addr2" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_16384x1_dp.data2" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_16384x1_dp.we2"   clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_16384x1_dp.out1"  clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_16384x1_dp.out2"  clock="clk"/>
+						</pb_type>
+						<pb_type name="DOA_REG" blif_model=".latch" num_pb="1" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+						</pb_type>
+						<pb_type name="DOB_REG" blif_model=".latch" num_pb="1" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+						</pb_type>
+						<interconnect>
+							<direct name="addr1" input="RAMB18E1.ADDRARDADDR" output="RAMB18E1_16384x1_dp.addr1"    />
+							<direct name="addr2" input="RAMB18E1.ADDRBWRADDR" output="RAMB18E1_16384x1_dp.addr2"    />
+							<direct name="data1"    input="RAMB18E1.DIADI[0]"    output="RAMB18E1_16384x1_dp.data1"    />
+							<direct name="data2"    input="RAMB18E1.DIBDI[0]"    output="RAMB18E1_16384x1_dp.data2"    />
+							<direct name="we1" input="RAMB18E1.WEA[0]"      output="RAMB18E1_16384x1_dp.we1"      />
+							<direct name="we2" input="RAMB18E1.WEBWE[0]"    output="RAMB18E1_16384x1_dp.we2"      />
+							<direct name="out1" input="RAMB18E1_16384x1_dp.out1"         output="DOA_REG[0].D"               />
+							<direct name="out1" input="DOA_REG[0].Q"                   output="RAMB18E1.DOADO[0]"/>
+							<direct name="out2" input="RAMB18E1_16384x1_dp.out2"         output="DOB_REG[0].D"               />
+							<direct name="out2" input="DOB_REG[0].Q"                   output="RAMB18E1.DOBDO[0]"/>
+							
+							<direct name="clk"      input="RAMB18E1.CLKARDCLK"   output="RAMB18E1_16384x1_dp.clk[0]"   />
+							<complete name="clk"    input="RAMB18E1.CLKARDCLK"   output="DOA_REG.clk DOB_REG.clk"    />
+						</interconnect>
+					</mode>
+					<mode name="RAMB18E1_16384x1_REGA_dp">
+						<pb_type name="RAMB18E1_16384x1_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+							<input  name="addr1" num_pins="14" port_class="addr1" />
+							<input  name="addr2" num_pins="14" port_class="addr2" />
+							<input  name="data1" num_pins="1"  port_class="data_in1" />
+							<input  name="data2" num_pins="1"  port_class="data_in2" />
+							<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+							<input  name="we2"   num_pins="1"  port_class="write_en2"/>
+							<output name="out1"  num_pins="1"  port_class="data_out1"/>
+							<output name="out2"  num_pins="1"  port_class="data_out2"/>
+							<clock  name="clk"   num_pins="1"  port_class="clock"    />
+							<T_setup      value="0.480e-9" port="RAMB18E1_16384x1_dp.addr1" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_16384x1_dp.data1" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_16384x1_dp.we1"   clock="clk"/>
+							<T_setup      value="0.480e-9" port="RAMB18E1_16384x1_dp.addr2" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_16384x1_dp.data2" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_16384x1_dp.we2"   clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_16384x1_dp.out1"  clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_16384x1_dp.out2"  clock="clk"/>
+						</pb_type>
+						<pb_type name="DOA_REG" blif_model=".latch" num_pb="1" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+						</pb_type>
+						<pb_type name="DOB_REG" blif_model=".latch" num_pb="1" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+						</pb_type>
+						<interconnect>
+							<direct name="addr1" input="RAMB18E1.ADDRARDADDR" output="RAMB18E1_16384x1_dp.addr1"    />
+							<direct name="addr2" input="RAMB18E1.ADDRBWRADDR" output="RAMB18E1_16384x1_dp.addr2"    />
+							<direct name="data1"    input="RAMB18E1.DIADI[0]"    output="RAMB18E1_16384x1_dp.data1"    />
+							<direct name="data2"    input="RAMB18E1.DIBDI[0]"    output="RAMB18E1_16384x1_dp.data2"    />
+							<direct name="we1" input="RAMB18E1.WEA[0]"      output="RAMB18E1_16384x1_dp.we1"      />
+							<direct name="we2" input="RAMB18E1.WEBWE[0]"    output="RAMB18E1_16384x1_dp.we2"      />
+							<direct name="out1" input="RAMB18E1_16384x1_dp.out1"         output="DOA_REG[0].D"                >
+								<!--pack_pattern name="RAMB18E1_16384x2_dp_DOA" in_port="RAMB18E1_16384x1_dp.out1" out_port="DOA_REG.D"/-->
+							</direct>
+							<direct name="out1" input="DOA_REG[0].Q"                   output="RAMB18E1.DOADO[0]"/>
+							<direct name="out2" input="RAMB18E1_16384x1_dp.out2"         output="RAMB18E1.DOBDO[0]"/>
+							
+							<direct name="clk"      input="RAMB18E1.CLKARDCLK"   output="RAMB18E1_16384x1_dp.clk[0]"   />
+							<complete name="clk"    input="RAMB18E1.CLKARDCLK"   output="DOA_REG.clk DOB_REG.clk"    />
+						</interconnect>
+					</mode>
+					<mode name="RAMB18E1_16384x1_REGB_dp">
+						<pb_type name="RAMB18E1_16384x1_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+							<input  name="addr1" num_pins="14" port_class="addr1" />
+							<input  name="addr2" num_pins="14" port_class="addr2" />
+							<input  name="data1" num_pins="1"  port_class="data_in1" />
+							<input  name="data2" num_pins="1"  port_class="data_in2" />
+							<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+							<input  name="we2"   num_pins="1"  port_class="write_en2"/>
+							<output name="out1"  num_pins="1"  port_class="data_out1"/>
+							<output name="out2"  num_pins="1"  port_class="data_out2"/>
+							<clock  name="clk"   num_pins="1"  port_class="clock"    />
+							<T_setup      value="0.480e-9" port="RAMB18E1_16384x1_dp.addr1" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_16384x1_dp.data1" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_16384x1_dp.we1"   clock="clk"/>
+							<T_setup      value="0.480e-9" port="RAMB18E1_16384x1_dp.addr2" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_16384x1_dp.data2" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_16384x1_dp.we2"   clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_16384x1_dp.out1"  clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_16384x1_dp.out2"  clock="clk"/>
+						</pb_type>
+						<pb_type name="DOA_REG" blif_model=".latch" num_pb="1" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+						</pb_type>
+						<pb_type name="DOB_REG" blif_model=".latch" num_pb="1" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+						</pb_type>
+						<interconnect>
+							<direct name="addr1" input="RAMB18E1.ADDRARDADDR" output="RAMB18E1_16384x1_dp.addr1"    />
+							<direct name="addr2" input="RAMB18E1.ADDRBWRADDR" output="RAMB18E1_16384x1_dp.addr2"    />
+							<direct name="data1"    input="RAMB18E1.DIADI[0]"    output="RAMB18E1_16384x1_dp.data1"    />
+							<direct name="data2"    input="RAMB18E1.DIBDI[0]"    output="RAMB18E1_16384x1_dp.data2"    />
+							<direct name="we1" input="RAMB18E1.WEA[0]"      output="RAMB18E1_16384x1_dp.we1"      />
+							<direct name="we2" input="RAMB18E1.WEBWE[0]"    output="RAMB18E1_16384x1_dp.we2"      />
+							<direct name="out1" input="RAMB18E1_16384x1_dp.out1"         output="RAMB18E1.DOADO[0]"/>
+							<direct name="out2" input="RAMB18E1_16384x1_dp.out2"         output="DOB_REG[0].D"               />
+							<direct name="out2" input="DOB_REG[0].Q"                   output="RAMB18E1.DOBDO[0]"/>
+							
+							<direct name="clk"      input="RAMB18E1.CLKARDCLK"   output="RAMB18E1_16384x1_dp.clk[0]"   />
+							<complete name="clk"    input="RAMB18E1.CLKARDCLK"   output="DOA_REG.clk DOB_REG.clk"    />
+						</interconnect>
+					</mode>
+					<mode name="RAMB18E1_16384x1_COMB_dp">
+						<pb_type name="RAMB18E1_16384x1_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+							<input  name="addr1" num_pins="14" port_class="addr1" />
+							<input  name="addr2" num_pins="14" port_class="addr2" />
+							<input  name="data1" num_pins="1"  port_class="data_in1" />
+							<input  name="data2" num_pins="1"  port_class="data_in2" />
+							<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+							<input  name="we2"   num_pins="1"  port_class="write_en2"/>
+							<output name="out1"  num_pins="1"  port_class="data_out1"/>
+							<output name="out2"  num_pins="1"  port_class="data_out2"/>
+							<clock  name="clk"   num_pins="1"  port_class="clock"    />
+							<T_setup      value="0.480e-9" port="RAMB18E1_16384x1_dp.addr1" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_16384x1_dp.data1" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_16384x1_dp.we1"   clock="clk"/>
+							<T_setup      value="0.480e-9" port="RAMB18E1_16384x1_dp.addr2" clock="clk"/>
+							<T_setup      value="0.707e-9" port="RAMB18E1_16384x1_dp.data2" clock="clk"/>
+							<T_setup      value="0.515e-9" port="RAMB18E1_16384x1_dp.we2"   clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_16384x1_dp.out1"  clock="clk"/>
+							<T_clock_to_Q max="2.073e-9"   port="RAMB18E1_16384x1_dp.out2"  clock="clk"/>
+						</pb_type>
+						<pb_type name="DOA_REG" blif_model=".latch" num_pb="1" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+						</pb_type>
+						<pb_type name="DOB_REG" blif_model=".latch" num_pb="1" class="flipflop">
+							<input  name="D"   num_pins="1" port_class="D"    />
+							<output name="Q"   num_pins="1" port_class="Q"    />
+							<clock  name="clk" num_pins="1" port_class="clock"/>
+							<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+						</pb_type>
+						<interconnect>
+							<direct name="addr1" input="RAMB18E1.ADDRARDADDR" output="RAMB18E1_16384x1_dp.addr1"    />
+							<direct name="addr2" input="RAMB18E1.ADDRBWRADDR" output="RAMB18E1_16384x1_dp.addr2"    />
+							<direct name="data1"    input="RAMB18E1.DIADI[0]"    output="RAMB18E1_16384x1_dp.data1"    />
+							<direct name="data2"    input="RAMB18E1.DIBDI[0]"    output="RAMB18E1_16384x1_dp.data2"    />
+							<direct name="we1" input="RAMB18E1.WEA[0]"      output="RAMB18E1_16384x1_dp.we1"      />
+							<direct name="we2" input="RAMB18E1.WEBWE[0]"    output="RAMB18E1_16384x1_dp.we2"      />
+							<direct name="out1" input="RAMB18E1_16384x1_dp.out1"         output="RAMB18E1.DOADO[0]"/>
+							<direct name="out2" input="RAMB18E1_16384x1_dp.out2"         output="RAMB18E1.DOBDO[0]"/>
+							
+							<direct name="clk"      input="RAMB18E1.CLKARDCLK"   output="RAMB18E1_16384x1_dp.clk[0]"   />
+							<complete name="clk"    input="RAMB18E1.CLKARDCLK"   output="DOA_REG.clk DOB_REG.clk"    />
+						</interconnect>
+					</mode>
+				</pb_type> 
+				<interconnect>
+					<direct name="addr1" input="RAMB36E1.s0_ADDRARDADDR" output="RAMB18E1[0].ADDRARDADDR"/>
+					<direct name="addr2" input="RAMB36E1.s0_ADDRBWRADDR" output="RAMB18E1[0].ADDRBWRADDR"/>
+					<direct name="data1" input="RAMB36E1.s0_DIADI"       output="RAMB18E1[0].DIADI"      />
+					<direct name="data2" input="RAMB36E1.s0_DIBDI"       output="RAMB18E1[0].DIBDI"      />
+					<direct name="data1" input="RAMB36E1.s0_DIPADIP"     output="RAMB18E1[0].DIPADIP"    />
+					<direct name="data2" input="RAMB36E1.s0_DIPBDIP"     output="RAMB18E1[0].DIPBDIP"    />
+					<direct name="we1"   input="RAMB36E1.s0_WEA"         output="RAMB18E1[0].WEA"        />
+					<direct name="we2"   input="RAMB36E1.s0_WEBWE"       output="RAMB18E1[0].WEBWE"      />
+					<direct name="out1"  input="RAMB18E1[0].DOADO"      output="RAMB36E1.s0_DOADO"         />
+					<direct name="out1p" input="RAMB18E1[0].DOPADOP"    output="RAMB36E1.s0_DOPADOP"       />
+					<direct name="out2"  input="RAMB18E1[0].DOBDO"      output="RAMB36E1.s0_DOBDO"         />
+					<direct name="out2p" input="RAMB18E1[0].DOPBDOP"    output="RAMB36E1.s0_DOPBDOP"       />
+					<direct name="clk"   input="RAMB36E1.s0_CLKARDCLK"   output="RAMB18E1[0].CLKARDCLK"  />
+					<direct name="clk"   input="RAMB36E1.s0_CLKBWRCLK"   output="RAMB18E1[0].CLKBWRCLK"  />
+
+					<direct name="addr1" input="RAMB36E1.s1_ADDRARDADDR" output="RAMB18E1[1].ADDRARDADDR"/>
+					<direct name="addr2" input="RAMB36E1.s1_ADDRBWRADDR" output="RAMB18E1[1].ADDRBWRADDR"/>
+					<direct name="data1" input="RAMB36E1.s1_DIADI"       output="RAMB18E1[1].DIADI"      />
+					<direct name="data2" input="RAMB36E1.s1_DIBDI"       output="RAMB18E1[1].DIBDI"      />
+					<direct name="data1" input="RAMB36E1.s1_DIPADIP"     output="RAMB18E1[1].DIPADIP"    />
+					<direct name="data2" input="RAMB36E1.s1_DIPBDIP"     output="RAMB18E1[1].DIPBDIP"    />
+					<direct name="we1"   input="RAMB36E1.s1_WEA"         output="RAMB18E1[1].WEA"        />
+					<direct name="we2"   input="RAMB36E1.s1_WEBWE"       output="RAMB18E1[1].WEBWE"      />
+					<direct name="out1"  input="RAMB18E1[1].DOADO"      output="RAMB36E1.s1_DOADO"         />
+					<direct name="out1p" input="RAMB18E1[1].DOPADOP"    output="RAMB36E1.s1_DOPADOP"       />
+					<direct name="out2"  input="RAMB18E1[1].DOBDO"      output="RAMB36E1.s1_DOBDO"         />
+					<direct name="out2p" input="RAMB18E1[1].DOPBDOP"    output="RAMB36E1.s1_DOPBDOP"       />
+					<direct name="clk"   input="RAMB36E1.s1_CLKARDCLK"   output="RAMB18E1[1].CLKARDCLK"  />
+					<direct name="clk"   input="RAMB36E1.s1_CLKBWRCLK"   output="RAMB18E1[1].CLKBWRCLK"  />
+				</interconnect>
+			</mode>
+			<!-- RAMB36E1 -->
+			<mode name="RAMB36E1_512x72_REGB_sp">
+				<pb_type name="RAMB36E1_512x72_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
+					<input  name="addr" num_pins="9"  port_class="address" />
+					<input  name="data" num_pins="72" port_class="data_in" />
+					<input  name="we"   num_pins="1"  port_class="write_en"/>
+					<output name="out"  num_pins="72" port_class="data_out"/>
+					<clock  name="clk"  num_pins="1"  port_class="clock"   />
+					<T_setup      value="0.480e-9" port="RAMB36E1_512x72_sp.addr" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_512x72_sp.data" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_512x72_sp.we"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_512x72_sp.out"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr"  input="RAMB36E1.ADDRBWRADDRL[14:6]" output="RAMB36E1_512x72_sp.addr"           />
+					<direct name="data"     input="RAMB36E1.DIADI[31:0]"       output="RAMB36E1_512x72_sp.data[31:0]"     />
+					<direct name="data"     input="RAMB36E1.DIBDI[31:0]"       output="RAMB36E1_512x72_sp.data[63:32]"    />
+					<direct name="data"    input="RAMB36E1.DIPADIP[3:0]"      output="RAMB36E1_512x72_sp.data[67:64]"    />
+					<direct name="data"    input="RAMB36E1.DIPBDIP[3:0]"      output="RAMB36E1_512x72_sp.data[71:68]"    />
+					<direct name="out"  input="RAMB36E1_512x72_sp.out[31:0]"                  output="DOA_REG[31:0].D"                  />
+					<direct name="out"  input="RAMB36E1_512x72_sp.out[63:32]"                 output="DOB_REG[31:0].D"                 />
+					<direct name="out"  input="RAMB36E1_512x72_sp.out[67:64]"                 output="DOA_REG[35:32].D"                  />
+					<direct name="out"  input="RAMB36E1_512x72_sp.out[71:68]"                 output="DOB_REG[35:32].D"                  />
+					<direct name="out"  input="DOA_REG[31:0].Q"                       output="RAMB36E1.DOADO[31:0]" />
+					<direct name="out"  input="DOB_REG[31:0].Q"                      output="RAMB36E1.DOBDO[31:0]" />
+					<direct name="outp" input="DOA_REG[35:32].Q"                      output="RAMB36E1.DOPADOP[3:0]"/>
+					<direct name="outp" input="DOB_REG[35:32].Q"                      output="RAMB36E1.DOPBDOP[3:0]"/>
+
+					<direct name="clk"       input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_512x72_sp.clk[0]"         />
+					<complete name="clk"     input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"         />
+				</interconnect>
+			</mode>
+			<mode name="RAMB36E1_512x72_COMB_sp">
+				<pb_type name="RAMB36E1_512x72_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
+					<input  name="addr" num_pins="9"  port_class="address" />
+					<input  name="data" num_pins="72" port_class="data_in" />
+					<input  name="we"   num_pins="1"  port_class="write_en"/>
+					<output name="out"  num_pins="72" port_class="data_out"/>
+					<clock  name="clk"  num_pins="1"  port_class="clock"   />
+					<T_setup      value="0.480e-9" port="RAMB36E1_512x72_sp.addr" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_512x72_sp.data" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_512x72_sp.we"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_512x72_sp.out"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr"  input="RAMB36E1.ADDRBWRADDRL[14:6]" output="RAMB36E1_512x72_sp.addr"           />
+					<direct name="data"     input="RAMB36E1.DIADI[31:0]"       output="RAMB36E1_512x72_sp.data[31:0]"     />
+					<direct name="data"     input="RAMB36E1.DIBDI[31:0]"       output="RAMB36E1_512x72_sp.data[63:32]"    />
+					<direct name="data"    input="RAMB36E1.DIPADIP[3:0]"      output="RAMB36E1_512x72_sp.data[67:64]"    />
+					<direct name="data"    input="RAMB36E1.DIPBDIP[3:0]"      output="RAMB36E1_512x72_sp.data[71:68]"    />
+					<direct name="out"  input="RAMB36E1_512x72_sp.out[31:0]"            output="RAMB36E1.DOADO[31:0]" />
+					<direct name="out"  input="RAMB36E1_512x72_sp.out[63:32]"           output="RAMB36E1.DOBDO[31:0]" />
+					<direct name="outp" input="RAMB36E1_512x72_sp.out[67:64]"           output="RAMB36E1.DOPADOP[3:0]"/>
+					<direct name="outp" input="RAMB36E1_512x72_sp.out[71:68]"           output="RAMB36E1.DOPBDOP[3:0]"/>
+
+					<direct name="clk"       input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_512x72_sp.clk[0]"         />
+					<complete name="clk"     input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"         />
+				</interconnect>
+			</mode>
+			<mode name="RAMB36E1_1024x36_REGB_sp">
+				<pb_type name="RAMB36E1_1024x36_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
+					<input  name="addr" num_pins="10" port_class="address" />
+					<input  name="data" num_pins="36" port_class="data_in" />
+					<input  name="we"   num_pins="1"  port_class="write_en"/>
+					<output name="out"  num_pins="36" port_class="data_out"/>
+					<clock  name="clk"  num_pins="1"  port_class="clock"   />
+					<T_setup      value="0.480e-9" port="RAMB36E1_1024x36_sp.addr" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_1024x36_sp.data" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_1024x36_sp.we"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_1024x36_sp.out"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr"  input="RAMB36E1.ADDRBWRADDRL[14:5]" output="RAMB36E1_1024x36_sp.addr"          />
+					<direct name="data"     input="RAMB36E1.DIBDI[31:0]"       output="RAMB36E1_1024x36_sp.data[31:0]"    />
+					<direct name="datap"     input="RAMB36E1.DIPBDIP[3:0]"       output="RAMB36E1_1024x36_sp.data[35:32]"    />
+					<direct name="we"  input="RAMB36E1.WEBWEL[0]"          output="RAMB36E1_1024x36_sp.we"            />
+					<direct name="out"  input="RAMB36E1_1024x36_sp.out[31:0]"           output="DOB_REG[31:0].D"                 />
+					<direct name="outp" input="RAMB36E1_1024x36_sp.out[35:32]"          output="DOB_REG[35:32].D"                />
+					<direct name="out"  input="DOB_REG[31:0].Q"                       output="RAMB36E1.DOBDO[31:0]" />
+					<direct name="outp" input="DOB_REG[35:32].Q"                      output="RAMB36E1.DOPBDOP[3:0]"/>
+
+					<direct name="clk"       input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_1024x36_sp.clk[0]"        />
+					<complete name="clk"     input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"         />
+				</interconnect>
+			</mode>
+			<mode name="RAMB36E1_1024x36_COMB_sp">
+				<pb_type name="RAMB36E1_1024x36_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
+					<input  name="addr" num_pins="10" port_class="address" />
+					<input  name="data" num_pins="36" port_class="data_in" />
+					<input  name="we"   num_pins="1"  port_class="write_en"/>
+					<output name="out"  num_pins="36" port_class="data_out"/>
+					<clock  name="clk"  num_pins="1"  port_class="clock"   />
+					<T_setup      value="0.480e-9" port="RAMB36E1_1024x36_sp.addr" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_1024x36_sp.data" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_1024x36_sp.we"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_1024x36_sp.out"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr"  input="RAMB36E1.ADDRBWRADDRL[14:5]" output="RAMB36E1_1024x36_sp.addr"          />
+					<direct name="data"     input="RAMB36E1.DIBDI[31:0]"       output="RAMB36E1_1024x36_sp.data[31:0]"    />
+					<direct name="datap"     input="RAMB36E1.DIPBDIP[3:0]"       output="RAMB36E1_1024x36_sp.data[35:32]"    />
+					<direct name="we"  input="RAMB36E1.WEBWEL[0]"          output="RAMB36E1_1024x36_sp.we"            />
+					<direct name="out"  input="RAMB36E1_1024x36_sp.out[31:0]"           output="RAMB36E1.DOBDO[31:0]" />
+					<direct name="outp" input="RAMB36E1_1024x36_sp.out[35:32]"          output="RAMB36E1.DOPBDOP[3:0]"/>
+
+					<direct name="clk"       input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_1024x36_sp.clk[0]"        />
+					<complete name="clk"     input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"         />
+				</interconnect>
+			</mode>
+			<mode name="RAMB36E1_2048x18_REGB_sp">
+				<pb_type name="RAMB36E1_2048x18_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
+					<input  name="addr" num_pins="11" port_class="address" />
+					<input  name="data" num_pins="18" port_class="data_in" />
+					<input  name="we"   num_pins="1"  port_class="write_en"/>
+					<output name="out"  num_pins="18" port_class="data_out"/>
+					<clock  name="clk"  num_pins="1"  port_class="clock"   />
+					<T_setup      value="0.480e-9" port="RAMB36E1_2048x18_sp.addr" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_2048x18_sp.data" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_2048x18_sp.we"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_2048x18_sp.out"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr"  input="RAMB36E1.ADDRBWRADDRL[14:4]" output="RAMB36E1_2048x18_sp.addr"        />
+					<direct name="data"     input="RAMB36E1.DIBDI[15:0]"        output="RAMB36E1_2048x18_sp.data[15:0]"   />
+					<direct name="data"    input="RAMB36E1.DIPBDIP[1:0]"        output="RAMB36E1_2048x18_sp.data[17:16]"    />
+					<direct name="we"  input="RAMB36E1.WEBWEL[0]"          output="RAMB36E1_2048x18_sp.we"          />
+					<direct name="out"  input="RAMB36E1_2048x18_sp.out[15:0]"            output="DOB_REG[15:0].D"                />
+					<direct name="outp" input="RAMB36E1_2048x18_sp.out[17:16]"             output="DOB_REG[17:16].D"                 />
+					<direct name="out"  input="DOB_REG[15:0].Q"                        output="RAMB36E1.DOBDO[15:0]"/>
+					<direct name="outp" input="DOB_REG[17:16].Q"                         output="RAMB36E1.DOPBDOP[1:0]"/>
+
+					<direct name="clk"       input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_2048x18_sp.clk[0]"      />
+					<complete name="clk"     input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"       />
+				</interconnect>
+			</mode>
+			<mode name="RAMB36E1_2048x18_COMB_sp">
+				<pb_type name="RAMB36E1_2048x18_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
+					<input  name="addr" num_pins="11" port_class="address" />
+					<input  name="data" num_pins="18" port_class="data_in" />
+					<input  name="we"   num_pins="1"  port_class="write_en"/>
+					<output name="out"  num_pins="18" port_class="data_out"/>
+					<clock  name="clk"  num_pins="1"  port_class="clock"   />
+					<T_setup      value="0.480e-9" port="RAMB36E1_2048x18_sp.addr" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_2048x18_sp.data" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_2048x18_sp.we"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_2048x18_sp.out"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr"  input="RAMB36E1.ADDRBWRADDRL[14:4]" output="RAMB36E1_2048x18_sp.addr"        />
+					<direct name="data"     input="RAMB36E1.DIBDI[15:0]"        output="RAMB36E1_2048x18_sp.data[15:0]"   />
+					<direct name="data"    input="RAMB36E1.DIPBDIP[1:0]"        output="RAMB36E1_2048x18_sp.data[17:16]"    />
+					<direct name="we"  input="RAMB36E1.WEBWEL[0]"          output="RAMB36E1_2048x18_sp.we"          />
+					<direct name="out"  input="RAMB36E1_2048x18_sp.out[15:0]"            output="RAMB36E1.DOBDO[15:0]"/>
+					<direct name="outp" input="RAMB36E1_2048x18_sp.out[17:16]"             output="RAMB36E1.DOPBDOP[1:0]"/>
+
+					<direct name="clk"       input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_2048x18_sp.clk[0]"      />
+					<complete name="clk"     input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"       />
+				</interconnect>
+			</mode>
+			<mode name="RAMB36E1_4096x9_REGB_sp">
+				<pb_type name="RAMB36E1_4096x9_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
+					<input  name="addr" num_pins="12" port_class="address" />
+					<input  name="data" num_pins="9"  port_class="data_in" />
+					<input  name="we"   num_pins="1"  port_class="write_en"/>
+					<output name="out"  num_pins="9"  port_class="data_out"/>
+					<clock  name="clk"  num_pins="1"  port_class="clock"   />
+					<T_setup      value="0.480e-9" port="RAMB36E1_4096x9_sp.addr" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_4096x9_sp.data" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_4096x9_sp.we"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_4096x9_sp.out"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr"  input="RAMB36E1.ADDRARDADDRL[14:3]" output="RAMB36E1_4096x9_sp.addr"         />
+					<direct name="data"     input="RAMB36E1.DIBDI[7:0]"        output="RAMB36E1_4096x9_sp.data[7:0]"    />
+					<direct name="data"    input="RAMB36E1.DIPBDIP[0]"        output="RAMB36E1_4096x9_sp.data[8]"      />
+					<direct name="we"  input="RAMB36E1.WEBWEL[0]"          output="RAMB36E1_4096x9_sp.we"           />
+					<direct name="out"  input="RAMB36E1_4096x9_sp.out[7:0]"             output="DOB_REG[7:0].D"                />
+					<direct name="outp" input="RAMB36E1_4096x9_sp.out[8]"               output="DOB_REG[8].D"                  />
+					<direct name="out"  input="DOB_REG[7:0].Q"                        output="RAMB36E1.DOBDO[7:0]"/>
+					<direct name="outp" input="DOB_REG[8].Q"                          output="RAMB36E1.DOPBDOP[0]"/>
+
+					<direct name="clk"       input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_4096x9_sp.clk[0]"       />
+					<complete name="clk"     input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"       />
+				</interconnect>
+			</mode>
+			<mode name="RAMB36E1_4096x9_COMB_sp">
+				<pb_type name="RAMB36E1_4096x9_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
+					<input  name="addr" num_pins="12" port_class="address" />
+					<input  name="data" num_pins="9"  port_class="data_in" />
+					<input  name="we"   num_pins="1"  port_class="write_en"/>
+					<output name="out"  num_pins="9"  port_class="data_out"/>
+					<clock  name="clk"  num_pins="1"  port_class="clock"   />
+					<T_setup      value="0.480e-9" port="RAMB36E1_4096x9_sp.addr" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_4096x9_sp.data" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_4096x9_sp.we"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_4096x9_sp.out"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr"  input="RAMB36E1.ADDRARDADDRL[14:3]" output="RAMB36E1_4096x9_sp.addr"         />
+					<direct name="data"     input="RAMB36E1.DIBDI[7:0]"        output="RAMB36E1_4096x9_sp.data[7:0]"    />
+					<direct name="data"    input="RAMB36E1.DIPBDIP[0]"        output="RAMB36E1_4096x9_sp.data[8]"      />
+					<direct name="we"  input="RAMB36E1.WEBWEL[0]"          output="RAMB36E1_4096x9_sp.we"           />
+					<direct name="out"  input="RAMB36E1_4096x9_sp.out[7:0]"             output="RAMB36E1.DOBDO[7:0]"/>
+					<direct name="outp" input="RAMB36E1_4096x9_sp.out[8]"               output="RAMB36E1.DOPBDOP[0]"/>
+
+					<direct name="clk"       input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_4096x9_sp.clk[0]"       />
+					<complete name="clk"     input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"       />
+				</interconnect>
+			</mode>
+			<mode name="RAMB36E1_8192x4_REGB_sp">
+				<pb_type name="RAMB36E1_8192x4_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
+					<input  name="addr" num_pins="13" port_class="address" />
+					<input  name="data" num_pins="4"  port_class="data_in" />
+					<input  name="we"   num_pins="1"  port_class="write_en"/>
+					<output name="out"  num_pins="4"  port_class="data_out"/>
+					<clock  name="clk"  num_pins="1"  port_class="clock"   />
+					<T_setup      value="0.480e-9" port="RAMB36E1_8192x4_sp.addr" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_8192x4_sp.data" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_8192x4_sp.we"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_8192x4_sp.out"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr" input="RAMB36E1.ADDRBWRADDRL[14:2]" output="RAMB36E1_8192x4_sp.addr"         />
+					<direct name="data"    input="RAMB36E1.DIBDI[3:0]"        output="RAMB36E1_8192x4_sp.data[3:0]"    />
+					<direct name="we" input="RAMB36E1.WEBWEL[0]"          output="RAMB36E1_8192x4_sp.we"           />
+					<direct name="out" input="RAMB36E1_8192x4_sp.out[3:0]"             output="DOB_REG[3:0].D"                />
+					<direct name="out" input="DOB_REG[3:0].Q"                        output="RAMB36E1.DOBDO[3:0]"/>
+
+					<direct name="clk"      input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_8192x4_sp.clk[0]"       />
+					<complete name="clk"    input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"      />
+				</interconnect>
+			</mode>
+			<mode name="RAMB36E1_8192x4_COMB_sp">
+				<pb_type name="RAMB36E1_8192x4_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
+					<input  name="addr" num_pins="13" port_class="address" />
+					<input  name="data" num_pins="4"  port_class="data_in" />
+					<input  name="we"   num_pins="1"  port_class="write_en"/>
+					<output name="out"  num_pins="4"  port_class="data_out"/>
+					<clock  name="clk"  num_pins="1"  port_class="clock"   />
+					<T_setup      value="0.480e-9" port="RAMB36E1_8192x4_sp.addr" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_8192x4_sp.data" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_8192x4_sp.we"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_8192x4_sp.out"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr" input="RAMB36E1.ADDRBWRADDRL[14:2]" output="RAMB36E1_8192x4_sp.addr"         />
+					<direct name="data"    input="RAMB36E1.DIBDI[3:0]"        output="RAMB36E1_8192x4_sp.data[3:0]"    />
+					<direct name="we" input="RAMB36E1.WEBWEL[0]"          output="RAMB36E1_8192x4_sp.we"           />
+					<direct name="out" input="RAMB36E1_8192x4_sp.out[3:0]"             output="RAMB36E1.DOBDO[3:0]"/>
+
+					<direct name="clk"      input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_8192x4_sp.clk[0]"       />
+					<complete name="clk"    input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"      />
+				</interconnect>
+			</mode>
+			<mode name="RAMB36E1_16384x2_REGB_sp">
+				<pb_type name="RAMB36E1_16384x2_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
+					<input  name="addr" num_pins="14" port_class="address" />
+					<input  name="data" num_pins="2"  port_class="data_in" />
+					<input  name="we"   num_pins="1"  port_class="write_en"/>
+					<output name="out"  num_pins="2"  port_class="data_out"/>
+					<clock  name="clk"  num_pins="1"  port_class="clock"   />
+					<T_setup      value="0.480e-9" port="RAMB36E1_16384x2_sp.addr" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_16384x2_sp.data" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_16384x2_sp.we"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_16384x2_sp.out"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr" input="RAMB36E1.ADDRBWRADDRL[14:1]" output="RAMB36E1_16384x2_sp.addr"      />
+					<direct name="data"    input="RAMB36E1.DIBDI[1:0]"          output="RAMB36E1_16384x2_sp.data[1:0]"   />
+					<direct name="we" input="RAMB36E1.WEBWEL[0]"          output="RAMB36E1_16384x2_sp.we"        />
+					<direct name="out" input="RAMB36E1_16384x2_sp.out[1:0]"              output="DOB_REG[1:0].D"                />
+					<direct name="out" input="DOB_REG[1:0].Q"                          output="RAMB36E1.DOBDO[1:0]"/>
+
+					<direct name="clk"      input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_16384x2_sp.clk[0]"    />
+					<complete name="clk"    input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"     />
+				</interconnect>
+			</mode>
+			<mode name="RAMB36E1_16384x2_COMB_sp">
+				<pb_type name="RAMB36E1_16384x2_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
+					<input  name="addr" num_pins="14" port_class="address" />
+					<input  name="data" num_pins="2"  port_class="data_in" />
+					<input  name="we"   num_pins="1"  port_class="write_en"/>
+					<output name="out"  num_pins="2"  port_class="data_out"/>
+					<clock  name="clk"  num_pins="1"  port_class="clock"   />
+					<T_setup      value="0.480e-9" port="RAMB36E1_16384x2_sp.addr" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_16384x2_sp.data" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_16384x2_sp.we"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_16384x2_sp.out"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr" input="RAMB36E1.ADDRBWRADDRL[14:1]" output="RAMB36E1_16384x2_sp.addr"      />
+					<direct name="data"    input="RAMB36E1.DIBDI[1:0]"          output="RAMB36E1_16384x2_sp.data[1:0]"   />
+					<direct name="we" input="RAMB36E1.WEBWEL[0]"          output="RAMB36E1_16384x2_sp.we"        />
+					<direct name="out" input="RAMB36E1_16384x2_sp.out[1:0]"              output="RAMB36E1.DOBDO[1:0]"/>
+
+					<direct name="clk"      input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_16384x2_sp.clk[0]"    />
+					<complete name="clk"    input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"     />
+				</interconnect>
+			</mode>
+			<mode name="RAMB36E1_32768x1_REGB_sp">
+				<pb_type name="RAMB36E1_32768x1_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
+					<input  name="addr" num_pins="15" port_class="address" />
+					<input  name="data" num_pins="1"  port_class="data_in" />
+					<input  name="we"   num_pins="1"  port_class="write_en"/>
+					<output name="out"  num_pins="1"  port_class="data_out"/>
+					<clock  name="clk"  num_pins="1"  port_class="clock"   />
+					<T_setup      value="0.480e-9" port="RAMB36E1_32768x1_sp.addr" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_32768x1_sp.data" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_32768x1_sp.we"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_32768x1_sp.out"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr" input="RAMB36E1.ADDRBWRADDRL[14:0]" output="RAMB36E1_32768x1_sp.addr"      />
+					<direct name="data"    input="RAMB36E1.DIBDI[0]"          output="RAMB36E1_32768x1_sp.data"      />
+					<direct name="we" input="RAMB36E1.WEBWEL[0]"          output="RAMB36E1_32768x1_sp.we"        />
+					<direct name="out" input="RAMB36E1_32768x1_sp.out"                 output="DOB_REG[0].D"                    >
+						<!--pack_pattern name="RAMB36E1_32768x1[ 0:0]_DOB" in_port="RAMB36E1_32768x1_sp.out[ 0:0]" out_port="DOB_REG[ 0:0].D"/-->
+					</direct>
+					<direct name="out" input="DOB_REG[0].Q"                             output="RAMB36E1.DOBDO[0]"/>
+
+					<direct name="clk"      input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_32768x1_sp.clk[0]"    />
+					<complete name="clk"    input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"     />
+				</interconnect>
+			</mode>
+			<mode name="RAMB36E1_32768x1_COMB_sp">
+				<pb_type name="RAMB36E1_32768x1_sp" blif_model=".subckt single_port_ram" class="memory" num_pb="1">
+					<input  name="addr" num_pins="15" port_class="address" />
+					<input  name="data" num_pins="1"  port_class="data_in" />
+					<input  name="we"   num_pins="1"  port_class="write_en"/>
+					<output name="out"  num_pins="1"  port_class="data_out"/>
+					<clock  name="clk"  num_pins="1"  port_class="clock"   />
+					<T_setup      value="0.480e-9" port="RAMB36E1_32768x1_sp.addr" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_32768x1_sp.data" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_32768x1_sp.we"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_32768x1_sp.out"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr" input="RAMB36E1.ADDRBWRADDRL[14:0]" output="RAMB36E1_32768x1_sp.addr"      />
+					<direct name="data"    input="RAMB36E1.DIBDI[0]"          output="RAMB36E1_32768x1_sp.data"      />
+					<direct name="we" input="RAMB36E1.WEBWEL[0]"          output="RAMB36E1_32768x1_sp.we"        />
+					<direct name="out" input="RAMB36E1_32768x1_sp.out"                 output="RAMB36E1.DOBDO[0]"/>
+
+					<direct name="clk"      input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_32768x1_sp.clk[0]"    />
+					<complete name="clk"    input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"     />
+				</interconnect>
+			</mode>
+			<!-- RAMB36E1 Dual-port RAM -->
+			<mode name="RAMB36E1_1024x36_REGAB_dp">
+				<pb_type name="RAMB36E1_1024x36_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+					<input  name="addr1" num_pins="10" port_class="addr1" />
+					<input  name="addr2" num_pins="10" port_class="addr2" />
+					<input  name="data1" num_pins="36" port_class="data_in1" />
+					<input  name="data2" num_pins="36" port_class="data_in2" />
+					<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+					<input  name="we2"   num_pins="1"  port_class="write_en2"/>
+					<output name="out1"  num_pins="36" port_class="data_out1"/>
+					<output name="out2"  num_pins="36" port_class="data_out2"/>
+					<clock  name="clk"   num_pins="1"  port_class="clock"    />
+					<T_setup      value="0.480e-9" port="RAMB36E1_1024x36_dp.addr1" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_1024x36_dp.data1" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_1024x36_dp.we1"   clock="clk"/>
+					<T_setup      value="0.480e-9" port="RAMB36E1_1024x36_dp.addr2" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_1024x36_dp.data2" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_1024x36_dp.we2"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_1024x36_dp.out1"  clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_1024x36_dp.out2"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr1"  input="RAMB36E1.ADDRARDADDRL[14:5]" output="RAMB36E1_1024x36_dp.addr1"         />
+					<direct name="data1"     input="RAMB36E1.DIADI[31:0]"       output="RAMB36E1_1024x36_dp.data1[31:0]"   />
+					<direct name="data1"    input="RAMB36E1.DIPADIP[3:0]"      output="RAMB36E1_1024x36_dp.data1[35:32]"  />
+					<direct name="we1"  input="RAMB36E1.WEAL[0]"            output="RAMB36E1_1024x36_dp.we1"           />
+					<direct name="out1"  input="RAMB36E1_1024x36_dp.out1"          output="DOA_REG[35:0].D"                 />
+					<direct name="out1"  input="DOA_REG[31:0].Q"                       output="RAMB36E1.DOADO[31:0]" />
+					<direct name="out1p" input="DOA_REG[35:32].Q"                      output="RAMB36E1.DOPADOP[3:0]"/>
+
+					<direct name="addr2"  input="RAMB36E1.ADDRBWRADDRL[14:5]" output="RAMB36E1_1024x36_dp.addr2"         />
+					<direct name="data2"     input="RAMB36E1.DIBDI[31:0]"       output="DOB_REG[31:0].D"                 />
+					<direct name="data2"    input="RAMB36E1.DIPBDIP[3:0]"      output="DOB_REG[35:32].D"                />
+					<direct name="we2"  input="RAMB36E1.WEBWEL[0]"          output="RAMB36E1_1024x36_dp.we2"           />
+					<direct name="out2"  input="RAMB36E1_1024x36_dp.out2"          output="DOB_REG[35:0].D"                 />
+					<direct name="out2"  input="DOB_REG[31:0].Q"                       output="RAMB36E1.DOBDO[31:0]" />
+					<direct name="out2p" input="DOB_REG[35:32].Q"                      output="RAMB36E1.DOPBDOP[3:0]"/>
+
+					<direct name="clk"       input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_1024x36_dp.clk[0]"        />
+					<complete name="clk"     input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"         />
+				</interconnect>
+			</mode>
+			<mode name="RAMB36E1_1024x36_REGA_dp">
+				<pb_type name="RAMB36E1_1024x36_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+					<input  name="addr1" num_pins="10" port_class="addr1" />
+					<input  name="addr2" num_pins="10" port_class="addr2" />
+					<input  name="data1" num_pins="36" port_class="data_in1" />
+					<input  name="data2" num_pins="36" port_class="data_in2" />
+					<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+					<input  name="we2"   num_pins="1"  port_class="write_en2"/>
+					<output name="out1"  num_pins="36" port_class="data_out1"/>
+					<output name="out2"  num_pins="36" port_class="data_out2"/>
+					<clock  name="clk"   num_pins="1"  port_class="clock"    />
+					<T_setup      value="0.480e-9" port="RAMB36E1_1024x36_dp.addr1" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_1024x36_dp.data1" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_1024x36_dp.we1"   clock="clk"/>
+					<T_setup      value="0.480e-9" port="RAMB36E1_1024x36_dp.addr2" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_1024x36_dp.data2" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_1024x36_dp.we2"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_1024x36_dp.out1"  clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_1024x36_dp.out2"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr1"  input="RAMB36E1.ADDRARDADDRL[14:5]" output="RAMB36E1_1024x36_dp.addr1"         />
+					<direct name="data1"     input="RAMB36E1.DIADI[31:0]"       output="RAMB36E1_1024x36_dp.data1[31:0]"   />
+					<direct name="data1"    input="RAMB36E1.DIPADIP[3:0]"      output="RAMB36E1_1024x36_dp.data1[35:32]"  />
+					<direct name="we1"  input="RAMB36E1.WEAL[0]"            output="RAMB36E1_1024x36_dp.we1"           />
+					<direct name="out1"  input="RAMB36E1_1024x36_dp.out1"          output="DOA_REG[35:0].D"                 />
+					<direct name="out1"  input="DOA_REG[31:0].Q"                       output="RAMB36E1.DOADO[31:0]" />
+					<direct name="out1p" input="DOA_REG[35:32].Q"                      output="RAMB36E1.DOPADOP[3:0]"/>
+
+					<direct name="addr2"  input="RAMB36E1.ADDRBWRADDRL[14:5]" output="RAMB36E1_1024x36_dp.addr2"         />
+					<direct name="data2"     input="RAMB36E1.DIBDI[31:0]"       output="RAMB36E1_1024x36_dp.data2[31:0]"   />
+					<direct name="data2"    input="RAMB36E1.DIPBDIP[3:0]"      output="RAMB36E1_1024x36_dp.data2[35:32]"  />
+					<direct name="we2"  input="RAMB36E1.WEBWEL[0]"          output="RAMB36E1_1024x36_dp.we2"           />
+					<direct name="out2"  input="RAMB36E1_1024x36_dp.out2[31:0]"          output="RAMB36E1.DOBDO[31:0]" />
+					<direct name="out2p" input="RAMB36E1_1024x36_dp.out2[35:32]"         output="RAMB36E1.DOPBDOP[3:0]"/>
+
+					<direct name="clk"       input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_1024x36_dp.clk[0]"        />
+					<complete name="clk"     input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"         />
+				</interconnect>
+			</mode>
+			<mode name="RAMB36E1_1024x36_REGB_dp">
+				<pb_type name="RAMB36E1_1024x36_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+					<input  name="addr1" num_pins="10" port_class="addr1" />
+					<input  name="addr2" num_pins="10" port_class="addr2" />
+					<input  name="data1" num_pins="36" port_class="data_in1" />
+					<input  name="data2" num_pins="36" port_class="data_in2" />
+					<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+					<input  name="we2"   num_pins="1"  port_class="write_en2"/>
+					<output name="out1"  num_pins="36" port_class="data_out1"/>
+					<output name="out2"  num_pins="36" port_class="data_out2"/>
+					<clock  name="clk"   num_pins="1"  port_class="clock"    />
+					<T_setup      value="0.480e-9" port="RAMB36E1_1024x36_dp.addr1" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_1024x36_dp.data1" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_1024x36_dp.we1"   clock="clk"/>
+					<T_setup      value="0.480e-9" port="RAMB36E1_1024x36_dp.addr2" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_1024x36_dp.data2" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_1024x36_dp.we2"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_1024x36_dp.out1"  clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_1024x36_dp.out2"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr1"  input="RAMB36E1.ADDRARDADDRL[14:5]" output="RAMB36E1_1024x36_dp.addr1"         />
+					<direct name="data1"     input="RAMB36E1.DIADI[31:0]"       output="RAMB36E1_1024x36_dp.data1[31:0]"   />
+					<direct name="data1"    input="RAMB36E1.DIPADIP[3:0]"      output="RAMB36E1_1024x36_dp.data1[35:32]"  />
+					<direct name="we1"  input="RAMB36E1.WEAL[0]"            output="RAMB36E1_1024x36_dp.we1"           />
+					<direct name="out1"  input="RAMB36E1_1024x36_dp.out1[31:0]"          output="RAMB36E1.DOADO[31:0]" />
+					<direct name="out1p" input="RAMB36E1_1024x36_dp.out1[35:32]"         output="RAMB36E1.DOPADOP[3:0]"/>
+
+					<direct name="addr2"  input="RAMB36E1.ADDRBWRADDRL[14:5]" output="RAMB36E1_1024x36_dp.addr2"         />
+					<direct name="data2"     input="RAMB36E1.DIBDI[31:0]"       output="RAMB36E1_1024x36_dp.data2[31:0]"   />
+					<direct name="data2"    input="RAMB36E1.DIPBDIP[3:0]"      output="RAMB36E1_1024x36_dp.data2[35:32]"  />
+					<direct name="we2"  input="RAMB36E1.WEBWEL[0]"          output="RAMB36E1_1024x36_dp.we2"           />
+					<direct name="out2"  input="RAMB36E1_1024x36_dp.out2"          output="DOB_REG[35:0].D"                 />
+					<direct name="out2"  input="DOB_REG[31:0].Q"                       output="RAMB36E1.DOBDO[31:0]" />
+					<direct name="out2p" input="DOB_REG[35:32].Q"                      output="RAMB36E1.DOPBDOP[3:0]"/>
+
+					<direct name="clk"       input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_1024x36_dp.clk[0]"        />
+					<complete name="clk"     input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"         />
+				</interconnect>
+			</mode>
+			<mode name="RAMB36E1_1024x36_COMB_dp">
+				<pb_type name="RAMB36E1_1024x36_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+					<input  name="addr1" num_pins="10" port_class="addr1" />
+					<input  name="addr2" num_pins="10" port_class="addr2" />
+					<input  name="data1" num_pins="36" port_class="data_in1" />
+					<input  name="data2" num_pins="36" port_class="data_in2" />
+					<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+					<input  name="we2"   num_pins="1"  port_class="write_en2"/>
+					<output name="out1"  num_pins="36" port_class="data_out1"/>
+					<output name="out2"  num_pins="36" port_class="data_out2"/>
+					<clock  name="clk"   num_pins="1"  port_class="clock"    />
+					<T_setup      value="0.480e-9" port="RAMB36E1_1024x36_dp.addr1" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_1024x36_dp.data1" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_1024x36_dp.we1"   clock="clk"/>
+					<T_setup      value="0.480e-9" port="RAMB36E1_1024x36_dp.addr2" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_1024x36_dp.data2" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_1024x36_dp.we2"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_1024x36_dp.out1"  clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_1024x36_dp.out2"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr1"  input="RAMB36E1.ADDRARDADDRL[14:5]" output="RAMB36E1_1024x36_dp.addr1"         />
+					<direct name="data1"     input="RAMB36E1.DIADI[31:0]"       output="RAMB36E1_1024x36_dp.data1[31:0]"   />
+					<direct name="data1"    input="RAMB36E1.DIPADIP[3:0]"      output="RAMB36E1_1024x36_dp.data1[35:32]"  />
+					<direct name="we1"  input="RAMB36E1.WEAL[0]"            output="RAMB36E1_1024x36_dp.we1"           />
+					<direct name="out1"  input="RAMB36E1_1024x36_dp.out1[31:0]"          output="RAMB36E1.DOADO[31:0]" />
+					<direct name="out1p" input="RAMB36E1_1024x36_dp.out1[35:32]"         output="RAMB36E1.DOPADOP[3:0]"/>
+
+					<direct name="addr2"  input="RAMB36E1.ADDRBWRADDRL[14:5]" output="RAMB36E1_1024x36_dp.addr2"         />
+					<direct name="data2"     input="RAMB36E1.DIBDI[31:0]"       output="RAMB36E1_1024x36_dp.data2[31:0]"   />
+					<direct name="data2"    input="RAMB36E1.DIPBDIP[3:0]"      output="RAMB36E1_1024x36_dp.data2[35:32]"  />
+					<direct name="we2"  input="RAMB36E1.WEBWEL[0]"          output="RAMB36E1_1024x36_dp.we2"           />
+					<direct name="out2"  input="RAMB36E1_1024x36_dp.out2[31:0]"          output="RAMB36E1.DOBDO[31:0]" />
+					<direct name="out2p" input="RAMB36E1_1024x36_dp.out2[35:32]"         output="RAMB36E1.DOPBDOP[3:0]"/>
+
+					<direct name="clk"       input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_1024x36_dp.clk[0]"        />
+					<complete name="clk"     input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"         />
+				</interconnect>
+			</mode>
+			<mode name="RAMB36E1_2048x18_REGAB_dp">
+				<pb_type name="RAMB36E1_2048x18_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+					<input  name="addr1" num_pins="11" port_class="addr1" />
+					<input  name="addr2" num_pins="11" port_class="addr2" />
+					<input  name="data1" num_pins="18" port_class="data_in1" />
+					<input  name="data2" num_pins="18" port_class="data_in2" />
+					<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+					<input  name="we2"   num_pins="1"  port_class="write_en2"/>
+					<output name="out1"  num_pins="18" port_class="data_out1"/>
+					<output name="out2"  num_pins="18" port_class="data_out2"/>
+					<clock  name="clk"   num_pins="1"  port_class="clock"    />
+					<T_setup      value="0.480e-9" port="RAMB36E1_2048x18_dp.addr1" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_2048x18_dp.data1" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_2048x18_dp.we1"   clock="clk"/>
+					<T_setup      value="0.480e-9" port="RAMB36E1_2048x18_dp.addr2" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_2048x18_dp.data2" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_2048x18_dp.we2"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_2048x18_dp.out1"  clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_2048x18_dp.out2"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr1"  input="RAMB36E1.ADDRARDADDRL[14:4]" output="RAMB36E1_2048x18_dp.addr1"         />
+					<direct name="data1"     input="RAMB36E1.DIADI[15:0]"        output="RAMB36E1_2048x18_dp.data1[15:0]"    />
+					<direct name="data1"    input="RAMB36E1.DIPADIP[1:0]"        output="RAMB36E1_2048x18_dp.data1[17:16]"     />
+					<direct name="we1"  input="RAMB36E1.WEAL[0]"            output="RAMB36E1_2048x18_dp.we1"           />
+					<direct name="out1"  input="RAMB36E1_2048x18_dp.out1"           output="DOA_REG[17:0].D"                  />
+					<direct name="out1"  input="DOA_REG[15:0].Q"                        output="RAMB36E1.DOADO[15:0]"  />
+					<direct name="out1p" input="DOA_REG[17:16].Q"                         output="RAMB36E1.DOPADOP[1:0]"  />
+
+					<direct name="addr2"  input="RAMB36E1.ADDRBWRADDRL[14:4]" output="RAMB36E1_2048x18_dp.addr2"         />
+					<direct name="data2"     input="RAMB36E1.DIBDI[15:0]"        output="RAMB36E1_2048x18_dp.data2[15:0]"    />
+					<direct name="data2"    input="RAMB36E1.DIPBDIP[1:0]"        output="RAMB36E1_2048x18_dp.data2[17:16]"     />
+					<direct name="we2"  input="RAMB36E1.WEBWEL[0]"          output="RAMB36E1_2048x18_dp.we2"           />
+					<direct name="out2"  input="RAMB36E1_2048x18_dp.out2"           output="DOB_REG[17:0].D"                  />
+					<direct name="out2"  input="DOB_REG[15:0].Q"                        output="RAMB36E1.DOBDO[15:0]"  />
+					<direct name="out2p" input="DOB_REG[17:16].Q"                         output="RAMB36E1.DOPBDOP[1:0]"  />
+					
+					<direct name="clk"       input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_2048x18_dp.clk[0]"        />
+					<complete name="clk"     input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"         />
+
+				</interconnect>
+			</mode>
+			<mode name="RAMB36E1_2048x18_REGA_dp">
+				<pb_type name="RAMB36E1_2048x18_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+					<input  name="addr1" num_pins="11" port_class="addr1" />
+					<input  name="addr2" num_pins="11" port_class="addr2" />
+					<input  name="data1" num_pins="18" port_class="data_in1" />
+					<input  name="data2" num_pins="18" port_class="data_in2" />
+					<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+					<input  name="we2"   num_pins="1"  port_class="write_en2"/>
+					<output name="out1"  num_pins="18" port_class="data_out1"/>
+					<output name="out2"  num_pins="18" port_class="data_out2"/>
+					<clock  name="clk"   num_pins="1"  port_class="clock"    />
+					<T_setup      value="0.480e-9" port="RAMB36E1_2048x18_dp.addr1" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_2048x18_dp.data1" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_2048x18_dp.we1"   clock="clk"/>
+					<T_setup      value="0.480e-9" port="RAMB36E1_2048x18_dp.addr2" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_2048x18_dp.data2" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_2048x18_dp.we2"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_2048x18_dp.out1"  clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_2048x18_dp.out2"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr1"  input="RAMB36E1.ADDRARDADDRL[14:4]" output="RAMB36E1_2048x18_dp.addr1"         />
+					<direct name="data1"     input="RAMB36E1.DIADI[15:0]"        output="RAMB36E1_2048x18_dp.data1[15:0]"    />
+					<direct name="data1"    input="RAMB36E1.DIPADIP[1:0]"        output="RAMB36E1_2048x18_dp.data1[17:16]"     />
+					<direct name="we1"  input="RAMB36E1.WEAL[0]"            output="RAMB36E1_2048x18_dp.we1"           />
+					<direct name="out1"  input="RAMB36E1_2048x18_dp.out1"           output="DOA_REG[17:0].D"                  />
+					<direct name="out1"  input="DOA_REG[15:0].Q"                        output="RAMB36E1.DOADO[15:0]"  />
+					<direct name="out1p" input="DOA_REG[17:16].Q"                         output="RAMB36E1.DOPADOP[1:0]"  />
+
+					<direct name="addr2"  input="RAMB36E1.ADDRBWRADDRL[14:4]" output="RAMB36E1_2048x18_dp.addr2"         />
+					<direct name="data2"     input="RAMB36E1.DIBDI[15:0]"        output="RAMB36E1_2048x18_dp.data2[15:0]"    />
+					<direct name="data2"    input="RAMB36E1.DIPBDIP[1:0]"        output="RAMB36E1_2048x18_dp.data2[17:16]"     />
+					<direct name="we2"  input="RAMB36E1.WEBWEL[0]"          output="RAMB36E1_2048x18_dp.we2"           />
+					<direct name="out2"  input="RAMB36E1_2048x18_dp.out2[15:0]"           output="RAMB36E1.DOBDO[15:0]"  />
+					<direct name="out2p" input="RAMB36E1_2048x18_dp.out2[17:16]"            output="RAMB36E1.DOPBDOP[1:0]"  />
+					
+					<direct name="clk"       input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_2048x18_dp.clk[0]"        />
+					<complete name="clk"     input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"         />
+				</interconnect>
+			</mode>
+			<mode name="RAMB36E1_2048x18_REGB_dp">
+				<pb_type name="RAMB36E1_2048x18_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+					<input  name="addr1" num_pins="11" port_class="addr1" />
+					<input  name="addr2" num_pins="11" port_class="addr2" />
+					<input  name="data1" num_pins="18" port_class="data_in1" />
+					<input  name="data2" num_pins="18" port_class="data_in2" />
+					<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+					<input  name="we2"   num_pins="1"  port_class="write_en2"/>
+					<output name="out1"  num_pins="18" port_class="data_out1"/>
+					<output name="out2"  num_pins="18" port_class="data_out2"/>
+					<clock  name="clk"   num_pins="1"  port_class="clock"    />
+					<T_setup      value="0.480e-9" port="RAMB36E1_2048x18_dp.addr1" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_2048x18_dp.data1" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_2048x18_dp.we1"   clock="clk"/>
+					<T_setup      value="0.480e-9" port="RAMB36E1_2048x18_dp.addr2" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_2048x18_dp.data2" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_2048x18_dp.we2"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_2048x18_dp.out1"  clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_2048x18_dp.out2"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr1"  input="RAMB36E1.ADDRARDADDRL[14:4]" output="RAMB36E1_2048x18_dp.addr1"         />
+					<direct name="data1"     input="RAMB36E1.DIADI[15:0]"        output="RAMB36E1_2048x18_dp.data1[15:0]"    />
+					<direct name="data1p"    input="RAMB36E1.DIPADIP[1:0]"        output="RAMB36E1_2048x18_dp.data1[17:16]"     />
+					<direct name="we1"  input="RAMB36E1.WEAL[0]"            output="RAMB36E1_2048x18_dp.we1"           />
+					<direct name="out1"  input="RAMB36E1_2048x18_dp.out1[15:0]"           output="RAMB36E1.DOADO[15:0]"  />
+					<direct name="out1p" input="RAMB36E1_2048x18_dp.out1[17:16]"            output="RAMB36E1.DOPADOP[1:0]"  />
+
+					<direct name="addr2"  input="RAMB36E1.ADDRBWRADDRL[14:4]" output="RAMB36E1_2048x18_dp.addr2"         />
+					<direct name="data2"     input="RAMB36E1.DIBDI[15:0]"        output="RAMB36E1_2048x18_dp.data2[15:0]"    />
+					<direct name="data2p"    input="RAMB36E1.DIPBDIP[1:0]"        output="RAMB36E1_2048x18_dp.data2[17:16]"     />
+					<direct name="we2"  input="RAMB36E1.WEBWEL[0]"          output="RAMB36E1_2048x18_dp.we2"           />
+					<direct name="out2"  input="RAMB36E1_2048x18_dp.out2"           output="DOB_REG[17:0].D"                  />
+					<direct name="out2"  input="DOB_REG[15:0].Q"                        output="RAMB36E1.DOBDO[15:0]"  />
+					<direct name="out2p" input="DOB_REG[17:16].Q"                         output="RAMB36E1.DOPBDOP[1:0]"  />
+					
+					<direct name="clk"       input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_2048x18_dp.clk[0]"        />
+					<complete name="clk"     input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"         />
+				</interconnect>
+			</mode>
+			<mode name="RAMB36E1_2048x18_COMB_dp">
+				<pb_type name="RAMB36E1_2048x18_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+					<input  name="addr1" num_pins="11" port_class="addr1" />
+					<input  name="addr2" num_pins="11" port_class="addr2" />
+					<input  name="data1" num_pins="18" port_class="data_in1" />
+					<input  name="data2" num_pins="18" port_class="data_in2" />
+					<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+					<input  name="we2"   num_pins="1"  port_class="write_en2"/>
+					<output name="out1"  num_pins="18" port_class="data_out1"/>
+					<output name="out2"  num_pins="18" port_class="data_out2"/>
+					<clock  name="clk"   num_pins="1"  port_class="clock"    />
+					<T_setup      value="0.480e-9" port="RAMB36E1_2048x18_dp.addr1" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_2048x18_dp.data1" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_2048x18_dp.we1"   clock="clk"/>
+					<T_setup      value="0.480e-9" port="RAMB36E1_2048x18_dp.addr2" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_2048x18_dp.data2" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_2048x18_dp.we2"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_2048x18_dp.out1"  clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_2048x18_dp.out2"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr1"  input="RAMB36E1.ADDRARDADDRL[14:4]" output="RAMB36E1_2048x18_dp.addr1"       />
+					<direct name="data1"     input="RAMB36E1.DIADI[15:0]"        output="RAMB36E1_2048x18_dp.data1[15:0]"  />
+					<direct name="data1"    input="RAMB36E1.DIPADIP[1:0]"        output="RAMB36E1_2048x18_dp.data1[1:0]"   />
+					<direct name="we1"  input="RAMB36E1.WEAL[0]"            output="RAMB36E1_2048x18_dp.we1"         />
+					<direct name="out1"  input="RAMB36E1_2048x18_dp.out1[15:0]"           output="RAMB36E1.DOADO[15:0]"/>
+					<direct name="out1p" input="RAMB36E1_2048x18_dp.out1[17:16]"            output="RAMB36E1.DOPADOP[1:0]"/>
+
+					<direct name="addr2"  input="RAMB36E1.ADDRBWRADDRL[14:4]" output="RAMB36E1_2048x18_dp.addr2"       />
+					<direct name="data2"     input="RAMB36E1.DIBDI[15:0]"        output="RAMB36E1_2048x18_dp.data2[15:0]"  />
+					<direct name="data2"    input="RAMB36E1.DIPBDIP[1:0]"        output="RAMB36E1_2048x18_dp.data2[17:16]"   />
+					<direct name="we2"  input="RAMB36E1.WEBWEL[0]"          output="RAMB36E1_2048x18_dp.we2"         />
+					<direct name="out2"  input="RAMB36E1_2048x18_dp.out2[15:0]"           output="RAMB36E1.DOBDO[15:0]"/>
+					<direct name="out2p" input="RAMB36E1_2048x18_dp.out2[17:16]"            output="RAMB36E1.DOPBDOP[1:0]"/>
+					
+					<direct name="clk"       input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_2048x18_dp.clk[0]"        />
+					<complete name="clk"     input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"         />
+				</interconnect>
+			</mode>
+			<mode name="RAMB36E1_4096x9_REGAB_dp">
+				<pb_type name="RAMB36E1_4096x9_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+					<input  name="addr1" num_pins="12" port_class="addr1" />
+					<input  name="addr2" num_pins="12" port_class="addr2" />
+					<input  name="data1" num_pins="9"  port_class="data_in1" />
+					<input  name="data2" num_pins="9"  port_class="data_in2" />
+					<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+					<input  name="we2"   num_pins="1"  port_class="write_en2"/>
+					<output name="out1"  num_pins="9"  port_class="data_out1"/>
+					<output name="out2"  num_pins="9"  port_class="data_out2"/>
+					<clock  name="clk"   num_pins="1"  port_class="clock"    />
+					<T_setup      value="0.480e-9" port="RAMB36E1_4096x9_dp.addr1" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_4096x9_dp.data1" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_4096x9_dp.we1"   clock="clk"/>
+					<T_setup      value="0.480e-9" port="RAMB36E1_4096x9_dp.addr2" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_4096x9_dp.data2" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_4096x9_dp.we2"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_4096x9_dp.out1"  clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_4096x9_dp.out2"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr1"  input="RAMB36E1.ADDRARDADDRL[14:3]" output="RAMB36E1_4096x9_dp.addr1"        />
+					<direct name="data1"     input="RAMB36E1.DIADI[7:0]"        output="RAMB36E1_4096x9_dp.data1[7:0]"   />
+					<direct name="data1"    input="RAMB36E1.DIPADIP[0]"        output="RAMB36E1_4096x9_dp.data1[8]"     />						
+					<direct name="we1"  input="RAMB36E1.WEAL[0]"            output="RAMB36E1_4096x9_dp.we1"          />
+					<direct name="out1"  input="RAMB36E1_4096x9_dp.out1"            output="DOA_REG[8:0].D"                />
+					<direct name="out1"  input="DOA_REG[7:0].Q"                        output="RAMB36E1.DOADO[7:0]"/>
+					<direct name="out1p" input="DOA_REG[8].Q"                          output="RAMB36E1.DOPADOP[0]"/>
+
+					<direct name="addr2"  input="RAMB36E1.ADDRBWRADDRL[14:3]" output="RAMB36E1_4096x9_dp.addr2"        />
+					<direct name="data2"     input="RAMB36E1.DIBDI[7:0]"        output="RAMB36E1_4096x9_dp.data2[7:0]"   />
+					<direct name="data2"    input="RAMB36E1.DIPBDIP[0]"        output="RAMB36E1_4096x9_dp.data2[8]"     />						
+					<direct name="we2"  input="RAMB36E1.WEBWEL[0]"          output="RAMB36E1_4096x9_dp.we2"          />
+					<direct name="out1"  input="RAMB36E1_4096x9_dp.out2"            output="DOB_REG[8:0].D"                />
+					<direct name="out2"  input="DOB_REG[7:0].Q"            output="RAMB36E1.DOBDO[7:0]"/>
+					<direct name="out2p" input="DOB_REG[8].Q"              output="RAMB36E1.DOPBDOP[0]"/>  	
+
+					<direct name="clk"       input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_4096x9_dp.clk[0]"       />
+					<complete name="clk"     input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"       />
+				</interconnect>
+			</mode>
+			<mode name="RAMB36E1_4096x9_REGA_dp">
+				<pb_type name="RAMB36E1_4096x9_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+					<input  name="addr1" num_pins="12" port_class="addr1" />
+					<input  name="addr2" num_pins="12" port_class="addr2" />
+					<input  name="data1" num_pins="9"  port_class="data_in1" />
+					<input  name="data2" num_pins="9"  port_class="data_in2" />
+					<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+					<input  name="we2"   num_pins="1"  port_class="write_en2"/>
+					<output name="out1"  num_pins="9"  port_class="data_out1"/>
+					<output name="out2"  num_pins="9"  port_class="data_out2"/>
+					<clock  name="clk"   num_pins="1"  port_class="clock"    />
+					<T_setup      value="0.480e-9" port="RAMB36E1_4096x9_dp.addr1" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_4096x9_dp.data1" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_4096x9_dp.we1"   clock="clk"/>
+					<T_setup      value="0.480e-9" port="RAMB36E1_4096x9_dp.addr2" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_4096x9_dp.data2" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_4096x9_dp.we2"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_4096x9_dp.out1"  clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_4096x9_dp.out2"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr1"  input="RAMB36E1.ADDRARDADDRL[14:3]" output="RAMB36E1_4096x9_dp.addr1"        />
+					<direct name="data1"     input="RAMB36E1.DIADI[7:0]"        output="RAMB36E1_4096x9_dp.data1[7:0]"   />
+					<direct name="data1"    input="RAMB36E1.DIPADIP[0]"        output="RAMB36E1_4096x9_dp.data1[8]"     />						
+					<direct name="we1"  input="RAMB36E1.WEAL[0]"            output="RAMB36E1_4096x9_dp.we1"          />
+					<direct name="out1"  input="RAMB36E1_4096x9_dp.out1[7:0]"            output="DOA_REG[7:0].D"                />
+					<direct name="out1p" input="RAMB36E1_4096x9_dp.out1[8]"              output="DOA_REG[8].D"                  />
+					<direct name="out1"  input="DOA_REG[7:0].Q"                        output="RAMB36E1.DOADO[7:0]"/>
+					<direct name="out1p" input="DOA_REG[8].Q"                          output="RAMB36E1.DOPADOP[0]"/>
+
+					<direct name="addr2"  input="RAMB36E1.ADDRBWRADDRL[14:3]" output="RAMB36E1_4096x9_dp.addr2"        />
+					<direct name="data2"     input="RAMB36E1.DIBDI[7:0]"        output="RAMB36E1_4096x9_dp.data2[7:0]"   />
+					<direct name="data2"    input="RAMB36E1.DIPBDIP[0]"        output="RAMB36E1_4096x9_dp.data2[8]"     />						
+					<direct name="we2"  input="RAMB36E1.WEBWEL[0]"          output="RAMB36E1_4096x9_dp.we2"          />
+					<direct name="out2"  input="RAMB36E1_4096x9_dp.out2[7:0]"            output="RAMB36E1.DOBDO[7:0]"                />
+					<direct name="out2p" input="RAMB36E1_4096x9_dp.out2[8]"              output="RAMB36E1.DOPBDOP[0]"                />  	
+
+					<direct name="clk"       input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_4096x9_dp.clk[0]"       />
+					<complete name="clk"     input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"       />
+				</interconnect>
+			</mode>
+			<mode name="RAMB36E1_4096x9_REGB_dp">
+				<pb_type name="RAMB36E1_4096x9_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+					<input  name="addr1" num_pins="12" port_class="addr1" />
+					<input  name="addr2" num_pins="12" port_class="addr2" />
+					<input  name="data1" num_pins="9"  port_class="data_in1" />
+					<input  name="data2" num_pins="9"  port_class="data_in2" />
+					<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+					<input  name="we2"   num_pins="1"  port_class="write_en2"/>
+					<output name="out1"  num_pins="9"  port_class="data_out1"/>
+					<output name="out2"  num_pins="9"  port_class="data_out2"/>
+					<clock  name="clk"   num_pins="1"  port_class="clock"    />
+					<T_setup      value="0.480e-9" port="RAMB36E1_4096x9_dp.addr1" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_4096x9_dp.data1" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_4096x9_dp.we1"   clock="clk"/>
+					<T_setup      value="0.480e-9" port="RAMB36E1_4096x9_dp.addr2" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_4096x9_dp.data2" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_4096x9_dp.we2"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_4096x9_dp.out1"  clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_4096x9_dp.out2"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr1"  input="RAMB36E1.ADDRARDADDRL[14:3]" output="RAMB36E1_4096x9_dp.addr1"        />
+					<direct name="data1"     input="RAMB36E1.DIADI[7:0]"        output="RAMB36E1_4096x9_dp.data1[7:0]"   />
+					<direct name="data1"    input="RAMB36E1.DIPADIP[0]"        output="RAMB36E1_4096x9_dp.data1[8]"     />						
+					<direct name="we1"  input="RAMB36E1.WEAL[0]"            output="RAMB36E1_4096x9_dp.we1"          />
+					<direct name="out1"  input="RAMB36E1_4096x9_dp.out1[7:0]"            output="RAMB36E1.DOADO[7:0]"/>
+					<direct name="out1p" input="RAMB36E1_4096x9_dp.out1[8]"              output="RAMB36E1.DOPADOP[0]"/>
+
+					<direct name="addr2"  input="RAMB36E1.ADDRBWRADDRL[14:3]" output="RAMB36E1_4096x9_dp.addr2"        />
+					<direct name="data2"     input="RAMB36E1.DIBDI[7:0]"        output="RAMB36E1_4096x9_dp.data2[7:0]"   />
+					<direct name="data2"    input="RAMB36E1.DIPBDIP[0]"        output="RAMB36E1_4096x9_dp.data2[8]"     />						
+					<direct name="we2"  input="RAMB36E1.WEBWEL[0]"          output="RAMB36E1_4096x9_dp.we2"          />
+					<direct name="out2"  input="RAMB36E1_4096x9_dp.out2[7:0]"            output="DOB_REG[7:0].D"                />
+					<direct name="out2p" input="RAMB36E1_4096x9_dp.out2[8]"              output="DOB_REG[8].D"                  />  	
+					<direct name="out2"  input="DOB_REG[7:0].Q"                        output="RAMB36E1.DOBDO[7:0]"/>
+					<direct name="out2p" input="DOB_REG[8].Q"                          output="RAMB36E1.DOPBDOP[0]"/>  	
+
+					<direct name="clk"       input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_4096x9_dp.clk[0]"       />
+					<complete name="clk"     input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"       />
+				</interconnect>
+			</mode>
+			<mode name="RAMB36E1_4096x9_COMB_dp">
+				<pb_type name="RAMB36E1_4096x9_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+					<input  name="addr1" num_pins="12" port_class="addr1" />
+					<input  name="addr2" num_pins="12" port_class="addr2" />
+					<input  name="data1" num_pins="9"  port_class="data_in1" />
+					<input  name="data2" num_pins="9"  port_class="data_in2" />
+					<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+					<input  name="we2"   num_pins="1"  port_class="write_en2"/>
+					<output name="out1"  num_pins="9"  port_class="data_out1"/>
+					<output name="out2"  num_pins="9"  port_class="data_out2"/>
+					<clock  name="clk"   num_pins="1"  port_class="clock"    />
+					<T_setup      value="0.480e-9" port="RAMB36E1_4096x9_dp.addr1" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_4096x9_dp.data1" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_4096x9_dp.we1"   clock="clk"/>
+					<T_setup      value="0.480e-9" port="RAMB36E1_4096x9_dp.addr2" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_4096x9_dp.data2" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_4096x9_dp.we2"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_4096x9_dp.out1"  clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_4096x9_dp.out2"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr1"  input="RAMB36E1.ADDRARDADDRL[14:3]" output="RAMB36E1_4096x9_dp.addr1"        />
+					<direct name="data1"     input="RAMB36E1.DIADI[7:0]"        output="RAMB36E1_4096x9_dp.data1[7:0]"   />
+					<direct name="data1"    input="RAMB36E1.DIPADIP[0]"        output="RAMB36E1_4096x9_dp.data1[8]"     />						
+					<direct name="we1"  input="RAMB36E1.WEAL[0]"            output="RAMB36E1_4096x9_dp.we1"          />
+					<direct name="out1"  input="RAMB36E1_4096x9_dp.out1[7:0]"            output="RAMB36E1.DOADO[7:0]"/>
+					<direct name="out1p" input="RAMB36E1_4096x9_dp.out1[8]"              output="RAMB36E1.DOPADOP[0]"/>
+
+					<direct name="addr2"  input="RAMB36E1.ADDRBWRADDRL[14:3]" output="RAMB36E1_4096x9_dp.addr2"        />
+					<direct name="data2"     input="RAMB36E1.DIBDI[7:0]"        output="RAMB36E1_4096x9_dp.data2[7:0]"   />
+					<direct name="data2"    input="RAMB36E1.DIPBDIP[0]"        output="RAMB36E1_4096x9_dp.data2[8]"     />	
+					<direct name="we2"  input="RAMB36E1.WEBWEL[0]"          output="RAMB36E1_4096x9_dp.we2"          />
+					<direct name="out2"  input="RAMB36E1_4096x9_dp.out2[7:0]"            output="RAMB36E1.DOBDO[7:0]"/>
+					<direct name="out2p" input="RAMB36E1_4096x9_dp.out2[8]"              output="RAMB36E1.DOPBDOP[0]"/>  	
+
+					<direct name="clk"       input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_4096x9_dp.clk[0]"       />
+					<complete name="clk"     input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"       />
+				</interconnect>
+			</mode>
+			<mode name="RAMB36E1_8192x4_REGAB_dp">
+				<pb_type name="RAMB36E1_8192x4_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+					<input  name="addr1" num_pins="13" port_class="addr1"/>
+					<input  name="addr2" num_pins="13" port_class="addr2"/>
+					<input  name="data1" num_pins="4"  port_class="data_in1"/>
+					<input  name="data2" num_pins="4"  port_class="data_in2"/>
+					<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+					<input  name="we2"   num_pins="1"  port_class="write_en2"/>
+					<output name="out1"  num_pins="4"  port_class="data_out1"/>
+					<output name="out2"  num_pins="4"  port_class="data_out2"/>
+					<clock  name="clk"   num_pins="1"  port_class="clock"/>
+					<T_setup      value="0.480e-9" port="RAMB36E1_8192x4_dp.addr1" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_8192x4_dp.data1" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_8192x4_dp.we1"   clock="clk"/>
+					<T_setup      value="0.480e-9" port="RAMB36E1_8192x4_dp.addr2" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_8192x4_dp.data2" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_8192x4_dp.we2"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_8192x4_dp.out1"  clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_8192x4_dp.out2"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr1" input="RAMB36E1.ADDRARDADDRL[14:2]" output="RAMB36E1_8192x4_dp.addr1"        />
+					<direct name="data1"    input="RAMB36E1.DIADI[3:0]"        output="RAMB36E1_8192x4_dp.data1[3:0]"   />
+					<direct name="we1" input="RAMB36E1.WEAL[0]"            output="RAMB36E1_8192x4_dp.we1"          />
+					<direct name="out1" input="RAMB36E1_8192x4_dp.out1[3:0]"            output="DOA_REG[3:0].D"                />
+					<direct name="out1" input="DOA_REG[3:0].Q"                        output="RAMB36E1.DOADO[3:0]"/>
+
+					<direct name="addr2" input="RAMB36E1.ADDRBWRADDRL[14:2]" output="RAMB36E1_8192x4_dp.addr2"        />
+					<direct name="data2"    input="RAMB36E1.DIBDI[3:0]"        output="RAMB36E1_8192x4_dp.data2[3:0]"   />
+					<direct name="we2" input="RAMB36E1.WEBWEL[0]"          output="RAMB36E1_8192x4_dp.we2"          />
+					<direct name="out2" input="RAMB36E1_8192x4_dp.out2[3:0]"            output="DOB_REG[3:0].D"                />
+					<direct name="out2" input="DOB_REG[3:0].Q"                        output="RAMB36E1.DOBDO[3:0]"/>
+
+					<direct name="clk"      input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_8192x4_dp.clk[0]"       />
+					<complete name="clk"    input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"       />
+				</interconnect>
+			</mode>
+			<mode name="RAMB36E1_8192x4_REGA_dp">
+				<pb_type name="RAMB36E1_8192x4_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+					<input  name="addr1" num_pins="13" port_class="addr1"/>
+					<input  name="addr2" num_pins="13" port_class="addr2"/>
+					<input  name="data1" num_pins="4"  port_class="data_in1"/>
+					<input  name="data2" num_pins="4"  port_class="data_in2"/>
+					<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+					<input  name="we2"   num_pins="1"  port_class="write_en2"/>
+					<output name="out1"  num_pins="4"  port_class="data_out1"/>
+					<output name="out2"  num_pins="4"  port_class="data_out2"/>
+					<clock  name="clk"   num_pins="1"  port_class="clock"/>
+					<T_setup      value="0.480e-9" port="RAMB36E1_8192x4_dp.addr1" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_8192x4_dp.data1" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_8192x4_dp.we1"   clock="clk"/>
+					<T_setup      value="0.480e-9" port="RAMB36E1_8192x4_dp.addr2" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_8192x4_dp.data2" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_8192x4_dp.we2"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_8192x4_dp.out1"  clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_8192x4_dp.out2"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr1" input="RAMB36E1.ADDRARDADDRL[14:2]" output="RAMB36E1_8192x4_dp.addr1"        />
+					<direct name="data1"    input="RAMB36E1.DIADI[3:0]"        output="RAMB36E1_8192x4_dp.data1[3:0]"   />
+					<direct name="we1" input="RAMB36E1.WEAL[0]"            output="RAMB36E1_8192x4_dp.we1"          />
+					<direct name="out1" input="RAMB36E1_8192x4_dp.out1[3:0]"            output="DOA_REG[3:0].D"                />
+					<direct name="out1" input="DOA_REG[3:0].Q"                        output="RAMB36E1.DOADO[3:0]"/>
+
+					<direct name="addr2" input="RAMB36E1.ADDRBWRADDRL[14:2]" output="RAMB36E1_8192x4_dp.addr2"        />
+					<direct name="data2"    input="RAMB36E1.DIBDI[3:0]"        output="RAMB36E1_8192x4_dp.data2[3:0]"   />
+					<direct name="we2" input="RAMB36E1.WEBWEL[0]"          output="RAMB36E1_8192x4_dp.we2"          />
+					<direct name="out2" input="RAMB36E1_8192x4_dp.out2[3:0]"            output="RAMB36E1.DOBDO[3:0]"/>
+
+					<direct name="clk"      input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_8192x4_dp.clk[0]"       />
+					<complete name="clk"    input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"       />
+				</interconnect>
+			</mode>
+
+			<mode name="RAMB36E1_8192x4_REGB_dp">
+				<pb_type name="RAMB36E1_8192x4_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+					<input  name="addr1" num_pins="13" port_class="addr1"/>
+					<input  name="addr2" num_pins="13" port_class="addr2"/>
+					<input  name="data1" num_pins="4"  port_class="data_in1"/>
+					<input  name="data2" num_pins="4"  port_class="data_in2"/>
+					<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+					<input  name="we2"   num_pins="1"  port_class="write_en2"/>
+					<output name="out1"  num_pins="4"  port_class="data_out1"/>
+					<output name="out2"  num_pins="4"  port_class="data_out2"/>
+					<clock  name="clk"   num_pins="1"  port_class="clock"/>
+					<T_setup      value="0.480e-9" port="RAMB36E1_8192x4_dp.addr1" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_8192x4_dp.data1" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_8192x4_dp.we1"   clock="clk"/>
+					<T_setup      value="0.480e-9" port="RAMB36E1_8192x4_dp.addr2" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_8192x4_dp.data2" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_8192x4_dp.we2"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_8192x4_dp.out1"  clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_8192x4_dp.out2"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr1" input="RAMB36E1.ADDRARDADDRL[14:2]" output="RAMB36E1_8192x4_dp.addr1"        />
+					<direct name="data1"    input="RAMB36E1.DIADI[3:0]"        output="RAMB36E1_8192x4_dp.data1[3:0]"   />
+					<direct name="we1" input="RAMB36E1.WEAL[0]"            output="RAMB36E1_8192x4_dp.we1"          />
+					<direct name="out1" input="RAMB36E1_8192x4_dp.out1[3:0]"            output="RAMB36E1.DOADO[3:0]"/>
+
+					<direct name="addr2" input="RAMB36E1.ADDRBWRADDRL[14:2]" output="RAMB36E1_8192x4_dp.addr2"        />
+					<direct name="data2"    input="RAMB36E1.DIADI[3:0]"        output="RAMB36E1_8192x4_dp.data2[3:0]"   />
+					<direct name="we2" input="RAMB36E1.WEBWEL[0]"          output="RAMB36E1_8192x4_dp.we2"          />
+					<direct name="out2" input="RAMB36E1_8192x4_dp.out2[3:0]"            output="DOB_REG[3:0].D"                />
+					<direct name="out2" input="DOB_REG[3:0].Q"                        output="RAMB36E1.DOBDO[3:0]"/>
+
+					<direct name="clk"      input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_8192x4_dp.clk[0]"       />
+					<complete name="clk"    input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"       />
+				</interconnect>
+			</mode>
+			<mode name="RAMB36E1_8192x4_COMB_dp">
+				<pb_type name="RAMB36E1_8192x4_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+					<input  name="addr1" num_pins="13" port_class="addr1"/>
+					<input  name="addr2" num_pins="13" port_class="addr2"/>
+					<input  name="data1" num_pins="4"  port_class="data_in1"/>
+					<input  name="data2" num_pins="4"  port_class="data_in2"/>
+					<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+					<input  name="we2"   num_pins="1"  port_class="write_en2"/>
+					<output name="out1"  num_pins="4"  port_class="data_out1"/>
+					<output name="out2"  num_pins="4"  port_class="data_out2"/>
+					<clock  name="clk"   num_pins="1"  port_class="clock"/>
+					<T_setup      value="0.480e-9" port="RAMB36E1_8192x4_dp.addr1" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_8192x4_dp.data1" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_8192x4_dp.we1"   clock="clk"/>
+					<T_setup      value="0.480e-9" port="RAMB36E1_8192x4_dp.addr2" clock="clk"/>
+					<T_setup      value="0.707e-9" port="RAMB36E1_8192x4_dp.data2" clock="clk"/>
+					<T_setup      value="0.515e-9" port="RAMB36E1_8192x4_dp.we2"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_8192x4_dp.out1"  clock="clk"/>
+					<T_clock_to_Q max="2.073e-9"   port="RAMB36E1_8192x4_dp.out2"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="4" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="4" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr1" input="RAMB36E1.ADDRARDADDRL[14:2]" output="RAMB36E1_8192x4_dp.addr1"        />
+					<direct name="data1"    input="RAMB36E1.DIADI[3:0]"        output="RAMB36E1_8192x4_dp.data1[3:0]"   />
+					<direct name="we1" input="RAMB36E1.WEAL[0]"            output="RAMB36E1_8192x4_dp.we1"          />
+					<direct name="out1" input="RAMB36E1_8192x4_dp.out1[3:0]"            output="RAMB36E1.DOADO[3:0]"/>
+
+					<direct name="addr2" input="RAMB36E1.ADDRBWRADDRL[14:2]" output="RAMB36E1_8192x4_dp.addr2"        />
+					<direct name="data2"    input="RAMB36E1.DIADI[3:0]"        output="RAMB36E1_8192x4_dp.data2[3:0]"   />
+					<direct name="we2" input="RAMB36E1.WEBWEL[0]"          output="RAMB36E1_8192x4_dp.we2"          />
+					<direct name="out2" input="RAMB36E1_8192x4_dp.out2[3:0]"            output="RAMB36E1.DOBDO[3:0]"/>
+
+					<direct name="clk"      input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_8192x4_dp.clk[0]"       />
+					<complete name="clk"    input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"       />
+				</interconnect>
+			</mode>
+			<mode name="RAMB36E1_16384x2_REGAB_dp">
+				<pb_type name="RAMB36E1_16384x2_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+					<input  name="addr1" num_pins="14" port_class="addr1" />
+					<input  name="addr2" num_pins="14" port_class="addr2" />
+					<input  name="data1" num_pins="2"  port_class="data_in1" />
+					<input  name="data2" num_pins="2"  port_class="data_in2" />
+					<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+					<input  name="we2"   num_pins="1" port_class="write_en2"/>
+					<output name="out1"  num_pins="2"  port_class="data_out1"/>
+					<output name="out2"  num_pins="2"  port_class="data_out2"/>
+					<clock  name="clk"   num_pins="1"  port_class="clock"    />
+					<T_setup value="0.480e-9"    port="RAMB36E1_16384x2_dp.addr1" clock="clk"/>
+					<T_setup value="0.707e-9"    port="RAMB36E1_16384x2_dp.data1" clock="clk"/>
+					<T_setup value="0.515e-9"    port="RAMB36E1_16384x2_dp.we1"   clock="clk"/>
+					<T_setup value="0.480e-9"    port="RAMB36E1_16384x2_dp.addr2" clock="clk"/>
+					<T_setup value="0.707e-9"    port="RAMB36E1_16384x2_dp.data2" clock="clk"/>
+					<T_setup value="0.515e-9"    port="RAMB36E1_16384x2_dp.we2"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9" port="RAMB36E1_16384x2_dp.out1"  clock="clk"/>
+					<T_clock_to_Q max="2.073e-9" port="RAMB36E1_16384x2_dp.out2"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr1" input="RAMB36E1.ADDRARDADDRL[14:1]" output="RAMB36E1_16384x2_dp.addr1"     />
+					<direct name="data1"    input="RAMB36E1.DIADI[1:0]"          output="RAMB36E1_16384x2_dp.data1[1:0]"  />
+					<direct name="we1" input="RAMB36E1.WEAL[0]"            output="RAMB36E1_16384x2_dp.we1"       />
+					<direct name="out1" input="RAMB36E1_16384x2_dp.out1[1:0]"           output="DOA_REG[1:0].D"              />
+					<direct name="out1" input="DOA_REG[1:0].Q"                          output="RAMB36E1.DOADO[1:0]"/>
+
+					<direct name="addr2" input="RAMB36E1.ADDRBWRADDRL[14:1]" output="RAMB36E1_16384x2_dp.addr2"     />
+					<direct name="data2"    input="RAMB36E1.DIBDI[1:0]"          output="RAMB36E1_16384x2_dp.data2[1:0]"  />
+					<direct name="we2" input="RAMB36E1.WEBWEL[0]"          output="RAMB36E1_16384x2_dp.we2"       />
+					<direct name="out2" input="RAMB36E1_16384x2_dp.out2[1:0]"           output="DOB_REG[1:0].D"              />
+					<direct name="out2" input="DOB_REG[1:0].Q"                          output="RAMB36E1.DOBDO[1:0]"/>
+
+					<direct name="clk"      input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_16384x2_dp.clk[0]"    />
+					<complete name="clk"    input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"     />
+				</interconnect>
+			</mode>
+			<mode name="RAMB36E1_16384x2_REGA_dp">
+				<pb_type name="RAMB36E1_16384x2_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+					<input  name="addr1" num_pins="14" port_class="addr1" />
+					<input  name="addr2" num_pins="14" port_class="addr2" />
+					<input  name="data1" num_pins="2"  port_class="data_in1" />
+					<input  name="data2" num_pins="2"  port_class="data_in2" />
+					<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+					<input  name="we2"   num_pins="1" port_class="write_en2"/>
+					<output name="out1"  num_pins="2"  port_class="data_out1"/>
+					<output name="out2"  num_pins="2"  port_class="data_out2"/>
+					<clock  name="clk"   num_pins="1"  port_class="clock"    />
+					<T_setup value="0.480e-9"    port="RAMB36E1_16384x2_dp.addr1" clock="clk"/>
+					<T_setup value="0.707e-9"    port="RAMB36E1_16384x2_dp.data1" clock="clk"/>
+					<T_setup value="0.515e-9"    port="RAMB36E1_16384x2_dp.we1"   clock="clk"/>
+					<T_setup value="0.480e-9"    port="RAMB36E1_16384x2_dp.addr2" clock="clk"/>
+					<T_setup value="0.707e-9"    port="RAMB36E1_16384x2_dp.data2" clock="clk"/>
+					<T_setup value="0.515e-9"    port="RAMB36E1_16384x2_dp.we2"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9" port="RAMB36E1_16384x2_dp.out1"  clock="clk"/>
+					<T_clock_to_Q max="2.073e-9" port="RAMB36E1_16384x2_dp.out2"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr1" input="RAMB36E1.ADDRARDADDRL[14:1]" output="RAMB36E1_16384x2_dp.addr1"     />
+					<direct name="data1"    input="RAMB36E1.DIADI[1:0]"          output="RAMB36E1_16384x2_dp.data1[1:0]"  />
+					<direct name="we1" input="RAMB36E1.WEAL[0]"            output="RAMB36E1_16384x2_dp.we1"       />
+					<direct name="out1" input="RAMB36E1_16384x2_dp.out1[1:0]"           output="DOA_REG[1:0].D"              />
+					<direct name="out1" input="DOA_REG[1:0].Q"                          output="RAMB36E1.DOADO[1:0]"/>
+
+					<direct name="addr2" input="RAMB36E1.ADDRBWRADDRL[14:1]" output="RAMB36E1_16384x2_dp.addr2"     />
+					<direct name="data2"    input="RAMB36E1.DIBDI[1:0]"          output="RAMB36E1_16384x2_dp.data2[1:0]"  />
+					<direct name="we2" input="RAMB36E1.WEBWEL[0]"          output="RAMB36E1_16384x2_dp.we2"       />
+					<direct name="out2" input="RAMB36E1_16384x2_dp.out2[1:0]"             output="RAMB36E1.DOBDO[1:0]"/>
+
+					<direct name="clk"      input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_16384x2_dp.clk[0]"    />
+					<complete name="clk"    input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"     />
+				</interconnect>
+			</mode>
+			<mode name="RAMB36E1_16384x2_REGB_dp">
+				<pb_type name="RAMB36E1_16384x2_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+					<input  name="addr1" num_pins="14" port_class="addr1" />
+					<input  name="addr2" num_pins="14" port_class="addr2" />
+					<input  name="data1" num_pins="2"  port_class="data_in1" />
+					<input  name="data2" num_pins="2"  port_class="data_in2" />
+					<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+					<input  name="we2"   num_pins="1" port_class="write_en2"/>
+					<output name="out1"  num_pins="2"  port_class="data_out1"/>
+					<output name="out2"  num_pins="2"  port_class="data_out2"/>
+					<clock  name="clk"   num_pins="1"  port_class="clock"    />
+					<T_setup value="0.480e-9"    port="RAMB36E1_16384x2_dp.addr1" clock="clk"/>
+					<T_setup value="0.707e-9"    port="RAMB36E1_16384x2_dp.data1" clock="clk"/>
+					<T_setup value="0.515e-9"    port="RAMB36E1_16384x2_dp.we1"   clock="clk"/>
+					<T_setup value="0.480e-9"    port="RAMB36E1_16384x2_dp.addr2" clock="clk"/>
+					<T_setup value="0.707e-9"    port="RAMB36E1_16384x2_dp.data2" clock="clk"/>
+					<T_setup value="0.515e-9"    port="RAMB36E1_16384x2_dp.we2"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9" port="RAMB36E1_16384x2_dp.out1"  clock="clk"/>
+					<T_clock_to_Q max="2.073e-9" port="RAMB36E1_16384x2_dp.out2"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr1" input="RAMB36E1.ADDRARDADDRL[14:1]" output="RAMB36E1_16384x2_dp.addr1"     />
+					<direct name="data1"    input="RAMB36E1.DIADI[1:0]"          output="RAMB36E1_16384x2_dp.data1[1:0]"  />
+					<direct name="we1" input="RAMB36E1.WEAL[0]"            output="RAMB36E1_16384x2_dp.we1"       />
+					<direct name="out1" input="RAMB36E1_16384x2_dp.out1[1:0]"             output="RAMB36E1.DOADO[1:0]"/>
+
+					<direct name="addr2" input="RAMB36E1.ADDRBWRADDRL[14:1]" output="RAMB36E1_16384x2_dp.addr2"     />
+					<direct name="data2"    input="RAMB36E1.DIBDI[1:0]"          output="RAMB36E1_16384x2_dp.data2[1:0]"  />
+					<direct name="we2" input="RAMB36E1.WEBWEL[0]"          output="RAMB36E1_16384x2_dp.we2"       />
+					<direct name="out2" input="RAMB36E1_16384x2_dp.out2[1:0]"           output="DOB_REG[1:0].D"              />
+					<direct name="out2" input="DOB_REG[1:0].Q"                          output="RAMB36E1.DOBDO[1:0]"/>
+
+					<direct name="clk"      input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_16384x2_dp.clk[0]"    />
+					<complete name="clk"    input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"     />
+				</interconnect>
+			</mode>
+
+			<mode name="RAMB36E1_16384x2_COMB_dp">
+				<pb_type name="RAMB36E1_16384x2_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+					<input  name="addr1" num_pins="14" port_class="addr1" />
+					<input  name="addr2" num_pins="14" port_class="addr2" />
+					<input  name="data1" num_pins="2"  port_class="data_in1" />
+					<input  name="data2" num_pins="2"  port_class="data_in2" />
+					<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+					<input  name="we2"   num_pins="1" port_class="write_en2"/>
+					<output name="out1"  num_pins="2"  port_class="data_out1"/>
+					<output name="out2"  num_pins="2"  port_class="data_out2"/>
+					<clock  name="clk"   num_pins="1"  port_class="clock"    />
+					<T_setup value="0.480e-9"    port="RAMB36E1_16384x2_dp.addr1" clock="clk"/>
+					<T_setup value="0.707e-9"    port="RAMB36E1_16384x2_dp.data1" clock="clk"/>
+					<T_setup value="0.515e-9"    port="RAMB36E1_16384x2_dp.we1"   clock="clk"/>
+					<T_setup value="0.480e-9"    port="RAMB36E1_16384x2_dp.addr2" clock="clk"/>
+					<T_setup value="0.707e-9"    port="RAMB36E1_16384x2_dp.data2" clock="clk"/>
+					<T_setup value="0.515e-9"    port="RAMB36E1_16384x2_dp.we2"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9" port="RAMB36E1_16384x2_dp.out1"  clock="clk"/>
+					<T_clock_to_Q max="2.073e-9" port="RAMB36E1_16384x2_dp.out2"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr1" input="RAMB36E1.ADDRARDADDRL[14:1]" output="RAMB36E1_16384x2_dp.addr1"     />
+					<direct name="data1"    input="RAMB36E1.DIADI[1:0]"          output="RAMB36E1_16384x2_dp.data1[1:0]"  />
+					<direct name="we1" input="RAMB36E1.WEAL[0]"            output="RAMB36E1_16384x2_dp.we1"       />
+					<direct name="out1" input="RAMB36E1_16384x2_dp.out1[1:0]"             output="RAMB36E1.DOADO[1:0]"/>
+
+					<direct name="addr2" input="RAMB36E1.ADDRBWRADDRL[14:1]" output="RAMB36E1_16384x2_dp.addr2"     />
+					<direct name="data2"    input="RAMB36E1.DIBDI[1:0]"          output="RAMB36E1_16384x2_dp.data2[1:0]"  />
+					<direct name="we2" input="RAMB36E1.WEBWEL[0]"          output="RAMB36E1_16384x2_dp.we2"       />
+					<direct name="out2" input="RAMB36E1_16384x2_dp.out2[1:0]"             output="RAMB36E1.DOBDO[1:0]"/>
+
+					<direct name="clk"      input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_16384x2_dp.clk[0]"    />
+					<complete name="clk"    input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"     />
+				</interconnect>
+			</mode>
+			<mode name="RAMB36E1_32768x1_REGAB_dp">
+				<pb_type name="RAMB36E1_32768x1_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+					<input  name="addr1" num_pins="15" port_class="addr1" />
+					<input  name="addr2" num_pins="15" port_class="addr2" />
+					<input  name="data1" num_pins="1"  port_class="data_in1" />
+					<input  name="data2" num_pins="1"  port_class="data_in2" />
+					<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+					<input  name="we2"   num_pins="1" port_class="write_en2"/>
+					<output name="out1"  num_pins="1"  port_class="data_out1"/>
+					<output name="out2"  num_pins="1"  port_class="data_out2"/>
+					<clock  name="clk"   num_pins="1"  port_class="clock"    />
+					<T_setup value="0.480e-9"    port="RAMB36E1_32768x1_dp.addr1" clock="clk"/>
+					<T_setup value="0.707e-9"    port="RAMB36E1_32768x1_dp.data1" clock="clk"/>
+					<T_setup value="0.515e-9"    port="RAMB36E1_32768x1_dp.we1"   clock="clk"/>
+					<T_setup value="0.480e-9"    port="RAMB36E1_32768x1_dp.addr2" clock="clk"/>
+					<T_setup value="0.707e-9"    port="RAMB36E1_32768x1_dp.data2" clock="clk"/>
+					<T_setup value="0.515e-9"    port="RAMB36E1_32768x1_dp.we2"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9" port="RAMB36E1_32768x1_dp.out1"  clock="clk"/>
+					<T_clock_to_Q max="2.073e-9" port="RAMB36E1_32768x1_dp.out2"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr1" input="RAMB36E1.ADDRARDADDRL[14:0]" output="RAMB36E1_32768x1_dp.addr1"     />
+					<direct name="data1"    input="RAMB36E1.DIADI[0]"          output="RAMB36E1_32768x1_dp.data1"     />
+					<direct name="we1" input="RAMB36E1.WEAL[0]"            output="RAMB36E1_32768x1_dp.we1"       />
+					<direct name="out1" input="RAMB36E1_32768x1_dp.out1"                output="DOA_REG[0].D"                />
+					<direct name="out1" input="DOA_REG[0].Q"                          output="RAMB36E1.DOADO[0]"/>
+
+					<direct name="addr2" input="RAMB36E1.ADDRBWRADDRL[14:0]" output="RAMB36E1_32768x1_dp.addr2"     />
+					<direct name="data2"    input="RAMB36E1.DIBDI[0]"          output="RAMB36E1_32768x1_dp.data2"     />
+					<direct name="we2" input="RAMB36E1.WEBWEL[0]"          output="RAMB36E1_32768x1_dp.we2"       />
+					<direct name="out2" input="RAMB36E1_32768x1_dp.out2"                output="DOB_REG[0].D"                />
+					<direct name="out2" input="DOB_REG[0].Q"                          output="RAMB36E1.DOBDO[0]"/>
+					
+					<direct name="clk"      input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_32768x1_dp.clk[0]"    />
+					<complete name="clk"    input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"     />
+				</interconnect>
+			</mode>
+			<mode name="RAMB36E1_32768x1_REGA_dp">
+				<pb_type name="RAMB36E1_32768x1_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+					<input  name="addr1" num_pins="15" port_class="addr1" />
+					<input  name="addr2" num_pins="15" port_class="addr2" />
+					<input  name="data1" num_pins="1"  port_class="data_in1" />
+					<input  name="data2" num_pins="1"  port_class="data_in2" />
+					<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+					<input  name="we2"   num_pins="1" port_class="write_en2"/>
+					<output name="out1"  num_pins="1"  port_class="data_out1"/>
+					<output name="out2"  num_pins="1"  port_class="data_out2"/>
+					<clock  name="clk"   num_pins="1"  port_class="clock"    />
+					<T_setup value="0.480e-9"    port="RAMB36E1_32768x1_dp.addr1" clock="clk"/>
+					<T_setup value="0.707e-9"    port="RAMB36E1_32768x1_dp.data1" clock="clk"/>
+					<T_setup value="0.515e-9"    port="RAMB36E1_32768x1_dp.we1"   clock="clk"/>
+					<T_setup value="0.480e-9"    port="RAMB36E1_32768x1_dp.addr2" clock="clk"/>
+					<T_setup value="0.707e-9"    port="RAMB36E1_32768x1_dp.data2" clock="clk"/>
+					<T_setup value="0.515e-9"    port="RAMB36E1_32768x1_dp.we2"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9" port="RAMB36E1_32768x1_dp.out1"  clock="clk"/>
+					<T_clock_to_Q max="2.073e-9" port="RAMB36E1_32768x1_dp.out2"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr1" input="RAMB36E1.ADDRARDADDRL[14:0]" output="RAMB36E1_32768x1_dp.addr1"     />
+					<direct name="data1"    input="RAMB36E1.DIADI[0]"          output="RAMB36E1_32768x1_dp.data1"     />
+					<direct name="we1" input="RAMB36E1.WEAL[0]"            output="RAMB36E1_32768x1_dp.we1"       />
+					<direct name="out1" input="RAMB36E1_32768x1_dp.out1"                output="DOA_REG[0].D"                />
+					<direct name="out1" input="DOA_REG[0].Q"                          output="RAMB36E1.DOADO[0]"/>
+
+					<direct name="addr2" input="RAMB36E1.ADDRBWRADDRL[14:0]" output="RAMB36E1_32768x1_dp.addr2"     />
+					<direct name="data2"    input="RAMB36E1.DIBDI[0]"          output="RAMB36E1_32768x1_dp.data2"     />
+					<direct name="we2" input="RAMB36E1.WEBWEL[0]"          output="RAMB36E1_32768x1_dp.we2"       />
+					<direct name="out2" input="RAMB36E1_32768x1_dp.out2"                output="RAMB36E1.DOBDO[0]"/>
+					
+					<direct name="clk"      input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_32768x1_dp.clk[0]"    />
+					<complete name="clk"    input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"     />
+				</interconnect>
+			</mode>
+			<mode name="RAMB36E1_32768x1_REGB_dp">
+				<pb_type name="RAMB36E1_32768x1_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+					<input  name="addr1" num_pins="15" port_class="addr1" />
+					<input  name="addr2" num_pins="15" port_class="addr2" />
+					<input  name="data1" num_pins="1"  port_class="data_in1" />
+					<input  name="data2" num_pins="1"  port_class="data_in2" />
+					<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+					<input  name="we2"   num_pins="1" port_class="write_en2"/>
+					<output name="out1"  num_pins="1"  port_class="data_out1"/>
+					<output name="out2"  num_pins="1"  port_class="data_out2"/>
+					<clock  name="clk"   num_pins="1"  port_class="clock"    />
+					<T_setup value="0.480e-9"    port="RAMB36E1_32768x1_dp.addr1" clock="clk"/>
+					<T_setup value="0.707e-9"    port="RAMB36E1_32768x1_dp.data1" clock="clk"/>
+					<T_setup value="0.515e-9"    port="RAMB36E1_32768x1_dp.we1"   clock="clk"/>
+					<T_setup value="0.480e-9"    port="RAMB36E1_32768x1_dp.addr2" clock="clk"/>
+					<T_setup value="0.707e-9"    port="RAMB36E1_32768x1_dp.data2" clock="clk"/>
+					<T_setup value="0.515e-9"    port="RAMB36E1_32768x1_dp.we2"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9" port="RAMB36E1_32768x1_dp.out1"  clock="clk"/>
+					<T_clock_to_Q max="2.073e-9" port="RAMB36E1_32768x1_dp.out2"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr1" input="RAMB36E1.ADDRARDADDRL[14:0]" output="RAMB36E1_32768x1_dp.addr1"     />
+					<direct name="data1"    input="RAMB36E1.DIADI[0]"          output="RAMB36E1_32768x1_dp.data1"     />
+					<direct name="we1" input="RAMB36E1.WEAL[0]"            output="RAMB36E1_32768x1_dp.we1"       />
+					<direct name="out1" input="RAMB36E1_32768x1_dp.out1"                output="RAMB36E1.DOADO[0]"/>
+
+					<direct name="addr2" input="RAMB36E1.ADDRBWRADDRL[14:0]" output="RAMB36E1_32768x1_dp.addr2"     />
+					<direct name="data2"    input="RAMB36E1.DIBDI[0]"          output="RAMB36E1_32768x1_dp.data2"     />
+					<direct name="we2" input="RAMB36E1.WEBWEL[0]"          output="RAMB36E1_32768x1_dp.we2"       />
+					<direct name="out2" input="RAMB36E1_32768x1_dp.out2"                output="DOB_REG[0].D"                />
+					<direct name="out2" input="DOB_REG[0].Q"                          output="RAMB36E1.DOBDO[0]"/>
+					
+					<direct name="clk"      input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_32768x1_dp.clk[0]"    />
+					<complete name="clk"    input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"     />
+				</interconnect>
+			</mode>
+			<mode name="RAMB36E1_32768x1_COMB_dp">
+				<pb_type name="RAMB36E1_32768x1_dp" blif_model=".subckt dual_port_ram" class="memory" num_pb="1">
+					<input  name="addr1" num_pins="15" port_class="addr1" />
+					<input  name="addr2" num_pins="15" port_class="addr2" />
+					<input  name="data1" num_pins="1"  port_class="data_in1" />
+					<input  name="data2" num_pins="1"  port_class="data_in2" />
+					<input  name="we1"   num_pins="1"  port_class="write_en1"/>
+					<input  name="we2"   num_pins="1" port_class="write_en2"/>
+					<output name="out1"  num_pins="1"  port_class="data_out1"/>
+					<output name="out2"  num_pins="1"  port_class="data_out2"/>
+					<clock  name="clk"   num_pins="1"  port_class="clock"    />
+					<T_setup value="0.480e-9"    port="RAMB36E1_32768x1_dp.addr1" clock="clk"/>
+					<T_setup value="0.707e-9"    port="RAMB36E1_32768x1_dp.data1" clock="clk"/>
+					<T_setup value="0.515e-9"    port="RAMB36E1_32768x1_dp.we1"   clock="clk"/>
+					<T_setup value="0.480e-9"    port="RAMB36E1_32768x1_dp.addr2" clock="clk"/>
+					<T_setup value="0.707e-9"    port="RAMB36E1_32768x1_dp.data2" clock="clk"/>
+					<T_setup value="0.515e-9"    port="RAMB36E1_32768x1_dp.we2"   clock="clk"/>
+					<T_clock_to_Q max="2.073e-9" port="RAMB36E1_32768x1_dp.out1"  clock="clk"/>
+					<T_clock_to_Q max="2.073e-9" port="RAMB36E1_32768x1_dp.out2"  clock="clk"/>
+				</pb_type>
+				<pb_type name="DOA_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOA_REG.Q" clock="clk"/>
+				</pb_type>
+				<pb_type name="DOB_REG" blif_model=".latch" num_pb="36" class="flipflop">
+					<input  name="D"   num_pins="1" port_class="D"    />
+					<output name="Q"   num_pins="1" port_class="Q"    />
+					<clock  name="clk" num_pins="1" port_class="clock"/>
+					<T_clock_to_Q max="0.54e-9" port="DOB_REG.Q" clock="clk"/>
+				</pb_type>
+				<interconnect>
+					<direct name="addr1" input="RAMB36E1.ADDRARDADDRL[14:0]" output="RAMB36E1_32768x1_dp.addr1"     />
+					<direct name="data1"    input="RAMB36E1.DIADI[0]"          output="RAMB36E1_32768x1_dp.data1"     />
+					<direct name="we1" input="RAMB36E1.WEAL[0]"            output="RAMB36E1_32768x1_dp.we1"       />
+					<direct name="out1" input="RAMB36E1_32768x1_dp.out1"                output="RAMB36E1.DOADO[0]"/>
+
+					<direct name="addr2" input="RAMB36E1.ADDRBWRADDRL[14:0]" output="RAMB36E1_32768x1_dp.addr2"     />
+					<direct name="data2"    input="RAMB36E1.DIBDI[0]"          output="RAMB36E1_32768x1_dp.data2"     />
+					<direct name="we2" input="RAMB36E1.WEBWEL[0]"          output="RAMB36E1_32768x1_dp.we2"       />
+					<direct name="out2" input="RAMB36E1_32768x1_dp.out2"                output="RAMB36E1.DOBDO[0]"/>
+					
+					<direct name="clk"      input="RAMB36E1.CLKARDCLKL"         output="RAMB36E1_32768x1_dp.clk[0]"    />
+					<complete name="clk"    input="RAMB36E1.CLKARDCLKL"         output="DOA_REG.clk DOB_REG.clk"     />
+				</interconnect>
+			</mode>
+
+			<fc default_in_type="abs" default_in_val="1" default_out_type="abs" default_out_val="1"/>
+			<pinlocations pattern="spread"/>
+			<gridlocations>
+				<loc type="col" start="5" priority="2"/>
+				<loc type="col" start="16" priority="2"/>
+				<loc type="col" start="25" priority="2"/>
+				<loc type="col" start="36" priority="2"/>
+				<loc type="col" start="62" priority="2"/>
+				<loc type="col" start="73" priority="2"/>
+				<loc type="col" start="82" priority="2"/>
+				<loc type="col" start="93" priority="2"/>
+				<loc type="col" start="101" priority="2"/>
+			</gridlocations>
+		</pb_type>
+		<pb_type name="BUFG" height="2" capacity="16">
+			<input name="I" num_pins="2"/>
+			<input name="S" num_pins="2"/>
+			<input name="CE" num_pins="2"/>
+			<input name="IGNORE" num_pins="2"/>
+
+			<!-- 8 -->
+			<output name="O" num_pins="1"/>
+
+			<!-- 9 -->
+			<output name="GND_WIRE" num_pins="1"/>
+			<output name="VCC_WIRE" num_pins="1"/>
+
+			<pb_type name="BUFGCTRL" blif_model=".subckt bufgctrl" num_pb="1">
+				<input name="i"      num_pins="2"/>
+				<input name="s"      num_pins="2"/>
+				<input name="ce"     num_pins="2"/>
+				<input name="ignore" num_pins="2"/>
+				<output name="o"     num_pins="1"/>
+			</pb_type>
+			<interconnect>
+				<direct name="i"      input="BUFG.I"      output="BUFGCTRL.i"                />
+				<direct name="s"      input="BUFG.S"      output="BUFGCTRL.s"                />
+				<direct name="ce"     input="BUFG.CE"     output="BUFGCTRL.ce"               />
+				<direct name="ignore" input="BUFG.IGNORE" output="BUFGCTRL.ignore"           />
+				<direct name="o"      input="BUFGCTRL.o"  output="BUFG.O"                />
+			</interconnect>
+			<fc default_in_type="abs" default_in_val="1" default_out_type="abs" default_out_val="1"/>
+			<pinlocations pattern="spread"/>
+			<gridlocations>
+				<loc type="col" start="52" priority="2"/>
+			</gridlocations>
+		</pb_type>
+	</complexblocklist>
+</architecture>
diff --git vtr_flow/arch/xilinx/xc6vlx240tff1156_include.xdl vtr_flow/arch/xilinx/xc6vlx240tff1156_include.xdl
new file mode 100644
index 0000000..4bc5958
--- /dev/null
+++ vtr_flow/arch/xilinx/xc6vlx240tff1156_include.xdl
@@ -0,0 +1,1529 @@
+# =======================================================
+# The syntax for the design statement is:                
+# design <design_name> <part> <ncd version>;             
+# or                                                     
+# design <design_name> <device> <package> <speed> <ncd_version>
+# =======================================================
+design "" xc6vlx240tff1156-1 v3.2 ;
+
+
+inst "GTXE1_ML_REPLICATED_10_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate10" "GTXE1",placed GTX_X102Y0 GTXE1_X0Y0  ,
+  cfg " AC_CAP_DIS::TRUE ALIGN_COMMA_WORD::1 CHAN_BOND_1_MAX_SKEW::7 CHAN_BOND_2_MAX_SKEW::1
+       CHAN_BOND_KEEP_ALIGN::FALSE CHAN_BOND_SEQ_2_USE::FALSE CHAN_BOND_SEQ_LEN::1
+       CLK_CORRECT_USE::TRUE CLK_COR_ADJ_LEN::1 CLK_COR_DET_LEN::1 CLK_COR_INSERT_IDLE_FLAG::FALSE
+       CLK_COR_KEEP_IDLE::FALSE CLK_COR_MAX_LAT::20 CLK_COR_MIN_LAT::18
+       CLK_COR_PRECEDENCE::TRUE CLK_COR_REPEAT_WAIT::0 CLK_COR_SEQ_2_USE::FALSE
+       COMMA_DOUBLE::FALSE DCLKINV::DCLK_B DEC_MCOMMA_DETECT::TRUE DEC_PCOMMA_DETECT::TRUE
+       DEC_VALID_COMMA_ONLY::TRUE DFE_DRP_EN::FALSE GEN_RXUSRCLK::TRUE GEN_TXUSRCLK::TRUE
+       GREFCLKRXINV::#OFF GREFCLKTXINV::#OFF GTX_CFG_PWRUP::FALSE LOOPBACK_DRP_EN::FALSE
+       MASTER_DRP_EN::FALSE MCOMMA_DETECT::TRUE PCI_EXPRESS_MODE::FALSE
+       PCOMMA_DETECT::TRUE PDELIDLE_DRP_EN::FALSE PHASEALIGN_DRP_EN::FALSE
+       PLL_DRP_EN::FALSE PMA_CAS_CLK_EN::FALSE POLARITY_DRP_EN::FALSE PRBS_DRP_EN::FALSE
+       RCV_TERM_GND::FALSE RCV_TERM_VTTRX::FALSE RESET_DRP_EN::FALSE RXBUF_OVFL_THRESH::61
+       RXBUF_OVRD_THRESH::FALSE RXBUF_UDFL_THRESH::4 RXGEARBOX_USE::FALSE
+       RXPLL_DIVSEL45_FB::5 RXPLL_DIVSEL_FB::2 RXPLL_DIVSEL_OUT::1 RXPLL_DIVSEL_REF::1
+       RXPLL_STARTUP_EN::TRUE RXRECCLK_CTRL::CLKTESTSIG1 RXUSRCLK2INV::RXUSRCLK2_B
+       RXUSRCLKINV::RXUSRCLK_B RX_BUFFER_USE::TRUE RX_CDR_FORCE_ROTATE::FALSE
+       RX_CLK25_DIVIDER::6 RX_DATA_WIDTH::20 RX_DECODE_SEQ_MATCH::TRUE RX_EN_IDLE_HOLD_CDR::FALSE
+       RX_EN_IDLE_HOLD_DFE::TRUE RX_EN_IDLE_RESET_BUF::TRUE RX_EN_IDLE_RESET_FR::TRUE
+       RX_EN_IDLE_RESET_PH::TRUE RX_EN_MODE_RESET_BUF::TRUE RX_EN_RATE_RESET_BUF::TRUE
+       RX_EN_REALIGN_RESET_BUF::FALSE RX_EN_REALIGN_RESET_BUF2::FALSE RX_FIFO_ADDR_MODE::FULL
+       RX_LOSS_OF_SYNC_FSM::FALSE RX_LOS_INVALID_INCR::1 RX_LOS_THRESHOLD::4
+       RX_OVERSAMPLE_MODE::FALSE RX_SLIDE_AUTO_WAIT::5 RX_SLIDE_MODE::OFF
+       RX_XCLK_SEL::RXREC SAS_MAX_COMSAS::52 SAS_MIN_COMSAS::40 SATA_MAX_BURST::7
+       SATA_MAX_INIT::22 SATA_MAX_WAKE::7 SATA_MIN_BURST::4 SATA_MIN_INIT::12
+       SATA_MIN_WAKE::4 SCANCLKINV::#OFF SHOW_REALIGN_COMMA::TRUE TERMINATION_OVRD::FALSE
+       TSTCLK0INV::TSTCLK0_B TSTCLK1INV::TSTCLK1_B TXDRIVE_DRP_EN::FALSE
+       TXDRIVE_LOOPBACK_HIZ::FALSE TXDRIVE_LOOPBACK_PD::FALSE TXGEARBOX_USE::FALSE
+       TXOUTCLKPCS_SEL::0 TXOUTCLK_CTRL::CLKTESTSIG0 TXPLL_DIVSEL45_FB::5
+       TXPLL_DIVSEL_FB::2 TXPLL_DIVSEL_OUT::1 TXPLL_DIVSEL_REF::1 TXPLL_STARTUP_EN::TRUE
+       TXUSRCLK2INV::TXUSRCLK2_B TXUSRCLKINV::TXUSRCLK_B TX_BUFFER_USE::TRUE
+       TX_CLK25_DIVIDER::6 TX_CLK_SOURCE::RXPLL TX_DATA_WIDTH::20 TX_DRIVE_MODE::DIRECT
+       TX_EN_RATE_RESET_BUF::TRUE TX_OVERSAMPLE_MODE::FALSE TX_XCLK_SEL::TXUSR
+       GTXE1:GTXE1_ML_REPLICATED_10_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate10:
+         A_DFECLKDLYADJ::000000  A_DFEDLYOVRD::0  A_DFETAP1::00000  A_DFETAP2::00000
+        A_DFETAP3::0000  A_DFETAP4::0000  A_DFETAPOVRD::0  A_GTXRXRESET::0
+        A_GTXTXRESET::0  A_LOOPBACK::000  A_PLLCLKRXRESET::0  A_PLLCLKTXRESET::0
+        A_PLLRXRESET::0  A_PLLTXRESET::0  A_PRBSCNTRESET::0  A_RXBUFRESET::0
+        A_RXCDRFREQRESET::0  A_RXCDRHOLD::0  A_RXCDRPHASERESET::0  A_RXCDRRESET::0
+        A_RXDFERESET::0  A_RXENPMAPHASEALIGN::0  A_RXENPRBSTST::000  A_RXENSAMPLEALIGN::0
+        A_RXEQMIX::0000000000  A_RXPLLLKDETEN::0  A_RXPLLPOWERDOWN::0  A_RXPMASETPHASE::0
+        A_RXPOLARITY::0  A_RXPOWERDOWN::00  A_RXRESET::0  A_TXBUFDIFFCTRL::010
+        A_TXDEEMPH::0  A_TXDIFFCTRL::0000  A_TXELECIDLE::0  A_TXENPMAPHASEALIGN::0
+        A_TXENPRBSTST::000  A_TXMARGIN::010  A_TXPLLLKDETEN::0  A_TXPLLPOWERDOWN::0
+        A_TXPMASETPHASE::0  A_TXPOLARITY::0  A_TXPOSTEMPHASIS::00000  A_TXPOWERDOWN::00
+        A_TXPRBSFORCEERR::0  A_TXPREEMPHASIS::0000  A_TXRESET::0  A_TXSWING::0
+        BGTEST_CFG::00  BIAS_CFG::00000  CDR_PH_ADJ_TIME::10100  CHAN_BOND_SEQ_1_1::0101111100
+        CHAN_BOND_SEQ_1_2::0001001010  CHAN_BOND_SEQ_1_3::0001001010  CHAN_BOND_SEQ_1_4::0110111100
+        CHAN_BOND_SEQ_1_ENABLE::1111  CHAN_BOND_SEQ_2_1::0100111100  CHAN_BOND_SEQ_2_2::0100111100
+        CHAN_BOND_SEQ_2_3::0110111100  CHAN_BOND_SEQ_2_4::0100111100  CHAN_BOND_SEQ_2_CFG::00000
+        CHAN_BOND_SEQ_2_ENABLE::1111  CLK_COR_SEQ_1_1::0100011100  CLK_COR_SEQ_1_2::0000000000
+        CLK_COR_SEQ_1_3::0000000000  CLK_COR_SEQ_1_4::0000000000  CLK_COR_SEQ_1_ENABLE::1111
+        CLK_COR_SEQ_2_1::0000000000  CLK_COR_SEQ_2_2::0000000000  CLK_COR_SEQ_2_3::0000000000
+        CLK_COR_SEQ_2_4::0000000000  CLK_COR_SEQ_2_ENABLE::1111  CM_TRIM::01
+        COMMA_10B_ENABLE::1111111111  COM_BURST_VAL::1111  DFE_CAL_TIME::01100
+        DFE_CFG::00011011  GEARBOX_ENDEC::000  MCOMMA_10B_VALUE::1010000011
+        OOBDETECT_THRESHOLD::011  PCOMMA_10B_VALUE::0101111100  PMA_CDR_SCAN::640404c
+        PMA_CFG::0040000040000000003  PMA_RXSYNC_CFG::00  PMA_RX_CFG::05ce048
+        PMA_TX_CFG::00082  POWER_SAVE::0000110100  RXPLL_COM_CFG::21680a
+        RXPLL_CP_CFG::00  RXPLL_LKDET_CFG::111  RXPRBSERR_LOOPBACK::0  RXRECCLK_DLY::0000000000
+        RXUSRCLK_DLY::0000  RX_DLYALIGN_CTRINC::0100  RX_DLYALIGN_EDGESET::00110
+        RX_DLYALIGN_LPFINC::0111  RX_DLYALIGN_MONSEL::000  RX_DLYALIGN_OVRDSETTING::00000000
+        RX_EYE_OFFSET::4c  RX_EYE_SCANMODE::00  RX_IDLE_HI_CNT::1000  RX_IDLE_LO_CNT::0000
+        SATA_BURST_VAL::100  SATA_IDLE_VAL::100  TERMINATION_CTRL::10100
+        TRANS_TIME_FROM_P2::03c  TRANS_TIME_NON_P2::19  TRANS_TIME_RATE::0e
+        TRANS_TIME_TO_P2::064  TST_ATTR::00000000  TXOUTCLK_DLY::0000000000
+        TXPLL_COM_CFG::21680a  TXPLL_CP_CFG::00  TXPLL_LKDET_CFG::111  TXPLL_SATA::00
+        TX_BYTECLK_CFG::00  TX_DEEMPH_0::11010  TX_DEEMPH_1::10000  TX_DETECT_RX_CFG::1832
+        TX_DLYALIGN_CTRINC::0100  TX_DLYALIGN_LPFINC::0110  TX_DLYALIGN_MONSEL::000
+        TX_DLYALIGN_OVRDSETTING::10000000  TX_IDLE_ASSERT_DELAY::100  TX_IDLE_DEASSERT_DELAY::010
+        TX_MARGIN_FULL_0::1001110  TX_MARGIN_FULL_1::1001001  TX_MARGIN_FULL_2::1000101
+        TX_MARGIN_FULL_3::1000010  TX_MARGIN_FULL_4::1000000  TX_MARGIN_LOW_0::1000110
+        TX_MARGIN_LOW_1::1000100  TX_MARGIN_LOW_2::1000010  TX_MARGIN_LOW_3::1000000
+        TX_MARGIN_LOW_4::1000000  TX_PMADATA_OPT::0  TX_TDCC_CFG::11  TX_USRCLK_CFG::00
+        USR_CODE_ERR_CLR::0 "
+  ;
+inst "GTXE1_ML_REPLICATED_11_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate11" "GTXE1",placed GTX_X102Y10 GTXE1_X0Y1  ,
+  cfg " AC_CAP_DIS::TRUE ALIGN_COMMA_WORD::1 CHAN_BOND_1_MAX_SKEW::7 CHAN_BOND_2_MAX_SKEW::1
+       CHAN_BOND_KEEP_ALIGN::FALSE CHAN_BOND_SEQ_2_USE::FALSE CHAN_BOND_SEQ_LEN::1
+       CLK_CORRECT_USE::TRUE CLK_COR_ADJ_LEN::1 CLK_COR_DET_LEN::1 CLK_COR_INSERT_IDLE_FLAG::FALSE
+       CLK_COR_KEEP_IDLE::FALSE CLK_COR_MAX_LAT::20 CLK_COR_MIN_LAT::18
+       CLK_COR_PRECEDENCE::TRUE CLK_COR_REPEAT_WAIT::0 CLK_COR_SEQ_2_USE::FALSE
+       COMMA_DOUBLE::FALSE DCLKINV::DCLK_B DEC_MCOMMA_DETECT::TRUE DEC_PCOMMA_DETECT::TRUE
+       DEC_VALID_COMMA_ONLY::TRUE DFE_DRP_EN::FALSE GEN_RXUSRCLK::TRUE GEN_TXUSRCLK::TRUE
+       GREFCLKRXINV::#OFF GREFCLKTXINV::#OFF GTX_CFG_PWRUP::FALSE LOOPBACK_DRP_EN::FALSE
+       MASTER_DRP_EN::FALSE MCOMMA_DETECT::TRUE PCI_EXPRESS_MODE::FALSE
+       PCOMMA_DETECT::TRUE PDELIDLE_DRP_EN::FALSE PHASEALIGN_DRP_EN::FALSE
+       PLL_DRP_EN::FALSE PMA_CAS_CLK_EN::FALSE POLARITY_DRP_EN::FALSE PRBS_DRP_EN::FALSE
+       RCV_TERM_GND::FALSE RCV_TERM_VTTRX::FALSE RESET_DRP_EN::FALSE RXBUF_OVFL_THRESH::61
+       RXBUF_OVRD_THRESH::FALSE RXBUF_UDFL_THRESH::4 RXGEARBOX_USE::FALSE
+       RXPLL_DIVSEL45_FB::5 RXPLL_DIVSEL_FB::2 RXPLL_DIVSEL_OUT::1 RXPLL_DIVSEL_REF::1
+       RXPLL_STARTUP_EN::TRUE RXRECCLK_CTRL::CLKTESTSIG1 RXUSRCLK2INV::RXUSRCLK2_B
+       RXUSRCLKINV::RXUSRCLK_B RX_BUFFER_USE::TRUE RX_CDR_FORCE_ROTATE::FALSE
+       RX_CLK25_DIVIDER::6 RX_DATA_WIDTH::20 RX_DECODE_SEQ_MATCH::TRUE RX_EN_IDLE_HOLD_CDR::FALSE
+       RX_EN_IDLE_HOLD_DFE::TRUE RX_EN_IDLE_RESET_BUF::TRUE RX_EN_IDLE_RESET_FR::TRUE
+       RX_EN_IDLE_RESET_PH::TRUE RX_EN_MODE_RESET_BUF::TRUE RX_EN_RATE_RESET_BUF::TRUE
+       RX_EN_REALIGN_RESET_BUF::FALSE RX_EN_REALIGN_RESET_BUF2::FALSE RX_FIFO_ADDR_MODE::FULL
+       RX_LOSS_OF_SYNC_FSM::FALSE RX_LOS_INVALID_INCR::1 RX_LOS_THRESHOLD::4
+       RX_OVERSAMPLE_MODE::FALSE RX_SLIDE_AUTO_WAIT::5 RX_SLIDE_MODE::OFF
+       RX_XCLK_SEL::RXREC SAS_MAX_COMSAS::52 SAS_MIN_COMSAS::40 SATA_MAX_BURST::7
+       SATA_MAX_INIT::22 SATA_MAX_WAKE::7 SATA_MIN_BURST::4 SATA_MIN_INIT::12
+       SATA_MIN_WAKE::4 SCANCLKINV::#OFF SHOW_REALIGN_COMMA::TRUE TERMINATION_OVRD::FALSE
+       TSTCLK0INV::TSTCLK0_B TSTCLK1INV::TSTCLK1_B TXDRIVE_DRP_EN::FALSE
+       TXDRIVE_LOOPBACK_HIZ::FALSE TXDRIVE_LOOPBACK_PD::FALSE TXGEARBOX_USE::FALSE
+       TXOUTCLKPCS_SEL::0 TXOUTCLK_CTRL::CLKTESTSIG0 TXPLL_DIVSEL45_FB::5
+       TXPLL_DIVSEL_FB::2 TXPLL_DIVSEL_OUT::1 TXPLL_DIVSEL_REF::1 TXPLL_STARTUP_EN::TRUE
+       TXUSRCLK2INV::TXUSRCLK2_B TXUSRCLKINV::TXUSRCLK_B TX_BUFFER_USE::TRUE
+       TX_CLK25_DIVIDER::6 TX_CLK_SOURCE::RXPLL TX_DATA_WIDTH::20 TX_DRIVE_MODE::DIRECT
+       TX_EN_RATE_RESET_BUF::TRUE TX_OVERSAMPLE_MODE::FALSE TX_XCLK_SEL::TXUSR
+       GTXE1:GTXE1_ML_REPLICATED_11_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate11:
+         A_DFECLKDLYADJ::000000  A_DFEDLYOVRD::0  A_DFETAP1::00000  A_DFETAP2::00000
+        A_DFETAP3::0000  A_DFETAP4::0000  A_DFETAPOVRD::0  A_GTXRXRESET::0
+        A_GTXTXRESET::0  A_LOOPBACK::000  A_PLLCLKRXRESET::0  A_PLLCLKTXRESET::0
+        A_PLLRXRESET::0  A_PLLTXRESET::0  A_PRBSCNTRESET::0  A_RXBUFRESET::0
+        A_RXCDRFREQRESET::0  A_RXCDRHOLD::0  A_RXCDRPHASERESET::0  A_RXCDRRESET::0
+        A_RXDFERESET::0  A_RXENPMAPHASEALIGN::0  A_RXENPRBSTST::000  A_RXENSAMPLEALIGN::0
+        A_RXEQMIX::0000000000  A_RXPLLLKDETEN::0  A_RXPLLPOWERDOWN::0  A_RXPMASETPHASE::0
+        A_RXPOLARITY::0  A_RXPOWERDOWN::00  A_RXRESET::0  A_TXBUFDIFFCTRL::010
+        A_TXDEEMPH::0  A_TXDIFFCTRL::0000  A_TXELECIDLE::0  A_TXENPMAPHASEALIGN::0
+        A_TXENPRBSTST::000  A_TXMARGIN::010  A_TXPLLLKDETEN::0  A_TXPLLPOWERDOWN::0
+        A_TXPMASETPHASE::0  A_TXPOLARITY::0  A_TXPOSTEMPHASIS::00000  A_TXPOWERDOWN::00
+        A_TXPRBSFORCEERR::0  A_TXPREEMPHASIS::0000  A_TXRESET::0  A_TXSWING::0
+        BGTEST_CFG::00  BIAS_CFG::00000  CDR_PH_ADJ_TIME::10100  CHAN_BOND_SEQ_1_1::0101111100
+        CHAN_BOND_SEQ_1_2::0001001010  CHAN_BOND_SEQ_1_3::0001001010  CHAN_BOND_SEQ_1_4::0110111100
+        CHAN_BOND_SEQ_1_ENABLE::1111  CHAN_BOND_SEQ_2_1::0100111100  CHAN_BOND_SEQ_2_2::0100111100
+        CHAN_BOND_SEQ_2_3::0110111100  CHAN_BOND_SEQ_2_4::0100111100  CHAN_BOND_SEQ_2_CFG::00000
+        CHAN_BOND_SEQ_2_ENABLE::1111  CLK_COR_SEQ_1_1::0100011100  CLK_COR_SEQ_1_2::0000000000
+        CLK_COR_SEQ_1_3::0000000000  CLK_COR_SEQ_1_4::0000000000  CLK_COR_SEQ_1_ENABLE::1111
+        CLK_COR_SEQ_2_1::0000000000  CLK_COR_SEQ_2_2::0000000000  CLK_COR_SEQ_2_3::0000000000
+        CLK_COR_SEQ_2_4::0000000000  CLK_COR_SEQ_2_ENABLE::1111  CM_TRIM::01
+        COMMA_10B_ENABLE::1111111111  COM_BURST_VAL::1111  DFE_CAL_TIME::01100
+        DFE_CFG::00011011  GEARBOX_ENDEC::000  MCOMMA_10B_VALUE::1010000011
+        OOBDETECT_THRESHOLD::011  PCOMMA_10B_VALUE::0101111100  PMA_CDR_SCAN::640404c
+        PMA_CFG::0040000040000000003  PMA_RXSYNC_CFG::00  PMA_RX_CFG::05ce048
+        PMA_TX_CFG::00082  POWER_SAVE::0000110100  RXPLL_COM_CFG::21680a
+        RXPLL_CP_CFG::00  RXPLL_LKDET_CFG::111  RXPRBSERR_LOOPBACK::0  RXRECCLK_DLY::0000000000
+        RXUSRCLK_DLY::0000  RX_DLYALIGN_CTRINC::0100  RX_DLYALIGN_EDGESET::00110
+        RX_DLYALIGN_LPFINC::0111  RX_DLYALIGN_MONSEL::000  RX_DLYALIGN_OVRDSETTING::00000000
+        RX_EYE_OFFSET::4c  RX_EYE_SCANMODE::00  RX_IDLE_HI_CNT::1000  RX_IDLE_LO_CNT::0000
+        SATA_BURST_VAL::100  SATA_IDLE_VAL::100  TERMINATION_CTRL::10100
+        TRANS_TIME_FROM_P2::03c  TRANS_TIME_NON_P2::19  TRANS_TIME_RATE::0e
+        TRANS_TIME_TO_P2::064  TST_ATTR::00000000  TXOUTCLK_DLY::0000000000
+        TXPLL_COM_CFG::21680a  TXPLL_CP_CFG::00  TXPLL_LKDET_CFG::111  TXPLL_SATA::00
+        TX_BYTECLK_CFG::00  TX_DEEMPH_0::11010  TX_DEEMPH_1::10000  TX_DETECT_RX_CFG::1832
+        TX_DLYALIGN_CTRINC::0100  TX_DLYALIGN_LPFINC::0110  TX_DLYALIGN_MONSEL::000
+        TX_DLYALIGN_OVRDSETTING::10000000  TX_IDLE_ASSERT_DELAY::100  TX_IDLE_DEASSERT_DELAY::010
+        TX_MARGIN_FULL_0::1001110  TX_MARGIN_FULL_1::1001001  TX_MARGIN_FULL_2::1000101
+        TX_MARGIN_FULL_3::1000010  TX_MARGIN_FULL_4::1000000  TX_MARGIN_LOW_0::1000110
+        TX_MARGIN_LOW_1::1000100  TX_MARGIN_LOW_2::1000010  TX_MARGIN_LOW_3::1000000
+        TX_MARGIN_LOW_4::1000000  TX_PMADATA_OPT::0  TX_TDCC_CFG::11  TX_USRCLK_CFG::00
+        USR_CODE_ERR_CLR::0 "
+  ;
+inst "GTXE1_ML_REPLICATED_12_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate12" "GTXE1",placed GTX_X102Y20 GTXE1_X0Y2  ,
+  cfg " AC_CAP_DIS::TRUE ALIGN_COMMA_WORD::1 CHAN_BOND_1_MAX_SKEW::7 CHAN_BOND_2_MAX_SKEW::1
+       CHAN_BOND_KEEP_ALIGN::FALSE CHAN_BOND_SEQ_2_USE::FALSE CHAN_BOND_SEQ_LEN::1
+       CLK_CORRECT_USE::TRUE CLK_COR_ADJ_LEN::1 CLK_COR_DET_LEN::1 CLK_COR_INSERT_IDLE_FLAG::FALSE
+       CLK_COR_KEEP_IDLE::FALSE CLK_COR_MAX_LAT::20 CLK_COR_MIN_LAT::18
+       CLK_COR_PRECEDENCE::TRUE CLK_COR_REPEAT_WAIT::0 CLK_COR_SEQ_2_USE::FALSE
+       COMMA_DOUBLE::FALSE DCLKINV::DCLK_B DEC_MCOMMA_DETECT::TRUE DEC_PCOMMA_DETECT::TRUE
+       DEC_VALID_COMMA_ONLY::TRUE DFE_DRP_EN::FALSE GEN_RXUSRCLK::TRUE GEN_TXUSRCLK::TRUE
+       GREFCLKRXINV::#OFF GREFCLKTXINV::#OFF GTX_CFG_PWRUP::FALSE LOOPBACK_DRP_EN::FALSE
+       MASTER_DRP_EN::FALSE MCOMMA_DETECT::TRUE PCI_EXPRESS_MODE::FALSE
+       PCOMMA_DETECT::TRUE PDELIDLE_DRP_EN::FALSE PHASEALIGN_DRP_EN::FALSE
+       PLL_DRP_EN::FALSE PMA_CAS_CLK_EN::FALSE POLARITY_DRP_EN::FALSE PRBS_DRP_EN::FALSE
+       RCV_TERM_GND::FALSE RCV_TERM_VTTRX::FALSE RESET_DRP_EN::FALSE RXBUF_OVFL_THRESH::61
+       RXBUF_OVRD_THRESH::FALSE RXBUF_UDFL_THRESH::4 RXGEARBOX_USE::FALSE
+       RXPLL_DIVSEL45_FB::5 RXPLL_DIVSEL_FB::2 RXPLL_DIVSEL_OUT::1 RXPLL_DIVSEL_REF::1
+       RXPLL_STARTUP_EN::TRUE RXRECCLK_CTRL::CLKTESTSIG1 RXUSRCLK2INV::RXUSRCLK2_B
+       RXUSRCLKINV::RXUSRCLK_B RX_BUFFER_USE::TRUE RX_CDR_FORCE_ROTATE::FALSE
+       RX_CLK25_DIVIDER::6 RX_DATA_WIDTH::20 RX_DECODE_SEQ_MATCH::TRUE RX_EN_IDLE_HOLD_CDR::FALSE
+       RX_EN_IDLE_HOLD_DFE::TRUE RX_EN_IDLE_RESET_BUF::TRUE RX_EN_IDLE_RESET_FR::TRUE
+       RX_EN_IDLE_RESET_PH::TRUE RX_EN_MODE_RESET_BUF::TRUE RX_EN_RATE_RESET_BUF::TRUE
+       RX_EN_REALIGN_RESET_BUF::FALSE RX_EN_REALIGN_RESET_BUF2::FALSE RX_FIFO_ADDR_MODE::FULL
+       RX_LOSS_OF_SYNC_FSM::FALSE RX_LOS_INVALID_INCR::1 RX_LOS_THRESHOLD::4
+       RX_OVERSAMPLE_MODE::FALSE RX_SLIDE_AUTO_WAIT::5 RX_SLIDE_MODE::OFF
+       RX_XCLK_SEL::RXREC SAS_MAX_COMSAS::52 SAS_MIN_COMSAS::40 SATA_MAX_BURST::7
+       SATA_MAX_INIT::22 SATA_MAX_WAKE::7 SATA_MIN_BURST::4 SATA_MIN_INIT::12
+       SATA_MIN_WAKE::4 SCANCLKINV::#OFF SHOW_REALIGN_COMMA::TRUE TERMINATION_OVRD::FALSE
+       TSTCLK0INV::TSTCLK0_B TSTCLK1INV::TSTCLK1_B TXDRIVE_DRP_EN::FALSE
+       TXDRIVE_LOOPBACK_HIZ::FALSE TXDRIVE_LOOPBACK_PD::FALSE TXGEARBOX_USE::FALSE
+       TXOUTCLKPCS_SEL::0 TXOUTCLK_CTRL::CLKTESTSIG0 TXPLL_DIVSEL45_FB::5
+       TXPLL_DIVSEL_FB::2 TXPLL_DIVSEL_OUT::1 TXPLL_DIVSEL_REF::1 TXPLL_STARTUP_EN::TRUE
+       TXUSRCLK2INV::TXUSRCLK2_B TXUSRCLKINV::TXUSRCLK_B TX_BUFFER_USE::TRUE
+       TX_CLK25_DIVIDER::6 TX_CLK_SOURCE::RXPLL TX_DATA_WIDTH::20 TX_DRIVE_MODE::DIRECT
+       TX_EN_RATE_RESET_BUF::TRUE TX_OVERSAMPLE_MODE::FALSE TX_XCLK_SEL::TXUSR
+       GTXE1:GTXE1_ML_REPLICATED_12_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate12:
+         A_DFECLKDLYADJ::000000  A_DFEDLYOVRD::0  A_DFETAP1::00000  A_DFETAP2::00000
+        A_DFETAP3::0000  A_DFETAP4::0000  A_DFETAPOVRD::0  A_GTXRXRESET::0
+        A_GTXTXRESET::0  A_LOOPBACK::000  A_PLLCLKRXRESET::0  A_PLLCLKTXRESET::0
+        A_PLLRXRESET::0  A_PLLTXRESET::0  A_PRBSCNTRESET::0  A_RXBUFRESET::0
+        A_RXCDRFREQRESET::0  A_RXCDRHOLD::0  A_RXCDRPHASERESET::0  A_RXCDRRESET::0
+        A_RXDFERESET::0  A_RXENPMAPHASEALIGN::0  A_RXENPRBSTST::000  A_RXENSAMPLEALIGN::0
+        A_RXEQMIX::0000000000  A_RXPLLLKDETEN::0  A_RXPLLPOWERDOWN::0  A_RXPMASETPHASE::0
+        A_RXPOLARITY::0  A_RXPOWERDOWN::00  A_RXRESET::0  A_TXBUFDIFFCTRL::010
+        A_TXDEEMPH::0  A_TXDIFFCTRL::0000  A_TXELECIDLE::0  A_TXENPMAPHASEALIGN::0
+        A_TXENPRBSTST::000  A_TXMARGIN::010  A_TXPLLLKDETEN::0  A_TXPLLPOWERDOWN::0
+        A_TXPMASETPHASE::0  A_TXPOLARITY::0  A_TXPOSTEMPHASIS::00000  A_TXPOWERDOWN::00
+        A_TXPRBSFORCEERR::0  A_TXPREEMPHASIS::0000  A_TXRESET::0  A_TXSWING::0
+        BGTEST_CFG::00  BIAS_CFG::00000  CDR_PH_ADJ_TIME::10100  CHAN_BOND_SEQ_1_1::0101111100
+        CHAN_BOND_SEQ_1_2::0001001010  CHAN_BOND_SEQ_1_3::0001001010  CHAN_BOND_SEQ_1_4::0110111100
+        CHAN_BOND_SEQ_1_ENABLE::1111  CHAN_BOND_SEQ_2_1::0100111100  CHAN_BOND_SEQ_2_2::0100111100
+        CHAN_BOND_SEQ_2_3::0110111100  CHAN_BOND_SEQ_2_4::0100111100  CHAN_BOND_SEQ_2_CFG::00000
+        CHAN_BOND_SEQ_2_ENABLE::1111  CLK_COR_SEQ_1_1::0100011100  CLK_COR_SEQ_1_2::0000000000
+        CLK_COR_SEQ_1_3::0000000000  CLK_COR_SEQ_1_4::0000000000  CLK_COR_SEQ_1_ENABLE::1111
+        CLK_COR_SEQ_2_1::0000000000  CLK_COR_SEQ_2_2::0000000000  CLK_COR_SEQ_2_3::0000000000
+        CLK_COR_SEQ_2_4::0000000000  CLK_COR_SEQ_2_ENABLE::1111  CM_TRIM::01
+        COMMA_10B_ENABLE::1111111111  COM_BURST_VAL::1111  DFE_CAL_TIME::01100
+        DFE_CFG::00011011  GEARBOX_ENDEC::000  MCOMMA_10B_VALUE::1010000011
+        OOBDETECT_THRESHOLD::011  PCOMMA_10B_VALUE::0101111100  PMA_CDR_SCAN::640404c
+        PMA_CFG::0040000040000000003  PMA_RXSYNC_CFG::00  PMA_RX_CFG::05ce048
+        PMA_TX_CFG::00082  POWER_SAVE::0000110100  RXPLL_COM_CFG::21680a
+        RXPLL_CP_CFG::00  RXPLL_LKDET_CFG::111  RXPRBSERR_LOOPBACK::0  RXRECCLK_DLY::0000000000
+        RXUSRCLK_DLY::0000  RX_DLYALIGN_CTRINC::0100  RX_DLYALIGN_EDGESET::00110
+        RX_DLYALIGN_LPFINC::0111  RX_DLYALIGN_MONSEL::000  RX_DLYALIGN_OVRDSETTING::00000000
+        RX_EYE_OFFSET::4c  RX_EYE_SCANMODE::00  RX_IDLE_HI_CNT::1000  RX_IDLE_LO_CNT::0000
+        SATA_BURST_VAL::100  SATA_IDLE_VAL::100  TERMINATION_CTRL::10100
+        TRANS_TIME_FROM_P2::03c  TRANS_TIME_NON_P2::19  TRANS_TIME_RATE::0e
+        TRANS_TIME_TO_P2::064  TST_ATTR::00000000  TXOUTCLK_DLY::0000000000
+        TXPLL_COM_CFG::21680a  TXPLL_CP_CFG::00  TXPLL_LKDET_CFG::111  TXPLL_SATA::00
+        TX_BYTECLK_CFG::00  TX_DEEMPH_0::11010  TX_DEEMPH_1::10000  TX_DETECT_RX_CFG::1832
+        TX_DLYALIGN_CTRINC::0100  TX_DLYALIGN_LPFINC::0110  TX_DLYALIGN_MONSEL::000
+        TX_DLYALIGN_OVRDSETTING::10000000  TX_IDLE_ASSERT_DELAY::100  TX_IDLE_DEASSERT_DELAY::010
+        TX_MARGIN_FULL_0::1001110  TX_MARGIN_FULL_1::1001001  TX_MARGIN_FULL_2::1000101
+        TX_MARGIN_FULL_3::1000010  TX_MARGIN_FULL_4::1000000  TX_MARGIN_LOW_0::1000110
+        TX_MARGIN_LOW_1::1000100  TX_MARGIN_LOW_2::1000010  TX_MARGIN_LOW_3::1000000
+        TX_MARGIN_LOW_4::1000000  TX_PMADATA_OPT::0  TX_TDCC_CFG::11  TX_USRCLK_CFG::00
+        USR_CODE_ERR_CLR::0 "
+  ;
+inst "GTXE1_ML_REPLICATED_13_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate13" "GTXE1",placed GTX_X102Y30 GTXE1_X0Y3  ,
+  cfg " AC_CAP_DIS::TRUE ALIGN_COMMA_WORD::1 CHAN_BOND_1_MAX_SKEW::7 CHAN_BOND_2_MAX_SKEW::1
+       CHAN_BOND_KEEP_ALIGN::FALSE CHAN_BOND_SEQ_2_USE::FALSE CHAN_BOND_SEQ_LEN::1
+       CLK_CORRECT_USE::TRUE CLK_COR_ADJ_LEN::1 CLK_COR_DET_LEN::1 CLK_COR_INSERT_IDLE_FLAG::FALSE
+       CLK_COR_KEEP_IDLE::FALSE CLK_COR_MAX_LAT::20 CLK_COR_MIN_LAT::18
+       CLK_COR_PRECEDENCE::TRUE CLK_COR_REPEAT_WAIT::0 CLK_COR_SEQ_2_USE::FALSE
+       COMMA_DOUBLE::FALSE DCLKINV::DCLK_B DEC_MCOMMA_DETECT::TRUE DEC_PCOMMA_DETECT::TRUE
+       DEC_VALID_COMMA_ONLY::TRUE DFE_DRP_EN::FALSE GEN_RXUSRCLK::TRUE GEN_TXUSRCLK::TRUE
+       GREFCLKRXINV::#OFF GREFCLKTXINV::#OFF GTX_CFG_PWRUP::FALSE LOOPBACK_DRP_EN::FALSE
+       MASTER_DRP_EN::FALSE MCOMMA_DETECT::TRUE PCI_EXPRESS_MODE::FALSE
+       PCOMMA_DETECT::TRUE PDELIDLE_DRP_EN::FALSE PHASEALIGN_DRP_EN::FALSE
+       PLL_DRP_EN::FALSE PMA_CAS_CLK_EN::FALSE POLARITY_DRP_EN::FALSE PRBS_DRP_EN::FALSE
+       RCV_TERM_GND::FALSE RCV_TERM_VTTRX::FALSE RESET_DRP_EN::FALSE RXBUF_OVFL_THRESH::61
+       RXBUF_OVRD_THRESH::FALSE RXBUF_UDFL_THRESH::4 RXGEARBOX_USE::FALSE
+       RXPLL_DIVSEL45_FB::5 RXPLL_DIVSEL_FB::2 RXPLL_DIVSEL_OUT::1 RXPLL_DIVSEL_REF::1
+       RXPLL_STARTUP_EN::TRUE RXRECCLK_CTRL::CLKTESTSIG1 RXUSRCLK2INV::RXUSRCLK2_B
+       RXUSRCLKINV::RXUSRCLK_B RX_BUFFER_USE::TRUE RX_CDR_FORCE_ROTATE::FALSE
+       RX_CLK25_DIVIDER::6 RX_DATA_WIDTH::20 RX_DECODE_SEQ_MATCH::TRUE RX_EN_IDLE_HOLD_CDR::FALSE
+       RX_EN_IDLE_HOLD_DFE::TRUE RX_EN_IDLE_RESET_BUF::TRUE RX_EN_IDLE_RESET_FR::TRUE
+       RX_EN_IDLE_RESET_PH::TRUE RX_EN_MODE_RESET_BUF::TRUE RX_EN_RATE_RESET_BUF::TRUE
+       RX_EN_REALIGN_RESET_BUF::FALSE RX_EN_REALIGN_RESET_BUF2::FALSE RX_FIFO_ADDR_MODE::FULL
+       RX_LOSS_OF_SYNC_FSM::FALSE RX_LOS_INVALID_INCR::1 RX_LOS_THRESHOLD::4
+       RX_OVERSAMPLE_MODE::FALSE RX_SLIDE_AUTO_WAIT::5 RX_SLIDE_MODE::OFF
+       RX_XCLK_SEL::RXREC SAS_MAX_COMSAS::52 SAS_MIN_COMSAS::40 SATA_MAX_BURST::7
+       SATA_MAX_INIT::22 SATA_MAX_WAKE::7 SATA_MIN_BURST::4 SATA_MIN_INIT::12
+       SATA_MIN_WAKE::4 SCANCLKINV::#OFF SHOW_REALIGN_COMMA::TRUE TERMINATION_OVRD::FALSE
+       TSTCLK0INV::TSTCLK0_B TSTCLK1INV::TSTCLK1_B TXDRIVE_DRP_EN::FALSE
+       TXDRIVE_LOOPBACK_HIZ::FALSE TXDRIVE_LOOPBACK_PD::FALSE TXGEARBOX_USE::FALSE
+       TXOUTCLKPCS_SEL::0 TXOUTCLK_CTRL::CLKTESTSIG0 TXPLL_DIVSEL45_FB::5
+       TXPLL_DIVSEL_FB::2 TXPLL_DIVSEL_OUT::1 TXPLL_DIVSEL_REF::1 TXPLL_STARTUP_EN::TRUE
+       TXUSRCLK2INV::TXUSRCLK2_B TXUSRCLKINV::TXUSRCLK_B TX_BUFFER_USE::TRUE
+       TX_CLK25_DIVIDER::6 TX_CLK_SOURCE::RXPLL TX_DATA_WIDTH::20 TX_DRIVE_MODE::DIRECT
+       TX_EN_RATE_RESET_BUF::TRUE TX_OVERSAMPLE_MODE::FALSE TX_XCLK_SEL::TXUSR
+       GTXE1:GTXE1_ML_REPLICATED_13_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate13:
+         A_DFECLKDLYADJ::000000  A_DFEDLYOVRD::0  A_DFETAP1::00000  A_DFETAP2::00000
+        A_DFETAP3::0000  A_DFETAP4::0000  A_DFETAPOVRD::0  A_GTXRXRESET::0
+        A_GTXTXRESET::0  A_LOOPBACK::000  A_PLLCLKRXRESET::0  A_PLLCLKTXRESET::0
+        A_PLLRXRESET::0  A_PLLTXRESET::0  A_PRBSCNTRESET::0  A_RXBUFRESET::0
+        A_RXCDRFREQRESET::0  A_RXCDRHOLD::0  A_RXCDRPHASERESET::0  A_RXCDRRESET::0
+        A_RXDFERESET::0  A_RXENPMAPHASEALIGN::0  A_RXENPRBSTST::000  A_RXENSAMPLEALIGN::0
+        A_RXEQMIX::0000000000  A_RXPLLLKDETEN::0  A_RXPLLPOWERDOWN::0  A_RXPMASETPHASE::0
+        A_RXPOLARITY::0  A_RXPOWERDOWN::00  A_RXRESET::0  A_TXBUFDIFFCTRL::010
+        A_TXDEEMPH::0  A_TXDIFFCTRL::0000  A_TXELECIDLE::0  A_TXENPMAPHASEALIGN::0
+        A_TXENPRBSTST::000  A_TXMARGIN::010  A_TXPLLLKDETEN::0  A_TXPLLPOWERDOWN::0
+        A_TXPMASETPHASE::0  A_TXPOLARITY::0  A_TXPOSTEMPHASIS::00000  A_TXPOWERDOWN::00
+        A_TXPRBSFORCEERR::0  A_TXPREEMPHASIS::0000  A_TXRESET::0  A_TXSWING::0
+        BGTEST_CFG::00  BIAS_CFG::00000  CDR_PH_ADJ_TIME::10100  CHAN_BOND_SEQ_1_1::0101111100
+        CHAN_BOND_SEQ_1_2::0001001010  CHAN_BOND_SEQ_1_3::0001001010  CHAN_BOND_SEQ_1_4::0110111100
+        CHAN_BOND_SEQ_1_ENABLE::1111  CHAN_BOND_SEQ_2_1::0100111100  CHAN_BOND_SEQ_2_2::0100111100
+        CHAN_BOND_SEQ_2_3::0110111100  CHAN_BOND_SEQ_2_4::0100111100  CHAN_BOND_SEQ_2_CFG::00000
+        CHAN_BOND_SEQ_2_ENABLE::1111  CLK_COR_SEQ_1_1::0100011100  CLK_COR_SEQ_1_2::0000000000
+        CLK_COR_SEQ_1_3::0000000000  CLK_COR_SEQ_1_4::0000000000  CLK_COR_SEQ_1_ENABLE::1111
+        CLK_COR_SEQ_2_1::0000000000  CLK_COR_SEQ_2_2::0000000000  CLK_COR_SEQ_2_3::0000000000
+        CLK_COR_SEQ_2_4::0000000000  CLK_COR_SEQ_2_ENABLE::1111  CM_TRIM::01
+        COMMA_10B_ENABLE::1111111111  COM_BURST_VAL::1111  DFE_CAL_TIME::01100
+        DFE_CFG::00011011  GEARBOX_ENDEC::000  MCOMMA_10B_VALUE::1010000011
+        OOBDETECT_THRESHOLD::011  PCOMMA_10B_VALUE::0101111100  PMA_CDR_SCAN::640404c
+        PMA_CFG::0040000040000000003  PMA_RXSYNC_CFG::00  PMA_RX_CFG::05ce048
+        PMA_TX_CFG::00082  POWER_SAVE::0000110100  RXPLL_COM_CFG::21680a
+        RXPLL_CP_CFG::00  RXPLL_LKDET_CFG::111  RXPRBSERR_LOOPBACK::0  RXRECCLK_DLY::0000000000
+        RXUSRCLK_DLY::0000  RX_DLYALIGN_CTRINC::0100  RX_DLYALIGN_EDGESET::00110
+        RX_DLYALIGN_LPFINC::0111  RX_DLYALIGN_MONSEL::000  RX_DLYALIGN_OVRDSETTING::00000000
+        RX_EYE_OFFSET::4c  RX_EYE_SCANMODE::00  RX_IDLE_HI_CNT::1000  RX_IDLE_LO_CNT::0000
+        SATA_BURST_VAL::100  SATA_IDLE_VAL::100  TERMINATION_CTRL::10100
+        TRANS_TIME_FROM_P2::03c  TRANS_TIME_NON_P2::19  TRANS_TIME_RATE::0e
+        TRANS_TIME_TO_P2::064  TST_ATTR::00000000  TXOUTCLK_DLY::0000000000
+        TXPLL_COM_CFG::21680a  TXPLL_CP_CFG::00  TXPLL_LKDET_CFG::111  TXPLL_SATA::00
+        TX_BYTECLK_CFG::00  TX_DEEMPH_0::11010  TX_DEEMPH_1::10000  TX_DETECT_RX_CFG::1832
+        TX_DLYALIGN_CTRINC::0100  TX_DLYALIGN_LPFINC::0110  TX_DLYALIGN_MONSEL::000
+        TX_DLYALIGN_OVRDSETTING::10000000  TX_IDLE_ASSERT_DELAY::100  TX_IDLE_DEASSERT_DELAY::010
+        TX_MARGIN_FULL_0::1001110  TX_MARGIN_FULL_1::1001001  TX_MARGIN_FULL_2::1000101
+        TX_MARGIN_FULL_3::1000010  TX_MARGIN_FULL_4::1000000  TX_MARGIN_LOW_0::1000110
+        TX_MARGIN_LOW_1::1000100  TX_MARGIN_LOW_2::1000010  TX_MARGIN_LOW_3::1000000
+        TX_MARGIN_LOW_4::1000000  TX_PMADATA_OPT::0  TX_TDCC_CFG::11  TX_USRCLK_CFG::00
+        USR_CODE_ERR_CLR::0 "
+  ;
+inst "GTXE1_ML_REPLICATED_14_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate14" "GTXE1",placed GTX_X102Y40 GTXE1_X0Y4  ,
+  cfg " AC_CAP_DIS::TRUE ALIGN_COMMA_WORD::1 CHAN_BOND_1_MAX_SKEW::7 CHAN_BOND_2_MAX_SKEW::1
+       CHAN_BOND_KEEP_ALIGN::FALSE CHAN_BOND_SEQ_2_USE::FALSE CHAN_BOND_SEQ_LEN::1
+       CLK_CORRECT_USE::TRUE CLK_COR_ADJ_LEN::1 CLK_COR_DET_LEN::1 CLK_COR_INSERT_IDLE_FLAG::FALSE
+       CLK_COR_KEEP_IDLE::FALSE CLK_COR_MAX_LAT::20 CLK_COR_MIN_LAT::18
+       CLK_COR_PRECEDENCE::TRUE CLK_COR_REPEAT_WAIT::0 CLK_COR_SEQ_2_USE::FALSE
+       COMMA_DOUBLE::FALSE DCLKINV::DCLK_B DEC_MCOMMA_DETECT::TRUE DEC_PCOMMA_DETECT::TRUE
+       DEC_VALID_COMMA_ONLY::TRUE DFE_DRP_EN::FALSE GEN_RXUSRCLK::TRUE GEN_TXUSRCLK::TRUE
+       GREFCLKRXINV::#OFF GREFCLKTXINV::#OFF GTX_CFG_PWRUP::FALSE LOOPBACK_DRP_EN::FALSE
+       MASTER_DRP_EN::FALSE MCOMMA_DETECT::TRUE PCI_EXPRESS_MODE::FALSE
+       PCOMMA_DETECT::TRUE PDELIDLE_DRP_EN::FALSE PHASEALIGN_DRP_EN::FALSE
+       PLL_DRP_EN::FALSE PMA_CAS_CLK_EN::FALSE POLARITY_DRP_EN::FALSE PRBS_DRP_EN::FALSE
+       RCV_TERM_GND::FALSE RCV_TERM_VTTRX::FALSE RESET_DRP_EN::FALSE RXBUF_OVFL_THRESH::61
+       RXBUF_OVRD_THRESH::FALSE RXBUF_UDFL_THRESH::4 RXGEARBOX_USE::FALSE
+       RXPLL_DIVSEL45_FB::5 RXPLL_DIVSEL_FB::2 RXPLL_DIVSEL_OUT::1 RXPLL_DIVSEL_REF::1
+       RXPLL_STARTUP_EN::TRUE RXRECCLK_CTRL::CLKTESTSIG1 RXUSRCLK2INV::RXUSRCLK2_B
+       RXUSRCLKINV::RXUSRCLK_B RX_BUFFER_USE::TRUE RX_CDR_FORCE_ROTATE::FALSE
+       RX_CLK25_DIVIDER::6 RX_DATA_WIDTH::20 RX_DECODE_SEQ_MATCH::TRUE RX_EN_IDLE_HOLD_CDR::FALSE
+       RX_EN_IDLE_HOLD_DFE::TRUE RX_EN_IDLE_RESET_BUF::TRUE RX_EN_IDLE_RESET_FR::TRUE
+       RX_EN_IDLE_RESET_PH::TRUE RX_EN_MODE_RESET_BUF::TRUE RX_EN_RATE_RESET_BUF::TRUE
+       RX_EN_REALIGN_RESET_BUF::FALSE RX_EN_REALIGN_RESET_BUF2::FALSE RX_FIFO_ADDR_MODE::FULL
+       RX_LOSS_OF_SYNC_FSM::FALSE RX_LOS_INVALID_INCR::1 RX_LOS_THRESHOLD::4
+       RX_OVERSAMPLE_MODE::FALSE RX_SLIDE_AUTO_WAIT::5 RX_SLIDE_MODE::OFF
+       RX_XCLK_SEL::RXREC SAS_MAX_COMSAS::52 SAS_MIN_COMSAS::40 SATA_MAX_BURST::7
+       SATA_MAX_INIT::22 SATA_MAX_WAKE::7 SATA_MIN_BURST::4 SATA_MIN_INIT::12
+       SATA_MIN_WAKE::4 SCANCLKINV::#OFF SHOW_REALIGN_COMMA::TRUE TERMINATION_OVRD::FALSE
+       TSTCLK0INV::TSTCLK0_B TSTCLK1INV::TSTCLK1_B TXDRIVE_DRP_EN::FALSE
+       TXDRIVE_LOOPBACK_HIZ::FALSE TXDRIVE_LOOPBACK_PD::FALSE TXGEARBOX_USE::FALSE
+       TXOUTCLKPCS_SEL::0 TXOUTCLK_CTRL::CLKTESTSIG0 TXPLL_DIVSEL45_FB::5
+       TXPLL_DIVSEL_FB::2 TXPLL_DIVSEL_OUT::1 TXPLL_DIVSEL_REF::1 TXPLL_STARTUP_EN::TRUE
+       TXUSRCLK2INV::TXUSRCLK2_B TXUSRCLKINV::TXUSRCLK_B TX_BUFFER_USE::TRUE
+       TX_CLK25_DIVIDER::6 TX_CLK_SOURCE::RXPLL TX_DATA_WIDTH::20 TX_DRIVE_MODE::DIRECT
+       TX_EN_RATE_RESET_BUF::TRUE TX_OVERSAMPLE_MODE::FALSE TX_XCLK_SEL::TXUSR
+       GTXE1:GTXE1_ML_REPLICATED_14_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate14:
+         A_DFECLKDLYADJ::000000  A_DFEDLYOVRD::0  A_DFETAP1::00000  A_DFETAP2::00000
+        A_DFETAP3::0000  A_DFETAP4::0000  A_DFETAPOVRD::0  A_GTXRXRESET::0
+        A_GTXTXRESET::0  A_LOOPBACK::000  A_PLLCLKRXRESET::0  A_PLLCLKTXRESET::0
+        A_PLLRXRESET::0  A_PLLTXRESET::0  A_PRBSCNTRESET::0  A_RXBUFRESET::0
+        A_RXCDRFREQRESET::0  A_RXCDRHOLD::0  A_RXCDRPHASERESET::0  A_RXCDRRESET::0
+        A_RXDFERESET::0  A_RXENPMAPHASEALIGN::0  A_RXENPRBSTST::000  A_RXENSAMPLEALIGN::0
+        A_RXEQMIX::0000000000  A_RXPLLLKDETEN::0  A_RXPLLPOWERDOWN::0  A_RXPMASETPHASE::0
+        A_RXPOLARITY::0  A_RXPOWERDOWN::00  A_RXRESET::0  A_TXBUFDIFFCTRL::010
+        A_TXDEEMPH::0  A_TXDIFFCTRL::0000  A_TXELECIDLE::0  A_TXENPMAPHASEALIGN::0
+        A_TXENPRBSTST::000  A_TXMARGIN::010  A_TXPLLLKDETEN::0  A_TXPLLPOWERDOWN::0
+        A_TXPMASETPHASE::0  A_TXPOLARITY::0  A_TXPOSTEMPHASIS::00000  A_TXPOWERDOWN::00
+        A_TXPRBSFORCEERR::0  A_TXPREEMPHASIS::0000  A_TXRESET::0  A_TXSWING::0
+        BGTEST_CFG::00  BIAS_CFG::00000  CDR_PH_ADJ_TIME::10100  CHAN_BOND_SEQ_1_1::0101111100
+        CHAN_BOND_SEQ_1_2::0001001010  CHAN_BOND_SEQ_1_3::0001001010  CHAN_BOND_SEQ_1_4::0110111100
+        CHAN_BOND_SEQ_1_ENABLE::1111  CHAN_BOND_SEQ_2_1::0100111100  CHAN_BOND_SEQ_2_2::0100111100
+        CHAN_BOND_SEQ_2_3::0110111100  CHAN_BOND_SEQ_2_4::0100111100  CHAN_BOND_SEQ_2_CFG::00000
+        CHAN_BOND_SEQ_2_ENABLE::1111  CLK_COR_SEQ_1_1::0100011100  CLK_COR_SEQ_1_2::0000000000
+        CLK_COR_SEQ_1_3::0000000000  CLK_COR_SEQ_1_4::0000000000  CLK_COR_SEQ_1_ENABLE::1111
+        CLK_COR_SEQ_2_1::0000000000  CLK_COR_SEQ_2_2::0000000000  CLK_COR_SEQ_2_3::0000000000
+        CLK_COR_SEQ_2_4::0000000000  CLK_COR_SEQ_2_ENABLE::1111  CM_TRIM::01
+        COMMA_10B_ENABLE::1111111111  COM_BURST_VAL::1111  DFE_CAL_TIME::01100
+        DFE_CFG::00011011  GEARBOX_ENDEC::000  MCOMMA_10B_VALUE::1010000011
+        OOBDETECT_THRESHOLD::011  PCOMMA_10B_VALUE::0101111100  PMA_CDR_SCAN::640404c
+        PMA_CFG::0040000040000000003  PMA_RXSYNC_CFG::00  PMA_RX_CFG::05ce048
+        PMA_TX_CFG::00082  POWER_SAVE::0000110100  RXPLL_COM_CFG::21680a
+        RXPLL_CP_CFG::00  RXPLL_LKDET_CFG::111  RXPRBSERR_LOOPBACK::0  RXRECCLK_DLY::0000000000
+        RXUSRCLK_DLY::0000  RX_DLYALIGN_CTRINC::0100  RX_DLYALIGN_EDGESET::00110
+        RX_DLYALIGN_LPFINC::0111  RX_DLYALIGN_MONSEL::000  RX_DLYALIGN_OVRDSETTING::00000000
+        RX_EYE_OFFSET::4c  RX_EYE_SCANMODE::00  RX_IDLE_HI_CNT::1000  RX_IDLE_LO_CNT::0000
+        SATA_BURST_VAL::100  SATA_IDLE_VAL::100  TERMINATION_CTRL::10100
+        TRANS_TIME_FROM_P2::03c  TRANS_TIME_NON_P2::19  TRANS_TIME_RATE::0e
+        TRANS_TIME_TO_P2::064  TST_ATTR::00000000  TXOUTCLK_DLY::0000000000
+        TXPLL_COM_CFG::21680a  TXPLL_CP_CFG::00  TXPLL_LKDET_CFG::111  TXPLL_SATA::00
+        TX_BYTECLK_CFG::00  TX_DEEMPH_0::11010  TX_DEEMPH_1::10000  TX_DETECT_RX_CFG::1832
+        TX_DLYALIGN_CTRINC::0100  TX_DLYALIGN_LPFINC::0110  TX_DLYALIGN_MONSEL::000
+        TX_DLYALIGN_OVRDSETTING::10000000  TX_IDLE_ASSERT_DELAY::100  TX_IDLE_DEASSERT_DELAY::010
+        TX_MARGIN_FULL_0::1001110  TX_MARGIN_FULL_1::1001001  TX_MARGIN_FULL_2::1000101
+        TX_MARGIN_FULL_3::1000010  TX_MARGIN_FULL_4::1000000  TX_MARGIN_LOW_0::1000110
+        TX_MARGIN_LOW_1::1000100  TX_MARGIN_LOW_2::1000010  TX_MARGIN_LOW_3::1000000
+        TX_MARGIN_LOW_4::1000000  TX_PMADATA_OPT::0  TX_TDCC_CFG::11  TX_USRCLK_CFG::00
+        USR_CODE_ERR_CLR::0 "
+  ;
+inst "GTXE1_ML_REPLICATED_15_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate15" "GTXE1",placed GTX_X102Y50 GTXE1_X0Y5  ,
+  cfg " AC_CAP_DIS::TRUE ALIGN_COMMA_WORD::1 CHAN_BOND_1_MAX_SKEW::7 CHAN_BOND_2_MAX_SKEW::1
+       CHAN_BOND_KEEP_ALIGN::FALSE CHAN_BOND_SEQ_2_USE::FALSE CHAN_BOND_SEQ_LEN::1
+       CLK_CORRECT_USE::TRUE CLK_COR_ADJ_LEN::1 CLK_COR_DET_LEN::1 CLK_COR_INSERT_IDLE_FLAG::FALSE
+       CLK_COR_KEEP_IDLE::FALSE CLK_COR_MAX_LAT::20 CLK_COR_MIN_LAT::18
+       CLK_COR_PRECEDENCE::TRUE CLK_COR_REPEAT_WAIT::0 CLK_COR_SEQ_2_USE::FALSE
+       COMMA_DOUBLE::FALSE DCLKINV::DCLK_B DEC_MCOMMA_DETECT::TRUE DEC_PCOMMA_DETECT::TRUE
+       DEC_VALID_COMMA_ONLY::TRUE DFE_DRP_EN::FALSE GEN_RXUSRCLK::TRUE GEN_TXUSRCLK::TRUE
+       GREFCLKRXINV::#OFF GREFCLKTXINV::#OFF GTX_CFG_PWRUP::FALSE LOOPBACK_DRP_EN::FALSE
+       MASTER_DRP_EN::FALSE MCOMMA_DETECT::TRUE PCI_EXPRESS_MODE::FALSE
+       PCOMMA_DETECT::TRUE PDELIDLE_DRP_EN::FALSE PHASEALIGN_DRP_EN::FALSE
+       PLL_DRP_EN::FALSE PMA_CAS_CLK_EN::FALSE POLARITY_DRP_EN::FALSE PRBS_DRP_EN::FALSE
+       RCV_TERM_GND::FALSE RCV_TERM_VTTRX::FALSE RESET_DRP_EN::FALSE RXBUF_OVFL_THRESH::61
+       RXBUF_OVRD_THRESH::FALSE RXBUF_UDFL_THRESH::4 RXGEARBOX_USE::FALSE
+       RXPLL_DIVSEL45_FB::5 RXPLL_DIVSEL_FB::2 RXPLL_DIVSEL_OUT::1 RXPLL_DIVSEL_REF::1
+       RXPLL_STARTUP_EN::TRUE RXRECCLK_CTRL::CLKTESTSIG1 RXUSRCLK2INV::RXUSRCLK2_B
+       RXUSRCLKINV::RXUSRCLK_B RX_BUFFER_USE::TRUE RX_CDR_FORCE_ROTATE::FALSE
+       RX_CLK25_DIVIDER::6 RX_DATA_WIDTH::20 RX_DECODE_SEQ_MATCH::TRUE RX_EN_IDLE_HOLD_CDR::FALSE
+       RX_EN_IDLE_HOLD_DFE::TRUE RX_EN_IDLE_RESET_BUF::TRUE RX_EN_IDLE_RESET_FR::TRUE
+       RX_EN_IDLE_RESET_PH::TRUE RX_EN_MODE_RESET_BUF::TRUE RX_EN_RATE_RESET_BUF::TRUE
+       RX_EN_REALIGN_RESET_BUF::FALSE RX_EN_REALIGN_RESET_BUF2::FALSE RX_FIFO_ADDR_MODE::FULL
+       RX_LOSS_OF_SYNC_FSM::FALSE RX_LOS_INVALID_INCR::1 RX_LOS_THRESHOLD::4
+       RX_OVERSAMPLE_MODE::FALSE RX_SLIDE_AUTO_WAIT::5 RX_SLIDE_MODE::OFF
+       RX_XCLK_SEL::RXREC SAS_MAX_COMSAS::52 SAS_MIN_COMSAS::40 SATA_MAX_BURST::7
+       SATA_MAX_INIT::22 SATA_MAX_WAKE::7 SATA_MIN_BURST::4 SATA_MIN_INIT::12
+       SATA_MIN_WAKE::4 SCANCLKINV::#OFF SHOW_REALIGN_COMMA::TRUE TERMINATION_OVRD::FALSE
+       TSTCLK0INV::TSTCLK0_B TSTCLK1INV::TSTCLK1_B TXDRIVE_DRP_EN::FALSE
+       TXDRIVE_LOOPBACK_HIZ::FALSE TXDRIVE_LOOPBACK_PD::FALSE TXGEARBOX_USE::FALSE
+       TXOUTCLKPCS_SEL::0 TXOUTCLK_CTRL::CLKTESTSIG0 TXPLL_DIVSEL45_FB::5
+       TXPLL_DIVSEL_FB::2 TXPLL_DIVSEL_OUT::1 TXPLL_DIVSEL_REF::1 TXPLL_STARTUP_EN::TRUE
+       TXUSRCLK2INV::TXUSRCLK2_B TXUSRCLKINV::TXUSRCLK_B TX_BUFFER_USE::TRUE
+       TX_CLK25_DIVIDER::6 TX_CLK_SOURCE::RXPLL TX_DATA_WIDTH::20 TX_DRIVE_MODE::DIRECT
+       TX_EN_RATE_RESET_BUF::TRUE TX_OVERSAMPLE_MODE::FALSE TX_XCLK_SEL::TXUSR
+       GTXE1:GTXE1_ML_REPLICATED_15_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate15:
+         A_DFECLKDLYADJ::000000  A_DFEDLYOVRD::0  A_DFETAP1::00000  A_DFETAP2::00000
+        A_DFETAP3::0000  A_DFETAP4::0000  A_DFETAPOVRD::0  A_GTXRXRESET::0
+        A_GTXTXRESET::0  A_LOOPBACK::000  A_PLLCLKRXRESET::0  A_PLLCLKTXRESET::0
+        A_PLLRXRESET::0  A_PLLTXRESET::0  A_PRBSCNTRESET::0  A_RXBUFRESET::0
+        A_RXCDRFREQRESET::0  A_RXCDRHOLD::0  A_RXCDRPHASERESET::0  A_RXCDRRESET::0
+        A_RXDFERESET::0  A_RXENPMAPHASEALIGN::0  A_RXENPRBSTST::000  A_RXENSAMPLEALIGN::0
+        A_RXEQMIX::0000000000  A_RXPLLLKDETEN::0  A_RXPLLPOWERDOWN::0  A_RXPMASETPHASE::0
+        A_RXPOLARITY::0  A_RXPOWERDOWN::00  A_RXRESET::0  A_TXBUFDIFFCTRL::010
+        A_TXDEEMPH::0  A_TXDIFFCTRL::0000  A_TXELECIDLE::0  A_TXENPMAPHASEALIGN::0
+        A_TXENPRBSTST::000  A_TXMARGIN::010  A_TXPLLLKDETEN::0  A_TXPLLPOWERDOWN::0
+        A_TXPMASETPHASE::0  A_TXPOLARITY::0  A_TXPOSTEMPHASIS::00000  A_TXPOWERDOWN::00
+        A_TXPRBSFORCEERR::0  A_TXPREEMPHASIS::0000  A_TXRESET::0  A_TXSWING::0
+        BGTEST_CFG::00  BIAS_CFG::00000  CDR_PH_ADJ_TIME::10100  CHAN_BOND_SEQ_1_1::0101111100
+        CHAN_BOND_SEQ_1_2::0001001010  CHAN_BOND_SEQ_1_3::0001001010  CHAN_BOND_SEQ_1_4::0110111100
+        CHAN_BOND_SEQ_1_ENABLE::1111  CHAN_BOND_SEQ_2_1::0100111100  CHAN_BOND_SEQ_2_2::0100111100
+        CHAN_BOND_SEQ_2_3::0110111100  CHAN_BOND_SEQ_2_4::0100111100  CHAN_BOND_SEQ_2_CFG::00000
+        CHAN_BOND_SEQ_2_ENABLE::1111  CLK_COR_SEQ_1_1::0100011100  CLK_COR_SEQ_1_2::0000000000
+        CLK_COR_SEQ_1_3::0000000000  CLK_COR_SEQ_1_4::0000000000  CLK_COR_SEQ_1_ENABLE::1111
+        CLK_COR_SEQ_2_1::0000000000  CLK_COR_SEQ_2_2::0000000000  CLK_COR_SEQ_2_3::0000000000
+        CLK_COR_SEQ_2_4::0000000000  CLK_COR_SEQ_2_ENABLE::1111  CM_TRIM::01
+        COMMA_10B_ENABLE::1111111111  COM_BURST_VAL::1111  DFE_CAL_TIME::01100
+        DFE_CFG::00011011  GEARBOX_ENDEC::000  MCOMMA_10B_VALUE::1010000011
+        OOBDETECT_THRESHOLD::011  PCOMMA_10B_VALUE::0101111100  PMA_CDR_SCAN::640404c
+        PMA_CFG::0040000040000000003  PMA_RXSYNC_CFG::00  PMA_RX_CFG::05ce048
+        PMA_TX_CFG::00082  POWER_SAVE::0000110100  RXPLL_COM_CFG::21680a
+        RXPLL_CP_CFG::00  RXPLL_LKDET_CFG::111  RXPRBSERR_LOOPBACK::0  RXRECCLK_DLY::0000000000
+        RXUSRCLK_DLY::0000  RX_DLYALIGN_CTRINC::0100  RX_DLYALIGN_EDGESET::00110
+        RX_DLYALIGN_LPFINC::0111  RX_DLYALIGN_MONSEL::000  RX_DLYALIGN_OVRDSETTING::00000000
+        RX_EYE_OFFSET::4c  RX_EYE_SCANMODE::00  RX_IDLE_HI_CNT::1000  RX_IDLE_LO_CNT::0000
+        SATA_BURST_VAL::100  SATA_IDLE_VAL::100  TERMINATION_CTRL::10100
+        TRANS_TIME_FROM_P2::03c  TRANS_TIME_NON_P2::19  TRANS_TIME_RATE::0e
+        TRANS_TIME_TO_P2::064  TST_ATTR::00000000  TXOUTCLK_DLY::0000000000
+        TXPLL_COM_CFG::21680a  TXPLL_CP_CFG::00  TXPLL_LKDET_CFG::111  TXPLL_SATA::00
+        TX_BYTECLK_CFG::00  TX_DEEMPH_0::11010  TX_DEEMPH_1::10000  TX_DETECT_RX_CFG::1832
+        TX_DLYALIGN_CTRINC::0100  TX_DLYALIGN_LPFINC::0110  TX_DLYALIGN_MONSEL::000
+        TX_DLYALIGN_OVRDSETTING::10000000  TX_IDLE_ASSERT_DELAY::100  TX_IDLE_DEASSERT_DELAY::010
+        TX_MARGIN_FULL_0::1001110  TX_MARGIN_FULL_1::1001001  TX_MARGIN_FULL_2::1000101
+        TX_MARGIN_FULL_3::1000010  TX_MARGIN_FULL_4::1000000  TX_MARGIN_LOW_0::1000110
+        TX_MARGIN_LOW_1::1000100  TX_MARGIN_LOW_2::1000010  TX_MARGIN_LOW_3::1000000
+        TX_MARGIN_LOW_4::1000000  TX_PMADATA_OPT::0  TX_TDCC_CFG::11  TX_USRCLK_CFG::00
+        USR_CODE_ERR_CLR::0 "
+  ;
+inst "GTXE1_ML_REPLICATED_16_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate16" "GTXE1",placed GTX_X102Y60 GTXE1_X0Y6  ,
+  cfg " AC_CAP_DIS::TRUE ALIGN_COMMA_WORD::1 CHAN_BOND_1_MAX_SKEW::7 CHAN_BOND_2_MAX_SKEW::1
+       CHAN_BOND_KEEP_ALIGN::FALSE CHAN_BOND_SEQ_2_USE::FALSE CHAN_BOND_SEQ_LEN::1
+       CLK_CORRECT_USE::TRUE CLK_COR_ADJ_LEN::1 CLK_COR_DET_LEN::1 CLK_COR_INSERT_IDLE_FLAG::FALSE
+       CLK_COR_KEEP_IDLE::FALSE CLK_COR_MAX_LAT::20 CLK_COR_MIN_LAT::18
+       CLK_COR_PRECEDENCE::TRUE CLK_COR_REPEAT_WAIT::0 CLK_COR_SEQ_2_USE::FALSE
+       COMMA_DOUBLE::FALSE DCLKINV::DCLK_B DEC_MCOMMA_DETECT::TRUE DEC_PCOMMA_DETECT::TRUE
+       DEC_VALID_COMMA_ONLY::TRUE DFE_DRP_EN::FALSE GEN_RXUSRCLK::TRUE GEN_TXUSRCLK::TRUE
+       GREFCLKRXINV::#OFF GREFCLKTXINV::#OFF GTX_CFG_PWRUP::FALSE LOOPBACK_DRP_EN::FALSE
+       MASTER_DRP_EN::FALSE MCOMMA_DETECT::TRUE PCI_EXPRESS_MODE::FALSE
+       PCOMMA_DETECT::TRUE PDELIDLE_DRP_EN::FALSE PHASEALIGN_DRP_EN::FALSE
+       PLL_DRP_EN::FALSE PMA_CAS_CLK_EN::FALSE POLARITY_DRP_EN::FALSE PRBS_DRP_EN::FALSE
+       RCV_TERM_GND::FALSE RCV_TERM_VTTRX::FALSE RESET_DRP_EN::FALSE RXBUF_OVFL_THRESH::61
+       RXBUF_OVRD_THRESH::FALSE RXBUF_UDFL_THRESH::4 RXGEARBOX_USE::FALSE
+       RXPLL_DIVSEL45_FB::5 RXPLL_DIVSEL_FB::2 RXPLL_DIVSEL_OUT::1 RXPLL_DIVSEL_REF::1
+       RXPLL_STARTUP_EN::TRUE RXRECCLK_CTRL::CLKTESTSIG1 RXUSRCLK2INV::RXUSRCLK2_B
+       RXUSRCLKINV::RXUSRCLK_B RX_BUFFER_USE::TRUE RX_CDR_FORCE_ROTATE::FALSE
+       RX_CLK25_DIVIDER::6 RX_DATA_WIDTH::20 RX_DECODE_SEQ_MATCH::TRUE RX_EN_IDLE_HOLD_CDR::FALSE
+       RX_EN_IDLE_HOLD_DFE::TRUE RX_EN_IDLE_RESET_BUF::TRUE RX_EN_IDLE_RESET_FR::TRUE
+       RX_EN_IDLE_RESET_PH::TRUE RX_EN_MODE_RESET_BUF::TRUE RX_EN_RATE_RESET_BUF::TRUE
+       RX_EN_REALIGN_RESET_BUF::FALSE RX_EN_REALIGN_RESET_BUF2::FALSE RX_FIFO_ADDR_MODE::FULL
+       RX_LOSS_OF_SYNC_FSM::FALSE RX_LOS_INVALID_INCR::1 RX_LOS_THRESHOLD::4
+       RX_OVERSAMPLE_MODE::FALSE RX_SLIDE_AUTO_WAIT::5 RX_SLIDE_MODE::OFF
+       RX_XCLK_SEL::RXREC SAS_MAX_COMSAS::52 SAS_MIN_COMSAS::40 SATA_MAX_BURST::7
+       SATA_MAX_INIT::22 SATA_MAX_WAKE::7 SATA_MIN_BURST::4 SATA_MIN_INIT::12
+       SATA_MIN_WAKE::4 SCANCLKINV::#OFF SHOW_REALIGN_COMMA::TRUE TERMINATION_OVRD::FALSE
+       TSTCLK0INV::TSTCLK0_B TSTCLK1INV::TSTCLK1_B TXDRIVE_DRP_EN::FALSE
+       TXDRIVE_LOOPBACK_HIZ::FALSE TXDRIVE_LOOPBACK_PD::FALSE TXGEARBOX_USE::FALSE
+       TXOUTCLKPCS_SEL::0 TXOUTCLK_CTRL::CLKTESTSIG0 TXPLL_DIVSEL45_FB::5
+       TXPLL_DIVSEL_FB::2 TXPLL_DIVSEL_OUT::1 TXPLL_DIVSEL_REF::1 TXPLL_STARTUP_EN::TRUE
+       TXUSRCLK2INV::TXUSRCLK2_B TXUSRCLKINV::TXUSRCLK_B TX_BUFFER_USE::TRUE
+       TX_CLK25_DIVIDER::6 TX_CLK_SOURCE::RXPLL TX_DATA_WIDTH::20 TX_DRIVE_MODE::DIRECT
+       TX_EN_RATE_RESET_BUF::TRUE TX_OVERSAMPLE_MODE::FALSE TX_XCLK_SEL::TXUSR
+       GTXE1:GTXE1_ML_REPLICATED_16_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate16:
+         A_DFECLKDLYADJ::000000  A_DFEDLYOVRD::0  A_DFETAP1::00000  A_DFETAP2::00000
+        A_DFETAP3::0000  A_DFETAP4::0000  A_DFETAPOVRD::0  A_GTXRXRESET::0
+        A_GTXTXRESET::0  A_LOOPBACK::000  A_PLLCLKRXRESET::0  A_PLLCLKTXRESET::0
+        A_PLLRXRESET::0  A_PLLTXRESET::0  A_PRBSCNTRESET::0  A_RXBUFRESET::0
+        A_RXCDRFREQRESET::0  A_RXCDRHOLD::0  A_RXCDRPHASERESET::0  A_RXCDRRESET::0
+        A_RXDFERESET::0  A_RXENPMAPHASEALIGN::0  A_RXENPRBSTST::000  A_RXENSAMPLEALIGN::0
+        A_RXEQMIX::0000000000  A_RXPLLLKDETEN::0  A_RXPLLPOWERDOWN::0  A_RXPMASETPHASE::0
+        A_RXPOLARITY::0  A_RXPOWERDOWN::00  A_RXRESET::0  A_TXBUFDIFFCTRL::010
+        A_TXDEEMPH::0  A_TXDIFFCTRL::0000  A_TXELECIDLE::0  A_TXENPMAPHASEALIGN::0
+        A_TXENPRBSTST::000  A_TXMARGIN::010  A_TXPLLLKDETEN::0  A_TXPLLPOWERDOWN::0
+        A_TXPMASETPHASE::0  A_TXPOLARITY::0  A_TXPOSTEMPHASIS::00000  A_TXPOWERDOWN::00
+        A_TXPRBSFORCEERR::0  A_TXPREEMPHASIS::0000  A_TXRESET::0  A_TXSWING::0
+        BGTEST_CFG::00  BIAS_CFG::00000  CDR_PH_ADJ_TIME::10100  CHAN_BOND_SEQ_1_1::0101111100
+        CHAN_BOND_SEQ_1_2::0001001010  CHAN_BOND_SEQ_1_3::0001001010  CHAN_BOND_SEQ_1_4::0110111100
+        CHAN_BOND_SEQ_1_ENABLE::1111  CHAN_BOND_SEQ_2_1::0100111100  CHAN_BOND_SEQ_2_2::0100111100
+        CHAN_BOND_SEQ_2_3::0110111100  CHAN_BOND_SEQ_2_4::0100111100  CHAN_BOND_SEQ_2_CFG::00000
+        CHAN_BOND_SEQ_2_ENABLE::1111  CLK_COR_SEQ_1_1::0100011100  CLK_COR_SEQ_1_2::0000000000
+        CLK_COR_SEQ_1_3::0000000000  CLK_COR_SEQ_1_4::0000000000  CLK_COR_SEQ_1_ENABLE::1111
+        CLK_COR_SEQ_2_1::0000000000  CLK_COR_SEQ_2_2::0000000000  CLK_COR_SEQ_2_3::0000000000
+        CLK_COR_SEQ_2_4::0000000000  CLK_COR_SEQ_2_ENABLE::1111  CM_TRIM::01
+        COMMA_10B_ENABLE::1111111111  COM_BURST_VAL::1111  DFE_CAL_TIME::01100
+        DFE_CFG::00011011  GEARBOX_ENDEC::000  MCOMMA_10B_VALUE::1010000011
+        OOBDETECT_THRESHOLD::011  PCOMMA_10B_VALUE::0101111100  PMA_CDR_SCAN::640404c
+        PMA_CFG::0040000040000000003  PMA_RXSYNC_CFG::00  PMA_RX_CFG::05ce048
+        PMA_TX_CFG::00082  POWER_SAVE::0000110100  RXPLL_COM_CFG::21680a
+        RXPLL_CP_CFG::00  RXPLL_LKDET_CFG::111  RXPRBSERR_LOOPBACK::0  RXRECCLK_DLY::0000000000
+        RXUSRCLK_DLY::0000  RX_DLYALIGN_CTRINC::0100  RX_DLYALIGN_EDGESET::00110
+        RX_DLYALIGN_LPFINC::0111  RX_DLYALIGN_MONSEL::000  RX_DLYALIGN_OVRDSETTING::00000000
+        RX_EYE_OFFSET::4c  RX_EYE_SCANMODE::00  RX_IDLE_HI_CNT::1000  RX_IDLE_LO_CNT::0000
+        SATA_BURST_VAL::100  SATA_IDLE_VAL::100  TERMINATION_CTRL::10100
+        TRANS_TIME_FROM_P2::03c  TRANS_TIME_NON_P2::19  TRANS_TIME_RATE::0e
+        TRANS_TIME_TO_P2::064  TST_ATTR::00000000  TXOUTCLK_DLY::0000000000
+        TXPLL_COM_CFG::21680a  TXPLL_CP_CFG::00  TXPLL_LKDET_CFG::111  TXPLL_SATA::00
+        TX_BYTECLK_CFG::00  TX_DEEMPH_0::11010  TX_DEEMPH_1::10000  TX_DETECT_RX_CFG::1832
+        TX_DLYALIGN_CTRINC::0100  TX_DLYALIGN_LPFINC::0110  TX_DLYALIGN_MONSEL::000
+        TX_DLYALIGN_OVRDSETTING::10000000  TX_IDLE_ASSERT_DELAY::100  TX_IDLE_DEASSERT_DELAY::010
+        TX_MARGIN_FULL_0::1001110  TX_MARGIN_FULL_1::1001001  TX_MARGIN_FULL_2::1000101
+        TX_MARGIN_FULL_3::1000010  TX_MARGIN_FULL_4::1000000  TX_MARGIN_LOW_0::1000110
+        TX_MARGIN_LOW_1::1000100  TX_MARGIN_LOW_2::1000010  TX_MARGIN_LOW_3::1000000
+        TX_MARGIN_LOW_4::1000000  TX_PMADATA_OPT::0  TX_TDCC_CFG::11  TX_USRCLK_CFG::00
+        USR_CODE_ERR_CLR::0 "
+  ;
+inst "GTXE1_ML_REPLICATED_17_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate17" "GTXE1",placed GTX_X102Y70 GTXE1_X0Y7  ,
+  cfg " AC_CAP_DIS::TRUE ALIGN_COMMA_WORD::1 CHAN_BOND_1_MAX_SKEW::7 CHAN_BOND_2_MAX_SKEW::1
+       CHAN_BOND_KEEP_ALIGN::FALSE CHAN_BOND_SEQ_2_USE::FALSE CHAN_BOND_SEQ_LEN::1
+       CLK_CORRECT_USE::TRUE CLK_COR_ADJ_LEN::1 CLK_COR_DET_LEN::1 CLK_COR_INSERT_IDLE_FLAG::FALSE
+       CLK_COR_KEEP_IDLE::FALSE CLK_COR_MAX_LAT::20 CLK_COR_MIN_LAT::18
+       CLK_COR_PRECEDENCE::TRUE CLK_COR_REPEAT_WAIT::0 CLK_COR_SEQ_2_USE::FALSE
+       COMMA_DOUBLE::FALSE DCLKINV::DCLK_B DEC_MCOMMA_DETECT::TRUE DEC_PCOMMA_DETECT::TRUE
+       DEC_VALID_COMMA_ONLY::TRUE DFE_DRP_EN::FALSE GEN_RXUSRCLK::TRUE GEN_TXUSRCLK::TRUE
+       GREFCLKRXINV::#OFF GREFCLKTXINV::#OFF GTX_CFG_PWRUP::FALSE LOOPBACK_DRP_EN::FALSE
+       MASTER_DRP_EN::FALSE MCOMMA_DETECT::TRUE PCI_EXPRESS_MODE::FALSE
+       PCOMMA_DETECT::TRUE PDELIDLE_DRP_EN::FALSE PHASEALIGN_DRP_EN::FALSE
+       PLL_DRP_EN::FALSE PMA_CAS_CLK_EN::FALSE POLARITY_DRP_EN::FALSE PRBS_DRP_EN::FALSE
+       RCV_TERM_GND::FALSE RCV_TERM_VTTRX::FALSE RESET_DRP_EN::FALSE RXBUF_OVFL_THRESH::61
+       RXBUF_OVRD_THRESH::FALSE RXBUF_UDFL_THRESH::4 RXGEARBOX_USE::FALSE
+       RXPLL_DIVSEL45_FB::5 RXPLL_DIVSEL_FB::2 RXPLL_DIVSEL_OUT::1 RXPLL_DIVSEL_REF::1
+       RXPLL_STARTUP_EN::TRUE RXRECCLK_CTRL::CLKTESTSIG1 RXUSRCLK2INV::RXUSRCLK2_B
+       RXUSRCLKINV::RXUSRCLK_B RX_BUFFER_USE::TRUE RX_CDR_FORCE_ROTATE::FALSE
+       RX_CLK25_DIVIDER::6 RX_DATA_WIDTH::20 RX_DECODE_SEQ_MATCH::TRUE RX_EN_IDLE_HOLD_CDR::FALSE
+       RX_EN_IDLE_HOLD_DFE::TRUE RX_EN_IDLE_RESET_BUF::TRUE RX_EN_IDLE_RESET_FR::TRUE
+       RX_EN_IDLE_RESET_PH::TRUE RX_EN_MODE_RESET_BUF::TRUE RX_EN_RATE_RESET_BUF::TRUE
+       RX_EN_REALIGN_RESET_BUF::FALSE RX_EN_REALIGN_RESET_BUF2::FALSE RX_FIFO_ADDR_MODE::FULL
+       RX_LOSS_OF_SYNC_FSM::FALSE RX_LOS_INVALID_INCR::1 RX_LOS_THRESHOLD::4
+       RX_OVERSAMPLE_MODE::FALSE RX_SLIDE_AUTO_WAIT::5 RX_SLIDE_MODE::OFF
+       RX_XCLK_SEL::RXREC SAS_MAX_COMSAS::52 SAS_MIN_COMSAS::40 SATA_MAX_BURST::7
+       SATA_MAX_INIT::22 SATA_MAX_WAKE::7 SATA_MIN_BURST::4 SATA_MIN_INIT::12
+       SATA_MIN_WAKE::4 SCANCLKINV::#OFF SHOW_REALIGN_COMMA::TRUE TERMINATION_OVRD::FALSE
+       TSTCLK0INV::TSTCLK0_B TSTCLK1INV::TSTCLK1_B TXDRIVE_DRP_EN::FALSE
+       TXDRIVE_LOOPBACK_HIZ::FALSE TXDRIVE_LOOPBACK_PD::FALSE TXGEARBOX_USE::FALSE
+       TXOUTCLKPCS_SEL::0 TXOUTCLK_CTRL::CLKTESTSIG0 TXPLL_DIVSEL45_FB::5
+       TXPLL_DIVSEL_FB::2 TXPLL_DIVSEL_OUT::1 TXPLL_DIVSEL_REF::1 TXPLL_STARTUP_EN::TRUE
+       TXUSRCLK2INV::TXUSRCLK2_B TXUSRCLKINV::TXUSRCLK_B TX_BUFFER_USE::TRUE
+       TX_CLK25_DIVIDER::6 TX_CLK_SOURCE::RXPLL TX_DATA_WIDTH::20 TX_DRIVE_MODE::DIRECT
+       TX_EN_RATE_RESET_BUF::TRUE TX_OVERSAMPLE_MODE::FALSE TX_XCLK_SEL::TXUSR
+       GTXE1:GTXE1_ML_REPLICATED_17_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate17:
+         A_DFECLKDLYADJ::000000  A_DFEDLYOVRD::0  A_DFETAP1::00000  A_DFETAP2::00000
+        A_DFETAP3::0000  A_DFETAP4::0000  A_DFETAPOVRD::0  A_GTXRXRESET::0
+        A_GTXTXRESET::0  A_LOOPBACK::000  A_PLLCLKRXRESET::0  A_PLLCLKTXRESET::0
+        A_PLLRXRESET::0  A_PLLTXRESET::0  A_PRBSCNTRESET::0  A_RXBUFRESET::0
+        A_RXCDRFREQRESET::0  A_RXCDRHOLD::0  A_RXCDRPHASERESET::0  A_RXCDRRESET::0
+        A_RXDFERESET::0  A_RXENPMAPHASEALIGN::0  A_RXENPRBSTST::000  A_RXENSAMPLEALIGN::0
+        A_RXEQMIX::0000000000  A_RXPLLLKDETEN::0  A_RXPLLPOWERDOWN::0  A_RXPMASETPHASE::0
+        A_RXPOLARITY::0  A_RXPOWERDOWN::00  A_RXRESET::0  A_TXBUFDIFFCTRL::010
+        A_TXDEEMPH::0  A_TXDIFFCTRL::0000  A_TXELECIDLE::0  A_TXENPMAPHASEALIGN::0
+        A_TXENPRBSTST::000  A_TXMARGIN::010  A_TXPLLLKDETEN::0  A_TXPLLPOWERDOWN::0
+        A_TXPMASETPHASE::0  A_TXPOLARITY::0  A_TXPOSTEMPHASIS::00000  A_TXPOWERDOWN::00
+        A_TXPRBSFORCEERR::0  A_TXPREEMPHASIS::0000  A_TXRESET::0  A_TXSWING::0
+        BGTEST_CFG::00  BIAS_CFG::00000  CDR_PH_ADJ_TIME::10100  CHAN_BOND_SEQ_1_1::0101111100
+        CHAN_BOND_SEQ_1_2::0001001010  CHAN_BOND_SEQ_1_3::0001001010  CHAN_BOND_SEQ_1_4::0110111100
+        CHAN_BOND_SEQ_1_ENABLE::1111  CHAN_BOND_SEQ_2_1::0100111100  CHAN_BOND_SEQ_2_2::0100111100
+        CHAN_BOND_SEQ_2_3::0110111100  CHAN_BOND_SEQ_2_4::0100111100  CHAN_BOND_SEQ_2_CFG::00000
+        CHAN_BOND_SEQ_2_ENABLE::1111  CLK_COR_SEQ_1_1::0100011100  CLK_COR_SEQ_1_2::0000000000
+        CLK_COR_SEQ_1_3::0000000000  CLK_COR_SEQ_1_4::0000000000  CLK_COR_SEQ_1_ENABLE::1111
+        CLK_COR_SEQ_2_1::0000000000  CLK_COR_SEQ_2_2::0000000000  CLK_COR_SEQ_2_3::0000000000
+        CLK_COR_SEQ_2_4::0000000000  CLK_COR_SEQ_2_ENABLE::1111  CM_TRIM::01
+        COMMA_10B_ENABLE::1111111111  COM_BURST_VAL::1111  DFE_CAL_TIME::01100
+        DFE_CFG::00011011  GEARBOX_ENDEC::000  MCOMMA_10B_VALUE::1010000011
+        OOBDETECT_THRESHOLD::011  PCOMMA_10B_VALUE::0101111100  PMA_CDR_SCAN::640404c
+        PMA_CFG::0040000040000000003  PMA_RXSYNC_CFG::00  PMA_RX_CFG::05ce048
+        PMA_TX_CFG::00082  POWER_SAVE::0000110100  RXPLL_COM_CFG::21680a
+        RXPLL_CP_CFG::00  RXPLL_LKDET_CFG::111  RXPRBSERR_LOOPBACK::0  RXRECCLK_DLY::0000000000
+        RXUSRCLK_DLY::0000  RX_DLYALIGN_CTRINC::0100  RX_DLYALIGN_EDGESET::00110
+        RX_DLYALIGN_LPFINC::0111  RX_DLYALIGN_MONSEL::000  RX_DLYALIGN_OVRDSETTING::00000000
+        RX_EYE_OFFSET::4c  RX_EYE_SCANMODE::00  RX_IDLE_HI_CNT::1000  RX_IDLE_LO_CNT::0000
+        SATA_BURST_VAL::100  SATA_IDLE_VAL::100  TERMINATION_CTRL::10100
+        TRANS_TIME_FROM_P2::03c  TRANS_TIME_NON_P2::19  TRANS_TIME_RATE::0e
+        TRANS_TIME_TO_P2::064  TST_ATTR::00000000  TXOUTCLK_DLY::0000000000
+        TXPLL_COM_CFG::21680a  TXPLL_CP_CFG::00  TXPLL_LKDET_CFG::111  TXPLL_SATA::00
+        TX_BYTECLK_CFG::00  TX_DEEMPH_0::11010  TX_DEEMPH_1::10000  TX_DETECT_RX_CFG::1832
+        TX_DLYALIGN_CTRINC::0100  TX_DLYALIGN_LPFINC::0110  TX_DLYALIGN_MONSEL::000
+        TX_DLYALIGN_OVRDSETTING::10000000  TX_IDLE_ASSERT_DELAY::100  TX_IDLE_DEASSERT_DELAY::010
+        TX_MARGIN_FULL_0::1001110  TX_MARGIN_FULL_1::1001001  TX_MARGIN_FULL_2::1000101
+        TX_MARGIN_FULL_3::1000010  TX_MARGIN_FULL_4::1000000  TX_MARGIN_LOW_0::1000110
+        TX_MARGIN_LOW_1::1000100  TX_MARGIN_LOW_2::1000010  TX_MARGIN_LOW_3::1000000
+        TX_MARGIN_LOW_4::1000000  TX_PMADATA_OPT::0  TX_TDCC_CFG::11  TX_USRCLK_CFG::00
+        USR_CODE_ERR_CLR::0 "
+  ;
+inst "GTXE1_ML_REPLICATED_18_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate18" "GTXE1",placed GTX_X102Y80 GTXE1_X0Y8  ,
+  cfg " AC_CAP_DIS::TRUE ALIGN_COMMA_WORD::1 CHAN_BOND_1_MAX_SKEW::7 CHAN_BOND_2_MAX_SKEW::1
+       CHAN_BOND_KEEP_ALIGN::FALSE CHAN_BOND_SEQ_2_USE::FALSE CHAN_BOND_SEQ_LEN::1
+       CLK_CORRECT_USE::TRUE CLK_COR_ADJ_LEN::1 CLK_COR_DET_LEN::1 CLK_COR_INSERT_IDLE_FLAG::FALSE
+       CLK_COR_KEEP_IDLE::FALSE CLK_COR_MAX_LAT::20 CLK_COR_MIN_LAT::18
+       CLK_COR_PRECEDENCE::TRUE CLK_COR_REPEAT_WAIT::0 CLK_COR_SEQ_2_USE::FALSE
+       COMMA_DOUBLE::FALSE DCLKINV::DCLK_B DEC_MCOMMA_DETECT::TRUE DEC_PCOMMA_DETECT::TRUE
+       DEC_VALID_COMMA_ONLY::TRUE DFE_DRP_EN::FALSE GEN_RXUSRCLK::TRUE GEN_TXUSRCLK::TRUE
+       GREFCLKRXINV::#OFF GREFCLKTXINV::#OFF GTX_CFG_PWRUP::FALSE LOOPBACK_DRP_EN::FALSE
+       MASTER_DRP_EN::FALSE MCOMMA_DETECT::TRUE PCI_EXPRESS_MODE::FALSE
+       PCOMMA_DETECT::TRUE PDELIDLE_DRP_EN::FALSE PHASEALIGN_DRP_EN::FALSE
+       PLL_DRP_EN::FALSE PMA_CAS_CLK_EN::FALSE POLARITY_DRP_EN::FALSE PRBS_DRP_EN::FALSE
+       RCV_TERM_GND::FALSE RCV_TERM_VTTRX::FALSE RESET_DRP_EN::FALSE RXBUF_OVFL_THRESH::61
+       RXBUF_OVRD_THRESH::FALSE RXBUF_UDFL_THRESH::4 RXGEARBOX_USE::FALSE
+       RXPLL_DIVSEL45_FB::5 RXPLL_DIVSEL_FB::2 RXPLL_DIVSEL_OUT::1 RXPLL_DIVSEL_REF::1
+       RXPLL_STARTUP_EN::TRUE RXRECCLK_CTRL::CLKTESTSIG1 RXUSRCLK2INV::RXUSRCLK2_B
+       RXUSRCLKINV::RXUSRCLK_B RX_BUFFER_USE::TRUE RX_CDR_FORCE_ROTATE::FALSE
+       RX_CLK25_DIVIDER::6 RX_DATA_WIDTH::20 RX_DECODE_SEQ_MATCH::TRUE RX_EN_IDLE_HOLD_CDR::FALSE
+       RX_EN_IDLE_HOLD_DFE::TRUE RX_EN_IDLE_RESET_BUF::TRUE RX_EN_IDLE_RESET_FR::TRUE
+       RX_EN_IDLE_RESET_PH::TRUE RX_EN_MODE_RESET_BUF::TRUE RX_EN_RATE_RESET_BUF::TRUE
+       RX_EN_REALIGN_RESET_BUF::FALSE RX_EN_REALIGN_RESET_BUF2::FALSE RX_FIFO_ADDR_MODE::FULL
+       RX_LOSS_OF_SYNC_FSM::FALSE RX_LOS_INVALID_INCR::1 RX_LOS_THRESHOLD::4
+       RX_OVERSAMPLE_MODE::FALSE RX_SLIDE_AUTO_WAIT::5 RX_SLIDE_MODE::OFF
+       RX_XCLK_SEL::RXREC SAS_MAX_COMSAS::52 SAS_MIN_COMSAS::40 SATA_MAX_BURST::7
+       SATA_MAX_INIT::22 SATA_MAX_WAKE::7 SATA_MIN_BURST::4 SATA_MIN_INIT::12
+       SATA_MIN_WAKE::4 SCANCLKINV::#OFF SHOW_REALIGN_COMMA::TRUE TERMINATION_OVRD::FALSE
+       TSTCLK0INV::TSTCLK0_B TSTCLK1INV::TSTCLK1_B TXDRIVE_DRP_EN::FALSE
+       TXDRIVE_LOOPBACK_HIZ::FALSE TXDRIVE_LOOPBACK_PD::FALSE TXGEARBOX_USE::FALSE
+       TXOUTCLKPCS_SEL::0 TXOUTCLK_CTRL::CLKTESTSIG0 TXPLL_DIVSEL45_FB::5
+       TXPLL_DIVSEL_FB::2 TXPLL_DIVSEL_OUT::1 TXPLL_DIVSEL_REF::1 TXPLL_STARTUP_EN::TRUE
+       TXUSRCLK2INV::TXUSRCLK2_B TXUSRCLKINV::TXUSRCLK_B TX_BUFFER_USE::TRUE
+       TX_CLK25_DIVIDER::6 TX_CLK_SOURCE::RXPLL TX_DATA_WIDTH::20 TX_DRIVE_MODE::DIRECT
+       TX_EN_RATE_RESET_BUF::TRUE TX_OVERSAMPLE_MODE::FALSE TX_XCLK_SEL::TXUSR
+       GTXE1:GTXE1_ML_REPLICATED_18_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate18:
+         A_DFECLKDLYADJ::000000  A_DFEDLYOVRD::0  A_DFETAP1::00000  A_DFETAP2::00000
+        A_DFETAP3::0000  A_DFETAP4::0000  A_DFETAPOVRD::0  A_GTXRXRESET::0
+        A_GTXTXRESET::0  A_LOOPBACK::000  A_PLLCLKRXRESET::0  A_PLLCLKTXRESET::0
+        A_PLLRXRESET::0  A_PLLTXRESET::0  A_PRBSCNTRESET::0  A_RXBUFRESET::0
+        A_RXCDRFREQRESET::0  A_RXCDRHOLD::0  A_RXCDRPHASERESET::0  A_RXCDRRESET::0
+        A_RXDFERESET::0  A_RXENPMAPHASEALIGN::0  A_RXENPRBSTST::000  A_RXENSAMPLEALIGN::0
+        A_RXEQMIX::0000000000  A_RXPLLLKDETEN::0  A_RXPLLPOWERDOWN::0  A_RXPMASETPHASE::0
+        A_RXPOLARITY::0  A_RXPOWERDOWN::00  A_RXRESET::0  A_TXBUFDIFFCTRL::010
+        A_TXDEEMPH::0  A_TXDIFFCTRL::0000  A_TXELECIDLE::0  A_TXENPMAPHASEALIGN::0
+        A_TXENPRBSTST::000  A_TXMARGIN::010  A_TXPLLLKDETEN::0  A_TXPLLPOWERDOWN::0
+        A_TXPMASETPHASE::0  A_TXPOLARITY::0  A_TXPOSTEMPHASIS::00000  A_TXPOWERDOWN::00
+        A_TXPRBSFORCEERR::0  A_TXPREEMPHASIS::0000  A_TXRESET::0  A_TXSWING::0
+        BGTEST_CFG::00  BIAS_CFG::00000  CDR_PH_ADJ_TIME::10100  CHAN_BOND_SEQ_1_1::0101111100
+        CHAN_BOND_SEQ_1_2::0001001010  CHAN_BOND_SEQ_1_3::0001001010  CHAN_BOND_SEQ_1_4::0110111100
+        CHAN_BOND_SEQ_1_ENABLE::1111  CHAN_BOND_SEQ_2_1::0100111100  CHAN_BOND_SEQ_2_2::0100111100
+        CHAN_BOND_SEQ_2_3::0110111100  CHAN_BOND_SEQ_2_4::0100111100  CHAN_BOND_SEQ_2_CFG::00000
+        CHAN_BOND_SEQ_2_ENABLE::1111  CLK_COR_SEQ_1_1::0100011100  CLK_COR_SEQ_1_2::0000000000
+        CLK_COR_SEQ_1_3::0000000000  CLK_COR_SEQ_1_4::0000000000  CLK_COR_SEQ_1_ENABLE::1111
+        CLK_COR_SEQ_2_1::0000000000  CLK_COR_SEQ_2_2::0000000000  CLK_COR_SEQ_2_3::0000000000
+        CLK_COR_SEQ_2_4::0000000000  CLK_COR_SEQ_2_ENABLE::1111  CM_TRIM::01
+        COMMA_10B_ENABLE::1111111111  COM_BURST_VAL::1111  DFE_CAL_TIME::01100
+        DFE_CFG::00011011  GEARBOX_ENDEC::000  MCOMMA_10B_VALUE::1010000011
+        OOBDETECT_THRESHOLD::011  PCOMMA_10B_VALUE::0101111100  PMA_CDR_SCAN::640404c
+        PMA_CFG::0040000040000000003  PMA_RXSYNC_CFG::00  PMA_RX_CFG::05ce048
+        PMA_TX_CFG::00082  POWER_SAVE::0000110100  RXPLL_COM_CFG::21680a
+        RXPLL_CP_CFG::00  RXPLL_LKDET_CFG::111  RXPRBSERR_LOOPBACK::0  RXRECCLK_DLY::0000000000
+        RXUSRCLK_DLY::0000  RX_DLYALIGN_CTRINC::0100  RX_DLYALIGN_EDGESET::00110
+        RX_DLYALIGN_LPFINC::0111  RX_DLYALIGN_MONSEL::000  RX_DLYALIGN_OVRDSETTING::00000000
+        RX_EYE_OFFSET::4c  RX_EYE_SCANMODE::00  RX_IDLE_HI_CNT::1000  RX_IDLE_LO_CNT::0000
+        SATA_BURST_VAL::100  SATA_IDLE_VAL::100  TERMINATION_CTRL::10100
+        TRANS_TIME_FROM_P2::03c  TRANS_TIME_NON_P2::19  TRANS_TIME_RATE::0e
+        TRANS_TIME_TO_P2::064  TST_ATTR::00000000  TXOUTCLK_DLY::0000000000
+        TXPLL_COM_CFG::21680a  TXPLL_CP_CFG::00  TXPLL_LKDET_CFG::111  TXPLL_SATA::00
+        TX_BYTECLK_CFG::00  TX_DEEMPH_0::11010  TX_DEEMPH_1::10000  TX_DETECT_RX_CFG::1832
+        TX_DLYALIGN_CTRINC::0100  TX_DLYALIGN_LPFINC::0110  TX_DLYALIGN_MONSEL::000
+        TX_DLYALIGN_OVRDSETTING::10000000  TX_IDLE_ASSERT_DELAY::100  TX_IDLE_DEASSERT_DELAY::010
+        TX_MARGIN_FULL_0::1001110  TX_MARGIN_FULL_1::1001001  TX_MARGIN_FULL_2::1000101
+        TX_MARGIN_FULL_3::1000010  TX_MARGIN_FULL_4::1000000  TX_MARGIN_LOW_0::1000110
+        TX_MARGIN_LOW_1::1000100  TX_MARGIN_LOW_2::1000010  TX_MARGIN_LOW_3::1000000
+        TX_MARGIN_LOW_4::1000000  TX_PMADATA_OPT::0  TX_TDCC_CFG::11  TX_USRCLK_CFG::00
+        USR_CODE_ERR_CLR::0 "
+  ;
+inst "GTXE1_ML_REPLICATED_19_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate19" "GTXE1",placed GTX_X102Y90 GTXE1_X0Y9  ,
+  cfg " AC_CAP_DIS::TRUE ALIGN_COMMA_WORD::1 CHAN_BOND_1_MAX_SKEW::7 CHAN_BOND_2_MAX_SKEW::1
+       CHAN_BOND_KEEP_ALIGN::FALSE CHAN_BOND_SEQ_2_USE::FALSE CHAN_BOND_SEQ_LEN::1
+       CLK_CORRECT_USE::TRUE CLK_COR_ADJ_LEN::1 CLK_COR_DET_LEN::1 CLK_COR_INSERT_IDLE_FLAG::FALSE
+       CLK_COR_KEEP_IDLE::FALSE CLK_COR_MAX_LAT::20 CLK_COR_MIN_LAT::18
+       CLK_COR_PRECEDENCE::TRUE CLK_COR_REPEAT_WAIT::0 CLK_COR_SEQ_2_USE::FALSE
+       COMMA_DOUBLE::FALSE DCLKINV::DCLK_B DEC_MCOMMA_DETECT::TRUE DEC_PCOMMA_DETECT::TRUE
+       DEC_VALID_COMMA_ONLY::TRUE DFE_DRP_EN::FALSE GEN_RXUSRCLK::TRUE GEN_TXUSRCLK::TRUE
+       GREFCLKRXINV::#OFF GREFCLKTXINV::#OFF GTX_CFG_PWRUP::FALSE LOOPBACK_DRP_EN::FALSE
+       MASTER_DRP_EN::FALSE MCOMMA_DETECT::TRUE PCI_EXPRESS_MODE::FALSE
+       PCOMMA_DETECT::TRUE PDELIDLE_DRP_EN::FALSE PHASEALIGN_DRP_EN::FALSE
+       PLL_DRP_EN::FALSE PMA_CAS_CLK_EN::FALSE POLARITY_DRP_EN::FALSE PRBS_DRP_EN::FALSE
+       RCV_TERM_GND::FALSE RCV_TERM_VTTRX::FALSE RESET_DRP_EN::FALSE RXBUF_OVFL_THRESH::61
+       RXBUF_OVRD_THRESH::FALSE RXBUF_UDFL_THRESH::4 RXGEARBOX_USE::FALSE
+       RXPLL_DIVSEL45_FB::5 RXPLL_DIVSEL_FB::2 RXPLL_DIVSEL_OUT::1 RXPLL_DIVSEL_REF::1
+       RXPLL_STARTUP_EN::TRUE RXRECCLK_CTRL::CLKTESTSIG1 RXUSRCLK2INV::RXUSRCLK2_B
+       RXUSRCLKINV::RXUSRCLK_B RX_BUFFER_USE::TRUE RX_CDR_FORCE_ROTATE::FALSE
+       RX_CLK25_DIVIDER::6 RX_DATA_WIDTH::20 RX_DECODE_SEQ_MATCH::TRUE RX_EN_IDLE_HOLD_CDR::FALSE
+       RX_EN_IDLE_HOLD_DFE::TRUE RX_EN_IDLE_RESET_BUF::TRUE RX_EN_IDLE_RESET_FR::TRUE
+       RX_EN_IDLE_RESET_PH::TRUE RX_EN_MODE_RESET_BUF::TRUE RX_EN_RATE_RESET_BUF::TRUE
+       RX_EN_REALIGN_RESET_BUF::FALSE RX_EN_REALIGN_RESET_BUF2::FALSE RX_FIFO_ADDR_MODE::FULL
+       RX_LOSS_OF_SYNC_FSM::FALSE RX_LOS_INVALID_INCR::1 RX_LOS_THRESHOLD::4
+       RX_OVERSAMPLE_MODE::FALSE RX_SLIDE_AUTO_WAIT::5 RX_SLIDE_MODE::OFF
+       RX_XCLK_SEL::RXREC SAS_MAX_COMSAS::52 SAS_MIN_COMSAS::40 SATA_MAX_BURST::7
+       SATA_MAX_INIT::22 SATA_MAX_WAKE::7 SATA_MIN_BURST::4 SATA_MIN_INIT::12
+       SATA_MIN_WAKE::4 SCANCLKINV::#OFF SHOW_REALIGN_COMMA::TRUE TERMINATION_OVRD::FALSE
+       TSTCLK0INV::TSTCLK0_B TSTCLK1INV::TSTCLK1_B TXDRIVE_DRP_EN::FALSE
+       TXDRIVE_LOOPBACK_HIZ::FALSE TXDRIVE_LOOPBACK_PD::FALSE TXGEARBOX_USE::FALSE
+       TXOUTCLKPCS_SEL::0 TXOUTCLK_CTRL::CLKTESTSIG0 TXPLL_DIVSEL45_FB::5
+       TXPLL_DIVSEL_FB::2 TXPLL_DIVSEL_OUT::1 TXPLL_DIVSEL_REF::1 TXPLL_STARTUP_EN::TRUE
+       TXUSRCLK2INV::TXUSRCLK2_B TXUSRCLKINV::TXUSRCLK_B TX_BUFFER_USE::TRUE
+       TX_CLK25_DIVIDER::6 TX_CLK_SOURCE::RXPLL TX_DATA_WIDTH::20 TX_DRIVE_MODE::DIRECT
+       TX_EN_RATE_RESET_BUF::TRUE TX_OVERSAMPLE_MODE::FALSE TX_XCLK_SEL::TXUSR
+       GTXE1:GTXE1_ML_REPLICATED_19_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate19:
+         A_DFECLKDLYADJ::000000  A_DFEDLYOVRD::0  A_DFETAP1::00000  A_DFETAP2::00000
+        A_DFETAP3::0000  A_DFETAP4::0000  A_DFETAPOVRD::0  A_GTXRXRESET::0
+        A_GTXTXRESET::0  A_LOOPBACK::000  A_PLLCLKRXRESET::0  A_PLLCLKTXRESET::0
+        A_PLLRXRESET::0  A_PLLTXRESET::0  A_PRBSCNTRESET::0  A_RXBUFRESET::0
+        A_RXCDRFREQRESET::0  A_RXCDRHOLD::0  A_RXCDRPHASERESET::0  A_RXCDRRESET::0
+        A_RXDFERESET::0  A_RXENPMAPHASEALIGN::0  A_RXENPRBSTST::000  A_RXENSAMPLEALIGN::0
+        A_RXEQMIX::0000000000  A_RXPLLLKDETEN::0  A_RXPLLPOWERDOWN::0  A_RXPMASETPHASE::0
+        A_RXPOLARITY::0  A_RXPOWERDOWN::00  A_RXRESET::0  A_TXBUFDIFFCTRL::010
+        A_TXDEEMPH::0  A_TXDIFFCTRL::0000  A_TXELECIDLE::0  A_TXENPMAPHASEALIGN::0
+        A_TXENPRBSTST::000  A_TXMARGIN::010  A_TXPLLLKDETEN::0  A_TXPLLPOWERDOWN::0
+        A_TXPMASETPHASE::0  A_TXPOLARITY::0  A_TXPOSTEMPHASIS::00000  A_TXPOWERDOWN::00
+        A_TXPRBSFORCEERR::0  A_TXPREEMPHASIS::0000  A_TXRESET::0  A_TXSWING::0
+        BGTEST_CFG::00  BIAS_CFG::00000  CDR_PH_ADJ_TIME::10100  CHAN_BOND_SEQ_1_1::0101111100
+        CHAN_BOND_SEQ_1_2::0001001010  CHAN_BOND_SEQ_1_3::0001001010  CHAN_BOND_SEQ_1_4::0110111100
+        CHAN_BOND_SEQ_1_ENABLE::1111  CHAN_BOND_SEQ_2_1::0100111100  CHAN_BOND_SEQ_2_2::0100111100
+        CHAN_BOND_SEQ_2_3::0110111100  CHAN_BOND_SEQ_2_4::0100111100  CHAN_BOND_SEQ_2_CFG::00000
+        CHAN_BOND_SEQ_2_ENABLE::1111  CLK_COR_SEQ_1_1::0100011100  CLK_COR_SEQ_1_2::0000000000
+        CLK_COR_SEQ_1_3::0000000000  CLK_COR_SEQ_1_4::0000000000  CLK_COR_SEQ_1_ENABLE::1111
+        CLK_COR_SEQ_2_1::0000000000  CLK_COR_SEQ_2_2::0000000000  CLK_COR_SEQ_2_3::0000000000
+        CLK_COR_SEQ_2_4::0000000000  CLK_COR_SEQ_2_ENABLE::1111  CM_TRIM::01
+        COMMA_10B_ENABLE::1111111111  COM_BURST_VAL::1111  DFE_CAL_TIME::01100
+        DFE_CFG::00011011  GEARBOX_ENDEC::000  MCOMMA_10B_VALUE::1010000011
+        OOBDETECT_THRESHOLD::011  PCOMMA_10B_VALUE::0101111100  PMA_CDR_SCAN::640404c
+        PMA_CFG::0040000040000000003  PMA_RXSYNC_CFG::00  PMA_RX_CFG::05ce048
+        PMA_TX_CFG::00082  POWER_SAVE::0000110100  RXPLL_COM_CFG::21680a
+        RXPLL_CP_CFG::00  RXPLL_LKDET_CFG::111  RXPRBSERR_LOOPBACK::0  RXRECCLK_DLY::0000000000
+        RXUSRCLK_DLY::0000  RX_DLYALIGN_CTRINC::0100  RX_DLYALIGN_EDGESET::00110
+        RX_DLYALIGN_LPFINC::0111  RX_DLYALIGN_MONSEL::000  RX_DLYALIGN_OVRDSETTING::00000000
+        RX_EYE_OFFSET::4c  RX_EYE_SCANMODE::00  RX_IDLE_HI_CNT::1000  RX_IDLE_LO_CNT::0000
+        SATA_BURST_VAL::100  SATA_IDLE_VAL::100  TERMINATION_CTRL::10100
+        TRANS_TIME_FROM_P2::03c  TRANS_TIME_NON_P2::19  TRANS_TIME_RATE::0e
+        TRANS_TIME_TO_P2::064  TST_ATTR::00000000  TXOUTCLK_DLY::0000000000
+        TXPLL_COM_CFG::21680a  TXPLL_CP_CFG::00  TXPLL_LKDET_CFG::111  TXPLL_SATA::00
+        TX_BYTECLK_CFG::00  TX_DEEMPH_0::11010  TX_DEEMPH_1::10000  TX_DETECT_RX_CFG::1832
+        TX_DLYALIGN_CTRINC::0100  TX_DLYALIGN_LPFINC::0110  TX_DLYALIGN_MONSEL::000
+        TX_DLYALIGN_OVRDSETTING::10000000  TX_IDLE_ASSERT_DELAY::100  TX_IDLE_DEASSERT_DELAY::010
+        TX_MARGIN_FULL_0::1001110  TX_MARGIN_FULL_1::1001001  TX_MARGIN_FULL_2::1000101
+        TX_MARGIN_FULL_3::1000010  TX_MARGIN_FULL_4::1000000  TX_MARGIN_LOW_0::1000110
+        TX_MARGIN_LOW_1::1000100  TX_MARGIN_LOW_2::1000010  TX_MARGIN_LOW_3::1000000
+        TX_MARGIN_LOW_4::1000000  TX_PMADATA_OPT::0  TX_TDCC_CFG::11  TX_USRCLK_CFG::00
+        USR_CODE_ERR_CLR::0 "
+  ;
+inst "GTXE1_ML_REPLICATED_0_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate0" "GTXE1",placed GTX_X102Y100 GTXE1_X0Y10  ,
+  cfg " AC_CAP_DIS::TRUE ALIGN_COMMA_WORD::1 CHAN_BOND_1_MAX_SKEW::7 CHAN_BOND_2_MAX_SKEW::1
+       CHAN_BOND_KEEP_ALIGN::FALSE CHAN_BOND_SEQ_2_USE::FALSE CHAN_BOND_SEQ_LEN::1
+       CLK_CORRECT_USE::TRUE CLK_COR_ADJ_LEN::1 CLK_COR_DET_LEN::1 CLK_COR_INSERT_IDLE_FLAG::FALSE
+       CLK_COR_KEEP_IDLE::FALSE CLK_COR_MAX_LAT::20 CLK_COR_MIN_LAT::18
+       CLK_COR_PRECEDENCE::TRUE CLK_COR_REPEAT_WAIT::0 CLK_COR_SEQ_2_USE::FALSE
+       COMMA_DOUBLE::FALSE DCLKINV::DCLK_B DEC_MCOMMA_DETECT::TRUE DEC_PCOMMA_DETECT::TRUE
+       DEC_VALID_COMMA_ONLY::TRUE DFE_DRP_EN::FALSE GEN_RXUSRCLK::TRUE GEN_TXUSRCLK::TRUE
+       GREFCLKRXINV::#OFF GREFCLKTXINV::#OFF GTX_CFG_PWRUP::FALSE LOOPBACK_DRP_EN::FALSE
+       MASTER_DRP_EN::FALSE MCOMMA_DETECT::TRUE PCI_EXPRESS_MODE::FALSE
+       PCOMMA_DETECT::TRUE PDELIDLE_DRP_EN::FALSE PHASEALIGN_DRP_EN::FALSE
+       PLL_DRP_EN::FALSE PMA_CAS_CLK_EN::FALSE POLARITY_DRP_EN::FALSE PRBS_DRP_EN::FALSE
+       RCV_TERM_GND::FALSE RCV_TERM_VTTRX::FALSE RESET_DRP_EN::FALSE RXBUF_OVFL_THRESH::61
+       RXBUF_OVRD_THRESH::FALSE RXBUF_UDFL_THRESH::4 RXGEARBOX_USE::FALSE
+       RXPLL_DIVSEL45_FB::5 RXPLL_DIVSEL_FB::2 RXPLL_DIVSEL_OUT::1 RXPLL_DIVSEL_REF::1
+       RXPLL_STARTUP_EN::TRUE RXRECCLK_CTRL::CLKTESTSIG1 RXUSRCLK2INV::RXUSRCLK2_B
+       RXUSRCLKINV::RXUSRCLK_B RX_BUFFER_USE::TRUE RX_CDR_FORCE_ROTATE::FALSE
+       RX_CLK25_DIVIDER::6 RX_DATA_WIDTH::20 RX_DECODE_SEQ_MATCH::TRUE RX_EN_IDLE_HOLD_CDR::FALSE
+       RX_EN_IDLE_HOLD_DFE::TRUE RX_EN_IDLE_RESET_BUF::TRUE RX_EN_IDLE_RESET_FR::TRUE
+       RX_EN_IDLE_RESET_PH::TRUE RX_EN_MODE_RESET_BUF::TRUE RX_EN_RATE_RESET_BUF::TRUE
+       RX_EN_REALIGN_RESET_BUF::FALSE RX_EN_REALIGN_RESET_BUF2::FALSE RX_FIFO_ADDR_MODE::FULL
+       RX_LOSS_OF_SYNC_FSM::FALSE RX_LOS_INVALID_INCR::1 RX_LOS_THRESHOLD::4
+       RX_OVERSAMPLE_MODE::FALSE RX_SLIDE_AUTO_WAIT::5 RX_SLIDE_MODE::OFF
+       RX_XCLK_SEL::RXREC SAS_MAX_COMSAS::52 SAS_MIN_COMSAS::40 SATA_MAX_BURST::7
+       SATA_MAX_INIT::22 SATA_MAX_WAKE::7 SATA_MIN_BURST::4 SATA_MIN_INIT::12
+       SATA_MIN_WAKE::4 SCANCLKINV::#OFF SHOW_REALIGN_COMMA::TRUE TERMINATION_OVRD::FALSE
+       TSTCLK0INV::TSTCLK0_B TSTCLK1INV::TSTCLK1_B TXDRIVE_DRP_EN::FALSE
+       TXDRIVE_LOOPBACK_HIZ::FALSE TXDRIVE_LOOPBACK_PD::FALSE TXGEARBOX_USE::FALSE
+       TXOUTCLKPCS_SEL::0 TXOUTCLK_CTRL::CLKTESTSIG0 TXPLL_DIVSEL45_FB::5
+       TXPLL_DIVSEL_FB::2 TXPLL_DIVSEL_OUT::1 TXPLL_DIVSEL_REF::1 TXPLL_STARTUP_EN::TRUE
+       TXUSRCLK2INV::TXUSRCLK2_B TXUSRCLKINV::TXUSRCLK_B TX_BUFFER_USE::TRUE
+       TX_CLK25_DIVIDER::6 TX_CLK_SOURCE::RXPLL TX_DATA_WIDTH::20 TX_DRIVE_MODE::DIRECT
+       TX_EN_RATE_RESET_BUF::TRUE TX_OVERSAMPLE_MODE::FALSE TX_XCLK_SEL::TXUSR
+       GTXE1:GTXE1_ML_REPLICATED_0_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate0:
+         A_DFECLKDLYADJ::000000  A_DFEDLYOVRD::0  A_DFETAP1::00000  A_DFETAP2::00000
+        A_DFETAP3::0000  A_DFETAP4::0000  A_DFETAPOVRD::0  A_GTXRXRESET::0
+        A_GTXTXRESET::0  A_LOOPBACK::000  A_PLLCLKRXRESET::0  A_PLLCLKTXRESET::0
+        A_PLLRXRESET::0  A_PLLTXRESET::0  A_PRBSCNTRESET::0  A_RXBUFRESET::0
+        A_RXCDRFREQRESET::0  A_RXCDRHOLD::0  A_RXCDRPHASERESET::0  A_RXCDRRESET::0
+        A_RXDFERESET::0  A_RXENPMAPHASEALIGN::0  A_RXENPRBSTST::000  A_RXENSAMPLEALIGN::0
+        A_RXEQMIX::0000000000  A_RXPLLLKDETEN::0  A_RXPLLPOWERDOWN::0  A_RXPMASETPHASE::0
+        A_RXPOLARITY::0  A_RXPOWERDOWN::00  A_RXRESET::0  A_TXBUFDIFFCTRL::010
+        A_TXDEEMPH::0  A_TXDIFFCTRL::0000  A_TXELECIDLE::0  A_TXENPMAPHASEALIGN::0
+        A_TXENPRBSTST::000  A_TXMARGIN::010  A_TXPLLLKDETEN::0  A_TXPLLPOWERDOWN::0
+        A_TXPMASETPHASE::0  A_TXPOLARITY::0  A_TXPOSTEMPHASIS::00000  A_TXPOWERDOWN::00
+        A_TXPRBSFORCEERR::0  A_TXPREEMPHASIS::0000  A_TXRESET::0  A_TXSWING::0
+        BGTEST_CFG::00  BIAS_CFG::00000  CDR_PH_ADJ_TIME::10100  CHAN_BOND_SEQ_1_1::0101111100
+        CHAN_BOND_SEQ_1_2::0001001010  CHAN_BOND_SEQ_1_3::0001001010  CHAN_BOND_SEQ_1_4::0110111100
+        CHAN_BOND_SEQ_1_ENABLE::1111  CHAN_BOND_SEQ_2_1::0100111100  CHAN_BOND_SEQ_2_2::0100111100
+        CHAN_BOND_SEQ_2_3::0110111100  CHAN_BOND_SEQ_2_4::0100111100  CHAN_BOND_SEQ_2_CFG::00000
+        CHAN_BOND_SEQ_2_ENABLE::1111  CLK_COR_SEQ_1_1::0100011100  CLK_COR_SEQ_1_2::0000000000
+        CLK_COR_SEQ_1_3::0000000000  CLK_COR_SEQ_1_4::0000000000  CLK_COR_SEQ_1_ENABLE::1111
+        CLK_COR_SEQ_2_1::0000000000  CLK_COR_SEQ_2_2::0000000000  CLK_COR_SEQ_2_3::0000000000
+        CLK_COR_SEQ_2_4::0000000000  CLK_COR_SEQ_2_ENABLE::1111  CM_TRIM::01
+        COMMA_10B_ENABLE::1111111111  COM_BURST_VAL::1111  DFE_CAL_TIME::01100
+        DFE_CFG::00011011  GEARBOX_ENDEC::000  MCOMMA_10B_VALUE::1010000011
+        OOBDETECT_THRESHOLD::011  PCOMMA_10B_VALUE::0101111100  PMA_CDR_SCAN::640404c
+        PMA_CFG::0040000040000000003  PMA_RXSYNC_CFG::00  PMA_RX_CFG::05ce048
+        PMA_TX_CFG::00082  POWER_SAVE::0000110100  RXPLL_COM_CFG::21680a
+        RXPLL_CP_CFG::00  RXPLL_LKDET_CFG::111  RXPRBSERR_LOOPBACK::0  RXRECCLK_DLY::0000000000
+        RXUSRCLK_DLY::0000  RX_DLYALIGN_CTRINC::0100  RX_DLYALIGN_EDGESET::00110
+        RX_DLYALIGN_LPFINC::0111  RX_DLYALIGN_MONSEL::000  RX_DLYALIGN_OVRDSETTING::00000000
+        RX_EYE_OFFSET::4c  RX_EYE_SCANMODE::00  RX_IDLE_HI_CNT::1000  RX_IDLE_LO_CNT::0000
+        SATA_BURST_VAL::100  SATA_IDLE_VAL::100  TERMINATION_CTRL::10100
+        TRANS_TIME_FROM_P2::03c  TRANS_TIME_NON_P2::19  TRANS_TIME_RATE::0e
+        TRANS_TIME_TO_P2::064  TST_ATTR::00000000  TXOUTCLK_DLY::0000000000
+        TXPLL_COM_CFG::21680a  TXPLL_CP_CFG::00  TXPLL_LKDET_CFG::111  TXPLL_SATA::00
+        TX_BYTECLK_CFG::00  TX_DEEMPH_0::11010  TX_DEEMPH_1::10000  TX_DETECT_RX_CFG::1832
+        TX_DLYALIGN_CTRINC::0100  TX_DLYALIGN_LPFINC::0110  TX_DLYALIGN_MONSEL::000
+        TX_DLYALIGN_OVRDSETTING::10000000  TX_IDLE_ASSERT_DELAY::100  TX_IDLE_DEASSERT_DELAY::010
+        TX_MARGIN_FULL_0::1001110  TX_MARGIN_FULL_1::1001001  TX_MARGIN_FULL_2::1000101
+        TX_MARGIN_FULL_3::1000010  TX_MARGIN_FULL_4::1000000  TX_MARGIN_LOW_0::1000110
+        TX_MARGIN_LOW_1::1000100  TX_MARGIN_LOW_2::1000010  TX_MARGIN_LOW_3::1000000
+        TX_MARGIN_LOW_4::1000000  TX_PMADATA_OPT::0  TX_TDCC_CFG::11  TX_USRCLK_CFG::00
+        USR_CODE_ERR_CLR::0 "
+  ;
+inst "GTXE1_ML_REPLICATED_1_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate1" "GTXE1",placed GTX_X102Y110 GTXE1_X0Y11  ,
+  cfg " AC_CAP_DIS::TRUE ALIGN_COMMA_WORD::1 CHAN_BOND_1_MAX_SKEW::7 CHAN_BOND_2_MAX_SKEW::1
+       CHAN_BOND_KEEP_ALIGN::FALSE CHAN_BOND_SEQ_2_USE::FALSE CHAN_BOND_SEQ_LEN::1
+       CLK_CORRECT_USE::TRUE CLK_COR_ADJ_LEN::1 CLK_COR_DET_LEN::1 CLK_COR_INSERT_IDLE_FLAG::FALSE
+       CLK_COR_KEEP_IDLE::FALSE CLK_COR_MAX_LAT::20 CLK_COR_MIN_LAT::18
+       CLK_COR_PRECEDENCE::TRUE CLK_COR_REPEAT_WAIT::0 CLK_COR_SEQ_2_USE::FALSE
+       COMMA_DOUBLE::FALSE DCLKINV::DCLK_B DEC_MCOMMA_DETECT::TRUE DEC_PCOMMA_DETECT::TRUE
+       DEC_VALID_COMMA_ONLY::TRUE DFE_DRP_EN::FALSE GEN_RXUSRCLK::TRUE GEN_TXUSRCLK::TRUE
+       GREFCLKRXINV::#OFF GREFCLKTXINV::#OFF GTX_CFG_PWRUP::FALSE LOOPBACK_DRP_EN::FALSE
+       MASTER_DRP_EN::FALSE MCOMMA_DETECT::TRUE PCI_EXPRESS_MODE::FALSE
+       PCOMMA_DETECT::TRUE PDELIDLE_DRP_EN::FALSE PHASEALIGN_DRP_EN::FALSE
+       PLL_DRP_EN::FALSE PMA_CAS_CLK_EN::FALSE POLARITY_DRP_EN::FALSE PRBS_DRP_EN::FALSE
+       RCV_TERM_GND::FALSE RCV_TERM_VTTRX::FALSE RESET_DRP_EN::FALSE RXBUF_OVFL_THRESH::61
+       RXBUF_OVRD_THRESH::FALSE RXBUF_UDFL_THRESH::4 RXGEARBOX_USE::FALSE
+       RXPLL_DIVSEL45_FB::5 RXPLL_DIVSEL_FB::2 RXPLL_DIVSEL_OUT::1 RXPLL_DIVSEL_REF::1
+       RXPLL_STARTUP_EN::TRUE RXRECCLK_CTRL::CLKTESTSIG1 RXUSRCLK2INV::RXUSRCLK2_B
+       RXUSRCLKINV::RXUSRCLK_B RX_BUFFER_USE::TRUE RX_CDR_FORCE_ROTATE::FALSE
+       RX_CLK25_DIVIDER::6 RX_DATA_WIDTH::20 RX_DECODE_SEQ_MATCH::TRUE RX_EN_IDLE_HOLD_CDR::FALSE
+       RX_EN_IDLE_HOLD_DFE::TRUE RX_EN_IDLE_RESET_BUF::TRUE RX_EN_IDLE_RESET_FR::TRUE
+       RX_EN_IDLE_RESET_PH::TRUE RX_EN_MODE_RESET_BUF::TRUE RX_EN_RATE_RESET_BUF::TRUE
+       RX_EN_REALIGN_RESET_BUF::FALSE RX_EN_REALIGN_RESET_BUF2::FALSE RX_FIFO_ADDR_MODE::FULL
+       RX_LOSS_OF_SYNC_FSM::FALSE RX_LOS_INVALID_INCR::1 RX_LOS_THRESHOLD::4
+       RX_OVERSAMPLE_MODE::FALSE RX_SLIDE_AUTO_WAIT::5 RX_SLIDE_MODE::OFF
+       RX_XCLK_SEL::RXREC SAS_MAX_COMSAS::52 SAS_MIN_COMSAS::40 SATA_MAX_BURST::7
+       SATA_MAX_INIT::22 SATA_MAX_WAKE::7 SATA_MIN_BURST::4 SATA_MIN_INIT::12
+       SATA_MIN_WAKE::4 SCANCLKINV::#OFF SHOW_REALIGN_COMMA::TRUE TERMINATION_OVRD::FALSE
+       TSTCLK0INV::TSTCLK0_B TSTCLK1INV::TSTCLK1_B TXDRIVE_DRP_EN::FALSE
+       TXDRIVE_LOOPBACK_HIZ::FALSE TXDRIVE_LOOPBACK_PD::FALSE TXGEARBOX_USE::FALSE
+       TXOUTCLKPCS_SEL::0 TXOUTCLK_CTRL::CLKTESTSIG0 TXPLL_DIVSEL45_FB::5
+       TXPLL_DIVSEL_FB::2 TXPLL_DIVSEL_OUT::1 TXPLL_DIVSEL_REF::1 TXPLL_STARTUP_EN::TRUE
+       TXUSRCLK2INV::TXUSRCLK2_B TXUSRCLKINV::TXUSRCLK_B TX_BUFFER_USE::TRUE
+       TX_CLK25_DIVIDER::6 TX_CLK_SOURCE::RXPLL TX_DATA_WIDTH::20 TX_DRIVE_MODE::DIRECT
+       TX_EN_RATE_RESET_BUF::TRUE TX_OVERSAMPLE_MODE::FALSE TX_XCLK_SEL::TXUSR
+       GTXE1:GTXE1_ML_REPLICATED_1_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate1:
+         A_DFECLKDLYADJ::000000  A_DFEDLYOVRD::0  A_DFETAP1::00000  A_DFETAP2::00000
+        A_DFETAP3::0000  A_DFETAP4::0000  A_DFETAPOVRD::0  A_GTXRXRESET::0
+        A_GTXTXRESET::0  A_LOOPBACK::000  A_PLLCLKRXRESET::0  A_PLLCLKTXRESET::0
+        A_PLLRXRESET::0  A_PLLTXRESET::0  A_PRBSCNTRESET::0  A_RXBUFRESET::0
+        A_RXCDRFREQRESET::0  A_RXCDRHOLD::0  A_RXCDRPHASERESET::0  A_RXCDRRESET::0
+        A_RXDFERESET::0  A_RXENPMAPHASEALIGN::0  A_RXENPRBSTST::000  A_RXENSAMPLEALIGN::0
+        A_RXEQMIX::0000000000  A_RXPLLLKDETEN::0  A_RXPLLPOWERDOWN::0  A_RXPMASETPHASE::0
+        A_RXPOLARITY::0  A_RXPOWERDOWN::00  A_RXRESET::0  A_TXBUFDIFFCTRL::010
+        A_TXDEEMPH::0  A_TXDIFFCTRL::0000  A_TXELECIDLE::0  A_TXENPMAPHASEALIGN::0
+        A_TXENPRBSTST::000  A_TXMARGIN::010  A_TXPLLLKDETEN::0  A_TXPLLPOWERDOWN::0
+        A_TXPMASETPHASE::0  A_TXPOLARITY::0  A_TXPOSTEMPHASIS::00000  A_TXPOWERDOWN::00
+        A_TXPRBSFORCEERR::0  A_TXPREEMPHASIS::0000  A_TXRESET::0  A_TXSWING::0
+        BGTEST_CFG::00  BIAS_CFG::00000  CDR_PH_ADJ_TIME::10100  CHAN_BOND_SEQ_1_1::0101111100
+        CHAN_BOND_SEQ_1_2::0001001010  CHAN_BOND_SEQ_1_3::0001001010  CHAN_BOND_SEQ_1_4::0110111100
+        CHAN_BOND_SEQ_1_ENABLE::1111  CHAN_BOND_SEQ_2_1::0100111100  CHAN_BOND_SEQ_2_2::0100111100
+        CHAN_BOND_SEQ_2_3::0110111100  CHAN_BOND_SEQ_2_4::0100111100  CHAN_BOND_SEQ_2_CFG::00000
+        CHAN_BOND_SEQ_2_ENABLE::1111  CLK_COR_SEQ_1_1::0100011100  CLK_COR_SEQ_1_2::0000000000
+        CLK_COR_SEQ_1_3::0000000000  CLK_COR_SEQ_1_4::0000000000  CLK_COR_SEQ_1_ENABLE::1111
+        CLK_COR_SEQ_2_1::0000000000  CLK_COR_SEQ_2_2::0000000000  CLK_COR_SEQ_2_3::0000000000
+        CLK_COR_SEQ_2_4::0000000000  CLK_COR_SEQ_2_ENABLE::1111  CM_TRIM::01
+        COMMA_10B_ENABLE::1111111111  COM_BURST_VAL::1111  DFE_CAL_TIME::01100
+        DFE_CFG::00011011  GEARBOX_ENDEC::000  MCOMMA_10B_VALUE::1010000011
+        OOBDETECT_THRESHOLD::011  PCOMMA_10B_VALUE::0101111100  PMA_CDR_SCAN::640404c
+        PMA_CFG::0040000040000000003  PMA_RXSYNC_CFG::00  PMA_RX_CFG::05ce048
+        PMA_TX_CFG::00082  POWER_SAVE::0000110100  RXPLL_COM_CFG::21680a
+        RXPLL_CP_CFG::00  RXPLL_LKDET_CFG::111  RXPRBSERR_LOOPBACK::0  RXRECCLK_DLY::0000000000
+        RXUSRCLK_DLY::0000  RX_DLYALIGN_CTRINC::0100  RX_DLYALIGN_EDGESET::00110
+        RX_DLYALIGN_LPFINC::0111  RX_DLYALIGN_MONSEL::000  RX_DLYALIGN_OVRDSETTING::00000000
+        RX_EYE_OFFSET::4c  RX_EYE_SCANMODE::00  RX_IDLE_HI_CNT::1000  RX_IDLE_LO_CNT::0000
+        SATA_BURST_VAL::100  SATA_IDLE_VAL::100  TERMINATION_CTRL::10100
+        TRANS_TIME_FROM_P2::03c  TRANS_TIME_NON_P2::19  TRANS_TIME_RATE::0e
+        TRANS_TIME_TO_P2::064  TST_ATTR::00000000  TXOUTCLK_DLY::0000000000
+        TXPLL_COM_CFG::21680a  TXPLL_CP_CFG::00  TXPLL_LKDET_CFG::111  TXPLL_SATA::00
+        TX_BYTECLK_CFG::00  TX_DEEMPH_0::11010  TX_DEEMPH_1::10000  TX_DETECT_RX_CFG::1832
+        TX_DLYALIGN_CTRINC::0100  TX_DLYALIGN_LPFINC::0110  TX_DLYALIGN_MONSEL::000
+        TX_DLYALIGN_OVRDSETTING::10000000  TX_IDLE_ASSERT_DELAY::100  TX_IDLE_DEASSERT_DELAY::010
+        TX_MARGIN_FULL_0::1001110  TX_MARGIN_FULL_1::1001001  TX_MARGIN_FULL_2::1000101
+        TX_MARGIN_FULL_3::1000010  TX_MARGIN_FULL_4::1000000  TX_MARGIN_LOW_0::1000110
+        TX_MARGIN_LOW_1::1000100  TX_MARGIN_LOW_2::1000010  TX_MARGIN_LOW_3::1000000
+        TX_MARGIN_LOW_4::1000000  TX_PMADATA_OPT::0  TX_TDCC_CFG::11  TX_USRCLK_CFG::00
+        USR_CODE_ERR_CLR::0 "
+  ;
+inst "GTXE1_ML_REPLICATED_2_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate2" "GTXE1",placed GTX_X102Y120 GTXE1_X0Y12  ,
+  cfg " AC_CAP_DIS::TRUE ALIGN_COMMA_WORD::1 CHAN_BOND_1_MAX_SKEW::7 CHAN_BOND_2_MAX_SKEW::1
+       CHAN_BOND_KEEP_ALIGN::FALSE CHAN_BOND_SEQ_2_USE::FALSE CHAN_BOND_SEQ_LEN::1
+       CLK_CORRECT_USE::TRUE CLK_COR_ADJ_LEN::1 CLK_COR_DET_LEN::1 CLK_COR_INSERT_IDLE_FLAG::FALSE
+       CLK_COR_KEEP_IDLE::FALSE CLK_COR_MAX_LAT::20 CLK_COR_MIN_LAT::18
+       CLK_COR_PRECEDENCE::TRUE CLK_COR_REPEAT_WAIT::0 CLK_COR_SEQ_2_USE::FALSE
+       COMMA_DOUBLE::FALSE DCLKINV::DCLK_B DEC_MCOMMA_DETECT::TRUE DEC_PCOMMA_DETECT::TRUE
+       DEC_VALID_COMMA_ONLY::TRUE DFE_DRP_EN::FALSE GEN_RXUSRCLK::TRUE GEN_TXUSRCLK::TRUE
+       GREFCLKRXINV::#OFF GREFCLKTXINV::#OFF GTX_CFG_PWRUP::FALSE LOOPBACK_DRP_EN::FALSE
+       MASTER_DRP_EN::FALSE MCOMMA_DETECT::TRUE PCI_EXPRESS_MODE::FALSE
+       PCOMMA_DETECT::TRUE PDELIDLE_DRP_EN::FALSE PHASEALIGN_DRP_EN::FALSE
+       PLL_DRP_EN::FALSE PMA_CAS_CLK_EN::FALSE POLARITY_DRP_EN::FALSE PRBS_DRP_EN::FALSE
+       RCV_TERM_GND::FALSE RCV_TERM_VTTRX::FALSE RESET_DRP_EN::FALSE RXBUF_OVFL_THRESH::61
+       RXBUF_OVRD_THRESH::FALSE RXBUF_UDFL_THRESH::4 RXGEARBOX_USE::FALSE
+       RXPLL_DIVSEL45_FB::5 RXPLL_DIVSEL_FB::2 RXPLL_DIVSEL_OUT::1 RXPLL_DIVSEL_REF::1
+       RXPLL_STARTUP_EN::TRUE RXRECCLK_CTRL::CLKTESTSIG1 RXUSRCLK2INV::RXUSRCLK2_B
+       RXUSRCLKINV::RXUSRCLK_B RX_BUFFER_USE::TRUE RX_CDR_FORCE_ROTATE::FALSE
+       RX_CLK25_DIVIDER::6 RX_DATA_WIDTH::20 RX_DECODE_SEQ_MATCH::TRUE RX_EN_IDLE_HOLD_CDR::FALSE
+       RX_EN_IDLE_HOLD_DFE::TRUE RX_EN_IDLE_RESET_BUF::TRUE RX_EN_IDLE_RESET_FR::TRUE
+       RX_EN_IDLE_RESET_PH::TRUE RX_EN_MODE_RESET_BUF::TRUE RX_EN_RATE_RESET_BUF::TRUE
+       RX_EN_REALIGN_RESET_BUF::FALSE RX_EN_REALIGN_RESET_BUF2::FALSE RX_FIFO_ADDR_MODE::FULL
+       RX_LOSS_OF_SYNC_FSM::FALSE RX_LOS_INVALID_INCR::1 RX_LOS_THRESHOLD::4
+       RX_OVERSAMPLE_MODE::FALSE RX_SLIDE_AUTO_WAIT::5 RX_SLIDE_MODE::OFF
+       RX_XCLK_SEL::RXREC SAS_MAX_COMSAS::52 SAS_MIN_COMSAS::40 SATA_MAX_BURST::7
+       SATA_MAX_INIT::22 SATA_MAX_WAKE::7 SATA_MIN_BURST::4 SATA_MIN_INIT::12
+       SATA_MIN_WAKE::4 SCANCLKINV::#OFF SHOW_REALIGN_COMMA::TRUE TERMINATION_OVRD::FALSE
+       TSTCLK0INV::TSTCLK0_B TSTCLK1INV::TSTCLK1_B TXDRIVE_DRP_EN::FALSE
+       TXDRIVE_LOOPBACK_HIZ::FALSE TXDRIVE_LOOPBACK_PD::FALSE TXGEARBOX_USE::FALSE
+       TXOUTCLKPCS_SEL::0 TXOUTCLK_CTRL::CLKTESTSIG0 TXPLL_DIVSEL45_FB::5
+       TXPLL_DIVSEL_FB::2 TXPLL_DIVSEL_OUT::1 TXPLL_DIVSEL_REF::1 TXPLL_STARTUP_EN::TRUE
+       TXUSRCLK2INV::TXUSRCLK2_B TXUSRCLKINV::TXUSRCLK_B TX_BUFFER_USE::TRUE
+       TX_CLK25_DIVIDER::6 TX_CLK_SOURCE::RXPLL TX_DATA_WIDTH::20 TX_DRIVE_MODE::DIRECT
+       TX_EN_RATE_RESET_BUF::TRUE TX_OVERSAMPLE_MODE::FALSE TX_XCLK_SEL::TXUSR
+       GTXE1:GTXE1_ML_REPLICATED_2_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate2:
+         A_DFECLKDLYADJ::000000  A_DFEDLYOVRD::0  A_DFETAP1::00000  A_DFETAP2::00000
+        A_DFETAP3::0000  A_DFETAP4::0000  A_DFETAPOVRD::0  A_GTXRXRESET::0
+        A_GTXTXRESET::0  A_LOOPBACK::000  A_PLLCLKRXRESET::0  A_PLLCLKTXRESET::0
+        A_PLLRXRESET::0  A_PLLTXRESET::0  A_PRBSCNTRESET::0  A_RXBUFRESET::0
+        A_RXCDRFREQRESET::0  A_RXCDRHOLD::0  A_RXCDRPHASERESET::0  A_RXCDRRESET::0
+        A_RXDFERESET::0  A_RXENPMAPHASEALIGN::0  A_RXENPRBSTST::000  A_RXENSAMPLEALIGN::0
+        A_RXEQMIX::0000000000  A_RXPLLLKDETEN::0  A_RXPLLPOWERDOWN::0  A_RXPMASETPHASE::0
+        A_RXPOLARITY::0  A_RXPOWERDOWN::00  A_RXRESET::0  A_TXBUFDIFFCTRL::010
+        A_TXDEEMPH::0  A_TXDIFFCTRL::0000  A_TXELECIDLE::0  A_TXENPMAPHASEALIGN::0
+        A_TXENPRBSTST::000  A_TXMARGIN::010  A_TXPLLLKDETEN::0  A_TXPLLPOWERDOWN::0
+        A_TXPMASETPHASE::0  A_TXPOLARITY::0  A_TXPOSTEMPHASIS::00000  A_TXPOWERDOWN::00
+        A_TXPRBSFORCEERR::0  A_TXPREEMPHASIS::0000  A_TXRESET::0  A_TXSWING::0
+        BGTEST_CFG::00  BIAS_CFG::00000  CDR_PH_ADJ_TIME::10100  CHAN_BOND_SEQ_1_1::0101111100
+        CHAN_BOND_SEQ_1_2::0001001010  CHAN_BOND_SEQ_1_3::0001001010  CHAN_BOND_SEQ_1_4::0110111100
+        CHAN_BOND_SEQ_1_ENABLE::1111  CHAN_BOND_SEQ_2_1::0100111100  CHAN_BOND_SEQ_2_2::0100111100
+        CHAN_BOND_SEQ_2_3::0110111100  CHAN_BOND_SEQ_2_4::0100111100  CHAN_BOND_SEQ_2_CFG::00000
+        CHAN_BOND_SEQ_2_ENABLE::1111  CLK_COR_SEQ_1_1::0100011100  CLK_COR_SEQ_1_2::0000000000
+        CLK_COR_SEQ_1_3::0000000000  CLK_COR_SEQ_1_4::0000000000  CLK_COR_SEQ_1_ENABLE::1111
+        CLK_COR_SEQ_2_1::0000000000  CLK_COR_SEQ_2_2::0000000000  CLK_COR_SEQ_2_3::0000000000
+        CLK_COR_SEQ_2_4::0000000000  CLK_COR_SEQ_2_ENABLE::1111  CM_TRIM::01
+        COMMA_10B_ENABLE::1111111111  COM_BURST_VAL::1111  DFE_CAL_TIME::01100
+        DFE_CFG::00011011  GEARBOX_ENDEC::000  MCOMMA_10B_VALUE::1010000011
+        OOBDETECT_THRESHOLD::011  PCOMMA_10B_VALUE::0101111100  PMA_CDR_SCAN::640404c
+        PMA_CFG::0040000040000000003  PMA_RXSYNC_CFG::00  PMA_RX_CFG::05ce048
+        PMA_TX_CFG::00082  POWER_SAVE::0000110100  RXPLL_COM_CFG::21680a
+        RXPLL_CP_CFG::00  RXPLL_LKDET_CFG::111  RXPRBSERR_LOOPBACK::0  RXRECCLK_DLY::0000000000
+        RXUSRCLK_DLY::0000  RX_DLYALIGN_CTRINC::0100  RX_DLYALIGN_EDGESET::00110
+        RX_DLYALIGN_LPFINC::0111  RX_DLYALIGN_MONSEL::000  RX_DLYALIGN_OVRDSETTING::00000000
+        RX_EYE_OFFSET::4c  RX_EYE_SCANMODE::00  RX_IDLE_HI_CNT::1000  RX_IDLE_LO_CNT::0000
+        SATA_BURST_VAL::100  SATA_IDLE_VAL::100  TERMINATION_CTRL::10100
+        TRANS_TIME_FROM_P2::03c  TRANS_TIME_NON_P2::19  TRANS_TIME_RATE::0e
+        TRANS_TIME_TO_P2::064  TST_ATTR::00000000  TXOUTCLK_DLY::0000000000
+        TXPLL_COM_CFG::21680a  TXPLL_CP_CFG::00  TXPLL_LKDET_CFG::111  TXPLL_SATA::00
+        TX_BYTECLK_CFG::00  TX_DEEMPH_0::11010  TX_DEEMPH_1::10000  TX_DETECT_RX_CFG::1832
+        TX_DLYALIGN_CTRINC::0100  TX_DLYALIGN_LPFINC::0110  TX_DLYALIGN_MONSEL::000
+        TX_DLYALIGN_OVRDSETTING::10000000  TX_IDLE_ASSERT_DELAY::100  TX_IDLE_DEASSERT_DELAY::010
+        TX_MARGIN_FULL_0::1001110  TX_MARGIN_FULL_1::1001001  TX_MARGIN_FULL_2::1000101
+        TX_MARGIN_FULL_3::1000010  TX_MARGIN_FULL_4::1000000  TX_MARGIN_LOW_0::1000110
+        TX_MARGIN_LOW_1::1000100  TX_MARGIN_LOW_2::1000010  TX_MARGIN_LOW_3::1000000
+        TX_MARGIN_LOW_4::1000000  TX_PMADATA_OPT::0  TX_TDCC_CFG::11  TX_USRCLK_CFG::00
+        USR_CODE_ERR_CLR::0 "
+  ;
+inst "GTXE1_ML_REPLICATED_3_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate3" "GTXE1",placed GTX_X102Y130 GTXE1_X0Y13  ,
+  cfg " AC_CAP_DIS::TRUE ALIGN_COMMA_WORD::1 CHAN_BOND_1_MAX_SKEW::7 CHAN_BOND_2_MAX_SKEW::1
+       CHAN_BOND_KEEP_ALIGN::FALSE CHAN_BOND_SEQ_2_USE::FALSE CHAN_BOND_SEQ_LEN::1
+       CLK_CORRECT_USE::TRUE CLK_COR_ADJ_LEN::1 CLK_COR_DET_LEN::1 CLK_COR_INSERT_IDLE_FLAG::FALSE
+       CLK_COR_KEEP_IDLE::FALSE CLK_COR_MAX_LAT::20 CLK_COR_MIN_LAT::18
+       CLK_COR_PRECEDENCE::TRUE CLK_COR_REPEAT_WAIT::0 CLK_COR_SEQ_2_USE::FALSE
+       COMMA_DOUBLE::FALSE DCLKINV::DCLK_B DEC_MCOMMA_DETECT::TRUE DEC_PCOMMA_DETECT::TRUE
+       DEC_VALID_COMMA_ONLY::TRUE DFE_DRP_EN::FALSE GEN_RXUSRCLK::TRUE GEN_TXUSRCLK::TRUE
+       GREFCLKRXINV::#OFF GREFCLKTXINV::#OFF GTX_CFG_PWRUP::FALSE LOOPBACK_DRP_EN::FALSE
+       MASTER_DRP_EN::FALSE MCOMMA_DETECT::TRUE PCI_EXPRESS_MODE::FALSE
+       PCOMMA_DETECT::TRUE PDELIDLE_DRP_EN::FALSE PHASEALIGN_DRP_EN::FALSE
+       PLL_DRP_EN::FALSE PMA_CAS_CLK_EN::FALSE POLARITY_DRP_EN::FALSE PRBS_DRP_EN::FALSE
+       RCV_TERM_GND::FALSE RCV_TERM_VTTRX::FALSE RESET_DRP_EN::FALSE RXBUF_OVFL_THRESH::61
+       RXBUF_OVRD_THRESH::FALSE RXBUF_UDFL_THRESH::4 RXGEARBOX_USE::FALSE
+       RXPLL_DIVSEL45_FB::5 RXPLL_DIVSEL_FB::2 RXPLL_DIVSEL_OUT::1 RXPLL_DIVSEL_REF::1
+       RXPLL_STARTUP_EN::TRUE RXRECCLK_CTRL::CLKTESTSIG1 RXUSRCLK2INV::RXUSRCLK2_B
+       RXUSRCLKINV::RXUSRCLK_B RX_BUFFER_USE::TRUE RX_CDR_FORCE_ROTATE::FALSE
+       RX_CLK25_DIVIDER::6 RX_DATA_WIDTH::20 RX_DECODE_SEQ_MATCH::TRUE RX_EN_IDLE_HOLD_CDR::FALSE
+       RX_EN_IDLE_HOLD_DFE::TRUE RX_EN_IDLE_RESET_BUF::TRUE RX_EN_IDLE_RESET_FR::TRUE
+       RX_EN_IDLE_RESET_PH::TRUE RX_EN_MODE_RESET_BUF::TRUE RX_EN_RATE_RESET_BUF::TRUE
+       RX_EN_REALIGN_RESET_BUF::FALSE RX_EN_REALIGN_RESET_BUF2::FALSE RX_FIFO_ADDR_MODE::FULL
+       RX_LOSS_OF_SYNC_FSM::FALSE RX_LOS_INVALID_INCR::1 RX_LOS_THRESHOLD::4
+       RX_OVERSAMPLE_MODE::FALSE RX_SLIDE_AUTO_WAIT::5 RX_SLIDE_MODE::OFF
+       RX_XCLK_SEL::RXREC SAS_MAX_COMSAS::52 SAS_MIN_COMSAS::40 SATA_MAX_BURST::7
+       SATA_MAX_INIT::22 SATA_MAX_WAKE::7 SATA_MIN_BURST::4 SATA_MIN_INIT::12
+       SATA_MIN_WAKE::4 SCANCLKINV::#OFF SHOW_REALIGN_COMMA::TRUE TERMINATION_OVRD::FALSE
+       TSTCLK0INV::TSTCLK0_B TSTCLK1INV::TSTCLK1_B TXDRIVE_DRP_EN::FALSE
+       TXDRIVE_LOOPBACK_HIZ::FALSE TXDRIVE_LOOPBACK_PD::FALSE TXGEARBOX_USE::FALSE
+       TXOUTCLKPCS_SEL::0 TXOUTCLK_CTRL::CLKTESTSIG0 TXPLL_DIVSEL45_FB::5
+       TXPLL_DIVSEL_FB::2 TXPLL_DIVSEL_OUT::1 TXPLL_DIVSEL_REF::1 TXPLL_STARTUP_EN::TRUE
+       TXUSRCLK2INV::TXUSRCLK2_B TXUSRCLKINV::TXUSRCLK_B TX_BUFFER_USE::TRUE
+       TX_CLK25_DIVIDER::6 TX_CLK_SOURCE::RXPLL TX_DATA_WIDTH::20 TX_DRIVE_MODE::DIRECT
+       TX_EN_RATE_RESET_BUF::TRUE TX_OVERSAMPLE_MODE::FALSE TX_XCLK_SEL::TXUSR
+       GTXE1:GTXE1_ML_REPLICATED_3_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate3:
+         A_DFECLKDLYADJ::000000  A_DFEDLYOVRD::0  A_DFETAP1::00000  A_DFETAP2::00000
+        A_DFETAP3::0000  A_DFETAP4::0000  A_DFETAPOVRD::0  A_GTXRXRESET::0
+        A_GTXTXRESET::0  A_LOOPBACK::000  A_PLLCLKRXRESET::0  A_PLLCLKTXRESET::0
+        A_PLLRXRESET::0  A_PLLTXRESET::0  A_PRBSCNTRESET::0  A_RXBUFRESET::0
+        A_RXCDRFREQRESET::0  A_RXCDRHOLD::0  A_RXCDRPHASERESET::0  A_RXCDRRESET::0
+        A_RXDFERESET::0  A_RXENPMAPHASEALIGN::0  A_RXENPRBSTST::000  A_RXENSAMPLEALIGN::0
+        A_RXEQMIX::0000000000  A_RXPLLLKDETEN::0  A_RXPLLPOWERDOWN::0  A_RXPMASETPHASE::0
+        A_RXPOLARITY::0  A_RXPOWERDOWN::00  A_RXRESET::0  A_TXBUFDIFFCTRL::010
+        A_TXDEEMPH::0  A_TXDIFFCTRL::0000  A_TXELECIDLE::0  A_TXENPMAPHASEALIGN::0
+        A_TXENPRBSTST::000  A_TXMARGIN::010  A_TXPLLLKDETEN::0  A_TXPLLPOWERDOWN::0
+        A_TXPMASETPHASE::0  A_TXPOLARITY::0  A_TXPOSTEMPHASIS::00000  A_TXPOWERDOWN::00
+        A_TXPRBSFORCEERR::0  A_TXPREEMPHASIS::0000  A_TXRESET::0  A_TXSWING::0
+        BGTEST_CFG::00  BIAS_CFG::00000  CDR_PH_ADJ_TIME::10100  CHAN_BOND_SEQ_1_1::0101111100
+        CHAN_BOND_SEQ_1_2::0001001010  CHAN_BOND_SEQ_1_3::0001001010  CHAN_BOND_SEQ_1_4::0110111100
+        CHAN_BOND_SEQ_1_ENABLE::1111  CHAN_BOND_SEQ_2_1::0100111100  CHAN_BOND_SEQ_2_2::0100111100
+        CHAN_BOND_SEQ_2_3::0110111100  CHAN_BOND_SEQ_2_4::0100111100  CHAN_BOND_SEQ_2_CFG::00000
+        CHAN_BOND_SEQ_2_ENABLE::1111  CLK_COR_SEQ_1_1::0100011100  CLK_COR_SEQ_1_2::0000000000
+        CLK_COR_SEQ_1_3::0000000000  CLK_COR_SEQ_1_4::0000000000  CLK_COR_SEQ_1_ENABLE::1111
+        CLK_COR_SEQ_2_1::0000000000  CLK_COR_SEQ_2_2::0000000000  CLK_COR_SEQ_2_3::0000000000
+        CLK_COR_SEQ_2_4::0000000000  CLK_COR_SEQ_2_ENABLE::1111  CM_TRIM::01
+        COMMA_10B_ENABLE::1111111111  COM_BURST_VAL::1111  DFE_CAL_TIME::01100
+        DFE_CFG::00011011  GEARBOX_ENDEC::000  MCOMMA_10B_VALUE::1010000011
+        OOBDETECT_THRESHOLD::011  PCOMMA_10B_VALUE::0101111100  PMA_CDR_SCAN::640404c
+        PMA_CFG::0040000040000000003  PMA_RXSYNC_CFG::00  PMA_RX_CFG::05ce048
+        PMA_TX_CFG::00082  POWER_SAVE::0000110100  RXPLL_COM_CFG::21680a
+        RXPLL_CP_CFG::00  RXPLL_LKDET_CFG::111  RXPRBSERR_LOOPBACK::0  RXRECCLK_DLY::0000000000
+        RXUSRCLK_DLY::0000  RX_DLYALIGN_CTRINC::0100  RX_DLYALIGN_EDGESET::00110
+        RX_DLYALIGN_LPFINC::0111  RX_DLYALIGN_MONSEL::000  RX_DLYALIGN_OVRDSETTING::00000000
+        RX_EYE_OFFSET::4c  RX_EYE_SCANMODE::00  RX_IDLE_HI_CNT::1000  RX_IDLE_LO_CNT::0000
+        SATA_BURST_VAL::100  SATA_IDLE_VAL::100  TERMINATION_CTRL::10100
+        TRANS_TIME_FROM_P2::03c  TRANS_TIME_NON_P2::19  TRANS_TIME_RATE::0e
+        TRANS_TIME_TO_P2::064  TST_ATTR::00000000  TXOUTCLK_DLY::0000000000
+        TXPLL_COM_CFG::21680a  TXPLL_CP_CFG::00  TXPLL_LKDET_CFG::111  TXPLL_SATA::00
+        TX_BYTECLK_CFG::00  TX_DEEMPH_0::11010  TX_DEEMPH_1::10000  TX_DETECT_RX_CFG::1832
+        TX_DLYALIGN_CTRINC::0100  TX_DLYALIGN_LPFINC::0110  TX_DLYALIGN_MONSEL::000
+        TX_DLYALIGN_OVRDSETTING::10000000  TX_IDLE_ASSERT_DELAY::100  TX_IDLE_DEASSERT_DELAY::010
+        TX_MARGIN_FULL_0::1001110  TX_MARGIN_FULL_1::1001001  TX_MARGIN_FULL_2::1000101
+        TX_MARGIN_FULL_3::1000010  TX_MARGIN_FULL_4::1000000  TX_MARGIN_LOW_0::1000110
+        TX_MARGIN_LOW_1::1000100  TX_MARGIN_LOW_2::1000010  TX_MARGIN_LOW_3::1000000
+        TX_MARGIN_LOW_4::1000000  TX_PMADATA_OPT::0  TX_TDCC_CFG::11  TX_USRCLK_CFG::00
+        USR_CODE_ERR_CLR::0 "
+  ;
+inst "GTXE1_ML_REPLICATED_4_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate4" "GTXE1",placed GTX_X102Y140 GTXE1_X0Y14  ,
+  cfg " AC_CAP_DIS::TRUE ALIGN_COMMA_WORD::1 CHAN_BOND_1_MAX_SKEW::7 CHAN_BOND_2_MAX_SKEW::1
+       CHAN_BOND_KEEP_ALIGN::FALSE CHAN_BOND_SEQ_2_USE::FALSE CHAN_BOND_SEQ_LEN::1
+       CLK_CORRECT_USE::TRUE CLK_COR_ADJ_LEN::1 CLK_COR_DET_LEN::1 CLK_COR_INSERT_IDLE_FLAG::FALSE
+       CLK_COR_KEEP_IDLE::FALSE CLK_COR_MAX_LAT::20 CLK_COR_MIN_LAT::18
+       CLK_COR_PRECEDENCE::TRUE CLK_COR_REPEAT_WAIT::0 CLK_COR_SEQ_2_USE::FALSE
+       COMMA_DOUBLE::FALSE DCLKINV::DCLK_B DEC_MCOMMA_DETECT::TRUE DEC_PCOMMA_DETECT::TRUE
+       DEC_VALID_COMMA_ONLY::TRUE DFE_DRP_EN::FALSE GEN_RXUSRCLK::TRUE GEN_TXUSRCLK::TRUE
+       GREFCLKRXINV::#OFF GREFCLKTXINV::#OFF GTX_CFG_PWRUP::FALSE LOOPBACK_DRP_EN::FALSE
+       MASTER_DRP_EN::FALSE MCOMMA_DETECT::TRUE PCI_EXPRESS_MODE::FALSE
+       PCOMMA_DETECT::TRUE PDELIDLE_DRP_EN::FALSE PHASEALIGN_DRP_EN::FALSE
+       PLL_DRP_EN::FALSE PMA_CAS_CLK_EN::FALSE POLARITY_DRP_EN::FALSE PRBS_DRP_EN::FALSE
+       RCV_TERM_GND::FALSE RCV_TERM_VTTRX::FALSE RESET_DRP_EN::FALSE RXBUF_OVFL_THRESH::61
+       RXBUF_OVRD_THRESH::FALSE RXBUF_UDFL_THRESH::4 RXGEARBOX_USE::FALSE
+       RXPLL_DIVSEL45_FB::5 RXPLL_DIVSEL_FB::2 RXPLL_DIVSEL_OUT::1 RXPLL_DIVSEL_REF::1
+       RXPLL_STARTUP_EN::TRUE RXRECCLK_CTRL::CLKTESTSIG1 RXUSRCLK2INV::RXUSRCLK2_B
+       RXUSRCLKINV::RXUSRCLK_B RX_BUFFER_USE::TRUE RX_CDR_FORCE_ROTATE::FALSE
+       RX_CLK25_DIVIDER::6 RX_DATA_WIDTH::20 RX_DECODE_SEQ_MATCH::TRUE RX_EN_IDLE_HOLD_CDR::FALSE
+       RX_EN_IDLE_HOLD_DFE::TRUE RX_EN_IDLE_RESET_BUF::TRUE RX_EN_IDLE_RESET_FR::TRUE
+       RX_EN_IDLE_RESET_PH::TRUE RX_EN_MODE_RESET_BUF::TRUE RX_EN_RATE_RESET_BUF::TRUE
+       RX_EN_REALIGN_RESET_BUF::FALSE RX_EN_REALIGN_RESET_BUF2::FALSE RX_FIFO_ADDR_MODE::FULL
+       RX_LOSS_OF_SYNC_FSM::FALSE RX_LOS_INVALID_INCR::1 RX_LOS_THRESHOLD::4
+       RX_OVERSAMPLE_MODE::FALSE RX_SLIDE_AUTO_WAIT::5 RX_SLIDE_MODE::OFF
+       RX_XCLK_SEL::RXREC SAS_MAX_COMSAS::52 SAS_MIN_COMSAS::40 SATA_MAX_BURST::7
+       SATA_MAX_INIT::22 SATA_MAX_WAKE::7 SATA_MIN_BURST::4 SATA_MIN_INIT::12
+       SATA_MIN_WAKE::4 SCANCLKINV::#OFF SHOW_REALIGN_COMMA::TRUE TERMINATION_OVRD::FALSE
+       TSTCLK0INV::TSTCLK0_B TSTCLK1INV::TSTCLK1_B TXDRIVE_DRP_EN::FALSE
+       TXDRIVE_LOOPBACK_HIZ::FALSE TXDRIVE_LOOPBACK_PD::FALSE TXGEARBOX_USE::FALSE
+       TXOUTCLKPCS_SEL::0 TXOUTCLK_CTRL::CLKTESTSIG0 TXPLL_DIVSEL45_FB::5
+       TXPLL_DIVSEL_FB::2 TXPLL_DIVSEL_OUT::1 TXPLL_DIVSEL_REF::1 TXPLL_STARTUP_EN::TRUE
+       TXUSRCLK2INV::TXUSRCLK2_B TXUSRCLKINV::TXUSRCLK_B TX_BUFFER_USE::TRUE
+       TX_CLK25_DIVIDER::6 TX_CLK_SOURCE::RXPLL TX_DATA_WIDTH::20 TX_DRIVE_MODE::DIRECT
+       TX_EN_RATE_RESET_BUF::TRUE TX_OVERSAMPLE_MODE::FALSE TX_XCLK_SEL::TXUSR
+       GTXE1:GTXE1_ML_REPLICATED_4_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate4:
+         A_DFECLKDLYADJ::000000  A_DFEDLYOVRD::0  A_DFETAP1::00000  A_DFETAP2::00000
+        A_DFETAP3::0000  A_DFETAP4::0000  A_DFETAPOVRD::0  A_GTXRXRESET::0
+        A_GTXTXRESET::0  A_LOOPBACK::000  A_PLLCLKRXRESET::0  A_PLLCLKTXRESET::0
+        A_PLLRXRESET::0  A_PLLTXRESET::0  A_PRBSCNTRESET::0  A_RXBUFRESET::0
+        A_RXCDRFREQRESET::0  A_RXCDRHOLD::0  A_RXCDRPHASERESET::0  A_RXCDRRESET::0
+        A_RXDFERESET::0  A_RXENPMAPHASEALIGN::0  A_RXENPRBSTST::000  A_RXENSAMPLEALIGN::0
+        A_RXEQMIX::0000000000  A_RXPLLLKDETEN::0  A_RXPLLPOWERDOWN::0  A_RXPMASETPHASE::0
+        A_RXPOLARITY::0  A_RXPOWERDOWN::00  A_RXRESET::0  A_TXBUFDIFFCTRL::010
+        A_TXDEEMPH::0  A_TXDIFFCTRL::0000  A_TXELECIDLE::0  A_TXENPMAPHASEALIGN::0
+        A_TXENPRBSTST::000  A_TXMARGIN::010  A_TXPLLLKDETEN::0  A_TXPLLPOWERDOWN::0
+        A_TXPMASETPHASE::0  A_TXPOLARITY::0  A_TXPOSTEMPHASIS::00000  A_TXPOWERDOWN::00
+        A_TXPRBSFORCEERR::0  A_TXPREEMPHASIS::0000  A_TXRESET::0  A_TXSWING::0
+        BGTEST_CFG::00  BIAS_CFG::00000  CDR_PH_ADJ_TIME::10100  CHAN_BOND_SEQ_1_1::0101111100
+        CHAN_BOND_SEQ_1_2::0001001010  CHAN_BOND_SEQ_1_3::0001001010  CHAN_BOND_SEQ_1_4::0110111100
+        CHAN_BOND_SEQ_1_ENABLE::1111  CHAN_BOND_SEQ_2_1::0100111100  CHAN_BOND_SEQ_2_2::0100111100
+        CHAN_BOND_SEQ_2_3::0110111100  CHAN_BOND_SEQ_2_4::0100111100  CHAN_BOND_SEQ_2_CFG::00000
+        CHAN_BOND_SEQ_2_ENABLE::1111  CLK_COR_SEQ_1_1::0100011100  CLK_COR_SEQ_1_2::0000000000
+        CLK_COR_SEQ_1_3::0000000000  CLK_COR_SEQ_1_4::0000000000  CLK_COR_SEQ_1_ENABLE::1111
+        CLK_COR_SEQ_2_1::0000000000  CLK_COR_SEQ_2_2::0000000000  CLK_COR_SEQ_2_3::0000000000
+        CLK_COR_SEQ_2_4::0000000000  CLK_COR_SEQ_2_ENABLE::1111  CM_TRIM::01
+        COMMA_10B_ENABLE::1111111111  COM_BURST_VAL::1111  DFE_CAL_TIME::01100
+        DFE_CFG::00011011  GEARBOX_ENDEC::000  MCOMMA_10B_VALUE::1010000011
+        OOBDETECT_THRESHOLD::011  PCOMMA_10B_VALUE::0101111100  PMA_CDR_SCAN::640404c
+        PMA_CFG::0040000040000000003  PMA_RXSYNC_CFG::00  PMA_RX_CFG::05ce048
+        PMA_TX_CFG::00082  POWER_SAVE::0000110100  RXPLL_COM_CFG::21680a
+        RXPLL_CP_CFG::00  RXPLL_LKDET_CFG::111  RXPRBSERR_LOOPBACK::0  RXRECCLK_DLY::0000000000
+        RXUSRCLK_DLY::0000  RX_DLYALIGN_CTRINC::0100  RX_DLYALIGN_EDGESET::00110
+        RX_DLYALIGN_LPFINC::0111  RX_DLYALIGN_MONSEL::000  RX_DLYALIGN_OVRDSETTING::00000000
+        RX_EYE_OFFSET::4c  RX_EYE_SCANMODE::00  RX_IDLE_HI_CNT::1000  RX_IDLE_LO_CNT::0000
+        SATA_BURST_VAL::100  SATA_IDLE_VAL::100  TERMINATION_CTRL::10100
+        TRANS_TIME_FROM_P2::03c  TRANS_TIME_NON_P2::19  TRANS_TIME_RATE::0e
+        TRANS_TIME_TO_P2::064  TST_ATTR::00000000  TXOUTCLK_DLY::0000000000
+        TXPLL_COM_CFG::21680a  TXPLL_CP_CFG::00  TXPLL_LKDET_CFG::111  TXPLL_SATA::00
+        TX_BYTECLK_CFG::00  TX_DEEMPH_0::11010  TX_DEEMPH_1::10000  TX_DETECT_RX_CFG::1832
+        TX_DLYALIGN_CTRINC::0100  TX_DLYALIGN_LPFINC::0110  TX_DLYALIGN_MONSEL::000
+        TX_DLYALIGN_OVRDSETTING::10000000  TX_IDLE_ASSERT_DELAY::100  TX_IDLE_DEASSERT_DELAY::010
+        TX_MARGIN_FULL_0::1001110  TX_MARGIN_FULL_1::1001001  TX_MARGIN_FULL_2::1000101
+        TX_MARGIN_FULL_3::1000010  TX_MARGIN_FULL_4::1000000  TX_MARGIN_LOW_0::1000110
+        TX_MARGIN_LOW_1::1000100  TX_MARGIN_LOW_2::1000010  TX_MARGIN_LOW_3::1000000
+        TX_MARGIN_LOW_4::1000000  TX_PMADATA_OPT::0  TX_TDCC_CFG::11  TX_USRCLK_CFG::00
+        USR_CODE_ERR_CLR::0 "
+  ;
+inst "GTXE1_ML_REPLICATED_5_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate5" "GTXE1",placed GTX_X102Y150 GTXE1_X0Y15  ,
+  cfg " AC_CAP_DIS::TRUE ALIGN_COMMA_WORD::1 CHAN_BOND_1_MAX_SKEW::7 CHAN_BOND_2_MAX_SKEW::1
+       CHAN_BOND_KEEP_ALIGN::FALSE CHAN_BOND_SEQ_2_USE::FALSE CHAN_BOND_SEQ_LEN::1
+       CLK_CORRECT_USE::TRUE CLK_COR_ADJ_LEN::1 CLK_COR_DET_LEN::1 CLK_COR_INSERT_IDLE_FLAG::FALSE
+       CLK_COR_KEEP_IDLE::FALSE CLK_COR_MAX_LAT::20 CLK_COR_MIN_LAT::18
+       CLK_COR_PRECEDENCE::TRUE CLK_COR_REPEAT_WAIT::0 CLK_COR_SEQ_2_USE::FALSE
+       COMMA_DOUBLE::FALSE DCLKINV::DCLK_B DEC_MCOMMA_DETECT::TRUE DEC_PCOMMA_DETECT::TRUE
+       DEC_VALID_COMMA_ONLY::TRUE DFE_DRP_EN::FALSE GEN_RXUSRCLK::TRUE GEN_TXUSRCLK::TRUE
+       GREFCLKRXINV::#OFF GREFCLKTXINV::#OFF GTX_CFG_PWRUP::FALSE LOOPBACK_DRP_EN::FALSE
+       MASTER_DRP_EN::FALSE MCOMMA_DETECT::TRUE PCI_EXPRESS_MODE::FALSE
+       PCOMMA_DETECT::TRUE PDELIDLE_DRP_EN::FALSE PHASEALIGN_DRP_EN::FALSE
+       PLL_DRP_EN::FALSE PMA_CAS_CLK_EN::FALSE POLARITY_DRP_EN::FALSE PRBS_DRP_EN::FALSE
+       RCV_TERM_GND::FALSE RCV_TERM_VTTRX::FALSE RESET_DRP_EN::FALSE RXBUF_OVFL_THRESH::61
+       RXBUF_OVRD_THRESH::FALSE RXBUF_UDFL_THRESH::4 RXGEARBOX_USE::FALSE
+       RXPLL_DIVSEL45_FB::5 RXPLL_DIVSEL_FB::2 RXPLL_DIVSEL_OUT::1 RXPLL_DIVSEL_REF::1
+       RXPLL_STARTUP_EN::TRUE RXRECCLK_CTRL::CLKTESTSIG1 RXUSRCLK2INV::RXUSRCLK2_B
+       RXUSRCLKINV::RXUSRCLK_B RX_BUFFER_USE::TRUE RX_CDR_FORCE_ROTATE::FALSE
+       RX_CLK25_DIVIDER::6 RX_DATA_WIDTH::20 RX_DECODE_SEQ_MATCH::TRUE RX_EN_IDLE_HOLD_CDR::FALSE
+       RX_EN_IDLE_HOLD_DFE::TRUE RX_EN_IDLE_RESET_BUF::TRUE RX_EN_IDLE_RESET_FR::TRUE
+       RX_EN_IDLE_RESET_PH::TRUE RX_EN_MODE_RESET_BUF::TRUE RX_EN_RATE_RESET_BUF::TRUE
+       RX_EN_REALIGN_RESET_BUF::FALSE RX_EN_REALIGN_RESET_BUF2::FALSE RX_FIFO_ADDR_MODE::FULL
+       RX_LOSS_OF_SYNC_FSM::FALSE RX_LOS_INVALID_INCR::1 RX_LOS_THRESHOLD::4
+       RX_OVERSAMPLE_MODE::FALSE RX_SLIDE_AUTO_WAIT::5 RX_SLIDE_MODE::OFF
+       RX_XCLK_SEL::RXREC SAS_MAX_COMSAS::52 SAS_MIN_COMSAS::40 SATA_MAX_BURST::7
+       SATA_MAX_INIT::22 SATA_MAX_WAKE::7 SATA_MIN_BURST::4 SATA_MIN_INIT::12
+       SATA_MIN_WAKE::4 SCANCLKINV::#OFF SHOW_REALIGN_COMMA::TRUE TERMINATION_OVRD::FALSE
+       TSTCLK0INV::TSTCLK0_B TSTCLK1INV::TSTCLK1_B TXDRIVE_DRP_EN::FALSE
+       TXDRIVE_LOOPBACK_HIZ::FALSE TXDRIVE_LOOPBACK_PD::FALSE TXGEARBOX_USE::FALSE
+       TXOUTCLKPCS_SEL::0 TXOUTCLK_CTRL::CLKTESTSIG0 TXPLL_DIVSEL45_FB::5
+       TXPLL_DIVSEL_FB::2 TXPLL_DIVSEL_OUT::1 TXPLL_DIVSEL_REF::1 TXPLL_STARTUP_EN::TRUE
+       TXUSRCLK2INV::TXUSRCLK2_B TXUSRCLKINV::TXUSRCLK_B TX_BUFFER_USE::TRUE
+       TX_CLK25_DIVIDER::6 TX_CLK_SOURCE::RXPLL TX_DATA_WIDTH::20 TX_DRIVE_MODE::DIRECT
+       TX_EN_RATE_RESET_BUF::TRUE TX_OVERSAMPLE_MODE::FALSE TX_XCLK_SEL::TXUSR
+       GTXE1:GTXE1_ML_REPLICATED_5_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate5:
+         A_DFECLKDLYADJ::000000  A_DFEDLYOVRD::0  A_DFETAP1::00000  A_DFETAP2::00000
+        A_DFETAP3::0000  A_DFETAP4::0000  A_DFETAPOVRD::0  A_GTXRXRESET::0
+        A_GTXTXRESET::0  A_LOOPBACK::000  A_PLLCLKRXRESET::0  A_PLLCLKTXRESET::0
+        A_PLLRXRESET::0  A_PLLTXRESET::0  A_PRBSCNTRESET::0  A_RXBUFRESET::0
+        A_RXCDRFREQRESET::0  A_RXCDRHOLD::0  A_RXCDRPHASERESET::0  A_RXCDRRESET::0
+        A_RXDFERESET::0  A_RXENPMAPHASEALIGN::0  A_RXENPRBSTST::000  A_RXENSAMPLEALIGN::0
+        A_RXEQMIX::0000000000  A_RXPLLLKDETEN::0  A_RXPLLPOWERDOWN::0  A_RXPMASETPHASE::0
+        A_RXPOLARITY::0  A_RXPOWERDOWN::00  A_RXRESET::0  A_TXBUFDIFFCTRL::010
+        A_TXDEEMPH::0  A_TXDIFFCTRL::0000  A_TXELECIDLE::0  A_TXENPMAPHASEALIGN::0
+        A_TXENPRBSTST::000  A_TXMARGIN::010  A_TXPLLLKDETEN::0  A_TXPLLPOWERDOWN::0
+        A_TXPMASETPHASE::0  A_TXPOLARITY::0  A_TXPOSTEMPHASIS::00000  A_TXPOWERDOWN::00
+        A_TXPRBSFORCEERR::0  A_TXPREEMPHASIS::0000  A_TXRESET::0  A_TXSWING::0
+        BGTEST_CFG::00  BIAS_CFG::00000  CDR_PH_ADJ_TIME::10100  CHAN_BOND_SEQ_1_1::0101111100
+        CHAN_BOND_SEQ_1_2::0001001010  CHAN_BOND_SEQ_1_3::0001001010  CHAN_BOND_SEQ_1_4::0110111100
+        CHAN_BOND_SEQ_1_ENABLE::1111  CHAN_BOND_SEQ_2_1::0100111100  CHAN_BOND_SEQ_2_2::0100111100
+        CHAN_BOND_SEQ_2_3::0110111100  CHAN_BOND_SEQ_2_4::0100111100  CHAN_BOND_SEQ_2_CFG::00000
+        CHAN_BOND_SEQ_2_ENABLE::1111  CLK_COR_SEQ_1_1::0100011100  CLK_COR_SEQ_1_2::0000000000
+        CLK_COR_SEQ_1_3::0000000000  CLK_COR_SEQ_1_4::0000000000  CLK_COR_SEQ_1_ENABLE::1111
+        CLK_COR_SEQ_2_1::0000000000  CLK_COR_SEQ_2_2::0000000000  CLK_COR_SEQ_2_3::0000000000
+        CLK_COR_SEQ_2_4::0000000000  CLK_COR_SEQ_2_ENABLE::1111  CM_TRIM::01
+        COMMA_10B_ENABLE::1111111111  COM_BURST_VAL::1111  DFE_CAL_TIME::01100
+        DFE_CFG::00011011  GEARBOX_ENDEC::000  MCOMMA_10B_VALUE::1010000011
+        OOBDETECT_THRESHOLD::011  PCOMMA_10B_VALUE::0101111100  PMA_CDR_SCAN::640404c
+        PMA_CFG::0040000040000000003  PMA_RXSYNC_CFG::00  PMA_RX_CFG::05ce048
+        PMA_TX_CFG::00082  POWER_SAVE::0000110100  RXPLL_COM_CFG::21680a
+        RXPLL_CP_CFG::00  RXPLL_LKDET_CFG::111  RXPRBSERR_LOOPBACK::0  RXRECCLK_DLY::0000000000
+        RXUSRCLK_DLY::0000  RX_DLYALIGN_CTRINC::0100  RX_DLYALIGN_EDGESET::00110
+        RX_DLYALIGN_LPFINC::0111  RX_DLYALIGN_MONSEL::000  RX_DLYALIGN_OVRDSETTING::00000000
+        RX_EYE_OFFSET::4c  RX_EYE_SCANMODE::00  RX_IDLE_HI_CNT::1000  RX_IDLE_LO_CNT::0000
+        SATA_BURST_VAL::100  SATA_IDLE_VAL::100  TERMINATION_CTRL::10100
+        TRANS_TIME_FROM_P2::03c  TRANS_TIME_NON_P2::19  TRANS_TIME_RATE::0e
+        TRANS_TIME_TO_P2::064  TST_ATTR::00000000  TXOUTCLK_DLY::0000000000
+        TXPLL_COM_CFG::21680a  TXPLL_CP_CFG::00  TXPLL_LKDET_CFG::111  TXPLL_SATA::00
+        TX_BYTECLK_CFG::00  TX_DEEMPH_0::11010  TX_DEEMPH_1::10000  TX_DETECT_RX_CFG::1832
+        TX_DLYALIGN_CTRINC::0100  TX_DLYALIGN_LPFINC::0110  TX_DLYALIGN_MONSEL::000
+        TX_DLYALIGN_OVRDSETTING::10000000  TX_IDLE_ASSERT_DELAY::100  TX_IDLE_DEASSERT_DELAY::010
+        TX_MARGIN_FULL_0::1001110  TX_MARGIN_FULL_1::1001001  TX_MARGIN_FULL_2::1000101
+        TX_MARGIN_FULL_3::1000010  TX_MARGIN_FULL_4::1000000  TX_MARGIN_LOW_0::1000110
+        TX_MARGIN_LOW_1::1000100  TX_MARGIN_LOW_2::1000010  TX_MARGIN_LOW_3::1000000
+        TX_MARGIN_LOW_4::1000000  TX_PMADATA_OPT::0  TX_TDCC_CFG::11  TX_USRCLK_CFG::00
+        USR_CODE_ERR_CLR::0 "
+  ;
+inst "GTXE1_ML_REPLICATED_6_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate6" "GTXE1",placed GTX_X102Y160 GTXE1_X0Y16  ,
+  cfg " AC_CAP_DIS::TRUE ALIGN_COMMA_WORD::1 CHAN_BOND_1_MAX_SKEW::7 CHAN_BOND_2_MAX_SKEW::1
+       CHAN_BOND_KEEP_ALIGN::FALSE CHAN_BOND_SEQ_2_USE::FALSE CHAN_BOND_SEQ_LEN::1
+       CLK_CORRECT_USE::TRUE CLK_COR_ADJ_LEN::1 CLK_COR_DET_LEN::1 CLK_COR_INSERT_IDLE_FLAG::FALSE
+       CLK_COR_KEEP_IDLE::FALSE CLK_COR_MAX_LAT::20 CLK_COR_MIN_LAT::18
+       CLK_COR_PRECEDENCE::TRUE CLK_COR_REPEAT_WAIT::0 CLK_COR_SEQ_2_USE::FALSE
+       COMMA_DOUBLE::FALSE DCLKINV::DCLK_B DEC_MCOMMA_DETECT::TRUE DEC_PCOMMA_DETECT::TRUE
+       DEC_VALID_COMMA_ONLY::TRUE DFE_DRP_EN::FALSE GEN_RXUSRCLK::TRUE GEN_TXUSRCLK::TRUE
+       GREFCLKRXINV::#OFF GREFCLKTXINV::#OFF GTX_CFG_PWRUP::FALSE LOOPBACK_DRP_EN::FALSE
+       MASTER_DRP_EN::FALSE MCOMMA_DETECT::TRUE PCI_EXPRESS_MODE::FALSE
+       PCOMMA_DETECT::TRUE PDELIDLE_DRP_EN::FALSE PHASEALIGN_DRP_EN::FALSE
+       PLL_DRP_EN::FALSE PMA_CAS_CLK_EN::FALSE POLARITY_DRP_EN::FALSE PRBS_DRP_EN::FALSE
+       RCV_TERM_GND::FALSE RCV_TERM_VTTRX::FALSE RESET_DRP_EN::FALSE RXBUF_OVFL_THRESH::61
+       RXBUF_OVRD_THRESH::FALSE RXBUF_UDFL_THRESH::4 RXGEARBOX_USE::FALSE
+       RXPLL_DIVSEL45_FB::5 RXPLL_DIVSEL_FB::2 RXPLL_DIVSEL_OUT::1 RXPLL_DIVSEL_REF::1
+       RXPLL_STARTUP_EN::TRUE RXRECCLK_CTRL::CLKTESTSIG1 RXUSRCLK2INV::RXUSRCLK2_B
+       RXUSRCLKINV::RXUSRCLK_B RX_BUFFER_USE::TRUE RX_CDR_FORCE_ROTATE::FALSE
+       RX_CLK25_DIVIDER::6 RX_DATA_WIDTH::20 RX_DECODE_SEQ_MATCH::TRUE RX_EN_IDLE_HOLD_CDR::FALSE
+       RX_EN_IDLE_HOLD_DFE::TRUE RX_EN_IDLE_RESET_BUF::TRUE RX_EN_IDLE_RESET_FR::TRUE
+       RX_EN_IDLE_RESET_PH::TRUE RX_EN_MODE_RESET_BUF::TRUE RX_EN_RATE_RESET_BUF::TRUE
+       RX_EN_REALIGN_RESET_BUF::FALSE RX_EN_REALIGN_RESET_BUF2::FALSE RX_FIFO_ADDR_MODE::FULL
+       RX_LOSS_OF_SYNC_FSM::FALSE RX_LOS_INVALID_INCR::1 RX_LOS_THRESHOLD::4
+       RX_OVERSAMPLE_MODE::FALSE RX_SLIDE_AUTO_WAIT::5 RX_SLIDE_MODE::OFF
+       RX_XCLK_SEL::RXREC SAS_MAX_COMSAS::52 SAS_MIN_COMSAS::40 SATA_MAX_BURST::7
+       SATA_MAX_INIT::22 SATA_MAX_WAKE::7 SATA_MIN_BURST::4 SATA_MIN_INIT::12
+       SATA_MIN_WAKE::4 SCANCLKINV::#OFF SHOW_REALIGN_COMMA::TRUE TERMINATION_OVRD::FALSE
+       TSTCLK0INV::TSTCLK0_B TSTCLK1INV::TSTCLK1_B TXDRIVE_DRP_EN::FALSE
+       TXDRIVE_LOOPBACK_HIZ::FALSE TXDRIVE_LOOPBACK_PD::FALSE TXGEARBOX_USE::FALSE
+       TXOUTCLKPCS_SEL::0 TXOUTCLK_CTRL::CLKTESTSIG0 TXPLL_DIVSEL45_FB::5
+       TXPLL_DIVSEL_FB::2 TXPLL_DIVSEL_OUT::1 TXPLL_DIVSEL_REF::1 TXPLL_STARTUP_EN::TRUE
+       TXUSRCLK2INV::TXUSRCLK2_B TXUSRCLKINV::TXUSRCLK_B TX_BUFFER_USE::TRUE
+       TX_CLK25_DIVIDER::6 TX_CLK_SOURCE::RXPLL TX_DATA_WIDTH::20 TX_DRIVE_MODE::DIRECT
+       TX_EN_RATE_RESET_BUF::TRUE TX_OVERSAMPLE_MODE::FALSE TX_XCLK_SEL::TXUSR
+       GTXE1:GTXE1_ML_REPLICATED_6_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate6:
+         A_DFECLKDLYADJ::000000  A_DFEDLYOVRD::0  A_DFETAP1::00000  A_DFETAP2::00000
+        A_DFETAP3::0000  A_DFETAP4::0000  A_DFETAPOVRD::0  A_GTXRXRESET::0
+        A_GTXTXRESET::0  A_LOOPBACK::000  A_PLLCLKRXRESET::0  A_PLLCLKTXRESET::0
+        A_PLLRXRESET::0  A_PLLTXRESET::0  A_PRBSCNTRESET::0  A_RXBUFRESET::0
+        A_RXCDRFREQRESET::0  A_RXCDRHOLD::0  A_RXCDRPHASERESET::0  A_RXCDRRESET::0
+        A_RXDFERESET::0  A_RXENPMAPHASEALIGN::0  A_RXENPRBSTST::000  A_RXENSAMPLEALIGN::0
+        A_RXEQMIX::0000000000  A_RXPLLLKDETEN::0  A_RXPLLPOWERDOWN::0  A_RXPMASETPHASE::0
+        A_RXPOLARITY::0  A_RXPOWERDOWN::00  A_RXRESET::0  A_TXBUFDIFFCTRL::010
+        A_TXDEEMPH::0  A_TXDIFFCTRL::0000  A_TXELECIDLE::0  A_TXENPMAPHASEALIGN::0
+        A_TXENPRBSTST::000  A_TXMARGIN::010  A_TXPLLLKDETEN::0  A_TXPLLPOWERDOWN::0
+        A_TXPMASETPHASE::0  A_TXPOLARITY::0  A_TXPOSTEMPHASIS::00000  A_TXPOWERDOWN::00
+        A_TXPRBSFORCEERR::0  A_TXPREEMPHASIS::0000  A_TXRESET::0  A_TXSWING::0
+        BGTEST_CFG::00  BIAS_CFG::00000  CDR_PH_ADJ_TIME::10100  CHAN_BOND_SEQ_1_1::0101111100
+        CHAN_BOND_SEQ_1_2::0001001010  CHAN_BOND_SEQ_1_3::0001001010  CHAN_BOND_SEQ_1_4::0110111100
+        CHAN_BOND_SEQ_1_ENABLE::1111  CHAN_BOND_SEQ_2_1::0100111100  CHAN_BOND_SEQ_2_2::0100111100
+        CHAN_BOND_SEQ_2_3::0110111100  CHAN_BOND_SEQ_2_4::0100111100  CHAN_BOND_SEQ_2_CFG::00000
+        CHAN_BOND_SEQ_2_ENABLE::1111  CLK_COR_SEQ_1_1::0100011100  CLK_COR_SEQ_1_2::0000000000
+        CLK_COR_SEQ_1_3::0000000000  CLK_COR_SEQ_1_4::0000000000  CLK_COR_SEQ_1_ENABLE::1111
+        CLK_COR_SEQ_2_1::0000000000  CLK_COR_SEQ_2_2::0000000000  CLK_COR_SEQ_2_3::0000000000
+        CLK_COR_SEQ_2_4::0000000000  CLK_COR_SEQ_2_ENABLE::1111  CM_TRIM::01
+        COMMA_10B_ENABLE::1111111111  COM_BURST_VAL::1111  DFE_CAL_TIME::01100
+        DFE_CFG::00011011  GEARBOX_ENDEC::000  MCOMMA_10B_VALUE::1010000011
+        OOBDETECT_THRESHOLD::011  PCOMMA_10B_VALUE::0101111100  PMA_CDR_SCAN::640404c
+        PMA_CFG::0040000040000000003  PMA_RXSYNC_CFG::00  PMA_RX_CFG::05ce048
+        PMA_TX_CFG::00082  POWER_SAVE::0000110100  RXPLL_COM_CFG::21680a
+        RXPLL_CP_CFG::00  RXPLL_LKDET_CFG::111  RXPRBSERR_LOOPBACK::0  RXRECCLK_DLY::0000000000
+        RXUSRCLK_DLY::0000  RX_DLYALIGN_CTRINC::0100  RX_DLYALIGN_EDGESET::00110
+        RX_DLYALIGN_LPFINC::0111  RX_DLYALIGN_MONSEL::000  RX_DLYALIGN_OVRDSETTING::00000000
+        RX_EYE_OFFSET::4c  RX_EYE_SCANMODE::00  RX_IDLE_HI_CNT::1000  RX_IDLE_LO_CNT::0000
+        SATA_BURST_VAL::100  SATA_IDLE_VAL::100  TERMINATION_CTRL::10100
+        TRANS_TIME_FROM_P2::03c  TRANS_TIME_NON_P2::19  TRANS_TIME_RATE::0e
+        TRANS_TIME_TO_P2::064  TST_ATTR::00000000  TXOUTCLK_DLY::0000000000
+        TXPLL_COM_CFG::21680a  TXPLL_CP_CFG::00  TXPLL_LKDET_CFG::111  TXPLL_SATA::00
+        TX_BYTECLK_CFG::00  TX_DEEMPH_0::11010  TX_DEEMPH_1::10000  TX_DETECT_RX_CFG::1832
+        TX_DLYALIGN_CTRINC::0100  TX_DLYALIGN_LPFINC::0110  TX_DLYALIGN_MONSEL::000
+        TX_DLYALIGN_OVRDSETTING::10000000  TX_IDLE_ASSERT_DELAY::100  TX_IDLE_DEASSERT_DELAY::010
+        TX_MARGIN_FULL_0::1001110  TX_MARGIN_FULL_1::1001001  TX_MARGIN_FULL_2::1000101
+        TX_MARGIN_FULL_3::1000010  TX_MARGIN_FULL_4::1000000  TX_MARGIN_LOW_0::1000110
+        TX_MARGIN_LOW_1::1000100  TX_MARGIN_LOW_2::1000010  TX_MARGIN_LOW_3::1000000
+        TX_MARGIN_LOW_4::1000000  TX_PMADATA_OPT::0  TX_TDCC_CFG::11  TX_USRCLK_CFG::00
+        USR_CODE_ERR_CLR::0 "
+  ;
+inst "GTXE1_ML_REPLICATED_7_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate7" "GTXE1",placed GTX_X102Y170 GTXE1_X0Y17  ,
+  cfg " AC_CAP_DIS::TRUE ALIGN_COMMA_WORD::1 CHAN_BOND_1_MAX_SKEW::7 CHAN_BOND_2_MAX_SKEW::1
+       CHAN_BOND_KEEP_ALIGN::FALSE CHAN_BOND_SEQ_2_USE::FALSE CHAN_BOND_SEQ_LEN::1
+       CLK_CORRECT_USE::TRUE CLK_COR_ADJ_LEN::1 CLK_COR_DET_LEN::1 CLK_COR_INSERT_IDLE_FLAG::FALSE
+       CLK_COR_KEEP_IDLE::FALSE CLK_COR_MAX_LAT::20 CLK_COR_MIN_LAT::18
+       CLK_COR_PRECEDENCE::TRUE CLK_COR_REPEAT_WAIT::0 CLK_COR_SEQ_2_USE::FALSE
+       COMMA_DOUBLE::FALSE DCLKINV::DCLK_B DEC_MCOMMA_DETECT::TRUE DEC_PCOMMA_DETECT::TRUE
+       DEC_VALID_COMMA_ONLY::TRUE DFE_DRP_EN::FALSE GEN_RXUSRCLK::TRUE GEN_TXUSRCLK::TRUE
+       GREFCLKRXINV::#OFF GREFCLKTXINV::#OFF GTX_CFG_PWRUP::FALSE LOOPBACK_DRP_EN::FALSE
+       MASTER_DRP_EN::FALSE MCOMMA_DETECT::TRUE PCI_EXPRESS_MODE::FALSE
+       PCOMMA_DETECT::TRUE PDELIDLE_DRP_EN::FALSE PHASEALIGN_DRP_EN::FALSE
+       PLL_DRP_EN::FALSE PMA_CAS_CLK_EN::FALSE POLARITY_DRP_EN::FALSE PRBS_DRP_EN::FALSE
+       RCV_TERM_GND::FALSE RCV_TERM_VTTRX::FALSE RESET_DRP_EN::FALSE RXBUF_OVFL_THRESH::61
+       RXBUF_OVRD_THRESH::FALSE RXBUF_UDFL_THRESH::4 RXGEARBOX_USE::FALSE
+       RXPLL_DIVSEL45_FB::5 RXPLL_DIVSEL_FB::2 RXPLL_DIVSEL_OUT::1 RXPLL_DIVSEL_REF::1
+       RXPLL_STARTUP_EN::TRUE RXRECCLK_CTRL::CLKTESTSIG1 RXUSRCLK2INV::RXUSRCLK2_B
+       RXUSRCLKINV::RXUSRCLK_B RX_BUFFER_USE::TRUE RX_CDR_FORCE_ROTATE::FALSE
+       RX_CLK25_DIVIDER::6 RX_DATA_WIDTH::20 RX_DECODE_SEQ_MATCH::TRUE RX_EN_IDLE_HOLD_CDR::FALSE
+       RX_EN_IDLE_HOLD_DFE::TRUE RX_EN_IDLE_RESET_BUF::TRUE RX_EN_IDLE_RESET_FR::TRUE
+       RX_EN_IDLE_RESET_PH::TRUE RX_EN_MODE_RESET_BUF::TRUE RX_EN_RATE_RESET_BUF::TRUE
+       RX_EN_REALIGN_RESET_BUF::FALSE RX_EN_REALIGN_RESET_BUF2::FALSE RX_FIFO_ADDR_MODE::FULL
+       RX_LOSS_OF_SYNC_FSM::FALSE RX_LOS_INVALID_INCR::1 RX_LOS_THRESHOLD::4
+       RX_OVERSAMPLE_MODE::FALSE RX_SLIDE_AUTO_WAIT::5 RX_SLIDE_MODE::OFF
+       RX_XCLK_SEL::RXREC SAS_MAX_COMSAS::52 SAS_MIN_COMSAS::40 SATA_MAX_BURST::7
+       SATA_MAX_INIT::22 SATA_MAX_WAKE::7 SATA_MIN_BURST::4 SATA_MIN_INIT::12
+       SATA_MIN_WAKE::4 SCANCLKINV::#OFF SHOW_REALIGN_COMMA::TRUE TERMINATION_OVRD::FALSE
+       TSTCLK0INV::TSTCLK0_B TSTCLK1INV::TSTCLK1_B TXDRIVE_DRP_EN::FALSE
+       TXDRIVE_LOOPBACK_HIZ::FALSE TXDRIVE_LOOPBACK_PD::FALSE TXGEARBOX_USE::FALSE
+       TXOUTCLKPCS_SEL::0 TXOUTCLK_CTRL::CLKTESTSIG0 TXPLL_DIVSEL45_FB::5
+       TXPLL_DIVSEL_FB::2 TXPLL_DIVSEL_OUT::1 TXPLL_DIVSEL_REF::1 TXPLL_STARTUP_EN::TRUE
+       TXUSRCLK2INV::TXUSRCLK2_B TXUSRCLKINV::TXUSRCLK_B TX_BUFFER_USE::TRUE
+       TX_CLK25_DIVIDER::6 TX_CLK_SOURCE::RXPLL TX_DATA_WIDTH::20 TX_DRIVE_MODE::DIRECT
+       TX_EN_RATE_RESET_BUF::TRUE TX_OVERSAMPLE_MODE::FALSE TX_XCLK_SEL::TXUSR
+       GTXE1:GTXE1_ML_REPLICATED_7_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate7:
+         A_DFECLKDLYADJ::000000  A_DFEDLYOVRD::0  A_DFETAP1::00000  A_DFETAP2::00000
+        A_DFETAP3::0000  A_DFETAP4::0000  A_DFETAPOVRD::0  A_GTXRXRESET::0
+        A_GTXTXRESET::0  A_LOOPBACK::000  A_PLLCLKRXRESET::0  A_PLLCLKTXRESET::0
+        A_PLLRXRESET::0  A_PLLTXRESET::0  A_PRBSCNTRESET::0  A_RXBUFRESET::0
+        A_RXCDRFREQRESET::0  A_RXCDRHOLD::0  A_RXCDRPHASERESET::0  A_RXCDRRESET::0
+        A_RXDFERESET::0  A_RXENPMAPHASEALIGN::0  A_RXENPRBSTST::000  A_RXENSAMPLEALIGN::0
+        A_RXEQMIX::0000000000  A_RXPLLLKDETEN::0  A_RXPLLPOWERDOWN::0  A_RXPMASETPHASE::0
+        A_RXPOLARITY::0  A_RXPOWERDOWN::00  A_RXRESET::0  A_TXBUFDIFFCTRL::010
+        A_TXDEEMPH::0  A_TXDIFFCTRL::0000  A_TXELECIDLE::0  A_TXENPMAPHASEALIGN::0
+        A_TXENPRBSTST::000  A_TXMARGIN::010  A_TXPLLLKDETEN::0  A_TXPLLPOWERDOWN::0
+        A_TXPMASETPHASE::0  A_TXPOLARITY::0  A_TXPOSTEMPHASIS::00000  A_TXPOWERDOWN::00
+        A_TXPRBSFORCEERR::0  A_TXPREEMPHASIS::0000  A_TXRESET::0  A_TXSWING::0
+        BGTEST_CFG::00  BIAS_CFG::00000  CDR_PH_ADJ_TIME::10100  CHAN_BOND_SEQ_1_1::0101111100
+        CHAN_BOND_SEQ_1_2::0001001010  CHAN_BOND_SEQ_1_3::0001001010  CHAN_BOND_SEQ_1_4::0110111100
+        CHAN_BOND_SEQ_1_ENABLE::1111  CHAN_BOND_SEQ_2_1::0100111100  CHAN_BOND_SEQ_2_2::0100111100
+        CHAN_BOND_SEQ_2_3::0110111100  CHAN_BOND_SEQ_2_4::0100111100  CHAN_BOND_SEQ_2_CFG::00000
+        CHAN_BOND_SEQ_2_ENABLE::1111  CLK_COR_SEQ_1_1::0100011100  CLK_COR_SEQ_1_2::0000000000
+        CLK_COR_SEQ_1_3::0000000000  CLK_COR_SEQ_1_4::0000000000  CLK_COR_SEQ_1_ENABLE::1111
+        CLK_COR_SEQ_2_1::0000000000  CLK_COR_SEQ_2_2::0000000000  CLK_COR_SEQ_2_3::0000000000
+        CLK_COR_SEQ_2_4::0000000000  CLK_COR_SEQ_2_ENABLE::1111  CM_TRIM::01
+        COMMA_10B_ENABLE::1111111111  COM_BURST_VAL::1111  DFE_CAL_TIME::01100
+        DFE_CFG::00011011  GEARBOX_ENDEC::000  MCOMMA_10B_VALUE::1010000011
+        OOBDETECT_THRESHOLD::011  PCOMMA_10B_VALUE::0101111100  PMA_CDR_SCAN::640404c
+        PMA_CFG::0040000040000000003  PMA_RXSYNC_CFG::00  PMA_RX_CFG::05ce048
+        PMA_TX_CFG::00082  POWER_SAVE::0000110100  RXPLL_COM_CFG::21680a
+        RXPLL_CP_CFG::00  RXPLL_LKDET_CFG::111  RXPRBSERR_LOOPBACK::0  RXRECCLK_DLY::0000000000
+        RXUSRCLK_DLY::0000  RX_DLYALIGN_CTRINC::0100  RX_DLYALIGN_EDGESET::00110
+        RX_DLYALIGN_LPFINC::0111  RX_DLYALIGN_MONSEL::000  RX_DLYALIGN_OVRDSETTING::00000000
+        RX_EYE_OFFSET::4c  RX_EYE_SCANMODE::00  RX_IDLE_HI_CNT::1000  RX_IDLE_LO_CNT::0000
+        SATA_BURST_VAL::100  SATA_IDLE_VAL::100  TERMINATION_CTRL::10100
+        TRANS_TIME_FROM_P2::03c  TRANS_TIME_NON_P2::19  TRANS_TIME_RATE::0e
+        TRANS_TIME_TO_P2::064  TST_ATTR::00000000  TXOUTCLK_DLY::0000000000
+        TXPLL_COM_CFG::21680a  TXPLL_CP_CFG::00  TXPLL_LKDET_CFG::111  TXPLL_SATA::00
+        TX_BYTECLK_CFG::00  TX_DEEMPH_0::11010  TX_DEEMPH_1::10000  TX_DETECT_RX_CFG::1832
+        TX_DLYALIGN_CTRINC::0100  TX_DLYALIGN_LPFINC::0110  TX_DLYALIGN_MONSEL::000
+        TX_DLYALIGN_OVRDSETTING::10000000  TX_IDLE_ASSERT_DELAY::100  TX_IDLE_DEASSERT_DELAY::010
+        TX_MARGIN_FULL_0::1001110  TX_MARGIN_FULL_1::1001001  TX_MARGIN_FULL_2::1000101
+        TX_MARGIN_FULL_3::1000010  TX_MARGIN_FULL_4::1000000  TX_MARGIN_LOW_0::1000110
+        TX_MARGIN_LOW_1::1000100  TX_MARGIN_LOW_2::1000010  TX_MARGIN_LOW_3::1000000
+        TX_MARGIN_LOW_4::1000000  TX_PMADATA_OPT::0  TX_TDCC_CFG::11  TX_USRCLK_CFG::00
+        USR_CODE_ERR_CLR::0 "
+  ;
+inst "GTXE1_ML_REPLICATED_8_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate8" "GTXE1",placed GTX_X102Y180 GTXE1_X0Y18  ,
+  cfg " AC_CAP_DIS::TRUE ALIGN_COMMA_WORD::1 CHAN_BOND_1_MAX_SKEW::7 CHAN_BOND_2_MAX_SKEW::1
+       CHAN_BOND_KEEP_ALIGN::FALSE CHAN_BOND_SEQ_2_USE::FALSE CHAN_BOND_SEQ_LEN::1
+       CLK_CORRECT_USE::TRUE CLK_COR_ADJ_LEN::1 CLK_COR_DET_LEN::1 CLK_COR_INSERT_IDLE_FLAG::FALSE
+       CLK_COR_KEEP_IDLE::FALSE CLK_COR_MAX_LAT::20 CLK_COR_MIN_LAT::18
+       CLK_COR_PRECEDENCE::TRUE CLK_COR_REPEAT_WAIT::0 CLK_COR_SEQ_2_USE::FALSE
+       COMMA_DOUBLE::FALSE DCLKINV::DCLK_B DEC_MCOMMA_DETECT::TRUE DEC_PCOMMA_DETECT::TRUE
+       DEC_VALID_COMMA_ONLY::TRUE DFE_DRP_EN::FALSE GEN_RXUSRCLK::TRUE GEN_TXUSRCLK::TRUE
+       GREFCLKRXINV::#OFF GREFCLKTXINV::#OFF GTX_CFG_PWRUP::FALSE LOOPBACK_DRP_EN::FALSE
+       MASTER_DRP_EN::FALSE MCOMMA_DETECT::TRUE PCI_EXPRESS_MODE::FALSE
+       PCOMMA_DETECT::TRUE PDELIDLE_DRP_EN::FALSE PHASEALIGN_DRP_EN::FALSE
+       PLL_DRP_EN::FALSE PMA_CAS_CLK_EN::FALSE POLARITY_DRP_EN::FALSE PRBS_DRP_EN::FALSE
+       RCV_TERM_GND::FALSE RCV_TERM_VTTRX::FALSE RESET_DRP_EN::FALSE RXBUF_OVFL_THRESH::61
+       RXBUF_OVRD_THRESH::FALSE RXBUF_UDFL_THRESH::4 RXGEARBOX_USE::FALSE
+       RXPLL_DIVSEL45_FB::5 RXPLL_DIVSEL_FB::2 RXPLL_DIVSEL_OUT::1 RXPLL_DIVSEL_REF::1
+       RXPLL_STARTUP_EN::TRUE RXRECCLK_CTRL::CLKTESTSIG1 RXUSRCLK2INV::RXUSRCLK2_B
+       RXUSRCLKINV::RXUSRCLK_B RX_BUFFER_USE::TRUE RX_CDR_FORCE_ROTATE::FALSE
+       RX_CLK25_DIVIDER::6 RX_DATA_WIDTH::20 RX_DECODE_SEQ_MATCH::TRUE RX_EN_IDLE_HOLD_CDR::FALSE
+       RX_EN_IDLE_HOLD_DFE::TRUE RX_EN_IDLE_RESET_BUF::TRUE RX_EN_IDLE_RESET_FR::TRUE
+       RX_EN_IDLE_RESET_PH::TRUE RX_EN_MODE_RESET_BUF::TRUE RX_EN_RATE_RESET_BUF::TRUE
+       RX_EN_REALIGN_RESET_BUF::FALSE RX_EN_REALIGN_RESET_BUF2::FALSE RX_FIFO_ADDR_MODE::FULL
+       RX_LOSS_OF_SYNC_FSM::FALSE RX_LOS_INVALID_INCR::1 RX_LOS_THRESHOLD::4
+       RX_OVERSAMPLE_MODE::FALSE RX_SLIDE_AUTO_WAIT::5 RX_SLIDE_MODE::OFF
+       RX_XCLK_SEL::RXREC SAS_MAX_COMSAS::52 SAS_MIN_COMSAS::40 SATA_MAX_BURST::7
+       SATA_MAX_INIT::22 SATA_MAX_WAKE::7 SATA_MIN_BURST::4 SATA_MIN_INIT::12
+       SATA_MIN_WAKE::4 SCANCLKINV::#OFF SHOW_REALIGN_COMMA::TRUE TERMINATION_OVRD::FALSE
+       TSTCLK0INV::TSTCLK0_B TSTCLK1INV::TSTCLK1_B TXDRIVE_DRP_EN::FALSE
+       TXDRIVE_LOOPBACK_HIZ::FALSE TXDRIVE_LOOPBACK_PD::FALSE TXGEARBOX_USE::FALSE
+       TXOUTCLKPCS_SEL::0 TXOUTCLK_CTRL::CLKTESTSIG0 TXPLL_DIVSEL45_FB::5
+       TXPLL_DIVSEL_FB::2 TXPLL_DIVSEL_OUT::1 TXPLL_DIVSEL_REF::1 TXPLL_STARTUP_EN::TRUE
+       TXUSRCLK2INV::TXUSRCLK2_B TXUSRCLKINV::TXUSRCLK_B TX_BUFFER_USE::TRUE
+       TX_CLK25_DIVIDER::6 TX_CLK_SOURCE::RXPLL TX_DATA_WIDTH::20 TX_DRIVE_MODE::DIRECT
+       TX_EN_RATE_RESET_BUF::TRUE TX_OVERSAMPLE_MODE::FALSE TX_XCLK_SEL::TXUSR
+       GTXE1:GTXE1_ML_REPLICATED_8_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate8:
+         A_DFECLKDLYADJ::000000  A_DFEDLYOVRD::0  A_DFETAP1::00000  A_DFETAP2::00000
+        A_DFETAP3::0000  A_DFETAP4::0000  A_DFETAPOVRD::0  A_GTXRXRESET::0
+        A_GTXTXRESET::0  A_LOOPBACK::000  A_PLLCLKRXRESET::0  A_PLLCLKTXRESET::0
+        A_PLLRXRESET::0  A_PLLTXRESET::0  A_PRBSCNTRESET::0  A_RXBUFRESET::0
+        A_RXCDRFREQRESET::0  A_RXCDRHOLD::0  A_RXCDRPHASERESET::0  A_RXCDRRESET::0
+        A_RXDFERESET::0  A_RXENPMAPHASEALIGN::0  A_RXENPRBSTST::000  A_RXENSAMPLEALIGN::0
+        A_RXEQMIX::0000000000  A_RXPLLLKDETEN::0  A_RXPLLPOWERDOWN::0  A_RXPMASETPHASE::0
+        A_RXPOLARITY::0  A_RXPOWERDOWN::00  A_RXRESET::0  A_TXBUFDIFFCTRL::010
+        A_TXDEEMPH::0  A_TXDIFFCTRL::0000  A_TXELECIDLE::0  A_TXENPMAPHASEALIGN::0
+        A_TXENPRBSTST::000  A_TXMARGIN::010  A_TXPLLLKDETEN::0  A_TXPLLPOWERDOWN::0
+        A_TXPMASETPHASE::0  A_TXPOLARITY::0  A_TXPOSTEMPHASIS::00000  A_TXPOWERDOWN::00
+        A_TXPRBSFORCEERR::0  A_TXPREEMPHASIS::0000  A_TXRESET::0  A_TXSWING::0
+        BGTEST_CFG::00  BIAS_CFG::00000  CDR_PH_ADJ_TIME::10100  CHAN_BOND_SEQ_1_1::0101111100
+        CHAN_BOND_SEQ_1_2::0001001010  CHAN_BOND_SEQ_1_3::0001001010  CHAN_BOND_SEQ_1_4::0110111100
+        CHAN_BOND_SEQ_1_ENABLE::1111  CHAN_BOND_SEQ_2_1::0100111100  CHAN_BOND_SEQ_2_2::0100111100
+        CHAN_BOND_SEQ_2_3::0110111100  CHAN_BOND_SEQ_2_4::0100111100  CHAN_BOND_SEQ_2_CFG::00000
+        CHAN_BOND_SEQ_2_ENABLE::1111  CLK_COR_SEQ_1_1::0100011100  CLK_COR_SEQ_1_2::0000000000
+        CLK_COR_SEQ_1_3::0000000000  CLK_COR_SEQ_1_4::0000000000  CLK_COR_SEQ_1_ENABLE::1111
+        CLK_COR_SEQ_2_1::0000000000  CLK_COR_SEQ_2_2::0000000000  CLK_COR_SEQ_2_3::0000000000
+        CLK_COR_SEQ_2_4::0000000000  CLK_COR_SEQ_2_ENABLE::1111  CM_TRIM::01
+        COMMA_10B_ENABLE::1111111111  COM_BURST_VAL::1111  DFE_CAL_TIME::01100
+        DFE_CFG::00011011  GEARBOX_ENDEC::000  MCOMMA_10B_VALUE::1010000011
+        OOBDETECT_THRESHOLD::011  PCOMMA_10B_VALUE::0101111100  PMA_CDR_SCAN::640404c
+        PMA_CFG::0040000040000000003  PMA_RXSYNC_CFG::00  PMA_RX_CFG::05ce048
+        PMA_TX_CFG::00082  POWER_SAVE::0000110100  RXPLL_COM_CFG::21680a
+        RXPLL_CP_CFG::00  RXPLL_LKDET_CFG::111  RXPRBSERR_LOOPBACK::0  RXRECCLK_DLY::0000000000
+        RXUSRCLK_DLY::0000  RX_DLYALIGN_CTRINC::0100  RX_DLYALIGN_EDGESET::00110
+        RX_DLYALIGN_LPFINC::0111  RX_DLYALIGN_MONSEL::000  RX_DLYALIGN_OVRDSETTING::00000000
+        RX_EYE_OFFSET::4c  RX_EYE_SCANMODE::00  RX_IDLE_HI_CNT::1000  RX_IDLE_LO_CNT::0000
+        SATA_BURST_VAL::100  SATA_IDLE_VAL::100  TERMINATION_CTRL::10100
+        TRANS_TIME_FROM_P2::03c  TRANS_TIME_NON_P2::19  TRANS_TIME_RATE::0e
+        TRANS_TIME_TO_P2::064  TST_ATTR::00000000  TXOUTCLK_DLY::0000000000
+        TXPLL_COM_CFG::21680a  TXPLL_CP_CFG::00  TXPLL_LKDET_CFG::111  TXPLL_SATA::00
+        TX_BYTECLK_CFG::00  TX_DEEMPH_0::11010  TX_DEEMPH_1::10000  TX_DETECT_RX_CFG::1832
+        TX_DLYALIGN_CTRINC::0100  TX_DLYALIGN_LPFINC::0110  TX_DLYALIGN_MONSEL::000
+        TX_DLYALIGN_OVRDSETTING::10000000  TX_IDLE_ASSERT_DELAY::100  TX_IDLE_DEASSERT_DELAY::010
+        TX_MARGIN_FULL_0::1001110  TX_MARGIN_FULL_1::1001001  TX_MARGIN_FULL_2::1000101
+        TX_MARGIN_FULL_3::1000010  TX_MARGIN_FULL_4::1000000  TX_MARGIN_LOW_0::1000110
+        TX_MARGIN_LOW_1::1000100  TX_MARGIN_LOW_2::1000010  TX_MARGIN_LOW_3::1000000
+        TX_MARGIN_LOW_4::1000000  TX_PMADATA_OPT::0  TX_TDCC_CFG::11  TX_USRCLK_CFG::00
+        USR_CODE_ERR_CLR::0 "
+  ;
+inst "GTXE1_ML_REPLICATED_9_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate9" "GTXE1",placed GTX_X102Y190 GTXE1_X0Y19  ,
+  cfg " AC_CAP_DIS::TRUE ALIGN_COMMA_WORD::1 CHAN_BOND_1_MAX_SKEW::7 CHAN_BOND_2_MAX_SKEW::1
+       CHAN_BOND_KEEP_ALIGN::FALSE CHAN_BOND_SEQ_2_USE::FALSE CHAN_BOND_SEQ_LEN::1
+       CLK_CORRECT_USE::TRUE CLK_COR_ADJ_LEN::1 CLK_COR_DET_LEN::1 CLK_COR_INSERT_IDLE_FLAG::FALSE
+       CLK_COR_KEEP_IDLE::FALSE CLK_COR_MAX_LAT::20 CLK_COR_MIN_LAT::18
+       CLK_COR_PRECEDENCE::TRUE CLK_COR_REPEAT_WAIT::0 CLK_COR_SEQ_2_USE::FALSE
+       COMMA_DOUBLE::FALSE DCLKINV::DCLK_B DEC_MCOMMA_DETECT::TRUE DEC_PCOMMA_DETECT::TRUE
+       DEC_VALID_COMMA_ONLY::TRUE DFE_DRP_EN::FALSE GEN_RXUSRCLK::TRUE GEN_TXUSRCLK::TRUE
+       GREFCLKRXINV::#OFF GREFCLKTXINV::#OFF GTX_CFG_PWRUP::FALSE LOOPBACK_DRP_EN::FALSE
+       MASTER_DRP_EN::FALSE MCOMMA_DETECT::TRUE PCI_EXPRESS_MODE::FALSE
+       PCOMMA_DETECT::TRUE PDELIDLE_DRP_EN::FALSE PHASEALIGN_DRP_EN::FALSE
+       PLL_DRP_EN::FALSE PMA_CAS_CLK_EN::FALSE POLARITY_DRP_EN::FALSE PRBS_DRP_EN::FALSE
+       RCV_TERM_GND::FALSE RCV_TERM_VTTRX::FALSE RESET_DRP_EN::FALSE RXBUF_OVFL_THRESH::61
+       RXBUF_OVRD_THRESH::FALSE RXBUF_UDFL_THRESH::4 RXGEARBOX_USE::FALSE
+       RXPLL_DIVSEL45_FB::5 RXPLL_DIVSEL_FB::2 RXPLL_DIVSEL_OUT::1 RXPLL_DIVSEL_REF::1
+       RXPLL_STARTUP_EN::TRUE RXRECCLK_CTRL::CLKTESTSIG1 RXUSRCLK2INV::RXUSRCLK2_B
+       RXUSRCLKINV::RXUSRCLK_B RX_BUFFER_USE::TRUE RX_CDR_FORCE_ROTATE::FALSE
+       RX_CLK25_DIVIDER::6 RX_DATA_WIDTH::20 RX_DECODE_SEQ_MATCH::TRUE RX_EN_IDLE_HOLD_CDR::FALSE
+       RX_EN_IDLE_HOLD_DFE::TRUE RX_EN_IDLE_RESET_BUF::TRUE RX_EN_IDLE_RESET_FR::TRUE
+       RX_EN_IDLE_RESET_PH::TRUE RX_EN_MODE_RESET_BUF::TRUE RX_EN_RATE_RESET_BUF::TRUE
+       RX_EN_REALIGN_RESET_BUF::FALSE RX_EN_REALIGN_RESET_BUF2::FALSE RX_FIFO_ADDR_MODE::FULL
+       RX_LOSS_OF_SYNC_FSM::FALSE RX_LOS_INVALID_INCR::1 RX_LOS_THRESHOLD::4
+       RX_OVERSAMPLE_MODE::FALSE RX_SLIDE_AUTO_WAIT::5 RX_SLIDE_MODE::OFF
+       RX_XCLK_SEL::RXREC SAS_MAX_COMSAS::52 SAS_MIN_COMSAS::40 SATA_MAX_BURST::7
+       SATA_MAX_INIT::22 SATA_MAX_WAKE::7 SATA_MIN_BURST::4 SATA_MIN_INIT::12
+       SATA_MIN_WAKE::4 SCANCLKINV::#OFF SHOW_REALIGN_COMMA::TRUE TERMINATION_OVRD::FALSE
+       TSTCLK0INV::TSTCLK0_B TSTCLK1INV::TSTCLK1_B TXDRIVE_DRP_EN::FALSE
+       TXDRIVE_LOOPBACK_HIZ::FALSE TXDRIVE_LOOPBACK_PD::FALSE TXGEARBOX_USE::FALSE
+       TXOUTCLKPCS_SEL::0 TXOUTCLK_CTRL::CLKTESTSIG0 TXPLL_DIVSEL45_FB::5
+       TXPLL_DIVSEL_FB::2 TXPLL_DIVSEL_OUT::1 TXPLL_DIVSEL_REF::1 TXPLL_STARTUP_EN::TRUE
+       TXUSRCLK2INV::TXUSRCLK2_B TXUSRCLKINV::TXUSRCLK_B TX_BUFFER_USE::TRUE
+       TX_CLK25_DIVIDER::6 TX_CLK_SOURCE::RXPLL TX_DATA_WIDTH::20 TX_DRIVE_MODE::DIRECT
+       TX_EN_RATE_RESET_BUF::TRUE TX_OVERSAMPLE_MODE::FALSE TX_XCLK_SEL::TXUSR
+       GTXE1:GTXE1_ML_REPLICATED_9_STARTUP_V6_PWRUP_GTXE1_ML_INSERTED_MapLib_replicate9:
+         A_DFECLKDLYADJ::000000  A_DFEDLYOVRD::0  A_DFETAP1::00000  A_DFETAP2::00000
+        A_DFETAP3::0000  A_DFETAP4::0000  A_DFETAPOVRD::0  A_GTXRXRESET::0
+        A_GTXTXRESET::0  A_LOOPBACK::000  A_PLLCLKRXRESET::0  A_PLLCLKTXRESET::0
+        A_PLLRXRESET::0  A_PLLTXRESET::0  A_PRBSCNTRESET::0  A_RXBUFRESET::0
+        A_RXCDRFREQRESET::0  A_RXCDRHOLD::0  A_RXCDRPHASERESET::0  A_RXCDRRESET::0
+        A_RXDFERESET::0  A_RXENPMAPHASEALIGN::0  A_RXENPRBSTST::000  A_RXENSAMPLEALIGN::0
+        A_RXEQMIX::0000000000  A_RXPLLLKDETEN::0  A_RXPLLPOWERDOWN::0  A_RXPMASETPHASE::0
+        A_RXPOLARITY::0  A_RXPOWERDOWN::00  A_RXRESET::0  A_TXBUFDIFFCTRL::010
+        A_TXDEEMPH::0  A_TXDIFFCTRL::0000  A_TXELECIDLE::0  A_TXENPMAPHASEALIGN::0
+        A_TXENPRBSTST::000  A_TXMARGIN::010  A_TXPLLLKDETEN::0  A_TXPLLPOWERDOWN::0
+        A_TXPMASETPHASE::0  A_TXPOLARITY::0  A_TXPOSTEMPHASIS::00000  A_TXPOWERDOWN::00
+        A_TXPRBSFORCEERR::0  A_TXPREEMPHASIS::0000  A_TXRESET::0  A_TXSWING::0
+        BGTEST_CFG::00  BIAS_CFG::00000  CDR_PH_ADJ_TIME::10100  CHAN_BOND_SEQ_1_1::0101111100
+        CHAN_BOND_SEQ_1_2::0001001010  CHAN_BOND_SEQ_1_3::0001001010  CHAN_BOND_SEQ_1_4::0110111100
+        CHAN_BOND_SEQ_1_ENABLE::1111  CHAN_BOND_SEQ_2_1::0100111100  CHAN_BOND_SEQ_2_2::0100111100
+        CHAN_BOND_SEQ_2_3::0110111100  CHAN_BOND_SEQ_2_4::0100111100  CHAN_BOND_SEQ_2_CFG::00000
+        CHAN_BOND_SEQ_2_ENABLE::1111  CLK_COR_SEQ_1_1::0100011100  CLK_COR_SEQ_1_2::0000000000
+        CLK_COR_SEQ_1_3::0000000000  CLK_COR_SEQ_1_4::0000000000  CLK_COR_SEQ_1_ENABLE::1111
+        CLK_COR_SEQ_2_1::0000000000  CLK_COR_SEQ_2_2::0000000000  CLK_COR_SEQ_2_3::0000000000
+        CLK_COR_SEQ_2_4::0000000000  CLK_COR_SEQ_2_ENABLE::1111  CM_TRIM::01
+        COMMA_10B_ENABLE::1111111111  COM_BURST_VAL::1111  DFE_CAL_TIME::01100
+        DFE_CFG::00011011  GEARBOX_ENDEC::000  MCOMMA_10B_VALUE::1010000011
+        OOBDETECT_THRESHOLD::011  PCOMMA_10B_VALUE::0101111100  PMA_CDR_SCAN::640404c
+        PMA_CFG::0040000040000000003  PMA_RXSYNC_CFG::00  PMA_RX_CFG::05ce048
+        PMA_TX_CFG::00082  POWER_SAVE::0000110100  RXPLL_COM_CFG::21680a
+        RXPLL_CP_CFG::00  RXPLL_LKDET_CFG::111  RXPRBSERR_LOOPBACK::0  RXRECCLK_DLY::0000000000
+        RXUSRCLK_DLY::0000  RX_DLYALIGN_CTRINC::0100  RX_DLYALIGN_EDGESET::00110
+        RX_DLYALIGN_LPFINC::0111  RX_DLYALIGN_MONSEL::000  RX_DLYALIGN_OVRDSETTING::00000000
+        RX_EYE_OFFSET::4c  RX_EYE_SCANMODE::00  RX_IDLE_HI_CNT::1000  RX_IDLE_LO_CNT::0000
+        SATA_BURST_VAL::100  SATA_IDLE_VAL::100  TERMINATION_CTRL::10100
+        TRANS_TIME_FROM_P2::03c  TRANS_TIME_NON_P2::19  TRANS_TIME_RATE::0e
+        TRANS_TIME_TO_P2::064  TST_ATTR::00000000  TXOUTCLK_DLY::0000000000
+        TXPLL_COM_CFG::21680a  TXPLL_CP_CFG::00  TXPLL_LKDET_CFG::111  TXPLL_SATA::00
+        TX_BYTECLK_CFG::00  TX_DEEMPH_0::11010  TX_DEEMPH_1::10000  TX_DETECT_RX_CFG::1832
+        TX_DLYALIGN_CTRINC::0100  TX_DLYALIGN_LPFINC::0110  TX_DLYALIGN_MONSEL::000
+        TX_DLYALIGN_OVRDSETTING::10000000  TX_IDLE_ASSERT_DELAY::100  TX_IDLE_DEASSERT_DELAY::010
+        TX_MARGIN_FULL_0::1001110  TX_MARGIN_FULL_1::1001001  TX_MARGIN_FULL_2::1000101
+        TX_MARGIN_FULL_3::1000010  TX_MARGIN_FULL_4::1000000  TX_MARGIN_LOW_0::1000110
+        TX_MARGIN_LOW_1::1000100  TX_MARGIN_LOW_2::1000010  TX_MARGIN_LOW_3::1000000
+        TX_MARGIN_LOW_4::1000000  TX_PMADATA_OPT::0  TX_TDCC_CFG::11  TX_USRCLK_CFG::00
+        USR_CODE_ERR_CLR::0 "
+  ;
diff --git vtr_flow/benchmarks/verilog/LU32PEEng_yosys.v vtr_flow/benchmarks/verilog/LU32PEEng_yosys.v
new file mode 100755
index 0000000..a2129e1
--- /dev/null
+++ vtr_flow/benchmarks/verilog/LU32PEEng_yosys.v
@@ -0,0 +1,5436 @@
+//auto-generated top.v
+//top level module of LU factorization
+//by Wei Zhang
+
+`define NWIDTH 6'b010100
+`define BLOCKWIDTH 4'b0111
+`define DDRWIDTH 7'b0100000
+`define DDRNUMDQS 4'b0100
+`define DDRSIZEWIDTH 6'b011000
+`define BURSTLEN 3'b010
+`define MEMCONWIDTH 8'b01000000
+`define MEMCONNUMBYTES 5'b01000
+`define RAMWIDTH 12'b010000000000
+`define RAMNUMBYTES 9'b010000000
+`define RAMSIZEWIDTH 4'b0111
+`define TOPWIDTH 7'b0100000
+`define rFIFOINPUTWIDTH 8'b01000000
+`define wFIFOINPUTWIDTH 12'b010000000000
+`define mFIFOWIDTH 6'b011100
+`define aFIFOWIDTH 4'b0111
+
+(* top *)
+module LU32PEEng (clk_IBUF, //ref_clk, global_reset_n,
+ start, N, offset, done,
+		//mem_addr, mem_ba, mem_cas_n, mem_cke, mem_clk, mem_clk_n, mem_cs_n,
+burst_begin,
+mem_local_be,
+mem_local_read_req,
+mem_local_size,
+mem_local_wdata,
+mem_local_write_req,
+mem_local_rdata,
+mem_local_rdata_valid,
+mem_local_ready,
+mem_local_wdata_req,
+reset_n,
+mem_local_addr
+//Cong: dummy output
+//a_junk,
+//w_junk,
+//m_junk,
+//r_junk,
+//Cong:dummy output
+//junk_r,
+//junk_r1,
+//junk_r2,
+//junk_r3,
+//junk_top
+	);
+
+input start;
+input[`NWIDTH-1:0] N;
+input[`DDRSIZEWIDTH-1:0] offset;
+output done;
+input clk_IBUF;
+wire clk;
+bufgctrl b(.i({1'bx, clk_IBUF}), .s(2'bxx), .ce(2'bxx), .ignore(2'bxx), .o(clk));
+
+output burst_begin;
+output [`MEMCONNUMBYTES-1:0] mem_local_be;
+output mem_local_read_req;
+output [`BURSTLEN-1:0] mem_local_size;
+output [`MEMCONWIDTH-1:0] mem_local_wdata;
+output mem_local_write_req;
+output [`DDRSIZEWIDTH-1:0] mem_local_addr;
+input [`MEMCONWIDTH-1:0] mem_local_rdata;
+input mem_local_rdata_valid;
+input mem_local_ready;
+input reset_n;
+input mem_local_wdata_req;
+wire[`BLOCKWIDTH-1:0] m, n, loop;
+wire[1:0] mode;
+wire comp_start, comp_done;
+wire dtu_write_req, dtu_read_req, dtu_ack, dtu_done;
+wire [`DDRSIZEWIDTH-1:0] dtu_mem_addr;
+wire [`RAMSIZEWIDTH-1:0] dtu_ram_addr;
+wire [`BLOCKWIDTH-1:0] dtu_size;
+wire left_sel;
+
+wire[`RAMWIDTH-1:0] curWriteDataMem, curReadDataMem;
+wire[`RAMSIZEWIDTH-1:0] curWriteAddrMem, curReadAddrMem;
+wire[`RAMNUMBYTES-1:0] curWriteByteEnMem;
+wire curWriteEnMem;
+wire[`RAMWIDTH-1:0] leftWriteDataMem;
+wire[`RAMSIZEWIDTH-1:0] leftWriteAddrMem;
+wire[`RAMNUMBYTES-1:0] leftWriteByteEnMem;
+wire leftWriteEnMem;
+wire curMemSel, leftMemSel;
+
+wire burst_begin;
+wire [`MEMCONNUMBYTES-1:0] mem_local_be;
+wire mem_local_read_req;
+wire [`BURSTLEN-1:0] mem_local_size;
+wire [`MEMCONWIDTH-1:0] mem_local_wdata;
+wire mem_local_write_req;
+wire [`MEMCONWIDTH-1:0] mem_local_rdata;
+wire mem_local_rdata_valid;
+wire mem_local_ready;
+wire mem_local_wdata_req;
+wire reset_n;
+wire [`DDRSIZEWIDTH-1:0] mem_local_addr;
+
+wire[`RAMWIDTH-1:0] ram_write_data, ram_read_data;
+wire[`RAMSIZEWIDTH-1:0] ram_write_addr, ram_read_addr;
+wire[`RAMNUMBYTES-1:0] ram_write_byte_en;
+wire ram_write_en;
+
+MarshallerController MC (clk, start, done, N, offset,
+	comp_start, m, n, loop, mode, comp_done, curMemSel, leftMemSel,
+	dtu_write_req, dtu_read_req, dtu_mem_addr, dtu_ram_addr, dtu_size, dtu_ack, dtu_done, left_sel);
+
+// block that computes the LU factorization, with answer stored back into ram block
+LU compBlock (clk, comp_start, m, n, loop, mode, comp_done,
+			curReadAddrMem, curReadDataMem, curWriteByteEnMem, curWriteDataMem, curWriteAddrMem, curWriteEnMem, curMemSel,
+			leftWriteByteEnMem, leftWriteDataMem, leftWriteAddrMem, leftWriteEnMem, leftMemSel);
+
+DataTransferUnit DTU (.clk(clk), .dtu_write_req(dtu_write_req), .dtu_read_req(dtu_read_req), .dtu_mem_addr(dtu_mem_addr), .dtu_ram_addr(dtu_ram_addr), .dtu_size(dtu_size), .dtu_ack(dtu_ack), .dtu_done(dtu_done),
+		.ram_read_addr(ram_read_addr), .ram_read_data(ram_read_data), .ram_write_byte_en(ram_write_byte_en), .ram_write_data(ram_write_data), .ram_write_addr(ram_write_addr), .ram_write_en(ram_write_en),
+		.mem_rdata(mem_local_rdata), .mem_rdata_valid(mem_local_rdata_valid), .mem_ready(mem_local_ready), .mem_wdata_req(mem_local_wdata_req), .reset_n(reset_n),
+		.burst_begin(burst_begin), .mem_local_addr(mem_local_addr), .mem_be(mem_local_be), .mem_read_req(mem_local_read_req), .mem_size(mem_local_size),
+		.mem_wdata(mem_local_wdata), .mem_write_req(mem_local_write_req)
+		//Cong: dummy output
+		);
+
+assign curReadAddrMem = ram_read_addr;
+assign curWriteByteEnMem = ram_write_byte_en;
+assign curWriteDataMem = ram_write_data;
+assign curWriteAddrMem = ram_write_addr;
+assign curWriteEnMem = ram_write_en && (left_sel == 0);
+assign leftWriteByteEnMem = ram_write_byte_en;
+assign leftWriteDataMem = ram_write_data;
+assign leftWriteAddrMem = ram_write_addr;
+assign leftWriteEnMem = ram_write_en && (left_sel == 1);
+assign ram_read_data = curReadDataMem;
+endmodule
+`define BLOCKM 8'b01000000
+`define BLOCKN 8'b01000000
+`define BLOCKMDIVK 3'b010
+`define MEMBLOCKM 7'b0100000
+`define MEMBLOCKN 7'b0100000
+`define NWIDTH 6'b010100
+`define BLOCKWIDTH 4'b0111
+`define DDRSIZEWIDTH 6'b011000
+`define RAMSIZEWIDTH 4'b0111
+`define START 1'b0 //0
+`define SETUP 2'b01 //1
+`define FIRST 3'b010 //2
+`define MODE0_SETUP 3'b011 //3
+`define MODE0_WAIT 4'b0100 //4
+`define MODE0 4'b0101 //5
+`define MODE1_SETUP 4'b0110 //6
+`define MODE1_WAIT 4'b0111 //7
+`define MODE1 5'b01000 //8
+`define MODE2_SETUP 5'b01001 //9
+`define MODE2_WAIT 5'b01010 //10
+`define MODE2 5'b01011 //11
+`define MODE3_SETUP 5'b01100 //12
+`define MODE3_WAIT 5'b01101 //13
+`define MODE3 5'b01110 //14
+`define STALL 5'b01111 //15
+`define STALL_WAIT 6'b010000 //16
+`define WAIT 6'b010001 //17
+`define FINAL_WRITE 6'b010010 //18
+`define FINAL_WAIT 6'b010011 //19
+`define IDLE 6'b010100 //20
+`define LAST_SETUP 6'b010101 //21
+`define LAST_SETUP_WAIT 6'b010110 //22
+`define LAST 6'b010111 //23
+`define LAST_WAIT 6'b011000 //24
+`define MEM_IDLE 1'b0 //0
+`define MEM_WRITE 2'b01 //1
+`define MEM_WRITE_WAIT 3'b010 //2
+`define MEM_CHECK_DONE 3'b011 //3
+`define MEM_READ 4'b0100 //4
+`define MEM_READ_WAIT 4'b0101 //5
+`define MEM_DONE 4'b0110 //6
+`define MEM_WAIT_DONE 4'b0111 //7
+
+module MarshallerController (clk, start, done, input_N, offset,
+	comp_start, block_m, block_n, loop, mode, comp_done, cur_mem_sel, left_mem_sel,
+	dtu_write_req, dtu_read_req, dtu_mem_addr, dtu_ram_addr, dtu_size, dtu_ack, dtu_done, left_sel);
+
+
+input clk;
+input start;
+output done;
+input [`NWIDTH-1:0] input_N;
+input [`DDRSIZEWIDTH-1:0] offset;
+
+// for computation section
+output comp_start;
+output [`BLOCKWIDTH-1:0] block_m, block_n, loop;
+output [1:0] mode;
+input comp_done;
+output cur_mem_sel, left_mem_sel;
+
+// for data marshaller section
+output dtu_write_req,	dtu_read_req;
+output [`DDRSIZEWIDTH-1:0] dtu_mem_addr;
+output [`RAMSIZEWIDTH-1:0] dtu_ram_addr;
+output [`BLOCKWIDTH-1:0] dtu_size;
+input dtu_ack, dtu_done;
+output left_sel;
+
+reg [4:0] cur_state, next_state;
+reg [`NWIDTH-1:0] comp_N, N, mcount, ncount, Ndivk, mem_N;
+reg [1:0] mode;
+reg [`BLOCKWIDTH-1:0] block_m, block_n, loop, read_n;
+reg [`BLOCKWIDTH-1:0] write_n, write_n_buf;
+reg left_mem_sel, cur_mem_sel, no_left_switch;
+
+reg [3:0] cur_mem_state, next_mem_state;
+reg [`RAMSIZEWIDTH-1:0] ram_addr;
+reg [`DDRSIZEWIDTH-1:0] mem_addr;
+reg [`DDRSIZEWIDTH-1:0] mem_base, mem_top, mem_write, mem_left, mem_cur;
+reg [`DDRSIZEWIDTH-1:0] mem_write_buf;
+reg [`BLOCKWIDTH-1:0] mem_count;
+reg [1:0] mem_read;
+reg [`BLOCKWIDTH-1:0] mem_write_size, mem_write_size_buf, mem_read_size;
+wire mem_done;
+
+assign done = (cur_state == `IDLE);
+assign dtu_ram_addr = ram_addr;
+assign dtu_mem_addr = mem_addr;
+assign dtu_size = (cur_mem_state == `MEM_WRITE) ? mem_write_size : mem_read_size;
+assign comp_start = (cur_state == `MODE0)||(cur_state == `MODE1)||(cur_state == `MODE2)||(cur_state == `MODE3)||(cur_state == `FIRST)||(cur_state == `LAST);
+assign dtu_write_req = (cur_mem_state == `MEM_WRITE);
+assign dtu_read_req = (cur_mem_state == `MEM_READ);
+assign mem_done = (cur_mem_state == `MEM_DONE)&&(dtu_done == 1'b1);
+assign left_sel = mem_read == 2'b01 && (cur_mem_state == `MEM_READ || cur_mem_state == `MEM_READ_WAIT || cur_mem_state == `MEM_WAIT_DONE);
+
+// FSM to produce memory instructions to DTU
+always @ (posedge clk)
+begin
+	case (cur_mem_state)
+	`MEM_IDLE:
+	begin
+		if (cur_state == `START)
+			next_mem_state <= `MEM_CHECK_DONE;
+		else
+			next_mem_state <= `MEM_IDLE;
+	end
+	`MEM_DONE:
+	begin
+		if (cur_state == `MODE0 || cur_state == `MODE1 || cur_state == `MODE2 || 
+			cur_state == `MODE3 || cur_state == `FINAL_WRITE || cur_state == `LAST_SETUP)
+			next_mem_state <= `MEM_WRITE;
+		else if (cur_state == `FIRST)
+			next_mem_state <= `MEM_CHECK_DONE;
+		else
+			next_mem_state <= `MEM_DONE;
+	end
+	`MEM_WRITE:
+	begin
+		next_mem_state <= `MEM_WRITE_WAIT;
+	end
+	`MEM_WRITE_WAIT:
+	begin
+		if (dtu_ack == 1'b1)
+		begin
+			if (mem_count == write_n)
+				next_mem_state <= `MEM_WAIT_DONE;
+			else 
+				next_mem_state <= `MEM_WRITE;
+		end
+		else
+			next_mem_state <= `MEM_WRITE_WAIT;
+	end
+	`MEM_WAIT_DONE:
+	begin
+		if (dtu_done == 1'b1)
+			next_mem_state <= `MEM_CHECK_DONE;
+		else
+			next_mem_state <= `MEM_WAIT_DONE;
+	end
+	`MEM_CHECK_DONE:
+	begin
+		if (mem_read == 2'b10)
+			next_mem_state <= `MEM_DONE;
+		else
+			next_mem_state <= `MEM_READ;
+	end
+	`MEM_READ:
+	begin
+		next_mem_state <= `MEM_READ_WAIT;
+	end
+	`MEM_READ_WAIT:
+	begin
+		if (dtu_ack == 1'b1)
+		begin
+			if (mem_count == read_n)
+				next_mem_state <= `MEM_WAIT_DONE;
+			else
+				next_mem_state <= `MEM_READ;
+		end
+		else
+			next_mem_state <= `MEM_READ_WAIT;
+	end
+	default:
+		next_mem_state <= `MEM_IDLE;
+	endcase
+end
+
+always @ (posedge clk)
+begin
+	if (cur_mem_state == `MEM_DONE || cur_mem_state == `MEM_IDLE)
+	begin
+		ram_addr <= 7'b0;
+		mem_addr <= mem_write;
+		if (next_state == `LAST_WAIT || next_state == `FINAL_WAIT || next_state == `STALL)
+			mem_read <= 2'b00;
+		else if (next_state == `MODE0_SETUP || next_state == `SETUP || cur_state == `MODE0 || next_state == `LAST_SETUP_WAIT)
+			mem_read <= 2'b01;
+		else
+			mem_read <= 2'b10;
+		mem_count <= 7'b0;
+	end
+	else if (cur_mem_state == `MEM_CHECK_DONE)
+	begin
+		if (mem_read == 2'b10)
+		begin
+			mem_addr <= mem_left;
+			read_n <= loop;
+		end
+		else
+		begin
+			mem_addr <= mem_cur;
+			read_n <= block_n;
+		end
+		mem_read <= mem_read - 2'b01;
+		mem_count <= 7'b0;
+		ram_addr <= 7'b0;
+	end
+	else if (cur_mem_state == `MEM_WRITE || cur_mem_state == `MEM_READ)
+	begin
+		ram_addr <= ram_addr + `BLOCKMDIVK;
+		mem_addr <= mem_addr + Ndivk;
+		mem_count <= mem_count + 2'b01;
+	end
+	
+end
+
+// FSM to determine the block LU factorization algorithm
+always @ (posedge clk)
+begin
+	case (cur_state)
+	`START:
+	begin
+		next_state <= `SETUP;
+	end
+	`SETUP:
+	begin
+		next_state <= `WAIT;
+	end
+	`WAIT:
+	begin
+		if (mem_done == 1'b1)
+			next_state <= `FIRST;
+		else
+			next_state <= `WAIT;
+
+	end
+	`FIRST:
+	begin
+		if (mcount < comp_N)
+			next_state <= `MODE1_SETUP;
+		else if (ncount < comp_N)
+			next_state <= `MODE2_SETUP;
+		else
+			next_state <= `LAST_WAIT;
+	end
+	`MODE0_SETUP:
+	begin
+		next_state <= `MODE0_WAIT;
+	end
+	`MODE0_WAIT:
+	begin
+		if (mem_done == 1'b1 && comp_done == 1'b1)
+			next_state <= `MODE0;
+		else
+			next_state <= `MODE0_WAIT;
+
+	end
+	`MODE0:
+	begin
+		if (mcount < comp_N)
+			next_state <= `MODE1_SETUP;
+		else if (ncount < comp_N)
+			next_state <= `MODE2_SETUP;
+		else
+		begin
+			next_state <= `LAST_WAIT;
+		end
+	end
+	`MODE1_SETUP:
+	begin
+		next_state <= `MODE1_WAIT;
+	end
+	`MODE1_WAIT:
+	begin
+		if (mem_done == 1'b1 && comp_done == 1'b1)
+			next_state <= `MODE1;
+		else
+			next_state <= `MODE1_WAIT;
+
+	end
+	`MODE1:
+	begin
+		if (mcount < comp_N)
+			next_state <= `MODE1_SETUP;
+		else if (ncount < comp_N)
+			next_state <= `MODE2_SETUP;
+		else if (comp_N <= `BLOCKN + `BLOCKN)
+			next_state <= `STALL;
+		else
+			next_state <= `MODE0_SETUP;
+	end
+	`MODE2_SETUP:
+	begin
+		next_state <= `MODE2_WAIT;
+	end
+	`MODE2_WAIT:
+	begin
+		if (mem_done == 1'b1 && comp_done == 1'b1)
+			next_state <= `MODE2;
+		else
+			next_state <= `MODE2_WAIT;
+	end
+	`MODE2:
+	begin
+		if (mcount < comp_N)
+			next_state <= `MODE3_SETUP;
+		else if (ncount < comp_N)
+			next_state <= `MODE2_SETUP;
+		else if (comp_N <= `BLOCKN + `BLOCKN)
+			next_state <= `STALL;
+		else
+			next_state <= `MODE0_SETUP;
+	end
+	`MODE3_SETUP:
+	begin
+		next_state <= `MODE3_WAIT;
+	end
+	`MODE3_WAIT:
+	begin
+		if (mem_done == 1'b1 && comp_done == 1'b1)
+			next_state <= `MODE3;
+		else
+			next_state <= `MODE3_WAIT;
+	end
+	`MODE3:
+	begin
+		if (mcount < comp_N)
+			next_state <= `MODE3_SETUP;
+		else if (ncount < comp_N)
+			next_state <= `MODE2_SETUP;
+		else if (comp_N <= `BLOCKN + `BLOCKN)
+			next_state <= `STALL;
+		else
+			next_state <= `MODE0_SETUP;
+	end
+	`STALL:
+		next_state <= `STALL_WAIT;
+	`STALL_WAIT:
+		if (mem_done == 1'b1 && comp_done == 1'b1)
+			next_state <= `LAST_SETUP;
+		else
+			next_state <= `STALL_WAIT;
+	`LAST_SETUP:
+		next_state <= `LAST_SETUP_WAIT;
+	`LAST_SETUP_WAIT:
+		if (mem_done == 1'b1 && comp_done == 1'b1)
+			next_state <= `LAST;
+		else
+			next_state <= `LAST_SETUP_WAIT;
+	`LAST:
+		next_state <= `LAST_WAIT;
+	`LAST_WAIT:
+		if (mem_done == 1'b1 && comp_done == 1'b1)
+			next_state <= `FINAL_WRITE;
+		else
+			next_state <= `LAST_WAIT;
+	`FINAL_WRITE:
+		next_state <= `FINAL_WAIT;
+	`FINAL_WAIT:
+		if (mem_done == 1'b1)
+			next_state <= `IDLE;
+		else
+			next_state <= `FINAL_WAIT;
+	`IDLE:
+		if (start)
+			next_state <= `SETUP;
+		else
+			next_state <= `IDLE;
+	default:
+		next_state <= `START;
+	endcase
+end
+
+always @ (posedge clk)
+begin
+	if (start)
+	begin
+		cur_state <= `START;
+		cur_mem_state <= `MEM_IDLE;
+	end
+	else
+	begin
+		cur_state <= next_state;
+		cur_mem_state <= next_mem_state;
+	end
+end
+
+always @ (cur_state)
+begin
+	case (cur_state)
+	`MODE1:
+		mode = 2'b01;
+	`MODE2:
+		mode = 2'b10;
+	`MODE3:
+		mode = 2'b11;
+	default:
+		mode = 2'b00;
+	endcase
+end
+
+always @ (posedge clk)
+begin
+	if (start)
+	begin
+		comp_N <= input_N;
+		N <= input_N;
+	end
+	else if (next_state == `MODE0)
+	begin
+		comp_N <= comp_N - `BLOCKN;
+	end
+
+	Ndivk <= ((N+`BLOCKM-1)>>6)<<5;
+	mem_N <= Ndivk<<6;
+
+	if (start)
+	begin
+		mem_base <= offset;
+		mem_top <= offset;
+		mem_left <= offset;
+		mem_cur <= offset;
+	end
+	else if (cur_state == `MODE0_SETUP)
+	begin
+		mem_base <= mem_base + mem_N+`MEMBLOCKN;
+		mem_top <= mem_base + mem_N+`MEMBLOCKN;
+		mem_cur <= mem_base + mem_N+`MEMBLOCKN;
+		mem_left <= mem_base + mem_N+`MEMBLOCKN;
+	end
+	else if (cur_state == `MODE1_SETUP)
+	begin
+		mem_cur <= mem_cur + `MEMBLOCKM;
+	end	
+	else if (cur_state == `MODE3_SETUP)
+	begin
+		mem_cur <= mem_cur + `MEMBLOCKM;
+		mem_left <= mem_left + `MEMBLOCKM;
+	end
+	else if (cur_state == `MODE2_SETUP)
+	begin
+		mem_cur <= mem_top + mem_N;
+		mem_top <= mem_top + mem_N;
+		mem_left <= mem_base;
+	end
+
+	if (cur_state == `SETUP)
+	begin
+		mem_write <= 24'b0;
+		mem_write_buf <= 24'b0;
+		mem_write_size <= `BLOCKMDIVK;
+		mem_write_size_buf <= `BLOCKMDIVK;
+		write_n <= block_n;
+		write_n_buf <= block_n;
+	end
+	else if (cur_mem_state == `MEM_CHECK_DONE && mem_read == 0)
+	begin
+		mem_write <= mem_write_buf;
+		mem_write_buf <= mem_cur;
+		mem_write_size <= mem_write_size_buf;
+		mem_write_size_buf <= mem_read_size;
+		write_n <= write_n_buf;
+		write_n_buf <= block_n;
+	end
+
+	mem_read_size <= `BLOCKMDIVK;
+
+	if (start) begin
+		loop <= `BLOCKN;
+	end else if (next_state == `LAST) begin
+		loop <= comp_N[8:0] - `BLOCKN;
+	end
+
+	if (cur_state == `MODE0_SETUP || cur_state == `MODE2_SETUP || start) begin
+		mcount <= `BLOCKM;
+	end else if (cur_state == `MODE1_SETUP || cur_state == `MODE3_SETUP) begin
+		mcount <= mcount+`BLOCKM;
+	end
+
+	if (cur_state == `MODE0_SETUP || start) begin
+		ncount <= `BLOCKN;
+	end else if (cur_state == `MODE2_SETUP) begin
+		ncount <= ncount+`BLOCKN;
+	end
+
+	if (mcount < comp_N) begin
+		block_m <= `BLOCKM;
+	end else begin
+		block_m <= comp_N - mcount + `BLOCKM;
+	end 
+
+	if (ncount < comp_N) begin
+		block_n <= `BLOCKN;
+	end else begin
+		block_n <= comp_N - ncount + `BLOCKN;
+	end
+
+	if (start) begin
+		cur_mem_sel <= 1'b0;
+	end else if ((cur_state == `MODE0)||(cur_state == `MODE1)||(cur_state == `MODE2)||(cur_state == `MODE3)||
+		 (cur_state == `FIRST)||(cur_state == `FINAL_WRITE)||(cur_state == `LAST_SETUP)||(cur_state == `LAST)) begin
+		cur_mem_sel <= !cur_mem_sel;
+	end 
+
+	if (start) begin
+		no_left_switch <= 1'b0;
+	end else if ((cur_state == `MODE0)||(cur_state == `FIRST)) begin
+		no_left_switch <= 1'b1;
+	end else if ((cur_state == `MODE1)||(cur_state == `MODE2)||(cur_state == `MODE3)||
+		 (cur_state == `FINAL_WRITE)||(cur_state == `LAST_SETUP)) begin
+		no_left_switch <= 1'b0;
+	end
+
+	if (start) begin
+		left_mem_sel <= 1'b0;
+	end else if (((cur_state == `MODE0)||(cur_state ==`MODE1)||(cur_state == `MODE2)||(cur_state == `MODE3)||
+		 (cur_state == `FIRST)||(cur_state == `FINAL_WRITE)||(cur_state == `LAST_SETUP))&&(no_left_switch == 1'b0)) begin
+		left_mem_sel <= !left_mem_sel;
+	end 
+end
+
+endmodule
+
+
+//topoutputdelay = 1
+//auto-generated LU.v
+//datapath for computating LU factorization
+//by Wei Zhang
+
+`define rRAMSIZEWIDTH 7
+`define cSETUP 4'b0000
+`define cSTART 4'b0001
+`define cFETCH_COL 4'b0010
+`define cWAIT_COL 4'b0011
+`define cFIND_REC 4'b0100
+`define cMULT_COL 4'b0101
+`define cUPDATE_J 4'b0110
+`define cSTORE_MO 4'b0111
+`define cMULT_SUB 4'b1000
+`define cINCRE_I 4'b1001
+`define cWAIT 4'b1010
+`define cDONE 4'b1011
+`define cSTORE_DIAG 4'b1100
+`define cSTORE_DIAG2 4'b1101
+`define cSTART_FETCH_ROW 4'b1110
+`define cROW_WAIT 2'b00
+`define cFETCH_ROW 2'b01
+`define cDONE_FETCH_ROW 2'b10
+`define cLOAD_ROW_INC_J 2'b11
+
+`define PRECISION 7'b0100000
+`define NUMPE 7'b0100000
+`define PEWIDTH 4'b0101
+`define BLOCKWIDTH 4'b0111
+`define RAMWIDTH 12'b010000000000
+`define RAMNUMBYTES 9'b010000000
+`define RAMSIZEWIDTH 4'b0111
+`define TOPSIZEWIDTH 5'b01100
+`define TOPINPUTDELAY 3'b011
+`define TOPOUTPUTDELAY 2'b01
+`define MEMINPUTDELAY 3'b010
+`define MEMOUTPUTDELAY 2'b01
+`define TOPWIDTH 7'b0100000
+ 
+module LU (clk, start, m, n, loop, mode, done, 
+			curReadAddrMem, curReadDataMem, curWriteByteEnMem, curWriteDataMem, curWriteAddrMem, curWriteEnMem, curMemSel,
+			leftWriteByteEnMem, leftWriteDataMem, leftWriteAddrMem, leftWriteEnMem, leftMemSel
+);
+
+
+input clk, start;
+input[`BLOCKWIDTH-1:0] m, n, loop;
+input[1:0] mode;
+output done;
+wire[`RAMWIDTH-1:0] curWriteData0, curWriteData1;
+wire[`RAMSIZEWIDTH-1:0] curWriteAddr0, curReadAddr0, curWriteAddr1, curReadAddr1;
+wire[`RAMWIDTH-1:0] curReadData0, curReadData1;
+wire[`RAMNUMBYTES-1:0] curWriteByteEn0, curWriteByteEn1;
+wire curWriteEn0, curWriteEn1;
+
+input[`RAMWIDTH-1:0] curWriteDataMem;
+output[`RAMWIDTH-1:0] curReadDataMem;
+input[`RAMSIZEWIDTH-1:0] curWriteAddrMem, curReadAddrMem;
+input[`RAMNUMBYTES-1:0] curWriteByteEnMem;
+input curWriteEnMem;
+input[`RAMWIDTH-1:0] leftWriteDataMem;
+input[`RAMSIZEWIDTH-1:0] leftWriteAddrMem;
+input[`RAMNUMBYTES-1:0] leftWriteByteEnMem;
+input leftWriteEnMem;
+input leftMemSel, curMemSel;
+
+wire[`RAMWIDTH-1:0] curReadDataLU, curReadDataMem;
+wire[`RAMWIDTH-1:0] curWriteDataLU, curWriteDataMem;
+wire[`RAMSIZEWIDTH-1:0] curWriteAddrLU, curWriteAddrMem, curReadAddrLU, curReadAddrMem;
+wire[`RAMNUMBYTES-1:0] curWriteByteEnLU, curWriteByteEnMem;
+wire curWriteEnLU, curWriteEnMem;
+
+reg[`RAMWIDTH-1:0] curReadData0Reg0;
+reg[`RAMWIDTH-1:0] curReadData1Reg0;
+reg[`RAMWIDTH-1:0] leftReadData0Reg0;
+reg[`RAMWIDTH-1:0] leftReadData1Reg0;
+reg[`RAMWIDTH-1:0] curWriteData0Reg0;
+reg[`RAMWIDTH-1:0] curWriteData0Reg1;
+reg[`RAMWIDTH-1:0] curWriteData1Reg0;
+reg[`RAMWIDTH-1:0] curWriteData1Reg1;
+reg[`RAMSIZEWIDTH-1:0] curWriteAddr0Reg0;
+reg[`RAMSIZEWIDTH-1:0] curWriteAddr0Reg1;
+reg[`RAMSIZEWIDTH-1:0] curReadAddr0Reg0;
+reg[`RAMSIZEWIDTH-1:0] curReadAddr0Reg1;
+reg[`RAMSIZEWIDTH-1:0] curWriteAddr1Reg0;
+reg[`RAMSIZEWIDTH-1:0] curWriteAddr1Reg1;
+reg[`RAMSIZEWIDTH-1:0] curReadAddr1Reg0;
+reg[`RAMSIZEWIDTH-1:0] curReadAddr1Reg1;
+reg[`RAMNUMBYTES-1:0] curWriteByteEn0Reg0;
+reg[`RAMNUMBYTES-1:0] curWriteByteEn0Reg1;
+reg[`RAMNUMBYTES-1:0] curWriteByteEn1Reg0;
+reg[`RAMNUMBYTES-1:0] curWriteByteEn1Reg1;
+reg curWriteEn0Reg0;
+reg curWriteEn0Reg1;
+reg curWriteEn1Reg0;
+reg curWriteEn1Reg1;
+reg[`RAMWIDTH-1:0] leftWriteData0Reg0;
+reg[`RAMWIDTH-1:0] leftWriteData0Reg1;
+reg[`RAMWIDTH-1:0] leftWriteData1Reg0;
+reg[`RAMWIDTH-1:0] leftWriteData1Reg1;
+reg[`RAMSIZEWIDTH-1:0] leftWriteAddr0Reg0;
+reg[`RAMSIZEWIDTH-1:0] leftWriteAddr0Reg1;
+reg[`RAMSIZEWIDTH-1:0] leftReadAddr0Reg0;
+reg[`RAMSIZEWIDTH-1:0] leftReadAddr0Reg1;
+reg[`RAMSIZEWIDTH-1:0] leftWriteAddr1Reg0;
+reg[`RAMSIZEWIDTH-1:0] leftWriteAddr1Reg1;
+reg[`RAMSIZEWIDTH-1:0] leftReadAddr1Reg0;
+reg[`RAMSIZEWIDTH-1:0] leftReadAddr1Reg1;
+reg[`RAMNUMBYTES-1:0] leftWriteByteEn0Reg0;
+reg[`RAMNUMBYTES-1:0] leftWriteByteEn0Reg1;
+reg[`RAMNUMBYTES-1:0] leftWriteByteEn1Reg0;
+reg[`RAMNUMBYTES-1:0] leftWriteByteEn1Reg1;
+reg leftWriteEn0Reg0;
+reg leftWriteEn0Reg1;
+reg leftWriteEn1Reg0;
+reg leftWriteEn1Reg1;
+
+reg[`PRECISION-1:0] multOperand;
+reg[`PRECISION-1:0] diag;
+wire[`PRECISION-1:0] recResult;
+wire[`PRECISION-1:0] multA0;
+wire[`PRECISION-1:0] multA1;
+wire[`PRECISION-1:0] multA2;
+wire[`PRECISION-1:0] multA3;
+wire[`PRECISION-1:0] multA4;
+wire[`PRECISION-1:0] multA5;
+wire[`PRECISION-1:0] multA6;
+wire[`PRECISION-1:0] multA7;
+wire[`PRECISION-1:0] multA8;
+wire[`PRECISION-1:0] multA9;
+wire[`PRECISION-1:0] multA10;
+wire[`PRECISION-1:0] multA11;
+wire[`PRECISION-1:0] multA12;
+wire[`PRECISION-1:0] multA13;
+wire[`PRECISION-1:0] multA14;
+wire[`PRECISION-1:0] multA15;
+wire[`PRECISION-1:0] multA16;
+wire[`PRECISION-1:0] multA17;
+wire[`PRECISION-1:0] multA18;
+wire[`PRECISION-1:0] multA19;
+wire[`PRECISION-1:0] multA20;
+wire[`PRECISION-1:0] multA21;
+wire[`PRECISION-1:0] multA22;
+wire[`PRECISION-1:0] multA23;
+wire[`PRECISION-1:0] multA24;
+wire[`PRECISION-1:0] multA25;
+wire[`PRECISION-1:0] multA26;
+wire[`PRECISION-1:0] multA27;
+wire[`PRECISION-1:0] multA28;
+wire[`PRECISION-1:0] multA29;
+wire[`PRECISION-1:0] multA30;
+wire[`PRECISION-1:0] multA31;
+wire[`PRECISION-1:0] multResult0;
+wire[`PRECISION-1:0] multResult1;
+wire[`PRECISION-1:0] multResult2;
+wire[`PRECISION-1:0] multResult3;
+wire[`PRECISION-1:0] multResult4;
+wire[`PRECISION-1:0] multResult5;
+wire[`PRECISION-1:0] multResult6;
+wire[`PRECISION-1:0] multResult7;
+wire[`PRECISION-1:0] multResult8;
+wire[`PRECISION-1:0] multResult9;
+wire[`PRECISION-1:0] multResult10;
+wire[`PRECISION-1:0] multResult11;
+wire[`PRECISION-1:0] multResult12;
+wire[`PRECISION-1:0] multResult13;
+wire[`PRECISION-1:0] multResult14;
+wire[`PRECISION-1:0] multResult15;
+wire[`PRECISION-1:0] multResult16;
+wire[`PRECISION-1:0] multResult17;
+wire[`PRECISION-1:0] multResult18;
+wire[`PRECISION-1:0] multResult19;
+wire[`PRECISION-1:0] multResult20;
+wire[`PRECISION-1:0] multResult21;
+wire[`PRECISION-1:0] multResult22;
+wire[`PRECISION-1:0] multResult23;
+wire[`PRECISION-1:0] multResult24;
+wire[`PRECISION-1:0] multResult25;
+wire[`PRECISION-1:0] multResult26;
+wire[`PRECISION-1:0] multResult27;
+wire[`PRECISION-1:0] multResult28;
+wire[`PRECISION-1:0] multResult29;
+wire[`PRECISION-1:0] multResult30;
+wire[`PRECISION-1:0] multResult31;
+wire[`PRECISION-1:0] addA0;
+wire[`PRECISION-1:0] addA1;
+wire[`PRECISION-1:0] addA2;
+wire[`PRECISION-1:0] addA3;
+wire[`PRECISION-1:0] addA4;
+wire[`PRECISION-1:0] addA5;
+wire[`PRECISION-1:0] addA6;
+wire[`PRECISION-1:0] addA7;
+wire[`PRECISION-1:0] addA8;
+wire[`PRECISION-1:0] addA9;
+wire[`PRECISION-1:0] addA10;
+wire[`PRECISION-1:0] addA11;
+wire[`PRECISION-1:0] addA12;
+wire[`PRECISION-1:0] addA13;
+wire[`PRECISION-1:0] addA14;
+wire[`PRECISION-1:0] addA15;
+wire[`PRECISION-1:0] addA16;
+wire[`PRECISION-1:0] addA17;
+wire[`PRECISION-1:0] addA18;
+wire[`PRECISION-1:0] addA19;
+wire[`PRECISION-1:0] addA20;
+wire[`PRECISION-1:0] addA21;
+wire[`PRECISION-1:0] addA22;
+wire[`PRECISION-1:0] addA23;
+wire[`PRECISION-1:0] addA24;
+wire[`PRECISION-1:0] addA25;
+wire[`PRECISION-1:0] addA26;
+wire[`PRECISION-1:0] addA27;
+wire[`PRECISION-1:0] addA28;
+wire[`PRECISION-1:0] addA29;
+wire[`PRECISION-1:0] addA30;
+wire[`PRECISION-1:0] addA31;
+wire[`PRECISION-1:0] addResult0;
+wire[`PRECISION-1:0] addResult1;
+wire[`PRECISION-1:0] addResult2;
+wire[`PRECISION-1:0] addResult3;
+wire[`PRECISION-1:0] addResult4;
+wire[`PRECISION-1:0] addResult5;
+wire[`PRECISION-1:0] addResult6;
+wire[`PRECISION-1:0] addResult7;
+wire[`PRECISION-1:0] addResult8;
+wire[`PRECISION-1:0] addResult9;
+wire[`PRECISION-1:0] addResult10;
+wire[`PRECISION-1:0] addResult11;
+wire[`PRECISION-1:0] addResult12;
+wire[`PRECISION-1:0] addResult13;
+wire[`PRECISION-1:0] addResult14;
+wire[`PRECISION-1:0] addResult15;
+wire[`PRECISION-1:0] addResult16;
+wire[`PRECISION-1:0] addResult17;
+wire[`PRECISION-1:0] addResult18;
+wire[`PRECISION-1:0] addResult19;
+wire[`PRECISION-1:0] addResult20;
+wire[`PRECISION-1:0] addResult21;
+wire[`PRECISION-1:0] addResult22;
+wire[`PRECISION-1:0] addResult23;
+wire[`PRECISION-1:0] addResult24;
+wire[`PRECISION-1:0] addResult25;
+wire[`PRECISION-1:0] addResult26;
+wire[`PRECISION-1:0] addResult27;
+wire[`PRECISION-1:0] addResult28;
+wire[`PRECISION-1:0] addResult29;
+wire[`PRECISION-1:0] addResult30;
+wire[`PRECISION-1:0] addResult31;
+wire[`RAMWIDTH-1:0] leftReadData0, leftReadData1, leftWriteData0, leftWriteData1;
+wire[`RAMSIZEWIDTH-1:0] leftWriteAddr0, leftWriteAddr1, leftReadAddr0, leftReadAddr1;
+wire[`RAMNUMBYTES-1:0] leftWriteByteEn0, leftWriteByteEn1;
+wire leftWriteEn0, leftWriteEn1;
+wire[`RAMWIDTH-1:0] leftReadDataLU, leftWriteDataLU, leftWriteDataMem;
+wire[`RAMSIZEWIDTH-1:0] leftWriteAddrLU, leftWriteAddrMem, leftReadAddrLU;
+wire[`RAMNUMBYTES-1:0] leftWriteByteEnLU, leftWriteByteEnMem;
+wire leftWriteEnLU, leftWriteEnMem;
+
+wire[`PRECISION-1:0] topWriteData;
+reg[`PRECISION-1:0] topWriteDataLU;
+wire[`PRECISION-1:0] topReadData, topReadDataLU;
+wire[`TOPSIZEWIDTH-1:0] topWriteAddr, topWriteAddrLU, topReadAddr, topReadAddrLU;
+wire topWriteEn, topWriteEnLU;
+
+reg[`PRECISION-1:0] topReadDataReg0;
+reg[`PRECISION-1:0] topWriteDataReg0;
+reg[`PRECISION-1:0] topWriteDataReg1;
+reg[`PRECISION-1:0] topWriteDataReg2;
+reg[`TOPSIZEWIDTH-1:0] topWriteAddrReg0;
+reg[`TOPSIZEWIDTH-1:0] topWriteAddrReg1;
+reg[`TOPSIZEWIDTH-1:0] topWriteAddrReg2;
+reg[`TOPSIZEWIDTH-1:0] topReadAddrReg0;
+reg[`TOPSIZEWIDTH-1:0] topReadAddrReg1;
+reg[`TOPSIZEWIDTH-1:0] topReadAddrReg2;
+reg topWriteEnReg0;
+reg topWriteEnReg1;
+reg topWriteEnReg2;
+wire[`RAMWIDTH-1:0] rcWriteData;
+wire leftWriteSel, curWriteSel, topSourceSel;
+wire diagEn;
+wire[`PEWIDTH-1:0] topWriteSel;
+
+wire MOSel;
+wire MOEn;
+
+// control block
+LUControl conBlock (clk, start, m, n, loop, mode, done, 
+                    curReadAddrLU, curWriteAddrLU, curWriteByteEnLU, curWriteEnLU, curWriteSel,
+                    leftReadAddrLU, leftWriteAddrLU, leftWriteByteEnLU, leftWriteEnLU,  leftWriteSel,
+                    topReadAddrLU, topWriteAddrLU, topWriteEnLU, topWriteSel, topSourceSel, diagEn, MOSel, MOEn);
+
+// fp_div unit
+//floating point divider here
+fpu_div rec(.clock(clk), .n(32'h3F800000), .d(diag), .div(recResult));
+// on-chip memory blocks that store the matrix to be LU factorized
+// store current blocks data
+ram currentBlock0 (curWriteByteEn0, clk, curWriteData0, curReadAddr0, curWriteAddr0, curWriteEn0, curReadData0 );
+ram1 currentBlock1 (curWriteByteEn1, clk, curWriteData1, curReadAddr1, curWriteAddr1, curWriteEn1, curReadData1 );
+// store left blocks data
+ram2 leftBlock0(leftWriteByteEn0, clk, leftWriteData0, leftReadAddr0, leftWriteAddr0, leftWriteEn0, leftReadData0 );
+
+ram3 leftBlock1(leftWriteByteEn1, clk, leftWriteData1, leftReadAddr1, leftWriteAddr1, leftWriteEn1, leftReadData1 );
+
+// store top block data
+top_ram topBlock(clk, topWriteData, topReadAddr, topWriteAddr, topWriteEn, topReadDataLU );
+
+// processing elements that does the main computation of LU factorization
+mult_add PE0 (clk, multA0, multOperand, addA0, multResult0, addResult0);
+mult_add PE1 (clk, multA1, multOperand, addA1, multResult1, addResult1);
+mult_add PE2 (clk, multA2, multOperand, addA2, multResult2, addResult2);
+mult_add PE3 (clk, multA3, multOperand, addA3, multResult3, addResult3);
+mult_add PE4 (clk, multA4, multOperand, addA4, multResult4, addResult4);
+mult_add PE5 (clk, multA5, multOperand, addA5, multResult5, addResult5);
+mult_add PE6 (clk, multA6, multOperand, addA6, multResult6, addResult6);
+mult_add PE7 (clk, multA7, multOperand, addA7, multResult7, addResult7);
+mult_add PE8 (clk, multA8, multOperand, addA8, multResult8, addResult8);
+mult_add PE9 (clk, multA9, multOperand, addA9, multResult9, addResult9);
+mult_add PE10 (clk, multA10, multOperand, addA10, multResult10, addResult10);
+mult_add PE11 (clk, multA11, multOperand, addA11, multResult11, addResult11);
+mult_add PE12 (clk, multA12, multOperand, addA12, multResult12, addResult12);
+mult_add PE13 (clk, multA13, multOperand, addA13, multResult13, addResult13);
+mult_add PE14 (clk, multA14, multOperand, addA14, multResult14, addResult14);
+mult_add PE15 (clk, multA15, multOperand, addA15, multResult15, addResult15);
+mult_add PE16 (clk, multA16, multOperand, addA16, multResult16, addResult16);
+mult_add PE17 (clk, multA17, multOperand, addA17, multResult17, addResult17);
+mult_add PE18 (clk, multA18, multOperand, addA18, multResult18, addResult18);
+mult_add PE19 (clk, multA19, multOperand, addA19, multResult19, addResult19);
+mult_add PE20 (clk, multA20, multOperand, addA20, multResult20, addResult20);
+mult_add PE21 (clk, multA21, multOperand, addA21, multResult21, addResult21);
+mult_add PE22 (clk, multA22, multOperand, addA22, multResult22, addResult22);
+mult_add PE23 (clk, multA23, multOperand, addA23, multResult23, addResult23);
+mult_add PE24 (clk, multA24, multOperand, addA24, multResult24, addResult24);
+mult_add PE25 (clk, multA25, multOperand, addA25, multResult25, addResult25);
+mult_add PE26 (clk, multA26, multOperand, addA26, multResult26, addResult26);
+mult_add PE27 (clk, multA27, multOperand, addA27, multResult27, addResult27);
+mult_add PE28 (clk, multA28, multOperand, addA28, multResult28, addResult28);
+mult_add PE29 (clk, multA29, multOperand, addA29, multResult29, addResult29);
+mult_add PE30 (clk, multA30, multOperand, addA30, multResult30, addResult30);
+mult_add PE31 (clk, multA31, multOperand, addA31, multResult31, addResult31);
+
+// connect to ports of the left blocks
+assign leftWriteDataLU = (leftWriteSel == 1'b0) ? curReadDataLU : rcWriteData;
+always @ (posedge clk)
+begin
+	if(leftMemSel == 1'b0)
+	begin
+		leftWriteData0Reg0 <= leftWriteDataMem;
+		leftWriteAddr0Reg0 <= leftWriteAddrMem;
+		leftWriteByteEn0Reg0 <= leftWriteByteEnMem;
+		leftWriteEn0Reg0 <= leftWriteEnMem;
+		leftWriteData1Reg0 <= leftWriteDataLU;
+		leftWriteAddr1Reg0 <= leftWriteAddrLU;
+		leftWriteByteEn1Reg0 <= leftWriteByteEnLU;
+		leftWriteEn1Reg0 <= leftWriteEnLU;
+	end
+	else
+	begin
+		leftWriteData0Reg0 <= leftWriteDataLU;
+		leftWriteAddr0Reg0 <= leftWriteAddrLU;
+		leftWriteByteEn0Reg0 <= leftWriteByteEnLU;
+		leftWriteEn0Reg0 <= leftWriteEnLU;
+		leftWriteData1Reg0 <= leftWriteDataMem;
+		leftWriteAddr1Reg0 <= leftWriteAddrMem;
+		leftWriteByteEn1Reg0 <= leftWriteByteEnMem;
+		leftWriteEn1Reg0 <= leftWriteEnMem;
+	end
+	leftReadAddr0Reg0 <= leftReadAddrLU;
+	leftReadAddr1Reg0 <= leftReadAddrLU;
+	leftWriteData0Reg1 <= leftWriteData0Reg0;
+	leftWriteAddr0Reg1 <= leftWriteAddr0Reg0;
+	leftReadAddr0Reg1 <= leftReadAddr0Reg0;
+	leftWriteByteEn0Reg1 <= leftWriteByteEn0Reg0;
+	leftWriteEn0Reg1 <= leftWriteEn0Reg0;
+	leftWriteData1Reg1 <= leftWriteData1Reg0;
+	leftWriteAddr1Reg1 <= leftWriteAddr1Reg0;
+	leftReadAddr1Reg1 <= leftReadAddr1Reg0;
+	leftWriteByteEn1Reg1 <= leftWriteByteEn1Reg0;
+	leftWriteEn1Reg1 <= leftWriteEn1Reg0;
+end
+assign leftWriteData0 = leftWriteData0Reg1;
+assign leftWriteAddr0 = leftWriteAddr0Reg1;
+assign leftReadAddr0 = leftReadAddr0Reg1;
+assign leftWriteByteEn0 = leftWriteByteEn0Reg1;
+assign leftWriteEn0 = leftWriteEn0Reg1;
+assign leftWriteData1 = leftWriteData1Reg1;
+assign leftWriteAddr1 = leftWriteAddr1Reg1;
+assign leftReadAddr1 = leftReadAddr1Reg1;
+assign leftWriteByteEn1 = leftWriteByteEn1Reg1;
+assign leftWriteEn1 = leftWriteEn1Reg1;
+
+always @ (posedge clk)
+begin
+		leftReadData0Reg0 <= leftReadData0;
+		leftReadData1Reg0 <= leftReadData1;
+end
+assign leftReadDataLU = (leftMemSel == 1'b0) ? leftReadData1Reg0 : leftReadData0Reg0;
+// data feed to fp div unit
+always @ (posedge clk)
+begin
+	if (diagEn == 1'b1)
+	begin
+			diag <= topReadData;
+	end
+end
+// one of the inputs to the PE
+always @ (posedge clk)
+begin
+	if (start == 1'b1)
+		multOperand <= 0;
+	else if (MOEn == 1'b1)
+	begin
+		if (MOSel == 1'b0)
+			multOperand <= recResult;
+		else
+			multOperand <= topReadData;
+	end
+end
+
+// connections to top block memory ports
+always @ (topSourceSel or topWriteSel or curReadDataLU or addResult31 or addResult30 or addResult29 or addResult28 or addResult27 or addResult26 or addResult25 or addResult24 or addResult23 or addResult22 or addResult21 or addResult20 or addResult19 or addResult18 or addResult17 or addResult16 or addResult15 or addResult14 or addResult13 or addResult12 or addResult11 or addResult10 or addResult9 or addResult8 or addResult7 or addResult6 or addResult5 or addResult4 or addResult3 or addResult2 or addResult1 or addResult0)
+begin
+	if (topSourceSel == 1'b0)
+		case (topWriteSel)
+		0:
+			topWriteDataLU = curReadDataLU[1023:992];
+		1:
+			topWriteDataLU = curReadDataLU[991:960];
+		2:
+			topWriteDataLU = curReadDataLU[959:928];
+		3:
+			topWriteDataLU = curReadDataLU[927:896];
+		4:
+			topWriteDataLU = curReadDataLU[895:864];
+		5:
+			topWriteDataLU = curReadDataLU[863:832];
+		6:
+			topWriteDataLU = curReadDataLU[831:800];
+		7:
+			topWriteDataLU = curReadDataLU[799:768];
+		8:
+			topWriteDataLU = curReadDataLU[767:736];
+		9:
+			topWriteDataLU = curReadDataLU[735:704];
+		10:
+			topWriteDataLU = curReadDataLU[703:672];
+		11:
+			topWriteDataLU = curReadDataLU[671:640];
+		12:
+			topWriteDataLU = curReadDataLU[639:608];
+		13:
+			topWriteDataLU = curReadDataLU[607:576];
+		14:
+			topWriteDataLU = curReadDataLU[575:544];
+		15:
+			topWriteDataLU = curReadDataLU[543:512];
+		16:
+			topWriteDataLU = curReadDataLU[511:480];
+		17:
+			topWriteDataLU = curReadDataLU[479:448];
+		18:
+			topWriteDataLU = curReadDataLU[447:416];
+		19:
+			topWriteDataLU = curReadDataLU[415:384];
+		20:
+			topWriteDataLU = curReadDataLU[383:352];
+		21:
+			topWriteDataLU = curReadDataLU[351:320];
+		22:
+			topWriteDataLU = curReadDataLU[319:288];
+		23:
+			topWriteDataLU = curReadDataLU[287:256];
+		24:
+			topWriteDataLU = curReadDataLU[255:224];
+		25:
+			topWriteDataLU = curReadDataLU[223:192];
+		26:
+			topWriteDataLU = curReadDataLU[191:160];
+		27:
+			topWriteDataLU = curReadDataLU[159:128];
+		28:
+			topWriteDataLU = curReadDataLU[127:96];
+		29:
+			topWriteDataLU = curReadDataLU[95:64];
+		30:
+			topWriteDataLU = curReadDataLU[63:32];
+		31:
+			topWriteDataLU = curReadDataLU[31:0];
+		default:
+			topWriteDataLU = curReadDataLU[`PRECISION-1:0];
+		endcase
+	else
+		case (topWriteSel)
+		0:
+			topWriteDataLU = addResult31;
+		1:
+			topWriteDataLU = addResult30;
+		2:
+			topWriteDataLU = addResult29;
+		3:
+			topWriteDataLU = addResult28;
+		4:
+			topWriteDataLU = addResult27;
+		5:
+			topWriteDataLU = addResult26;
+		6:
+			topWriteDataLU = addResult25;
+		7:
+			topWriteDataLU = addResult24;
+		8:
+			topWriteDataLU = addResult23;
+		9:
+			topWriteDataLU = addResult22;
+		10:
+			topWriteDataLU = addResult21;
+		11:
+			topWriteDataLU = addResult20;
+		12:
+			topWriteDataLU = addResult19;
+		13:
+			topWriteDataLU = addResult18;
+		14:
+			topWriteDataLU = addResult17;
+		15:
+			topWriteDataLU = addResult16;
+		16:
+			topWriteDataLU = addResult15;
+		17:
+			topWriteDataLU = addResult14;
+		18:
+			topWriteDataLU = addResult13;
+		19:
+			topWriteDataLU = addResult12;
+		20:
+			topWriteDataLU = addResult11;
+		21:
+			topWriteDataLU = addResult10;
+		22:
+			topWriteDataLU = addResult9;
+		23:
+			topWriteDataLU = addResult8;
+		24:
+			topWriteDataLU = addResult7;
+		25:
+			topWriteDataLU = addResult6;
+		26:
+			topWriteDataLU = addResult5;
+		27:
+			topWriteDataLU = addResult4;
+		28:
+			topWriteDataLU = addResult3;
+		29:
+			topWriteDataLU = addResult2;
+		30:
+			topWriteDataLU = addResult1;
+		31:
+			topWriteDataLU = addResult0;
+		default:
+			topWriteDataLU = addResult0;
+		endcase
+end
+
+always @ (posedge clk)
+begin
+	topWriteDataReg0 <= topWriteDataLU;
+	topReadAddrReg0 <= topReadAddrLU;
+	topWriteAddrReg0 <= topWriteAddrLU;
+	topWriteEnReg0 <= topWriteEnLU;
+	topWriteDataReg1 <= topWriteDataReg0;
+	topReadAddrReg1 <= topReadAddrReg0;
+	topWriteAddrReg1 <= topWriteAddrReg0;
+	topWriteEnReg1 <= topWriteEnReg0;
+	topWriteDataReg2 <= topWriteDataReg1;
+	topReadAddrReg2 <= topReadAddrReg1;
+	topWriteAddrReg2 <= topWriteAddrReg1;
+	topWriteEnReg2 <= topWriteEnReg1;
+end
+assign topWriteData = topWriteDataReg2;
+assign topReadAddr = topReadAddrReg2;
+assign topWriteAddr = topWriteAddrReg2;
+assign topWriteEn = topWriteEnReg2;
+always @ (posedge clk)
+begin
+	topReadDataReg0 <= topReadDataLU;
+end
+assign topReadData = topReadDataReg0;
+
+// connections to processing element
+assign multA0 = leftReadDataLU[31:0];
+assign multA1 = leftReadDataLU[63:32];
+assign multA2 = leftReadDataLU[95:64];
+assign multA3 = leftReadDataLU[127:96];
+assign multA4 = leftReadDataLU[159:128];
+assign multA5 = leftReadDataLU[191:160];
+assign multA6 = leftReadDataLU[223:192];
+assign multA7 = leftReadDataLU[255:224];
+assign multA8 = leftReadDataLU[287:256];
+assign multA9 = leftReadDataLU[319:288];
+assign multA10 = leftReadDataLU[351:320];
+assign multA11 = leftReadDataLU[383:352];
+assign multA12 = leftReadDataLU[415:384];
+assign multA13 = leftReadDataLU[447:416];
+assign multA14 = leftReadDataLU[479:448];
+assign multA15 = leftReadDataLU[511:480];
+assign multA16 = leftReadDataLU[543:512];
+assign multA17 = leftReadDataLU[575:544];
+assign multA18 = leftReadDataLU[607:576];
+assign multA19 = leftReadDataLU[639:608];
+assign multA20 = leftReadDataLU[671:640];
+assign multA21 = leftReadDataLU[703:672];
+assign multA22 = leftReadDataLU[735:704];
+assign multA23 = leftReadDataLU[767:736];
+assign multA24 = leftReadDataLU[799:768];
+assign multA25 = leftReadDataLU[831:800];
+assign multA26 = leftReadDataLU[863:832];
+assign multA27 = leftReadDataLU[895:864];
+assign multA28 = leftReadDataLU[927:896];
+assign multA29 = leftReadDataLU[959:928];
+assign multA30 = leftReadDataLU[991:960];
+assign multA31 = leftReadDataLU[1023:992];
+
+assign addA0 = curReadDataLU[31:0];
+assign addA1 = curReadDataLU[63:32];
+assign addA2 = curReadDataLU[95:64];
+assign addA3 = curReadDataLU[127:96];
+assign addA4 = curReadDataLU[159:128];
+assign addA5 = curReadDataLU[191:160];
+assign addA6 = curReadDataLU[223:192];
+assign addA7 = curReadDataLU[255:224];
+assign addA8 = curReadDataLU[287:256];
+assign addA9 = curReadDataLU[319:288];
+assign addA10 = curReadDataLU[351:320];
+assign addA11 = curReadDataLU[383:352];
+assign addA12 = curReadDataLU[415:384];
+assign addA13 = curReadDataLU[447:416];
+assign addA14 = curReadDataLU[479:448];
+assign addA15 = curReadDataLU[511:480];
+assign addA16 = curReadDataLU[543:512];
+assign addA17 = curReadDataLU[575:544];
+assign addA18 = curReadDataLU[607:576];
+assign addA19 = curReadDataLU[639:608];
+assign addA20 = curReadDataLU[671:640];
+assign addA21 = curReadDataLU[703:672];
+assign addA22 = curReadDataLU[735:704];
+assign addA23 = curReadDataLU[767:736];
+assign addA24 = curReadDataLU[799:768];
+assign addA25 = curReadDataLU[831:800];
+assign addA26 = curReadDataLU[863:832];
+assign addA27 = curReadDataLU[895:864];
+assign addA28 = curReadDataLU[927:896];
+assign addA29 = curReadDataLU[959:928];
+assign addA30 = curReadDataLU[991:960];
+assign addA31 = curReadDataLU[1023:992];
+
+// connections to ports of the current blocks
+assign rcWriteData[31:0] = (curWriteSel == 0) ? multResult0 : addResult0;
+assign rcWriteData[63:32] = (curWriteSel == 0) ? multResult1 : addResult1;
+assign rcWriteData[95:64] = (curWriteSel == 0) ? multResult2 : addResult2;
+assign rcWriteData[127:96] = (curWriteSel == 0) ? multResult3 : addResult3;
+assign rcWriteData[159:128] = (curWriteSel == 0) ? multResult4 : addResult4;
+assign rcWriteData[191:160] = (curWriteSel == 0) ? multResult5 : addResult5;
+assign rcWriteData[223:192] = (curWriteSel == 0) ? multResult6 : addResult6;
+assign rcWriteData[255:224] = (curWriteSel == 0) ? multResult7 : addResult7;
+assign rcWriteData[287:256] = (curWriteSel == 0) ? multResult8 : addResult8;
+assign rcWriteData[319:288] = (curWriteSel == 0) ? multResult9 : addResult9;
+assign rcWriteData[351:320] = (curWriteSel == 0) ? multResult10 : addResult10;
+assign rcWriteData[383:352] = (curWriteSel == 0) ? multResult11 : addResult11;
+assign rcWriteData[415:384] = (curWriteSel == 0) ? multResult12 : addResult12;
+assign rcWriteData[447:416] = (curWriteSel == 0) ? multResult13 : addResult13;
+assign rcWriteData[479:448] = (curWriteSel == 0) ? multResult14 : addResult14;
+assign rcWriteData[511:480] = (curWriteSel == 0) ? multResult15 : addResult15;
+assign rcWriteData[543:512] = (curWriteSel == 0) ? multResult16 : addResult16;
+assign rcWriteData[575:544] = (curWriteSel == 0) ? multResult17 : addResult17;
+assign rcWriteData[607:576] = (curWriteSel == 0) ? multResult18 : addResult18;
+assign rcWriteData[639:608] = (curWriteSel == 0) ? multResult19 : addResult19;
+assign rcWriteData[671:640] = (curWriteSel == 0) ? multResult20 : addResult20;
+assign rcWriteData[703:672] = (curWriteSel == 0) ? multResult21 : addResult21;
+assign rcWriteData[735:704] = (curWriteSel == 0) ? multResult22 : addResult22;
+assign rcWriteData[767:736] = (curWriteSel == 0) ? multResult23 : addResult23;
+assign rcWriteData[799:768] = (curWriteSel == 0) ? multResult24 : addResult24;
+assign rcWriteData[831:800] = (curWriteSel == 0) ? multResult25 : addResult25;
+assign rcWriteData[863:832] = (curWriteSel == 0) ? multResult26 : addResult26;
+assign rcWriteData[895:864] = (curWriteSel == 0) ? multResult27 : addResult27;
+assign rcWriteData[927:896] = (curWriteSel == 0) ? multResult28 : addResult28;
+assign rcWriteData[959:928] = (curWriteSel == 0) ? multResult29 : addResult29;
+assign rcWriteData[991:960] = (curWriteSel == 0) ? multResult30 : addResult30;
+assign rcWriteData[1023:992] = (curWriteSel == 0) ? multResult31 : addResult31;
+assign curWriteDataLU = rcWriteData;
+
+always @ (posedge clk)
+begin
+	if(curMemSel == 1'b0)
+	begin
+		curWriteData0Reg0 <= curWriteDataMem;
+		curWriteAddr0Reg0 <= curWriteAddrMem;
+		curReadAddr0Reg0 <= curReadAddrMem;
+		curWriteByteEn0Reg0 <= curWriteByteEnMem;
+		curWriteEn0Reg0 <= curWriteEnMem;
+		curWriteData1Reg0 <= curWriteDataLU;
+		curWriteAddr1Reg0 <= curWriteAddrLU;
+		curReadAddr1Reg0 <= curReadAddrLU;
+		curWriteByteEn1Reg0 <= curWriteByteEnLU;
+		curWriteEn1Reg0 <= curWriteEnLU;
+	end
+	else
+	begin
+		curWriteData0Reg0 <= curWriteDataLU;
+		curWriteAddr0Reg0 <= curWriteAddrLU;
+		curReadAddr0Reg0 <= curReadAddrLU;
+		curWriteByteEn0Reg0 <= curWriteByteEnLU;
+		curWriteEn0Reg0 <= curWriteEnLU;
+		curWriteData1Reg0 <= curWriteDataMem;
+		curWriteAddr1Reg0 <= curWriteAddrMem;
+		curReadAddr1Reg0 <= curReadAddrMem;
+		curWriteByteEn1Reg0 <= curWriteByteEnMem;
+		curWriteEn1Reg0 <= curWriteEnMem;
+	end
+	curWriteData0Reg1 <= curWriteData0Reg0;
+	curWriteAddr0Reg1 <= curWriteAddr0Reg0;
+	curReadAddr0Reg1 <= curReadAddr0Reg0;
+	curWriteByteEn0Reg1 <= curWriteByteEn0Reg0;
+	curWriteEn0Reg1 <= curWriteEn0Reg0;
+	curWriteData1Reg1 <= curWriteData1Reg0;
+	curWriteAddr1Reg1 <= curWriteAddr1Reg0;
+	curReadAddr1Reg1 <= curReadAddr1Reg0;
+	curWriteByteEn1Reg1 <= curWriteByteEn1Reg0;
+	curWriteEn1Reg1 <= curWriteEn1Reg0;
+end
+assign curWriteData0 = curWriteData0Reg1;
+assign curWriteAddr0 = curWriteAddr0Reg1;
+assign curReadAddr0 = curReadAddr0Reg1;
+assign curWriteByteEn0 = curWriteByteEn0Reg1;
+assign curWriteEn0 = curWriteEn0Reg1;
+assign curWriteData1 = curWriteData1Reg1;
+assign curWriteAddr1 = curWriteAddr1Reg1;
+assign curReadAddr1 = curReadAddr1Reg1;
+assign curWriteByteEn1 = curWriteByteEn1Reg1;
+assign curWriteEn1 = curWriteEn1Reg1;
+
+always @ (posedge clk)
+begin
+		curReadData0Reg0 <= curReadData0;
+		curReadData1Reg0 <= curReadData1;
+end
+assign curReadDataMem = (curMemSel == 0) ? curReadData0Reg0 : curReadData1Reg0;
+assign curReadDataLU = (curMemSel == 0) ? curReadData1Reg0 : curReadData0Reg0;
+endmodule
+
+module LUControl (clk, start_in, m_in, n_in, loop_in, mode_in, done,
+					curReadAddr, curWriteAddr, curWriteByteEn, curWriteEn, curWriteSel, 
+					leftReadAddr, leftWriteAddr, leftWriteByteEn, leftWriteEn,  leftWriteSel,
+					topReadAddr, topWriteAddr, topWriteEn, topWriteSel, topSourceSel, diagEn, MOSel, MOEn);
+
+input clk, start_in;
+input[7-1:0] m_in, n_in, loop_in;
+input[1:0] mode_in;
+output done;
+
+output[128-1:0] curWriteByteEn;
+output[7-1:0] curWriteAddr, curReadAddr;
+output curWriteEn;
+
+output[128-1:0] leftWriteByteEn;
+output[7-1:0] leftWriteAddr, leftReadAddr;
+output leftWriteEn;
+
+output[12-1:0] topWriteAddr, topReadAddr;
+output topWriteEn;
+
+output leftWriteSel, curWriteSel, topSourceSel, diagEn;
+output[5-1:0] topWriteSel;
+
+output MOSel;
+output MOEn;
+
+reg start;
+reg[15:0]startDelay;
+reg[7-1:0] m, n, stop, stop2, loop;
+reg[1:0] mode;
+reg[3:0] nextState, currentState;
+reg[1:0] nextRowState, currentRowState;
+reg startFetchRow, doneFetchRow, loadRow, writeRow;
+reg updateCounter;
+
+reg[7-1:0] i1, j;
+reg[12-1:0] nextTopIdx, nextTopIdx2, curTopIdx, nextTopIdxCounter;
+reg[2-1:0] topIdx, topIdxCounter, mdivk;
+reg[7-1:0] diagIdx, leftIdx, msIdx;
+reg[5-1:0] imodk, i1modk;
+reg[7-1:0] diagIdxCounter, leftIdxCounter, msIdxCounter, readRowCounter, topWriteCounter;
+reg[128-1:0] byteEn, i1modkByteEn;
+
+reg done;
+
+reg[128-1:0] curWriteByteEn;
+reg[7-1:0] curWriteAddr, curReadAddr;
+reg curWriteEn;
+
+reg[128-1:0] leftWriteByteEn;
+reg[7-1:0] leftWriteAddr, leftReadAddr;
+reg leftWriteEn;
+
+reg[12-1:0] topWriteAddr, topReadAddr;
+reg topWriteEn;
+
+reg leftWriteSel, curWriteSel, topSourceSel, diagEn;
+reg[5-1:0] topWriteSel;
+
+reg MOSel;
+reg MOEn;
+
+reg[7-1:0] counter;
+reg[6-1:0] divCounter;
+
+reg[128-1:0]writeByteEnDelay0; 
+reg[128-1:0]writeByteEnDelay1; 
+reg[128-1:0]writeByteEnDelay2; 
+reg[128-1:0]writeByteEnDelay3; 
+reg[128-1:0]writeByteEnDelay4; 
+reg[128-1:0]writeByteEnDelay5; 
+reg[128-1:0]writeByteEnDelay6; 
+reg[128-1:0]writeByteEnDelay7; 
+reg[128-1:0]writeByteEnDelay8; 
+reg[128-1:0]writeByteEnDelay9; 
+reg[128-1:0]writeByteEnDelay10; 
+reg[128-1:0]writeByteEnDelay11; 
+reg[128-1:0]writeByteEnDelay12; 
+reg[128-1:0]writeByteEnDelay13; 
+reg[128-1:0]writeByteEnDelay14; 
+reg[128-1:0]writeByteEnDelay15; 
+reg[128-1:0]writeByteEnDelay16; 
+reg[128-1:0]writeByteEnDelay17; 
+reg[128-1:0]writeByteEnDelay18; 
+reg[128-1:0]writeByteEnDelay19; 
+reg[128-1:0]writeByteEnDelay20; 
+reg[128-1:0]writeByteEnDelay21; 
+reg[128-1:0]writeByteEnDelay22; 
+reg[128-1:0]writeByteEnDelay23; 
+reg[128-1:0]writeByteEnDelay24; 
+reg[128-1:0]writeByteEnDelay25; 
+reg[128-1:0]writeByteEnDelay26; 
+reg[128-1:0]writeByteEnDelay27; 
+reg[128-1:0]writeByteEnDelay28; 
+reg[128-1:0]writeByteEnDelay29; 
+reg[128-1:0]writeByteEnDelay30; 
+reg[128-1:0]writeByteEnDelay31; 
+
+reg[7-1:0]curWriteAddrDelay0; 
+reg[7-1:0]curWriteAddrDelay1; 
+reg[7-1:0]curWriteAddrDelay2; 
+reg[7-1:0]curWriteAddrDelay3; 
+reg[7-1:0]curWriteAddrDelay4; 
+reg[7-1:0]curWriteAddrDelay5; 
+reg[7-1:0]curWriteAddrDelay6; 
+reg[7-1:0]curWriteAddrDelay7; 
+reg[7-1:0]curWriteAddrDelay8; 
+reg[7-1:0]curWriteAddrDelay9; 
+reg[7-1:0]curWriteAddrDelay10; 
+reg[7-1:0]curWriteAddrDelay11; 
+reg[7-1:0]curWriteAddrDelay12; 
+reg[7-1:0]curWriteAddrDelay13; 
+reg[7-1:0]curWriteAddrDelay14; 
+reg[7-1:0]curWriteAddrDelay15; 
+reg[7-1:0]curWriteAddrDelay16; 
+reg[7-1:0]curWriteAddrDelay17; 
+reg[7-1:0]curWriteAddrDelay18; 
+reg[7-1:0]curWriteAddrDelay19; 
+reg[7-1:0]curWriteAddrDelay20; 
+reg[7-1:0]curWriteAddrDelay21; 
+reg[7-1:0]curWriteAddrDelay22; 
+reg[7-1:0]curWriteAddrDelay23; 
+reg[7-1:0]curWriteAddrDelay24; 
+reg[7-1:0]curWriteAddrDelay25; 
+reg[7-1:0]curWriteAddrDelay26; 
+reg[7-1:0]curWriteAddrDelay27; 
+reg[7-1:0]curWriteAddrDelay28; 
+reg[7-1:0]curWriteAddrDelay29; 
+reg[7-1:0]curWriteAddrDelay30; 
+reg[7-1:0]curWriteAddrDelay31; 
+
+reg[7-1:0]curReadAddrDelay0; 
+reg[7-1:0]curReadAddrDelay1; 
+reg[7-1:0]curReadAddrDelay2; 
+reg[7-1:0]curReadAddrDelay3; 
+reg[7-1:0]curReadAddrDelay4; 
+reg[7-1:0]curReadAddrDelay5; 
+reg[7-1:0]curReadAddrDelay6; 
+reg[7-1:0]curReadAddrDelay7; 
+reg[7-1:0]curReadAddrDelay8; 
+reg[7-1:0]curReadAddrDelay9; 
+reg[7-1:0]curReadAddrDelay10; 
+reg[7-1:0]curReadAddrDelay11; 
+
+reg[32-1:0]leftWriteEnDelay; 
+reg[32-1:0]curWriteEnDelay; 
+reg[5-1:0]leftWriteSelDelay; 
+reg[16-1:0]curWriteSelDelay; 
+reg[7-1:0]leftReadAddrDelay0; 
+reg[12-1:0]topWriteAddrDelay0; 
+reg[12-1:0]topWriteAddrDelay1; 
+reg[12-1:0]topWriteAddrDelay2; 
+reg[12-1:0]topWriteAddrDelay3; 
+reg[12-1:0]topWriteAddrDelay4; 
+reg[12-1:0]topWriteAddrDelay5; 
+reg[12-1:0]topWriteAddrDelay6; 
+reg[12-1:0]topWriteAddrDelay7; 
+reg[12-1:0]topWriteAddrDelay8; 
+reg[12-1:0]topWriteAddrDelay9; 
+reg[12-1:0]topWriteAddrDelay10; 
+reg[12-1:0]topWriteAddrDelay11; 
+reg[12-1:0]topWriteAddrDelay12; 
+reg[12-1:0]topWriteAddrDelay13; 
+reg[12-1:0]topWriteAddrDelay14; 
+reg[12-1:0]topWriteAddrDelay15; 
+reg[12-1:0]topWriteAddrDelay16; 
+reg[12-1:0]topWriteAddrDelay17; 
+reg[12-1:0]topWriteAddrDelay18; 
+reg[12-1:0]topWriteAddrDelay19; 
+reg[12-1:0]topWriteAddrDelay20; 
+reg[12-1:0]topWriteAddrDelay21; 
+reg[12-1:0]topWriteAddrDelay22; 
+reg[12-1:0]topWriteAddrDelay23; 
+reg[12-1:0]topWriteAddrDelay24; 
+reg[12-1:0]topWriteAddrDelay25; 
+reg[12-1:0]topWriteAddrDelay26; 
+reg[12-1:0]topWriteAddrDelay27; 
+reg[12-1:0]topWriteAddrDelay28; 
+reg[12-1:0]topWriteAddrDelay29; 
+reg[12-1:0]topWriteAddrDelay30; 
+reg[12-1:0]topWriteAddrDelay31; 
+
+reg [32-1:0]topWriteEnDelay;
+reg [5-1:0]topSourceSelDelay;
+reg[5-1:0]topWriteSelDelay0; 
+reg[5-1:0]topWriteSelDelay1; 
+reg[5-1:0]topWriteSelDelay2; 
+reg[5-1:0]topWriteSelDelay3; 
+reg[5-1:0]topWriteSelDelay4; 
+reg[5-1:0]topWriteSelDelay5; 
+reg[5-1:0]topWriteSelDelay6; 
+reg[5-1:0]topWriteSelDelay7; 
+reg[5-1:0]topWriteSelDelay8; 
+reg[5-1:0]topWriteSelDelay9; 
+reg[5-1:0]topWriteSelDelay10; 
+reg[5-1:0]topWriteSelDelay11; 
+reg[5-1:0]topWriteSelDelay12; 
+reg[5-1:0]topWriteSelDelay13; 
+reg[5-1:0]topWriteSelDelay14; 
+reg[5-1:0]topWriteSelDelay15; 
+reg[5-1:0]topWriteSelDelay16; 
+reg[5-1:0]topWriteSelDelay17; 
+reg[5-1:0]topWriteSelDelay18; 
+reg[5-1:0]topWriteSelDelay19; 
+reg[5-1:0]topWriteSelDelay20; 
+reg[5-1:0]topWriteSelDelay21; 
+reg[5-1:0]topWriteSelDelay22; 
+reg[5-1:0]topWriteSelDelay23; 
+reg[5-1:0]topWriteSelDelay24; 
+reg[5-1:0]topWriteSelDelay25; 
+reg[5-1:0]topWriteSelDelay26; 
+reg[5-1:0]topWriteSelDelay27; 
+reg[5-1:0]topWriteSelDelay28; 
+reg[5-1:0]topWriteSelDelay29; 
+reg[5-1:0]topWriteSelDelay30; 
+reg[5-1:0]topWriteSelDelay31; 
+
+reg [6-1:0]diagEnDelay;
+reg[6-1:0]MOEnDelay;
+reg [7-1:0]waitCycles;
+
+// register store m, n and mdivk value
+always @ (posedge clk)
+begin
+	if (start_in == 1'b1)
+	begin
+		n <= n_in;
+		m <= m_in;
+		loop <= loop_in;
+		mode <= mode_in;
+	end
+	if (mode[0] == 1'b0 && m == loop)
+		stop <= loop;
+	else
+		stop <= loop+1'b1;
+	stop2 <= loop;
+	startDelay[0] <= start_in;
+	startDelay[1] <= startDelay[0];
+	startDelay[2] <= startDelay[1];
+	startDelay[3] <= startDelay[2];
+	startDelay[4] <= startDelay[3];
+	startDelay[5] <= startDelay[4];
+	startDelay[6] <= startDelay[5];
+	startDelay[7] <= startDelay[6];
+	startDelay[8] <= startDelay[7];
+	startDelay[9] <= startDelay[8];
+	startDelay[10] <= startDelay[9];
+	startDelay[11] <= startDelay[10];
+	startDelay[12] <= startDelay[11];
+	startDelay[13] <= startDelay[12];
+	startDelay[14] <= startDelay[13];
+	startDelay[15] <= startDelay[14];
+	start <= startDelay[15];
+	mdivk <= (m+32-1)>>5;
+end
+
+// registers that store values that are used in FSM, dependent on i and/or j
+always @ (posedge clk)
+begin
+	if (start == 1'b1)
+		topIdx <= 2'b00; //offset1divk;
+	else if (currentState == `cINCRE_I && i1modk == 32-1 && mode[0] == 1'b0)
+		topIdx <= topIdx + 1'b1;
+		
+	if (start == 1'b1)
+		diagIdx <= 7'b0000000;
+	else if (currentState == `cSTORE_DIAG && mode == 2'b01)
+		diagIdx <= 2;	else if (currentState == `cINCRE_I)
+	begin
+		if ((imodk == 32-1 && mode == 2'b00) || (i1modk == 32-1 && mode == 2'b01))
+			diagIdx <= diagIdx + 2 + 1;
+		else
+			diagIdx <= diagIdx + 2;
+	end
+	
+	if (start == 1'b1)
+		leftIdx <= 7'b0000000;
+	else if (currentState == `cINCRE_I)
+	begin
+		if (i1modk == 32-1 && mode[0] == 1'b0)
+			leftIdx <= leftIdx + 2 + 1;
+		else
+			leftIdx <= leftIdx + 2;
+	end
+
+	if (start == 1'b1)
+		msIdx <= 7'b0000000;
+	else if (currentState == `cUPDATE_J)
+		if (mode[1] == 1'b0)
+			msIdx <= leftIdx + 2;
+		else
+			msIdx <= topIdx;
+	else if (nextRowState == `cLOAD_ROW_INC_J)
+		msIdx <= msIdx + 2;
+
+	if (start == 1'b1)
+		imodk <= 5'b00000;
+	else if (currentState == `cINCRE_I)
+	begin
+		if (imodk == 32-1)
+		imodk <= 5'b00000;
+		else
+			imodk <= imodk + 1'b1;
+	end
+	
+	if (start == 1'b1)
+		i1modk <= 5'b00001;
+	else if (currentState == `cINCRE_I)
+	begin
+		if (i1modk == 32-1)
+		i1modk <= 5'b00000;
+		else
+			i1modk <= i1modk + 1'b1;
+	end
+	
+	if (start == 1'b1)
+		nextTopIdx <= 12'b000000000000;
+	else if (currentState == `cINCRE_I)
+		if (mode[1] == 0)
+			nextTopIdx <= nextTopIdx + n + 1;
+		else
+			nextTopIdx <= nextTopIdx + n;
+ nextTopIdx2 <= nextTopIdx + n + 1;
+
+	if (start == 1'b1)
+		curTopIdx <= 12'b000000000001;
+	else if (currentState == `cUPDATE_J)
+   if (mode[1] == 1'b0)
+		  curTopIdx <= nextTopIdx+1;
+   else
+		  curTopIdx <= nextTopIdx;
+	else if (nextRowState == `cLOAD_ROW_INC_J)
+		curTopIdx <= curTopIdx + 1;
+	
+	if (start == 1'b1)
+		i1 <= 7'b0000001;
+	else if (currentState == `cINCRE_I)
+	   i1 <= i1 + 1;
+
+	if (start == 1'b1)
+		j <= 7'b0000000;
+	else if (currentState == `cUPDATE_J)
+		if (mode[1] == 1'b0)
+			j <= i1;
+		else
+		j <= 7'b0000000;
+	else if (currentRowState == `cLOAD_ROW_INC_J)
+		j <= j + 1;
+
+// compute cycles of delay in FSM
+	if (currentState == `cSTORE_MO)
+		waitCycles <= 32-1;
+	else if (currentState == `cINCRE_I)
+	begin
+		if (i1 == stop-1)
+			if (mode[1] == 1'b1)
+				waitCycles <= 32-1 + 6 - 3;
+			else
+				waitCycles <= waitCycles + 5 - 2;
+		else if (mode == 2'b01 && waitCycles < 32-1 - (16-1) - 4)
+			waitCycles <= 32-1 - (16-1) - 4;
+		else if (mode == 2'b10 && i1modk == 32-1)
+			waitCycles <= 32-1 + 6 - 3;
+		else if (mode == 2'b00)
+			waitCycles <= waitCycles + 6 ;
+	end
+else if (waitCycles >7'b0000000)
+		waitCycles <= waitCycles - 1;
+
+end
+
+// determining next state of main FSM
+always @ (currentState or start or mode or m or n or counter or mdivk or topIdxCounter or doneFetchRow or divCounter or j or stop2 or waitCycles or stop or i1)
+begin
+	case (currentState)
+	`cSETUP:
+	begin
+		if (start == 1'b1)
+			nextState = `cSTART;
+		else
+			nextState = `cSETUP;
+		updateCounter = 1'b1;
+	end
+	`cSTART:
+	begin
+		if (mode == 2'b00)
+		begin
+			if (m == 1 && n == 1)
+				nextState = `cDONE;
+			else
+				nextState = `cFETCH_COL;
+		end
+		else if (mode == 2'b01)
+			nextState = `cSTORE_DIAG;
+		else if (mode == 2'b10)
+			nextState = `cSTART_FETCH_ROW;
+		else
+			nextState = `cUPDATE_J;
+		updateCounter = 1'b1;
+	end
+	`cSTART_FETCH_ROW:
+	begin
+		if (counter == 5+6-1)
+   begin
+		  if (mode == 2'b00)
+			  nextState = `cSTORE_DIAG;
+		  else
+			  nextState = `cUPDATE_J;
+	  end
+		else
+			nextState = `cSTART_FETCH_ROW;
+		updateCounter = 1'b0;
+	end
+	`cFETCH_COL:
+		if (counter >= mdivk-1)
+		begin
+			if (mode == 2'b00 && counter < 5)
+			begin
+				nextState = `cWAIT_COL;
+				updateCounter = 1'b0;
+			end
+			else
+			begin
+				if (mode == 2'b00)
+					nextState = `cSTART_FETCH_ROW;
+				else
+					nextState = `cFIND_REC;
+				updateCounter = 1'b1;
+			end
+		end
+		else
+		begin
+			nextState = `cFETCH_COL;
+			updateCounter = 1'b0;
+		end
+	`cWAIT_COL:
+		if (counter >= 5)
+		begin
+			if (mode == 0)
+				nextState = `cSTART_FETCH_ROW;
+			else
+				nextState = `cFIND_REC;
+			updateCounter = 1;
+		end
+		else
+		begin
+			nextState = `cWAIT_COL;
+			updateCounter = 0;
+		end
+	`cSTORE_DIAG:
+	begin
+		if (mode == 0)
+			nextState =  `cFIND_REC;
+		else
+			nextState =  `cFETCH_COL;
+		updateCounter = 1;
+	end
+	`cFIND_REC:
+		if (divCounter == 56)
+		begin
+			if (mode == 0)
+				nextState = `cMULT_COL;
+			else
+				nextState = `cSTORE_DIAG2;
+			updateCounter = 1;
+		end
+		else
+		begin
+			nextState = `cFIND_REC;
+			updateCounter = 0;
+		end
+	`cSTORE_DIAG2:
+	begin
+		nextState =  `cMULT_COL;
+		updateCounter = 1;
+	end
+	`cMULT_COL:
+		if (topIdxCounter == mdivk-1)
+		begin
+			nextState = `cUPDATE_J;
+			updateCounter = 0;
+		end
+		else
+		begin
+			nextState = `cMULT_COL;
+			updateCounter = 0;
+		end
+	`cUPDATE_J:
+		if ((mode[1] == 1 || counter >= 16-1) && doneFetchRow == 1)
+		begin
+			nextState = `cSTORE_MO;
+			updateCounter = 1;
+		end
+		else
+		begin
+			nextState = `cUPDATE_J;
+			updateCounter = 0;
+		end
+	`cSTORE_MO:
+	begin
+		if (j == stop2)
+		begin
+			if (counter == mdivk-1+5-2)
+				nextState = `cDONE;
+			else
+				nextState = `cSTORE_MO;
+			updateCounter = 0;
+		end
+		else
+		begin
+			nextState =  `cMULT_SUB;
+			updateCounter = 1;
+		end
+	end
+	`cMULT_SUB:
+		if (topIdxCounter == mdivk-1)
+		begin
+			if (j == n-1)
+				nextState = `cINCRE_I;
+			else
+				nextState = `cMULT_SUB;
+			updateCounter = 1;
+		end
+		else
+		begin
+			nextState = `cMULT_SUB;
+			updateCounter = 0;
+		end
+	`cINCRE_I:
+	begin
+		nextState = `cWAIT;
+		updateCounter = 1;
+	end
+	`cWAIT:
+		if (waitCycles == 0)
+		begin
+			if (i1 == stop)
+				nextState = `cDONE;
+			else if (mode == 0)
+				nextState = `cSTORE_DIAG;
+			else if (mode == 1)
+				nextState = `cFIND_REC;
+			else
+				nextState = `cUPDATE_J;
+			updateCounter = 1;
+		end
+		else
+		begin
+			nextState = `cWAIT;
+			updateCounter = 0;
+		end
+	`cDONE:
+	begin
+		nextState = `cDONE;
+		updateCounter = 0;
+	end
+	default:
+	begin
+		nextState = `cSETUP;
+		updateCounter = 1;
+	end
+	endcase
+end
+
+always @ (currentRowState or currentState or nextState or i1 or topIdxCounter or mdivk or msIdxCounter or readRowCounter or j or n or mode)
+begin
+	if (currentRowState == `cDONE_FETCH_ROW)
+		doneFetchRow = 1;
+	else
+		doneFetchRow = 0;
+		if((nextState == `cSTART_FETCH_ROW && currentState != `cSTART_FETCH_ROW && i1 == 1))
+		startFetchRow = 1;
+	else
+		startFetchRow = 0;
+	if (currentState == `cMULT_SUB && topIdxCounter+2 == mdivk)
+		loadRow = 1;
+	else
+		loadRow = 0;
+	writeRow = (msIdxCounter == readRowCounter)&&(currentState==`cMULT_SUB)&&(j!=n)&&(mode[0] == 0);
+end
+
+// second FSM that controls the control signals to temp_top block
+always @ (currentRowState or nextTopIdxCounter or n or startFetchRow or loadRow or topIdx or mdivk or nextState)
+begin
+	case (currentRowState)
+	`cFETCH_ROW:
+		if (nextTopIdxCounter == n-1)
+			nextRowState = `cDONE_FETCH_ROW;
+		else
+			nextRowState = `cFETCH_ROW;
+	`cDONE_FETCH_ROW:
+		if (startFetchRow == 1)
+			nextRowState = `cFETCH_ROW;
+		else if (loadRow == 1 || (topIdx+1 == mdivk && nextState == `cMULT_SUB))
+			nextRowState = `cLOAD_ROW_INC_J;
+		else
+			nextRowState = `cDONE_FETCH_ROW;
+	`cLOAD_ROW_INC_J:
+		if (topIdx+1 == mdivk && nextState == `cMULT_SUB)
+			nextRowState = `cLOAD_ROW_INC_J;
+		else
+			nextRowState = `cDONE_FETCH_ROW;
+	default:
+		nextRowState = `cDONE_FETCH_ROW;
+	endcase
+end
+
+// address counters
+always @ (posedge clk)
+begin
+	if (updateCounter == 1 || currentRowState == `cLOAD_ROW_INC_J)
+		topIdxCounter <= topIdx;
+	else
+		topIdxCounter <= topIdxCounter + 1;
+
+	if (updateCounter == 1)
+		diagIdxCounter <= diagIdx;
+	else
+		diagIdxCounter <= diagIdxCounter + 1;
+
+	if (updateCounter == 1 || currentRowState == `cLOAD_ROW_INC_J)
+		msIdxCounter <= msIdx;
+	else
+		msIdxCounter <= msIdxCounter + 1;
+
+	if (updateCounter == 1 || currentRowState == `cLOAD_ROW_INC_J)
+		leftIdxCounter <= leftIdx;
+	else
+		leftIdxCounter <= leftIdxCounter + 1;
+	
+	if (currentState == `cFETCH_COL || currentState == `cSTORE_MO)
+		topWriteCounter <= i1;
+	else if (writeRow == 1 || currentRowState == `cFETCH_ROW)
+		topWriteCounter <= topWriteCounter + 1;
+
+	if (currentState == `cSTART)
+		nextTopIdxCounter <= nextTopIdx;
+ else if (currentState == `cSTORE_MO)
+		if (mode[1] == 0)
+			nextTopIdxCounter <= nextTopIdx + n + 1;
+		else
+			nextTopIdxCounter <= nextTopIdx + n;
+	else if (writeRow == 1 || currentRowState == `cFETCH_ROW)
+		nextTopIdxCounter <= nextTopIdxCounter + 1;
+
+	if (currentState == `cSTART)
+			readRowCounter <= 0; //offsetdivk;
+	else if (currentState == `cSTORE_MO)
+		if (mode[1] == 0)
+			readRowCounter <= leftIdx + 2;
+		else
+			readRowCounter <= topIdx;
+	else if (writeRow == 1 || currentRowState == `cFETCH_ROW)
+	   readRowCounter <= readRowCounter + 2;
+
+	if (updateCounter == 1)
+		counter <= 0;
+	else
+		counter <= counter + 1;
+
+	if (currentState == `cSTORE_DIAG || currentState == `cSTORE_DIAG2)
+		divCounter <= 0;
+	else if (divCounter < 56)
+		divCounter <= divCounter + 1;
+
+	case (i1modk) 
+		5'b00000: begin
+			i1modkByteEn <= ~(128'b0) >> (5'b00000<<2'b10);
+		end
+		5'b00001: begin
+			i1modkByteEn <= ~(128'b0) >> (5'b00001<<2'b10);
+		end
+		5'b00010: begin
+			i1modkByteEn <= ~(128'b0) >> (5'b00010<<2'b10);
+		end
+		5'b00011: begin
+			i1modkByteEn <= ~(128'b0) >> (5'b00011<<2'b10);
+		end
+		5'b00100: begin
+			i1modkByteEn <= ~(128'b0) >> (5'b00100<<2'b10);
+		end
+		5'b00101: begin
+			i1modkByteEn <= ~(128'b0) >> (5'b00101<<2'b10);
+		end
+		5'b00110: begin
+			i1modkByteEn <= ~(128'b0) >> (5'b00110<<2'b10);
+		end
+		5'b00111: begin
+			i1modkByteEn <= ~(128'b0) >> (5'b00111<<2'b10);
+		end
+		5'b01000: begin
+			i1modkByteEn <= ~(128'b0) >> (5'b01000<<2'b10);
+		end
+		5'b01001: begin
+			i1modkByteEn <= ~(128'b0) >> (5'b01001<<2'b10);
+		end
+		5'b01010: begin
+			i1modkByteEn <= ~(128'b0) >> (5'b01010<<2'b10);
+		end
+		5'b01011: begin
+			i1modkByteEn <= ~(128'b0) >> (5'b01011<<2'b10);
+		end
+		5'b01100: begin
+			i1modkByteEn <= ~(128'b0) >> (5'b01100<<2'b10);
+		end
+		5'b01101: begin
+			i1modkByteEn <= ~(128'b0) >> (5'b01101<<2'b10);
+		end
+		5'b01110: begin
+			i1modkByteEn <= ~(128'b0) >> (5'b01110<<2'b10);
+		end
+		5'b01111: begin
+			i1modkByteEn <= ~(128'b0) >> (5'b01111<<2'b10);
+		end
+		5'b10000: begin
+			i1modkByteEn <= ~(128'b0) >> (5'b10000<<2'b10);
+		end
+		5'b10001: begin
+			i1modkByteEn <= ~(128'b0) >> (5'b10001<<2'b10);
+		end
+		5'b10010: begin
+			i1modkByteEn <= ~(128'b0) >> (5'b10010<<2'b10);
+		end
+		5'b10011: begin
+			i1modkByteEn <= ~(128'b0) >> (5'b10011<<2'b10);
+		end
+		5'b10100: begin
+			i1modkByteEn <= ~(128'b0) >> (5'b10100<<2'b10);
+		end
+		5'b10101: begin
+			i1modkByteEn <= ~(128'b0) >> (5'b10101<<2'b10);
+		end
+		5'b10110: begin
+			i1modkByteEn <= ~(128'b0) >> (5'b10110<<2'b10);
+		end
+		5'b10111: begin
+			i1modkByteEn <= ~(128'b0) >> (5'b10111<<2'b10);
+		end
+		5'b11000: begin
+			i1modkByteEn <= ~(128'b0) >> (5'b11000<<2'b10);
+		end
+		5'b11001: begin
+			i1modkByteEn <= ~(128'b0) >> (5'b11001<<2'b10);
+		end
+		5'b11010: begin
+			i1modkByteEn <= ~(128'b0) >> (5'b11010<<2'b10);
+		end
+		5'b11011: begin
+			i1modkByteEn <= ~(128'b0) >> (5'b11011<<2'b10);
+		end
+		5'b11100: begin
+			i1modkByteEn <= ~(128'b0) >> (5'b11100<<2'b10);
+		end
+		5'b11101: begin
+			i1modkByteEn <= ~(128'b0) >> (5'b11101<<2'b10);
+		end
+		5'b11110: begin
+			i1modkByteEn <= ~(128'b0) >> (5'b11110<<2'b10);
+		end
+		5'b11111: begin
+			i1modkByteEn <= ~(128'b0) >> (5'b11111<<2'b10);
+		end
+		default: begin
+			i1modkByteEn <= ~(128'b0);
+		end
+	endcase
+end
+
+// compute Byte Enable
+always @ (posedge clk)
+begin
+	if ((nextState == `cMULT_COL && currentState != `cMULT_COL) || (currentState == `cSTORE_MO) || currentRowState == `cLOAD_ROW_INC_J)
+		byteEn <= i1modkByteEn;
+	else
+		byteEn <= 128'b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111;
+end
+
+// update FSM state register
+always @ (posedge clk)
+begin
+	if (start_in == 1'b1)
+		currentState <= `cSETUP;
+	else
+		currentState <= nextState;
+	if (start == 1'b1)
+		currentRowState <= `cDONE_FETCH_ROW;
+	else
+		currentRowState <= nextRowState;
+end
+
+// delay register for control signals
+// control signals are delayed to match latency of operations and/or memory access
+always @ (posedge clk)
+begin
+	curReadAddrDelay0 <= curReadAddrDelay1;
+	curReadAddrDelay1 <= curReadAddrDelay2;
+	curReadAddrDelay2 <= curReadAddrDelay3;
+	curReadAddrDelay3 <= curReadAddrDelay4;
+	curReadAddrDelay4 <= curReadAddrDelay5;
+	curReadAddrDelay5 <= curReadAddrDelay6;
+	curReadAddrDelay6 <= curReadAddrDelay7;
+	curReadAddrDelay7 <= curReadAddrDelay8;
+	curReadAddrDelay8 <= curReadAddrDelay9;
+	curReadAddrDelay9 <= curReadAddrDelay10;
+	curReadAddrDelay10 <= curReadAddrDelay11;
+	curReadAddrDelay11 <= msIdxCounter;
+	
+	curWriteAddrDelay0 <= curWriteAddrDelay1;
+	curWriteAddrDelay1 <= curWriteAddrDelay2;
+	curWriteAddrDelay2 <= curWriteAddrDelay3;
+	curWriteAddrDelay3 <= curWriteAddrDelay4;
+	if (currentState == `cFETCH_COL)
+		curWriteAddrDelay4 <= diagIdxCounter;
+	else
+		curWriteAddrDelay4 <= curWriteAddrDelay5;
+	curWriteAddrDelay5 <= curWriteAddrDelay6;
+	curWriteAddrDelay6 <= curWriteAddrDelay7;
+	curWriteAddrDelay7 <= curWriteAddrDelay8;
+	curWriteAddrDelay8 <= curWriteAddrDelay9;
+	curWriteAddrDelay9 <= curWriteAddrDelay10;
+	curWriteAddrDelay10 <= curWriteAddrDelay11;
+	curWriteAddrDelay11 <= curWriteAddrDelay12;
+	curWriteAddrDelay12 <= curWriteAddrDelay13;
+	curWriteAddrDelay13 <= curWriteAddrDelay14;
+	curWriteAddrDelay14 <= curWriteAddrDelay15;
+	if (currentState == `cMULT_COL)
+		curWriteAddrDelay15 <= leftIdxCounter;
+	else
+		curWriteAddrDelay15 <= curWriteAddrDelay16;
+	curWriteAddrDelay16 <= curWriteAddrDelay17;
+	curWriteAddrDelay17 <= curWriteAddrDelay18;
+	curWriteAddrDelay18 <= curWriteAddrDelay19;
+	curWriteAddrDelay19 <= curWriteAddrDelay20;
+	curWriteAddrDelay20 <= curWriteAddrDelay21;
+	curWriteAddrDelay21 <= curWriteAddrDelay22;
+	curWriteAddrDelay22 <= curWriteAddrDelay23;
+	curWriteAddrDelay23 <= curWriteAddrDelay24;
+	curWriteAddrDelay24 <= curWriteAddrDelay25;
+	curWriteAddrDelay25 <= curWriteAddrDelay26;
+	curWriteAddrDelay26 <= curWriteAddrDelay27;
+	curWriteAddrDelay27 <= curWriteAddrDelay28;
+	curWriteAddrDelay28 <= curWriteAddrDelay29;
+	curWriteAddrDelay29 <= curWriteAddrDelay30;
+	curWriteAddrDelay30 <= curWriteAddrDelay31;
+	curWriteAddrDelay31 <= msIdxCounter;
+	
+	writeByteEnDelay0 <= writeByteEnDelay1;
+	writeByteEnDelay1 <= writeByteEnDelay2;
+	writeByteEnDelay2 <= writeByteEnDelay3;
+	writeByteEnDelay3 <= writeByteEnDelay4;
+	if (mode[0] == 1'b1)
+		writeByteEnDelay4 <= ~0;
+	else if (currentState == `cFETCH_COL)
+		writeByteEnDelay4 <= byteEn;
+	else
+		writeByteEnDelay4 <= writeByteEnDelay5;
+	writeByteEnDelay5 <= writeByteEnDelay6;
+	writeByteEnDelay6 <= writeByteEnDelay7;
+	writeByteEnDelay7 <= writeByteEnDelay8;
+	writeByteEnDelay8 <= writeByteEnDelay9;
+	writeByteEnDelay9 <= writeByteEnDelay10;
+	writeByteEnDelay10 <= writeByteEnDelay11;
+	writeByteEnDelay11 <= writeByteEnDelay12;
+	writeByteEnDelay12 <= writeByteEnDelay13;
+	writeByteEnDelay13 <= writeByteEnDelay14;
+	writeByteEnDelay14 <= writeByteEnDelay15;
+	if (currentState == `cMULT_COL)
+		writeByteEnDelay15 <= byteEn;
+	else
+		writeByteEnDelay15 <= writeByteEnDelay16;
+	writeByteEnDelay16 <= writeByteEnDelay17;
+	writeByteEnDelay17 <= writeByteEnDelay18;
+	writeByteEnDelay18 <= writeByteEnDelay19;
+	writeByteEnDelay19 <= writeByteEnDelay20;
+	writeByteEnDelay20 <= writeByteEnDelay21;
+	writeByteEnDelay21 <= writeByteEnDelay22;
+	writeByteEnDelay22 <= writeByteEnDelay23;
+	writeByteEnDelay23 <= writeByteEnDelay24;
+	writeByteEnDelay24 <= writeByteEnDelay25;
+	writeByteEnDelay25 <= writeByteEnDelay26;
+	writeByteEnDelay26 <= writeByteEnDelay27;
+	writeByteEnDelay27 <= writeByteEnDelay28;
+	writeByteEnDelay28 <= writeByteEnDelay29;
+	writeByteEnDelay29 <= writeByteEnDelay30;
+	writeByteEnDelay30 <= writeByteEnDelay31;
+	writeByteEnDelay31 <= byteEn;
+	
+	curWriteSelDelay[0] <= curWriteSelDelay[1];
+	curWriteSelDelay[1] <= curWriteSelDelay[2];
+	curWriteSelDelay[2] <= curWriteSelDelay[3];
+	curWriteSelDelay[3] <= curWriteSelDelay[4];
+	curWriteSelDelay[4] <= curWriteSelDelay[5];
+	curWriteSelDelay[5] <= curWriteSelDelay[6];
+	curWriteSelDelay[6] <= curWriteSelDelay[7];
+	curWriteSelDelay[7] <= curWriteSelDelay[8];
+	curWriteSelDelay[8] <= curWriteSelDelay[9];
+	curWriteSelDelay[9] <= curWriteSelDelay[10];
+	curWriteSelDelay[10] <= curWriteSelDelay[11];
+	curWriteSelDelay[11] <= curWriteSelDelay[12];
+	curWriteSelDelay[12] <= curWriteSelDelay[13];
+	curWriteSelDelay[13] <= curWriteSelDelay[14];
+	curWriteSelDelay[14] <= curWriteSelDelay[15];
+	if (currentState == `cMULT_COL)
+		curWriteSelDelay[15] <= 1'b0;
+	else
+		curWriteSelDelay[15] <= 1'b1;
+
+	curWriteEnDelay[0] <= curWriteEnDelay[1];
+	curWriteEnDelay[1] <= curWriteEnDelay[2];
+	curWriteEnDelay[2] <= curWriteEnDelay[3];
+	curWriteEnDelay[3] <= curWriteEnDelay[4];
+	curWriteEnDelay[4] <= curWriteEnDelay[5];
+	curWriteEnDelay[5] <= curWriteEnDelay[6];
+	curWriteEnDelay[6] <= curWriteEnDelay[7];
+	curWriteEnDelay[7] <= curWriteEnDelay[8];
+	curWriteEnDelay[8] <= curWriteEnDelay[9];
+	curWriteEnDelay[9] <= curWriteEnDelay[10];
+	curWriteEnDelay[10] <= curWriteEnDelay[11];
+	curWriteEnDelay[11] <= curWriteEnDelay[12];
+	curWriteEnDelay[12] <= curWriteEnDelay[13];
+	curWriteEnDelay[13] <= curWriteEnDelay[14];
+	curWriteEnDelay[14] <= curWriteEnDelay[15];
+	if (currentState == `cMULT_COL)
+		curWriteEnDelay[15] <= 1'b1;
+	else
+		curWriteEnDelay[15] <= curWriteEnDelay[16];
+	curWriteEnDelay[16] <= curWriteEnDelay[17];
+	curWriteEnDelay[17] <= curWriteEnDelay[18];
+	curWriteEnDelay[18] <= curWriteEnDelay[19];
+	curWriteEnDelay[19] <= curWriteEnDelay[20];
+	curWriteEnDelay[20] <= curWriteEnDelay[21];
+	curWriteEnDelay[21] <= curWriteEnDelay[22];
+	curWriteEnDelay[22] <= curWriteEnDelay[23];
+	curWriteEnDelay[23] <= curWriteEnDelay[24];
+	curWriteEnDelay[24] <= curWriteEnDelay[25];
+	curWriteEnDelay[25] <= curWriteEnDelay[26];
+	curWriteEnDelay[26] <= curWriteEnDelay[27];
+	curWriteEnDelay[27] <= curWriteEnDelay[28];
+	curWriteEnDelay[28] <= curWriteEnDelay[29];
+	curWriteEnDelay[29] <= curWriteEnDelay[30];
+	curWriteEnDelay[30] <= curWriteEnDelay[31];
+	if (currentState == `cMULT_SUB)
+		curWriteEnDelay[31] <= 1'b1;
+	else
+		curWriteEnDelay[31] <= 1'b0;
+
+	leftWriteSelDelay[0] <= leftWriteSelDelay[1];
+	leftWriteSelDelay[1] <= leftWriteSelDelay[2];
+	leftWriteSelDelay[2] <= leftWriteSelDelay[3];
+	leftWriteSelDelay[3] <= leftWriteSelDelay[4];
+	if (currentState == `cFETCH_COL)
+		leftWriteSelDelay[4] <= 1'b0;
+	else
+		leftWriteSelDelay[4] <= 1'b1;
+
+	leftWriteEnDelay[0] <= leftWriteEnDelay[1];
+	leftWriteEnDelay[1] <= leftWriteEnDelay[2];
+	leftWriteEnDelay[2] <= leftWriteEnDelay[3];
+	leftWriteEnDelay[3] <= leftWriteEnDelay[4];
+	if (currentState == `cFETCH_COL)
+		leftWriteEnDelay[4] <= 1'b1;
+	else
+		leftWriteEnDelay[4] <= leftWriteEnDelay[5];
+	leftWriteEnDelay[5] <= leftWriteEnDelay[6];
+	leftWriteEnDelay[6] <= leftWriteEnDelay[7];
+	leftWriteEnDelay[7] <= leftWriteEnDelay[8];
+	leftWriteEnDelay[8] <= leftWriteEnDelay[9];
+	leftWriteEnDelay[9] <= leftWriteEnDelay[10];
+	leftWriteEnDelay[10] <= leftWriteEnDelay[11];
+	leftWriteEnDelay[11] <= leftWriteEnDelay[12];
+	leftWriteEnDelay[12] <= leftWriteEnDelay[13];
+	leftWriteEnDelay[13] <= leftWriteEnDelay[14];
+	leftWriteEnDelay[14] <= leftWriteEnDelay[15];
+	if (currentState == `cMULT_COL)
+		leftWriteEnDelay[15] <= 1'b1;
+	else
+		leftWriteEnDelay[15] <= leftWriteEnDelay[16];
+	leftWriteEnDelay[16] <= leftWriteEnDelay[17];
+	leftWriteEnDelay[17] <= leftWriteEnDelay[18];
+	leftWriteEnDelay[18] <= leftWriteEnDelay[19];
+	leftWriteEnDelay[19] <= leftWriteEnDelay[20];
+	leftWriteEnDelay[20] <= leftWriteEnDelay[21];
+	leftWriteEnDelay[21] <= leftWriteEnDelay[22];
+	leftWriteEnDelay[22] <= leftWriteEnDelay[23];
+	leftWriteEnDelay[23] <= leftWriteEnDelay[24];
+	leftWriteEnDelay[24] <= leftWriteEnDelay[25];
+	leftWriteEnDelay[25] <= leftWriteEnDelay[26];
+	leftWriteEnDelay[26] <= leftWriteEnDelay[27];
+	leftWriteEnDelay[27] <= leftWriteEnDelay[28];
+	leftWriteEnDelay[28] <= leftWriteEnDelay[29];
+	leftWriteEnDelay[29] <= leftWriteEnDelay[30];
+	leftWriteEnDelay[30] <= leftWriteEnDelay[31];
+	if (currentState == `cMULT_SUB && (mode == 0 || (mode == 1 && j == i1)))
+		leftWriteEnDelay[31] <= 1'b1;
+	else
+		leftWriteEnDelay[31] <= 1'b0;
+
+	topWriteAddrDelay0 <= topWriteAddrDelay1;
+	topWriteAddrDelay1 <= topWriteAddrDelay2;
+	topWriteAddrDelay2 <= topWriteAddrDelay3;
+	topWriteAddrDelay3 <= topWriteAddrDelay4;
+	if (currentRowState == `cFETCH_ROW)
+		topWriteAddrDelay4 <= nextTopIdxCounter;
+	else
+		topWriteAddrDelay4 <=  topWriteAddrDelay5;
+	topWriteAddrDelay5 <= topWriteAddrDelay6;
+	topWriteAddrDelay6 <= topWriteAddrDelay7;
+	topWriteAddrDelay7 <= topWriteAddrDelay8;
+	topWriteAddrDelay8 <= topWriteAddrDelay9;
+	topWriteAddrDelay9 <= topWriteAddrDelay10;
+	topWriteAddrDelay10 <= topWriteAddrDelay11;
+	topWriteAddrDelay11 <= topWriteAddrDelay12;
+	topWriteAddrDelay12 <= topWriteAddrDelay13;
+	topWriteAddrDelay13 <= topWriteAddrDelay14;
+	topWriteAddrDelay14 <= topWriteAddrDelay15;
+	topWriteAddrDelay15 <= topWriteAddrDelay16;
+	topWriteAddrDelay16 <= topWriteAddrDelay17;
+	topWriteAddrDelay17 <= topWriteAddrDelay18;
+	topWriteAddrDelay18 <= topWriteAddrDelay19;
+	topWriteAddrDelay19 <= topWriteAddrDelay20;
+	topWriteAddrDelay20 <= topWriteAddrDelay21;
+	topWriteAddrDelay21 <= topWriteAddrDelay22;
+	topWriteAddrDelay22 <= topWriteAddrDelay23;
+	topWriteAddrDelay23 <= topWriteAddrDelay24;
+	topWriteAddrDelay24 <= topWriteAddrDelay25;
+	topWriteAddrDelay25 <= topWriteAddrDelay26;
+	topWriteAddrDelay26 <= topWriteAddrDelay27;
+	topWriteAddrDelay27 <= topWriteAddrDelay28;
+	topWriteAddrDelay28 <= topWriteAddrDelay29;
+	topWriteAddrDelay29 <= topWriteAddrDelay30;
+	topWriteAddrDelay30 <= topWriteAddrDelay31;
+		topWriteAddrDelay31 <= nextTopIdxCounter;
+
+	topWriteEnDelay[0] <= topWriteEnDelay[1];
+	topWriteEnDelay[1] <= topWriteEnDelay[2];
+	topWriteEnDelay[2] <= topWriteEnDelay[3];
+	topWriteEnDelay[3] <= topWriteEnDelay[4];
+	if (currentRowState == `cFETCH_ROW)
+		topWriteEnDelay[4] <= 1'b1;
+	else
+		topWriteEnDelay[4] <=  topWriteEnDelay[5];
+	topWriteEnDelay[5] <= topWriteEnDelay[6];
+	topWriteEnDelay[6] <= topWriteEnDelay[7];
+	topWriteEnDelay[7] <= topWriteEnDelay[8];
+	topWriteEnDelay[8] <= topWriteEnDelay[9];
+	topWriteEnDelay[9] <= topWriteEnDelay[10];
+	topWriteEnDelay[10] <= topWriteEnDelay[11];
+	topWriteEnDelay[11] <= topWriteEnDelay[12];
+	topWriteEnDelay[12] <= topWriteEnDelay[13];
+	topWriteEnDelay[13] <= topWriteEnDelay[14];
+	topWriteEnDelay[14] <= topWriteEnDelay[15];
+	topWriteEnDelay[15] <= topWriteEnDelay[16];
+	topWriteEnDelay[16] <= topWriteEnDelay[17];
+	topWriteEnDelay[17] <= topWriteEnDelay[18];
+	topWriteEnDelay[18] <= topWriteEnDelay[19];
+	topWriteEnDelay[19] <= topWriteEnDelay[20];
+	topWriteEnDelay[20] <= topWriteEnDelay[21];
+	topWriteEnDelay[21] <= topWriteEnDelay[22];
+	topWriteEnDelay[22] <= topWriteEnDelay[23];
+	topWriteEnDelay[23] <= topWriteEnDelay[24];
+	topWriteEnDelay[24] <= topWriteEnDelay[25];
+	topWriteEnDelay[25] <= topWriteEnDelay[26];
+	topWriteEnDelay[26] <= topWriteEnDelay[27];
+	topWriteEnDelay[27] <= topWriteEnDelay[28];
+	topWriteEnDelay[28] <= topWriteEnDelay[29];
+	topWriteEnDelay[29] <= topWriteEnDelay[30];
+	topWriteEnDelay[30] <= topWriteEnDelay[31];
+	topWriteEnDelay[31] <= writeRow;
+
+	topWriteSelDelay0 <= topWriteSelDelay1;
+	topWriteSelDelay1 <= topWriteSelDelay2;
+	topWriteSelDelay2 <= topWriteSelDelay3;
+	topWriteSelDelay3 <= topWriteSelDelay4;
+	if (currentRowState == `cFETCH_ROW || currentState == `cUPDATE_J && i1 == 1)
+		topWriteSelDelay4 <= imodk;
+	else
+		topWriteSelDelay4 <=  topWriteSelDelay5;
+	topWriteSelDelay5 <= topWriteSelDelay6;
+	topWriteSelDelay6 <= topWriteSelDelay7;
+	topWriteSelDelay7 <= topWriteSelDelay8;
+	topWriteSelDelay8 <= topWriteSelDelay9;
+	topWriteSelDelay9 <= topWriteSelDelay10;
+	topWriteSelDelay10 <= topWriteSelDelay11;
+	topWriteSelDelay11 <= topWriteSelDelay12;
+	topWriteSelDelay12 <= topWriteSelDelay13;
+	topWriteSelDelay13 <= topWriteSelDelay14;
+	topWriteSelDelay14 <= topWriteSelDelay15;
+	topWriteSelDelay15 <= topWriteSelDelay16;
+	topWriteSelDelay16 <= topWriteSelDelay17;
+	topWriteSelDelay17 <= topWriteSelDelay18;
+	topWriteSelDelay18 <= topWriteSelDelay19;
+	topWriteSelDelay19 <= topWriteSelDelay20;
+	topWriteSelDelay20 <= topWriteSelDelay21;
+	topWriteSelDelay21 <= topWriteSelDelay22;
+	topWriteSelDelay22 <= topWriteSelDelay23;
+	topWriteSelDelay23 <= topWriteSelDelay24;
+	topWriteSelDelay24 <= topWriteSelDelay25;
+	topWriteSelDelay25 <= topWriteSelDelay26;
+	topWriteSelDelay26 <= topWriteSelDelay27;
+	topWriteSelDelay27 <= topWriteSelDelay28;
+	topWriteSelDelay28 <= topWriteSelDelay29;
+	topWriteSelDelay29 <= topWriteSelDelay30;
+	topWriteSelDelay30 <= topWriteSelDelay31;
+	topWriteSelDelay31 <= i1modk;
+
+	topSourceSelDelay[0] <= topSourceSelDelay[1];
+	topSourceSelDelay[1] <= topSourceSelDelay[2];
+	topSourceSelDelay[2] <= topSourceSelDelay[3];
+	topSourceSelDelay[3] <= topSourceSelDelay[4];
+	if (start == 1'b1)
+		topSourceSelDelay[4] <= 1'b0;
+	else if (currentState == `cSTORE_MO)
+		topSourceSelDelay[4] <= 1'b1;
+
+	leftReadAddrDelay0 <= leftIdxCounter;
+
+
+	diagEnDelay[0] <= diagEnDelay[1];
+	diagEnDelay[1] <= diagEnDelay[2];
+	diagEnDelay[2] <= diagEnDelay[3];
+	diagEnDelay[3] <= diagEnDelay[4];
+	diagEnDelay[4] <= diagEnDelay[5];
+	diagEnDelay[5] <= (currentState == `cSTORE_DIAG || currentState == `cSTORE_DIAG2);
+
+	MOEnDelay[0] <= MOEnDelay[1];
+	MOEnDelay[1] <= MOEnDelay[2];
+	MOEnDelay[2] <= MOEnDelay[3];
+	MOEnDelay[3] <= MOEnDelay[4];
+	MOEnDelay[4] <= MOEnDelay[5];
+	if (currentState == `cSTORE_MO || currentRowState == `cLOAD_ROW_INC_J)
+		MOEnDelay[5] <= 1'b1;
+	else
+		MOEnDelay[5] <= 1'b0;
+end
+
+// output contorl signals
+always @ (posedge clk)
+begin
+	if (currentState == `cFETCH_COL)
+		curReadAddr <= diagIdxCounter;
+	else if (currentRowState == `cFETCH_ROW)
+	   curReadAddr <= readRowCounter;
+	else
+		curReadAddr <= curReadAddrDelay0;
+	curWriteAddr <= curWriteAddrDelay0;
+	curWriteByteEn <= writeByteEnDelay0;
+	curWriteSel <= curWriteSelDelay;
+	curWriteEn <= curWriteEnDelay;
+
+	if (currentState == `cMULT_COL)
+		leftReadAddr <= leftIdxCounter;
+	else
+		leftReadAddr <= leftReadAddrDelay0;
+	leftWriteAddr <= curWriteAddrDelay0;
+	leftWriteByteEn <= writeByteEnDelay0;
+	leftWriteSel <= leftWriteSelDelay;
+	leftWriteEn <= leftWriteEnDelay;
+
+	if (currentState == `cSTORE_DIAG)
+		topReadAddr <= nextTopIdx;
+else if (currentState == `cSTORE_DIAG2)
+   topReadAddr <= nextTopIdx2;
+	else
+	topReadAddr <= curTopIdx;
+	topWriteAddr <= topWriteAddrDelay0;
+	topWriteEn <= topWriteEnDelay;
+	topWriteSel <= topWriteSelDelay0;
+	topSourceSel <= topSourceSelDelay;
+
+	MOSel <= ~(currentState == `cFIND_REC);
+if (currentState == `cFIND_REC)
+		MOEn <= 1'b1;
+	else
+		MOEn <= MOEnDelay;
+
+	diagEn <= diagEnDelay;
+
+	if (currentState == `cDONE)
+		done <= 1'b1;
+	else
+		done <= 1'b0;
+end
+
+endmodule
+
+module ram (
+	byteena_a,
+	clk,
+	data,
+	rdaddress,
+	wraddress,
+	wren,
+	q
+	);
+
+	input	[`RAMNUMBYTES-1:0]  byteena_a;
+	input	  clk;
+	input	[`RAMWIDTH-1:0]  data;
+	input	[`rRAMSIZEWIDTH-1:0]  rdaddress;
+	input	[`rRAMSIZEWIDTH-1:0]  wraddress;
+	input	  wren;
+	output	[`RAMWIDTH-1:0]  q;
+	wire	[`RAMWIDTH-1:0]  value_out;
+	wire [`RAMWIDTH-1:0] subwire;
+	assign q = subwire | dummy;
+	wire [`RAMWIDTH-1:0] uselessdata;
+ assign uselessdata = 1024'b0;
+wire j;
+assign j = |byteena_a;
+ wire [`RAMWIDTH-1:0]dummy;
+ assign dummy = value_out & 1024'b0;
+dual_port_ram #(.ADDR_WIDTH(`rRAMSIZEWIDTH),.DATA_WIDTH(`RAMWIDTH)) inst1( 
+.clk (clk),
+.we1(wren),
+.we2(1'b0),
+.data1(data),
+.data2(uselessdata),
+.out1(value_out),
+.out2(subwire),
+.addr1(wraddress),
+.addr2(rdaddress));
+
+
+endmodule
+
+module ram1 (
+	byteena_a,
+	clk,
+	data,
+	rdaddress,
+	wraddress,
+	wren,
+	q
+	);
+
+	input	[`RAMNUMBYTES-1:0]  byteena_a;
+	input	  clk;
+	input	[`RAMWIDTH-1:0]  data;
+	input	[`rRAMSIZEWIDTH-1:0]  rdaddress;
+	input	[`rRAMSIZEWIDTH-1:0]  wraddress;
+	input	  wren;
+	output	[`RAMWIDTH-1:0]  q;
+	wire	[`RAMWIDTH-1:0]  value_out;
+	wire [`RAMWIDTH-1:0] subwire;
+	assign q = subwire | dummy;
+	wire [`RAMWIDTH-1:0] uselessdata;
+ assign uselessdata = 1024'b0;
+wire j;
+assign j = |byteena_a;
+ wire [`RAMWIDTH-1:0]dummy;
+ assign dummy = value_out & 1024'b0;
+dual_port_ram #(.ADDR_WIDTH(`rRAMSIZEWIDTH),.DATA_WIDTH(`RAMWIDTH)) inst1( 
+.clk (clk),
+.we1(wren),
+.we2(1'b0),
+.data1(data),
+.data2(uselessdata),
+.out1(value_out),
+.out2(subwire),
+.addr1(wraddress),
+.addr2(rdaddress));
+
+
+endmodule
+
+module ram2 (
+	byteena_a,
+	clk,
+	data,
+	rdaddress,
+	wraddress,
+	wren,
+	q
+	);
+
+	input	[`RAMNUMBYTES-1:0]  byteena_a;
+	input	  clk;
+	input	[`RAMWIDTH-1:0]  data;
+	input	[`rRAMSIZEWIDTH-1:0]  rdaddress;
+	input	[`rRAMSIZEWIDTH-1:0]  wraddress;
+	input	  wren;
+	output	[`RAMWIDTH-1:0]  q;
+	wire	[`RAMWIDTH-1:0]  value_out;
+	wire [`RAMWIDTH-1:0] subwire;
+	assign q = subwire | dummy;
+	wire [`RAMWIDTH-1:0] uselessdata;
+ assign uselessdata = 1024'b0;
+wire j;
+assign j = |byteena_a;
+ wire [`RAMWIDTH-1:0]dummy;
+ assign dummy = value_out & 1024'b0;
+dual_port_ram #(.ADDR_WIDTH(`rRAMSIZEWIDTH),.DATA_WIDTH(`RAMWIDTH)) inst1( 
+.clk (clk),
+.we1(wren),
+.we2(1'b0),
+.data1(data),
+.data2(uselessdata),
+.out1(value_out),
+.out2(subwire),
+.addr1(wraddress),
+.addr2(rdaddress));
+
+
+endmodule
+
+module ram3 (
+	byteena_a,
+	clk,
+	data,
+	rdaddress,
+	wraddress,
+	wren,
+	q
+	);
+
+	input	[`RAMNUMBYTES-1:0]  byteena_a;
+	input	  clk;
+	input	[`RAMWIDTH-1:0]  data;
+	input	[`rRAMSIZEWIDTH-1:0]  rdaddress;
+	input	[`rRAMSIZEWIDTH-1:0]  wraddress;
+	input	  wren;
+	output	[`RAMWIDTH-1:0]  q;
+	wire	[`RAMWIDTH-1:0]  value_out;
+	wire [`RAMWIDTH-1:0] subwire;
+	assign q = subwire | dummy;
+	wire [`RAMWIDTH-1:0] uselessdata;
+ assign uselessdata = 1024'b0;
+wire j;
+assign j = |byteena_a;
+ wire [`RAMWIDTH-1:0]dummy;
+ assign dummy = value_out & 1024'b0;
+dual_port_ram #(.ADDR_WIDTH(`rRAMSIZEWIDTH),.DATA_WIDTH(`RAMWIDTH)) inst1( 
+.clk (clk),
+.we1(wren),
+.we2(1'b0),
+.data1(data),
+.data2(uselessdata),
+.out1(value_out),
+.out2(subwire),
+.addr1(wraddress),
+.addr2(rdaddress));
+
+
+endmodule
+
+
+module top_ram (
+	clk,
+	data,
+	rdaddress,
+	wraddress,
+	wren,
+	q
+	);
+
+	//parameter TOPSIZE = 4096, TOPSIZEWIDTH = 12, TOPWIDTH = 32;
+	
+	input	  clk;
+	input	[32-1:0]  data;
+	input	[12-1:0]  rdaddress;
+	input	[12-1:0]  wraddress;
+	input	  wren;
+	output	[32-1:0]  q;
+
+	wire [32-1:0] sub_wire0;
+	wire [32-1:0] q;
+	wire [32-1:0] junk_output;
+	assign q = sub_wire0 | dummy;
+	wire[32-1:0] dummy;
+	assign dummy = junk_output & 32'b0;
+ dual_port_ram #(.ADDR_WIDTH(13),.DATA_WIDTH(32)) inst2(
+ .clk (clk),
+ .we1(wren),
+ .we2(1'b0),
+ .data1(data),
+ .data2(data),
+ .out1(junk_output),
+ .out2(sub_wire0),
+ .addr1(wraddress),
+ .addr2(rdaddress));
+
+endmodule
+
+module mult_add (clk, A, B, C, mult_result, add_result);
+//parameter PRECISION = 32;
+input clk;
+input [32-1:0] A, B, C;
+output [32-1:0] mult_result, add_result;
+reg [32-1:0] mult_result;
+reg [32-1:0] add_result;
+wire [32-1:0] mult_comp_result;
+reg [32-1:0] add_a, add_b;
+wire [32-1:0] addition_result;
+wire [31:0] dummy_wire;
+assign dummy_wire = mult_comp_result>>2'b10;
+//divsp MUL(.clk(clk), .rmode(2'b00), .fpu_op(3'b010), .opa(A), .opb(B), .ans(mult_comp_result) );
+wire [4:0]dummy_wire_2;
+fpmul MUL(.clk(clk), .a(A), .b(B), .y_out(mult_comp_result), .control(2'b00), .flags(dummy_wire_2));
+fpu_add ADD(.clock(clk), .a1(C), .b1(dummy_wire), .sum(addition_result));
+always @ (posedge clk)
+begin
+	add_result  <= addition_result;
+	mult_result <= mult_comp_result[31:0];
+end
+endmodule
+
+
+//`define rFIFOINPUTWIDTH 64
+`define rFIFOSIZE 256
+`define rFIFOSIZEWIDTH 8
+`define rFIFOOUTPUTWIDTH 1024
+`define rFIFORSIZEWIDTH 4
+	`define wFIFOINPUTWIDTH 12'b010000000000
+	`define wFIFOSIZE 6'b010000
+	`define wFIFOSIZEWIDTH 4'b0100
+	`define wFIFOOUTPUTWIDTH 8'b01000000
+	`define wFIFORSIZEWIDTH 5'b01000
+ //for addr_fifo
+`define aFIFOSIZE 6'b010000
+`define aFIFOSIZEWIDTH 4'b0100
+`define aFIFOWIDTH 4'b0111
+//for memfifo
+`define mFIFOSIZE 16
+`define mFIFOSIZEWIDTH 4
+//`define mFIFOWIDTH 28
+
+`define BURSTLEN 3'b010
+`define BURSTWIDTH 3'b010
+`define DATAWIDTH 12'b010000000000
+`define DATANUMBYTES 9'b010000000
+`define MEMCONWIDTH 8'b01000000
+`define MEMCONNUMBYTES 5'b01000
+`define DDRSIZEWIDTH 6'b011000
+`define FIFOSIZE 6'b010000
+`define FIFOSIZEWIDTH 4'b0100
+`define RAMWIDTH 12'b010000000000
+`define RAMNUMBYTES 9'b010000000
+`define RAMSIZEWIDTH 4'b0111
+`define RATIO 6'b010000
+`define RAMLAT 4'b0101
+ 
+`define dIDLE 0
+`define dWRITE 1
+`define dREAD 2
+
+module DataTransferUnit (clk, dtu_write_req, dtu_read_req, dtu_mem_addr, dtu_ram_addr, dtu_size, dtu_ack, dtu_done,
+		ram_read_addr, ram_read_data, ram_write_byte_en, ram_write_data, ram_write_addr, ram_write_en,
+		mem_rdata, mem_rdata_valid, mem_ready, mem_wdata_req, reset_n,
+		burst_begin, mem_local_addr, mem_be, mem_read_req, mem_size, mem_wdata, mem_write_req
+		);
+
+output burst_begin;
+output [`DDRSIZEWIDTH-1:0] mem_local_addr;
+output [`MEMCONNUMBYTES-1: 0] mem_be;
+output mem_read_req;
+output [`BURSTWIDTH-1:0] mem_size;
+output [`MEMCONWIDTH-1:0] mem_wdata;
+output mem_write_req;
+input clk;
+input [`MEMCONWIDTH-1:0] mem_rdata;
+input mem_rdata_valid;
+input mem_ready;
+input mem_wdata_req;
+input reset_n;
+
+input dtu_write_req;
+input dtu_read_req;
+input [`DDRSIZEWIDTH-1:0] dtu_mem_addr;
+input [`RAMSIZEWIDTH-1:0] dtu_ram_addr;
+input [6:0] dtu_size;
+output dtu_ack;
+output dtu_done;
+
+output[`RAMWIDTH-1:0] ram_write_data;
+input[`RAMWIDTH-1:0] ram_read_data;
+output[`RAMSIZEWIDTH-1:0] ram_write_addr, ram_read_addr;
+output[`RAMNUMBYTES-1:0] ram_write_byte_en;
+output ram_write_en;
+
+reg[`DDRSIZEWIDTH-1:0] mem_addr0;
+reg[`DDRSIZEWIDTH-1:0] mem_addr1;
+reg[`DDRSIZEWIDTH-1:0] mem_addr2;
+reg[`DDRSIZEWIDTH-1:0] mem_addr3;
+reg[`DDRSIZEWIDTH-1:0] mem_addr4;
+reg[`DDRSIZEWIDTH-1:0] mem_addr5;
+
+reg [1:0] state;
+wire [`DATAWIDTH-1:0] rdata, ram_write_dataw, ram_read_dataw;
+
+wire [`RAMSIZEWIDTH-1:0] rfifo_addr;
+reg [`RAMLAT-1:0]fifo_write_reg;
+reg [`RAMLAT-1:0]write_req_reg;
+reg [`RAMLAT-1:0]read_req_reg;
+reg [0:0]fifo_read_reg;
+reg rdata_valid;
+reg [1:0]test_complete_reg;
+reg [`BURSTWIDTH-1:0] size_count0;
+reg [`BURSTWIDTH-1:0] size_count1;
+reg [`BURSTWIDTH-1:0] size_count2;
+reg [`BURSTWIDTH-1:0] size_count3;
+reg [`BURSTWIDTH-1:0] size_count4;
+
+reg [`RAMSIZEWIDTH-1:0] size;
+reg [`RAMSIZEWIDTH-1:0]ram_addr0;
+reg [`RAMSIZEWIDTH-1:0]ram_addr1;
+reg [`RAMSIZEWIDTH-1:0]ram_addr2;
+reg [`RAMSIZEWIDTH-1:0]ram_addr3;
+reg [`RAMSIZEWIDTH-1:0]ram_addr4;
+
+reg [4:0] data_count;
+reg ram_write_en_reg;
+
+wire read_req;
+wire write_req;
+wire [`FIFOSIZEWIDTH-1:0] wfifo_count;
+wire rfull, wempty, rempty, rdcmd_empty, wrcmd_full, wrcmd_empty, rdata_empty;
+wire [`DATAWIDTH-1:0] mem_data;
+wire not_stall;
+wire fifo_write, fifo_read;
+wire rdata_req;
+wire [`BURSTWIDTH+`DDRSIZEWIDTH+1:0] wrmem_cmd, rdmem_cmd;
+wire mem_cmd_ready, mem_cmd_issue;
+
+// FIFOs to interact with off-chip memory
+memcmd_fifo cmd_store(
+	//.aclr(~reset_n),
+	//.rdclk(phy_clk),
+	.clk(clk),
+	.data(wrmem_cmd),
+	.rdreq(mem_cmd_ready),
+	//.rdempty(rdcmd_empty),
+	.wrreq(mem_cmd_issue),
+	.full(wrcmd_full),
+	.empty(wrcmd_empty),
+	.q(rdmem_cmd)
+	);
+
+wfifo wdata_store(
+	//.rdclk(phy_clk),
+	.clk(clk),
+	.data(mem_data),
+	.rdreq(mem_wdata_req),
+	.wrreq(fifo_write),
+	.empty(wempty),
+	.q(mem_wdata),
+	.usedw(wfifo_count)
+	);
+
+addr_fifo raddress_store (
+	.clk(clk),
+	.data(ram_addr3),
+	.wrreq(fifo_read),
+	.rdreq(rdata_req),
+	.empty(rempty),
+	.full(rfull),
+	.q(rfifo_addr)
+	);
+
+rfifo rdata_store(
+	.clk(clk),
+	.data(mem_rdata),
+	.rdreq(rdata_req),
+	//.wrclk(phy_clk),
+	.wrreq(mem_rdata_valid),
+	.empty(rdata_empty),
+	.q(rdata)
+	);
+
+assign mem_cmd_ready = (mem_ready == 1'b1);// && (rdcmd_empty == 0);
+assign mem_cmd_issue = (wrcmd_full == 1'b0) && (write_req == 1 || read_req == 1'b1 || wrcmd_empty == 1'b1);
+assign wrmem_cmd[27:26] = size_count0;
+assign wrmem_cmd[`DDRSIZEWIDTH+1:2] = mem_addr0;
+assign wrmem_cmd[1] = read_req;
+assign wrmem_cmd[0] = write_req;
+assign mem_write_req = rdmem_cmd[0];// && rdcmd_empty == 0;
+assign mem_read_req = rdmem_cmd[1];// && rdcmd_empty == 0;
+assign mem_local_addr = rdmem_cmd[`DDRSIZEWIDTH+1:2];
+assign burst_begin = 0;
+assign mem_size = rdmem_cmd[`BURSTWIDTH+`DDRSIZEWIDTH+1:`DDRSIZEWIDTH+2];
+assign mem_be = ~0;
+assign fifo_write = fifo_write_reg[0];
+assign write_req = (not_stall) ? write_req_reg[0] : 0;
+assign read_req = (not_stall) ? read_req_reg[0] : 0;
+assign fifo_read = (not_stall) ? fifo_read_reg[0] : 0;
+assign not_stall = (wfifo_count < `FIFOSIZE-5) && (rfull == 0) && (wrcmd_full == 0);
+assign dtu_ack = (state == `dIDLE);
+assign dtu_done = (state == `dIDLE) && wempty && rempty;
+
+assign ram_write_dataw[63:0] = rdata[1023:960];
+assign mem_data[63:0] = ram_read_dataw[1023:960];
+assign ram_write_dataw[127:64] = rdata[959:896];
+assign mem_data[127:64] = ram_read_dataw[959:896];
+assign ram_write_dataw[191:128] = rdata[895:832];
+assign mem_data[191:128] = ram_read_dataw[895:832];
+assign ram_write_dataw[255:192] = rdata[831:768];
+assign mem_data[255:192] = ram_read_dataw[831:768];
+assign ram_write_dataw[319:256] = rdata[767:704];
+assign mem_data[319:256] = ram_read_dataw[767:704];
+assign ram_write_dataw[383:320] = rdata[703:640];
+assign mem_data[383:320] = ram_read_dataw[703:640];
+assign ram_write_dataw[447:384] = rdata[639:576];
+assign mem_data[447:384] = ram_read_dataw[639:576];
+assign ram_write_dataw[511:448] = rdata[575:512];
+assign mem_data[511:448] = ram_read_dataw[575:512];
+assign ram_write_dataw[575:512] = rdata[511:448];
+assign mem_data[575:512] = ram_read_dataw[511:448];
+assign ram_write_dataw[639:576] = rdata[447:384];
+assign mem_data[639:576] = ram_read_dataw[447:384];
+assign ram_write_dataw[703:640] = rdata[383:320];
+assign mem_data[703:640] = ram_read_dataw[383:320];
+assign ram_write_dataw[767:704] = rdata[319:256];
+assign mem_data[767:704] = ram_read_dataw[319:256];
+assign ram_write_dataw[831:768] = rdata[255:192];
+assign mem_data[831:768] = ram_read_dataw[255:192];
+assign ram_write_dataw[895:832] = rdata[191:128];
+assign mem_data[895:832] = ram_read_dataw[191:128];
+assign ram_write_dataw[959:896] = rdata[127:64];
+assign mem_data[959:896] = ram_read_dataw[127:64];
+assign ram_write_dataw[1023:960] = rdata[63:0];
+assign mem_data[1023:960] = ram_read_dataw[63:0];
+assign ram_write_data = ram_write_dataw[1023:0];
+assign ram_read_dataw[1023:0] = ram_read_data;
+assign ram_write_addr = rfifo_addr;
+assign ram_read_addr = ram_addr4;
+assign ram_write_byte_en = ~0;
+assign ram_write_en = ram_write_en_reg;
+assign rdata_req = !rdata_empty;
+
+// FSM to produce off-chip memory commands
+always @ (posedge clk)
+begin
+	if (reset_n == 1'b0)
+	begin
+		state <= `dIDLE;
+	end
+	else
+	begin
+		case (state)
+		`dIDLE:
+		begin
+			if (dtu_write_req)
+				state <= `dWRITE;
+			else if (dtu_read_req)
+				state <= `dREAD;
+			else
+				state <= `dIDLE;
+		end
+		`dWRITE:
+		begin
+			if (not_stall && size == 0 && data_count < `BURSTLEN)
+				state <= `dIDLE;
+			else
+				state <= `dWRITE;
+		end
+		`dREAD:
+		begin
+			if (not_stall && size == 0 && data_count < `BURSTLEN)
+				state <= `dIDLE;
+			else
+				state <= `dREAD;
+		end
+		default:
+		begin
+			state <= `dIDLE;
+		end
+		endcase
+	end
+end
+
+always @ (posedge clk)
+begin
+
+	if (reset_n == 0)
+	begin
+		size <= 0;
+		data_count <= 0;
+		size_count4 <= 1;
+		mem_addr5 <= 0;
+		ram_addr4 <= 0;
+		fifo_write_reg[`RAMLAT-1] <= 0;
+		write_req_reg[`RAMLAT-1] <= 0;
+		fifo_read_reg[0] <= 0;
+		read_req_reg[`RAMLAT-1] <= 0;
+	end
+	else if (state == `dIDLE)
+	begin
+		size <= dtu_size;
+		size_count4 <= `BURSTLEN;
+		mem_addr5 <= dtu_mem_addr;
+		ram_addr4 <= dtu_ram_addr;
+		fifo_write_reg[`RAMLAT-1] <= 1'b0;
+		write_req_reg[`RAMLAT-1] <= 1'b0;
+		fifo_read_reg[0] <= 1'b0;
+		read_req_reg[`RAMLAT-1] <= 1'b0;
+		data_count <= 0;
+	end
+	else if (data_count >= `BURSTLEN && not_stall)
+	begin
+		data_count <= data_count - `BURSTLEN;
+		mem_addr5 <= mem_addr5 + `BURSTLEN;
+		fifo_write_reg[`RAMLAT-1] <= 1'b0;
+		write_req_reg[`RAMLAT-1] <= state == `dWRITE;
+		fifo_read_reg[0] <= 0;
+		read_req_reg[`RAMLAT-1] <= state == `dREAD;
+	end
+	else if (size == 0 && data_count == 0 && not_stall==1'b1)
+	begin
+		fifo_write_reg[`RAMLAT-1] <= 0;
+		write_req_reg[`RAMLAT-1] <= 0;
+		fifo_read_reg[0] <= 0;
+		read_req_reg[`RAMLAT-1] <= 0;
+	end
+	else if (size == 0 && not_stall==1'b1)
+	begin
+		size_count4 <= data_count[`BURSTWIDTH-1:0];
+		fifo_write_reg[`RAMLAT-1] <= 0;
+		write_req_reg[`RAMLAT-1] <= state == `dWRITE;
+		fifo_read_reg[0] <= 0;
+		read_req_reg[`RAMLAT-1] <= state == `dREAD;
+	end
+	else if (not_stall==1'b1)
+	begin
+		size <= size - 1;
+		data_count <= data_count + `RATIO - `BURSTLEN;
+		mem_addr5 <= mem_addr5 + `BURSTLEN;
+		ram_addr4 <= ram_addr4+1;
+		fifo_write_reg[`RAMLAT-1] <= state == `dWRITE;
+		write_req_reg[`RAMLAT-1] <= state == `dWRITE;
+		fifo_read_reg[0] <= state == `dREAD;
+		read_req_reg[`RAMLAT-1] <= state == `dREAD;
+	end
+	else
+	begin
+		fifo_write_reg[`RAMLAT-1] <= 0;
+	end
+end
+
+
+always @ (posedge clk)
+begin
+	if (reset_n == 0)
+	begin
+		fifo_write_reg[0] <= 1'b0;
+		fifo_write_reg[1] <= 1'b0;
+		fifo_write_reg[2] <= 1'b0;
+		fifo_write_reg[3] <= 1'b0;
+	end
+	else
+	begin
+		fifo_write_reg[0] <= fifo_write_reg[1];
+		fifo_write_reg[1] <= fifo_write_reg[2];
+		fifo_write_reg[2] <= fifo_write_reg[3];
+		fifo_write_reg[3] <= fifo_write_reg[4];
+	end
+
+	if (reset_n == 1'b0)
+	begin
+		mem_addr0 <= 0;
+		ram_addr0 <= 0;
+		size_count0 <= 1;
+		write_req_reg[0] <= 0;
+		read_req_reg[0] <= 0;
+		mem_addr1 <= 0;
+		ram_addr1 <= 0;
+		size_count1 <= 1;
+		write_req_reg[1] <= 0;
+		read_req_reg[1] <= 0;
+		mem_addr2 <= 0;
+		ram_addr2 <= 0;
+		size_count2 <= 1;
+		write_req_reg[2] <= 0;
+		read_req_reg[2] <= 0;
+		mem_addr3 <= 0;
+		ram_addr3 <= 0;
+		size_count3 <= 1;
+		write_req_reg[3] <= 0;
+		read_req_reg[3] <= 0;
+		mem_addr4 <= 0;
+	end
+	else if (not_stall)
+	begin
+		size_count0 <= size_count1;
+		mem_addr0 <= mem_addr1;
+		ram_addr0 <= ram_addr1;
+		write_req_reg[0] <= write_req_reg[1];
+		read_req_reg[0] <= read_req_reg[1];
+		size_count1 <= size_count2;
+		mem_addr1 <= mem_addr2;
+		ram_addr1 <= ram_addr2;
+		write_req_reg[1] <= write_req_reg[2];
+		read_req_reg[1] <= read_req_reg[2];
+		size_count2 <= size_count3;
+		mem_addr2 <= mem_addr3;
+		ram_addr2 <= ram_addr3;
+		write_req_reg[2] <= write_req_reg[3];
+		read_req_reg[2] <= read_req_reg[3];
+		size_count3 <= size_count4;
+		mem_addr3 <= mem_addr4;
+		ram_addr3 <= ram_addr4;
+		write_req_reg[3] <= write_req_reg[4];
+		read_req_reg[3] <= read_req_reg[4];
+		mem_addr4 <= mem_addr5;
+	end
+	
+	ram_write_en_reg  <= rdata_req;
+end
+
+endmodule
+
+module rfifo (
+	clk,
+	data,
+	rdreq,
+	wrreq,
+	empty,
+	q
+	);
+
+
+	input	  clk;
+	input	  wrreq;
+	input	  rdreq;
+	input	[`rFIFOINPUTWIDTH-1:0]  data;
+	output	  empty;
+	output	[`rFIFOOUTPUTWIDTH-1:0]  q;
+
+	reg [`rFIFORSIZEWIDTH-1:0] wr_pointer;
+	reg [`rFIFORSIZEWIDTH-1:0] rd_pointer;
+	reg [`rFIFORSIZEWIDTH:0] status_cnt;
+	reg [`rFIFOOUTPUTWIDTH-1:0] q ;
+	reg[3:0] counter;
+	wire [`rFIFOINPUTWIDTH-1:0] data_ram;
+assign empty = (status_cnt == 9'b000000000);
+wire [`rFIFOINPUTWIDTH-1:0]junk_input;
+wire [`rFIFOINPUTWIDTH-1:0]junk_output;
+assign junk_input = 64'b0000000000000000000000000000000000000000000000000000000000000000;
+ always @ (posedge clk)
+ begin  //WRITE_POINTER
+	if (wrreq) 
+	begin
+ 		wr_pointer <= wr_pointer + 1'b1;
+	end
+end
+always @ (posedge clk)
+begin  //READ_POINTER
+	if (rdreq) 
+	begin
+	rd_pointer <= rd_pointer + 2'b01;
+	end
+end
+always  @ (posedge clk )
+begin  //READ_DATA
+if (rdreq) 
+	counter <= 0;
+else 
+	counter <= counter + 2'b01;
+if(counter == 0)
+	q[`rFIFOINPUTWIDTH-1:0] <= data_ram;
+else if (counter == 1)
+	q[127:64] <= data_ram;
+else if (counter == 2)
+	q[191:128] <= data_ram;
+else if (counter == 3)
+	q[255:192] <= data_ram;
+else if (counter == 4)
+	q[319:256] <= data_ram;
+else if (counter == 5)
+	q[383:320] <= data_ram;
+else if (counter == 6)
+	q[447:384] <= data_ram;
+else if (counter == 7)
+	q[511:448] <= data_ram;
+else if (counter == 8)
+	q[575:512] <= data_ram;
+else if (counter == 9)
+	q[639:576] <= data_ram;
+else if (counter == 10)
+	q[703:640] <= data_ram;
+else if (counter == 11)
+	q[767:704] <= data_ram;
+else if (counter == 12)
+	q[831:768] <= data_ram;
+else if (counter == 13)
+	q[895:832] <= data_ram;
+else if (counter == 14)
+	q[959:896] <= data_ram;
+else if (counter == 15)
+	q[1023:960] <= data_ram;
+end
+always @ (posedge clk )
+begin // : STATUS_COUNTER
+	if ((rdreq) && (!wrreq) && (status_cnt != 0))
+		status_cnt <= status_cnt - 1'b1;
+// Write but no read.
+	else if ((wrreq) && (!rdreq) && (status_cnt != 64 ))
+		status_cnt <= status_cnt + 1'b1;
+end 
+  dual_port_ram #(.ADDR_WIDTH(`rFIFORSIZEWIDTH),.DATA_WIDTH(`rFIFOINPUTWIDTH)) ram_addr(
+.we1      (wrreq)      , // write enable
+ .we2      (rdreq)       , // Read enable
+.addr1 (wr_pointer) , // address_0 input 
+.addr2 (rd_pointer) , // address_q input  
+.data1    (data)    , // data_0 bi-directional
+.data2    (junk_input),   // data_1 bi-directional
+.clk(clk),
+.out1	(data_ram),
+.out2	(junk_output)
+ ); 
+
+
+endmodule
+
+
+// synopsys translate_off
+//`timescale 1 ps / 1 ps
+// synopsys translate_on
+module wfifo (
+	clk,
+	data,
+	rdreq,
+	wrreq,
+	empty,
+	q,
+	usedw
+	);
+
+	input	clk;
+	input	  wrreq;
+	input	  rdreq;
+	input	[`wFIFOINPUTWIDTH-1:0]  data;
+	output	  empty;
+	output	[`wFIFOOUTPUTWIDTH-1:0]  q;
+	output	[`wFIFOSIZEWIDTH-1:0]  usedw;
+//-----------Internal variables-------------------
+reg [`wFIFOSIZEWIDTH-1:0] wr_pointer;
+reg [`wFIFOSIZEWIDTH-1:0] rd_pointer;
+reg [`wFIFOSIZEWIDTH:0] status_cnt;
+reg [`wFIFOOUTPUTWIDTH-1:0] q ;
+reg[3:0] counter;
+wire [`wFIFOINPUTWIDTH-1:0] data_ram ;
+assign empty = (status_cnt == 5'b00000);
+wire [`wFIFOINPUTWIDTH-1:0]junk_input;
+wire [`wFIFOINPUTWIDTH-1:0]junk_output;
+assign junk_input = 1024'b0;
+ always @ (posedge clk)
+ begin  //WRITE_POINTER
+	if (wrreq) 
+	begin
+ 		wr_pointer <= wr_pointer + 1'b1;
+	end
+end
+always @ (posedge clk)
+begin  //READ_POINTER
+	if (rdreq) 
+	begin
+	rd_pointer <= rd_pointer + 2'b01;
+	end
+end
+always  @ (posedge clk )
+begin  //READ_DATA
+if (rdreq) 
+	counter <= 0;
+else 
+	counter <= counter + 2'b01;
+if(counter == 0)
+	q <= data_ram[63:0];
+else if(counter == 1)
+	q <= data_ram[127:64];
+else if(counter == 2)
+	q <= data_ram[191:128];
+else if(counter == 3)
+	q <= data_ram[255:192];
+else if(counter == 4)
+	q <= data_ram[319:256];
+else if(counter == 5)
+	q <= data_ram[383:320];
+else if(counter == 6)
+	q <= data_ram[447:384];
+else if(counter == 7)
+	q <= data_ram[511:448];
+else if(counter == 8)
+	q <= data_ram[575:512];
+else if(counter == 9)
+	q <= data_ram[639:576];
+else if(counter == 10)
+	q <= data_ram[703:640];
+else if(counter == 11)
+	q <= data_ram[767:704];
+else if(counter == 12)
+	q <= data_ram[831:768];
+else if(counter == 13)
+	q <= data_ram[895:832];
+else if(counter == 14)
+	q <= data_ram[959:896];
+else if(counter == 15)
+	q <= data_ram[1023:960];
+end
+always @ (posedge clk )
+begin // : STATUS_COUNTER
+	if ((rdreq) && (!wrreq) && (status_cnt != 5'b00000))
+		status_cnt <= status_cnt - 1'b1;
+	// Write but no read.
+	else if ((wrreq) && (!rdreq) && (status_cnt != 5'b10000 )) 
+		status_cnt <= status_cnt + 1'b1;
+end 
+assign usedw = status_cnt[`wFIFOSIZEWIDTH-1:0];
+  dual_port_ram #(.ADDR_WIDTH(`wFIFOSIZEWIDTH),.DATA_WIDTH(`wFIFOINPUTWIDTH)) ram_addr(
+.we1      (wrreq)      , // write enable
+ .we2      (rdreq)       , // Read enable
+.addr1 (wr_pointer) , // address_0 input 
+.addr2 (rd_pointer) , // address_q input  
+.data1    (data)    , // data_0 bi-directional
+.data2    (junk_input),   // data_1 bi-directional
+.clk(clk),
+.out1	(data_ram),
+.out2	(junk_output)
+ ); 
+
+
+endmodule
+
+// synopsys translate_off
+//`timescale 1 ps / 1 ps
+// synopsys translate_on
+module addr_fifo (
+	clk,
+	data,
+	wrreq,
+	rdreq,
+	empty,
+	full,
+	q
+	);
+
+	input	  clk;
+	input	[`aFIFOWIDTH-1:0]  data;
+	input	  rdreq;
+	input	  wrreq;
+	output	  empty;
+	output	  full;
+	output	[`aFIFOWIDTH-1:0]  q;
+
+reg [`aFIFOSIZEWIDTH-1:0] wr_pointer;
+reg [`aFIFOSIZEWIDTH-1:0] rd_pointer;
+reg [`aFIFOSIZEWIDTH:0] status_cnt;
+reg [`aFIFOWIDTH-1:0] q ;
+wire [`aFIFOWIDTH-1:0] data_ram ;
+assign full = (status_cnt == 5'b01111);
+assign empty = (status_cnt == 5'b00000);
+wire [`aFIFOWIDTH-1:0]junk_input;
+wire [`aFIFOWIDTH-1:0]junk_output;
+assign junk_input = 7'b0000000;
+always @ (posedge clk)
+begin  //WRITE_POINTER
+if (wrreq) 
+begin
+wr_pointer <= wr_pointer + 1'b1;
+end
+end
+always @ (posedge clk)
+begin  //READ_POINTER
+if (rdreq) 
+begin
+rd_pointer <= rd_pointer + 1'b1;
+end
+end
+always  @ (posedge clk )
+begin  //READ_DATA
+if (rdreq) begin
+q <= data_ram; 
+end
+end
+always @ (posedge clk )
+begin // : STATUS_COUNTER
+	if ((rdreq) && (!wrreq) && (status_cnt != 5'b00000))
+		status_cnt <= status_cnt - 1'b1;
+	// Write but no read.
+	else if ((wrreq) && (!rdreq) && (status_cnt != 5'b10000))
+		status_cnt <= status_cnt + 1;
+end
+  dual_port_ram #(.ADDR_WIDTH(`aFIFOSIZEWIDTH),.DATA_WIDTH(`aFIFOWIDTH)) ram_addr(
+.we1      (wrreq)      , // write enable
+ .we2      (rdreq)       , // Read enable
+.addr1 (wr_pointer) , // address_0 input 
+.addr2 (rd_pointer) , // address_q input  
+.data1    (data)    , // data_0 bi-directional
+.data2    (junk_input),   // data_1 bi-directional
+.clk(clk),
+.out1	(data_ram),
+.out2	(junk_output)
+ ); 
+
+
+endmodule
+
+module memcmd_fifo (
+	clk,
+	data,
+	rdreq,
+	wrreq,
+	full,
+	empty,
+	q
+	);
+	
+	input	  clk;
+	input	[`mFIFOWIDTH-1:0]  data;
+	input	  wrreq;
+	input	  rdreq;
+	output	  full;
+	output	  empty;
+	output	[`mFIFOWIDTH-1:0]  q;
+
+	reg [`mFIFOSIZEWIDTH-1:0] wr_pointer;
+	reg [`mFIFOSIZEWIDTH-1:0] rd_pointer;
+	reg [`mFIFOSIZEWIDTH:0] status_cnt;
+	reg [`mFIFOWIDTH-1:0] q ;
+	wire [`mFIFOWIDTH-1:0] data_ram;
+	assign full = (status_cnt ==5'b01111);
+	assign empty = (status_cnt == 5'b00000);
+	wire [`mFIFOWIDTH-1:0]junk_input;
+	wire [`mFIFOWIDTH-1:0]junk_output;
+	assign junk_input = 28'b0000000000000000000000000000;
+	always @ (posedge clk)
+	begin  //WRITE_POINTER
+		if (wrreq)
+			begin
+				wr_pointer <= wr_pointer + 1'b1;
+			end
+	end
+	always @ (posedge clk)
+	begin  //READ_POINTER
+		if (rdreq)
+		begin
+			rd_pointer <= rd_pointer + 1'b1;
+		end
+	end
+	always  @ (posedge clk )
+	begin  //READ_DATA
+		if (rdreq) begin
+			q <= data_ram;
+		end
+	end
+always @ (posedge clk )
+begin // : STATUS_COUNTER
+	if ((rdreq) && (!wrreq) && (status_cnt != 0))
+		status_cnt <= status_cnt - 1'b1;
+	else if ((wrreq) && (!rdreq) && (status_cnt != 16 ))
+		status_cnt <= status_cnt + 1'b1;
+end
+	dual_port_ram #(.ADDR_WIDTH(`mFIFOSIZEWIDTH),.DATA_WIDTH(`mFIFOWIDTH)) ram_addr(
+	.we1      (wrreq)      , // write enable
+	.we2      (rdreq)       , // Read enable
+	.addr1 (wr_pointer) , // address_0 input
+	.addr2 (rd_pointer) , // address_q input
+	.data1    (data)    , // data_0 bi-directional
+	.data2    (junk_input),   // data_1 bi-directional
+	.clk(clk),
+	.out1	(data_ram),
+	.out2	(junk_output));
+
+
+endmodule
+
+
+`define ZERO        8'b00000000  
+`define ONE         8'b00000001  
+`define TWO         8'b00000010  
+`define THREE 		  8'b00000011  
+`define FOUR		  8'b00000100  
+`define FIVE		  8'b00000101  
+`define SIX         8'b00000110  
+`define SEVEN       8'b00000111  
+`define EIGHT       8'b00001000  
+`define NINE        8'b00001001  
+`define TEN         8'b00001010  
+`define ELEVEN      8'b00001011  
+`define TWELVE      8'b00001100  
+`define THIRTEEN    8'b00001101  
+`define FOURTEEN    8'b00001110  
+`define FIFTEEN     8'b00001111  
+`define SIXTEEN     8'b00010000  
+`define SEVENTEEN   8'b00010001  
+`define EIGHTEEN	  8'b00010010  
+`define NINETEEN    8'b00010011  
+`define TWENTY		  8'b00010100  
+`define TWENTYONE   8'b00010101  
+`define TWENTYTWO   8'b00010110  
+`define TWENTYTHREE 8'b00010111  
+`define TWENTYFOUR  8'b00011000  
+  
+module fpu_add (clock, a1, b1, sum);  
+	input clock;  
+	input [31:0]a1;  
+	input [31:0]b1;  
+	output [31:0]sum;  
+	reg [31:0]sum;  
+	  
+	//Split up the numbers into exponents and mantissa.  
+	reg [7:0]a_exp; 
+	//reg [7:0]b_exp;  
+	reg [23:0]a_man; 
+	reg [23:0]b_man; 
+  
+	reg [7:0]temp;  
+	  
+	reg [24:0]sum_man;  
+	//reg [7:0]sum_exp;  
+	  
+	//introduce latency on inputs  
+	reg [31:0]a;  
+	reg [31:0]b;  
+	  
+	always @ (posedge clock) begin  
+		a <= a1;  
+		b <= b1;  
+	end  
+	  
+	reg smaller; //smaller is 1 if a < b, 0 otherwise  
+	  
+	//Shift mantissa's to have the same exponent  
+	always @ (a or b) begin  
+		//a_exp = a[30:23];  
+		//b_exp = b[30:23];  
+		//a_man = {1'b1, a[22:0]};  
+	   //b_man = {1'b1, b[22:0]};  
+		  
+		if (a[30:23] < b[30:23]) begin  
+			temp = b[30:23] - a[30:23];  
+			//a_man = {1'b1, a[22:0]} >> temp; //Expand into case statement, as below.  
+			case (temp)   
+				`ONE: begin  
+					a_man = {1'b1, a[22:0]} >> `ONE;  
+				end  
+				`TWO: begin  
+					a_man = {1'b1, a[22:0]} >> `TWO;  
+				end  
+				`THREE: begin  
+					a_man = {1'b1, a[22:0]} >> `THREE;  
+				end  
+				`FOUR: begin  
+					a_man = {1'b1, a[22:0]} >> `FOUR;  
+				end  
+				`FIVE: begin  
+					a_man = {1'b1, a[22:0]} >> `FIVE;  
+				end  
+				`SIX: begin  
+					a_man = {1'b1, a[22:0]} >> `SIX;  
+				end  
+				`SEVEN: begin  
+					a_man = {1'b1, a[22:0]} >> `SEVEN;  
+				end  
+				`EIGHT: begin  
+					a_man = {1'b1, a[22:0]} >> `EIGHT;  
+				end  
+				`NINE: begin  
+					a_man = {1'b1, a[22:0]} >> `NINE;  
+				end  
+				`TEN: begin  
+					a_man = {1'b1, a[22:0]} >> `TEN;  
+				end  
+				`ELEVEN: begin  
+					a_man = {1'b1, a[22:0]} >> `ELEVEN;  
+				end  
+				`TWELVE: begin  
+					a_man = {1'b1, a[22:0]} >> `TWELVE;  
+				end  
+				`THIRTEEN: begin  
+					a_man = {1'b1, a[22:0]} >> `THIRTEEN;  
+				end  
+				`FOURTEEN: begin  
+					a_man = {1'b1, a[22:0]} >> `FOURTEEN;  
+				end  
+				`FIFTEEN: begin  
+					a_man = {1'b1, a[22:0]} >> `FIFTEEN;  
+				end  
+				`SIXTEEN: begin  
+					a_man = {1'b1, a[22:0]} >> `SIXTEEN;  
+				end  
+				`SEVENTEEN: begin  
+					a_man = {1'b1, a[22:0]} >> `SEVENTEEN;  
+				end  
+				`EIGHTEEN: begin  
+					a_man = {1'b1, a[22:0]} >> `EIGHTEEN;  
+				end  
+				`NINETEEN: begin  
+					a_man = {1'b1, a[22:0]} >> `NINETEEN;  
+				end  
+				`TWENTY: begin  
+					a_man = {1'b1, a[22:0]} >> `TWENTY;  
+				end  
+				`TWENTYONE: begin  
+					a_man = {1'b1, a[22:0]} >> `TWENTYONE;  
+				end  
+				`TWENTYTWO: begin  
+					a_man = {1'b1, a[22:0]} >> `TWENTYTWO;  
+				end  
+				`TWENTYTHREE: begin  
+					a_man = {1'b1, a[22:0]} >> `TWENTYTHREE;  
+				end  
+				`TWENTYFOUR: begin  
+					a_man = {1'b1, a[22:0]} >> `TWENTYFOUR;  
+				end  
+				default: begin //More than twenty-four, shift by twenty-four. It is a boundary case.  
+					a_man = {1'b1, a[22:0]} >> `TWENTYFOUR;  
+				end  
+			endcase   
+				  
+			b_man = {1'b1, b[22:0]};  
+			a_exp = b[30:23];  
+			//b_exp = b[30:23];  
+			  
+		end else if (a[30:23] > b[30:23]) begin  
+			temp = a[30:23] - b[30:23];  
+			a_man = {1'b1, a[22:0]};  
+			//b_man = {1'b1, b[22:0]} >> temp; //Expand into case statement, as below.  
+			case (temp)   
+				`ONE: begin  
+					b_man = {1'b1, b[22:0]} >> `ONE;  
+				end  
+				`TWO: begin  
+					b_man = {1'b1, b[22:0]} >> `TWO;  
+				end  
+				`THREE: begin  
+					b_man = {1'b1, b[22:0]} >> `THREE;  
+				end  
+				`FOUR: begin  
+					b_man = {1'b1, b[22:0]} >> `FOUR;  
+				end  
+				`FIVE: begin  
+					b_man = {1'b1, b[22:0]} >> `FIVE;  
+				end  
+				`SIX: begin  
+					b_man = {1'b1, b[22:0]} >> `SIX;  
+				end  
+				`SEVEN: begin  
+					b_man = {1'b1, b[22:0]} >> `SEVEN;  
+				end  
+				`EIGHT: begin  
+					b_man = {1'b1, b[22:0]} >> `EIGHT;  
+				end  
+				`NINE: begin  
+					b_man = {1'b1, b[22:0]} >> `NINE;  
+				end  
+				`TEN: begin  
+					b_man = {1'b1, b[22:0]} >> `TEN;  
+				end  
+				`ELEVEN: begin  
+					b_man = {1'b1, b[22:0]} >> `ELEVEN;  
+				end  
+				`TWELVE: begin  
+					b_man = {1'b1, b[22:0]} >> `TWELVE;  
+				end  
+				`THIRTEEN: begin  
+					b_man = {1'b1, b[22:0]} >> `THIRTEEN;  
+				end  
+				`FOURTEEN: begin  
+					b_man = {1'b1, b[22:0]} >> `FOURTEEN;  
+				end  
+				`FIFTEEN: begin  
+					b_man = {1'b1, b[22:0]} >> `FIFTEEN;  
+				end  
+				`SIXTEEN: begin  
+					b_man = {1'b1, b[22:0]} >> `SIXTEEN;  
+				end  
+				`SEVENTEEN: begin  
+					b_man = {1'b1, b[22:0]} >> `SEVENTEEN;  
+				end  
+				`EIGHTEEN: begin  
+					b_man = {1'b1, b[22:0]} >> `EIGHTEEN;  
+				end  
+				`NINETEEN: begin  
+					b_man = {1'b1, b[22:0]} >> `NINETEEN;  
+				end  
+				`TWENTY: begin  
+					b_man = {1'b1, b[22:0]} >> `TWENTY;  
+				end  
+				`TWENTYONE: begin  
+					b_man = {1'b1, b[22:0]} >> `TWENTYONE;  
+				end  
+				`TWENTYTWO: begin  
+					b_man = {1'b1, b[22:0]} >> `TWENTYTWO;  
+				end  
+				`TWENTYTHREE: begin  
+					b_man = {1'b1, b[22:0]} >> `TWENTYTHREE;  
+				end  
+				`TWENTYFOUR: begin  
+					b_man = {1'b1, b[22:0]} >> `TWENTYFOUR;  
+				end  
+				default: begin //More than twenty-four, shift by twenty-four. It is a boundary case.  
+					b_man = {1'b1, b[22:0]} >> `TWENTYFOUR;  
+				end  
+			endcase   
+			  
+			a_exp = a[30:23];  
+			//b_exp = a[30:23];  
+		end else begin  
+			temp = 8'b0;  
+			a_man = {1'b1, a[22:0]};  
+			b_man = {1'b1, b[22:0]};  
+			a_exp = a[30:23];  
+		end  
+		  
+	end  
+  
+	//Perform the addition operation  
+	always @ (a_man or b_man or a or b) begin  
+		if (a_man < b_man) begin  
+			smaller = 1'b1;  
+		end else begin  
+			smaller = 1'b0;  
+		end  
+	  
+		//both positive  
+		if (~a[31] && ~b[31]) begin  
+			sum_man = a_man + b_man;  
+			sum[31] = 1'b0;  
+		end   
+		  
+		//both negative  
+		else if (a[31] && b[31]) begin  
+			sum_man = a_man + b_man;  
+			sum[31] = 1'b1;  
+		end  
+		  
+		//a pos, b neg  
+		else if (~a[31] && b[31]) begin  
+			if (smaller) begin //a < b  
+				sum_man = b_man - a_man;  
+				sum[31] = 1'b1;  
+			end else begin  
+				sum_man = a_man - b_man;  
+				sum[31] = 1'b0;  
+			end  
+		end  
+		  
+		//a neg, b pos  
+		else /*if (a[31] && ~b[31])*/ begin  
+			if (smaller) begin //a < b  
+				sum_man = b_man - a_man;  
+				sum[31] = 1'b0;  
+			end else begin  
+				sum_man = a_man - b_man;  
+				sum[31] = 1'b1;  
+			end  
+		end  
+	end  
+	  
+	//Store the number  
+	// we already have the sign.  
+	  
+	always @ (sum_man or a_exp) begin  
+		if (sum_man[24])begin //shif sum >> by 1, add 1 to the exponent.  
+			sum[22:0] = sum_man[23:1];  
+			sum[30:23] = a_exp + 8'b00000001;  
+			  
+		end else if (sum_man[23]) begin //do nothing  
+			sum[22:0] = sum_man[22:0];  
+			sum[30:23] = a_exp;  
+			  
+		end else if (sum_man[22]) begin //shift << by 1, subtract 1 from exponent. 
+			sum[22:0] = {sum_man[21:0], 1'b0}; 
+			sum[30:23] = a_exp - 8'b00000001; 
+ 
+		end else if (sum_man[21]) begin //shift << by 2, subtract 2 from exponent. 
+			sum[22:0] = {sum_man[20:0], 2'b0}; 
+			sum[30:23] = a_exp - 8'b00000010; 
+ 
+		end else if (sum_man[20]) begin //shift << by 3, subtract 3 from exponent. 
+			sum[22:0] = {sum_man[19:0], 3'b0}; 
+			sum[30:23] = a_exp - 8'b00000011; 
+ 
+		end else if (sum_man[19]) begin //shift << by 4, subtract 4 from exponent. 
+			sum[22:0] = {sum_man[18:0], 4'b0}; 
+			sum[30:23] = a_exp - 8'b00000100; 
+ 
+		end else if (sum_man[18]) begin //shift << by 5, subtract 5 from exponent. 
+			sum[22:0] = {sum_man[17:0], 5'b0}; 
+			sum[30:23] = a_exp - 8'b00000101; 
+ 
+		end else if (sum_man[17]) begin //shift << by 6, subtract 6 from exponent. 
+			sum[22:0] = {sum_man[16:0], 6'b0}; 
+			sum[30:23] = a_exp - 8'b00000110; 
+ 
+		end else if (sum_man[16]) begin //shift << by 7, subtract 7 from exponent. 
+			sum[22:0] = {sum_man[15:0], 7'b0}; 
+			sum[30:23] = a_exp - 8'b00000111; 
+ 
+		end else if (sum_man[15]) begin //shift << by 8, subtract 8 from exponent. 
+			sum[22:0] = {sum_man[14:0], 8'b0}; 
+			sum[30:23] = a_exp - 8'b00001000; 
+ 
+		end else if (sum_man[14]) begin //shift << by 9, subtract 9 from exponent. 
+			sum[22:0] = {sum_man[13:0], 9'b0}; 
+			sum[30:23] = a_exp - 8'b00001001; 
+ 
+		end else if (sum_man[13]) begin //shift << by 10, subtract 10 from exponent. 
+			sum[22:0] = {sum_man[12:0], 10'b0}; 
+			sum[30:23] = a_exp - 8'b00001010; 
+ 
+		end else if (sum_man[12]) begin //shift << by 11, subtract 11 from exponent. 
+			sum[22:0] = {sum_man[11:0], 11'b0}; 
+			sum[30:23] = a_exp - 8'b00001011; 
+ 
+		end else if (sum_man[11]) begin //shift << by 12, subtract 12 from exponent. 
+			sum[22:0] = {sum_man[10:0], 12'b0}; 
+			sum[30:23] = a_exp - 8'b00001100; 
+ 
+		end else if (sum_man[10]) begin //shift << by 13, subtract 13 from exponent. 
+			sum[22:0] = {sum_man[9:0], 13'b0}; 
+			sum[30:23] = a_exp - 8'b00001101; 
+ 
+		end else if (sum_man[9]) begin //shift << by 14, subtract 14 from exponent. 
+			sum[22:0] = {sum_man[8:0], 14'b0}; 
+			sum[30:23] = a_exp - 8'b00001110; 
+ 
+		end else if (sum_man[8]) begin //shift << by 15, subtract 15 from exponent. 
+			sum[22:0] = {sum_man[7:0], 15'b0}; 
+			sum[30:23] = a_exp - 8'b00001111; 
+ 
+		end else if (sum_man[7]) begin //shift << by 16, subtract 16 from exponent. 
+			sum[22:0] = {sum_man[6:0], 16'b0}; 
+			sum[30:23] = a_exp - 8'b00010000; 
+ 
+		end else if (sum_man[6]) begin //shift << by 17, subtract 17 from exponent. 
+			sum[22:0] = {sum_man[5:0], 17'b0}; 
+			sum[30:23] = a_exp - 8'b00010001; 
+ 
+		end else if (sum_man[5]) begin //shift << by 18, subtract 18 from exponent. 
+			sum[22:0] = {sum_man[4:0], 18'b0}; 
+			sum[30:23] = a_exp - 8'b00010010; 
+ 
+		end else if (sum_man[4]) begin //shift << by 19, subtract 19 from exponent. 
+			sum[22:0] = {sum_man[3:0], 19'b0}; 
+			sum[30:23] = a_exp - 8'b00010011; 
+ 
+		end else if (sum_man[3]) begin //shift << by 20, subtract 20 from exponent. 
+			sum[22:0] = {sum_man[2:0], 20'b0}; 
+			sum[30:23] = a_exp - 8'b00010100; 
+ 
+		end else if (sum_man[2]) begin //shift << by 21, subtract 21 from exponent. 
+			sum[22:0] = {sum_man[1:0], 21'b0}; 
+			sum[30:23] = a_exp - 8'b00010101; 
+ 
+		end else if (sum_man[1]) begin //shift << by 22, subtract 22 from exponent. 
+			sum[22:0] = {sum_man[0:0], 22'b0}; 
+			sum[30:23] = a_exp - 8'b00010110; 
+ 
+		end else /*if (sum_man[0])*/ begin //shift << by 23, subtract 23 from exponent. 
+			sum[22:0] = 23'b0; 
+			sum[30:23] = a_exp - 8'b00010111;  
+		end 
+		  
+	end  
+  
+endmodule   
+	
+module fpu_div(clock, n, d, div);  
+//n = numerator  
+//d = denomenator  
+//div = result  
+	input clock;  
+  
+	input [31:0]n;  
+	input [31:0]d;  
+	output [31:0]div;  
+	reg [31:0]div;  
+	  
+	//Store the mantissa and exponents separately. Introduce the latency of 1.  
+	reg [7:0]n_exp;  
+	reg [7:0]d_exp;  
+	reg [23:0]n_man;  
+	reg [23:0]d_man;  
+	reg n_sign;  
+	reg d_sign;  
+	  
+	wire [23:0]div_man;  
+	reg [7:0]div_exp;  
+	  
+	always @ (posedge clock) begin  
+		n_exp <= n[30:23];  
+		d_exp <= d[30:23];  
+		n_man <= {1'b1, n[22:0]};  
+		d_man <= {1'b1, d[22:0]};  
+		n_sign <= n[31];  
+		d_sign <= d[31];  
+	end  
+	  
+	//Find the exponent, store in div_exp.  
+	always @ (n_exp or d_exp) begin  
+		if (n_exp >= d_exp) begin  
+			div_exp = 8'b01111111 + (n_exp - d_exp);  
+		end else begin  
+			div_exp = 8'b01111111 - (d_exp - n_exp);  
+		end  
+	end  
+	  
+	//Divide the mantissas, store in div_man.  
+	div_24b divide(.numer(n_man), .denom(d_man), .res(div_man));  
+	  
+	//Store the result. Shift exponents appropriately. Store sign.  
+	//Sign  
+	always @ (n_sign or d_sign) begin  
+		div[31] = n_sign ^ d_sign;  
+	end  
+	  
+	//Mantissa and Exponent  
+	always @ (div_man or div_exp) begin  
+		if (div_man[23]) begin //do nothing  
+			div[22:0] = div_man[22:0];  
+			div[30:23] = div_exp;  
+		  
+		end else if (div_man[22]) begin //shift << by 1, subtract 1 from exponent. 
+			div[22:0] = {div_man[21:0], 1'b0}; 
+			div[30:23] = div_exp - 8'b00000001; 
+ 
+		end else if (div_man[21]) begin //shift << by 2, subtract 2 from exponent. 
+			div[22:0] = {div_man[20:0], 2'b0}; 
+			div[30:23] = div_exp - 8'b00000010; 
+ 
+		end else if (div_man[20]) begin //shift << by 3, subtract 3 from exponent. 
+			div[22:0] = {div_man[19:0], 3'b0}; 
+			div[30:23] = div_exp - 8'b00000011; 
+ 
+		end else if (div_man[19]) begin //shift << by 4, subtract 4 from exponent. 
+			div[22:0] = {div_man[18:0], 4'b0}; 
+			div[30:23] = div_exp - 8'b00000100; 
+ 
+		end else if (div_man[18]) begin //shift << by 5, subtract 5 from exponent. 
+			div[22:0] = {div_man[17:0], 5'b0}; 
+			div[30:23] = div_exp - 8'b00000101; 
+ 
+		end else if (div_man[17]) begin //shift << by 6, subtract 6 from exponent. 
+			div[22:0] = {div_man[16:0], 6'b0}; 
+			div[30:23] = div_exp - 8'b00000110; 
+ 
+		end else if (div_man[16]) begin //shift << by 7, subtract 7 from exponent. 
+			div[22:0] = {div_man[15:0], 7'b0}; 
+			div[30:23] = div_exp - 8'b00000111; 
+ 
+		end else if (div_man[15]) begin //shift << by 8, subtract 8 from exponent. 
+			div[22:0] = {div_man[14:0], 8'b0}; 
+			div[30:23] = div_exp - 8'b00001000; 
+ 
+		end else if (div_man[14]) begin //shift << by 9, subtract 9 from exponent. 
+			div[22:0] = {div_man[13:0], 9'b0}; 
+			div[30:23] = div_exp - 8'b00001001; 
+ 
+		end else if (div_man[13]) begin //shift << by 10, subtract 10 from exponent. 
+			div[22:0] = {div_man[12:0], 10'b0}; 
+			div[30:23] = div_exp - 8'b00001010; 
+ 
+		end else if (div_man[12]) begin //shift << by 11, subtract 11 from exponent. 
+			div[22:0] = {div_man[11:0], 11'b0}; 
+			div[30:23] = div_exp - 8'b00001011; 
+ 
+		end else if (div_man[11]) begin //shift << by 12, subtract 12 from exponent. 
+			div[22:0] = {div_man[10:0], 12'b0}; 
+			div[30:23] = div_exp - 8'b00001100; 
+ 
+		end else if (div_man[10]) begin //shift << by 13, subtract 13 from exponent. 
+			div[22:0] = {div_man[9:0], 13'b0}; 
+			div[30:23] = div_exp - 8'b00001101; 
+ 
+		end else if (div_man[9]) begin //shift << by 14, subtract 14 from exponent. 
+			div[22:0] = {div_man[8:0], 14'b0}; 
+			div[30:23] = div_exp - 8'b00001110; 
+ 
+		end else if (div_man[8]) begin //shift << by 15, subtract 15 from exponent. 
+			div[22:0] = {div_man[7:0], 15'b0}; 
+			div[30:23] = div_exp - 8'b00001111; 
+ 
+		end else if (div_man[7]) begin //shift << by 16, subtract 16 from exponent. 
+			div[22:0] = {div_man[6:0], 16'b0}; 
+			div[30:23] = div_exp - 8'b00010000; 
+ 
+		end else if (div_man[6]) begin //shift << by 17, subtract 17 from exponent. 
+			div[22:0] = {div_man[5:0], 17'b0}; 
+			div[30:23] = div_exp - 8'b00010001; 
+ 
+		end else if (div_man[5]) begin //shift << by 18, subtract 18 from exponent. 
+			div[22:0] = {div_man[4:0], 18'b0}; 
+			div[30:23] = div_exp - 8'b00010010; 
+ 
+		end else if (div_man[4]) begin //shift << by 19, subtract 19 from exponent. 
+			div[22:0] = {div_man[3:0], 19'b0}; 
+			div[30:23] = div_exp - 8'b00010011; 
+ 
+		end else if (div_man[3]) begin //shift << by 20, subtract 20 from exponent. 
+			div[22:0] = {div_man[2:0], 20'b0}; 
+			div[30:23] = div_exp - 8'b00010100; 
+ 
+		end else if (div_man[2]) begin //shift << by 21, subtract 21 from exponent. 
+			div[22:0] = {div_man[1:0], 21'b0}; 
+			div[30:23] = div_exp - 8'b00010101; 
+ 
+		end else if (div_man[1]) begin //shift << by 22, subtract 22 from exponent. 
+			div[22:0] = {div_man[0:0], 22'b0}; 
+			div[30:23] = div_exp - 8'b00010110; 
+  
+		end else /*if (div_man[0])*/ begin //shift << by 23, subtract 23 from exponent. 
+			div[22:0] = 23'b0; 
+			div[30:23] = div_exp - 8'b00010111; 
+		end 
+  
+	end  
+	  
+endmodule   
+  
+  
+  
+  
+  
+module div_24b(numer, denom, res);  
+	//input clock;  
+  
+	input [23:0]numer;  
+	input [23:0]denom;  
+	output [23:0]res;  
+	reg [23:0]res;  
+	  
+	//Pad with 23 zeros.  
+	wire [46:0]denom_pad;  
+	wire [46:0]numer23; 
+	reg [46:0]numer22; 
+	reg [46:0]numer21; 
+	reg [46:0]numer20; 
+	reg [46:0]numer19; 
+	reg [46:0]numer18; 
+	reg [46:0]numer17; 
+	reg [46:0]numer16; 
+	reg [46:0]numer15; 
+	reg [46:0]numer14; 
+	reg [46:0]numer13; 
+	reg [46:0]numer12; 
+	reg [46:0]numer11; 
+	reg [46:0]numer10; 
+	reg [46:0]numer9; 
+	reg [46:0]numer8; 
+	reg [46:0]numer7; 
+	reg [46:0]numer6; 
+	reg [46:0]numer5; 
+	reg [46:0]numer4; 
+	reg [46:0]numer3; 
+	reg [46:0]numer2; 
+	reg [46:0]numer1;  
+	reg [46:0]numer0;  
+	  
+	//always @ (posedge clock) begin  
+	assign denom_pad = {23'b0, denom};  
+	assign numer23 = {numer, 23'b0};  
+	// end  
+	  
+	//res[23]  
+	always @ (denom_pad or numer23) begin  
+	  
+		if (denom_pad[23:0] <= numer23[46:23]) begin 
+			res[23] = 1'b1; 
+			numer22 = {numer23[46:23] - denom_pad[23:0], 23'b0}; 
+		end else begin 
+			res[23] = 1'b0; 
+			numer22 = numer23; 
+		end 
+ 
+		if (denom_pad[24:0] <= numer22[46:22]) begin 
+			res[22] = 1'b1; 
+			numer21 = {numer22[46:22] - denom_pad[24:0], 22'b0}; 
+		end else begin 
+			res[22] = 1'b0; 
+			numer21 = numer22; 
+		end 
+ 
+		if (denom_pad[25:0] <= numer21[46:21]) begin 
+			res[21] = 1'b1; 
+			numer20 = {numer21[46:21] - denom_pad[25:0], 21'b0}; 
+		end else begin 
+			res[21] = 1'b0; 
+			numer20 = numer21; 
+		end 
+ 
+		if (denom_pad[26:0] <= numer20[46:20]) begin 
+			res[20] = 1'b1; 
+			numer19 = {numer20[46:20] - denom_pad[26:0], 20'b0}; 
+		end else begin 
+			res[20] = 1'b0; 
+			numer19 = numer20; 
+		end 
+ 
+		if (denom_pad[27:0] <= numer19[46:19]) begin 
+			res[19] = 1'b1; 
+			numer18 = {numer19[46:19] - denom_pad[27:0], 19'b0}; 
+		end else begin 
+			res[19] = 1'b0; 
+			numer18 = numer19; 
+		end 
+ 
+		if (denom_pad[28:0] <= numer18[46:18]) begin 
+			res[18] = 1'b1; 
+			numer17 = {numer18[46:18] - denom_pad[28:0], 18'b0}; 
+		end else begin 
+			res[18] = 1'b0; 
+			numer17 = numer18; 
+		end 
+ 
+		if (denom_pad[29:0] <= numer17[46:17]) begin 
+			res[17] = 1'b1; 
+			numer16 = {numer17[46:17] - denom_pad[29:0], 17'b0}; 
+		end else begin 
+			res[17] = 1'b0; 
+			numer16 = numer17; 
+		end 
+ 
+		if (denom_pad[30:0] <= numer16[46:16]) begin 
+			res[16] = 1'b1; 
+			numer15 = {numer16[46:16] - denom_pad[30:0], 16'b0}; 
+		end else begin 
+			res[16] = 1'b0; 
+			numer15 = numer16; 
+		end 
+ 
+		if (denom_pad[31:0] <= numer15[46:15]) begin 
+			res[15] = 1'b1; 
+			numer14 = {numer15[46:15] - denom_pad[31:0], 15'b0}; 
+		end else begin 
+			res[15] = 1'b0; 
+			numer14 = numer15; 
+		end 
+ 
+		if (denom_pad[32:0] <= numer14[46:14]) begin 
+			res[14] = 1'b1; 
+			numer13 = {numer14[46:14] - denom_pad[32:0], 14'b0}; 
+		end else begin 
+			res[14] = 1'b0; 
+			numer13 = numer14; 
+		end 
+ 
+		if (denom_pad[33:0] <= numer13[46:13]) begin 
+			res[13] = 1'b1; 
+			numer12 = {numer13[46:13] - denom_pad[33:0], 13'b0}; 
+		end else begin 
+			res[13] = 1'b0; 
+			numer12 = numer13; 
+		end 
+ 
+		if (denom_pad[34:0] <= numer12[46:12]) begin 
+			res[12] = 1'b1; 
+			numer11 = {numer12[46:12] - denom_pad[34:0], 12'b0}; 
+		end else begin 
+			res[12] = 1'b0; 
+			numer11 = numer12; 
+		end 
+ 
+		if (denom_pad[35:0] <= numer11[46:11]) begin 
+			res[11] = 1'b1; 
+			numer10 = {numer11[46:11] - denom_pad[35:0], 11'b0}; 
+		end else begin 
+			res[11] = 1'b0; 
+			numer10 = numer11; 
+		end 
+ 
+		if (denom_pad[36:0] <= numer10[46:10]) begin 
+			res[10] = 1'b1; 
+			numer9 = {numer10[46:10] - denom_pad[36:0], 10'b0}; 
+		end else begin 
+			res[10] = 1'b0; 
+			numer9 = numer10; 
+		end 
+ 
+		if (denom_pad[37:0] <= numer9[46:9]) begin 
+			res[9] = 1'b1; 
+			numer8 = {numer9[46:9] - denom_pad[37:0], 9'b0}; 
+		end else begin 
+			res[9] = 1'b0; 
+			numer8 = numer9; 
+		end 
+ 
+		if (denom_pad[38:0] <= numer8[46:8]) begin 
+			res[8] = 1'b1; 
+			numer7 = {numer8[46:8] - denom_pad[38:0], 8'b0}; 
+		end else begin 
+			res[8] = 1'b0; 
+			numer7 = numer8; 
+		end 
+ 
+		if (denom_pad[39:0] <= numer7[46:7]) begin 
+			res[7] = 1'b1; 
+			numer6 = {numer7[46:7] - denom_pad[39:0], 7'b0}; 
+		end else begin 
+			res[7] = 1'b0; 
+			numer6 = numer7; 
+		end 
+ 
+		if (denom_pad[40:0] <= numer6[46:6]) begin 
+			res[6] = 1'b1; 
+			numer5 = {numer6[46:6] - denom_pad[40:0], 6'b0}; 
+		end else begin 
+			res[6] = 1'b0; 
+			numer5 = numer6; 
+		end 
+ 
+		if (denom_pad[41:0] <= numer5[46:5]) begin 
+			res[5] = 1'b1; 
+			numer4 = {numer5[46:5] - denom_pad[41:0], 5'b0}; 
+		end else begin 
+			res[5] = 1'b0; 
+			numer4 = numer5; 
+		end 
+ 
+		if (denom_pad[42:0] <= numer4[46:4]) begin 
+			res[4] = 1'b1; 
+			numer3 = {numer4[46:4] - denom_pad[42:0], 4'b0}; 
+		end else begin 
+			res[4] = 1'b0; 
+			numer3 = numer4; 
+		end 
+ 
+		if (denom_pad[43:0] <= numer3[46:3]) begin 
+			res[3] = 1'b1; 
+			numer2 = {numer3[46:3] - denom_pad[43:0], 3'b0}; 
+		end else begin 
+			res[3] = 1'b0; 
+			numer2 = numer3; 
+		end 
+ 
+		if (denom_pad[44:0] <= numer2[46:2]) begin 
+			res[2] = 1'b1; 
+			numer1 = {numer2[46:2] - denom_pad[44:0], 2'b0}; 
+		end else begin 
+			res[2] = 1'b0; 
+			numer1 = numer2; 
+		end 
+ 
+		if (denom_pad[45:0] <= numer1[46:1]) begin 
+			res[1] = 1'b1; 
+			numer0 = {numer1[46:1] - denom_pad[45:0], 1'b0}; 
+		end else begin 
+			res[1] = 1'b0; 
+			numer0 = numer1; 
+		end 
+  
+		if (denom_pad <= numer0) begin  
+			res[0] = 1'b1;  
+		end else begin  
+			res[0] = 1'b0;  
+		end 
+  
+	end  
+	  
+endmodule   
+
+
+//////////////////////////////////////////////  
+//   
+// constants.v  
+//  
+// Version 1.3  
+// Written 7/11/01 David_Harris@hmc.edu & Mark_Phair@hmc.edu  
+// Modifed 8/20/01 Mark_Phair@hmc.edu and Justin_Schauer@hmc.edu  
+//  
+// A set of constants for a parameterized floating point multiplier and adder.  
+//  
+//////////////////////////////////////////////  
+  
+//////////////////////////////////////////////  
+// FREE VARIABLES  
+//////////////////////////////////////////////  
+  
+// Widths of Fields  
+`define WEXP	8  
+`define WSIG	23  
+`define WFLAG	5  
+`define WCONTROL 5  
+  
+// output flag select (flags[x])  
+`define DIVZERO 	0  
+`define INVALID 	1  
+`define INEXACT 	2  
+`define OVERFLOW 	3  
+`define UNDERFLOW	4  
+  
+//////////////////////////////////////////////  
+// DEPENDENT VARIABLES  
+//////////////////////////////////////////////  
+  
+`define WIDTH 		32 	//(`WEXP + `WSIG + 1)  
+`define PRODWIDTH	48 	//(2 * (`WSIG + 1))  
+`define SHIFTWIDTH	96 	//(2 * `PRODWIDTH))  
+`define WPRENORM	24	// `WSIG + 1  
+`define WEXPSUM		10	// `WEXP + 2  
+`define BIAS		127	// (2^(`WEXP)) - 1  
+`define WSIGMINUS1	22	// `WSIG - 1, used for rounding  
+`define WSHIFTAMT	5	// log2(`WSIG + 1) rounded up  
+  
+// for trapped over/underflow  
+`define UNDERBIAS	192	// 3 * 2 ^ (`WEXP -2)  
+`define OVERBIAS	-192	// -`UNDERBIAS  
+  
+// specialized constants for fpadd  
+`define	EXTRASIG	25		// `WSIG+2 this is the amount of precision needed so no  
+					// subtraction errors occur  
+`define	SHIFT		5		// # bits the max alignment shift will fit in (log2(`WSIG+2)  
+					// rounded up to nearest int)  
+`define	MAX_EXP		8'b11111110	// the maximum non-infinite exponent,  
+					// `WEXP bits, the most significant  
+					// `WEXP-1 bits are 1, the LSB is 0  
+`define	INF_EXP		8'b11111111	// Infinity exponent, `WEXP bits, all 1  
+// Max significand, `WSIG bits, all 1  
+`define	MAX_SIG		23'b11111111111111111111111  
+`define	WEXP_0		8'b0		// Exponent equals `WEXP'b0  
+`define	WEXP_1		8'b1		// Exponent equals one `WEXP'b1  
+`define	WSIG_0		23'b0		// Significand equals zero `WSIG'b0  
+`define	WSIG_1		23'b1		// Significand equals one `WSIG'b1  
+`define	EXTRASIG_0	25'b0		// All result bits for adder zero `EXTRASIG'b0  
+  
+// specialized constants for fpmul  
+`define	MAXSHIFT	24		// `WSIG + 1  
+  
+// GENERAL SPECIAL NUMBERS - Exp + Significand of special numbers  
+// plain NaN `WIDTH-1, all 1  
+`define CONSTNAN	{9'b111111111,22'b0}  
+// zero `WIDTH-1, all 0  
+`define CONSTZERO	31'b0  
+// infinity `WEXP all 1, `WSIG all 0  
+`define CONSTINFINITY	{8'b11111111, 23'b0}  
+// largest number maximum exponent(all 1's - 1) and maximum significand (all 1's)  
+`define CONSTLARGEST	{`MAX_EXP, `MAX_SIG}  
+`define PRESHIFTZEROS  48'b0 // `PRODWIDTH'b0  
+  
+//////////////////////////////////////////////  
+//   
+// fpmul.v  
+//  
+// Version 1.6  
+// Written 07/11/01 David_Harris@hmc.edu & Mark_Phair@hmc.edu  
+// Modifed 08/20/01 Mark_Phair@hmc.edu  
+//  
+// A parameterized floating point multiplier.  
+//  
+// BLOCK DESCRIPTIONS  
+//  
+// preprocess 	- general processing, such as zero detection, computing sign, NaN  
+//  
+// prenorm	- normalize denorms  
+//  
+// exponent	- sum the exponents, check for tininess before rounding  
+//  
+// multiply	- multiply the mantissae  
+//  
+// special	- calculate special cases, such as NaN and infinities  
+//  
+// shift	- shift the sig and exp if nesc.  
+//  
+// round	- round product  
+//  
+// normalize	- normalizes the result if appropriate (i.e. not a denormalized #)  
+//  
+// flag 	- general flag processing  
+//  
+// assemble	- assemble results  
+//  
+//////////////////////////////////////////////  
+  
+//////////////////////////////////////////////  
+// Includes  
+//////////////////////////////////////////////  
+  
+  
+  
+//////////////////////////////////////////////  
+// fpmul module  
+//////////////////////////////////////////////  
+  
+module fpmul(clk, a, b, y_out, control, flags) ; 
+	  
+	input clk;  
+	 
+  // external signals 
+  input	 [`WIDTH-1:0] 	a, b;		// floating-point inputs 
+  output [`WIDTH-1:0] 	y_out;		// floating-point product 
+  reg [`WIDTH-1:0] y_out; 
+  input  [1:0] control;	// control including rounding mode 
+  output [`WFLAG-1:0]	flags;		// DIVZERO, INVALID, INEXACT,  
+					// OVERFLOW, UNDERFLOW (defined in constant.v) 
+ 
+	//intermediate y_out 
+	wire [`WIDTH-1:0]y; 
+					 
+  // internal signals 
+  wire			multsign;	// sign of product 
+  wire			specialsign;	// sign of special 
+ 
+  wire  [`WSIG:0] 	norma;		// normal-form mantissa a, 1 bit larger to hold leading 1 
+  wire  [`WSIG:0] 	normb;		// normal-form mantissa b, 1 bit larger to hold leading 1 
+ 
+  wire	[`WEXPSUM-1:0]	expa, expb;	// the two exponents, after prenormalization 
+  wire	[`WEXPSUM-1:0] 	expsum;		// sum of exponents (two's complement) 
+  wire	[`WEXPSUM-1:0] 	shiftexp;	// shifted exponent 
+  wire	[`WEXP-1:0] 	roundexp;	// rounded, correct exponent 
+ 
+  wire	[`PRODWIDTH-1:0] prod;		// product of mantissae 
+  wire	[`PRODWIDTH-1:0] normalized;	// Normalized product 
+  wire	[`SHIFTWIDTH-1:0] shiftprod;	// shifted product 
+  wire	[`WSIG-1:0]	roundprod;	// rounded product 
+  wire	[`WIDTH-2:0]	special;	// special case exponent and product 
+ 
+  wire			twoormore;	// product is outside range [1,2) 
+  wire			zero;		// zero detected 
+  wire			infinity;	// infinity detected 
+  wire			aisnan;		// NaN detected in A 
+  wire			bisnan;		// NaN detected in B 
+  wire			aisdenorm;	// Denormalized number detected in A 
+  wire			bisdenorm;	// Denormalized number detected in B 
+  wire			specialcase;	// This is a special case 
+  wire			specialsigncase; // Use the special case sign 
+  wire			roundoverflow;	// overflow in rounding, need to add 1 to exponent 
+  wire			invalid;	// invalid operation 
+  wire			overflow;	// exponent result too high, standard overflow 
+  wire			inexact;	// inexact flag 
+  wire			shiftloss;	// lost digits due to a shift, result inaccurate 
+  wire	[1:0]		roundmode;	// rounding mode information extracted from control field   
+  wire			tiny;		// Result is tiny (denormalized #) after multiplication 
+  wire			stilltiny;	// Result is tiny (denormalized #) after rounding 
+  wire			denormround;	// rounding occured only because the initial result was 
+					//	a denormalized number. This is used to determine 
+					//	underflow in cases of denormalized numbers rounding 
+					//	up to normalized numbers 
+ 
+  preprocess	preprocesser(a, b, zero, aisnan, bisnan,  
+				aisdenorm, bisdenorm, infinity,  
+				control, roundmode, sign);   
+ 
+  special	specialer(a, b, special, specialsign, zero,  
+				aisnan, bisnan,  
+				infinity, invalid,  
+				specialcase, specialsigncase); 
+   
+  prenorm	prenormer(a[`WIDTH-2:0], b[`WIDTH-2:0], norma, normb, expa, expb, aisdenorm, bisdenorm); 
+ 
+  multiply_a	multiplier(norma, normb, prod, twoormore); 
+ 
+  exponent	exponenter(expa, expb, expsum, twoormore, tiny); 
+ 
+  normalize	normalizer(prod, normalized, tiny, twoormore);   
+ 
+  shift		shifter(normalized, expsum, shiftprod,  
+			shiftexp, shiftloss); 
+ 
+  round		rounder(shiftprod, shiftexp, shiftloss, 
+			roundprod, roundexp,  
+			roundmode, sign, tiny, inexact,  
+			overflow, stilltiny, denormround); 
+ 
+		// *** To check for tininess before rounding, use tiny 
+		//	To check after rounding, use stilltiny 
+		// *** for underflow detect: 
+		//	To check for inexact result use (inexact | (shiftloss & stilltiny)),  
+		//	To check for denormilization loss use (shiftloss & stilltiny) 
+//  flag		flager(invalid, overflow, inexact | shiftloss,  
+//			shiftloss | inexact, 
+//			/* tiny */ (stilltiny | (tiny & denormround)),  
+//			specialcase, flags);  
+			  
+  //ODIN cannot have operations in module instantiations.  
+  wire inexact_or_shiftloss;  
+  assign inexact_or_shiftloss = inexact | shiftloss;  
+  wire shiftloss_or_inexact;  
+  assign shiftloss_or_inexact = shiftloss | inexact;  
+  wire still_tiny_or_tiny_and_denormround;  
+  assign still_tiny_or_tiny_and_denormround = stilltiny | (tiny & denormround);  
+  
+    flag		flager(invalid, overflow, inexact_or_shiftloss,  
+			shiftloss_or_inexact, 
+			/* tiny */ stilltiny_or_tiny_and_denormround,  
+			specialcase, flags);  
+	  
+ 
+  assemble	assembler(roundprod, special, y,  
+			sign, specialsign, roundexp,  
+			specialcase, specialsigncase, 
+			roundmode, flags[`OVERFLOW]); 
+			 
+	always @ (posedge clk) begin 
+		y_out <= y; 
+	end 
+ 
+endmodule  
+ 
+  
+ 
+ 
+module preprocess(a, b, zero, aisnan, bisnan, aisdenorm, bisdenorm, infinity, control, roundmode, sign); 
+ 
+  // external signals 
+  input	[`WIDTH-1:0] 	a, b;		// floating-point inputs 
+  output 		zero;		// is there a zero? 
+  //input	[`WCONTROL-1:0]	control;	// control field  
+  input [1:0] control; //the rest is unused, not necessary for ODIN. 
+  output [1:0]		roundmode;	// 00 = RN; 01 = RZ; 10 = RP; 11 = RM  
+  output		aisnan;		// NaN detected in A 
+  output		bisnan;		// NaN detected in B 
+  output		aisdenorm;	// denormalized number detected in A 
+  output		bisdenorm;	// denormalized number detected in B 
+  output		infinity;	// infinity detected in A 
+  output		sign;		// sign of product 
+ 
+  // internal signals 
+  wire			signa, signb;	// sign of a and b 
+  wire [`WEXP-1:0]	expa, expb;	// the exponents of a and b 
+  wire [`WSIG-1:0]	siga, sigb;	// the significands of a and b 
+  wire			aexpfull;	// the exponent of a is all 1's 
+  wire			bexpfull;	// the exponent of b is all 1's 
+  wire			aexpzero;	// the exponent of a is all 0's 
+  wire			bexpzero;	// the exponent of b is all 0's 
+  wire			asigzero;	// the significand of a is all 0's 
+  wire			bsigzero;	// the significand of b is all 0's 
+ 
+  // Sign calculation 
+  assign signa 		= a[`WIDTH-1]; 
+  assign signb 		= b[`WIDTH-1]; 
+  assign sign = signa ^ signb; 
+ 
+  // Significand calcuations 
+ 
+  assign siga		= a[`WSIG-1:0]; 
+  assign sigb		= b[`WSIG-1:0]; 
+  // Are the significands all 0's? 
+  assign asigzero	= ~|siga; 
+  assign bsigzero	= ~|sigb; 
+ 
+  // Exponent calculations 
+ 
+  assign expa		= a[`WIDTH-2:`WIDTH-`WEXP-1]; 
+  assign expb		= b[`WIDTH-2:`WIDTH-`WEXP-1]; 
+  // Are the exponents all 0's? 
+  assign aexpzero	= ~|expa; 
+  assign bexpzero	= ~|expb; 
+  // Are the exponents all 1's? 
+  assign aexpfull	= &expa; 
+  assign bexpfull	= &expb; 
+ 
+  // General calculations 
+ 
+  // Zero Detect 
+  assign zero 		= (aexpzero & asigzero) | (bexpzero & bsigzero); 
+ 
+  // NaN detect 
+  assign aisnan		= aexpfull & ~asigzero; 
+  assign bisnan		= bexpfull & ~bsigzero; 
+ 
+  // Infinity detect 
+  assign infinity	= (aexpfull & asigzero) | (bexpfull & bsigzero); 
+ 
+  // Denorm detect 
+  assign aisdenorm	= aexpzero & ~asigzero; 
+  assign bisdenorm	= bexpzero & ~bsigzero; 
+ 
+  // Round mode extraction 
+  assign roundmode	= control[1:0]; 
+ 
+endmodule  
+ 
+module special (a, b, special, specialsign,  
+		zero, aisnan, bisnan, infinity,  
+		invalid, specialcase, specialsigncase); 
+ 
+  // external signals 
+  input	[`WIDTH-1:0] 	a, b;		// floating-point inputs 
+  output [`WIDTH-2:0]	special;	// special case output, exp + sig 
+  output		specialsign;	// the special-case sign 
+  input			zero;		// is there a zero? 
+  input			aisnan;		// NaN detected in A 
+  input			bisnan;		// NaN detected in B 
+  input			infinity;	// infinity detected 
+  output		invalid;	// invalid operation 
+  output		specialcase;	// this is a special case 
+  output		specialsigncase; // Use the special sign 
+ 
+  // internal signals 
+  wire			infandzero;	// infinity and zero detected 
+  wire	[`WIDTH-2:0]	highernan;	// holds inputed NaN, the higher if two are input, 
+					// and dont care if neither a nor b are NaNs 
+  wire			aishighernan;	// a is the higher NaN 
+ 
+  assign infandzero	= (infinity & zero); 
+ 
+  //#######SPECIAL ASSIGNMENT###### 
+  // #######return higher NaN########## 
+  // Use this block if you want to return the higher of two NaNs 
+ 
+  assign aishighernan = (aisnan & ((a[`WSIG-1:0] >= b[`WSIG-1:0]) | ~bisnan)); 
+ 
+  assign highernan[`WIDTH-2:0] = aishighernan ? a[`WIDTH-2:0] : b[`WIDTH-2:0]; 
+ 
+  assign special[`WIDTH-2:0] = (aisnan | bisnan) ? (highernan[`WIDTH-2:0]) :  
+			(zero ?  
+			(infinity ? (`CONSTNAN) : (`CONSTZERO)) : (`CONSTINFINITY)); 
+  // #######return first NaN########## 
+  // Use this block to return the first NaN encountered 
+//  assign special	= aisnan ? (a[`WIDTH-2:0]) :  
+//			(bisnan ? (b[`WIDTH-2:0]) :  
+//			(zero ?  
+//			(infinity ? (`CONSTNAN) : (`CONSTZERO)) : (`CONSTINFINITY))); 
+  //######END SPECIAL ASSIGNMENT####### 
+ 
+  assign specialcase	= zero | aisnan | bisnan | infinity; 
+ 
+  assign invalid	= infandzero; //*** need to include something about signaling NaNs here 
+ 
+  // dont need to check if b is NaN, if it defaults to that point, and b isnt NAN 
+  // then it wont be used anyway 
+  assign specialsign	= infandzero ? (1'b1) : (aishighernan ? a[`WIDTH-1] : b[`WIDTH-1]); 
+ 
+  assign specialsigncase = infandzero | aisnan | bisnan; 
+ 
+endmodule   
+ 
+module prenorm(a, b, norma, normb, modexpa, modexpb, aisdenorm, bisdenorm); 
+ 
+  //input	[`WIDTH-1:0]	a, b;			// the input floating point numbers  
+  input [`WIDTH-2:0] a, b;  //We don't need bit 31 here, unused in ODIN. 
+  output [`WSIG:0]	norma, normb;		// the mantissae in normal form 
+  output [`WEXPSUM-1:0]	modexpa, modexpb;	// the output exponents, larger to accomodate 
+						//	two's complement form 
+  input			aisdenorm;		// a is a denormalized number 
+  input			bisdenorm;		// b is a denormalized nubmer 
+ 
+  // internal signals 
+  wire	[`WEXPSUM-1:0]	expa, expb;		// exponents in two's complement form 
+						//	are negative if shifted for a 
+						// 	denormalized number 
+  wire	[`SHIFT-1:0]	shifta, shiftb; 	// the shift amounts 
+  reg [`WSIG:0]	shifteda, shiftedb;	// the shifted significands, used to be wire, changed for ODIN. 
+ 
+  // pull out the exponents 
+  assign expa 	= a[`WIDTH-2:`WIDTH-1-`WEXP]; 
+  assign expb 	= b[`WIDTH-2:`WIDTH-1-`WEXP]; 
+ 
+  // when breaking appart for paramaterizing: 
+  // ### RUN ./prenormshift.pl wsig_in ### 
+assign shifta = a[23 - 1] ? 1 : 
+                 a[23 - 2] ? 2 : 
+                 a[23 - 3] ? 3 : 
+                 a[23 - 4] ? 4 : 
+                 a[23 - 5] ? 5 : 
+                 a[23 - 6] ? 6 : 
+                 a[23 - 7] ? 7 : 
+                 a[23 - 8] ? 8 : 
+                 a[23 - 9] ? 9 : 
+                 a[23 - 10] ? 10 : 
+                 a[23 - 11] ? 11 : 
+                 a[23 - 12] ? 12 : 
+                 a[23 - 13] ? 13 : 
+                 a[23 - 14] ? 14 : 
+                 a[23 - 15] ? 15 : 
+                 a[23 - 16] ? 16 : 
+                 a[23 - 17] ? 17 : 
+                 a[23 - 18] ? 18 : 
+                 a[23 - 19] ? 19 : 
+                 a[23 - 20] ? 20 : 
+                 a[23 - 21] ? 21 : 
+                 a[23 - 22] ? 22 : 
+                 23; // dont need to check last bit 
+// if the second to last isn't 1, then the last one must be 
+ 
+assign shiftb = b[23 - 1] ? 1 : 
+                 b[23 - 2] ? 2 : 
+                 b[23 - 3] ? 3 : 
+                 b[23 - 4] ? 4 : 
+                 b[23 - 5] ? 5 : 
+                 b[23 - 6] ? 6 : 
+                 b[23 - 7] ? 7 : 
+                 b[23 - 8] ? 8 : 
+                 b[23 - 9] ? 9 : 
+                 b[23 - 10] ? 10 : 
+                 b[23 - 11] ? 11 : 
+                 b[23 - 12] ? 12 : 
+                 b[23 - 13] ? 13 : 
+                 b[23 - 14] ? 14 : 
+                 b[23 - 15] ? 15 : 
+                 b[23 - 16] ? 16 : 
+                 b[23 - 17] ? 17 : 
+                 b[23 - 18] ? 18 : 
+                 b[23 - 19] ? 19 : 
+                 b[23 - 20] ? 20 : 
+                 b[23 - 21] ? 21 : 
+                 b[23 - 22] ? 22 : 
+                 23; // dont need to check last bit 
+// if the second to last isn't 1, then the last one must be 
+ 
+ 
+ 
+  // If number is a denorm, the exponent must be  
+  //	decremented by the shift amount 
+  assign modexpa = aisdenorm ? 1 - shifta : expa;  
+  assign modexpb = bisdenorm ? 1 - shiftb : expb;  
+ 
+  // If number is denorm, shift the significand the appropriate amount 
+//  assign shifteda = a[`WSIG-1:0] << shifta;  
+	//Must have constant shifts for ODIN  
+	always @ (shifta or a) begin  
+		case (shifta)   
+			5'b00001: begin  
+				shifteda = a[`WSIG-1:0] << 5'b00001; 
+			end 
+ 
+			5'b00010: begin  
+				shifteda = a[`WSIG-1:0] << 5'b00010; 
+			end 
+ 
+			5'b00011: begin  
+				shifteda = a[`WSIG-1:0] << 5'b00011; 
+			end 
+ 
+			5'b00100: begin  
+				shifteda = a[`WSIG-1:0] << 5'b00100; 
+			end 
+ 
+			5'b00101: begin  
+				shifteda = a[`WSIG-1:0] << 5'b00101; 
+			end 
+ 
+			5'b00110: begin  
+				shifteda = a[`WSIG-1:0] << 5'b00110; 
+			end 
+ 
+			5'b00111: begin  
+				shifteda = a[`WSIG-1:0] << 5'b00111; 
+			end 
+ 
+			5'b01000: begin  
+				shifteda = a[`WSIG-1:0] << 5'b01000; 
+			end 
+ 
+			5'b01001: begin  
+				shifteda = a[`WSIG-1:0] << 5'b01001; 
+			end 
+ 
+			5'b01010: begin  
+				shifteda = a[`WSIG-1:0] << 5'b01010; 
+			end 
+ 
+			5'b01011: begin  
+				shifteda = a[`WSIG-1:0] << 5'b01011; 
+			end 
+ 
+			5'b01100: begin  
+				shifteda = a[`WSIG-1:0] << 5'b01100; 
+			end 
+ 
+			5'b01101: begin  
+				shifteda = a[`WSIG-1:0] << 5'b01101; 
+			end 
+ 
+			5'b01110: begin  
+				shifteda = a[`WSIG-1:0] << 5'b01110; 
+			end 
+ 
+			5'b01111: begin  
+				shifteda = a[`WSIG-1:0] << 5'b01111; 
+			end 
+ 
+			5'b10000: begin  
+				shifteda = a[`WSIG-1:0] << 5'b10000; 
+			end 
+ 
+			5'b10001: begin  
+				shifteda = a[`WSIG-1:0] << 5'b10001; 
+			end 
+ 
+			5'b10010: begin  
+				shifteda = a[`WSIG-1:0] << 5'b10010; 
+			end 
+ 
+			5'b10011: begin  
+				shifteda = a[`WSIG-1:0] << 5'b10011; 
+			end 
+ 
+			5'b10100: begin  
+				shifteda = a[`WSIG-1:0] << 5'b10100; 
+			end 
+ 
+			5'b10101: begin  
+				shifteda = a[`WSIG-1:0] << 5'b10101; 
+			end 
+ 
+			5'b10110: begin  
+				shifteda = a[`WSIG-1:0] << 5'b10110; 
+			end 
+ 
+			5'b10111: begin  
+				shifteda = a[`WSIG-1:0] << 5'b10111; 
+			end 
+ 
+			default: begin //Won't be higher than 23.  
+				shifteda = a[`WSIG-1:0];  
+			end  
+		endcase  
+	end  
+ 
+  assign norma 	= aisdenorm ? shifteda : {1'b1, a[`WSIG-1:0]}; 
+ 
+ // assign shiftedb = b[`WSIG-1:0] << shiftb;  
+	always @ (shiftb or b) begin  
+		case (shiftb)   
+			5'b00001: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b00001; 
+			end 
+ 
+			5'b00010: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b00010; 
+			end 
+ 
+			5'b00011: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b00011; 
+			end 
+ 
+			5'b00100: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b00100; 
+			end 
+ 
+			5'b00101: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b00101; 
+			end 
+ 
+			5'b00110: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b00110; 
+			end 
+ 
+			5'b00111: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b00111; 
+			end 
+ 
+			5'b01000: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b01000; 
+			end 
+ 
+			5'b01001: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b01001; 
+			end 
+ 
+			5'b01010: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b01010; 
+			end 
+ 
+			5'b01011: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b01011; 
+			end 
+ 
+			5'b01100: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b01100; 
+			end 
+ 
+			5'b01101: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b01101; 
+			end 
+ 
+			5'b01110: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b01110; 
+			end 
+ 
+			5'b01111: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b01111; 
+			end 
+ 
+			5'b10000: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b10000; 
+			end 
+ 
+			5'b10001: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b10001; 
+			end 
+ 
+			5'b10010: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b10010; 
+			end 
+ 
+			5'b10011: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b10011; 
+			end 
+ 
+			5'b10100: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b10100; 
+			end 
+ 
+			5'b10101: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b10101; 
+			end 
+ 
+			5'b10110: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b10110; 
+			end 
+ 
+			5'b10111: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b10111; 
+			end 
+  
+			default: begin // Won't be higher than 23.  
+				shiftedb = b[`WSIG-1:0];  
+			end  
+		endcase  
+	end 
+		  
+  
+  assign normb 	= bisdenorm ? shiftedb : {1'b1, b[`WSIG-1:0]}; 
+ 
+endmodule  
+ 
+module multiply_a (norma, normb, prod, twoormore); 
+ 
+  input	 [`WSIG:0]		norma, normb;	// normalized mantissae 
+ 
+  output [`PRODWIDTH-1:0] 	prod;		// product of mantissae 
+  output			twoormore;	// Product overflowed range [1,2) 
+ 
+  // multiplier array  
+  //	(*** need a more effecient multiplier,  
+  //	designware might work, though) 
+  assign prod		= norma * normb; 
+ 
+  // did the multiply overflow the range [1,2)? 
+  assign twoormore	= prod[`PRODWIDTH-1]; 
+ 
+endmodule   
+ 
+ 
+  
+module exponent(expa, expb, expsum, twoormore, tiny); 
+ 
+  input	[`WEXPSUM-1:0]	expa, expb;	// the input exponents in 2's complement form 
+					//	to accomodate denorms that have been 
+					//	prenormalized 
+  input			twoormore;	// product is outside range [1,2) 
+ 
+  output [`WEXPSUM-1:0]	expsum;		// the sum of the exponents 
+  output		tiny;		// Result is tiny (denormalized #) 
+ 
+  // Sum the exponents, subtract the bias 
+  // 	and add 1 (twoormore) if multiply went out of [1,2) range 
+  assign expsum = expa + expb - `BIAS + twoormore; 
+ 
+  // The result is tiny if the exponent is less than 1. 
+  //	Because the exponent sum is in 2's-complement form, 
+  //	it is negative if the first bit is 1, and zero if 
+  //    all the bits are zero 
+  assign tiny	= ~|expsum[`WEXPSUM-2:0] | expsum[`WEXPSUM-1]; 
+ 
+ 
+endmodule  
+  
+ 
+ 
+  
+module normalize(prod, normalized, tiny, twoormore); 
+ 
+  // external signals 
+  input  [`PRODWIDTH-1:0]	prod;		// Product of multiplication 
+  output [`PRODWIDTH-1:0]	normalized;	// Normalized product 
+  input				tiny;		// Result is tiny (denormalized #) 
+  input				twoormore;	// Product overflowed range [1,2) 
+ 
+  // normalize product if appropriate 
+  //	There are three possible cases here: 
+  //	1) tiny and prod overfl. [1,2)	-> take the whole prod, including the leading 1 
+  //	2) tiny or prod overfl. [1,2)	-> dont take the first bit. its zero if its tiny, 
+  //				 		and it's the implied 1 if its not 
+  //	3) neither tiny nor prod overfl.-> dont take the first 2 bits, the 2nd one is the 
+  //						implied 1 
+  assign normalized = (tiny & twoormore) ? prod[`PRODWIDTH-1:0] : 
+			((tiny ^ twoormore) ? {prod[`PRODWIDTH-2:0],1'b0} : 
+			{prod[`PRODWIDTH-3:0],2'b0}); 
+ 
+endmodule   
+ 
+module shift(normalized, selectedexp, shiftprod, shiftexp, shiftloss); 
+ 
+  // external signals 
+  input	[`PRODWIDTH-1:0] normalized;	// normalized product of mantissae 
+  input	[`WEXPSUM-1:0] 	selectedexp;	// sum of exponents 
+  output [`SHIFTWIDTH-1:0] shiftprod;	// shifted and normalized product 
+  output [`WEXPSUM-1:0]	shiftexp;	// shifted exponent 
+  output		shiftloss;	// loss of accuaracy due to shifting 
+ 
+  // internal signals 
+  wire	[`WEXPSUM-1:0]	roundedexp;		// selected exponent + 1 if rounding caused overflow 
+//  wire			negexp;		// exponent is negative 
+  wire	[`WEXPSUM-1:0]	shiftamt;		// theoretical amount to shift product by 
+  wire	[`WSHIFTAMT-1:0] actualshiftamt;	// actual amount to shift product by 
+  wire			tozero;		// need more shifts than possible with width of significand 
+  wire			doshift;	// only shift if value is nonnegative 
+  wire	[`SHIFTWIDTH-1:0] preshift; 	// value before shifting, with more room to ensure lossless shifting 
+  reg	[`SHIFTWIDTH-1:0] postshift;	// value after shifting, with more room to ensure lossless shifting, used to be wire, changed for ODIN. 
+ 
+  // set up value for shifting 
+  assign preshift	= {normalized, `PRESHIFTZEROS}; 
+ 
+  // determine shift amount 
+  assign shiftamt	=  -selectedexp; 
+ 
+  // make sure shift amount is nonnegative 
+  //	If the exponent is negative, the shift amount should 
+  //	come out positive, otherwise there shouldn't be any 
+  //	shifting to be done 
+  assign doshift	= ~shiftamt[`WEXPSUM-1]; 
+   
+  // Determine if the result must be shifted more than 
+  //	will show up in the significand, even if it rounds up 
+  assign tozero		= doshift & (shiftamt > `MAXSHIFT); 
+ 
+  // If the shift is big enough to shift all the bits out of the final significand, 
+  //	then it stops being relevent how much it has been shifted. 
+  assign actualshiftamt	= tozero ? `MAXSHIFT : shiftamt[`WSHIFTAMT-1:0]; 
+ 
+  // shift significand 
+  //assign postshift	= preshift >> actualshiftamt;  
+  //We can only have constant shifts for ODIN:  
+  always @ (actualshiftamt or preshift) begin  
+		case (actualshiftamt)   
+			5'b00001: begin  
+				postshift = preshift >> 5'b00001; 
+			end 
+ 
+			5'b00010: begin  
+				postshift = preshift >> 5'b00010; 
+			end 
+ 
+			5'b00011: begin  
+				postshift = preshift >> 5'b00011; 
+			end 
+ 
+			5'b00100: begin  
+				postshift = preshift >> 5'b00100; 
+			end 
+ 
+			5'b00101: begin  
+				postshift = preshift >> 5'b00101; 
+			end 
+ 
+			5'b00110: begin  
+				postshift = preshift >> 5'b00110; 
+			end 
+ 
+			5'b00111: begin  
+				postshift = preshift >> 5'b00111; 
+			end 
+ 
+			5'b01000: begin  
+				postshift = preshift >> 5'b01000; 
+			end 
+ 
+			5'b01001: begin  
+				postshift = preshift >> 5'b01001; 
+			end 
+ 
+			5'b01010: begin  
+				postshift = preshift >> 5'b01010; 
+			end 
+ 
+			5'b01011: begin  
+				postshift = preshift >> 5'b01011; 
+			end 
+ 
+			5'b01100: begin  
+				postshift = preshift >> 5'b01100; 
+			end 
+ 
+			5'b01101: begin  
+				postshift = preshift >> 5'b01101; 
+			end 
+ 
+			5'b01110: begin  
+				postshift = preshift >> 5'b01110; 
+			end 
+ 
+			5'b01111: begin  
+				postshift = preshift >> 5'b01111; 
+			end 
+ 
+			5'b10000: begin  
+				postshift = preshift >> 5'b10000; 
+			end 
+ 
+			5'b10001: begin  
+				postshift = preshift >> 5'b10001; 
+			end 
+ 
+			5'b10010: begin  
+				postshift = preshift >> 5'b10010; 
+			end 
+ 
+			5'b10011: begin  
+				postshift = preshift >> 5'b10011; 
+			end 
+ 
+			5'b10100: begin  
+				postshift = preshift >> 5'b10100; 
+			end 
+ 
+			5'b10101: begin  
+				postshift = preshift >> 5'b10101; 
+			end 
+ 
+			5'b10110: begin  
+				postshift = preshift >> 5'b10110; 
+			end 
+ 
+			5'b10111: begin  
+				postshift = preshift >> 5'b10111; 
+			end 
+ 
+			5'b11000: begin  
+				postshift = preshift >> 5'b11000; 
+			end 
+ 
+			5'b11001: begin  
+				postshift = preshift >> 5'b11001; 
+			end 
+ 
+			5'b11010: begin  
+				postshift = preshift >> 5'b11010; 
+			end 
+ 
+			5'b11011: begin  
+				postshift = preshift >> 5'b11011; 
+			end 
+ 
+			5'b11100: begin  
+				postshift = preshift >> 5'b11100; 
+			end 
+ 
+			5'b11101: begin  
+				postshift = preshift >> 5'b11101; 
+			end 
+ 
+			5'b11110: begin  
+				postshift = preshift >> 5'b11110; 
+			end 
+ 
+			5'b11111: begin  
+				postshift = preshift >> 5'b11111; 
+			end  
+		  
+			default: begin  
+				postshift = preshift;  
+			end  
+		endcase  
+	end 
+ 
+ 
+  // assign appropriate significand 
+  assign shiftprod	= doshift ? postshift :	preshift; 
+ 
+  // determine if any bits were lost from the shift 
+  //assign shiftloss	= tozero | (negexp & |postshift[`WSIG-1:0]);  
+  assign shiftloss	= tozero | (doshift & |postshift[`SHIFTWIDTH-`PRODWIDTH-1:0]);  
+ 
+  // assign appropriate exponent 
+  assign shiftexp	= doshift ? 0 : selectedexp;   
+ 
+endmodule   
+  
+ 
+ 
+module round(shiftprod, shiftexp, shiftloss, roundprod, roundexp, roundmode,  
+		sign, tiny, inexact, overflow, stilltiny, denormround); 
+ 
+  // external signals 
+  input	[`SHIFTWIDTH-1:0] shiftprod;	// normalized and shifted product of mantissae 
+  input [`WEXPSUM-1:0]	shiftexp;	// shifted exponent 
+  input			shiftloss;	// bits were lost in the shifting process 
+  output [`WSIG-1:0] 	roundprod;	// rounded floating-point product 
+  output [`WEXP-1:0] 	roundexp;	// rounded exponent 
+  input  [1:0] 		roundmode;	// 00 = RN; 01 = RZ; 10 = RP; 11 = RM 
+  input			sign;		// sign bit for rounding mode direction 
+  input			tiny;		// denormalized number after rounding 
+  output		inexact;	// rounding occured 
+  output		overflow;	// overflow occured 
+  output		stilltiny;	// Result is tiny (denormalized #) after rounding 
+  output		denormround;	// result was rounded only because it was a denormalized number 
+ 
+  // internal signals 
+  wire			roundzero;	// rounding towards zero 
+  wire			roundinf;	// rounding towards infinity 
+  wire 			stickybit;	// there one or more 1 bits in the LS bits 
+  wire			denormsticky;	// sticky bit if this weren't a denorm 
+  wire [`WSIG-1:0] 	MSBits;		// most significant bits 
+  wire [`WSIG:0] 	MSBitsplus1; 	// most significant bits plus 1 
+					//	for rounding purposes. needs to be one 
+					//	bit bigger for overflow 
+  wire [1:0]		roundbits;	// bits used to compute rounding decision 
+  wire 			rounddecision;	// round up 
+  wire			roundoverflow;	// rounding overflow occured 
+  wire [`WEXPSUM-1:0]	tempexp;	// exponent after rounding 
+ 
+  //reduce round mode to three modes 
+  //	dont need round nearest, it is implied 
+  //	by roundzero and roundinf being false 
+  //assign roundnearest 	= ~&roundmode; 
+//  assign roundzero	= &roundmode || (^roundmode && (roundmode[0] || sign)); 
+  assign roundzero	= (~roundmode[1] & roundmode[0]) | (roundmode[1] & (roundmode[0] ^ sign)); 
+  assign roundinf	= roundmode[1] & ~(sign ^ roundmode[0]); 
+ 
+  // pull out the most significant bits for the product 
+  assign MSBits = shiftprod[`SHIFTWIDTH-1:`SHIFTWIDTH-`WSIG]; 
+ 
+  // add a 1 to the end of MSBits for round up 
+  assign MSBitsplus1 = MSBits + 1; 
+ 
+  // pull out the last of the most significant bits  
+  //	and the first of the least significant bits 
+  //	to use for calculating the rounding decision 
+  assign roundbits[1:0]	= shiftprod[`SHIFTWIDTH-`WSIG:`SHIFTWIDTH-`WSIG-1]; 
+ 
+  // calculate the sticky bit. Are any of the least significant bits 1? 
+  //	also: was anything lost while shifting? 
+  // *** Optimization: some of these bits are already checked from the shiftloss *** 
+  // *** Optimization: stickybit can be calculated from denormsticky  
+  //			with only 1 more gate, instead of duplication of effort *** 
+  assign stickybit 	= |shiftprod[`SHIFTWIDTH-`WSIG-2:0] | shiftloss; 
+  assign denormsticky 	= |shiftprod[`SHIFTWIDTH-`WSIG-3:0] | shiftloss; 
+ 
+  // Compute rounding decision 
+  assign rounddecision	= ~roundzero & 	( (roundbits[0]	& (roundinf | roundbits[1])) 
+					| (stickybit	& (roundinf | roundbits[0])) 
+					); 
+ 
+  // Was this only rounded because it is a denorm? 
+  assign denormround	= tiny & rounddecision & ~denormsticky & roundbits[0]; 
+ 
+  // detect rounding overflow. it only overflows if: 
+  // 1) the top bit of MSBitsplus1 is 1 
+  // 2) it decides to round up 
+  assign roundoverflow	= MSBitsplus1[`WSIG] & rounddecision; 
+ 
+  // assign significand (and postnormalize) 
+  //  rounddecision decides whether to use msbits+1 or msbits. 
+  //  if using msbits+1 and there is an rounding overflow (i.e. result=2), 
+  //  then should return 1 instead 
+  assign roundprod = rounddecision ?  
+ 			(roundoverflow ? 0 :  
+			MSBitsplus1[`WSIG-1:0]) : 
+			MSBits; 
+ 
+  // detect inexact 
+  assign inexact	= rounddecision | stickybit | roundbits[0]; 
+ 
+  // compensate for a rounding overflow 
+  assign tempexp 	= roundoverflow + shiftexp; 
+ 
+  // check for overflow in exponent 
+  //	overflow occured if the number 
+  //	is too large to be represented, 
+  //	i.e. can't fit in `WEXP bits, or 
+  //	all `WEXP bits are 1's 
+  assign overflow	= &tempexp[`WEXP-1:0] | |tempexp[`WEXPSUM-1:`WEXP]; 
+ 
+  // two possible cases: 
+  //	1) Overflow: then exponent doesnt matter, 
+  //	it will be changed to infinity anyway 
+  //	2) not overflow: the leading bits will be 0 
+  assign roundexp	= tempexp[`WEXP-1:0]; 
+ 
+  // The result is tiny if the exponent is less than 1. 
+  //	Because the exponent sum is NOT in 2's-complement form, 
+  //	it is only less than one if its is zero, i.e. 
+  //    all the bits are 0 
+  assign stilltiny	= ~|roundexp; 
+ 
+endmodule  
+ 
+ 
+module flag (invalid, overflow, inexact, underflow, tiny, specialcase, flags); 
+ 
+  input			invalid;	// invalid operation 
+  input			overflow;	// the result was too large 
+  input			inexact;	// The result was rounded 
+  input			specialcase;	// Using special result, shouldn't throw flags 
+  input			underflow;	// Underflow detected 
+  input			tiny;		// The result is tiny 
+ 
+  output [`WFLAG-1:0]	flags;		// DIVZERO, INVALID, INEXACT,  
+					// OVERFLOW, UNDERFLOW (defined in constant.v) 
+ 
+  // flags 
+  assign flags[`DIVZERO]	= 1'b0; 
+  assign flags[`INVALID]	= invalid; 
+  assign flags[`INEXACT]	= ~specialcase & (inexact | underflow | overflow); 
+  assign flags[`OVERFLOW]	= ~specialcase & overflow; 
+  assign flags[`UNDERFLOW]	= tiny; //~specialcase & tiny & underflow & ~overflow; 
+ 
+endmodule  
+ 
+module assemble(roundprod, special, y, sign, specialsign,  
+		shiftexp, specialcase, specialsigncase, 
+		roundmode, overflow); 
+ 
+  // external signals 
+  input	[`WSIG-1:0] 	roundprod;	// shifted, rounded and normalized  
+					// 	product of mantissae 
+  input	[`WIDTH-2:0]	special;	// special case product + exponent 
+  output [`WIDTH-1:0] 	y;		// floating-point product 
+  input			sign;		// sign of product (+ = 0, - = 1) 
+  input			specialsign;	// special case sign 
+  input	[`WEXP-1:0] 	shiftexp;	// shifted exponent 
+  input			specialcase;	// this is a special case 
+  input			specialsigncase; // use the special case sign 
+  input	[1:0]		roundmode;	// rounding mode information extracted from control field   
+  input			overflow;	// overflow detected 
+   
+  // internal signals 
+  wire	[`WIDTH-2:0]	rounded;	// final product + exponent 
+  wire	[`WIDTH-2:0]	overflowvalue;	// product + exponent for overflow condition 
+  wire			undenormed;	// the result was denormalized before rounding, but rounding  
+					//	caused it to become a small normalized number. 
+ 
+  // SET UP ROUNDED PRODUCT + EXPONENT 
+   
+  // assign significand 
+  assign rounded[`WSIG-1:0]	= roundprod; 
+ 
+  // assign exponent 
+  assign rounded[`WIDTH-2:`WIDTH-`WEXP-1] = shiftexp; 
+ 
+  // SET UP OVERFLOW CONDITION 
+  assign overflowvalue[`WIDTH-2:0] = roundmode[1] ?  
+				(sign ^ roundmode[0] ? `CONSTLARGEST : `CONSTINFINITY) : 
+				(roundmode[0] ? `CONSTLARGEST: `CONSTINFINITY); 
+ 
+  // FINAL PRODUCT ASSIGN  
+ 
+  // assign sign 
+  assign y[`WIDTH-1]	= specialsigncase ? specialsign : sign; 
+ 
+  // assign product vs special vs overflowed 
+  assign y[`WIDTH-2:0]	= specialcase ? special[`WIDTH-2:0] : 
+				(overflow ? overflowvalue[`WIDTH-2:0] : 
+				rounded[`WIDTH-2:0]); 
+ 
+endmodule 
diff --git vtr_flow/benchmarks/verilog/LU8PEEng_yosys.v vtr_flow/benchmarks/verilog/LU8PEEng_yosys.v
new file mode 100755
index 0000000..32636f5
--- /dev/null
+++ vtr_flow/benchmarks/verilog/LU8PEEng_yosys.v
@@ -0,0 +1,5002 @@
+//auto-generated top.v
+//top level module of LU factorization
+//by Wei Zhang
+
+`define NWIDTH 6'b010100
+`define BLOCKWIDTH 4'b0101
+`define DDRWIDTH 7'b0100000
+`define DDRNUMDQS 4'b0100
+`define DDRSIZEWIDTH 6'b011000
+`define BURSTLEN 3'b010
+`define MEMCONWIDTH 8'b01000000
+`define MEMCONNUMBYTES 5'b01000
+`define RAMWIDTH 10'b0100000000
+`define RAMNUMBYTES 7'b0100000
+`define RAMSIZEWIDTH 4'b0101
+`define TOPWIDTH 7'b0100000
+`define rFIFOINPUTWIDTH 8'b01000000
+`define wFIFOINPUTWIDTH 10'b0100000000
+`define mFIFOWIDTH 6'b011100
+`define aFIFOWIDTH 4'b0101
+
+(* top *)
+module LU8PEEng (clk, //ref_clk, global_reset_n,
+ start, N, offset, done,
+		//mem_addr, mem_ba, mem_cas_n, mem_cke, mem_clk, mem_clk_n, mem_cs_n,
+burst_begin,
+mem_local_be,
+mem_local_read_req,
+mem_local_size,
+mem_local_wdata,
+mem_local_write_req,
+mem_local_rdata,
+mem_local_rdata_valid,
+mem_local_ready,
+mem_local_wdata_req,
+reset_n,
+mem_local_addr
+//Cong: dummy output
+//a_junk,
+//w_junk,
+//m_junk,
+//r_junk,
+//Cong:dummy output
+//junk_r,
+//junk_r1,
+//junk_r2,
+//junk_r3,
+//junk_top
+	);
+
+input start;
+input[`NWIDTH-1:0] N;
+input[`DDRSIZEWIDTH-1:0] offset;
+output done;
+input clk;
+
+output burst_begin;
+output [`MEMCONNUMBYTES-1:0] mem_local_be;
+output mem_local_read_req;
+output [`BURSTLEN-1:0] mem_local_size;
+output [`MEMCONWIDTH-1:0] mem_local_wdata;
+output mem_local_write_req;
+output [`DDRSIZEWIDTH-1:0] mem_local_addr;
+input [`MEMCONWIDTH-1:0] mem_local_rdata;
+input mem_local_rdata_valid;
+input mem_local_ready;
+input reset_n;
+input mem_local_wdata_req;
+wire[`BLOCKWIDTH-1:0] m, n, loop;
+wire[1:0] mode;
+wire comp_start, comp_done;
+wire dtu_write_req, dtu_read_req, dtu_ack, dtu_done;
+wire [`DDRSIZEWIDTH-1:0] dtu_mem_addr;
+wire [`RAMSIZEWIDTH-1:0] dtu_ram_addr;
+wire [`BLOCKWIDTH-1:0] dtu_size;
+wire left_sel;
+
+wire[`RAMWIDTH-1:0] curWriteDataMem, curReadDataMem;
+wire[`RAMSIZEWIDTH-1:0] curWriteAddrMem, curReadAddrMem;
+wire[`RAMNUMBYTES-1:0] curWriteByteEnMem;
+wire curWriteEnMem;
+wire[`RAMWIDTH-1:0] leftWriteDataMem;
+wire[`RAMSIZEWIDTH-1:0] leftWriteAddrMem;
+wire[`RAMNUMBYTES-1:0] leftWriteByteEnMem;
+wire leftWriteEnMem;
+wire curMemSel, leftMemSel;
+
+wire burst_begin;
+wire [`MEMCONNUMBYTES-1:0] mem_local_be;
+wire mem_local_read_req;
+wire [`BURSTLEN-1:0] mem_local_size;
+wire [`MEMCONWIDTH-1:0] mem_local_wdata;
+wire mem_local_write_req;
+wire [`MEMCONWIDTH-1:0] mem_local_rdata;
+wire mem_local_rdata_valid;
+wire mem_local_ready;
+wire mem_local_wdata_req;
+wire reset_n;
+wire [`DDRSIZEWIDTH-1:0] mem_local_addr;
+
+wire[`RAMWIDTH-1:0] ram_write_data, ram_read_data;
+wire[`RAMSIZEWIDTH-1:0] ram_write_addr, ram_read_addr;
+wire[`RAMNUMBYTES-1:0] ram_write_byte_en;
+wire ram_write_en;
+
+MarshallerController MC (clk, start, done, N, offset,
+	comp_start, m, n, loop, mode, comp_done, curMemSel, leftMemSel,
+	dtu_write_req, dtu_read_req, dtu_mem_addr, dtu_ram_addr, dtu_size, dtu_ack, dtu_done, left_sel);
+
+// block that computes the LU factorization, with answer stored back into ram block
+LU compBlock (clk, comp_start, m, n, loop, mode, comp_done,
+			curReadAddrMem, curReadDataMem, curWriteByteEnMem, curWriteDataMem, curWriteAddrMem, curWriteEnMem, curMemSel,
+			leftWriteByteEnMem, leftWriteDataMem, leftWriteAddrMem, leftWriteEnMem, leftMemSel);
+
+DataTransferUnit DTU (.clk(clk), .dtu_write_req(dtu_write_req), .dtu_read_req(dtu_read_req), .dtu_mem_addr(dtu_mem_addr), .dtu_ram_addr(dtu_ram_addr), .dtu_size(dtu_size), .dtu_ack(dtu_ack), .dtu_done(dtu_done),
+		.ram_read_addr(ram_read_addr), .ram_read_data(ram_read_data), .ram_write_byte_en(ram_write_byte_en), .ram_write_data(ram_write_data), .ram_write_addr(ram_write_addr), .ram_write_en(ram_write_en),
+		.mem_rdata(mem_local_rdata), .mem_rdata_valid(mem_local_rdata_valid), .mem_ready(mem_local_ready), .mem_wdata_req(mem_local_wdata_req), .reset_n(reset_n),
+		.burst_begin(burst_begin), .mem_local_addr(mem_local_addr), .mem_be(mem_local_be), .mem_read_req(mem_local_read_req), .mem_size(mem_local_size),
+		.mem_wdata(mem_local_wdata), .mem_write_req(mem_local_write_req)
+		//Cong: dummy output
+		);
+
+assign curReadAddrMem = ram_read_addr;
+assign curWriteByteEnMem = ram_write_byte_en;
+assign curWriteDataMem = ram_write_data;
+assign curWriteAddrMem = ram_write_addr;
+assign curWriteEnMem = ram_write_en && (left_sel == 0);
+assign leftWriteByteEnMem = ram_write_byte_en;
+assign leftWriteDataMem = ram_write_data;
+assign leftWriteAddrMem = ram_write_addr;
+assign leftWriteEnMem = ram_write_en && (left_sel == 1);
+assign ram_read_data = curReadDataMem;
+endmodule
+`define BLOCKM 6'b010000
+`define BLOCKN 6'b010000
+`define BLOCKMDIVK 3'b010
+`define MEMBLOCKM 5'b01000
+`define MEMBLOCKN 5'b01000
+`define NWIDTH 6'b010100
+`define BLOCKWIDTH 4'b0101
+`define DDRSIZEWIDTH 6'b011000
+`define RAMSIZEWIDTH 4'b0101
+`define START 1'b0 //0
+`define SETUP 2'b01 //1
+`define FIRST 3'b010 //2
+`define MODE0_SETUP 3'b011 //3
+`define MODE0_WAIT 4'b0100 //4
+`define MODE0 4'b0101 //5
+`define MODE1_SETUP 4'b0110 //6
+`define MODE1_WAIT 4'b0111 //7
+`define MODE1 5'b01000 //8
+`define MODE2_SETUP 5'b01001 //9
+`define MODE2_WAIT 5'b01010 //10
+`define MODE2 5'b01011 //11
+`define MODE3_SETUP 5'b01100 //12
+`define MODE3_WAIT 5'b01101 //13
+`define MODE3 5'b01110 //14
+`define STALL 5'b01111 //15
+`define STALL_WAIT 6'b010000 //16
+`define WAIT 6'b010001 //17
+`define FINAL_WRITE 6'b010010 //18
+`define FINAL_WAIT 6'b010011 //19
+`define IDLE 6'b010100 //20
+`define LAST_SETUP 6'b010101 //21
+`define LAST_SETUP_WAIT 6'b010110 //22
+`define LAST 6'b010111 //23
+`define LAST_WAIT 6'b011000 //24
+`define MEM_IDLE 1'b0 //0
+`define MEM_WRITE 2'b01 //1
+`define MEM_WRITE_WAIT 3'b010 //2
+`define MEM_CHECK_DONE 3'b011 //3
+`define MEM_READ 4'b0100 //4
+`define MEM_READ_WAIT 4'b0101 //5
+`define MEM_DONE 4'b0110 //6
+`define MEM_WAIT_DONE 4'b0111 //7
+
+module MarshallerController (clk, start, done, input_N, offset,
+	comp_start, block_m, block_n, loop, mode, comp_done, cur_mem_sel, left_mem_sel,
+	dtu_write_req, dtu_read_req, dtu_mem_addr, dtu_ram_addr, dtu_size, dtu_ack, dtu_done, left_sel);
+
+
+input clk;
+input start;
+output done;
+input [`NWIDTH-1:0] input_N;
+input [`DDRSIZEWIDTH-1:0] offset;
+
+// for computation section
+output comp_start;
+output [`BLOCKWIDTH-1:0] block_m, block_n, loop;
+output [1:0] mode;
+input comp_done;
+output cur_mem_sel, left_mem_sel;
+
+// for data marshaller section
+output dtu_write_req,	dtu_read_req;
+output [`DDRSIZEWIDTH-1:0] dtu_mem_addr;
+output [`RAMSIZEWIDTH-1:0] dtu_ram_addr;
+output [`BLOCKWIDTH-1:0] dtu_size;
+input dtu_ack, dtu_done;
+output left_sel;
+
+reg [4:0] cur_state, next_state;
+reg [`NWIDTH-1:0] comp_N, N, mcount, ncount, Ndivk, mem_N;
+reg [1:0] mode;
+reg [`BLOCKWIDTH-1:0] block_m, block_n, loop, read_n;
+reg [`BLOCKWIDTH-1:0] write_n, write_n_buf;
+reg left_mem_sel, cur_mem_sel, no_left_switch;
+
+reg [3:0] cur_mem_state, next_mem_state;
+reg [`RAMSIZEWIDTH-1:0] ram_addr;
+reg [`DDRSIZEWIDTH-1:0] mem_addr;
+reg [`DDRSIZEWIDTH-1:0] mem_base, mem_top, mem_write, mem_left, mem_cur;
+reg [`DDRSIZEWIDTH-1:0] mem_write_buf;
+reg [`BLOCKWIDTH-1:0] mem_count;
+reg [1:0] mem_read;
+reg [`BLOCKWIDTH-1:0] mem_write_size, mem_write_size_buf, mem_read_size;
+wire mem_done;
+
+assign done = (cur_state == `IDLE);
+assign dtu_ram_addr = ram_addr;
+assign dtu_mem_addr = mem_addr;
+assign dtu_size = (cur_mem_state == `MEM_WRITE) ? mem_write_size : mem_read_size;
+assign comp_start = (cur_state == `MODE0)||(cur_state == `MODE1)||(cur_state == `MODE2)||(cur_state == `MODE3)||(cur_state == `FIRST)||(cur_state == `LAST);
+assign dtu_write_req = (cur_mem_state == `MEM_WRITE);
+assign dtu_read_req = (cur_mem_state == `MEM_READ);
+assign mem_done = (cur_mem_state == `MEM_DONE)&&(dtu_done == 1'b1);
+assign left_sel = mem_read == 2'b01 && (cur_mem_state == `MEM_READ || cur_mem_state == `MEM_READ_WAIT || cur_mem_state == `MEM_WAIT_DONE);
+
+// FSM to produce memory instructions to DTU
+always @ (posedge clk)
+begin
+	case (cur_mem_state)
+	`MEM_IDLE:
+	begin
+		if (cur_state == `START)
+			next_mem_state <= `MEM_CHECK_DONE;
+		else
+			next_mem_state <= `MEM_IDLE;
+	end
+	`MEM_DONE:
+	begin
+		if (cur_state == `MODE0 || cur_state == `MODE1 || cur_state == `MODE2 || 
+			cur_state == `MODE3 || cur_state == `FINAL_WRITE || cur_state == `LAST_SETUP)
+			next_mem_state <= `MEM_WRITE;
+		else if (cur_state == `FIRST)
+			next_mem_state <= `MEM_CHECK_DONE;
+		else
+			next_mem_state <= `MEM_DONE;
+	end
+	`MEM_WRITE:
+	begin
+		next_mem_state <= `MEM_WRITE_WAIT;
+	end
+	`MEM_WRITE_WAIT:
+	begin
+		if (dtu_ack == 1'b1)
+		begin
+			if (mem_count == write_n)
+				next_mem_state <= `MEM_WAIT_DONE;
+			else 
+				next_mem_state <= `MEM_WRITE;
+		end
+		else
+			next_mem_state <= `MEM_WRITE_WAIT;
+	end
+	`MEM_WAIT_DONE:
+	begin
+		if (dtu_done == 1'b1)
+			next_mem_state <= `MEM_CHECK_DONE;
+		else
+			next_mem_state <= `MEM_WAIT_DONE;
+	end
+	`MEM_CHECK_DONE:
+	begin
+		if (mem_read == 2'b10)
+			next_mem_state <= `MEM_DONE;
+		else
+			next_mem_state <= `MEM_READ;
+	end
+	`MEM_READ:
+	begin
+		next_mem_state <= `MEM_READ_WAIT;
+	end
+	`MEM_READ_WAIT:
+	begin
+		if (dtu_ack == 1'b1)
+		begin
+			if (mem_count == read_n)
+				next_mem_state <= `MEM_WAIT_DONE;
+			else
+				next_mem_state <= `MEM_READ;
+		end
+		else
+			next_mem_state <= `MEM_READ_WAIT;
+	end
+	default:
+		next_mem_state <= `MEM_IDLE;
+	endcase
+end
+
+always @ (posedge clk)
+begin
+	if (cur_mem_state == `MEM_DONE || cur_mem_state == `MEM_IDLE)
+	begin
+		ram_addr <= 5'b0;
+		mem_addr <= mem_write;
+		if (next_state == `LAST_WAIT || next_state == `FINAL_WAIT || next_state == `STALL)
+			mem_read <= 2'b00;
+		else if (next_state == `MODE0_SETUP || next_state == `SETUP || cur_state == `MODE0 || next_state == `LAST_SETUP_WAIT)
+			mem_read <= 2'b01;
+		else
+			mem_read <= 2'b10;
+		mem_count <= 5'b0;
+	end
+	else if (cur_mem_state == `MEM_CHECK_DONE)
+	begin
+		if (mem_read == 2'b10)
+		begin
+			mem_addr <= mem_left;
+			read_n <= loop;
+		end
+		else
+		begin
+			mem_addr <= mem_cur;
+			read_n <= block_n;
+		end
+		mem_read <= mem_read - 2'b01;
+		mem_count <= 5'b0;
+		ram_addr <= 5'b0;
+	end
+	else if (cur_mem_state == `MEM_WRITE || cur_mem_state == `MEM_READ)
+	begin
+		ram_addr <= ram_addr + `BLOCKMDIVK;
+		mem_addr <= mem_addr + Ndivk;
+		mem_count <= mem_count + 2'b01;
+	end
+	
+end
+
+// FSM to determine the block LU factorization algorithm
+always @ (posedge clk)
+begin
+	case (cur_state)
+	`START:
+	begin
+		next_state <= `SETUP;
+	end
+	`SETUP:
+	begin
+		next_state <= `WAIT;
+	end
+	`WAIT:
+	begin
+		if (mem_done == 1'b1)
+			next_state <= `FIRST;
+		else
+			next_state <= `WAIT;
+
+	end
+	`FIRST:
+	begin
+		if (mcount < comp_N)
+			next_state <= `MODE1_SETUP;
+		else if (ncount < comp_N)
+			next_state <= `MODE2_SETUP;
+		else
+			next_state <= `LAST_WAIT;
+	end
+	`MODE0_SETUP:
+	begin
+		next_state <= `MODE0_WAIT;
+	end
+	`MODE0_WAIT:
+	begin
+		if (mem_done == 1'b1 && comp_done == 1'b1)
+			next_state <= `MODE0;
+		else
+			next_state <= `MODE0_WAIT;
+
+	end
+	`MODE0:
+	begin
+		if (mcount < comp_N)
+			next_state <= `MODE1_SETUP;
+		else if (ncount < comp_N)
+			next_state <= `MODE2_SETUP;
+		else
+		begin
+			next_state <= `LAST_WAIT;
+		end
+	end
+	`MODE1_SETUP:
+	begin
+		next_state <= `MODE1_WAIT;
+	end
+	`MODE1_WAIT:
+	begin
+		if (mem_done == 1'b1 && comp_done == 1'b1)
+			next_state <= `MODE1;
+		else
+			next_state <= `MODE1_WAIT;
+
+	end
+	`MODE1:
+	begin
+		if (mcount < comp_N)
+			next_state <= `MODE1_SETUP;
+		else if (ncount < comp_N)
+			next_state <= `MODE2_SETUP;
+		else if (comp_N <= `BLOCKN + `BLOCKN)
+			next_state <= `STALL;
+		else
+			next_state <= `MODE0_SETUP;
+	end
+	`MODE2_SETUP:
+	begin
+		next_state <= `MODE2_WAIT;
+	end
+	`MODE2_WAIT:
+	begin
+		if (mem_done == 1'b1 && comp_done == 1'b1)
+			next_state <= `MODE2;
+		else
+			next_state <= `MODE2_WAIT;
+	end
+	`MODE2:
+	begin
+		if (mcount < comp_N)
+			next_state <= `MODE3_SETUP;
+		else if (ncount < comp_N)
+			next_state <= `MODE2_SETUP;
+		else if (comp_N <= `BLOCKN + `BLOCKN)
+			next_state <= `STALL;
+		else
+			next_state <= `MODE0_SETUP;
+	end
+	`MODE3_SETUP:
+	begin
+		next_state <= `MODE3_WAIT;
+	end
+	`MODE3_WAIT:
+	begin
+		if (mem_done == 1'b1 && comp_done == 1'b1)
+			next_state <= `MODE3;
+		else
+			next_state <= `MODE3_WAIT;
+	end
+	`MODE3:
+	begin
+		if (mcount < comp_N)
+			next_state <= `MODE3_SETUP;
+		else if (ncount < comp_N)
+			next_state <= `MODE2_SETUP;
+		else if (comp_N <= `BLOCKN + `BLOCKN)
+			next_state <= `STALL;
+		else
+			next_state <= `MODE0_SETUP;
+	end
+	`STALL:
+		next_state <= `STALL_WAIT;
+	`STALL_WAIT:
+		if (mem_done == 1'b1 && comp_done == 1'b1)
+			next_state <= `LAST_SETUP;
+		else
+			next_state <= `STALL_WAIT;
+	`LAST_SETUP:
+		next_state <= `LAST_SETUP_WAIT;
+	`LAST_SETUP_WAIT:
+		if (mem_done == 1'b1 && comp_done == 1'b1)
+			next_state <= `LAST;
+		else
+			next_state <= `LAST_SETUP_WAIT;
+	`LAST:
+		next_state <= `LAST_WAIT;
+	`LAST_WAIT:
+		if (mem_done == 1'b1 && comp_done == 1'b1)
+			next_state <= `FINAL_WRITE;
+		else
+			next_state <= `LAST_WAIT;
+	`FINAL_WRITE:
+		next_state <= `FINAL_WAIT;
+	`FINAL_WAIT:
+		if (mem_done == 1'b1)
+			next_state <= `IDLE;
+		else
+			next_state <= `FINAL_WAIT;
+	`IDLE:
+		if (start)
+			next_state <= `SETUP;
+		else
+			next_state <= `IDLE;
+	default:
+		next_state <= `START;
+	endcase
+end
+
+always @ (posedge clk)
+begin
+	if (start)
+	begin
+		cur_state <= `START;
+		cur_mem_state <= `MEM_IDLE;
+	end
+	else
+	begin
+		cur_state <= next_state;
+		cur_mem_state <= next_mem_state;
+	end
+end
+
+always @ (cur_state)
+begin
+	case (cur_state)
+	`MODE1:
+		mode = 2'b01;
+	`MODE2:
+		mode = 2'b10;
+	`MODE3:
+		mode = 2'b11;
+	default:
+		mode = 2'b00;
+	endcase
+end
+
+always @ (posedge clk)
+begin
+	if (start)
+	begin
+		comp_N <= input_N;
+		N <= input_N;
+	end
+	else if (next_state == `MODE0)
+	begin
+		comp_N <= comp_N - `BLOCKN;
+	end
+
+	Ndivk <= ((N+`BLOCKM-1)>>4)<<3;
+	mem_N <= Ndivk<<4;
+
+	if (start)
+	begin
+		mem_base <= offset;
+		mem_top <= offset;
+		mem_left <= offset;
+		mem_cur <= offset;
+	end
+	else if (cur_state == `MODE0_SETUP)
+	begin
+		mem_base <= mem_base + mem_N+`MEMBLOCKN;
+		mem_top <= mem_base + mem_N+`MEMBLOCKN;
+		mem_cur <= mem_base + mem_N+`MEMBLOCKN;
+		mem_left <= mem_base + mem_N+`MEMBLOCKN;
+	end
+	else if (cur_state == `MODE1_SETUP)
+	begin
+		mem_cur <= mem_cur + `MEMBLOCKM;
+	end	
+	else if (cur_state == `MODE3_SETUP)
+	begin
+		mem_cur <= mem_cur + `MEMBLOCKM;
+		mem_left <= mem_left + `MEMBLOCKM;
+	end
+	else if (cur_state == `MODE2_SETUP)
+	begin
+		mem_cur <= mem_top + mem_N;
+		mem_top <= mem_top + mem_N;
+		mem_left <= mem_base;
+	end
+
+	if (cur_state == `SETUP)
+	begin
+		mem_write <= 24'b0;
+		mem_write_buf <= 24'b0;
+		mem_write_size <= `BLOCKMDIVK;
+		mem_write_size_buf <= `BLOCKMDIVK;
+		write_n <= block_n;
+		write_n_buf <= block_n;
+	end
+	else if (cur_mem_state == `MEM_CHECK_DONE && mem_read == 0)
+	begin
+		mem_write <= mem_write_buf;
+		mem_write_buf <= mem_cur;
+		mem_write_size <= mem_write_size_buf;
+		mem_write_size_buf <= mem_read_size;
+		write_n <= write_n_buf;
+		write_n_buf <= block_n;
+	end
+
+	mem_read_size <= `BLOCKMDIVK;
+
+	if (start) begin
+		loop <= `BLOCKN;
+	end else if (next_state == `LAST) begin
+		loop <= comp_N[8:0] - `BLOCKN;
+	end
+
+	if (cur_state == `MODE0_SETUP || cur_state == `MODE2_SETUP || start) begin
+		mcount <= `BLOCKM;
+	end else if (cur_state == `MODE1_SETUP || cur_state == `MODE3_SETUP) begin
+		mcount <= mcount+`BLOCKM;
+	end
+
+	if (cur_state == `MODE0_SETUP || start) begin
+		ncount <= `BLOCKN;
+	end else if (cur_state == `MODE2_SETUP) begin
+		ncount <= ncount+`BLOCKN;
+	end
+
+	if (mcount < comp_N) begin
+		block_m <= `BLOCKM;
+	end else begin
+		block_m <= comp_N - mcount + `BLOCKM;
+	end 
+
+	if (ncount < comp_N) begin
+		block_n <= `BLOCKN;
+	end else begin
+		block_n <= comp_N - ncount + `BLOCKN;
+	end
+
+	if (start) begin
+		cur_mem_sel <= 1'b0;
+	end else if ((cur_state == `MODE0)||(cur_state == `MODE1)||(cur_state == `MODE2)||(cur_state == `MODE3)||
+		 (cur_state == `FIRST)||(cur_state == `FINAL_WRITE)||(cur_state == `LAST_SETUP)||(cur_state == `LAST)) begin
+		cur_mem_sel <= !cur_mem_sel;
+	end 
+
+	if (start) begin
+		no_left_switch <= 1'b0;
+	end else if ((cur_state == `MODE0)||(cur_state == `FIRST)) begin
+		no_left_switch <= 1'b1;
+	end else if ((cur_state == `MODE1)||(cur_state == `MODE2)||(cur_state == `MODE3)||
+		 (cur_state == `FINAL_WRITE)||(cur_state == `LAST_SETUP)) begin
+		no_left_switch <= 1'b0;
+	end
+
+	if (start) begin
+		left_mem_sel <= 1'b0;
+	end else if (((cur_state == `MODE0)||(cur_state ==`MODE1)||(cur_state == `MODE2)||(cur_state == `MODE3)||
+		 (cur_state == `FIRST)||(cur_state == `FINAL_WRITE)||(cur_state == `LAST_SETUP))&&(no_left_switch == 1'b0)) begin
+		left_mem_sel <= !left_mem_sel;
+	end 
+end
+
+endmodule
+
+
+//topoutputdelay = 1
+//auto-generated LU.v
+//datapath for computating LU factorization
+//by Wei Zhang
+
+`define rRAMSIZEWIDTH 5
+`define cSETUP 4'b0000
+`define cSTART 4'b0001
+`define cFETCH_COL 4'b0010
+`define cWAIT_COL 4'b0011
+`define cFIND_REC 4'b0100
+`define cMULT_COL 4'b0101
+`define cUPDATE_J 4'b0110
+`define cSTORE_MO 4'b0111
+`define cMULT_SUB 4'b1000
+`define cINCRE_I 4'b1001
+`define cWAIT 4'b1010
+`define cDONE 4'b1011
+`define cSTORE_DIAG 4'b1100
+`define cSTORE_DIAG2 4'b1101
+`define cSTART_FETCH_ROW 4'b1110
+`define cROW_WAIT 2'b00
+`define cFETCH_ROW 2'b01
+`define cDONE_FETCH_ROW 2'b10
+`define cLOAD_ROW_INC_J 2'b11
+
+`define PRECISION 7'b0100000
+`define NUMPE 5'b01000
+`define PEWIDTH 3'b011
+`define BLOCKWIDTH 4'b0101
+`define RAMWIDTH 10'b0100000000
+`define RAMNUMBYTES 7'b0100000
+`define RAMSIZEWIDTH 4'b0101
+`define TOPSIZEWIDTH 5'b01000
+`define TOPINPUTDELAY 3'b011
+`define TOPOUTPUTDELAY 2'b01
+`define MEMINPUTDELAY 3'b010
+`define MEMOUTPUTDELAY 2'b01
+`define TOPWIDTH 7'b0100000
+ 
+module LU (clk, start, m, n, loop, mode, done, 
+			curReadAddrMem, curReadDataMem, curWriteByteEnMem, curWriteDataMem, curWriteAddrMem, curWriteEnMem, curMemSel,
+			leftWriteByteEnMem, leftWriteDataMem, leftWriteAddrMem, leftWriteEnMem, leftMemSel
+);
+
+
+input clk, start;
+input[`BLOCKWIDTH-1:0] m, n, loop;
+input[1:0] mode;
+output done;
+wire[`RAMWIDTH-1:0] curWriteData0, curWriteData1;
+wire[`RAMSIZEWIDTH-1:0] curWriteAddr0, curReadAddr0, curWriteAddr1, curReadAddr1;
+wire[`RAMWIDTH-1:0] curReadData0, curReadData1;
+wire[`RAMNUMBYTES-1:0] curWriteByteEn0, curWriteByteEn1;
+wire curWriteEn0, curWriteEn1;
+
+input[`RAMWIDTH-1:0] curWriteDataMem;
+output[`RAMWIDTH-1:0] curReadDataMem;
+input[`RAMSIZEWIDTH-1:0] curWriteAddrMem, curReadAddrMem;
+input[`RAMNUMBYTES-1:0] curWriteByteEnMem;
+input curWriteEnMem;
+input[`RAMWIDTH-1:0] leftWriteDataMem;
+input[`RAMSIZEWIDTH-1:0] leftWriteAddrMem;
+input[`RAMNUMBYTES-1:0] leftWriteByteEnMem;
+input leftWriteEnMem;
+input leftMemSel, curMemSel;
+
+wire[`RAMWIDTH-1:0] curReadDataLU, curReadDataMem;
+wire[`RAMWIDTH-1:0] curWriteDataLU, curWriteDataMem;
+wire[`RAMSIZEWIDTH-1:0] curWriteAddrLU, curWriteAddrMem, curReadAddrLU, curReadAddrMem;
+wire[`RAMNUMBYTES-1:0] curWriteByteEnLU, curWriteByteEnMem;
+wire curWriteEnLU, curWriteEnMem;
+
+reg[`RAMWIDTH-1:0] curReadData0Reg0;
+reg[`RAMWIDTH-1:0] curReadData1Reg0;
+reg[`RAMWIDTH-1:0] leftReadData0Reg0;
+reg[`RAMWIDTH-1:0] leftReadData1Reg0;
+reg[`RAMWIDTH-1:0] curWriteData0Reg0;
+reg[`RAMWIDTH-1:0] curWriteData0Reg1;
+reg[`RAMWIDTH-1:0] curWriteData1Reg0;
+reg[`RAMWIDTH-1:0] curWriteData1Reg1;
+reg[`RAMSIZEWIDTH-1:0] curWriteAddr0Reg0;
+reg[`RAMSIZEWIDTH-1:0] curWriteAddr0Reg1;
+reg[`RAMSIZEWIDTH-1:0] curReadAddr0Reg0;
+reg[`RAMSIZEWIDTH-1:0] curReadAddr0Reg1;
+reg[`RAMSIZEWIDTH-1:0] curWriteAddr1Reg0;
+reg[`RAMSIZEWIDTH-1:0] curWriteAddr1Reg1;
+reg[`RAMSIZEWIDTH-1:0] curReadAddr1Reg0;
+reg[`RAMSIZEWIDTH-1:0] curReadAddr1Reg1;
+reg[`RAMNUMBYTES-1:0] curWriteByteEn0Reg0;
+reg[`RAMNUMBYTES-1:0] curWriteByteEn0Reg1;
+reg[`RAMNUMBYTES-1:0] curWriteByteEn1Reg0;
+reg[`RAMNUMBYTES-1:0] curWriteByteEn1Reg1;
+reg curWriteEn0Reg0;
+reg curWriteEn0Reg1;
+reg curWriteEn1Reg0;
+reg curWriteEn1Reg1;
+reg[`RAMWIDTH-1:0] leftWriteData0Reg0;
+reg[`RAMWIDTH-1:0] leftWriteData0Reg1;
+reg[`RAMWIDTH-1:0] leftWriteData1Reg0;
+reg[`RAMWIDTH-1:0] leftWriteData1Reg1;
+reg[`RAMSIZEWIDTH-1:0] leftWriteAddr0Reg0;
+reg[`RAMSIZEWIDTH-1:0] leftWriteAddr0Reg1;
+reg[`RAMSIZEWIDTH-1:0] leftReadAddr0Reg0;
+reg[`RAMSIZEWIDTH-1:0] leftReadAddr0Reg1;
+reg[`RAMSIZEWIDTH-1:0] leftWriteAddr1Reg0;
+reg[`RAMSIZEWIDTH-1:0] leftWriteAddr1Reg1;
+reg[`RAMSIZEWIDTH-1:0] leftReadAddr1Reg0;
+reg[`RAMSIZEWIDTH-1:0] leftReadAddr1Reg1;
+reg[`RAMNUMBYTES-1:0] leftWriteByteEn0Reg0;
+reg[`RAMNUMBYTES-1:0] leftWriteByteEn0Reg1;
+reg[`RAMNUMBYTES-1:0] leftWriteByteEn1Reg0;
+reg[`RAMNUMBYTES-1:0] leftWriteByteEn1Reg1;
+reg leftWriteEn0Reg0;
+reg leftWriteEn0Reg1;
+reg leftWriteEn1Reg0;
+reg leftWriteEn1Reg1;
+
+reg[`PRECISION-1:0] multOperand;
+reg[`PRECISION-1:0] diag;
+wire[`PRECISION-1:0] recResult;
+wire[`PRECISION-1:0] multA0;
+wire[`PRECISION-1:0] multA1;
+wire[`PRECISION-1:0] multA2;
+wire[`PRECISION-1:0] multA3;
+wire[`PRECISION-1:0] multA4;
+wire[`PRECISION-1:0] multA5;
+wire[`PRECISION-1:0] multA6;
+wire[`PRECISION-1:0] multA7;
+wire[`PRECISION-1:0] multResult0;
+wire[`PRECISION-1:0] multResult1;
+wire[`PRECISION-1:0] multResult2;
+wire[`PRECISION-1:0] multResult3;
+wire[`PRECISION-1:0] multResult4;
+wire[`PRECISION-1:0] multResult5;
+wire[`PRECISION-1:0] multResult6;
+wire[`PRECISION-1:0] multResult7;
+wire[`PRECISION-1:0] addA0;
+wire[`PRECISION-1:0] addA1;
+wire[`PRECISION-1:0] addA2;
+wire[`PRECISION-1:0] addA3;
+wire[`PRECISION-1:0] addA4;
+wire[`PRECISION-1:0] addA5;
+wire[`PRECISION-1:0] addA6;
+wire[`PRECISION-1:0] addA7;
+wire[`PRECISION-1:0] addResult0;
+wire[`PRECISION-1:0] addResult1;
+wire[`PRECISION-1:0] addResult2;
+wire[`PRECISION-1:0] addResult3;
+wire[`PRECISION-1:0] addResult4;
+wire[`PRECISION-1:0] addResult5;
+wire[`PRECISION-1:0] addResult6;
+wire[`PRECISION-1:0] addResult7;
+wire[`RAMWIDTH-1:0] leftReadData0, leftReadData1, leftWriteData0, leftWriteData1;
+wire[`RAMSIZEWIDTH-1:0] leftWriteAddr0, leftWriteAddr1, leftReadAddr0, leftReadAddr1;
+wire[`RAMNUMBYTES-1:0] leftWriteByteEn0, leftWriteByteEn1;
+wire leftWriteEn0, leftWriteEn1;
+wire[`RAMWIDTH-1:0] leftReadDataLU, leftWriteDataLU, leftWriteDataMem;
+wire[`RAMSIZEWIDTH-1:0] leftWriteAddrLU, leftWriteAddrMem, leftReadAddrLU;
+wire[`RAMNUMBYTES-1:0] leftWriteByteEnLU, leftWriteByteEnMem;
+wire leftWriteEnLU, leftWriteEnMem;
+
+wire[`PRECISION-1:0] topWriteData;
+reg[`PRECISION-1:0] topWriteDataLU;
+wire[`PRECISION-1:0] topReadData, topReadDataLU;
+wire[`TOPSIZEWIDTH-1:0] topWriteAddr, topWriteAddrLU, topReadAddr, topReadAddrLU;
+wire topWriteEn, topWriteEnLU;
+
+reg[`PRECISION-1:0] topReadDataReg0;
+reg[`PRECISION-1:0] topWriteDataReg0;
+reg[`PRECISION-1:0] topWriteDataReg1;
+reg[`PRECISION-1:0] topWriteDataReg2;
+reg[`TOPSIZEWIDTH-1:0] topWriteAddrReg0;
+reg[`TOPSIZEWIDTH-1:0] topWriteAddrReg1;
+reg[`TOPSIZEWIDTH-1:0] topWriteAddrReg2;
+reg[`TOPSIZEWIDTH-1:0] topReadAddrReg0;
+reg[`TOPSIZEWIDTH-1:0] topReadAddrReg1;
+reg[`TOPSIZEWIDTH-1:0] topReadAddrReg2;
+reg topWriteEnReg0;
+reg topWriteEnReg1;
+reg topWriteEnReg2;
+wire[`RAMWIDTH-1:0] rcWriteData;
+wire leftWriteSel, curWriteSel, topSourceSel;
+wire diagEn;
+wire[`PEWIDTH-1:0] topWriteSel;
+
+wire MOSel;
+wire MOEn;
+
+// control block
+LUControl conBlock (clk, start, m, n, loop, mode, done, 
+                    curReadAddrLU, curWriteAddrLU, curWriteByteEnLU, curWriteEnLU, curWriteSel,
+                    leftReadAddrLU, leftWriteAddrLU, leftWriteByteEnLU, leftWriteEnLU,  leftWriteSel,
+                    topReadAddrLU, topWriteAddrLU, topWriteEnLU, topWriteSel, topSourceSel, diagEn, MOSel, MOEn);
+
+// fp_div unit
+//floating point divider here
+fpu_div rec(.clock(clk), .n(32'h3F800000), .d(diag), .div(recResult));
+// on-chip memory blocks that store the matrix to be LU factorized
+// store current blocks data
+ram currentBlock0 (curWriteByteEn0, clk, curWriteData0, curReadAddr0, curWriteAddr0, curWriteEn0, curReadData0 );
+ram1 currentBlock1 (curWriteByteEn1, clk, curWriteData1, curReadAddr1, curWriteAddr1, curWriteEn1, curReadData1 );
+// store left blocks data
+ram2 leftBlock0(leftWriteByteEn0, clk, leftWriteData0, leftReadAddr0, leftWriteAddr0, leftWriteEn0, leftReadData0 );
+
+ram3 leftBlock1(leftWriteByteEn1, clk, leftWriteData1, leftReadAddr1, leftWriteAddr1, leftWriteEn1, leftReadData1 );
+
+// store top block data
+top_ram topBlock(clk, topWriteData, topReadAddr, topWriteAddr, topWriteEn, topReadDataLU );
+
+// processing elements that does the main computation of LU factorization
+mult_add PE0 (clk, multA0, multOperand, addA0, multResult0, addResult0);
+mult_add PE1 (clk, multA1, multOperand, addA1, multResult1, addResult1);
+mult_add PE2 (clk, multA2, multOperand, addA2, multResult2, addResult2);
+mult_add PE3 (clk, multA3, multOperand, addA3, multResult3, addResult3);
+mult_add PE4 (clk, multA4, multOperand, addA4, multResult4, addResult4);
+mult_add PE5 (clk, multA5, multOperand, addA5, multResult5, addResult5);
+mult_add PE6 (clk, multA6, multOperand, addA6, multResult6, addResult6);
+mult_add PE7 (clk, multA7, multOperand, addA7, multResult7, addResult7);
+
+// connect to ports of the left blocks
+assign leftWriteDataLU = (leftWriteSel == 1'b0) ? curReadDataLU : rcWriteData;
+always @ (posedge clk)
+begin
+	if(leftMemSel == 1'b0)
+	begin
+		leftWriteData0Reg0 <= leftWriteDataMem;
+		leftWriteAddr0Reg0 <= leftWriteAddrMem;
+		leftWriteByteEn0Reg0 <= leftWriteByteEnMem;
+		leftWriteEn0Reg0 <= leftWriteEnMem;
+		leftWriteData1Reg0 <= leftWriteDataLU;
+		leftWriteAddr1Reg0 <= leftWriteAddrLU;
+		leftWriteByteEn1Reg0 <= leftWriteByteEnLU;
+		leftWriteEn1Reg0 <= leftWriteEnLU;
+	end
+	else
+	begin
+		leftWriteData0Reg0 <= leftWriteDataLU;
+		leftWriteAddr0Reg0 <= leftWriteAddrLU;
+		leftWriteByteEn0Reg0 <= leftWriteByteEnLU;
+		leftWriteEn0Reg0 <= leftWriteEnLU;
+		leftWriteData1Reg0 <= leftWriteDataMem;
+		leftWriteAddr1Reg0 <= leftWriteAddrMem;
+		leftWriteByteEn1Reg0 <= leftWriteByteEnMem;
+		leftWriteEn1Reg0 <= leftWriteEnMem;
+	end
+	leftReadAddr0Reg0 <= leftReadAddrLU;
+	leftReadAddr1Reg0 <= leftReadAddrLU;
+	leftWriteData0Reg1 <= leftWriteData0Reg0;
+	leftWriteAddr0Reg1 <= leftWriteAddr0Reg0;
+	leftReadAddr0Reg1 <= leftReadAddr0Reg0;
+	leftWriteByteEn0Reg1 <= leftWriteByteEn0Reg0;
+	leftWriteEn0Reg1 <= leftWriteEn0Reg0;
+	leftWriteData1Reg1 <= leftWriteData1Reg0;
+	leftWriteAddr1Reg1 <= leftWriteAddr1Reg0;
+	leftReadAddr1Reg1 <= leftReadAddr1Reg0;
+	leftWriteByteEn1Reg1 <= leftWriteByteEn1Reg0;
+	leftWriteEn1Reg1 <= leftWriteEn1Reg0;
+end
+assign leftWriteData0 = leftWriteData0Reg1;
+assign leftWriteAddr0 = leftWriteAddr0Reg1;
+assign leftReadAddr0 = leftReadAddr0Reg1;
+assign leftWriteByteEn0 = leftWriteByteEn0Reg1;
+assign leftWriteEn0 = leftWriteEn0Reg1;
+assign leftWriteData1 = leftWriteData1Reg1;
+assign leftWriteAddr1 = leftWriteAddr1Reg1;
+assign leftReadAddr1 = leftReadAddr1Reg1;
+assign leftWriteByteEn1 = leftWriteByteEn1Reg1;
+assign leftWriteEn1 = leftWriteEn1Reg1;
+
+always @ (posedge clk)
+begin
+		leftReadData0Reg0 <= leftReadData0;
+		leftReadData1Reg0 <= leftReadData1;
+end
+assign leftReadDataLU = (leftMemSel == 1'b0) ? leftReadData1Reg0 : leftReadData0Reg0;
+// data feed to fp div unit
+always @ (posedge clk)
+begin
+	if (diagEn == 1'b1)
+	begin
+			diag <= topReadData;
+	end
+end
+// one of the inputs to the PE
+always @ (posedge clk)
+begin
+	if (start == 1'b1)
+		multOperand <= 0;
+	else if (MOEn == 1'b1)
+	begin
+		if (MOSel == 1'b0)
+			multOperand <= recResult;
+		else
+			multOperand <= topReadData;
+	end
+end
+
+// connections to top block memory ports
+always @ (topSourceSel or topWriteSel or curReadDataLU or addResult7 or addResult6 or addResult5 or addResult4 or addResult3 or addResult2 or addResult1 or addResult0)
+begin
+	if (topSourceSel == 1'b0)
+		case (topWriteSel)
+		0:
+			topWriteDataLU = curReadDataLU[255:224];
+		1:
+			topWriteDataLU = curReadDataLU[223:192];
+		2:
+			topWriteDataLU = curReadDataLU[191:160];
+		3:
+			topWriteDataLU = curReadDataLU[159:128];
+		4:
+			topWriteDataLU = curReadDataLU[127:96];
+		5:
+			topWriteDataLU = curReadDataLU[95:64];
+		6:
+			topWriteDataLU = curReadDataLU[63:32];
+		7:
+			topWriteDataLU = curReadDataLU[31:0];
+		default:
+			topWriteDataLU = curReadDataLU[`PRECISION-1:0];
+		endcase
+	else
+		case (topWriteSel)
+		0:
+			topWriteDataLU = addResult7;
+		1:
+			topWriteDataLU = addResult6;
+		2:
+			topWriteDataLU = addResult5;
+		3:
+			topWriteDataLU = addResult4;
+		4:
+			topWriteDataLU = addResult3;
+		5:
+			topWriteDataLU = addResult2;
+		6:
+			topWriteDataLU = addResult1;
+		7:
+			topWriteDataLU = addResult0;
+		default:
+			topWriteDataLU = addResult0;
+		endcase
+end
+
+always @ (posedge clk)
+begin
+	topWriteDataReg0 <= topWriteDataLU;
+	topReadAddrReg0 <= topReadAddrLU;
+	topWriteAddrReg0 <= topWriteAddrLU;
+	topWriteEnReg0 <= topWriteEnLU;
+	topWriteDataReg1 <= topWriteDataReg0;
+	topReadAddrReg1 <= topReadAddrReg0;
+	topWriteAddrReg1 <= topWriteAddrReg0;
+	topWriteEnReg1 <= topWriteEnReg0;
+	topWriteDataReg2 <= topWriteDataReg1;
+	topReadAddrReg2 <= topReadAddrReg1;
+	topWriteAddrReg2 <= topWriteAddrReg1;
+	topWriteEnReg2 <= topWriteEnReg1;
+end
+assign topWriteData = topWriteDataReg2;
+assign topReadAddr = topReadAddrReg2;
+assign topWriteAddr = topWriteAddrReg2;
+assign topWriteEn = topWriteEnReg2;
+always @ (posedge clk)
+begin
+	topReadDataReg0 <= topReadDataLU;
+end
+assign topReadData = topReadDataReg0;
+
+// connections to processing element
+assign multA0 = leftReadDataLU[31:0];
+assign multA1 = leftReadDataLU[63:32];
+assign multA2 = leftReadDataLU[95:64];
+assign multA3 = leftReadDataLU[127:96];
+assign multA4 = leftReadDataLU[159:128];
+assign multA5 = leftReadDataLU[191:160];
+assign multA6 = leftReadDataLU[223:192];
+assign multA7 = leftReadDataLU[255:224];
+
+assign addA0 = curReadDataLU[31:0];
+assign addA1 = curReadDataLU[63:32];
+assign addA2 = curReadDataLU[95:64];
+assign addA3 = curReadDataLU[127:96];
+assign addA4 = curReadDataLU[159:128];
+assign addA5 = curReadDataLU[191:160];
+assign addA6 = curReadDataLU[223:192];
+assign addA7 = curReadDataLU[255:224];
+
+// connections to ports of the current blocks
+assign rcWriteData[31:0] = (curWriteSel == 0) ? multResult0 : addResult0;
+assign rcWriteData[63:32] = (curWriteSel == 0) ? multResult1 : addResult1;
+assign rcWriteData[95:64] = (curWriteSel == 0) ? multResult2 : addResult2;
+assign rcWriteData[127:96] = (curWriteSel == 0) ? multResult3 : addResult3;
+assign rcWriteData[159:128] = (curWriteSel == 0) ? multResult4 : addResult4;
+assign rcWriteData[191:160] = (curWriteSel == 0) ? multResult5 : addResult5;
+assign rcWriteData[223:192] = (curWriteSel == 0) ? multResult6 : addResult6;
+assign rcWriteData[255:224] = (curWriteSel == 0) ? multResult7 : addResult7;
+assign curWriteDataLU = rcWriteData;
+
+always @ (posedge clk)
+begin
+	if(curMemSel == 1'b0)
+	begin
+		curWriteData0Reg0 <= curWriteDataMem;
+		curWriteAddr0Reg0 <= curWriteAddrMem;
+		curReadAddr0Reg0 <= curReadAddrMem;
+		curWriteByteEn0Reg0 <= curWriteByteEnMem;
+		curWriteEn0Reg0 <= curWriteEnMem;
+		curWriteData1Reg0 <= curWriteDataLU;
+		curWriteAddr1Reg0 <= curWriteAddrLU;
+		curReadAddr1Reg0 <= curReadAddrLU;
+		curWriteByteEn1Reg0 <= curWriteByteEnLU;
+		curWriteEn1Reg0 <= curWriteEnLU;
+	end
+	else
+	begin
+		curWriteData0Reg0 <= curWriteDataLU;
+		curWriteAddr0Reg0 <= curWriteAddrLU;
+		curReadAddr0Reg0 <= curReadAddrLU;
+		curWriteByteEn0Reg0 <= curWriteByteEnLU;
+		curWriteEn0Reg0 <= curWriteEnLU;
+		curWriteData1Reg0 <= curWriteDataMem;
+		curWriteAddr1Reg0 <= curWriteAddrMem;
+		curReadAddr1Reg0 <= curReadAddrMem;
+		curWriteByteEn1Reg0 <= curWriteByteEnMem;
+		curWriteEn1Reg0 <= curWriteEnMem;
+	end
+	curWriteData0Reg1 <= curWriteData0Reg0;
+	curWriteAddr0Reg1 <= curWriteAddr0Reg0;
+	curReadAddr0Reg1 <= curReadAddr0Reg0;
+	curWriteByteEn0Reg1 <= curWriteByteEn0Reg0;
+	curWriteEn0Reg1 <= curWriteEn0Reg0;
+	curWriteData1Reg1 <= curWriteData1Reg0;
+	curWriteAddr1Reg1 <= curWriteAddr1Reg0;
+	curReadAddr1Reg1 <= curReadAddr1Reg0;
+	curWriteByteEn1Reg1 <= curWriteByteEn1Reg0;
+	curWriteEn1Reg1 <= curWriteEn1Reg0;
+end
+assign curWriteData0 = curWriteData0Reg1;
+assign curWriteAddr0 = curWriteAddr0Reg1;
+assign curReadAddr0 = curReadAddr0Reg1;
+assign curWriteByteEn0 = curWriteByteEn0Reg1;
+assign curWriteEn0 = curWriteEn0Reg1;
+assign curWriteData1 = curWriteData1Reg1;
+assign curWriteAddr1 = curWriteAddr1Reg1;
+assign curReadAddr1 = curReadAddr1Reg1;
+assign curWriteByteEn1 = curWriteByteEn1Reg1;
+assign curWriteEn1 = curWriteEn1Reg1;
+
+always @ (posedge clk)
+begin
+		curReadData0Reg0 <= curReadData0;
+		curReadData1Reg0 <= curReadData1;
+end
+assign curReadDataMem = (curMemSel == 0) ? curReadData0Reg0 : curReadData1Reg0;
+assign curReadDataLU = (curMemSel == 0) ? curReadData1Reg0 : curReadData0Reg0;
+endmodule
+
+module LUControl (clk, start_in, m_in, n_in, loop_in, mode_in, done,
+					curReadAddr, curWriteAddr, curWriteByteEn, curWriteEn, curWriteSel, 
+					leftReadAddr, leftWriteAddr, leftWriteByteEn, leftWriteEn,  leftWriteSel,
+					topReadAddr, topWriteAddr, topWriteEn, topWriteSel, topSourceSel, diagEn, MOSel, MOEn);
+
+input clk, start_in;
+input[5-1:0] m_in, n_in, loop_in;
+input[1:0] mode_in;
+output done;
+
+output[32-1:0] curWriteByteEn;
+output[5-1:0] curWriteAddr, curReadAddr;
+output curWriteEn;
+
+output[32-1:0] leftWriteByteEn;
+output[5-1:0] leftWriteAddr, leftReadAddr;
+output leftWriteEn;
+
+output[8-1:0] topWriteAddr, topReadAddr;
+output topWriteEn;
+
+output leftWriteSel, curWriteSel, topSourceSel, diagEn;
+output[3-1:0] topWriteSel;
+
+output MOSel;
+output MOEn;
+
+reg start;
+reg[15:0]startDelay;
+reg[5-1:0] m, n, stop, stop2, loop;
+reg[1:0] mode;
+reg[3:0] nextState, currentState;
+reg[1:0] nextRowState, currentRowState;
+reg startFetchRow, doneFetchRow, loadRow, writeRow;
+reg updateCounter;
+
+reg[5-1:0] i1, j;
+reg[8-1:0] nextTopIdx, nextTopIdx2, curTopIdx, nextTopIdxCounter;
+reg[2-1:0] topIdx, topIdxCounter, mdivk;
+reg[5-1:0] diagIdx, leftIdx, msIdx;
+reg[3-1:0] imodk, i1modk;
+reg[5-1:0] diagIdxCounter, leftIdxCounter, msIdxCounter, readRowCounter, topWriteCounter;
+reg[32-1:0] byteEn, i1modkByteEn;
+
+reg done;
+
+reg[32-1:0] curWriteByteEn;
+reg[5-1:0] curWriteAddr, curReadAddr;
+reg curWriteEn;
+
+reg[32-1:0] leftWriteByteEn;
+reg[5-1:0] leftWriteAddr, leftReadAddr;
+reg leftWriteEn;
+
+reg[8-1:0] topWriteAddr, topReadAddr;
+reg topWriteEn;
+
+reg leftWriteSel, curWriteSel, topSourceSel, diagEn;
+reg[3-1:0] topWriteSel;
+
+reg MOSel;
+reg MOEn;
+
+reg[5-1:0] counter;
+reg[6-1:0] divCounter;
+
+reg[32-1:0]writeByteEnDelay0; 
+reg[32-1:0]writeByteEnDelay1; 
+reg[32-1:0]writeByteEnDelay2; 
+reg[32-1:0]writeByteEnDelay3; 
+reg[32-1:0]writeByteEnDelay4; 
+reg[32-1:0]writeByteEnDelay5; 
+reg[32-1:0]writeByteEnDelay6; 
+reg[32-1:0]writeByteEnDelay7; 
+reg[32-1:0]writeByteEnDelay8; 
+reg[32-1:0]writeByteEnDelay9; 
+reg[32-1:0]writeByteEnDelay10; 
+reg[32-1:0]writeByteEnDelay11; 
+reg[32-1:0]writeByteEnDelay12; 
+reg[32-1:0]writeByteEnDelay13; 
+reg[32-1:0]writeByteEnDelay14; 
+reg[32-1:0]writeByteEnDelay15; 
+reg[32-1:0]writeByteEnDelay16; 
+reg[32-1:0]writeByteEnDelay17; 
+reg[32-1:0]writeByteEnDelay18; 
+reg[32-1:0]writeByteEnDelay19; 
+reg[32-1:0]writeByteEnDelay20; 
+reg[32-1:0]writeByteEnDelay21; 
+reg[32-1:0]writeByteEnDelay22; 
+reg[32-1:0]writeByteEnDelay23; 
+reg[32-1:0]writeByteEnDelay24; 
+reg[32-1:0]writeByteEnDelay25; 
+reg[32-1:0]writeByteEnDelay26; 
+reg[32-1:0]writeByteEnDelay27; 
+reg[32-1:0]writeByteEnDelay28; 
+reg[32-1:0]writeByteEnDelay29; 
+reg[32-1:0]writeByteEnDelay30; 
+reg[32-1:0]writeByteEnDelay31; 
+
+reg[5-1:0]curWriteAddrDelay0; 
+reg[5-1:0]curWriteAddrDelay1; 
+reg[5-1:0]curWriteAddrDelay2; 
+reg[5-1:0]curWriteAddrDelay3; 
+reg[5-1:0]curWriteAddrDelay4; 
+reg[5-1:0]curWriteAddrDelay5; 
+reg[5-1:0]curWriteAddrDelay6; 
+reg[5-1:0]curWriteAddrDelay7; 
+reg[5-1:0]curWriteAddrDelay8; 
+reg[5-1:0]curWriteAddrDelay9; 
+reg[5-1:0]curWriteAddrDelay10; 
+reg[5-1:0]curWriteAddrDelay11; 
+reg[5-1:0]curWriteAddrDelay12; 
+reg[5-1:0]curWriteAddrDelay13; 
+reg[5-1:0]curWriteAddrDelay14; 
+reg[5-1:0]curWriteAddrDelay15; 
+reg[5-1:0]curWriteAddrDelay16; 
+reg[5-1:0]curWriteAddrDelay17; 
+reg[5-1:0]curWriteAddrDelay18; 
+reg[5-1:0]curWriteAddrDelay19; 
+reg[5-1:0]curWriteAddrDelay20; 
+reg[5-1:0]curWriteAddrDelay21; 
+reg[5-1:0]curWriteAddrDelay22; 
+reg[5-1:0]curWriteAddrDelay23; 
+reg[5-1:0]curWriteAddrDelay24; 
+reg[5-1:0]curWriteAddrDelay25; 
+reg[5-1:0]curWriteAddrDelay26; 
+reg[5-1:0]curWriteAddrDelay27; 
+reg[5-1:0]curWriteAddrDelay28; 
+reg[5-1:0]curWriteAddrDelay29; 
+reg[5-1:0]curWriteAddrDelay30; 
+reg[5-1:0]curWriteAddrDelay31; 
+
+reg[5-1:0]curReadAddrDelay0; 
+reg[5-1:0]curReadAddrDelay1; 
+reg[5-1:0]curReadAddrDelay2; 
+reg[5-1:0]curReadAddrDelay3; 
+reg[5-1:0]curReadAddrDelay4; 
+reg[5-1:0]curReadAddrDelay5; 
+reg[5-1:0]curReadAddrDelay6; 
+reg[5-1:0]curReadAddrDelay7; 
+reg[5-1:0]curReadAddrDelay8; 
+reg[5-1:0]curReadAddrDelay9; 
+reg[5-1:0]curReadAddrDelay10; 
+reg[5-1:0]curReadAddrDelay11; 
+
+reg[32-1:0]leftWriteEnDelay; 
+reg[32-1:0]curWriteEnDelay; 
+reg[5-1:0]leftWriteSelDelay; 
+reg[16-1:0]curWriteSelDelay; 
+reg[5-1:0]leftReadAddrDelay0; 
+reg[8-1:0]topWriteAddrDelay0; 
+reg[8-1:0]topWriteAddrDelay1; 
+reg[8-1:0]topWriteAddrDelay2; 
+reg[8-1:0]topWriteAddrDelay3; 
+reg[8-1:0]topWriteAddrDelay4; 
+reg[8-1:0]topWriteAddrDelay5; 
+reg[8-1:0]topWriteAddrDelay6; 
+reg[8-1:0]topWriteAddrDelay7; 
+reg[8-1:0]topWriteAddrDelay8; 
+reg[8-1:0]topWriteAddrDelay9; 
+reg[8-1:0]topWriteAddrDelay10; 
+reg[8-1:0]topWriteAddrDelay11; 
+reg[8-1:0]topWriteAddrDelay12; 
+reg[8-1:0]topWriteAddrDelay13; 
+reg[8-1:0]topWriteAddrDelay14; 
+reg[8-1:0]topWriteAddrDelay15; 
+reg[8-1:0]topWriteAddrDelay16; 
+reg[8-1:0]topWriteAddrDelay17; 
+reg[8-1:0]topWriteAddrDelay18; 
+reg[8-1:0]topWriteAddrDelay19; 
+reg[8-1:0]topWriteAddrDelay20; 
+reg[8-1:0]topWriteAddrDelay21; 
+reg[8-1:0]topWriteAddrDelay22; 
+reg[8-1:0]topWriteAddrDelay23; 
+reg[8-1:0]topWriteAddrDelay24; 
+reg[8-1:0]topWriteAddrDelay25; 
+reg[8-1:0]topWriteAddrDelay26; 
+reg[8-1:0]topWriteAddrDelay27; 
+reg[8-1:0]topWriteAddrDelay28; 
+reg[8-1:0]topWriteAddrDelay29; 
+reg[8-1:0]topWriteAddrDelay30; 
+reg[8-1:0]topWriteAddrDelay31; 
+
+reg [32-1:0]topWriteEnDelay;
+reg [5-1:0]topSourceSelDelay;
+reg[3-1:0]topWriteSelDelay0; 
+reg[3-1:0]topWriteSelDelay1; 
+reg[3-1:0]topWriteSelDelay2; 
+reg[3-1:0]topWriteSelDelay3; 
+reg[3-1:0]topWriteSelDelay4; 
+reg[3-1:0]topWriteSelDelay5; 
+reg[3-1:0]topWriteSelDelay6; 
+reg[3-1:0]topWriteSelDelay7; 
+reg[3-1:0]topWriteSelDelay8; 
+reg[3-1:0]topWriteSelDelay9; 
+reg[3-1:0]topWriteSelDelay10; 
+reg[3-1:0]topWriteSelDelay11; 
+reg[3-1:0]topWriteSelDelay12; 
+reg[3-1:0]topWriteSelDelay13; 
+reg[3-1:0]topWriteSelDelay14; 
+reg[3-1:0]topWriteSelDelay15; 
+reg[3-1:0]topWriteSelDelay16; 
+reg[3-1:0]topWriteSelDelay17; 
+reg[3-1:0]topWriteSelDelay18; 
+reg[3-1:0]topWriteSelDelay19; 
+reg[3-1:0]topWriteSelDelay20; 
+reg[3-1:0]topWriteSelDelay21; 
+reg[3-1:0]topWriteSelDelay22; 
+reg[3-1:0]topWriteSelDelay23; 
+reg[3-1:0]topWriteSelDelay24; 
+reg[3-1:0]topWriteSelDelay25; 
+reg[3-1:0]topWriteSelDelay26; 
+reg[3-1:0]topWriteSelDelay27; 
+reg[3-1:0]topWriteSelDelay28; 
+reg[3-1:0]topWriteSelDelay29; 
+reg[3-1:0]topWriteSelDelay30; 
+reg[3-1:0]topWriteSelDelay31; 
+
+reg [6-1:0]diagEnDelay;
+reg[6-1:0]MOEnDelay;
+reg [5-1:0]waitCycles;
+
+// register store m, n and mdivk value
+always @ (posedge clk)
+begin
+	if (start_in == 1'b1)
+	begin
+		n <= n_in;
+		m <= m_in;
+		loop <= loop_in;
+		mode <= mode_in;
+	end
+	if (mode[0] == 1'b0 && m == loop)
+		stop <= loop;
+	else
+		stop <= loop+1'b1;
+	stop2 <= loop;
+	startDelay[0] <= start_in;
+	startDelay[1] <= startDelay[0];
+	startDelay[2] <= startDelay[1];
+	startDelay[3] <= startDelay[2];
+	startDelay[4] <= startDelay[3];
+	startDelay[5] <= startDelay[4];
+	startDelay[6] <= startDelay[5];
+	startDelay[7] <= startDelay[6];
+	startDelay[8] <= startDelay[7];
+	startDelay[9] <= startDelay[8];
+	startDelay[10] <= startDelay[9];
+	startDelay[11] <= startDelay[10];
+	startDelay[12] <= startDelay[11];
+	startDelay[13] <= startDelay[12];
+	startDelay[14] <= startDelay[13];
+	startDelay[15] <= startDelay[14];
+	start <= startDelay[15];
+	mdivk <= (m+8-1)>>3;
+end
+
+// registers that store values that are used in FSM, dependent on i and/or j
+always @ (posedge clk)
+begin
+	if (start == 1'b1)
+		topIdx <= 2'b00; //offset1divk;
+	else if (currentState == `cINCRE_I && i1modk == 8-1 && mode[0] == 1'b0)
+		topIdx <= topIdx + 1'b1;
+		
+	if (start == 1'b1)
+		diagIdx <= 5'b00000;
+	else if (currentState == `cSTORE_DIAG && mode == 2'b01)
+		diagIdx <= 2;	else if (currentState == `cINCRE_I)
+	begin
+		if ((imodk == 8-1 && mode == 2'b00) || (i1modk == 8-1 && mode == 2'b01))
+			diagIdx <= diagIdx + 2 + 1;
+		else
+			diagIdx <= diagIdx + 2;
+	end
+	
+	if (start == 1'b1)
+		leftIdx <= 5'b00000;
+	else if (currentState == `cINCRE_I)
+	begin
+		if (i1modk == 8-1 && mode[0] == 1'b0)
+			leftIdx <= leftIdx + 2 + 1;
+		else
+			leftIdx <= leftIdx + 2;
+	end
+
+	if (start == 1'b1)
+		msIdx <= 5'b00000;
+	else if (currentState == `cUPDATE_J)
+		if (mode[1] == 1'b0)
+			msIdx <= leftIdx + 2;
+		else
+			msIdx <= topIdx;
+	else if (nextRowState == `cLOAD_ROW_INC_J)
+		msIdx <= msIdx + 2;
+
+	if (start == 1'b1)
+		imodk <= 3'b000;
+	else if (currentState == `cINCRE_I)
+	begin
+		if (imodk == 8-1)
+		imodk <= 3'b000;
+		else
+			imodk <= imodk + 1'b1;
+	end
+	
+	if (start == 1'b1)
+		i1modk <= 3'b001;
+	else if (currentState == `cINCRE_I)
+	begin
+		if (i1modk == 8-1)
+		i1modk <= 3'b000;
+		else
+			i1modk <= i1modk + 1'b1;
+	end
+	
+	if (start == 1'b1)
+		nextTopIdx <= 8'b00000000;
+	else if (currentState == `cINCRE_I)
+		if (mode[1] == 0)
+			nextTopIdx <= nextTopIdx + n + 1;
+		else
+			nextTopIdx <= nextTopIdx + n;
+ nextTopIdx2 <= nextTopIdx + n + 1;
+
+	if (start == 1'b1)
+		curTopIdx <= 8'b00000001;
+	else if (currentState == `cUPDATE_J)
+   if (mode[1] == 1'b0)
+		  curTopIdx <= nextTopIdx+1;
+   else
+		  curTopIdx <= nextTopIdx;
+	else if (nextRowState == `cLOAD_ROW_INC_J)
+		curTopIdx <= curTopIdx + 1;
+	
+	if (start == 1'b1)
+		i1 <= 5'b00001;
+	else if (currentState == `cINCRE_I)
+	   i1 <= i1 + 1;
+
+	if (start == 1'b1)
+		j <= 5'b00000;
+	else if (currentState == `cUPDATE_J)
+		if (mode[1] == 1'b0)
+			j <= i1;
+		else
+		j <= 5'b00000;
+	else if (currentRowState == `cLOAD_ROW_INC_J)
+		j <= j + 1;
+
+// compute cycles of delay in FSM
+	if (currentState == `cSTORE_MO)
+		waitCycles <= 32-1;
+	else if (currentState == `cINCRE_I)
+	begin
+		if (i1 == stop-1)
+			if (mode[1] == 1'b1)
+				waitCycles <= 32-1 + 6 - 3;
+			else
+				waitCycles <= waitCycles + 5 - 2;
+		else if (mode == 2'b01 && waitCycles < 32-1 - (16-1) - 4)
+			waitCycles <= 32-1 - (16-1) - 4;
+		else if (mode == 2'b10 && i1modk == 8-1)
+			waitCycles <= 32-1 + 6 - 3;
+		else if (mode == 2'b00)
+			waitCycles <= waitCycles + 6 ;
+	end
+else if (waitCycles >5'b00000)
+		waitCycles <= waitCycles - 1;
+
+end
+
+// determining next state of main FSM
+always @ (currentState or start or mode or m or n or counter or mdivk or topIdxCounter or doneFetchRow or divCounter or j or stop2 or waitCycles or stop or i1)
+begin
+	case (currentState)
+	`cSETUP:
+	begin
+		if (start == 1'b1)
+			nextState = `cSTART;
+		else
+			nextState = `cSETUP;
+		updateCounter = 1'b1;
+	end
+	`cSTART:
+	begin
+		if (mode == 2'b00)
+		begin
+			if (m == 1 && n == 1)
+				nextState = `cDONE;
+			else
+				nextState = `cFETCH_COL;
+		end
+		else if (mode == 2'b01)
+			nextState = `cSTORE_DIAG;
+		else if (mode == 2'b10)
+			nextState = `cSTART_FETCH_ROW;
+		else
+			nextState = `cUPDATE_J;
+		updateCounter = 1'b1;
+	end
+	`cSTART_FETCH_ROW:
+	begin
+		if (counter == 5+6-1)
+   begin
+		  if (mode == 2'b00)
+			  nextState = `cSTORE_DIAG;
+		  else
+			  nextState = `cUPDATE_J;
+	  end
+		else
+			nextState = `cSTART_FETCH_ROW;
+		updateCounter = 1'b0;
+	end
+	`cFETCH_COL:
+		if (counter >= mdivk-1)
+		begin
+			if (mode == 2'b00 && counter < 5)
+			begin
+				nextState = `cWAIT_COL;
+				updateCounter = 1'b0;
+			end
+			else
+			begin
+				if (mode == 2'b00)
+					nextState = `cSTART_FETCH_ROW;
+				else
+					nextState = `cFIND_REC;
+				updateCounter = 1'b1;
+			end
+		end
+		else
+		begin
+			nextState = `cFETCH_COL;
+			updateCounter = 1'b0;
+		end
+	`cWAIT_COL:
+		if (counter >= 5)
+		begin
+			if (mode == 0)
+				nextState = `cSTART_FETCH_ROW;
+			else
+				nextState = `cFIND_REC;
+			updateCounter = 1;
+		end
+		else
+		begin
+			nextState = `cWAIT_COL;
+			updateCounter = 0;
+		end
+	`cSTORE_DIAG:
+	begin
+		if (mode == 0)
+			nextState =  `cFIND_REC;
+		else
+			nextState =  `cFETCH_COL;
+		updateCounter = 1;
+	end
+	`cFIND_REC:
+		if (divCounter == 56)
+		begin
+			if (mode == 0)
+				nextState = `cMULT_COL;
+			else
+				nextState = `cSTORE_DIAG2;
+			updateCounter = 1;
+		end
+		else
+		begin
+			nextState = `cFIND_REC;
+			updateCounter = 0;
+		end
+	`cSTORE_DIAG2:
+	begin
+		nextState =  `cMULT_COL;
+		updateCounter = 1;
+	end
+	`cMULT_COL:
+		if (topIdxCounter == mdivk-1)
+		begin
+			nextState = `cUPDATE_J;
+			updateCounter = 0;
+		end
+		else
+		begin
+			nextState = `cMULT_COL;
+			updateCounter = 0;
+		end
+	`cUPDATE_J:
+		if ((mode[1] == 1 || counter >= 16-1) && doneFetchRow == 1)
+		begin
+			nextState = `cSTORE_MO;
+			updateCounter = 1;
+		end
+		else
+		begin
+			nextState = `cUPDATE_J;
+			updateCounter = 0;
+		end
+	`cSTORE_MO:
+	begin
+		if (j == stop2)
+		begin
+			if (counter == mdivk-1+5-2)
+				nextState = `cDONE;
+			else
+				nextState = `cSTORE_MO;
+			updateCounter = 0;
+		end
+		else
+		begin
+			nextState =  `cMULT_SUB;
+			updateCounter = 1;
+		end
+	end
+	`cMULT_SUB:
+		if (topIdxCounter == mdivk-1)
+		begin
+			if (j == n-1)
+				nextState = `cINCRE_I;
+			else
+				nextState = `cMULT_SUB;
+			updateCounter = 1;
+		end
+		else
+		begin
+			nextState = `cMULT_SUB;
+			updateCounter = 0;
+		end
+	`cINCRE_I:
+	begin
+		nextState = `cWAIT;
+		updateCounter = 1;
+	end
+	`cWAIT:
+		if (waitCycles == 0)
+		begin
+			if (i1 == stop)
+				nextState = `cDONE;
+			else if (mode == 0)
+				nextState = `cSTORE_DIAG;
+			else if (mode == 1)
+				nextState = `cFIND_REC;
+			else
+				nextState = `cUPDATE_J;
+			updateCounter = 1;
+		end
+		else
+		begin
+			nextState = `cWAIT;
+			updateCounter = 0;
+		end
+	`cDONE:
+	begin
+		nextState = `cDONE;
+		updateCounter = 0;
+	end
+	default:
+	begin
+		nextState = `cSETUP;
+		updateCounter = 1;
+	end
+	endcase
+end
+
+always @ (currentRowState or currentState or nextState or i1 or topIdxCounter or mdivk or msIdxCounter or readRowCounter or j or n or mode)
+begin
+	if (currentRowState == `cDONE_FETCH_ROW)
+		doneFetchRow = 1;
+	else
+		doneFetchRow = 0;
+		if((nextState == `cSTART_FETCH_ROW && currentState != `cSTART_FETCH_ROW && i1 == 1))
+		startFetchRow = 1;
+	else
+		startFetchRow = 0;
+	if (currentState == `cMULT_SUB && topIdxCounter+2 == mdivk)
+		loadRow = 1;
+	else
+		loadRow = 0;
+	writeRow = (msIdxCounter == readRowCounter)&&(currentState==`cMULT_SUB)&&(j!=n)&&(mode[0] == 0);
+end
+
+// second FSM that controls the control signals to temp_top block
+always @ (currentRowState or nextTopIdxCounter or n or startFetchRow or loadRow or topIdx or mdivk or nextState)
+begin
+	case (currentRowState)
+	`cFETCH_ROW:
+		if (nextTopIdxCounter == n-1)
+			nextRowState = `cDONE_FETCH_ROW;
+		else
+			nextRowState = `cFETCH_ROW;
+	`cDONE_FETCH_ROW:
+		if (startFetchRow == 1)
+			nextRowState = `cFETCH_ROW;
+		else if (loadRow == 1 || (topIdx+1 == mdivk && nextState == `cMULT_SUB))
+			nextRowState = `cLOAD_ROW_INC_J;
+		else
+			nextRowState = `cDONE_FETCH_ROW;
+	`cLOAD_ROW_INC_J:
+		if (topIdx+1 == mdivk && nextState == `cMULT_SUB)
+			nextRowState = `cLOAD_ROW_INC_J;
+		else
+			nextRowState = `cDONE_FETCH_ROW;
+	default:
+		nextRowState = `cDONE_FETCH_ROW;
+	endcase
+end
+
+// address counters
+always @ (posedge clk)
+begin
+	if (updateCounter == 1 || currentRowState == `cLOAD_ROW_INC_J)
+		topIdxCounter <= topIdx;
+	else
+		topIdxCounter <= topIdxCounter + 1;
+
+	if (updateCounter == 1)
+		diagIdxCounter <= diagIdx;
+	else
+		diagIdxCounter <= diagIdxCounter + 1;
+
+	if (updateCounter == 1 || currentRowState == `cLOAD_ROW_INC_J)
+		msIdxCounter <= msIdx;
+	else
+		msIdxCounter <= msIdxCounter + 1;
+
+	if (updateCounter == 1 || currentRowState == `cLOAD_ROW_INC_J)
+		leftIdxCounter <= leftIdx;
+	else
+		leftIdxCounter <= leftIdxCounter + 1;
+	
+	if (currentState == `cFETCH_COL || currentState == `cSTORE_MO)
+		topWriteCounter <= i1;
+	else if (writeRow == 1 || currentRowState == `cFETCH_ROW)
+		topWriteCounter <= topWriteCounter + 1;
+
+	if (currentState == `cSTART)
+		nextTopIdxCounter <= nextTopIdx;
+ else if (currentState == `cSTORE_MO)
+		if (mode[1] == 0)
+			nextTopIdxCounter <= nextTopIdx + n + 1;
+		else
+			nextTopIdxCounter <= nextTopIdx + n;
+	else if (writeRow == 1 || currentRowState == `cFETCH_ROW)
+		nextTopIdxCounter <= nextTopIdxCounter + 1;
+
+	if (currentState == `cSTART)
+			readRowCounter <= 0; //offsetdivk;
+	else if (currentState == `cSTORE_MO)
+		if (mode[1] == 0)
+			readRowCounter <= leftIdx + 2;
+		else
+			readRowCounter <= topIdx;
+	else if (writeRow == 1 || currentRowState == `cFETCH_ROW)
+	   readRowCounter <= readRowCounter + 2;
+
+	if (updateCounter == 1)
+		counter <= 0;
+	else
+		counter <= counter + 1;
+
+	if (currentState == `cSTORE_DIAG || currentState == `cSTORE_DIAG2)
+		divCounter <= 0;
+	else if (divCounter < 56)
+		divCounter <= divCounter + 1;
+
+	case (i1modk) 
+		3'b000: begin
+			i1modkByteEn <= ~(32'b0) >> (3'b000<<2'b10);
+		end
+		3'b001: begin
+			i1modkByteEn <= ~(32'b0) >> (3'b001<<2'b10);
+		end
+		3'b010: begin
+			i1modkByteEn <= ~(32'b0) >> (3'b010<<2'b10);
+		end
+		3'b011: begin
+			i1modkByteEn <= ~(32'b0) >> (3'b011<<2'b10);
+		end
+		3'b100: begin
+			i1modkByteEn <= ~(32'b0) >> (3'b100<<2'b10);
+		end
+		3'b101: begin
+			i1modkByteEn <= ~(32'b0) >> (3'b101<<2'b10);
+		end
+		3'b110: begin
+			i1modkByteEn <= ~(32'b0) >> (3'b110<<2'b10);
+		end
+		3'b111: begin
+			i1modkByteEn <= ~(32'b0) >> (3'b111<<2'b10);
+		end
+		default: begin
+			i1modkByteEn <= ~(32'b0);
+		end
+	endcase
+end
+
+// compute Byte Enable
+always @ (posedge clk)
+begin
+	if ((nextState == `cMULT_COL && currentState != `cMULT_COL) || (currentState == `cSTORE_MO) || currentRowState == `cLOAD_ROW_INC_J)
+		byteEn <= i1modkByteEn;
+	else
+		byteEn <= 32'b11111111111111111111111111111111;
+end
+
+// update FSM state register
+always @ (posedge clk)
+begin
+	if (start_in == 1'b1)
+		currentState <= `cSETUP;
+	else
+		currentState <= nextState;
+	if (start == 1'b1)
+		currentRowState <= `cDONE_FETCH_ROW;
+	else
+		currentRowState <= nextRowState;
+end
+
+// delay register for control signals
+// control signals are delayed to match latency of operations and/or memory access
+always @ (posedge clk)
+begin
+	curReadAddrDelay0 <= curReadAddrDelay1;
+	curReadAddrDelay1 <= curReadAddrDelay2;
+	curReadAddrDelay2 <= curReadAddrDelay3;
+	curReadAddrDelay3 <= curReadAddrDelay4;
+	curReadAddrDelay4 <= curReadAddrDelay5;
+	curReadAddrDelay5 <= curReadAddrDelay6;
+	curReadAddrDelay6 <= curReadAddrDelay7;
+	curReadAddrDelay7 <= curReadAddrDelay8;
+	curReadAddrDelay8 <= curReadAddrDelay9;
+	curReadAddrDelay9 <= curReadAddrDelay10;
+	curReadAddrDelay10 <= curReadAddrDelay11;
+	curReadAddrDelay11 <= msIdxCounter;
+	
+	curWriteAddrDelay0 <= curWriteAddrDelay1;
+	curWriteAddrDelay1 <= curWriteAddrDelay2;
+	curWriteAddrDelay2 <= curWriteAddrDelay3;
+	curWriteAddrDelay3 <= curWriteAddrDelay4;
+	if (currentState == `cFETCH_COL)
+		curWriteAddrDelay4 <= diagIdxCounter;
+	else
+		curWriteAddrDelay4 <= curWriteAddrDelay5;
+	curWriteAddrDelay5 <= curWriteAddrDelay6;
+	curWriteAddrDelay6 <= curWriteAddrDelay7;
+	curWriteAddrDelay7 <= curWriteAddrDelay8;
+	curWriteAddrDelay8 <= curWriteAddrDelay9;
+	curWriteAddrDelay9 <= curWriteAddrDelay10;
+	curWriteAddrDelay10 <= curWriteAddrDelay11;
+	curWriteAddrDelay11 <= curWriteAddrDelay12;
+	curWriteAddrDelay12 <= curWriteAddrDelay13;
+	curWriteAddrDelay13 <= curWriteAddrDelay14;
+	curWriteAddrDelay14 <= curWriteAddrDelay15;
+	if (currentState == `cMULT_COL)
+		curWriteAddrDelay15 <= leftIdxCounter;
+	else
+		curWriteAddrDelay15 <= curWriteAddrDelay16;
+	curWriteAddrDelay16 <= curWriteAddrDelay17;
+	curWriteAddrDelay17 <= curWriteAddrDelay18;
+	curWriteAddrDelay18 <= curWriteAddrDelay19;
+	curWriteAddrDelay19 <= curWriteAddrDelay20;
+	curWriteAddrDelay20 <= curWriteAddrDelay21;
+	curWriteAddrDelay21 <= curWriteAddrDelay22;
+	curWriteAddrDelay22 <= curWriteAddrDelay23;
+	curWriteAddrDelay23 <= curWriteAddrDelay24;
+	curWriteAddrDelay24 <= curWriteAddrDelay25;
+	curWriteAddrDelay25 <= curWriteAddrDelay26;
+	curWriteAddrDelay26 <= curWriteAddrDelay27;
+	curWriteAddrDelay27 <= curWriteAddrDelay28;
+	curWriteAddrDelay28 <= curWriteAddrDelay29;
+	curWriteAddrDelay29 <= curWriteAddrDelay30;
+	curWriteAddrDelay30 <= curWriteAddrDelay31;
+	curWriteAddrDelay31 <= msIdxCounter;
+	
+	writeByteEnDelay0 <= writeByteEnDelay1;
+	writeByteEnDelay1 <= writeByteEnDelay2;
+	writeByteEnDelay2 <= writeByteEnDelay3;
+	writeByteEnDelay3 <= writeByteEnDelay4;
+	if (mode[0] == 1'b1)
+		writeByteEnDelay4 <= ~0;
+	else if (currentState == `cFETCH_COL)
+		writeByteEnDelay4 <= byteEn;
+	else
+		writeByteEnDelay4 <= writeByteEnDelay5;
+	writeByteEnDelay5 <= writeByteEnDelay6;
+	writeByteEnDelay6 <= writeByteEnDelay7;
+	writeByteEnDelay7 <= writeByteEnDelay8;
+	writeByteEnDelay8 <= writeByteEnDelay9;
+	writeByteEnDelay9 <= writeByteEnDelay10;
+	writeByteEnDelay10 <= writeByteEnDelay11;
+	writeByteEnDelay11 <= writeByteEnDelay12;
+	writeByteEnDelay12 <= writeByteEnDelay13;
+	writeByteEnDelay13 <= writeByteEnDelay14;
+	writeByteEnDelay14 <= writeByteEnDelay15;
+	if (currentState == `cMULT_COL)
+		writeByteEnDelay15 <= byteEn;
+	else
+		writeByteEnDelay15 <= writeByteEnDelay16;
+	writeByteEnDelay16 <= writeByteEnDelay17;
+	writeByteEnDelay17 <= writeByteEnDelay18;
+	writeByteEnDelay18 <= writeByteEnDelay19;
+	writeByteEnDelay19 <= writeByteEnDelay20;
+	writeByteEnDelay20 <= writeByteEnDelay21;
+	writeByteEnDelay21 <= writeByteEnDelay22;
+	writeByteEnDelay22 <= writeByteEnDelay23;
+	writeByteEnDelay23 <= writeByteEnDelay24;
+	writeByteEnDelay24 <= writeByteEnDelay25;
+	writeByteEnDelay25 <= writeByteEnDelay26;
+	writeByteEnDelay26 <= writeByteEnDelay27;
+	writeByteEnDelay27 <= writeByteEnDelay28;
+	writeByteEnDelay28 <= writeByteEnDelay29;
+	writeByteEnDelay29 <= writeByteEnDelay30;
+	writeByteEnDelay30 <= writeByteEnDelay31;
+	writeByteEnDelay31 <= byteEn;
+	
+	curWriteSelDelay[0] <= curWriteSelDelay[1];
+	curWriteSelDelay[1] <= curWriteSelDelay[2];
+	curWriteSelDelay[2] <= curWriteSelDelay[3];
+	curWriteSelDelay[3] <= curWriteSelDelay[4];
+	curWriteSelDelay[4] <= curWriteSelDelay[5];
+	curWriteSelDelay[5] <= curWriteSelDelay[6];
+	curWriteSelDelay[6] <= curWriteSelDelay[7];
+	curWriteSelDelay[7] <= curWriteSelDelay[8];
+	curWriteSelDelay[8] <= curWriteSelDelay[9];
+	curWriteSelDelay[9] <= curWriteSelDelay[10];
+	curWriteSelDelay[10] <= curWriteSelDelay[11];
+	curWriteSelDelay[11] <= curWriteSelDelay[12];
+	curWriteSelDelay[12] <= curWriteSelDelay[13];
+	curWriteSelDelay[13] <= curWriteSelDelay[14];
+	curWriteSelDelay[14] <= curWriteSelDelay[15];
+	if (currentState == `cMULT_COL)
+		curWriteSelDelay[15] <= 1'b0;
+	else
+		curWriteSelDelay[15] <= 1'b1;
+
+	curWriteEnDelay[0] <= curWriteEnDelay[1];
+	curWriteEnDelay[1] <= curWriteEnDelay[2];
+	curWriteEnDelay[2] <= curWriteEnDelay[3];
+	curWriteEnDelay[3] <= curWriteEnDelay[4];
+	curWriteEnDelay[4] <= curWriteEnDelay[5];
+	curWriteEnDelay[5] <= curWriteEnDelay[6];
+	curWriteEnDelay[6] <= curWriteEnDelay[7];
+	curWriteEnDelay[7] <= curWriteEnDelay[8];
+	curWriteEnDelay[8] <= curWriteEnDelay[9];
+	curWriteEnDelay[9] <= curWriteEnDelay[10];
+	curWriteEnDelay[10] <= curWriteEnDelay[11];
+	curWriteEnDelay[11] <= curWriteEnDelay[12];
+	curWriteEnDelay[12] <= curWriteEnDelay[13];
+	curWriteEnDelay[13] <= curWriteEnDelay[14];
+	curWriteEnDelay[14] <= curWriteEnDelay[15];
+	if (currentState == `cMULT_COL)
+		curWriteEnDelay[15] <= 1'b1;
+	else
+		curWriteEnDelay[15] <= curWriteEnDelay[16];
+	curWriteEnDelay[16] <= curWriteEnDelay[17];
+	curWriteEnDelay[17] <= curWriteEnDelay[18];
+	curWriteEnDelay[18] <= curWriteEnDelay[19];
+	curWriteEnDelay[19] <= curWriteEnDelay[20];
+	curWriteEnDelay[20] <= curWriteEnDelay[21];
+	curWriteEnDelay[21] <= curWriteEnDelay[22];
+	curWriteEnDelay[22] <= curWriteEnDelay[23];
+	curWriteEnDelay[23] <= curWriteEnDelay[24];
+	curWriteEnDelay[24] <= curWriteEnDelay[25];
+	curWriteEnDelay[25] <= curWriteEnDelay[26];
+	curWriteEnDelay[26] <= curWriteEnDelay[27];
+	curWriteEnDelay[27] <= curWriteEnDelay[28];
+	curWriteEnDelay[28] <= curWriteEnDelay[29];
+	curWriteEnDelay[29] <= curWriteEnDelay[30];
+	curWriteEnDelay[30] <= curWriteEnDelay[31];
+	if (currentState == `cMULT_SUB)
+		curWriteEnDelay[31] <= 1'b1;
+	else
+		curWriteEnDelay[31] <= 1'b0;
+
+	leftWriteSelDelay[0] <= leftWriteSelDelay[1];
+	leftWriteSelDelay[1] <= leftWriteSelDelay[2];
+	leftWriteSelDelay[2] <= leftWriteSelDelay[3];
+	leftWriteSelDelay[3] <= leftWriteSelDelay[4];
+	if (currentState == `cFETCH_COL)
+		leftWriteSelDelay[4] <= 1'b0;
+	else
+		leftWriteSelDelay[4] <= 1'b1;
+
+	leftWriteEnDelay[0] <= leftWriteEnDelay[1];
+	leftWriteEnDelay[1] <= leftWriteEnDelay[2];
+	leftWriteEnDelay[2] <= leftWriteEnDelay[3];
+	leftWriteEnDelay[3] <= leftWriteEnDelay[4];
+	if (currentState == `cFETCH_COL)
+		leftWriteEnDelay[4] <= 1'b1;
+	else
+		leftWriteEnDelay[4] <= leftWriteEnDelay[5];
+	leftWriteEnDelay[5] <= leftWriteEnDelay[6];
+	leftWriteEnDelay[6] <= leftWriteEnDelay[7];
+	leftWriteEnDelay[7] <= leftWriteEnDelay[8];
+	leftWriteEnDelay[8] <= leftWriteEnDelay[9];
+	leftWriteEnDelay[9] <= leftWriteEnDelay[10];
+	leftWriteEnDelay[10] <= leftWriteEnDelay[11];
+	leftWriteEnDelay[11] <= leftWriteEnDelay[12];
+	leftWriteEnDelay[12] <= leftWriteEnDelay[13];
+	leftWriteEnDelay[13] <= leftWriteEnDelay[14];
+	leftWriteEnDelay[14] <= leftWriteEnDelay[15];
+	if (currentState == `cMULT_COL)
+		leftWriteEnDelay[15] <= 1'b1;
+	else
+		leftWriteEnDelay[15] <= leftWriteEnDelay[16];
+	leftWriteEnDelay[16] <= leftWriteEnDelay[17];
+	leftWriteEnDelay[17] <= leftWriteEnDelay[18];
+	leftWriteEnDelay[18] <= leftWriteEnDelay[19];
+	leftWriteEnDelay[19] <= leftWriteEnDelay[20];
+	leftWriteEnDelay[20] <= leftWriteEnDelay[21];
+	leftWriteEnDelay[21] <= leftWriteEnDelay[22];
+	leftWriteEnDelay[22] <= leftWriteEnDelay[23];
+	leftWriteEnDelay[23] <= leftWriteEnDelay[24];
+	leftWriteEnDelay[24] <= leftWriteEnDelay[25];
+	leftWriteEnDelay[25] <= leftWriteEnDelay[26];
+	leftWriteEnDelay[26] <= leftWriteEnDelay[27];
+	leftWriteEnDelay[27] <= leftWriteEnDelay[28];
+	leftWriteEnDelay[28] <= leftWriteEnDelay[29];
+	leftWriteEnDelay[29] <= leftWriteEnDelay[30];
+	leftWriteEnDelay[30] <= leftWriteEnDelay[31];
+	if (currentState == `cMULT_SUB && (mode == 0 || (mode == 1 && j == i1)))
+		leftWriteEnDelay[31] <= 1'b1;
+	else
+		leftWriteEnDelay[31] <= 1'b0;
+
+	topWriteAddrDelay0 <= topWriteAddrDelay1;
+	topWriteAddrDelay1 <= topWriteAddrDelay2;
+	topWriteAddrDelay2 <= topWriteAddrDelay3;
+	topWriteAddrDelay3 <= topWriteAddrDelay4;
+	if (currentRowState == `cFETCH_ROW)
+		topWriteAddrDelay4 <= nextTopIdxCounter;
+	else
+		topWriteAddrDelay4 <=  topWriteAddrDelay5;
+	topWriteAddrDelay5 <= topWriteAddrDelay6;
+	topWriteAddrDelay6 <= topWriteAddrDelay7;
+	topWriteAddrDelay7 <= topWriteAddrDelay8;
+	topWriteAddrDelay8 <= topWriteAddrDelay9;
+	topWriteAddrDelay9 <= topWriteAddrDelay10;
+	topWriteAddrDelay10 <= topWriteAddrDelay11;
+	topWriteAddrDelay11 <= topWriteAddrDelay12;
+	topWriteAddrDelay12 <= topWriteAddrDelay13;
+	topWriteAddrDelay13 <= topWriteAddrDelay14;
+	topWriteAddrDelay14 <= topWriteAddrDelay15;
+	topWriteAddrDelay15 <= topWriteAddrDelay16;
+	topWriteAddrDelay16 <= topWriteAddrDelay17;
+	topWriteAddrDelay17 <= topWriteAddrDelay18;
+	topWriteAddrDelay18 <= topWriteAddrDelay19;
+	topWriteAddrDelay19 <= topWriteAddrDelay20;
+	topWriteAddrDelay20 <= topWriteAddrDelay21;
+	topWriteAddrDelay21 <= topWriteAddrDelay22;
+	topWriteAddrDelay22 <= topWriteAddrDelay23;
+	topWriteAddrDelay23 <= topWriteAddrDelay24;
+	topWriteAddrDelay24 <= topWriteAddrDelay25;
+	topWriteAddrDelay25 <= topWriteAddrDelay26;
+	topWriteAddrDelay26 <= topWriteAddrDelay27;
+	topWriteAddrDelay27 <= topWriteAddrDelay28;
+	topWriteAddrDelay28 <= topWriteAddrDelay29;
+	topWriteAddrDelay29 <= topWriteAddrDelay30;
+	topWriteAddrDelay30 <= topWriteAddrDelay31;
+		topWriteAddrDelay31 <= nextTopIdxCounter;
+
+	topWriteEnDelay[0] <= topWriteEnDelay[1];
+	topWriteEnDelay[1] <= topWriteEnDelay[2];
+	topWriteEnDelay[2] <= topWriteEnDelay[3];
+	topWriteEnDelay[3] <= topWriteEnDelay[4];
+	if (currentRowState == `cFETCH_ROW)
+		topWriteEnDelay[4] <= 1'b1;
+	else
+		topWriteEnDelay[4] <=  topWriteEnDelay[5];
+	topWriteEnDelay[5] <= topWriteEnDelay[6];
+	topWriteEnDelay[6] <= topWriteEnDelay[7];
+	topWriteEnDelay[7] <= topWriteEnDelay[8];
+	topWriteEnDelay[8] <= topWriteEnDelay[9];
+	topWriteEnDelay[9] <= topWriteEnDelay[10];
+	topWriteEnDelay[10] <= topWriteEnDelay[11];
+	topWriteEnDelay[11] <= topWriteEnDelay[12];
+	topWriteEnDelay[12] <= topWriteEnDelay[13];
+	topWriteEnDelay[13] <= topWriteEnDelay[14];
+	topWriteEnDelay[14] <= topWriteEnDelay[15];
+	topWriteEnDelay[15] <= topWriteEnDelay[16];
+	topWriteEnDelay[16] <= topWriteEnDelay[17];
+	topWriteEnDelay[17] <= topWriteEnDelay[18];
+	topWriteEnDelay[18] <= topWriteEnDelay[19];
+	topWriteEnDelay[19] <= topWriteEnDelay[20];
+	topWriteEnDelay[20] <= topWriteEnDelay[21];
+	topWriteEnDelay[21] <= topWriteEnDelay[22];
+	topWriteEnDelay[22] <= topWriteEnDelay[23];
+	topWriteEnDelay[23] <= topWriteEnDelay[24];
+	topWriteEnDelay[24] <= topWriteEnDelay[25];
+	topWriteEnDelay[25] <= topWriteEnDelay[26];
+	topWriteEnDelay[26] <= topWriteEnDelay[27];
+	topWriteEnDelay[27] <= topWriteEnDelay[28];
+	topWriteEnDelay[28] <= topWriteEnDelay[29];
+	topWriteEnDelay[29] <= topWriteEnDelay[30];
+	topWriteEnDelay[30] <= topWriteEnDelay[31];
+	topWriteEnDelay[31] <= writeRow;
+
+	topWriteSelDelay0 <= topWriteSelDelay1;
+	topWriteSelDelay1 <= topWriteSelDelay2;
+	topWriteSelDelay2 <= topWriteSelDelay3;
+	topWriteSelDelay3 <= topWriteSelDelay4;
+	if (currentRowState == `cFETCH_ROW || currentState == `cUPDATE_J && i1 == 1)
+		topWriteSelDelay4 <= imodk;
+	else
+		topWriteSelDelay4 <=  topWriteSelDelay5;
+	topWriteSelDelay5 <= topWriteSelDelay6;
+	topWriteSelDelay6 <= topWriteSelDelay7;
+	topWriteSelDelay7 <= topWriteSelDelay8;
+	topWriteSelDelay8 <= topWriteSelDelay9;
+	topWriteSelDelay9 <= topWriteSelDelay10;
+	topWriteSelDelay10 <= topWriteSelDelay11;
+	topWriteSelDelay11 <= topWriteSelDelay12;
+	topWriteSelDelay12 <= topWriteSelDelay13;
+	topWriteSelDelay13 <= topWriteSelDelay14;
+	topWriteSelDelay14 <= topWriteSelDelay15;
+	topWriteSelDelay15 <= topWriteSelDelay16;
+	topWriteSelDelay16 <= topWriteSelDelay17;
+	topWriteSelDelay17 <= topWriteSelDelay18;
+	topWriteSelDelay18 <= topWriteSelDelay19;
+	topWriteSelDelay19 <= topWriteSelDelay20;
+	topWriteSelDelay20 <= topWriteSelDelay21;
+	topWriteSelDelay21 <= topWriteSelDelay22;
+	topWriteSelDelay22 <= topWriteSelDelay23;
+	topWriteSelDelay23 <= topWriteSelDelay24;
+	topWriteSelDelay24 <= topWriteSelDelay25;
+	topWriteSelDelay25 <= topWriteSelDelay26;
+	topWriteSelDelay26 <= topWriteSelDelay27;
+	topWriteSelDelay27 <= topWriteSelDelay28;
+	topWriteSelDelay28 <= topWriteSelDelay29;
+	topWriteSelDelay29 <= topWriteSelDelay30;
+	topWriteSelDelay30 <= topWriteSelDelay31;
+	topWriteSelDelay31 <= i1modk;
+
+	topSourceSelDelay[0] <= topSourceSelDelay[1];
+	topSourceSelDelay[1] <= topSourceSelDelay[2];
+	topSourceSelDelay[2] <= topSourceSelDelay[3];
+	topSourceSelDelay[3] <= topSourceSelDelay[4];
+	if (start == 1'b1)
+		topSourceSelDelay[4] <= 1'b0;
+	else if (currentState == `cSTORE_MO)
+		topSourceSelDelay[4] <= 1'b1;
+
+	leftReadAddrDelay0 <= leftIdxCounter;
+
+
+	diagEnDelay[0] <= diagEnDelay[1];
+	diagEnDelay[1] <= diagEnDelay[2];
+	diagEnDelay[2] <= diagEnDelay[3];
+	diagEnDelay[3] <= diagEnDelay[4];
+	diagEnDelay[4] <= diagEnDelay[5];
+	diagEnDelay[5] <= (currentState == `cSTORE_DIAG || currentState == `cSTORE_DIAG2);
+
+	MOEnDelay[0] <= MOEnDelay[1];
+	MOEnDelay[1] <= MOEnDelay[2];
+	MOEnDelay[2] <= MOEnDelay[3];
+	MOEnDelay[3] <= MOEnDelay[4];
+	MOEnDelay[4] <= MOEnDelay[5];
+	if (currentState == `cSTORE_MO || currentRowState == `cLOAD_ROW_INC_J)
+		MOEnDelay[5] <= 1'b1;
+	else
+		MOEnDelay[5] <= 1'b0;
+end
+
+// output contorl signals
+always @ (posedge clk)
+begin
+	if (currentState == `cFETCH_COL)
+		curReadAddr <= diagIdxCounter;
+	else if (currentRowState == `cFETCH_ROW)
+	   curReadAddr <= readRowCounter;
+	else
+		curReadAddr <= curReadAddrDelay0;
+	curWriteAddr <= curWriteAddrDelay0;
+	curWriteByteEn <= writeByteEnDelay0;
+	curWriteSel <= curWriteSelDelay;
+	curWriteEn <= curWriteEnDelay;
+
+	if (currentState == `cMULT_COL)
+		leftReadAddr <= leftIdxCounter;
+	else
+		leftReadAddr <= leftReadAddrDelay0;
+	leftWriteAddr <= curWriteAddrDelay0;
+	leftWriteByteEn <= writeByteEnDelay0;
+	leftWriteSel <= leftWriteSelDelay;
+	leftWriteEn <= leftWriteEnDelay;
+
+	if (currentState == `cSTORE_DIAG)
+		topReadAddr <= nextTopIdx;
+else if (currentState == `cSTORE_DIAG2)
+   topReadAddr <= nextTopIdx2;
+	else
+	topReadAddr <= curTopIdx;
+	topWriteAddr <= topWriteAddrDelay0;
+	topWriteEn <= topWriteEnDelay;
+	topWriteSel <= topWriteSelDelay0;
+	topSourceSel <= topSourceSelDelay;
+
+	MOSel <= ~(currentState == `cFIND_REC);
+if (currentState == `cFIND_REC)
+		MOEn <= 1'b1;
+	else
+		MOEn <= MOEnDelay;
+
+	diagEn <= diagEnDelay;
+
+	if (currentState == `cDONE)
+		done <= 1'b1;
+	else
+		done <= 1'b0;
+end
+
+endmodule
+
+module ram (
+	byteena_a,
+	clk,
+	data,
+	rdaddress,
+	wraddress,
+	wren,
+	q
+	);
+
+	input	[`RAMNUMBYTES-1:0]  byteena_a;
+	input	  clk;
+	input	[`RAMWIDTH-1:0]  data;
+	input	[`rRAMSIZEWIDTH-1:0]  rdaddress;
+	input	[`rRAMSIZEWIDTH-1:0]  wraddress;
+	input	  wren;
+	output	[`RAMWIDTH-1:0]  q;
+	wire	[`RAMWIDTH-1:0]  value_out;
+	wire [`RAMWIDTH-1:0] subwire;
+	assign q = subwire | dummy;
+	wire [`RAMWIDTH-1:0] uselessdata;
+ assign uselessdata = 256'b0;
+wire j;
+assign j = |byteena_a;
+ wire [`RAMWIDTH-1:0]dummy;
+ assign dummy = value_out & 256'b0;
+dual_port_ram #(.ADDR_WIDTH(`rRAMSIZEWIDTH), .DATA_WIDTH(`RAMWIDTH)) inst1( 
+.clk (clk),
+.we1(wren),
+.we2(1'b0),
+.data1(data),
+.data2(uselessdata),
+.out1(value_out),
+.out2(subwire),
+.addr1(wraddress),
+.addr2(rdaddress));
+
+
+endmodule
+
+module ram1 (
+	byteena_a,
+	clk,
+	data,
+	rdaddress,
+	wraddress,
+	wren,
+	q
+	);
+
+	input	[`RAMNUMBYTES-1:0]  byteena_a;
+	input	  clk;
+	input	[`RAMWIDTH-1:0]  data;
+	input	[`rRAMSIZEWIDTH-1:0]  rdaddress;
+	input	[`rRAMSIZEWIDTH-1:0]  wraddress;
+	input	  wren;
+	output	[`RAMWIDTH-1:0]  q;
+	wire	[`RAMWIDTH-1:0]  value_out;
+	wire [`RAMWIDTH-1:0] subwire;
+	assign q = subwire | dummy;
+	wire [`RAMWIDTH-1:0] uselessdata;
+ assign uselessdata = 256'b0;
+wire j;
+assign j = |byteena_a;
+ wire [`RAMWIDTH-1:0]dummy;
+ assign dummy = value_out & 256'b0;
+dual_port_ram #(.ADDR_WIDTH(`rRAMSIZEWIDTH), .DATA_WIDTH(`RAMWIDTH)) inst1( 
+.clk (clk),
+.we1(wren),
+.we2(1'b0),
+.data1(data),
+.data2(uselessdata),
+.out1(value_out),
+.out2(subwire),
+.addr1(wraddress),
+.addr2(rdaddress));
+
+
+endmodule
+
+module ram2 (
+	byteena_a,
+	clk,
+	data,
+	rdaddress,
+	wraddress,
+	wren,
+	q
+	);
+
+	input	[`RAMNUMBYTES-1:0]  byteena_a;
+	input	  clk;
+	input	[`RAMWIDTH-1:0]  data;
+	input	[`rRAMSIZEWIDTH-1:0]  rdaddress;
+	input	[`rRAMSIZEWIDTH-1:0]  wraddress;
+	input	  wren;
+	output	[`RAMWIDTH-1:0]  q;
+	wire	[`RAMWIDTH-1:0]  value_out;
+	wire [`RAMWIDTH-1:0] subwire;
+	assign q = subwire | dummy;
+	wire [`RAMWIDTH-1:0] uselessdata;
+ assign uselessdata = 256'b0;
+wire j;
+assign j = |byteena_a;
+ wire [`RAMWIDTH-1:0]dummy;
+ assign dummy = value_out & 256'b0;
+dual_port_ram #(.ADDR_WIDTH(`rRAMSIZEWIDTH), .DATA_WIDTH(`RAMWIDTH)) inst1( 
+.clk (clk),
+.we1(wren),
+.we2(1'b0),
+.data1(data),
+.data2(uselessdata),
+.out1(value_out),
+.out2(subwire),
+.addr1(wraddress),
+.addr2(rdaddress));
+
+
+endmodule
+
+module ram3 (
+	byteena_a,
+	clk,
+	data,
+	rdaddress,
+	wraddress,
+	wren,
+	q
+	);
+
+	input	[`RAMNUMBYTES-1:0]  byteena_a;
+	input	  clk;
+	input	[`RAMWIDTH-1:0]  data;
+	input	[`rRAMSIZEWIDTH-1:0]  rdaddress;
+	input	[`rRAMSIZEWIDTH-1:0]  wraddress;
+	input	  wren;
+	output	[`RAMWIDTH-1:0]  q;
+	wire	[`RAMWIDTH-1:0]  value_out;
+	wire [`RAMWIDTH-1:0] subwire;
+	assign q = subwire | dummy;
+	wire [`RAMWIDTH-1:0] uselessdata;
+ assign uselessdata = 256'b0;
+wire j;
+assign j = |byteena_a;
+ wire [`RAMWIDTH-1:0]dummy;
+ assign dummy = value_out & 256'b0;
+dual_port_ram #(.ADDR_WIDTH(`rRAMSIZEWIDTH), .DATA_WIDTH(`RAMWIDTH)) inst1( 
+.clk (clk),
+.we1(wren),
+.we2(1'b0),
+.data1(data),
+.data2(uselessdata),
+.out1(value_out),
+.out2(subwire),
+.addr1(wraddress),
+.addr2(rdaddress));
+
+
+endmodule
+
+
+module top_ram (
+	clk,
+	data,
+	rdaddress,
+	wraddress,
+	wren,
+	q
+	);
+
+	//parameter TOPSIZE = 256, TOPSIZEWIDTH = 8, TOPWIDTH = 32;
+	
+	input	  clk;
+	input	[32-1:0]  data;
+	input	[8-1:0]  rdaddress;
+	input	[8-1:0]  wraddress;
+	input	  wren;
+	output	[32-1:0]  q;
+
+	wire [32-1:0] sub_wire0;
+	wire [32-1:0] q;
+	wire [32-1:0] junk_output;
+	assign q = sub_wire0 | dummy;
+	wire[32-1:0] dummy;
+	assign dummy = junk_output & 32'b0;
+ dual_port_ram #(.ADDR_WIDTH(9), .DATA_WIDTH(32)) inst2(
+ .clk (clk),
+ .we1(wren),
+ .we2(1'b0),
+ .data1(data),
+ .data2(data),
+ .out1(junk_output),
+ .out2(sub_wire0),
+ .addr1(wraddress),
+ .addr2(rdaddress));
+
+endmodule
+
+module mult_add (clk, A, B, C, mult_result, add_result);
+//parameter PRECISION = 32;
+input clk;
+input [32-1:0] A, B, C;
+output [32-1:0] mult_result, add_result;
+reg [32-1:0] mult_result;
+reg [32-1:0] add_result;
+wire [32-1:0] mult_comp_result;
+reg [32-1:0] add_a, add_b;
+wire [32-1:0] addition_result;
+wire [31:0] dummy_wire;
+assign dummy_wire = mult_comp_result>>2'b10;
+//divsp MUL(.clk(clk), .rmode(2'b00), .fpu_op(3'b010), .opa(A), .opb(B), .ans(mult_comp_result) );
+wire [4:0]dummy_wire_2;
+fpmul MUL(.clk(clk), .a(A), .b(B), .y_out(mult_comp_result), .control(2'b00), .flags(dummy_wire_2));
+fpu_add ADD(.clock(clk), .a1(C), .b1(dummy_wire), .sum(addition_result));
+always @ (posedge clk)
+begin
+	add_result  <= addition_result;
+	mult_result <= mult_comp_result[31:0];
+end
+endmodule
+
+
+//`define rFIFOINPUTWIDTH 64
+`define rFIFOSIZE 64
+`define rFIFOSIZEWIDTH 6
+`define rFIFOOUTPUTWIDTH 256
+`define rFIFORSIZEWIDTH 4
+	`define wFIFOINPUTWIDTH 10'b0100000000
+	`define wFIFOSIZE 6'b010000
+	`define wFIFOSIZEWIDTH 4'b0100
+	`define wFIFOOUTPUTWIDTH 8'b01000000
+	`define wFIFORSIZEWIDTH 4'b0110
+ //for addr_fifo
+`define aFIFOSIZE 6'b010000
+`define aFIFOSIZEWIDTH 4'b0100
+`define aFIFOWIDTH 4'b0101
+//for memfifo
+`define mFIFOSIZE 16
+`define mFIFOSIZEWIDTH 4
+//`define mFIFOWIDTH 28
+
+`define BURSTLEN 3'b010
+`define BURSTWIDTH 3'b010
+`define DATAWIDTH 10'b0100000000
+`define DATANUMBYTES 7'b0100000
+`define MEMCONWIDTH 8'b01000000
+`define MEMCONNUMBYTES 5'b01000
+`define DDRSIZEWIDTH 6'b011000
+`define FIFOSIZE 6'b010000
+`define FIFOSIZEWIDTH 4'b0100
+`define RAMWIDTH 10'b0100000000
+`define RAMNUMBYTES 7'b0100000
+`define RAMSIZEWIDTH 4'b0101
+`define RATIO 4'b0100
+`define RAMLAT 4'b0101
+ 
+`define dIDLE 0
+`define dWRITE 1
+`define dREAD 2
+
+module DataTransferUnit (clk, dtu_write_req, dtu_read_req, dtu_mem_addr, dtu_ram_addr, dtu_size, dtu_ack, dtu_done,
+		ram_read_addr, ram_read_data, ram_write_byte_en, ram_write_data, ram_write_addr, ram_write_en,
+		mem_rdata, mem_rdata_valid, mem_ready, mem_wdata_req, reset_n,
+		burst_begin, mem_local_addr, mem_be, mem_read_req, mem_size, mem_wdata, mem_write_req
+		);
+
+output burst_begin;
+output [`DDRSIZEWIDTH-1:0] mem_local_addr;
+output [`MEMCONNUMBYTES-1: 0] mem_be;
+output mem_read_req;
+output [`BURSTWIDTH-1:0] mem_size;
+output [`MEMCONWIDTH-1:0] mem_wdata;
+output mem_write_req;
+input clk;
+input [`MEMCONWIDTH-1:0] mem_rdata;
+input mem_rdata_valid;
+input mem_ready;
+input mem_wdata_req;
+input reset_n;
+
+input dtu_write_req;
+input dtu_read_req;
+input [`DDRSIZEWIDTH-1:0] dtu_mem_addr;
+input [`RAMSIZEWIDTH-1:0] dtu_ram_addr;
+input [4:0] dtu_size;
+output dtu_ack;
+output dtu_done;
+
+output[`RAMWIDTH-1:0] ram_write_data;
+input[`RAMWIDTH-1:0] ram_read_data;
+output[`RAMSIZEWIDTH-1:0] ram_write_addr, ram_read_addr;
+output[`RAMNUMBYTES-1:0] ram_write_byte_en;
+output ram_write_en;
+
+reg[`DDRSIZEWIDTH-1:0] mem_addr0;
+reg[`DDRSIZEWIDTH-1:0] mem_addr1;
+reg[`DDRSIZEWIDTH-1:0] mem_addr2;
+reg[`DDRSIZEWIDTH-1:0] mem_addr3;
+reg[`DDRSIZEWIDTH-1:0] mem_addr4;
+reg[`DDRSIZEWIDTH-1:0] mem_addr5;
+
+reg [1:0] state;
+wire [`DATAWIDTH-1:0] rdata, ram_write_dataw, ram_read_dataw;
+
+wire [`RAMSIZEWIDTH-1:0] rfifo_addr;
+reg [`RAMLAT-1:0]fifo_write_reg;
+reg [`RAMLAT-1:0]write_req_reg;
+reg [`RAMLAT-1:0]read_req_reg;
+reg [0:0]fifo_read_reg;
+reg rdata_valid;
+reg [1:0]test_complete_reg;
+reg [`BURSTWIDTH-1:0] size_count0;
+reg [`BURSTWIDTH-1:0] size_count1;
+reg [`BURSTWIDTH-1:0] size_count2;
+reg [`BURSTWIDTH-1:0] size_count3;
+reg [`BURSTWIDTH-1:0] size_count4;
+
+reg [`RAMSIZEWIDTH-1:0] size;
+reg [`RAMSIZEWIDTH-1:0]ram_addr0;
+reg [`RAMSIZEWIDTH-1:0]ram_addr1;
+reg [`RAMSIZEWIDTH-1:0]ram_addr2;
+reg [`RAMSIZEWIDTH-1:0]ram_addr3;
+reg [`RAMSIZEWIDTH-1:0]ram_addr4;
+
+reg [2:0] data_count;
+reg ram_write_en_reg;
+
+wire read_req;
+wire write_req;
+wire [`FIFOSIZEWIDTH-1:0] wfifo_count;
+wire rfull, wempty, rempty, rdcmd_empty, wrcmd_full, wrcmd_empty, rdata_empty;
+wire [`DATAWIDTH-1:0] mem_data;
+wire not_stall;
+wire fifo_write, fifo_read;
+wire rdata_req;
+wire [`BURSTWIDTH+`DDRSIZEWIDTH+1:0] wrmem_cmd, rdmem_cmd;
+wire mem_cmd_ready, mem_cmd_issue;
+
+// FIFOs to interact with off-chip memory
+memcmd_fifo cmd_store(
+	//.aclr(~reset_n),
+	//.rdclk(phy_clk),
+	.clk(clk),
+	.data(wrmem_cmd),
+	.rdreq(mem_cmd_ready),
+	//.rdempty(rdcmd_empty),
+	.wrreq(mem_cmd_issue),
+	.full(wrcmd_full),
+	.empty(wrcmd_empty),
+	.q(rdmem_cmd)
+	);
+
+wfifo wdata_store(
+	//.rdclk(phy_clk),
+	.clk(clk),
+	.data(mem_data),
+	.rdreq(mem_wdata_req),
+	.wrreq(fifo_write),
+	.empty(wempty),
+	.q(mem_wdata),
+	.usedw(wfifo_count)
+	);
+
+addr_fifo raddress_store (
+	.clk(clk),
+	.data(ram_addr3),
+	.wrreq(fifo_read),
+	.rdreq(rdata_req),
+	.empty(rempty),
+	.full(rfull),
+	.q(rfifo_addr)
+	);
+
+rfifo rdata_store(
+	.clk(clk),
+	.data(mem_rdata),
+	.rdreq(rdata_req),
+	//.wrclk(phy_clk),
+	.wrreq(mem_rdata_valid),
+	.empty(rdata_empty),
+	.q(rdata)
+	);
+
+assign mem_cmd_ready = (mem_ready == 1'b1);// && (rdcmd_empty == 0);
+assign mem_cmd_issue = (wrcmd_full == 1'b0) && (write_req == 1 || read_req == 1'b1 || wrcmd_empty == 1'b1);
+assign wrmem_cmd[27:26] = size_count0;
+assign wrmem_cmd[`DDRSIZEWIDTH+1:2] = mem_addr0;
+assign wrmem_cmd[1] = read_req;
+assign wrmem_cmd[0] = write_req;
+assign mem_write_req = rdmem_cmd[0];// && rdcmd_empty == 0;
+assign mem_read_req = rdmem_cmd[1];// && rdcmd_empty == 0;
+assign mem_local_addr = rdmem_cmd[`DDRSIZEWIDTH+1:2];
+assign burst_begin = 0;
+assign mem_size = rdmem_cmd[`BURSTWIDTH+`DDRSIZEWIDTH+1:`DDRSIZEWIDTH+2];
+assign mem_be = ~0;
+assign fifo_write = fifo_write_reg[0];
+assign write_req = (not_stall) ? write_req_reg[0] : 0;
+assign read_req = (not_stall) ? read_req_reg[0] : 0;
+assign fifo_read = (not_stall) ? fifo_read_reg[0] : 0;
+assign not_stall = (wfifo_count < `FIFOSIZE-5) && (rfull == 0) && (wrcmd_full == 0);
+assign dtu_ack = (state == `dIDLE);
+assign dtu_done = (state == `dIDLE) && wempty && rempty;
+
+assign ram_write_dataw[63:0] = rdata[255:192];
+assign mem_data[63:0] = ram_read_dataw[255:192];
+assign ram_write_dataw[127:64] = rdata[191:128];
+assign mem_data[127:64] = ram_read_dataw[191:128];
+assign ram_write_dataw[191:128] = rdata[127:64];
+assign mem_data[191:128] = ram_read_dataw[127:64];
+assign ram_write_dataw[255:192] = rdata[63:0];
+assign mem_data[255:192] = ram_read_dataw[63:0];
+assign ram_write_data = ram_write_dataw[255:0];
+assign ram_read_dataw[255:0] = ram_read_data;
+assign ram_write_addr = rfifo_addr;
+assign ram_read_addr = ram_addr4;
+assign ram_write_byte_en = ~0;
+assign ram_write_en = ram_write_en_reg;
+assign rdata_req = !rdata_empty;
+
+// FSM to produce off-chip memory commands
+always @ (posedge clk)
+begin
+	if (reset_n == 1'b0)
+	begin
+		state <= `dIDLE;
+	end
+	else
+	begin
+		case (state)
+		`dIDLE:
+		begin
+			if (dtu_write_req)
+				state <= `dWRITE;
+			else if (dtu_read_req)
+				state <= `dREAD;
+			else
+				state <= `dIDLE;
+		end
+		`dWRITE:
+		begin
+			if (not_stall && size == 0 && data_count < `BURSTLEN)
+				state <= `dIDLE;
+			else
+				state <= `dWRITE;
+		end
+		`dREAD:
+		begin
+			if (not_stall && size == 0 && data_count < `BURSTLEN)
+				state <= `dIDLE;
+			else
+				state <= `dREAD;
+		end
+		default:
+		begin
+			state <= `dIDLE;
+		end
+		endcase
+	end
+end
+
+always @ (posedge clk)
+begin
+
+	if (reset_n == 0)
+	begin
+		size <= 0;
+		data_count <= 0;
+		size_count4 <= 1;
+		mem_addr5 <= 0;
+		ram_addr4 <= 0;
+		fifo_write_reg[`RAMLAT-1] <= 0;
+		write_req_reg[`RAMLAT-1] <= 0;
+		fifo_read_reg[0] <= 0;
+		read_req_reg[`RAMLAT-1] <= 0;
+	end
+	else if (state == `dIDLE)
+	begin
+		size <= dtu_size;
+		size_count4 <= `BURSTLEN;
+		mem_addr5 <= dtu_mem_addr;
+		ram_addr4 <= dtu_ram_addr;
+		fifo_write_reg[`RAMLAT-1] <= 1'b0;
+		write_req_reg[`RAMLAT-1] <= 1'b0;
+		fifo_read_reg[0] <= 1'b0;
+		read_req_reg[`RAMLAT-1] <= 1'b0;
+		data_count <= 0;
+	end
+	else if (data_count >= `BURSTLEN && not_stall)
+	begin
+		data_count <= data_count - `BURSTLEN;
+		mem_addr5 <= mem_addr5 + `BURSTLEN;
+		fifo_write_reg[`RAMLAT-1] <= 1'b0;
+		write_req_reg[`RAMLAT-1] <= state == `dWRITE;
+		fifo_read_reg[0] <= 0;
+		read_req_reg[`RAMLAT-1] <= state == `dREAD;
+	end
+	else if (size == 0 && data_count == 0 && not_stall==1'b1)
+	begin
+		fifo_write_reg[`RAMLAT-1] <= 0;
+		write_req_reg[`RAMLAT-1] <= 0;
+		fifo_read_reg[0] <= 0;
+		read_req_reg[`RAMLAT-1] <= 0;
+	end
+	else if (size == 0 && not_stall==1'b1)
+	begin
+		size_count4 <= data_count[`BURSTWIDTH-1:0];
+		fifo_write_reg[`RAMLAT-1] <= 0;
+		write_req_reg[`RAMLAT-1] <= state == `dWRITE;
+		fifo_read_reg[0] <= 0;
+		read_req_reg[`RAMLAT-1] <= state == `dREAD;
+	end
+	else if (not_stall==1'b1)
+	begin
+		size <= size - 1;
+		data_count <= data_count + `RATIO - `BURSTLEN;
+		mem_addr5 <= mem_addr5 + `BURSTLEN;
+		ram_addr4 <= ram_addr4+1;
+		fifo_write_reg[`RAMLAT-1] <= state == `dWRITE;
+		write_req_reg[`RAMLAT-1] <= state == `dWRITE;
+		fifo_read_reg[0] <= state == `dREAD;
+		read_req_reg[`RAMLAT-1] <= state == `dREAD;
+	end
+	else
+	begin
+		fifo_write_reg[`RAMLAT-1] <= 0;
+	end
+end
+
+
+always @ (posedge clk)
+begin
+	if (reset_n == 0)
+	begin
+		fifo_write_reg[0] <= 1'b0;
+		fifo_write_reg[1] <= 1'b0;
+		fifo_write_reg[2] <= 1'b0;
+		fifo_write_reg[3] <= 1'b0;
+	end
+	else
+	begin
+		fifo_write_reg[0] <= fifo_write_reg[1];
+		fifo_write_reg[1] <= fifo_write_reg[2];
+		fifo_write_reg[2] <= fifo_write_reg[3];
+		fifo_write_reg[3] <= fifo_write_reg[4];
+	end
+
+	if (reset_n == 1'b0)
+	begin
+		mem_addr0 <= 0;
+		ram_addr0 <= 0;
+		size_count0 <= 1;
+		write_req_reg[0] <= 0;
+		read_req_reg[0] <= 0;
+		mem_addr1 <= 0;
+		ram_addr1 <= 0;
+		size_count1 <= 1;
+		write_req_reg[1] <= 0;
+		read_req_reg[1] <= 0;
+		mem_addr2 <= 0;
+		ram_addr2 <= 0;
+		size_count2 <= 1;
+		write_req_reg[2] <= 0;
+		read_req_reg[2] <= 0;
+		mem_addr3 <= 0;
+		ram_addr3 <= 0;
+		size_count3 <= 1;
+		write_req_reg[3] <= 0;
+		read_req_reg[3] <= 0;
+		mem_addr4 <= 0;
+	end
+	else if (not_stall)
+	begin
+		size_count0 <= size_count1;
+		mem_addr0 <= mem_addr1;
+		ram_addr0 <= ram_addr1;
+		write_req_reg[0] <= write_req_reg[1];
+		read_req_reg[0] <= read_req_reg[1];
+		size_count1 <= size_count2;
+		mem_addr1 <= mem_addr2;
+		ram_addr1 <= ram_addr2;
+		write_req_reg[1] <= write_req_reg[2];
+		read_req_reg[1] <= read_req_reg[2];
+		size_count2 <= size_count3;
+		mem_addr2 <= mem_addr3;
+		ram_addr2 <= ram_addr3;
+		write_req_reg[2] <= write_req_reg[3];
+		read_req_reg[2] <= read_req_reg[3];
+		size_count3 <= size_count4;
+		mem_addr3 <= mem_addr4;
+		ram_addr3 <= ram_addr4;
+		write_req_reg[3] <= write_req_reg[4];
+		read_req_reg[3] <= read_req_reg[4];
+		mem_addr4 <= mem_addr5;
+	end
+	
+	ram_write_en_reg  <= rdata_req;
+end
+
+endmodule
+
+module rfifo (
+	clk,
+	data,
+	rdreq,
+	wrreq,
+	empty,
+	q
+	);
+
+
+	input	  clk;
+	input	  wrreq;
+	input	  rdreq;
+	input	[`rFIFOINPUTWIDTH-1:0]  data;
+	output	  empty;
+	output	[`rFIFOOUTPUTWIDTH-1:0]  q;
+
+	reg [`rFIFORSIZEWIDTH-1:0] wr_pointer;
+	reg [`rFIFORSIZEWIDTH-1:0] rd_pointer;
+	reg [`rFIFORSIZEWIDTH:0] status_cnt;
+	reg [`rFIFOOUTPUTWIDTH-1:0] q ;
+	reg[1:0] counter;
+	wire [`rFIFOINPUTWIDTH-1:0] data_ram;
+assign empty = (status_cnt == 7'b0000000);
+wire [`rFIFOINPUTWIDTH-1:0]junk_input;
+wire [`rFIFOINPUTWIDTH-1:0]junk_output;
+assign junk_input = 64'b0000000000000000000000000000000000000000000000000000000000000000;
+ always @ (posedge clk)
+ begin  //WRITE_POINTER
+	if (wrreq) 
+	begin
+ 		wr_pointer <= wr_pointer + 1'b1;
+	end
+end
+always @ (posedge clk)
+begin  //READ_POINTER
+	if (rdreq) 
+	begin
+	rd_pointer <= rd_pointer + 2'b01;
+	end
+end
+always  @ (posedge clk )
+begin  //READ_DATA
+if (rdreq) 
+	counter <= 0;
+else 
+	counter <= counter + 2'b01;
+if(counter == 0)
+	q[`rFIFOINPUTWIDTH-1:0] <= data_ram;
+else if (counter == 1)
+	q[127:64] <= data_ram;
+else if (counter == 2)
+	q[191:128] <= data_ram;
+else if (counter == 3)
+	q[255:192] <= data_ram;
+end
+always @ (posedge clk )
+begin // : STATUS_COUNTER
+	if ((rdreq) && (!wrreq) && (status_cnt != 0))
+		status_cnt <= status_cnt - 1'b1;
+// Write but no read.
+	else if ((wrreq) && (!rdreq) && (status_cnt != 64 ))
+		status_cnt <= status_cnt + 1'b1;
+end 
+  dual_port_ram #(.ADDR_WIDTH(`rFIFORSIZEWIDTH), .DATA_WIDTH(`rFIFOINPUTWIDTH)) ram_addr(
+.we1      (wrreq)      , // write enable
+ .we2      (rdreq)       , // Read enable
+.addr1 (wr_pointer) , // address_0 input 
+.addr2 (rd_pointer) , // address_q input  
+.data1    (data)    , // data_0 bi-directional
+.data2    (junk_input),   // data_1 bi-directional
+.clk(clk),
+.out1	(data_ram),
+.out2	(junk_output)
+ ); 
+
+
+endmodule
+
+
+// synopsys translate_off
+//`timescale 1 ps / 1 ps
+// synopsys translate_on
+module wfifo (
+	clk,
+	data,
+	rdreq,
+	wrreq,
+	empty,
+	q,
+	usedw
+	);
+
+	input	clk;
+	input	  wrreq;
+	input	  rdreq;
+	input	[`wFIFOINPUTWIDTH-1:0]  data;
+	output	  empty;
+	output	[`wFIFOOUTPUTWIDTH-1:0]  q;
+	output	[`wFIFOSIZEWIDTH-1:0]  usedw;
+//-----------Internal variables-------------------
+reg [`wFIFOSIZEWIDTH-1:0] wr_pointer;
+reg [`wFIFOSIZEWIDTH-1:0] rd_pointer;
+reg [`wFIFOSIZEWIDTH:0] status_cnt;
+reg [`wFIFOOUTPUTWIDTH-1:0] q ;
+reg[1:0] counter;
+wire [`wFIFOINPUTWIDTH-1:0] data_ram ;
+assign empty = (status_cnt == 5'b00000);
+wire [`wFIFOINPUTWIDTH-1:0]junk_input;
+wire [`wFIFOINPUTWIDTH-1:0]junk_output;
+assign junk_input = 256'b0;
+ always @ (posedge clk)
+ begin  //WRITE_POINTER
+	if (wrreq) 
+	begin
+ 		wr_pointer <= wr_pointer + 1'b1;
+	end
+end
+always @ (posedge clk)
+begin  //READ_POINTER
+	if (rdreq) 
+	begin
+	rd_pointer <= rd_pointer + 2'b01;
+	end
+end
+always  @ (posedge clk )
+begin  //READ_DATA
+if (rdreq) 
+	counter <= 0;
+else 
+	counter <= counter + 2'b01;
+if(counter == 0)
+	q <= data_ram[63:0];
+else if(counter == 1)
+	q <= data_ram[127:64];
+else if(counter == 2)
+	q <= data_ram[191:128];
+else if(counter == 3)
+	q <= data_ram[255:192];
+end
+always @ (posedge clk )
+begin // : STATUS_COUNTER
+	if ((rdreq) && (!wrreq) && (status_cnt != 5'b00000))
+		status_cnt <= status_cnt - 1'b1;
+	// Write but no read.
+	else if ((wrreq) && (!rdreq) && (status_cnt != 5'b10000 )) 
+		status_cnt <= status_cnt + 1'b1;
+end 
+assign usedw = status_cnt[`wFIFOSIZEWIDTH-1:0];
+  dual_port_ram #(.ADDR_WIDTH(`wFIFORSIZEWIDTH), .DATA_WIDTH(`wFIFOINPUTWIDTH)) ram_addr(
+.we1      (wrreq)      , // write enable
+ .we2      (rdreq)       , // Read enable
+.addr1 (wr_pointer) , // address_0 input 
+.addr2 (rd_pointer) , // address_q input  
+.data1    (data)    , // data_0 bi-directional
+.data2    (junk_input),   // data_1 bi-directional
+.clk(clk),
+.out1	(data_ram),
+.out2	(junk_output)
+ ); 
+
+
+endmodule
+
+// synopsys translate_off
+//`timescale 1 ps / 1 ps
+// synopsys translate_on
+module addr_fifo (
+	clk,
+	data,
+	wrreq,
+	rdreq,
+	empty,
+	full,
+	q
+	);
+
+	input	  clk;
+	input	[`aFIFOWIDTH-1:0]  data;
+	input	  rdreq;
+	input	  wrreq;
+	output	  empty;
+	output	  full;
+	output	[`aFIFOWIDTH-1:0]  q;
+
+reg [`aFIFOSIZEWIDTH-1:0] wr_pointer;
+reg [`aFIFOSIZEWIDTH-1:0] rd_pointer;
+reg [`aFIFOSIZEWIDTH:0] status_cnt;
+reg [`aFIFOWIDTH-1:0] q ;
+wire [`aFIFOWIDTH-1:0] data_ram ;
+assign full = (status_cnt == 5'b01111);
+assign empty = (status_cnt == 5'b00000);
+wire [`aFIFOWIDTH-1:0]junk_input;
+wire [`aFIFOWIDTH-1:0]junk_output;
+assign junk_input = 5'b00000;
+always @ (posedge clk)
+begin  //WRITE_POINTER
+if (wrreq) 
+begin
+wr_pointer <= wr_pointer + 1'b1;
+end
+end
+always @ (posedge clk)
+begin  //READ_POINTER
+if (rdreq) 
+begin
+rd_pointer <= rd_pointer + 1'b1;
+end
+end
+always  @ (posedge clk )
+begin  //READ_DATA
+if (rdreq) begin
+q <= data_ram; 
+end
+end
+always @ (posedge clk )
+begin // : STATUS_COUNTER
+	if ((rdreq) && (!wrreq) && (status_cnt != 5'b00000))
+		status_cnt <= status_cnt - 1'b1;
+	// Write but no read.
+	else if ((wrreq) && (!rdreq) && (status_cnt != 5'b10000))
+		status_cnt <= status_cnt + 1;
+end
+  dual_port_ram#(.ADDR_WIDTH(`aFIFOSIZEWIDTH), .DATA_WIDTH(`aFIFOWIDTH)) ram_addr(
+.we1      (wrreq)      , // write enable
+ .we2      (rdreq)       , // Read enable
+.addr1 (wr_pointer) , // address_0 input 
+.addr2 (rd_pointer) , // address_q input  
+.data1    (data)    , // data_0 bi-directional
+.data2    (junk_input),   // data_1 bi-directional
+.clk(clk),
+.out1	(data_ram),
+.out2	(junk_output)
+ ); 
+
+
+endmodule
+
+module memcmd_fifo (
+	clk,
+	data,
+	rdreq,
+	wrreq,
+	full,
+	empty,
+	q
+	);
+	
+	input	  clk;
+	input	[`mFIFOWIDTH-1:0]  data;
+	input	  wrreq;
+	input	  rdreq;
+	output	  full;
+	output	  empty;
+	output	[`mFIFOWIDTH-1:0]  q;
+
+	reg [`mFIFOSIZEWIDTH-1:0] wr_pointer;
+	reg [`mFIFOSIZEWIDTH-1:0] rd_pointer;
+	reg [`mFIFOSIZEWIDTH:0] status_cnt;
+	reg [`mFIFOWIDTH-1:0] q ;
+	wire [`mFIFOWIDTH-1:0] data_ram;
+	assign full = (status_cnt ==5'b01111);
+	assign empty = (status_cnt == 5'b00000);
+	wire [`mFIFOWIDTH-1:0]junk_input;
+	wire [`mFIFOWIDTH-1:0]junk_output;
+	assign junk_input = 28'b0000000000000000000000000000;
+	always @ (posedge clk)
+	begin  //WRITE_POINTER
+		if (wrreq)
+			begin
+				wr_pointer <= wr_pointer + 1'b1;
+			end
+	end
+	always @ (posedge clk)
+	begin  //READ_POINTER
+		if (rdreq)
+		begin
+			rd_pointer <= rd_pointer + 1'b1;
+		end
+	end
+	always  @ (posedge clk )
+	begin  //READ_DATA
+		if (rdreq) begin
+			q <= data_ram;
+		end
+	end
+always @ (posedge clk )
+begin // : STATUS_COUNTER
+	if ((rdreq) && (!wrreq) && (status_cnt != 0))
+		status_cnt <= status_cnt - 1'b1;
+	else if ((wrreq) && (!rdreq) && (status_cnt != 16 ))
+		status_cnt <= status_cnt + 1'b1;
+end
+	dual_port_ram #(.ADDR_WIDTH(`mFIFOSIZEWIDTH), .DATA_WIDTH(`mFIFOWIDTH)) ram_addr(
+	.we1      (wrreq)      , // write enable
+	.we2      (rdreq)       , // Read enable
+	.addr1 (wr_pointer) , // address_0 input
+	.addr2 (rd_pointer) , // address_q input
+	.data1    (data)    , // data_0 bi-directional
+	.data2    (junk_input),   // data_1 bi-directional
+	.clk(clk),
+	.out1	(data_ram),
+	.out2	(junk_output));
+
+
+endmodule
+
+
+`define ZERO        8'b00000000  
+`define ONE         8'b00000001  
+`define TWO         8'b00000010  
+`define THREE 		  8'b00000011  
+`define FOUR		  8'b00000100  
+`define FIVE		  8'b00000101  
+`define SIX         8'b00000110  
+`define SEVEN       8'b00000111  
+`define EIGHT       8'b00001000  
+`define NINE        8'b00001001  
+`define TEN         8'b00001010  
+`define ELEVEN      8'b00001011  
+`define TWELVE      8'b00001100  
+`define THIRTEEN    8'b00001101  
+`define FOURTEEN    8'b00001110  
+`define FIFTEEN     8'b00001111  
+`define SIXTEEN     8'b00010000  
+`define SEVENTEEN   8'b00010001  
+`define EIGHTEEN	  8'b00010010  
+`define NINETEEN    8'b00010011  
+`define TWENTY		  8'b00010100  
+`define TWENTYONE   8'b00010101  
+`define TWENTYTWO   8'b00010110  
+`define TWENTYTHREE 8'b00010111  
+`define TWENTYFOUR  8'b00011000  
+  
+module fpu_add (clock, a1, b1, sum);  
+	input clock;  
+	input [31:0]a1;  
+	input [31:0]b1;  
+	output [31:0]sum;  
+	reg [31:0]sum;  
+	  
+	//Split up the numbers into exponents and mantissa.  
+	reg [7:0]a_exp; 
+	//reg [7:0]b_exp;  
+	reg [23:0]a_man; 
+	reg [23:0]b_man; 
+  
+	reg [7:0]temp;  
+	  
+	reg [24:0]sum_man;  
+	//reg [7:0]sum_exp;  
+	  
+	//introduce latency on inputs  
+	reg [31:0]a;  
+	reg [31:0]b;  
+	  
+	always @ (posedge clock) begin  
+		a <= a1;  
+		b <= b1;  
+	end  
+	  
+	reg smaller; //smaller is 1 if a < b, 0 otherwise  
+	  
+	//Shift mantissa's to have the same exponent  
+	always @ (a or b) begin  
+		//a_exp = a[30:23];  
+		//b_exp = b[30:23];  
+		//a_man = {1'b1, a[22:0]};  
+	   //b_man = {1'b1, b[22:0]};  
+		  
+		if (a[30:23] < b[30:23]) begin  
+			temp = b[30:23] - a[30:23];  
+			//a_man = {1'b1, a[22:0]} >> temp; //Expand into case statement, as below.  
+			case (temp)   
+				`ONE: begin  
+					a_man = {1'b1, a[22:0]} >> `ONE;  
+				end  
+				`TWO: begin  
+					a_man = {1'b1, a[22:0]} >> `TWO;  
+				end  
+				`THREE: begin  
+					a_man = {1'b1, a[22:0]} >> `THREE;  
+				end  
+				`FOUR: begin  
+					a_man = {1'b1, a[22:0]} >> `FOUR;  
+				end  
+				`FIVE: begin  
+					a_man = {1'b1, a[22:0]} >> `FIVE;  
+				end  
+				`SIX: begin  
+					a_man = {1'b1, a[22:0]} >> `SIX;  
+				end  
+				`SEVEN: begin  
+					a_man = {1'b1, a[22:0]} >> `SEVEN;  
+				end  
+				`EIGHT: begin  
+					a_man = {1'b1, a[22:0]} >> `EIGHT;  
+				end  
+				`NINE: begin  
+					a_man = {1'b1, a[22:0]} >> `NINE;  
+				end  
+				`TEN: begin  
+					a_man = {1'b1, a[22:0]} >> `TEN;  
+				end  
+				`ELEVEN: begin  
+					a_man = {1'b1, a[22:0]} >> `ELEVEN;  
+				end  
+				`TWELVE: begin  
+					a_man = {1'b1, a[22:0]} >> `TWELVE;  
+				end  
+				`THIRTEEN: begin  
+					a_man = {1'b1, a[22:0]} >> `THIRTEEN;  
+				end  
+				`FOURTEEN: begin  
+					a_man = {1'b1, a[22:0]} >> `FOURTEEN;  
+				end  
+				`FIFTEEN: begin  
+					a_man = {1'b1, a[22:0]} >> `FIFTEEN;  
+				end  
+				`SIXTEEN: begin  
+					a_man = {1'b1, a[22:0]} >> `SIXTEEN;  
+				end  
+				`SEVENTEEN: begin  
+					a_man = {1'b1, a[22:0]} >> `SEVENTEEN;  
+				end  
+				`EIGHTEEN: begin  
+					a_man = {1'b1, a[22:0]} >> `EIGHTEEN;  
+				end  
+				`NINETEEN: begin  
+					a_man = {1'b1, a[22:0]} >> `NINETEEN;  
+				end  
+				`TWENTY: begin  
+					a_man = {1'b1, a[22:0]} >> `TWENTY;  
+				end  
+				`TWENTYONE: begin  
+					a_man = {1'b1, a[22:0]} >> `TWENTYONE;  
+				end  
+				`TWENTYTWO: begin  
+					a_man = {1'b1, a[22:0]} >> `TWENTYTWO;  
+				end  
+				`TWENTYTHREE: begin  
+					a_man = {1'b1, a[22:0]} >> `TWENTYTHREE;  
+				end  
+				`TWENTYFOUR: begin  
+					a_man = {1'b1, a[22:0]} >> `TWENTYFOUR;  
+				end  
+				default: begin //More than twenty-four, shift by twenty-four. It is a boundary case.  
+					a_man = {1'b1, a[22:0]} >> `TWENTYFOUR;  
+				end  
+			endcase   
+				  
+			b_man = {1'b1, b[22:0]};  
+			a_exp = b[30:23];  
+			//b_exp = b[30:23];  
+			  
+		end else if (a[30:23] > b[30:23]) begin  
+			temp = a[30:23] - b[30:23];  
+			a_man = {1'b1, a[22:0]};  
+			//b_man = {1'b1, b[22:0]} >> temp; //Expand into case statement, as below.  
+			case (temp)   
+				`ONE: begin  
+					b_man = {1'b1, b[22:0]} >> `ONE;  
+				end  
+				`TWO: begin  
+					b_man = {1'b1, b[22:0]} >> `TWO;  
+				end  
+				`THREE: begin  
+					b_man = {1'b1, b[22:0]} >> `THREE;  
+				end  
+				`FOUR: begin  
+					b_man = {1'b1, b[22:0]} >> `FOUR;  
+				end  
+				`FIVE: begin  
+					b_man = {1'b1, b[22:0]} >> `FIVE;  
+				end  
+				`SIX: begin  
+					b_man = {1'b1, b[22:0]} >> `SIX;  
+				end  
+				`SEVEN: begin  
+					b_man = {1'b1, b[22:0]} >> `SEVEN;  
+				end  
+				`EIGHT: begin  
+					b_man = {1'b1, b[22:0]} >> `EIGHT;  
+				end  
+				`NINE: begin  
+					b_man = {1'b1, b[22:0]} >> `NINE;  
+				end  
+				`TEN: begin  
+					b_man = {1'b1, b[22:0]} >> `TEN;  
+				end  
+				`ELEVEN: begin  
+					b_man = {1'b1, b[22:0]} >> `ELEVEN;  
+				end  
+				`TWELVE: begin  
+					b_man = {1'b1, b[22:0]} >> `TWELVE;  
+				end  
+				`THIRTEEN: begin  
+					b_man = {1'b1, b[22:0]} >> `THIRTEEN;  
+				end  
+				`FOURTEEN: begin  
+					b_man = {1'b1, b[22:0]} >> `FOURTEEN;  
+				end  
+				`FIFTEEN: begin  
+					b_man = {1'b1, b[22:0]} >> `FIFTEEN;  
+				end  
+				`SIXTEEN: begin  
+					b_man = {1'b1, b[22:0]} >> `SIXTEEN;  
+				end  
+				`SEVENTEEN: begin  
+					b_man = {1'b1, b[22:0]} >> `SEVENTEEN;  
+				end  
+				`EIGHTEEN: begin  
+					b_man = {1'b1, b[22:0]} >> `EIGHTEEN;  
+				end  
+				`NINETEEN: begin  
+					b_man = {1'b1, b[22:0]} >> `NINETEEN;  
+				end  
+				`TWENTY: begin  
+					b_man = {1'b1, b[22:0]} >> `TWENTY;  
+				end  
+				`TWENTYONE: begin  
+					b_man = {1'b1, b[22:0]} >> `TWENTYONE;  
+				end  
+				`TWENTYTWO: begin  
+					b_man = {1'b1, b[22:0]} >> `TWENTYTWO;  
+				end  
+				`TWENTYTHREE: begin  
+					b_man = {1'b1, b[22:0]} >> `TWENTYTHREE;  
+				end  
+				`TWENTYFOUR: begin  
+					b_man = {1'b1, b[22:0]} >> `TWENTYFOUR;  
+				end  
+				default: begin //More than twenty-four, shift by twenty-four. It is a boundary case.  
+					b_man = {1'b1, b[22:0]} >> `TWENTYFOUR;  
+				end  
+			endcase   
+			  
+			a_exp = a[30:23];  
+			//b_exp = a[30:23];  
+		end else begin  
+			temp = 8'b0;  
+			a_man = {1'b1, a[22:0]};  
+			b_man = {1'b1, b[22:0]};  
+			a_exp = a[30:23];  
+		end  
+		  
+	end  
+  
+	//Perform the addition operation  
+	always @ (a_man or b_man or a or b) begin  
+		if (a_man < b_man) begin  
+			smaller = 1'b1;  
+		end else begin  
+			smaller = 1'b0;  
+		end  
+	  
+		//both positive  
+		if (~a[31] && ~b[31]) begin  
+			sum_man = a_man + b_man;  
+			sum[31] = 1'b0;  
+		end   
+		  
+		//both negative  
+		else if (a[31] && b[31]) begin  
+			sum_man = a_man + b_man;  
+			sum[31] = 1'b1;  
+		end  
+		  
+		//a pos, b neg  
+		else if (~a[31] && b[31]) begin  
+			if (smaller) begin //a < b  
+				sum_man = b_man - a_man;  
+				sum[31] = 1'b1;  
+			end else begin  
+				sum_man = a_man - b_man;  
+				sum[31] = 1'b0;  
+			end  
+		end  
+		  
+		//a neg, b pos  
+		else /*if (a[31] && ~b[31])*/ begin  
+			if (smaller) begin //a < b  
+				sum_man = b_man - a_man;  
+				sum[31] = 1'b0;  
+			end else begin  
+				sum_man = a_man - b_man;  
+				sum[31] = 1'b1;  
+			end  
+		end  
+	end  
+	  
+	//Store the number  
+	// we already have the sign.  
+	  
+	always @ (sum_man or a_exp) begin  
+		if (sum_man[24])begin //shif sum >> by 1, add 1 to the exponent.  
+			sum[22:0] = sum_man[23:1];  
+			sum[30:23] = a_exp + 8'b00000001;  
+			  
+		end else if (sum_man[23]) begin //do nothing  
+			sum[22:0] = sum_man[22:0];  
+			sum[30:23] = a_exp;  
+			  
+		end else if (sum_man[22]) begin //shift << by 1, subtract 1 from exponent. 
+			sum[22:0] = {sum_man[21:0], 1'b0}; 
+			sum[30:23] = a_exp - 8'b00000001; 
+ 
+		end else if (sum_man[21]) begin //shift << by 2, subtract 2 from exponent. 
+			sum[22:0] = {sum_man[20:0], 2'b0}; 
+			sum[30:23] = a_exp - 8'b00000010; 
+ 
+		end else if (sum_man[20]) begin //shift << by 3, subtract 3 from exponent. 
+			sum[22:0] = {sum_man[19:0], 3'b0}; 
+			sum[30:23] = a_exp - 8'b00000011; 
+ 
+		end else if (sum_man[19]) begin //shift << by 4, subtract 4 from exponent. 
+			sum[22:0] = {sum_man[18:0], 4'b0}; 
+			sum[30:23] = a_exp - 8'b00000100; 
+ 
+		end else if (sum_man[18]) begin //shift << by 5, subtract 5 from exponent. 
+			sum[22:0] = {sum_man[17:0], 5'b0}; 
+			sum[30:23] = a_exp - 8'b00000101; 
+ 
+		end else if (sum_man[17]) begin //shift << by 6, subtract 6 from exponent. 
+			sum[22:0] = {sum_man[16:0], 6'b0}; 
+			sum[30:23] = a_exp - 8'b00000110; 
+ 
+		end else if (sum_man[16]) begin //shift << by 7, subtract 7 from exponent. 
+			sum[22:0] = {sum_man[15:0], 7'b0}; 
+			sum[30:23] = a_exp - 8'b00000111; 
+ 
+		end else if (sum_man[15]) begin //shift << by 8, subtract 8 from exponent. 
+			sum[22:0] = {sum_man[14:0], 8'b0}; 
+			sum[30:23] = a_exp - 8'b00001000; 
+ 
+		end else if (sum_man[14]) begin //shift << by 9, subtract 9 from exponent. 
+			sum[22:0] = {sum_man[13:0], 9'b0}; 
+			sum[30:23] = a_exp - 8'b00001001; 
+ 
+		end else if (sum_man[13]) begin //shift << by 10, subtract 10 from exponent. 
+			sum[22:0] = {sum_man[12:0], 10'b0}; 
+			sum[30:23] = a_exp - 8'b00001010; 
+ 
+		end else if (sum_man[12]) begin //shift << by 11, subtract 11 from exponent. 
+			sum[22:0] = {sum_man[11:0], 11'b0}; 
+			sum[30:23] = a_exp - 8'b00001011; 
+ 
+		end else if (sum_man[11]) begin //shift << by 12, subtract 12 from exponent. 
+			sum[22:0] = {sum_man[10:0], 12'b0}; 
+			sum[30:23] = a_exp - 8'b00001100; 
+ 
+		end else if (sum_man[10]) begin //shift << by 13, subtract 13 from exponent. 
+			sum[22:0] = {sum_man[9:0], 13'b0}; 
+			sum[30:23] = a_exp - 8'b00001101; 
+ 
+		end else if (sum_man[9]) begin //shift << by 14, subtract 14 from exponent. 
+			sum[22:0] = {sum_man[8:0], 14'b0}; 
+			sum[30:23] = a_exp - 8'b00001110; 
+ 
+		end else if (sum_man[8]) begin //shift << by 15, subtract 15 from exponent. 
+			sum[22:0] = {sum_man[7:0], 15'b0}; 
+			sum[30:23] = a_exp - 8'b00001111; 
+ 
+		end else if (sum_man[7]) begin //shift << by 16, subtract 16 from exponent. 
+			sum[22:0] = {sum_man[6:0], 16'b0}; 
+			sum[30:23] = a_exp - 8'b00010000; 
+ 
+		end else if (sum_man[6]) begin //shift << by 17, subtract 17 from exponent. 
+			sum[22:0] = {sum_man[5:0], 17'b0}; 
+			sum[30:23] = a_exp - 8'b00010001; 
+ 
+		end else if (sum_man[5]) begin //shift << by 18, subtract 18 from exponent. 
+			sum[22:0] = {sum_man[4:0], 18'b0}; 
+			sum[30:23] = a_exp - 8'b00010010; 
+ 
+		end else if (sum_man[4]) begin //shift << by 19, subtract 19 from exponent. 
+			sum[22:0] = {sum_man[3:0], 19'b0}; 
+			sum[30:23] = a_exp - 8'b00010011; 
+ 
+		end else if (sum_man[3]) begin //shift << by 20, subtract 20 from exponent. 
+			sum[22:0] = {sum_man[2:0], 20'b0}; 
+			sum[30:23] = a_exp - 8'b00010100; 
+ 
+		end else if (sum_man[2]) begin //shift << by 21, subtract 21 from exponent. 
+			sum[22:0] = {sum_man[1:0], 21'b0}; 
+			sum[30:23] = a_exp - 8'b00010101; 
+ 
+		end else if (sum_man[1]) begin //shift << by 22, subtract 22 from exponent. 
+			sum[22:0] = {sum_man[0:0], 22'b0}; 
+			sum[30:23] = a_exp - 8'b00010110; 
+ 
+		end else /*if (sum_man[0])*/ begin //shift << by 23, subtract 23 from exponent. 
+			sum[22:0] = 23'b0; 
+			sum[30:23] = a_exp - 8'b00010111;  
+		end 
+		  
+	end  
+  
+endmodule   
+	
+module fpu_div(clock, n, d, div);  
+//n = numerator  
+//d = denomenator  
+//div = result  
+	input clock;  
+  
+	input [31:0]n;  
+	input [31:0]d;  
+	output [31:0]div;  
+	reg [31:0]div;  
+	  
+	//Store the mantissa and exponents separately. Introduce the latency of 1.  
+	reg [7:0]n_exp;  
+	reg [7:0]d_exp;  
+	reg [23:0]n_man;  
+	reg [23:0]d_man;  
+	reg n_sign;  
+	reg d_sign;  
+	  
+	wire [23:0]div_man;  
+	reg [7:0]div_exp;  
+	  
+	always @ (posedge clock) begin  
+		n_exp <= n[30:23];  
+		d_exp <= d[30:23];  
+		n_man <= {1'b1, n[22:0]};  
+		d_man <= {1'b1, d[22:0]};  
+		n_sign <= n[31];  
+		d_sign <= d[31];  
+	end  
+	  
+	//Find the exponent, store in div_exp.  
+	always @ (n_exp or d_exp) begin  
+		if (n_exp >= d_exp) begin  
+			div_exp = 8'b01111111 + (n_exp - d_exp);  
+		end else begin  
+			div_exp = 8'b01111111 - (d_exp - n_exp);  
+		end  
+	end  
+	  
+	//Divide the mantissas, store in div_man.  
+	div_24b divide(.numer(n_man), .denom(d_man), .res(div_man));  
+	  
+	//Store the result. Shift exponents appropriately. Store sign.  
+	//Sign  
+	always @ (n_sign or d_sign) begin  
+		div[31] = n_sign ^ d_sign;  
+	end  
+	  
+	//Mantissa and Exponent  
+	always @ (div_man or div_exp) begin  
+		if (div_man[23]) begin //do nothing  
+			div[22:0] = div_man[22:0];  
+			div[30:23] = div_exp;  
+		  
+		end else if (div_man[22]) begin //shift << by 1, subtract 1 from exponent. 
+			div[22:0] = {div_man[21:0], 1'b0}; 
+			div[30:23] = div_exp - 8'b00000001; 
+ 
+		end else if (div_man[21]) begin //shift << by 2, subtract 2 from exponent. 
+			div[22:0] = {div_man[20:0], 2'b0}; 
+			div[30:23] = div_exp - 8'b00000010; 
+ 
+		end else if (div_man[20]) begin //shift << by 3, subtract 3 from exponent. 
+			div[22:0] = {div_man[19:0], 3'b0}; 
+			div[30:23] = div_exp - 8'b00000011; 
+ 
+		end else if (div_man[19]) begin //shift << by 4, subtract 4 from exponent. 
+			div[22:0] = {div_man[18:0], 4'b0}; 
+			div[30:23] = div_exp - 8'b00000100; 
+ 
+		end else if (div_man[18]) begin //shift << by 5, subtract 5 from exponent. 
+			div[22:0] = {div_man[17:0], 5'b0}; 
+			div[30:23] = div_exp - 8'b00000101; 
+ 
+		end else if (div_man[17]) begin //shift << by 6, subtract 6 from exponent. 
+			div[22:0] = {div_man[16:0], 6'b0}; 
+			div[30:23] = div_exp - 8'b00000110; 
+ 
+		end else if (div_man[16]) begin //shift << by 7, subtract 7 from exponent. 
+			div[22:0] = {div_man[15:0], 7'b0}; 
+			div[30:23] = div_exp - 8'b00000111; 
+ 
+		end else if (div_man[15]) begin //shift << by 8, subtract 8 from exponent. 
+			div[22:0] = {div_man[14:0], 8'b0}; 
+			div[30:23] = div_exp - 8'b00001000; 
+ 
+		end else if (div_man[14]) begin //shift << by 9, subtract 9 from exponent. 
+			div[22:0] = {div_man[13:0], 9'b0}; 
+			div[30:23] = div_exp - 8'b00001001; 
+ 
+		end else if (div_man[13]) begin //shift << by 10, subtract 10 from exponent. 
+			div[22:0] = {div_man[12:0], 10'b0}; 
+			div[30:23] = div_exp - 8'b00001010; 
+ 
+		end else if (div_man[12]) begin //shift << by 11, subtract 11 from exponent. 
+			div[22:0] = {div_man[11:0], 11'b0}; 
+			div[30:23] = div_exp - 8'b00001011; 
+ 
+		end else if (div_man[11]) begin //shift << by 12, subtract 12 from exponent. 
+			div[22:0] = {div_man[10:0], 12'b0}; 
+			div[30:23] = div_exp - 8'b00001100; 
+ 
+		end else if (div_man[10]) begin //shift << by 13, subtract 13 from exponent. 
+			div[22:0] = {div_man[9:0], 13'b0}; 
+			div[30:23] = div_exp - 8'b00001101; 
+ 
+		end else if (div_man[9]) begin //shift << by 14, subtract 14 from exponent. 
+			div[22:0] = {div_man[8:0], 14'b0}; 
+			div[30:23] = div_exp - 8'b00001110; 
+ 
+		end else if (div_man[8]) begin //shift << by 15, subtract 15 from exponent. 
+			div[22:0] = {div_man[7:0], 15'b0}; 
+			div[30:23] = div_exp - 8'b00001111; 
+ 
+		end else if (div_man[7]) begin //shift << by 16, subtract 16 from exponent. 
+			div[22:0] = {div_man[6:0], 16'b0}; 
+			div[30:23] = div_exp - 8'b00010000; 
+ 
+		end else if (div_man[6]) begin //shift << by 17, subtract 17 from exponent. 
+			div[22:0] = {div_man[5:0], 17'b0}; 
+			div[30:23] = div_exp - 8'b00010001; 
+ 
+		end else if (div_man[5]) begin //shift << by 18, subtract 18 from exponent. 
+			div[22:0] = {div_man[4:0], 18'b0}; 
+			div[30:23] = div_exp - 8'b00010010; 
+ 
+		end else if (div_man[4]) begin //shift << by 19, subtract 19 from exponent. 
+			div[22:0] = {div_man[3:0], 19'b0}; 
+			div[30:23] = div_exp - 8'b00010011; 
+ 
+		end else if (div_man[3]) begin //shift << by 20, subtract 20 from exponent. 
+			div[22:0] = {div_man[2:0], 20'b0}; 
+			div[30:23] = div_exp - 8'b00010100; 
+ 
+		end else if (div_man[2]) begin //shift << by 21, subtract 21 from exponent. 
+			div[22:0] = {div_man[1:0], 21'b0}; 
+			div[30:23] = div_exp - 8'b00010101; 
+ 
+		end else if (div_man[1]) begin //shift << by 22, subtract 22 from exponent. 
+			div[22:0] = {div_man[0:0], 22'b0}; 
+			div[30:23] = div_exp - 8'b00010110; 
+  
+		end else /*if (div_man[0])*/ begin //shift << by 23, subtract 23 from exponent. 
+			div[22:0] = 23'b0; 
+			div[30:23] = div_exp - 8'b00010111; 
+		end 
+  
+	end  
+	  
+endmodule   
+  
+  
+  
+  
+  
+module div_24b(numer, denom, res);  
+	//input clock;  
+  
+	input [23:0]numer;  
+	input [23:0]denom;  
+	output [23:0]res;  
+	reg [23:0]res;  
+	  
+	//Pad with 23 zeros.  
+	wire [46:0]denom_pad;  
+	wire [46:0]numer23; 
+	reg [46:0]numer22; 
+	reg [46:0]numer21; 
+	reg [46:0]numer20; 
+	reg [46:0]numer19; 
+	reg [46:0]numer18; 
+	reg [46:0]numer17; 
+	reg [46:0]numer16; 
+	reg [46:0]numer15; 
+	reg [46:0]numer14; 
+	reg [46:0]numer13; 
+	reg [46:0]numer12; 
+	reg [46:0]numer11; 
+	reg [46:0]numer10; 
+	reg [46:0]numer9; 
+	reg [46:0]numer8; 
+	reg [46:0]numer7; 
+	reg [46:0]numer6; 
+	reg [46:0]numer5; 
+	reg [46:0]numer4; 
+	reg [46:0]numer3; 
+	reg [46:0]numer2; 
+	reg [46:0]numer1;  
+	reg [46:0]numer0;  
+	  
+	//always @ (posedge clock) begin  
+	assign denom_pad = {23'b0, denom};  
+	assign numer23 = {numer, 23'b0};  
+	// end  
+	  
+	//res[23]  
+	always @ (denom_pad or numer23) begin  
+	  
+		if (denom_pad[23:0] <= numer23[46:23]) begin 
+			res[23] = 1'b1; 
+			numer22 = {numer23[46:23] - denom_pad[23:0], 23'b0}; 
+		end else begin 
+			res[23] = 1'b0; 
+			numer22 = numer23; 
+		end 
+ 
+		if (denom_pad[24:0] <= numer22[46:22]) begin 
+			res[22] = 1'b1; 
+			numer21 = {numer22[46:22] - denom_pad[24:0], 22'b0}; 
+		end else begin 
+			res[22] = 1'b0; 
+			numer21 = numer22; 
+		end 
+ 
+		if (denom_pad[25:0] <= numer21[46:21]) begin 
+			res[21] = 1'b1; 
+			numer20 = {numer21[46:21] - denom_pad[25:0], 21'b0}; 
+		end else begin 
+			res[21] = 1'b0; 
+			numer20 = numer21; 
+		end 
+ 
+		if (denom_pad[26:0] <= numer20[46:20]) begin 
+			res[20] = 1'b1; 
+			numer19 = {numer20[46:20] - denom_pad[26:0], 20'b0}; 
+		end else begin 
+			res[20] = 1'b0; 
+			numer19 = numer20; 
+		end 
+ 
+		if (denom_pad[27:0] <= numer19[46:19]) begin 
+			res[19] = 1'b1; 
+			numer18 = {numer19[46:19] - denom_pad[27:0], 19'b0}; 
+		end else begin 
+			res[19] = 1'b0; 
+			numer18 = numer19; 
+		end 
+ 
+		if (denom_pad[28:0] <= numer18[46:18]) begin 
+			res[18] = 1'b1; 
+			numer17 = {numer18[46:18] - denom_pad[28:0], 18'b0}; 
+		end else begin 
+			res[18] = 1'b0; 
+			numer17 = numer18; 
+		end 
+ 
+		if (denom_pad[29:0] <= numer17[46:17]) begin 
+			res[17] = 1'b1; 
+			numer16 = {numer17[46:17] - denom_pad[29:0], 17'b0}; 
+		end else begin 
+			res[17] = 1'b0; 
+			numer16 = numer17; 
+		end 
+ 
+		if (denom_pad[30:0] <= numer16[46:16]) begin 
+			res[16] = 1'b1; 
+			numer15 = {numer16[46:16] - denom_pad[30:0], 16'b0}; 
+		end else begin 
+			res[16] = 1'b0; 
+			numer15 = numer16; 
+		end 
+ 
+		if (denom_pad[31:0] <= numer15[46:15]) begin 
+			res[15] = 1'b1; 
+			numer14 = {numer15[46:15] - denom_pad[31:0], 15'b0}; 
+		end else begin 
+			res[15] = 1'b0; 
+			numer14 = numer15; 
+		end 
+ 
+		if (denom_pad[32:0] <= numer14[46:14]) begin 
+			res[14] = 1'b1; 
+			numer13 = {numer14[46:14] - denom_pad[32:0], 14'b0}; 
+		end else begin 
+			res[14] = 1'b0; 
+			numer13 = numer14; 
+		end 
+ 
+		if (denom_pad[33:0] <= numer13[46:13]) begin 
+			res[13] = 1'b1; 
+			numer12 = {numer13[46:13] - denom_pad[33:0], 13'b0}; 
+		end else begin 
+			res[13] = 1'b0; 
+			numer12 = numer13; 
+		end 
+ 
+		if (denom_pad[34:0] <= numer12[46:12]) begin 
+			res[12] = 1'b1; 
+			numer11 = {numer12[46:12] - denom_pad[34:0], 12'b0}; 
+		end else begin 
+			res[12] = 1'b0; 
+			numer11 = numer12; 
+		end 
+ 
+		if (denom_pad[35:0] <= numer11[46:11]) begin 
+			res[11] = 1'b1; 
+			numer10 = {numer11[46:11] - denom_pad[35:0], 11'b0}; 
+		end else begin 
+			res[11] = 1'b0; 
+			numer10 = numer11; 
+		end 
+ 
+		if (denom_pad[36:0] <= numer10[46:10]) begin 
+			res[10] = 1'b1; 
+			numer9 = {numer10[46:10] - denom_pad[36:0], 10'b0}; 
+		end else begin 
+			res[10] = 1'b0; 
+			numer9 = numer10; 
+		end 
+ 
+		if (denom_pad[37:0] <= numer9[46:9]) begin 
+			res[9] = 1'b1; 
+			numer8 = {numer9[46:9] - denom_pad[37:0], 9'b0}; 
+		end else begin 
+			res[9] = 1'b0; 
+			numer8 = numer9; 
+		end 
+ 
+		if (denom_pad[38:0] <= numer8[46:8]) begin 
+			res[8] = 1'b1; 
+			numer7 = {numer8[46:8] - denom_pad[38:0], 8'b0}; 
+		end else begin 
+			res[8] = 1'b0; 
+			numer7 = numer8; 
+		end 
+ 
+		if (denom_pad[39:0] <= numer7[46:7]) begin 
+			res[7] = 1'b1; 
+			numer6 = {numer7[46:7] - denom_pad[39:0], 7'b0}; 
+		end else begin 
+			res[7] = 1'b0; 
+			numer6 = numer7; 
+		end 
+ 
+		if (denom_pad[40:0] <= numer6[46:6]) begin 
+			res[6] = 1'b1; 
+			numer5 = {numer6[46:6] - denom_pad[40:0], 6'b0}; 
+		end else begin 
+			res[6] = 1'b0; 
+			numer5 = numer6; 
+		end 
+ 
+		if (denom_pad[41:0] <= numer5[46:5]) begin 
+			res[5] = 1'b1; 
+			numer4 = {numer5[46:5] - denom_pad[41:0], 5'b0}; 
+		end else begin 
+			res[5] = 1'b0; 
+			numer4 = numer5; 
+		end 
+ 
+		if (denom_pad[42:0] <= numer4[46:4]) begin 
+			res[4] = 1'b1; 
+			numer3 = {numer4[46:4] - denom_pad[42:0], 4'b0}; 
+		end else begin 
+			res[4] = 1'b0; 
+			numer3 = numer4; 
+		end 
+ 
+		if (denom_pad[43:0] <= numer3[46:3]) begin 
+			res[3] = 1'b1; 
+			numer2 = {numer3[46:3] - denom_pad[43:0], 3'b0}; 
+		end else begin 
+			res[3] = 1'b0; 
+			numer2 = numer3; 
+		end 
+ 
+		if (denom_pad[44:0] <= numer2[46:2]) begin 
+			res[2] = 1'b1; 
+			numer1 = {numer2[46:2] - denom_pad[44:0], 2'b0}; 
+		end else begin 
+			res[2] = 1'b0; 
+			numer1 = numer2; 
+		end 
+ 
+		if (denom_pad[45:0] <= numer1[46:1]) begin 
+			res[1] = 1'b1; 
+			numer0 = {numer1[46:1] - denom_pad[45:0], 1'b0}; 
+		end else begin 
+			res[1] = 1'b0; 
+			numer0 = numer1; 
+		end 
+  
+		if (denom_pad <= numer0) begin  
+			res[0] = 1'b1;  
+		end else begin  
+			res[0] = 1'b0;  
+		end 
+  
+	end  
+	  
+endmodule   
+
+
+//////////////////////////////////////////////  
+//   
+// constants.v  
+//  
+// Version 1.3  
+// Written 7/11/01 David_Harris@hmc.edu & Mark_Phair@hmc.edu  
+// Modifed 8/20/01 Mark_Phair@hmc.edu and Justin_Schauer@hmc.edu  
+//  
+// A set of constants for a parameterized floating point multiplier and adder.  
+//  
+//////////////////////////////////////////////  
+  
+//////////////////////////////////////////////  
+// FREE VARIABLES  
+//////////////////////////////////////////////  
+  
+// Widths of Fields  
+`define WEXP	8  
+`define WSIG	23  
+`define WFLAG	5  
+`define WCONTROL 5  
+  
+// output flag select (flags[x])  
+`define DIVZERO 	0  
+`define INVALID 	1  
+`define INEXACT 	2  
+`define OVERFLOW 	3  
+`define UNDERFLOW	4  
+  
+//////////////////////////////////////////////  
+// DEPENDENT VARIABLES  
+//////////////////////////////////////////////  
+  
+`define WIDTH 		32 	//(`WEXP + `WSIG + 1)  
+`define PRODWIDTH	48 	//(2 * (`WSIG + 1))  
+`define SHIFTWIDTH	96 	//(2 * `PRODWIDTH))  
+`define WPRENORM	24	// `WSIG + 1  
+`define WEXPSUM		10	// `WEXP + 2  
+`define BIAS		127	// (2^(`WEXP)) - 1  
+`define WSIGMINUS1	22	// `WSIG - 1, used for rounding  
+`define WSHIFTAMT	5	// log2(`WSIG + 1) rounded up  
+  
+// for trapped over/underflow  
+`define UNDERBIAS	192	// 3 * 2 ^ (`WEXP -2)  
+`define OVERBIAS	-192	// -`UNDERBIAS  
+  
+// specialized constants for fpadd  
+`define	EXTRASIG	25		// `WSIG+2 this is the amount of precision needed so no  
+					// subtraction errors occur  
+`define	SHIFT		5		// # bits the max alignment shift will fit in (log2(`WSIG+2)  
+					// rounded up to nearest int)  
+`define	MAX_EXP		8'b11111110	// the maximum non-infinite exponent,  
+					// `WEXP bits, the most significant  
+					// `WEXP-1 bits are 1, the LSB is 0  
+`define	INF_EXP		8'b11111111	// Infinity exponent, `WEXP bits, all 1  
+// Max significand, `WSIG bits, all 1  
+`define	MAX_SIG		23'b11111111111111111111111  
+`define	WEXP_0		8'b0		// Exponent equals `WEXP'b0  
+`define	WEXP_1		8'b1		// Exponent equals one `WEXP'b1  
+`define	WSIG_0		23'b0		// Significand equals zero `WSIG'b0  
+`define	WSIG_1		23'b1		// Significand equals one `WSIG'b1  
+`define	EXTRASIG_0	25'b0		// All result bits for adder zero `EXTRASIG'b0  
+  
+// specialized constants for fpmul  
+`define	MAXSHIFT	24		// `WSIG + 1  
+  
+// GENERAL SPECIAL NUMBERS - Exp + Significand of special numbers  
+// plain NaN `WIDTH-1, all 1  
+`define CONSTNAN	{9'b111111111,22'b0}  
+// zero `WIDTH-1, all 0  
+`define CONSTZERO	31'b0  
+// infinity `WEXP all 1, `WSIG all 0  
+`define CONSTINFINITY	{8'b11111111, 23'b0}  
+// largest number maximum exponent(all 1's - 1) and maximum significand (all 1's)  
+`define CONSTLARGEST	{`MAX_EXP, `MAX_SIG}  
+`define PRESHIFTZEROS  48'b0 // `PRODWIDTH'b0  
+  
+//////////////////////////////////////////////  
+//   
+// fpmul.v  
+//  
+// Version 1.6  
+// Written 07/11/01 David_Harris@hmc.edu & Mark_Phair@hmc.edu  
+// Modifed 08/20/01 Mark_Phair@hmc.edu  
+//  
+// A parameterized floating point multiplier.  
+//  
+// BLOCK DESCRIPTIONS  
+//  
+// preprocess 	- general processing, such as zero detection, computing sign, NaN  
+//  
+// prenorm	- normalize denorms  
+//  
+// exponent	- sum the exponents, check for tininess before rounding  
+//  
+// multiply	- multiply the mantissae  
+//  
+// special	- calculate special cases, such as NaN and infinities  
+//  
+// shift	- shift the sig and exp if nesc.  
+//  
+// round	- round product  
+//  
+// normalize	- normalizes the result if appropriate (i.e. not a denormalized #)  
+//  
+// flag 	- general flag processing  
+//  
+// assemble	- assemble results  
+//  
+//////////////////////////////////////////////  
+  
+//////////////////////////////////////////////  
+// Includes  
+//////////////////////////////////////////////  
+  
+  
+  
+//////////////////////////////////////////////  
+// fpmul module  
+//////////////////////////////////////////////  
+  
+module fpmul(clk, a, b, y_out, control, flags) ; 
+	  
+	input clk;  
+	 
+  // external signals 
+  input	 [`WIDTH-1:0] 	a, b;		// floating-point inputs 
+  output [`WIDTH-1:0] 	y_out;		// floating-point product 
+  reg [`WIDTH-1:0] y_out; 
+  input  [1:0] control;	// control including rounding mode 
+  output [`WFLAG-1:0]	flags;		// DIVZERO, INVALID, INEXACT,  
+					// OVERFLOW, UNDERFLOW (defined in constant.v) 
+ 
+	//intermediate y_out 
+	wire [`WIDTH-1:0]y; 
+					 
+  // internal signals 
+  wire			multsign;	// sign of product 
+  wire			specialsign;	// sign of special 
+ 
+  wire  [`WSIG:0] 	norma;		// normal-form mantissa a, 1 bit larger to hold leading 1 
+  wire  [`WSIG:0] 	normb;		// normal-form mantissa b, 1 bit larger to hold leading 1 
+ 
+  wire	[`WEXPSUM-1:0]	expa, expb;	// the two exponents, after prenormalization 
+  wire	[`WEXPSUM-1:0] 	expsum;		// sum of exponents (two's complement) 
+  wire	[`WEXPSUM-1:0] 	shiftexp;	// shifted exponent 
+  wire	[`WEXP-1:0] 	roundexp;	// rounded, correct exponent 
+ 
+  wire	[`PRODWIDTH-1:0] prod;		// product of mantissae 
+  wire	[`PRODWIDTH-1:0] normalized;	// Normalized product 
+  wire	[`SHIFTWIDTH-1:0] shiftprod;	// shifted product 
+  wire	[`WSIG-1:0]	roundprod;	// rounded product 
+  wire	[`WIDTH-2:0]	special;	// special case exponent and product 
+ 
+  wire			twoormore;	// product is outside range [1,2) 
+  wire			zero;		// zero detected 
+  wire			infinity;	// infinity detected 
+  wire			aisnan;		// NaN detected in A 
+  wire			bisnan;		// NaN detected in B 
+  wire			aisdenorm;	// Denormalized number detected in A 
+  wire			bisdenorm;	// Denormalized number detected in B 
+  wire			specialcase;	// This is a special case 
+  wire			specialsigncase; // Use the special case sign 
+  wire			roundoverflow;	// overflow in rounding, need to add 1 to exponent 
+  wire			invalid;	// invalid operation 
+  wire			overflow;	// exponent result too high, standard overflow 
+  wire			inexact;	// inexact flag 
+  wire			shiftloss;	// lost digits due to a shift, result inaccurate 
+  wire	[1:0]		roundmode;	// rounding mode information extracted from control field   
+  wire			tiny;		// Result is tiny (denormalized #) after multiplication 
+  wire			stilltiny;	// Result is tiny (denormalized #) after rounding 
+  wire			denormround;	// rounding occured only because the initial result was 
+					//	a denormalized number. This is used to determine 
+					//	underflow in cases of denormalized numbers rounding 
+					//	up to normalized numbers 
+ 
+  preprocess	preprocesser(a, b, zero, aisnan, bisnan,  
+				aisdenorm, bisdenorm, infinity,  
+				control, roundmode, sign);   
+ 
+  special	specialer(a, b, special, specialsign, zero,  
+				aisnan, bisnan,  
+				infinity, invalid,  
+				specialcase, specialsigncase); 
+   
+  prenorm	prenormer(a[`WIDTH-2:0], b[`WIDTH-2:0], norma, normb, expa, expb, aisdenorm, bisdenorm); 
+ 
+  multiply_a	multiplier(norma, normb, prod, twoormore); 
+ 
+  exponent	exponenter(expa, expb, expsum, twoormore, tiny); 
+ 
+  normalize	normalizer(prod, normalized, tiny, twoormore);   
+ 
+  shift		shifter(normalized, expsum, shiftprod,  
+			shiftexp, shiftloss); 
+ 
+  round		rounder(shiftprod, shiftexp, shiftloss, 
+			roundprod, roundexp,  
+			roundmode, sign, tiny, inexact,  
+			overflow, stilltiny, denormround); 
+ 
+		// *** To check for tininess before rounding, use tiny 
+		//	To check after rounding, use stilltiny 
+		// *** for underflow detect: 
+		//	To check for inexact result use (inexact | (shiftloss & stilltiny)),  
+		//	To check for denormilization loss use (shiftloss & stilltiny) 
+//  flag		flager(invalid, overflow, inexact | shiftloss,  
+//			shiftloss | inexact, 
+//			/* tiny */ (stilltiny | (tiny & denormround)),  
+//			specialcase, flags);  
+			  
+  //ODIN cannot have operations in module instantiations.  
+  wire inexact_or_shiftloss;  
+  assign inexact_or_shiftloss = inexact | shiftloss;  
+  wire shiftloss_or_inexact;  
+  assign shiftloss_or_inexact = shiftloss | inexact;  
+  wire still_tiny_or_tiny_and_denormround;  
+  assign still_tiny_or_tiny_and_denormround = stilltiny | (tiny & denormround);  
+  
+    flag		flager(invalid, overflow, inexact_or_shiftloss,  
+			shiftloss_or_inexact, 
+			/* tiny */ stilltiny_or_tiny_and_denormround,  
+			specialcase, flags);  
+	  
+ 
+  assemble	assembler(roundprod, special, y,  
+			sign, specialsign, roundexp,  
+			specialcase, specialsigncase, 
+			roundmode, flags[`OVERFLOW]); 
+			 
+	always @ (posedge clk) begin 
+		y_out <= y; 
+	end 
+ 
+endmodule  
+ 
+  
+ 
+ 
+module preprocess(a, b, zero, aisnan, bisnan, aisdenorm, bisdenorm, infinity, control, roundmode, sign); 
+ 
+  // external signals 
+  input	[`WIDTH-1:0] 	a, b;		// floating-point inputs 
+  output 		zero;		// is there a zero? 
+  //input	[`WCONTROL-1:0]	control;	// control field  
+  input [1:0] control; //the rest is unused, not necessary for ODIN. 
+  output [1:0]		roundmode;	// 00 = RN; 01 = RZ; 10 = RP; 11 = RM  
+  output		aisnan;		// NaN detected in A 
+  output		bisnan;		// NaN detected in B 
+  output		aisdenorm;	// denormalized number detected in A 
+  output		bisdenorm;	// denormalized number detected in B 
+  output		infinity;	// infinity detected in A 
+  output		sign;		// sign of product 
+ 
+  // internal signals 
+  wire			signa, signb;	// sign of a and b 
+  wire [`WEXP-1:0]	expa, expb;	// the exponents of a and b 
+  wire [`WSIG-1:0]	siga, sigb;	// the significands of a and b 
+  wire			aexpfull;	// the exponent of a is all 1's 
+  wire			bexpfull;	// the exponent of b is all 1's 
+  wire			aexpzero;	// the exponent of a is all 0's 
+  wire			bexpzero;	// the exponent of b is all 0's 
+  wire			asigzero;	// the significand of a is all 0's 
+  wire			bsigzero;	// the significand of b is all 0's 
+ 
+  // Sign calculation 
+  assign signa 		= a[`WIDTH-1]; 
+  assign signb 		= b[`WIDTH-1]; 
+  assign sign = signa ^ signb; 
+ 
+  // Significand calcuations 
+ 
+  assign siga		= a[`WSIG-1:0]; 
+  assign sigb		= b[`WSIG-1:0]; 
+  // Are the significands all 0's? 
+  assign asigzero	= ~|siga; 
+  assign bsigzero	= ~|sigb; 
+ 
+  // Exponent calculations 
+ 
+  assign expa		= a[`WIDTH-2:`WIDTH-`WEXP-1]; 
+  assign expb		= b[`WIDTH-2:`WIDTH-`WEXP-1]; 
+  // Are the exponents all 0's? 
+  assign aexpzero	= ~|expa; 
+  assign bexpzero	= ~|expb; 
+  // Are the exponents all 1's? 
+  assign aexpfull	= &expa; 
+  assign bexpfull	= &expb; 
+ 
+  // General calculations 
+ 
+  // Zero Detect 
+  assign zero 		= (aexpzero & asigzero) | (bexpzero & bsigzero); 
+ 
+  // NaN detect 
+  assign aisnan		= aexpfull & ~asigzero; 
+  assign bisnan		= bexpfull & ~bsigzero; 
+ 
+  // Infinity detect 
+  assign infinity	= (aexpfull & asigzero) | (bexpfull & bsigzero); 
+ 
+  // Denorm detect 
+  assign aisdenorm	= aexpzero & ~asigzero; 
+  assign bisdenorm	= bexpzero & ~bsigzero; 
+ 
+  // Round mode extraction 
+  assign roundmode	= control[1:0]; 
+ 
+endmodule  
+ 
+module special (a, b, special, specialsign,  
+		zero, aisnan, bisnan, infinity,  
+		invalid, specialcase, specialsigncase); 
+ 
+  // external signals 
+  input	[`WIDTH-1:0] 	a, b;		// floating-point inputs 
+  output [`WIDTH-2:0]	special;	// special case output, exp + sig 
+  output		specialsign;	// the special-case sign 
+  input			zero;		// is there a zero? 
+  input			aisnan;		// NaN detected in A 
+  input			bisnan;		// NaN detected in B 
+  input			infinity;	// infinity detected 
+  output		invalid;	// invalid operation 
+  output		specialcase;	// this is a special case 
+  output		specialsigncase; // Use the special sign 
+ 
+  // internal signals 
+  wire			infandzero;	// infinity and zero detected 
+  wire	[`WIDTH-2:0]	highernan;	// holds inputed NaN, the higher if two are input, 
+					// and dont care if neither a nor b are NaNs 
+  wire			aishighernan;	// a is the higher NaN 
+ 
+  assign infandzero	= (infinity & zero); 
+ 
+  //#######SPECIAL ASSIGNMENT###### 
+  // #######return higher NaN########## 
+  // Use this block if you want to return the higher of two NaNs 
+ 
+  assign aishighernan = (aisnan & ((a[`WSIG-1:0] >= b[`WSIG-1:0]) | ~bisnan)); 
+ 
+  assign highernan[`WIDTH-2:0] = aishighernan ? a[`WIDTH-2:0] : b[`WIDTH-2:0]; 
+ 
+  assign special[`WIDTH-2:0] = (aisnan | bisnan) ? (highernan[`WIDTH-2:0]) :  
+			(zero ?  
+			(infinity ? (`CONSTNAN) : (`CONSTZERO)) : (`CONSTINFINITY)); 
+  // #######return first NaN########## 
+  // Use this block to return the first NaN encountered 
+//  assign special	= aisnan ? (a[`WIDTH-2:0]) :  
+//			(bisnan ? (b[`WIDTH-2:0]) :  
+//			(zero ?  
+//			(infinity ? (`CONSTNAN) : (`CONSTZERO)) : (`CONSTINFINITY))); 
+  //######END SPECIAL ASSIGNMENT####### 
+ 
+  assign specialcase	= zero | aisnan | bisnan | infinity; 
+ 
+  assign invalid	= infandzero; //*** need to include something about signaling NaNs here 
+ 
+  // dont need to check if b is NaN, if it defaults to that point, and b isnt NAN 
+  // then it wont be used anyway 
+  assign specialsign	= infandzero ? (1'b1) : (aishighernan ? a[`WIDTH-1] : b[`WIDTH-1]); 
+ 
+  assign specialsigncase = infandzero | aisnan | bisnan; 
+ 
+endmodule   
+ 
+module prenorm(a, b, norma, normb, modexpa, modexpb, aisdenorm, bisdenorm); 
+ 
+  //input	[`WIDTH-1:0]	a, b;			// the input floating point numbers  
+  input [`WIDTH-2:0] a, b;  //We don't need bit 31 here, unused in ODIN. 
+  output [`WSIG:0]	norma, normb;		// the mantissae in normal form 
+  output [`WEXPSUM-1:0]	modexpa, modexpb;	// the output exponents, larger to accomodate 
+						//	two's complement form 
+  input			aisdenorm;		// a is a denormalized number 
+  input			bisdenorm;		// b is a denormalized nubmer 
+ 
+  // internal signals 
+  wire	[`WEXPSUM-1:0]	expa, expb;		// exponents in two's complement form 
+						//	are negative if shifted for a 
+						// 	denormalized number 
+  wire	[`SHIFT-1:0]	shifta, shiftb; 	// the shift amounts 
+  reg [`WSIG:0]	shifteda, shiftedb;	// the shifted significands, used to be wire, changed for ODIN. 
+ 
+  // pull out the exponents 
+  assign expa 	= a[`WIDTH-2:`WIDTH-1-`WEXP]; 
+  assign expb 	= b[`WIDTH-2:`WIDTH-1-`WEXP]; 
+ 
+  // when breaking appart for paramaterizing: 
+  // ### RUN ./prenormshift.pl wsig_in ### 
+assign shifta = a[23 - 1] ? 1 : 
+                 a[23 - 2] ? 2 : 
+                 a[23 - 3] ? 3 : 
+                 a[23 - 4] ? 4 : 
+                 a[23 - 5] ? 5 : 
+                 a[23 - 6] ? 6 : 
+                 a[23 - 7] ? 7 : 
+                 a[23 - 8] ? 8 : 
+                 a[23 - 9] ? 9 : 
+                 a[23 - 10] ? 10 : 
+                 a[23 - 11] ? 11 : 
+                 a[23 - 12] ? 12 : 
+                 a[23 - 13] ? 13 : 
+                 a[23 - 14] ? 14 : 
+                 a[23 - 15] ? 15 : 
+                 a[23 - 16] ? 16 : 
+                 a[23 - 17] ? 17 : 
+                 a[23 - 18] ? 18 : 
+                 a[23 - 19] ? 19 : 
+                 a[23 - 20] ? 20 : 
+                 a[23 - 21] ? 21 : 
+                 a[23 - 22] ? 22 : 
+                 23; // dont need to check last bit 
+// if the second to last isn't 1, then the last one must be 
+ 
+assign shiftb = b[23 - 1] ? 1 : 
+                 b[23 - 2] ? 2 : 
+                 b[23 - 3] ? 3 : 
+                 b[23 - 4] ? 4 : 
+                 b[23 - 5] ? 5 : 
+                 b[23 - 6] ? 6 : 
+                 b[23 - 7] ? 7 : 
+                 b[23 - 8] ? 8 : 
+                 b[23 - 9] ? 9 : 
+                 b[23 - 10] ? 10 : 
+                 b[23 - 11] ? 11 : 
+                 b[23 - 12] ? 12 : 
+                 b[23 - 13] ? 13 : 
+                 b[23 - 14] ? 14 : 
+                 b[23 - 15] ? 15 : 
+                 b[23 - 16] ? 16 : 
+                 b[23 - 17] ? 17 : 
+                 b[23 - 18] ? 18 : 
+                 b[23 - 19] ? 19 : 
+                 b[23 - 20] ? 20 : 
+                 b[23 - 21] ? 21 : 
+                 b[23 - 22] ? 22 : 
+                 23; // dont need to check last bit 
+// if the second to last isn't 1, then the last one must be 
+ 
+ 
+ 
+  // If number is a denorm, the exponent must be  
+  //	decremented by the shift amount 
+  assign modexpa = aisdenorm ? 1 - shifta : expa;  
+  assign modexpb = bisdenorm ? 1 - shiftb : expb;  
+ 
+  // If number is denorm, shift the significand the appropriate amount 
+//  assign shifteda = a[`WSIG-1:0] << shifta;  
+	//Must have constant shifts for ODIN  
+	always @ (shifta or a) begin  
+		case (shifta)   
+			5'b00001: begin  
+				shifteda = a[`WSIG-1:0] << 5'b00001; 
+			end 
+ 
+			5'b00010: begin  
+				shifteda = a[`WSIG-1:0] << 5'b00010; 
+			end 
+ 
+			5'b00011: begin  
+				shifteda = a[`WSIG-1:0] << 5'b00011; 
+			end 
+ 
+			5'b00100: begin  
+				shifteda = a[`WSIG-1:0] << 5'b00100; 
+			end 
+ 
+			5'b00101: begin  
+				shifteda = a[`WSIG-1:0] << 5'b00101; 
+			end 
+ 
+			5'b00110: begin  
+				shifteda = a[`WSIG-1:0] << 5'b00110; 
+			end 
+ 
+			5'b00111: begin  
+				shifteda = a[`WSIG-1:0] << 5'b00111; 
+			end 
+ 
+			5'b01000: begin  
+				shifteda = a[`WSIG-1:0] << 5'b01000; 
+			end 
+ 
+			5'b01001: begin  
+				shifteda = a[`WSIG-1:0] << 5'b01001; 
+			end 
+ 
+			5'b01010: begin  
+				shifteda = a[`WSIG-1:0] << 5'b01010; 
+			end 
+ 
+			5'b01011: begin  
+				shifteda = a[`WSIG-1:0] << 5'b01011; 
+			end 
+ 
+			5'b01100: begin  
+				shifteda = a[`WSIG-1:0] << 5'b01100; 
+			end 
+ 
+			5'b01101: begin  
+				shifteda = a[`WSIG-1:0] << 5'b01101; 
+			end 
+ 
+			5'b01110: begin  
+				shifteda = a[`WSIG-1:0] << 5'b01110; 
+			end 
+ 
+			5'b01111: begin  
+				shifteda = a[`WSIG-1:0] << 5'b01111; 
+			end 
+ 
+			5'b10000: begin  
+				shifteda = a[`WSIG-1:0] << 5'b10000; 
+			end 
+ 
+			5'b10001: begin  
+				shifteda = a[`WSIG-1:0] << 5'b10001; 
+			end 
+ 
+			5'b10010: begin  
+				shifteda = a[`WSIG-1:0] << 5'b10010; 
+			end 
+ 
+			5'b10011: begin  
+				shifteda = a[`WSIG-1:0] << 5'b10011; 
+			end 
+ 
+			5'b10100: begin  
+				shifteda = a[`WSIG-1:0] << 5'b10100; 
+			end 
+ 
+			5'b10101: begin  
+				shifteda = a[`WSIG-1:0] << 5'b10101; 
+			end 
+ 
+			5'b10110: begin  
+				shifteda = a[`WSIG-1:0] << 5'b10110; 
+			end 
+ 
+			5'b10111: begin  
+				shifteda = a[`WSIG-1:0] << 5'b10111; 
+			end 
+ 
+			default: begin //Won't be higher than 23.  
+				shifteda = a[`WSIG-1:0];  
+			end  
+		endcase  
+	end  
+ 
+  assign norma 	= aisdenorm ? shifteda : {1'b1, a[`WSIG-1:0]}; 
+ 
+ // assign shiftedb = b[`WSIG-1:0] << shiftb;  
+	always @ (shiftb or b) begin  
+		case (shiftb)   
+			5'b00001: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b00001; 
+			end 
+ 
+			5'b00010: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b00010; 
+			end 
+ 
+			5'b00011: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b00011; 
+			end 
+ 
+			5'b00100: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b00100; 
+			end 
+ 
+			5'b00101: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b00101; 
+			end 
+ 
+			5'b00110: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b00110; 
+			end 
+ 
+			5'b00111: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b00111; 
+			end 
+ 
+			5'b01000: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b01000; 
+			end 
+ 
+			5'b01001: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b01001; 
+			end 
+ 
+			5'b01010: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b01010; 
+			end 
+ 
+			5'b01011: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b01011; 
+			end 
+ 
+			5'b01100: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b01100; 
+			end 
+ 
+			5'b01101: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b01101; 
+			end 
+ 
+			5'b01110: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b01110; 
+			end 
+ 
+			5'b01111: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b01111; 
+			end 
+ 
+			5'b10000: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b10000; 
+			end 
+ 
+			5'b10001: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b10001; 
+			end 
+ 
+			5'b10010: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b10010; 
+			end 
+ 
+			5'b10011: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b10011; 
+			end 
+ 
+			5'b10100: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b10100; 
+			end 
+ 
+			5'b10101: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b10101; 
+			end 
+ 
+			5'b10110: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b10110; 
+			end 
+ 
+			5'b10111: begin  
+				shiftedb = b[`WSIG-1:0] << 5'b10111; 
+			end 
+  
+			default: begin // Won't be higher than 23.  
+				shiftedb = b[`WSIG-1:0];  
+			end  
+		endcase  
+	end 
+		  
+  
+  assign normb 	= bisdenorm ? shiftedb : {1'b1, b[`WSIG-1:0]}; 
+ 
+endmodule  
+ 
+module multiply_a (norma, normb, prod, twoormore); 
+ 
+  input	 [`WSIG:0]		norma, normb;	// normalized mantissae 
+ 
+  output [`PRODWIDTH-1:0] 	prod;		// product of mantissae 
+  output			twoormore;	// Product overflowed range [1,2) 
+ 
+  // multiplier array  
+  //	(*** need a more effecient multiplier,  
+  //	designware might work, though) 
+  assign prod		= norma * normb; 
+ 
+  // did the multiply overflow the range [1,2)? 
+  assign twoormore	= prod[`PRODWIDTH-1]; 
+ 
+endmodule   
+ 
+ 
+  
+module exponent(expa, expb, expsum, twoormore, tiny); 
+ 
+  input	[`WEXPSUM-1:0]	expa, expb;	// the input exponents in 2's complement form 
+					//	to accomodate denorms that have been 
+					//	prenormalized 
+  input			twoormore;	// product is outside range [1,2) 
+ 
+  output [`WEXPSUM-1:0]	expsum;		// the sum of the exponents 
+  output		tiny;		// Result is tiny (denormalized #) 
+ 
+  // Sum the exponents, subtract the bias 
+  // 	and add 1 (twoormore) if multiply went out of [1,2) range 
+  assign expsum = expa + expb - `BIAS + twoormore; 
+ 
+  // The result is tiny if the exponent is less than 1. 
+  //	Because the exponent sum is in 2's-complement form, 
+  //	it is negative if the first bit is 1, and zero if 
+  //    all the bits are zero 
+  assign tiny	= ~|expsum[`WEXPSUM-2:0] | expsum[`WEXPSUM-1]; 
+ 
+ 
+endmodule  
+  
+ 
+ 
+  
+module normalize(prod, normalized, tiny, twoormore); 
+ 
+  // external signals 
+  input  [`PRODWIDTH-1:0]	prod;		// Product of multiplication 
+  output [`PRODWIDTH-1:0]	normalized;	// Normalized product 
+  input				tiny;		// Result is tiny (denormalized #) 
+  input				twoormore;	// Product overflowed range [1,2) 
+ 
+  // normalize product if appropriate 
+  //	There are three possible cases here: 
+  //	1) tiny and prod overfl. [1,2)	-> take the whole prod, including the leading 1 
+  //	2) tiny or prod overfl. [1,2)	-> dont take the first bit. its zero if its tiny, 
+  //				 		and it's the implied 1 if its not 
+  //	3) neither tiny nor prod overfl.-> dont take the first 2 bits, the 2nd one is the 
+  //						implied 1 
+  assign normalized = (tiny & twoormore) ? prod[`PRODWIDTH-1:0] : 
+			((tiny ^ twoormore) ? {prod[`PRODWIDTH-2:0],1'b0} : 
+			{prod[`PRODWIDTH-3:0],2'b0}); 
+ 
+endmodule   
+ 
+module shift(normalized, selectedexp, shiftprod, shiftexp, shiftloss); 
+ 
+  // external signals 
+  input	[`PRODWIDTH-1:0] normalized;	// normalized product of mantissae 
+  input	[`WEXPSUM-1:0] 	selectedexp;	// sum of exponents 
+  output [`SHIFTWIDTH-1:0] shiftprod;	// shifted and normalized product 
+  output [`WEXPSUM-1:0]	shiftexp;	// shifted exponent 
+  output		shiftloss;	// loss of accuaracy due to shifting 
+ 
+  // internal signals 
+  wire	[`WEXPSUM-1:0]	roundedexp;		// selected exponent + 1 if rounding caused overflow 
+//  wire			negexp;		// exponent is negative 
+  wire	[`WEXPSUM-1:0]	shiftamt;		// theoretical amount to shift product by 
+  wire	[`WSHIFTAMT-1:0] actualshiftamt;	// actual amount to shift product by 
+  wire			tozero;		// need more shifts than possible with width of significand 
+  wire			doshift;	// only shift if value is nonnegative 
+  wire	[`SHIFTWIDTH-1:0] preshift; 	// value before shifting, with more room to ensure lossless shifting 
+  reg	[`SHIFTWIDTH-1:0] postshift;	// value after shifting, with more room to ensure lossless shifting, used to be wire, changed for ODIN. 
+ 
+  // set up value for shifting 
+  assign preshift	= {normalized, `PRESHIFTZEROS}; 
+ 
+  // determine shift amount 
+  assign shiftamt	=  -selectedexp; 
+ 
+  // make sure shift amount is nonnegative 
+  //	If the exponent is negative, the shift amount should 
+  //	come out positive, otherwise there shouldn't be any 
+  //	shifting to be done 
+  assign doshift	= ~shiftamt[`WEXPSUM-1]; 
+   
+  // Determine if the result must be shifted more than 
+  //	will show up in the significand, even if it rounds up 
+  assign tozero		= doshift & (shiftamt > `MAXSHIFT); 
+ 
+  // If the shift is big enough to shift all the bits out of the final significand, 
+  //	then it stops being relevent how much it has been shifted. 
+  assign actualshiftamt	= tozero ? `MAXSHIFT : shiftamt[`WSHIFTAMT-1:0]; 
+ 
+  // shift significand 
+  //assign postshift	= preshift >> actualshiftamt;  
+  //We can only have constant shifts for ODIN:  
+  always @ (actualshiftamt or preshift) begin  
+		case (actualshiftamt)   
+			5'b00001: begin  
+				postshift = preshift >> 5'b00001; 
+			end 
+ 
+			5'b00010: begin  
+				postshift = preshift >> 5'b00010; 
+			end 
+ 
+			5'b00011: begin  
+				postshift = preshift >> 5'b00011; 
+			end 
+ 
+			5'b00100: begin  
+				postshift = preshift >> 5'b00100; 
+			end 
+ 
+			5'b00101: begin  
+				postshift = preshift >> 5'b00101; 
+			end 
+ 
+			5'b00110: begin  
+				postshift = preshift >> 5'b00110; 
+			end 
+ 
+			5'b00111: begin  
+				postshift = preshift >> 5'b00111; 
+			end 
+ 
+			5'b01000: begin  
+				postshift = preshift >> 5'b01000; 
+			end 
+ 
+			5'b01001: begin  
+				postshift = preshift >> 5'b01001; 
+			end 
+ 
+			5'b01010: begin  
+				postshift = preshift >> 5'b01010; 
+			end 
+ 
+			5'b01011: begin  
+				postshift = preshift >> 5'b01011; 
+			end 
+ 
+			5'b01100: begin  
+				postshift = preshift >> 5'b01100; 
+			end 
+ 
+			5'b01101: begin  
+				postshift = preshift >> 5'b01101; 
+			end 
+ 
+			5'b01110: begin  
+				postshift = preshift >> 5'b01110; 
+			end 
+ 
+			5'b01111: begin  
+				postshift = preshift >> 5'b01111; 
+			end 
+ 
+			5'b10000: begin  
+				postshift = preshift >> 5'b10000; 
+			end 
+ 
+			5'b10001: begin  
+				postshift = preshift >> 5'b10001; 
+			end 
+ 
+			5'b10010: begin  
+				postshift = preshift >> 5'b10010; 
+			end 
+ 
+			5'b10011: begin  
+				postshift = preshift >> 5'b10011; 
+			end 
+ 
+			5'b10100: begin  
+				postshift = preshift >> 5'b10100; 
+			end 
+ 
+			5'b10101: begin  
+				postshift = preshift >> 5'b10101; 
+			end 
+ 
+			5'b10110: begin  
+				postshift = preshift >> 5'b10110; 
+			end 
+ 
+			5'b10111: begin  
+				postshift = preshift >> 5'b10111; 
+			end 
+ 
+			5'b11000: begin  
+				postshift = preshift >> 5'b11000; 
+			end 
+ 
+			5'b11001: begin  
+				postshift = preshift >> 5'b11001; 
+			end 
+ 
+			5'b11010: begin  
+				postshift = preshift >> 5'b11010; 
+			end 
+ 
+			5'b11011: begin  
+				postshift = preshift >> 5'b11011; 
+			end 
+ 
+			5'b11100: begin  
+				postshift = preshift >> 5'b11100; 
+			end 
+ 
+			5'b11101: begin  
+				postshift = preshift >> 5'b11101; 
+			end 
+ 
+			5'b11110: begin  
+				postshift = preshift >> 5'b11110; 
+			end 
+ 
+			5'b11111: begin  
+				postshift = preshift >> 5'b11111; 
+			end  
+		  
+			default: begin  
+				postshift = preshift;  
+			end  
+		endcase  
+	end 
+ 
+ 
+  // assign appropriate significand 
+  assign shiftprod	= doshift ? postshift :	preshift; 
+ 
+  // determine if any bits were lost from the shift 
+  //assign shiftloss	= tozero | (negexp & |postshift[`WSIG-1:0]);  
+  assign shiftloss	= tozero | (doshift & |postshift[`SHIFTWIDTH-`PRODWIDTH-1:0]);  
+ 
+  // assign appropriate exponent 
+  assign shiftexp	= doshift ? 0 : selectedexp;   
+ 
+endmodule   
+  
+ 
+ 
+module round(shiftprod, shiftexp, shiftloss, roundprod, roundexp, roundmode,  
+		sign, tiny, inexact, overflow, stilltiny, denormround); 
+ 
+  // external signals 
+  input	[`SHIFTWIDTH-1:0] shiftprod;	// normalized and shifted product of mantissae 
+  input [`WEXPSUM-1:0]	shiftexp;	// shifted exponent 
+  input			shiftloss;	// bits were lost in the shifting process 
+  output [`WSIG-1:0] 	roundprod;	// rounded floating-point product 
+  output [`WEXP-1:0] 	roundexp;	// rounded exponent 
+  input  [1:0] 		roundmode;	// 00 = RN; 01 = RZ; 10 = RP; 11 = RM 
+  input			sign;		// sign bit for rounding mode direction 
+  input			tiny;		// denormalized number after rounding 
+  output		inexact;	// rounding occured 
+  output		overflow;	// overflow occured 
+  output		stilltiny;	// Result is tiny (denormalized #) after rounding 
+  output		denormround;	// result was rounded only because it was a denormalized number 
+ 
+  // internal signals 
+  wire			roundzero;	// rounding towards zero 
+  wire			roundinf;	// rounding towards infinity 
+  wire 			stickybit;	// there one or more 1 bits in the LS bits 
+  wire			denormsticky;	// sticky bit if this weren't a denorm 
+  wire [`WSIG-1:0] 	MSBits;		// most significant bits 
+  wire [`WSIG:0] 	MSBitsplus1; 	// most significant bits plus 1 
+					//	for rounding purposes. needs to be one 
+					//	bit bigger for overflow 
+  wire [1:0]		roundbits;	// bits used to compute rounding decision 
+  wire 			rounddecision;	// round up 
+  wire			roundoverflow;	// rounding overflow occured 
+  wire [`WEXPSUM-1:0]	tempexp;	// exponent after rounding 
+ 
+  //reduce round mode to three modes 
+  //	dont need round nearest, it is implied 
+  //	by roundzero and roundinf being false 
+  //assign roundnearest 	= ~&roundmode; 
+//  assign roundzero	= &roundmode || (^roundmode && (roundmode[0] || sign)); 
+  assign roundzero	= (~roundmode[1] & roundmode[0]) | (roundmode[1] & (roundmode[0] ^ sign)); 
+  assign roundinf	= roundmode[1] & ~(sign ^ roundmode[0]); 
+ 
+  // pull out the most significant bits for the product 
+  assign MSBits = shiftprod[`SHIFTWIDTH-1:`SHIFTWIDTH-`WSIG]; 
+ 
+  // add a 1 to the end of MSBits for round up 
+  assign MSBitsplus1 = MSBits + 1; 
+ 
+  // pull out the last of the most significant bits  
+  //	and the first of the least significant bits 
+  //	to use for calculating the rounding decision 
+  assign roundbits[1:0]	= shiftprod[`SHIFTWIDTH-`WSIG:`SHIFTWIDTH-`WSIG-1]; 
+ 
+  // calculate the sticky bit. Are any of the least significant bits 1? 
+  //	also: was anything lost while shifting? 
+  // *** Optimization: some of these bits are already checked from the shiftloss *** 
+  // *** Optimization: stickybit can be calculated from denormsticky  
+  //			with only 1 more gate, instead of duplication of effort *** 
+  assign stickybit 	= |shiftprod[`SHIFTWIDTH-`WSIG-2:0] | shiftloss; 
+  assign denormsticky 	= |shiftprod[`SHIFTWIDTH-`WSIG-3:0] | shiftloss; 
+ 
+  // Compute rounding decision 
+  assign rounddecision	= ~roundzero & 	( (roundbits[0]	& (roundinf | roundbits[1])) 
+					| (stickybit	& (roundinf | roundbits[0])) 
+					); 
+ 
+  // Was this only rounded because it is a denorm? 
+  assign denormround	= tiny & rounddecision & ~denormsticky & roundbits[0]; 
+ 
+  // detect rounding overflow. it only overflows if: 
+  // 1) the top bit of MSBitsplus1 is 1 
+  // 2) it decides to round up 
+  assign roundoverflow	= MSBitsplus1[`WSIG] & rounddecision; 
+ 
+  // assign significand (and postnormalize) 
+  //  rounddecision decides whether to use msbits+1 or msbits. 
+  //  if using msbits+1 and there is an rounding overflow (i.e. result=2), 
+  //  then should return 1 instead 
+  assign roundprod = rounddecision ?  
+ 			(roundoverflow ? 0 :  
+			MSBitsplus1[`WSIG-1:0]) : 
+			MSBits; 
+ 
+  // detect inexact 
+  assign inexact	= rounddecision | stickybit | roundbits[0]; 
+ 
+  // compensate for a rounding overflow 
+  assign tempexp 	= roundoverflow + shiftexp; 
+ 
+  // check for overflow in exponent 
+  //	overflow occured if the number 
+  //	is too large to be represented, 
+  //	i.e. can't fit in `WEXP bits, or 
+  //	all `WEXP bits are 1's 
+  assign overflow	= &tempexp[`WEXP-1:0] | |tempexp[`WEXPSUM-1:`WEXP]; 
+ 
+  // two possible cases: 
+  //	1) Overflow: then exponent doesnt matter, 
+  //	it will be changed to infinity anyway 
+  //	2) not overflow: the leading bits will be 0 
+  assign roundexp	= tempexp[`WEXP-1:0]; 
+ 
+  // The result is tiny if the exponent is less than 1. 
+  //	Because the exponent sum is NOT in 2's-complement form, 
+  //	it is only less than one if its is zero, i.e. 
+  //    all the bits are 0 
+  assign stilltiny	= ~|roundexp; 
+ 
+endmodule  
+ 
+ 
+module flag (invalid, overflow, inexact, underflow, tiny, specialcase, flags); 
+ 
+  input			invalid;	// invalid operation 
+  input			overflow;	// the result was too large 
+  input			inexact;	// The result was rounded 
+  input			specialcase;	// Using special result, shouldn't throw flags 
+  input			underflow;	// Underflow detected 
+  input			tiny;		// The result is tiny 
+ 
+  output [`WFLAG-1:0]	flags;		// DIVZERO, INVALID, INEXACT,  
+					// OVERFLOW, UNDERFLOW (defined in constant.v) 
+ 
+  // flags 
+  assign flags[`DIVZERO]	= 1'b0; 
+  assign flags[`INVALID]	= invalid; 
+  assign flags[`INEXACT]	= ~specialcase & (inexact | underflow | overflow); 
+  assign flags[`OVERFLOW]	= ~specialcase & overflow; 
+  assign flags[`UNDERFLOW]	= tiny; //~specialcase & tiny & underflow & ~overflow; 
+ 
+endmodule  
+ 
+module assemble(roundprod, special, y, sign, specialsign,  
+		shiftexp, specialcase, specialsigncase, 
+		roundmode, overflow); 
+ 
+  // external signals 
+  input	[`WSIG-1:0] 	roundprod;	// shifted, rounded and normalized  
+					// 	product of mantissae 
+  input	[`WIDTH-2:0]	special;	// special case product + exponent 
+  output [`WIDTH-1:0] 	y;		// floating-point product 
+  input			sign;		// sign of product (+ = 0, - = 1) 
+  input			specialsign;	// special case sign 
+  input	[`WEXP-1:0] 	shiftexp;	// shifted exponent 
+  input			specialcase;	// this is a special case 
+  input			specialsigncase; // use the special case sign 
+  input	[1:0]		roundmode;	// rounding mode information extracted from control field   
+  input			overflow;	// overflow detected 
+   
+  // internal signals 
+  wire	[`WIDTH-2:0]	rounded;	// final product + exponent 
+  wire	[`WIDTH-2:0]	overflowvalue;	// product + exponent for overflow condition 
+  wire			undenormed;	// the result was denormalized before rounding, but rounding  
+					//	caused it to become a small normalized number. 
+ 
+  // SET UP ROUNDED PRODUCT + EXPONENT 
+   
+  // assign significand 
+  assign rounded[`WSIG-1:0]	= roundprod; 
+ 
+  // assign exponent 
+  assign rounded[`WIDTH-2:`WIDTH-`WEXP-1] = shiftexp; 
+ 
+  // SET UP OVERFLOW CONDITION 
+  assign overflowvalue[`WIDTH-2:0] = roundmode[1] ?  
+				(sign ^ roundmode[0] ? `CONSTLARGEST : `CONSTINFINITY) : 
+				(roundmode[0] ? `CONSTLARGEST: `CONSTINFINITY); 
+ 
+  // FINAL PRODUCT ASSIGN  
+ 
+  // assign sign 
+  assign y[`WIDTH-1]	= specialsigncase ? specialsign : sign; 
+ 
+  // assign product vs special vs overflowed 
+  assign y[`WIDTH-2:0]	= specialcase ? special[`WIDTH-2:0] : 
+				(overflow ? overflowvalue[`WIDTH-2:0] : 
+				rounded[`WIDTH-2:0]); 
+ 
+endmodule 
diff --git vtr_flow/benchmarks/verilog/aes_yosys.v vtr_flow/benchmarks/verilog/aes_yosys.v
new file mode 100644
index 0000000..e50e464
--- /dev/null
+++ vtr_flow/benchmarks/verilog/aes_yosys.v
@@ -0,0 +1,1347 @@
+(* top *)
+module aes(input USER_CLOCK, input GPIO_SW_C, output GPIO_LED_0);
+
+localparam CHAIN = 3;
+localparam LATENCY = 20; 
+
+wire clk_IBUF;
+wire clr;
+
+assign clk_IBUF = USER_CLOCK;
+assign clr = GPIO_SW_C;
+
+wire clk;
+bufgctrl b(.i({1'bx, clk_IBUF}), .s(2'bxx), .ce(2'bxx), .ignore(2'bxx), .o(clk));
+
+
+//module lfsr128(clk, reset, out);
+wire [127:0] dat_lfsr;
+lfsr128 #(1) t(clk, clr, dat_lfsr);
+
+wire [127:0] dat_enc[CHAIN-1:0];
+wire [127:0] dat_dec[CHAIN-1:0];
+
+genvar i;
+generate
+for (i = 0; i < CHAIN; i = i+1) begin : GEN0
+
+wire [127:0] dat_e;
+wire [127:0] dat_d;
+wire [127:0] key;
+wire [127:0] inv_key;
+
+if (i == 0)
+	assign dat_e = dat_lfsr;
+else
+	assign dat_e = dat_enc[i-1];
+
+lfsr128 #(i+2) k(clk, clr, key);
+
+//module aes_128 (clk,clr,dat_in,dat_out,key,inv_key);
+aes_128 #(LATENCY) e(clk,clr,dat_e,dat_enc[i],key,inv_key);
+
+if (i == CHAIN-1)
+	assign dat_d = dat_enc[i];
+else
+	assign dat_d = dat_dec[i+1];
+
+wire [127:0] inv_key_d;
+if (i == (CHAIN-1))
+	assign inv_key_d = inv_key;
+else begin
+	genvar j;
+	for (j = 0; j < 128; j = j+1) begin : GEN1
+		reg [LATENCY*2*(CHAIN-1-i)-1:0] dly;
+		always @(posedge clk) dly <= {dly[LATENCY*2*(CHAIN-1-i)-2:0], inv_key[j]};
+		assign inv_key_d[j] = dly[LATENCY*2*(CHAIN-1-i)-1];
+	end
+end
+
+
+//module inv_aes_128 (clk,clr,dat_in,dat_out,inv_key);
+inv_aes_128 #(LATENCY) d(clk,clr,dat_d,dat_dec[i],inv_key_d);
+
+end
+endgenerate
+
+wire [127:0] dat_lfsr_d;
+reg [LATENCY*2*CHAIN-1:0] clr_d;
+always @(posedge clk) clr_d <= {clr_d[LATENCY*2*CHAIN-2:0], clr};
+lfsr128 #(1) td(clk, clr_d[LATENCY*2*CHAIN-1], dat_lfsr_d);
+
+assign GPIO_LED_0 = (dat_dec[0] === dat_lfsr_d);
+
+endmodule
+
+// Copyright 2007 Altera Corporation. All rights reserved.  
+// Altera products are protected under numerous U.S. and foreign patents, 
+// maskwork rights, copyrights and other intellectual property laws.  
+//
+// This reference design file, and your use thereof, is subject to and governed
+// by the terms and conditions of the applicable Altera Reference Design 
+// License Agreement (either as signed by you or found at www.altera.com).  By
+// using this reference design file, you indicate your acceptance of such terms
+// and conditions between you and Altera Corporation.  In the event that you do
+// not agree with such terms and conditions, you may not use the reference 
+// design file and please promptly destroy any copies you have made.
+//
+// This reference design file is being provided on an "as-is" basis and as an 
+// accommodation and therefore all warranties, representations or guarantees of 
+// any kind (whether express, implied or statutory) including, without 
+// limitation, warranties of merchantability, non-infringement, or fitness for
+// a particular purpose, are specifically disclaimed.  By making this reference
+// design file available, Altera expressly does not recommend, suggest or 
+// require that this reference design file be used in combination with any 
+// other product not provided by Altera.
+/////////////////////////////////////////////////////////////////////////////
+
+// baeckler - 03-07-2006
+
+// pipelined AES / aes encrypt and decrypt units
+
+////////////////////////////////////
+// Encrypt using 128 bit key
+////////////////////////////////////
+module aes_128 (clk,clr,dat_in,dat_out,key,inv_key);
+input clk,clr;
+input [127:0] dat_in;
+input [127:0] key;
+output [127:0] dat_out;
+output [127:0] inv_key;
+
+parameter LATENCY = 10; // currently allowed 0,10
+localparam ROUND_LATENCY = LATENCY/10; //(LATENCY == 10 ? 1 : 0);
+wire [127:0] start1,start2,start3,start4,start5;
+wire [127:0] start6,start7,start8,start9,start10;
+wire [127:0] key1,key2,key3,key4,key5;
+wire [127:0] key6,key7,key8,key9,key10;
+
+assign start1 = dat_in ^ key;
+assign key1 = key;
+
+    aes_round_128 r1 (
+        .clk(clk),.clr(clr),
+        .dat_in(start1),.key_in(key1),
+        .dat_out(start2),.key_out(key2),
+        .skip_mix_col(1'b0),
+        .rconst(8'h01));
+        defparam r1 .LATENCY = ROUND_LATENCY;
+    aes_round_128 r2 (
+        .clk(clk),.clr(clr),
+        .dat_in(start2),.key_in(key2),
+        .dat_out(start3),.key_out(key3),
+        .skip_mix_col(1'b0),
+        .rconst(8'h02));
+        defparam r2 .LATENCY = ROUND_LATENCY;
+    aes_round_128 r3 (
+        .clk(clk),.clr(clr),
+        .dat_in(start3),.key_in(key3),
+        .dat_out(start4),.key_out(key4),
+        .skip_mix_col(1'b0),
+        .rconst(8'h04));
+        defparam r3 .LATENCY = ROUND_LATENCY;
+    aes_round_128 r4 (
+        .clk(clk),.clr(clr),
+        .dat_in(start4),.key_in(key4),
+        .dat_out(start5),.key_out(key5),
+        .skip_mix_col(1'b0),
+        .rconst(8'h08));
+        defparam r4 .LATENCY = ROUND_LATENCY;
+    aes_round_128 r5 (
+        .clk(clk),.clr(clr),
+        .dat_in(start5),.key_in(key5),
+        .dat_out(start6),.key_out(key6),
+        .skip_mix_col(1'b0),
+        .rconst(8'h10));
+        defparam r5 .LATENCY = ROUND_LATENCY;
+    aes_round_128 r6 (
+        .clk(clk),.clr(clr),
+        .dat_in(start6),.key_in(key6),
+        .dat_out(start7),.key_out(key7),
+        .skip_mix_col(1'b0),
+        .rconst(8'h20));
+        defparam r6 .LATENCY = ROUND_LATENCY;
+    aes_round_128 r7 (
+        .clk(clk),.clr(clr),
+        .dat_in(start7),.key_in(key7),
+        .dat_out(start8),.key_out(key8),
+        .skip_mix_col(1'b0),
+        .rconst(8'h40));
+        defparam r7 .LATENCY = ROUND_LATENCY;
+    aes_round_128 r8 (
+        .clk(clk),.clr(clr),
+        .dat_in(start8),.key_in(key8),
+        .dat_out(start9),.key_out(key9),
+        .skip_mix_col(1'b0),
+        .rconst(8'h80));
+        defparam r8 .LATENCY = ROUND_LATENCY;
+    aes_round_128 r9 (
+        .clk(clk),.clr(clr),
+        .dat_in(start9),.key_in(key9),
+        .dat_out(start10),.key_out(key10),
+        .skip_mix_col(1'b0),
+        .rconst(8'h1b));
+        defparam r9 .LATENCY = ROUND_LATENCY;
+    aes_round_128 r10 (
+        .clk(clk),.clr(clr),
+        .dat_in(start10),.key_in(key10),
+        .dat_out(dat_out),.key_out(inv_key),
+        .skip_mix_col(1'b1),
+        .rconst(8'h36));
+        defparam r10 .LATENCY = ROUND_LATENCY;
+endmodule
+
+////////////////////////////////////
+// Inverse (Decrypt) using 128 bit key
+////////////////////////////////////
+module inv_aes_128 (clk,clr,dat_in,dat_out,inv_key);
+input clk,clr;
+input [127:0] dat_in;
+input [127:0] inv_key;
+output [127:0] dat_out;
+
+parameter LATENCY = 10; // currently allowed 0,10
+localparam ROUND_LATENCY = LATENCY/10; //(LATENCY == 10 ? 1 : 0);
+wire [127:0] start1,start2,start3,start4,start5;
+wire [127:0] start6,start7,start8,start9,start10;
+wire [127:0] unkeyd_out,last_key;
+wire [127:0] key1,key2,key3,key4,key5;
+wire [127:0] key6,key7,key8,key9,key10;
+
+assign start1 = dat_in;
+assign key1 = inv_key;
+
+    inv_aes_round_128 r1 (
+        .clk(clk),.clr(clr),
+        .dat_in(start1),.key_in(key1),
+        .dat_out(start2),.key_out(key2),
+        .skip_mix_col(1'b1),
+        .rconst(8'h36));
+        defparam r1 .LATENCY = ROUND_LATENCY;
+    inv_aes_round_128 r2 (
+        .clk(clk),.clr(clr),
+        .dat_in(start2),.key_in(key2),
+        .dat_out(start3),.key_out(key3),
+        .skip_mix_col(1'b0),
+        .rconst(8'h1b));
+        defparam r2 .LATENCY = ROUND_LATENCY;
+    inv_aes_round_128 r3 (
+        .clk(clk),.clr(clr),
+        .dat_in(start3),.key_in(key3),
+        .dat_out(start4),.key_out(key4),
+        .skip_mix_col(1'b0),
+        .rconst(8'h80));
+        defparam r3 .LATENCY = ROUND_LATENCY;
+    inv_aes_round_128 r4 (
+        .clk(clk),.clr(clr),
+        .dat_in(start4),.key_in(key4),
+        .dat_out(start5),.key_out(key5),
+        .skip_mix_col(1'b0),
+        .rconst(8'h40));
+        defparam r4 .LATENCY = ROUND_LATENCY;
+    inv_aes_round_128 r5 (
+        .clk(clk),.clr(clr),
+        .dat_in(start5),.key_in(key5),
+        .dat_out(start6),.key_out(key6),
+        .skip_mix_col(1'b0),
+        .rconst(8'h20));
+        defparam r5 .LATENCY = ROUND_LATENCY;
+    inv_aes_round_128 r6 (
+        .clk(clk),.clr(clr),
+        .dat_in(start6),.key_in(key6),
+        .dat_out(start7),.key_out(key7),
+        .skip_mix_col(1'b0),
+        .rconst(8'h10));
+        defparam r6 .LATENCY = ROUND_LATENCY;
+    inv_aes_round_128 r7 (
+        .clk(clk),.clr(clr),
+        .dat_in(start7),.key_in(key7),
+        .dat_out(start8),.key_out(key8),
+        .skip_mix_col(1'b0),
+        .rconst(8'h08));
+        defparam r7 .LATENCY = ROUND_LATENCY;
+    inv_aes_round_128 r8 (
+        .clk(clk),.clr(clr),
+        .dat_in(start8),.key_in(key8),
+        .dat_out(start9),.key_out(key9),
+        .skip_mix_col(1'b0),
+        .rconst(8'h04));
+        defparam r8 .LATENCY = ROUND_LATENCY;
+    inv_aes_round_128 r9 (
+        .clk(clk),.clr(clr),
+        .dat_in(start9),.key_in(key9),
+        .dat_out(start10),.key_out(key10),
+        .skip_mix_col(1'b0),
+        .rconst(8'h02));
+        defparam r9 .LATENCY = ROUND_LATENCY;
+    inv_aes_round_128 r10 (
+        .clk(clk),.clr(clr),
+        .dat_in(start10),.key_in(key10),
+        .dat_out(unkeyd_out),.key_out(last_key),
+        .skip_mix_col(1'b0),
+        .rconst(8'h01));
+        defparam r10 .LATENCY = ROUND_LATENCY;
+assign dat_out = last_key ^ unkeyd_out;
+
+endmodule
+
+// Copyright 2007 Altera Corporation. All rights reserved.  
+// Altera products are protected under numerous U.S. and foreign patents, 
+// maskwork rights, copyrights and other intellectual property laws.  
+//
+// This reference design file, and your use thereof, is subject to and governed
+// by the terms and conditions of the applicable Altera Reference Design 
+// License Agreement (either as signed by you or found at www.altera.com).  By
+// using this reference design file, you indicate your acceptance of such terms
+// and conditions between you and Altera Corporation.  In the event that you do
+// not agree with such terms and conditions, you may not use the reference 
+// design file and please promptly destroy any copies you have made.
+//
+// This reference design file is being provided on an "as-is" basis and as an 
+// accommodation and therefore all warranties, representations or guarantees of 
+// any kind (whether express, implied or statutory) including, without 
+// limitation, warranties of merchantability, non-infringement, or fitness for
+// a particular purpose, are specifically disclaimed.  By making this reference
+// design file available, Altera expressly does not recommend, suggest or 
+// require that this reference design file be used in combination with any 
+// other product not provided by Altera.
+/////////////////////////////////////////////////////////////////////////////
+
+// baeckler - 03-08-2006
+
+/////////////////////////////////////////////////////////
+// one round of ENcipher and key evolve - 128 bit key
+/////////////////////////////////////////////////////////
+
+module aes_round_128 (
+	clk,clr,dat_in,dat_out,rconst,skip_mix_col,key_in,key_out
+);
+
+input clk,clr;
+input [127:0] dat_in,key_in;
+input [7:0] rconst; // lower 24 bits are 0
+input skip_mix_col; // for the final round
+output [127:0] dat_out,key_out;
+
+parameter LATENCY = 0; // currently allowable values are 0,1
+
+reg [127:0] dat_out,key_out;
+
+// internal temp vars
+wire [127:0] dat_out_i,key_out_i,sub,shft,mix;
+reg [127:0] shft_r,key_out_ir;
+
+// evolve key
+evolve_key_128 ek (.key_in(key_in),
+				.rconst(rconst),.key_out(key_out_i));
+	
+// first two LUT levels of work
+sub_bytes sb (.in(dat_in),.out(sub));
+shift_rows sr (.in(sub),.out(shft));
+
+// mid layer registers would go here, the keying
+// is awkward
+generate
+if (LATENCY<=1) begin
+	always @(shft) shft_r = shft;
+	always @(key_out_i) key_out_ir = key_out_i;
+end
+else begin
+	always @(posedge clk) shft_r = shft;
+	always @(posedge clk) key_out_ir = key_out_i;
+end
+endgenerate
+
+// second 2 LUT levels of work
+mix_columns mx (.in(shft_r),.out(mix));
+assign dat_out_i = (skip_mix_col ? shft_r : mix) ^ key_out_ir;
+
+// conditional output register
+generate
+if (LATENCY!=0) begin
+	always @(posedge clk or posedge clr) begin
+		if (clr) dat_out <= 128'b0;
+		else dat_out <= dat_out_i;
+	end
+	always @(posedge clk or posedge clr) begin
+		if (clr) key_out <= 128'b0;
+		else key_out <= key_out_ir;
+	end
+end
+else begin
+	always @(dat_out_i) dat_out = dat_out_i;
+	always @(key_out_ir) key_out = key_out_ir;
+end
+endgenerate
+endmodule
+
+/////////////////////////////////////////////////////////
+// one round of DEcipher and key evolve - 128 bit key
+/////////////////////////////////////////////////////////
+
+module inv_aes_round_128 (
+	clk,clr,dat_in,dat_out,rconst,skip_mix_col,key_in,key_out
+);
+
+input clk,clr;
+input [127:0] dat_in,key_in;
+input [7:0] rconst; // lower 24 bits are 0
+input skip_mix_col; // for the final round
+output [127:0] dat_out,key_out;
+
+parameter LATENCY = 0; // currently allowable values are 0,1
+
+reg [127:0] dat_out,key_out;
+
+// internal temp vars
+wire [127:0] keyd_dat,dat_out_i,key_out_i,mixed,shft;
+reg [127:0] middle_r,key_out_ir;
+
+// inverse evolve key (for the next round)
+inv_evolve_key_128 ek (.key_in(key_in),
+				.rconst(rconst),.key_out(key_out_i));
+
+// key the input data
+assign keyd_dat = dat_in ^ key_in;
+
+// optional skip of the mix columns step
+inv_mix_columns mx (.in(keyd_dat),.out(mixed));
+//assign middle = (skip_mix_col ? keyd_dat : mixed);
+
+generate
+if (LATENCY<=1) begin
+	always @(mixed) middle_r = (skip_mix_col ? keyd_dat : mixed);
+	always @(key_out_i) key_out_ir = key_out_i;
+end
+else begin
+	always @(posedge clk) middle_r = (skip_mix_col ? keyd_dat : mixed);
+	always @(posedge clk) key_out_ir = key_out_i;
+end
+endgenerate
+
+// second 2 levels of work
+inv_shift_rows sr (.in(middle_r),.out(shft));
+inv_sub_bytes sb (.in(shft),.out(dat_out_i));
+
+// conditional output register
+generate
+if (LATENCY!=0) begin
+	always @(posedge clk or posedge clr) begin
+		if (clr) dat_out <= 128'b0;
+		else dat_out <= dat_out_i;
+	end
+	always @(posedge clk or posedge clr) begin
+		if (clr) key_out <= 128'b0;
+		else key_out <= key_out_ir;
+	end
+end
+else begin
+	always @(dat_out_i) dat_out = dat_out_i;
+	always @(key_out_ir) key_out = key_out_ir;
+end
+endgenerate
+endmodule
+
+// Copyright 2007 Altera Corporation. All rights reserved.  
+// Altera products are protected under numerous U.S. and foreign patents, 
+// maskwork rights, copyrights and other intellectual property laws.  
+//
+// This reference design file, and your use thereof, is subject to and governed
+// by the terms and conditions of the applicable Altera Reference Design 
+// License Agreement (either as signed by you or found at www.altera.com).  By
+// using this reference design file, you indicate your acceptance of such terms
+// and conditions between you and Altera Corporation.  In the event that you do
+// not agree with such terms and conditions, you may not use the reference 
+// design file and please promptly destroy any copies you have made.
+//
+// This reference design file is being provided on an "as-is" basis and as an 
+// accommodation and therefore all warranties, representations or guarantees of 
+// any kind (whether express, implied or statutory) including, without 
+// limitation, warranties of merchantability, non-infringement, or fitness for
+// a particular purpose, are specifically disclaimed.  By making this reference
+// design file available, Altera expressly does not recommend, suggest or 
+// require that this reference design file be used in combination with any 
+// other product not provided by Altera.
+/////////////////////////////////////////////////////////////////////////////
+
+// baeckler - 03-08-2006
+
+//////////////////////////////////////////////
+// Key word rotation
+//////////////////////////////////////////////
+module rot_word (in,out);
+input [31:0] in;
+output [31:0] out;
+wire [31:0] out;
+assign out = {in[23:0],in[31:24]};
+endmodule
+
+//////////////////////////////////////////////
+// Key sub word - borrowing sbox from sub_bytes
+//////////////////////////////////////////////
+module sub_word (in,out);
+input [31:0] in;
+output [31:0] out;
+wire [31:0] out;
+sbox s0 (.in(in[7:0]),.out(out[7:0]));
+sbox s1 (.in(in[15:8]),.out(out[15:8]));
+sbox s2 (.in(in[23:16]),.out(out[23:16]));
+sbox s3 (.in(in[31:24]),.out(out[31:24]));
+endmodule
+
+//////////////////////////////////////////////
+// Hard XOR - 6 input 32 wide
+//   to prevent any creative dupe extraction
+//   that would hurt the depth.
+//////////////////////////////////////////////
+module xor6_32 (a,b,c,d,e,f,o);
+input [31:0] a,b,c,d,e,f;
+output [31:0] o;
+wire [31:0] o;
+
+genvar i;
+generate
+    for (i=0; i<32; i=i+1)
+	begin: x
+//		stratixii_lcell_comb s (.dataa (a[i]),.datab (b[i]),.datac (c[i]),
+//			.datad (d[i]),.datae (e[i]),.dataf (f[i]),.datag(1'b1),
+//			.cin(1'b1),.sharein(1'b0),.sumout(),.cout(),.shareout(),
+//			.combout(o[i]));
+//		defparam s .lut_mask = 64'h6996966996696996;
+//		defparam s .shared_arith = "off";
+//		defparam s .extended_lut = "off";
+//		LUT6 #(.INIT(64'h6996966996696996)) s (.I0(a[i]), .I1(b[i]), .I2(c[i]), .I3(d[i]), .I4(e[i]), .I5(f[i]), .O(o[i]));
+		assign o[i] = ^{a[i],b[i],c[i],d[i],e[i],f[i]};
+	end
+endgenerate
+endmodule
+
+//////////////////////////////////////////////
+// Key evolution step for 128 bit key
+//////////////////////////////////////////////
+module evolve_key_128 (key_in,rconst,key_out);
+
+input [127:0] key_in;
+input [7:0] rconst;		// the low order 24 bits are all 0						
+
+output [127:0] key_out;
+wire [127:0] key_out;
+
+wire [31:0] rot_key;
+wire [31:0] subrot_key;
+
+rot_word rw (.in (key_in[31:0]), .out(rot_key));
+sub_word sw (.in (rot_key), .out(subrot_key));
+
+// make it clear that the desired implementation is 
+// a flat XOR LUT bank, not a string of 2-XORs with
+// taps.  Better speed.  Very little area cost.
+xor6_32 q (.o(key_out[127:96]),.a({rconst,24'b0}),.b(subrot_key),.c(key_in[127:96]),
+				.d(32'b0),.e(32'b0),.f(32'b0));
+xor6_32 r (.o(key_out[95:64]),.a({rconst,24'b0}),.b(subrot_key),.c(key_in[127:96]),
+				.d(key_in[95:64]),.e(32'b0),.f(32'b0));
+xor6_32 s (.o(key_out[63:32]),.a({rconst,24'b0}),.b(subrot_key),.c(key_in[127:96]),
+				.d(key_in[95:64]),.e(key_in[63:32]),.f(32'b0));
+xor6_32 t (.o(key_out[31:0]),.a({rconst,24'b0}),.b(subrot_key),.c(key_in[127:96]),
+				.d(key_in[95:64]),.e(key_in[63:32]),.f(key_in[31:0]));
+
+endmodule
+
+//////////////////////////////////////////////
+// Key evolution step for 256 bit key
+//////////////////////////////////////////////
+module evolve_key_256 (key_in,rconst,key_out);
+
+parameter KEY_EVOLVE_TYPE = 0;
+
+input [255:0] key_in;
+input [7:0] rconst;		// the low order 24 bits are all 0						
+
+output [255:0] key_out;
+wire [255:0] key_out;
+
+wire [31:0] rot_key;
+wire [31:0] subrot_key;
+
+wire [127:0] kin_u,kin_l;
+assign {kin_u,kin_l} = key_in;
+ 
+	generate 
+	if (KEY_EVOLVE_TYPE == 0) begin
+		
+		// full evolution
+
+		rot_word rw (.in (key_in[31:0]), .out(rot_key));
+		sub_word sw (.in (rot_key), .out(subrot_key));
+
+		// make it clear that the desired implementation is 
+		// a flat XOR LUT bank, not a string of 2-XORs with
+		// taps.  Better speed.  Very little area cost.
+		xor6_32 q (.o(key_out[127:96]),.a({rconst,24'b0}),.b(subrot_key),.c(kin_u[127:96]),
+						.d(32'b0),.e(32'b0),.f(32'b0));
+		xor6_32 r (.o(key_out[95:64]),.a({rconst,24'b0}),.b(subrot_key),.c(kin_u[127:96]),
+						.d(kin_u[95:64]),.e(32'b0),.f(32'b0));
+		xor6_32 s (.o(key_out[63:32]),.a({rconst,24'b0}),.b(subrot_key),.c(kin_u[127:96]),
+						.d(kin_u[95:64]),.e(kin_u[63:32]),.f(32'b0));
+		xor6_32 t (.o(key_out[31:0]),.a({rconst,24'b0}),.b(subrot_key),.c(kin_u[127:96]),
+						.d(kin_u[95:64]),.e(kin_u[63:32]),.f(kin_u[31:0]));
+	end
+	else begin
+		
+		// Quickie evolution 
+
+		sub_word sw (.in (key_in[31:0]), .out(subrot_key));
+	
+		// make it clear that the desired implementation is 
+		// a flat XOR LUT bank, not a string of 2-XORs with
+		// taps.  Better speed.  Very little area cost.
+		xor6_32 q (.o(key_out[127:96]),.a(32'b0),.b(subrot_key),.c(kin_u[127:96]),
+						.d(32'b0),.e(32'b0),.f(32'b0));
+		xor6_32 r (.o(key_out[95:64]),.a(32'b0),.b(subrot_key),.c(kin_u[127:96]),
+						.d(kin_u[95:64]),.e(32'b0),.f(32'b0));
+		xor6_32 s (.o(key_out[63:32]),.a(32'b0),.b(subrot_key),.c(kin_u[127:96]),
+						.d(kin_u[95:64]),.e(kin_u[63:32]),.f(32'b0));
+		xor6_32 t (.o(key_out[31:0]),.a(32'b0),.b(subrot_key),.c(kin_u[127:96]),
+						.d(kin_u[95:64]),.e(kin_u[63:32]),.f(kin_u[31:0]));
+	end
+	endgenerate
+	
+	assign key_out[255:128] = kin_l;
+
+endmodule
+
+//////////////////////////////////////////////
+// Inverse key evolution step for 128 bit key
+//		Inverse key evolution isn't really
+//		discussed in the original submission
+//		of the FIPS specs, other than 
+//		the mention that it is possible and 
+//		necessary for rekey during decrypt.
+//////////////////////////////////////////////
+module inv_evolve_key_128 (key_in,rconst,key_out);
+
+input [127:0] key_in;
+input [7:0] rconst;		// the low order 24 bits are all 0						
+
+output [127:0] key_out;
+wire [127:0] key_out;
+
+// change it to a more convenient format.
+wire [31:0] a,b,c,d;
+assign {a,b,c,d} = key_in;
+wire [31:0] w,x,y,z;
+assign key_out = {w,x,y,z};
+
+// most of the bits are easy to get by XOR cancellation
+assign z = c ^ d;
+assign y = b ^ c;
+assign x = a ^ b;
+
+// One word is harder than the others
+wire [31:0] rot_key;
+wire [31:0] subrot_key;
+rot_word rw (.in (z), .out(rot_key));
+sub_word sw (.in (rot_key), .out(subrot_key));
+assign w = a ^ subrot_key ^ {rconst,24'b0};
+
+endmodule
+
+//////////////////////////////////////////////
+// Inverse key evolution step for 256 bit key
+//////////////////////////////////////////////
+module inv_evolve_key_256 (key_in,rconst,key_out);
+
+parameter KEY_EVOLVE_TYPE = 0;
+
+input [255:0] key_in;
+input [7:0] rconst;		// the low order 24 bits are all 0						
+
+output [255:0] key_out;
+wire [255:0] key_out;
+
+// change it to a more convenient format.
+wire [31:0] a,b,c,d;
+assign {a,b,c,d} = key_in[127:0];
+wire [31:0] w,x,y,z;
+assign key_out = {{w,x,y,z},key_in[255:128]};
+
+// most of the bits are easy to get by XOR cancellation
+assign z = c ^ d;
+assign y = b ^ c;
+assign x = a ^ b;
+
+// One word is harder than the others
+wire [31:0] rot_key;
+wire [31:0] subrot_key;
+
+generate
+	if (KEY_EVOLVE_TYPE == 0) begin
+		rot_word rw (.in (key_in[159:128]), .out(rot_key));
+		sub_word sw (.in (rot_key), .out(subrot_key));
+		assign w = a ^ subrot_key ^ {rconst,24'b0};
+	end
+	else begin
+		sub_word sw (.in (key_in[159:128]), .out(subrot_key));
+		assign w = a ^ subrot_key;
+	end
+endgenerate
+
+endmodule
+
+////////////////////////////////////////////////////
+// Quick sanity checker testbench 
+//    verify the inverse property of the key evolves
+////////////////////////////////////////////////////
+module evolve_test ();
+reg [255:0] key;
+wire [127:0] fd;
+wire [127:0] bk;
+wire [255:0] fd1,fd2;
+wire [255:0] bk1,bk2;
+
+reg fail = 0;
+reg [7:0] rconst;
+
+evolve_key_128 e (.key_in(key[127:0]),.rconst(rconst),.key_out(fd));
+inv_evolve_key_128 i (.key_in(fd),.rconst(rconst),.key_out(bk));
+
+evolve_key_256 e1 (.key_in(key),.rconst(rconst),.key_out(fd1));
+inv_evolve_key_256 i1 (.key_in(fd1),.rconst(rconst),.key_out(bk1));
+	defparam e1 .KEY_EVOLVE_TYPE = 0;
+	defparam i1 .KEY_EVOLVE_TYPE = 0;
+
+evolve_key_256 e2 (.key_in(key),.rconst(rconst),.key_out(fd2));
+inv_evolve_key_256 i2 (.key_in(fd2),.rconst(rconst),.key_out(bk2));
+	defparam e2 .KEY_EVOLVE_TYPE = 1;
+	defparam i2 .KEY_EVOLVE_TYPE = 1;
+
+initial begin 
+	key = 0;
+	fail = 0;
+	rconst = 0;
+	#100000
+	if (!fail) $display ("PASS");
+	$stop();
+end
+
+always begin
+	#50 key = {$random,$random,$random,$random,$random,$random,$random,$random};
+		rconst = $random;
+	#50 if (bk != key[127:0]) begin
+		$display ("Mismatch in 128 mode at time %d",$time);
+		fail = 1;
+	end
+	if (bk1 != key) begin
+		$display ("Mismatch in 256 type 0 mode at time %d",$time);
+		fail = 1;
+	end
+	if (bk2 != key) begin
+		$display ("Mismatch in 256 type 1 mode at time %d",$time);
+		fail = 1;
+	end
+end
+endmodule
+
+module lfsr128(clk, reset, out);
+
+parameter INIT = 128'b0;
+
+input clk;
+input reset;
+output [127:0] out;
+reg [127:0] out;
+
+wire feedback = out[127] ^ out[125] ^ out[100] ^ out[98];
+
+always @(posedge clk)
+if (reset)
+	out <= INIT;
+else
+	out <= { out[126:0], feedback };
+
+endmodule
+
+// Copyright 2007 Altera Corporation. All rights reserved.  
+// Altera products are protected under numerous U.S. and foreign patents, 
+// maskwork rights, copyrights and other intellectual property laws.  
+//
+// This reference design file, and your use thereof, is subject to and governed
+// by the terms and conditions of the applicable Altera Reference Design 
+// License Agreement (either as signed by you or found at www.altera.com).  By
+// using this reference design file, you indicate your acceptance of such terms
+// and conditions between you and Altera Corporation.  In the event that you do
+// not agree with such terms and conditions, you may not use the reference 
+// design file and please promptly destroy any copies you have made.
+//
+// This reference design file is being provided on an "as-is" basis and as an 
+// accommodation and therefore all warranties, representations or guarantees of 
+// any kind (whether express, implied or statutory) including, without 
+// limitation, warranties of merchantability, non-infringement, or fitness for
+// a particular purpose, are specifically disclaimed.  By making this reference
+// design file available, Altera expressly does not recommend, suggest or 
+// require that this reference design file be used in combination with any 
+// other product not provided by Altera.
+/////////////////////////////////////////////////////////////////////////////
+
+// baeckler - 03-08-2006
+// Handle the rijndael mix_columns and inverse
+//
+// input and output ordering is
+//  (msb) s0,c s1,c s2,c s3,c (lsb)
+
+////////////////////////////////////////////////////
+// One column mixing operation
+////////////////////////////////////////////////////
+module mix_one_column (in,out);
+
+input [4*8-1:0] in;
+output [4*8-1:0] out;
+wire [4*8-1:0] out;
+
+function [7:0] mult2;
+	input [7:0] n;
+	begin
+		mult2 = {n[6],n[5],n[4],n[3]^n[7],n[2]^n[7],n[1],n[0]^n[7],n[7]};
+	end
+endfunction
+
+function [7:0] mult3;
+	input [7:0] n;
+	begin
+		mult3 = mult2(n) ^ n;
+	end
+endfunction
+
+wire [7:0] s0_i,s1_i,s2_i,s3_i;
+wire [7:0] s0_o,s1_o,s2_o,s3_o;
+
+assign {s0_i,s1_i,s2_i,s3_i} = in;
+
+assign s0_o = mult2(s0_i) ^ mult3(s1_i) ^ s2_i ^ s3_i;
+assign s1_o = s0_i ^ mult2(s1_i) ^ mult3(s2_i) ^ s3_i;
+assign s2_o = s0_i ^ s1_i ^ mult2(s2_i) ^ mult3(s3_i);
+assign s3_o = mult3(s0_i) ^ s1_i ^ s2_i ^ mult2(s3_i);
+
+assign out = {s0_o,s1_o,s2_o,s3_o};
+
+endmodule
+
+////////////////////////////////////////////////////
+// mix_columns implemented as 4 single col mixers
+////////////////////////////////////////////////////
+module mix_columns (in,out);
+input [16*8-1 : 0] in;
+output [16*8-1 : 0] out;
+wire [16*8-1 : 0] out;
+
+genvar i;
+generate
+    for (i=0; i<4; i=i+1)
+    begin : mx
+       mix_one_column m (.in(in[32*i+31:32*i]),
+						.out(out[32*i+31:32*i]));
+    end
+endgenerate
+endmodule
+
+////////////////////////////////////////////////////
+// Inverse One column mixing operation
+////////////////////////////////////////////////////
+module inv_mix_one_column (in,out);
+
+input [4*8-1:0] in;
+output [4*8-1:0] out;
+wire [4*8-1:0] out;
+
+function [7:0] mult2;
+	input [7:0] n;
+	begin
+		mult2 = {n[6],n[5],n[4],n[3]^n[7],n[2]^n[7],n[1],n[0]^n[7],n[7]};
+	end
+endfunction
+
+function [7:0] mult4;
+	input [7:0] n;
+	begin
+		mult4 = {n[5],	n[4],	n[3]^n[7],	n[2]^n[7]^n[6],
+				n[6]^n[1],	n[0]^n[7],	n[6]^n[7],	n[6]};
+	end
+endfunction
+
+function [7:0] mult8;
+	input [7:0] n;
+	begin
+		mult8 = {n[4],	n[3]^n[7],	n[2]^n[7]^n[6],	n[5]^n[6]^n[1],
+				n[5]^n[0]^n[7],	n[6]^n[7],	n[6]^n[5],	n[5]};
+	end
+endfunction
+
+// equivalent to mult8 ^ mult2
+function [7:0] multa;
+	input [7:0] n;
+	begin
+		multa = {n[4]^n[6],	n[3]^n[7]^n[5],	n[4]^n[2]^n[7]^n[6],	n[5]^n[6]^n[1]^n[3]^n[7],
+				n[5]^n[0]^n[2],	n[6]^n[7]^n[1],	n[0]^n[7]^n[6]^n[5],	n[7]^n[5]};
+	end
+endfunction
+
+// equivalent to mult8 ^ mult4
+function [7:0] multc;
+	input [7:0] n;
+	begin
+		multc = {n[4]^n[5],	n[4]^n[3]^n[7],	n[2]^n[3]^n[6],	n[2]^n[5]^n[7]^n[1],
+				n[6]^n[1]^n[5]^n[0]^n[7],	n[6]^n[0],	n[7]^n[5],	n[6]^n[5]};
+	end
+endfunction
+
+function [7:0] mult9;
+	input [7:0] n;
+	begin
+		mult9 = mult8(n) ^ n;
+	end
+endfunction
+
+function [7:0] multb;
+	input [7:0] n;
+	begin
+		multb = multa(n) ^ n;
+	end
+endfunction
+
+function [7:0] multd;
+	input [7:0] n;
+	begin
+		multd = multc(n) ^ n;
+	end
+endfunction
+
+function [7:0] multe;
+	input [7:0] n;
+	begin
+		multe = {n[5]^n[4]^n[6],	n[4]^n[3]^n[7]^n[5],	n[4]^n[2]^n[3]^n[6],	n[5]^n[2]^n[1]^n[3],
+				n[6]^n[1]^n[5]^n[0]^n[2],	n[6]^n[0]^n[1],	n[0]^n[5],	n[7]^n[5]^n[6]};
+	end
+endfunction
+
+wire [7:0] s0_i,s1_i,s2_i,s3_i;
+wire [7:0] s0_o,s1_o,s2_o,s3_o;
+
+assign {s0_i,s1_i,s2_i,s3_i} = in;
+
+assign s0_o = multe(s0_i) ^ multb(s1_i) ^ multd(s2_i) ^ mult9(s3_i);
+assign s1_o = mult9(s0_i) ^ multe(s1_i) ^ multb(s2_i) ^ multd(s3_i);
+assign s2_o = multd(s0_i) ^ mult9(s1_i) ^ multe(s2_i) ^ multb(s3_i);
+assign s3_o = multb(s0_i) ^ multd(s1_i) ^ mult9(s2_i) ^ multe(s3_i);
+
+assign out = {s0_o,s1_o,s2_o,s3_o};
+
+endmodule
+
+////////////////////////////////////////////////////
+// inv_mix_columns implemented as 4 single col mixers
+////////////////////////////////////////////////////
+module inv_mix_columns (in,out);
+input [16*8-1 : 0] in;
+output [16*8-1 : 0] out;
+wire [16*8-1 : 0] out;
+
+genvar i;
+generate
+    for (i=0; i<4; i=i+1)
+    begin : mx
+       inv_mix_one_column m (.in(in[32*i+31:32*i]),
+						.out(out[32*i+31:32*i]));
+    end
+endgenerate
+endmodule
+
+
+////////////////////////////////////////////////////
+// Quick sanity checker testbench 
+////////////////////////////////////////////////////
+module mix_col_test ();
+reg [31:0] dat;
+wire [31:0] mix;
+wire [31:0] inv;
+reg fail = 0;
+
+mix_one_column mc (.in(dat),.out(mix));
+inv_mix_one_column imc (.in(mix),.out(inv));
+
+initial begin 
+	dat = 0;
+	fail = 0;
+	#100000
+	if (!fail) $display ("PASS");
+	$stop();
+end
+
+always begin
+	#50 dat = $random;
+	#50 if (inv != dat) begin
+		$display ("Mismatch at time %d",$time);
+		fail = 1;
+	end
+end
+endmodule
+
+// Copyright 2007 Altera Corporation. All rights reserved.  
+// Altera products are protected under numerous U.S. and foreign patents, 
+// maskwork rights, copyrights and other intellectual property laws.  
+//
+// This reference design file, and your use thereof, is subject to and governed
+// by the terms and conditions of the applicable Altera Reference Design 
+// License Agreement (either as signed by you or found at www.altera.com).  By
+// using this reference design file, you indicate your acceptance of such terms
+// and conditions between you and Altera Corporation.  In the event that you do
+// not agree with such terms and conditions, you may not use the reference 
+// design file and please promptly destroy any copies you have made.
+//
+// This reference design file is being provided on an "as-is" basis and as an 
+// accommodation and therefore all warranties, representations or guarantees of 
+// any kind (whether express, implied or statutory) including, without 
+// limitation, warranties of merchantability, non-infringement, or fitness for
+// a particular purpose, are specifically disclaimed.  By making this reference
+// design file available, Altera expressly does not recommend, suggest or 
+// require that this reference design file be used in combination with any 
+// other product not provided by Altera.
+/////////////////////////////////////////////////////////////////////////////
+
+// baeckler - 03-07-2006
+
+// the state 
+//   (msb)  A B C D E F G H I J K L M N O P (lsb)
+//
+// shown as a grid :
+//
+//  AEIM
+//  BFJN
+//  CGKO
+//  DHLP
+//
+//  Needs to be shifted to produce :
+//
+//  AEIM
+//  FJNB
+//  KOCG
+//  PDHL
+//
+
+module shift_rows (in,out);
+input [16*8-1 : 0] in;
+output [16*8-1 : 0] out;
+wire [16*8-1 : 0] out;
+
+assign out = {
+	in[127:120],in[87:80],in[47:40],in[7:0],
+	in[95:88],in[55:48],in[15:8],in[103:96],
+	in[63:56],in[23:16],in[111:104],in[71:64],
+	in[31:24],in[119:112],in[79:72],in[39:32] };
+
+endmodule
+
+module inv_shift_rows (in,out);
+input [16*8-1 : 0] in;
+output [16*8-1 : 0] out;
+wire [16*8-1 : 0] out;
+
+assign out = {
+	in[127:120],in[23:16],in[47:40],in[71:64],
+	in[95:88],in[119:112],in[15:8],in[39:32],
+	in[63:56],in[87:80],in[111:104],in[7:0],
+	in[31:24],in[55:48],in[79:72],in[103:96] };
+
+endmodule
+
+// Copyright 2007 Altera Corporation. All rights reserved.  
+// Altera products are protected under numerous U.S. and foreign patents, 
+// maskwork rights, copyrights and other intellectual property laws.  
+//
+// This reference design file, and your use thereof, is subject to and governed
+// by the terms and conditions of the applicable Altera Reference Design 
+// License Agreement (either as signed by you or found at www.altera.com).  By
+// using this reference design file, you indicate your acceptance of such terms
+// and conditions between you and Altera Corporation.  In the event that you do
+// not agree with such terms and conditions, you may not use the reference 
+// design file and please promptly destroy any copies you have made.
+//
+// This reference design file is being provided on an "as-is" basis and as an 
+// accommodation and therefore all warranties, representations or guarantees of 
+// any kind (whether express, implied or statutory) including, without 
+// limitation, warranties of merchantability, non-infringement, or fitness for
+// a particular purpose, are specifically disclaimed.  By making this reference
+// design file available, Altera expressly does not recommend, suggest or 
+// require that this reference design file be used in combination with any 
+// other product not provided by Altera.
+/////////////////////////////////////////////////////////////////////////////
+
+// baeckler - 03-09-2006
+
+//////////////////////////////////////////////
+// eight input (256 word) ROM helper fn
+//////////////////////////////////////////////
+module eight_input_rom (in,out);
+input [7:0] in;
+output out;
+wire out /* synthesis keep */;
+
+parameter [255:0] mask = 256'b0;
+
+wire [3:0] t /* synthesis keep */;
+wire [63:0] m0 = mask[63:0];
+wire [63:0] m1 = mask[127:64];
+wire [63:0] m2 = mask[191:128];
+wire [63:0] m3 = mask[255:192];
+
+assign t[0] = m0[in[5:0]];
+assign t[1] = m1[in[5:0]];
+assign t[2] = m2[in[5:0]];
+assign t[3] = m3[in[5:0]];
+assign out = t[in[7:6]];
+
+endmodule
+
+//////////////////////////////////////////////
+// Single Rijndael SBOX
+//////////////////////////////////////////////
+module sbox (in,out);
+input [7:0] in;
+output [7:0] out;
+wire [7:0] out;
+
+parameter METHOD = 1;
+
+generate
+  if (METHOD == 0) begin
+    reg [7:0] o;
+    always @(in) begin
+      case (in)
+        8'h00: o = 8'h63;    8'h01: o = 8'h7c;    8'h02: o = 8'h77;    8'h03: o = 8'h7b;
+        8'h04: o = 8'hf2;    8'h05: o = 8'h6b;    8'h06: o = 8'h6f;    8'h07: o = 8'hc5;
+        8'h08: o = 8'h30;    8'h09: o = 8'h01;    8'h0a: o = 8'h67;    8'h0b: o = 8'h2b;
+        8'h0c: o = 8'hfe;    8'h0d: o = 8'hd7;    8'h0e: o = 8'hab;    8'h0f: o = 8'h76;
+        8'h10: o = 8'hca;    8'h11: o = 8'h82;    8'h12: o = 8'hc9;    8'h13: o = 8'h7d;
+        8'h14: o = 8'hfa;    8'h15: o = 8'h59;    8'h16: o = 8'h47;    8'h17: o = 8'hf0;
+        8'h18: o = 8'had;    8'h19: o = 8'hd4;    8'h1a: o = 8'ha2;    8'h1b: o = 8'haf;
+        8'h1c: o = 8'h9c;    8'h1d: o = 8'ha4;    8'h1e: o = 8'h72;    8'h1f: o = 8'hc0;
+        8'h20: o = 8'hb7;    8'h21: o = 8'hfd;    8'h22: o = 8'h93;    8'h23: o = 8'h26;
+        8'h24: o = 8'h36;    8'h25: o = 8'h3f;    8'h26: o = 8'hf7;    8'h27: o = 8'hcc;
+        8'h28: o = 8'h34;    8'h29: o = 8'ha5;    8'h2a: o = 8'he5;    8'h2b: o = 8'hf1;
+        8'h2c: o = 8'h71;    8'h2d: o = 8'hd8;    8'h2e: o = 8'h31;    8'h2f: o = 8'h15;
+        8'h30: o = 8'h04;    8'h31: o = 8'hc7;    8'h32: o = 8'h23;    8'h33: o = 8'hc3;
+        8'h34: o = 8'h18;    8'h35: o = 8'h96;    8'h36: o = 8'h05;    8'h37: o = 8'h9a;
+        8'h38: o = 8'h07;    8'h39: o = 8'h12;    8'h3a: o = 8'h80;    8'h3b: o = 8'he2;
+        8'h3c: o = 8'heb;    8'h3d: o = 8'h27;    8'h3e: o = 8'hb2;    8'h3f: o = 8'h75;
+        8'h40: o = 8'h09;    8'h41: o = 8'h83;    8'h42: o = 8'h2c;    8'h43: o = 8'h1a;
+        8'h44: o = 8'h1b;    8'h45: o = 8'h6e;    8'h46: o = 8'h5a;    8'h47: o = 8'ha0;
+        8'h48: o = 8'h52;    8'h49: o = 8'h3b;    8'h4a: o = 8'hd6;    8'h4b: o = 8'hb3;
+        8'h4c: o = 8'h29;    8'h4d: o = 8'he3;    8'h4e: o = 8'h2f;    8'h4f: o = 8'h84;
+        8'h50: o = 8'h53;    8'h51: o = 8'hd1;    8'h52: o = 8'h00;    8'h53: o = 8'hed;
+        8'h54: o = 8'h20;    8'h55: o = 8'hfc;    8'h56: o = 8'hb1;    8'h57: o = 8'h5b;
+        8'h58: o = 8'h6a;    8'h59: o = 8'hcb;    8'h5a: o = 8'hbe;    8'h5b: o = 8'h39;
+        8'h5c: o = 8'h4a;    8'h5d: o = 8'h4c;    8'h5e: o = 8'h58;    8'h5f: o = 8'hcf;
+        8'h60: o = 8'hd0;    8'h61: o = 8'hef;    8'h62: o = 8'haa;    8'h63: o = 8'hfb;
+        8'h64: o = 8'h43;    8'h65: o = 8'h4d;    8'h66: o = 8'h33;    8'h67: o = 8'h85;
+        8'h68: o = 8'h45;    8'h69: o = 8'hf9;    8'h6a: o = 8'h02;    8'h6b: o = 8'h7f;
+        8'h6c: o = 8'h50;    8'h6d: o = 8'h3c;    8'h6e: o = 8'h9f;    8'h6f: o = 8'ha8;
+        8'h70: o = 8'h51;    8'h71: o = 8'ha3;    8'h72: o = 8'h40;    8'h73: o = 8'h8f;
+        8'h74: o = 8'h92;    8'h75: o = 8'h9d;    8'h76: o = 8'h38;    8'h77: o = 8'hf5;
+        8'h78: o = 8'hbc;    8'h79: o = 8'hb6;    8'h7a: o = 8'hda;    8'h7b: o = 8'h21;
+        8'h7c: o = 8'h10;    8'h7d: o = 8'hff;    8'h7e: o = 8'hf3;    8'h7f: o = 8'hd2;
+        8'h80: o = 8'hcd;    8'h81: o = 8'h0c;    8'h82: o = 8'h13;    8'h83: o = 8'hec;
+        8'h84: o = 8'h5f;    8'h85: o = 8'h97;    8'h86: o = 8'h44;    8'h87: o = 8'h17;
+        8'h88: o = 8'hc4;    8'h89: o = 8'ha7;    8'h8a: o = 8'h7e;    8'h8b: o = 8'h3d;
+        8'h8c: o = 8'h64;    8'h8d: o = 8'h5d;    8'h8e: o = 8'h19;    8'h8f: o = 8'h73;
+        8'h90: o = 8'h60;    8'h91: o = 8'h81;    8'h92: o = 8'h4f;    8'h93: o = 8'hdc;
+        8'h94: o = 8'h22;    8'h95: o = 8'h2a;    8'h96: o = 8'h90;    8'h97: o = 8'h88;
+        8'h98: o = 8'h46;    8'h99: o = 8'hee;    8'h9a: o = 8'hb8;    8'h9b: o = 8'h14;
+        8'h9c: o = 8'hde;    8'h9d: o = 8'h5e;    8'h9e: o = 8'h0b;    8'h9f: o = 8'hdb;
+        8'ha0: o = 8'he0;    8'ha1: o = 8'h32;    8'ha2: o = 8'h3a;    8'ha3: o = 8'h0a;
+        8'ha4: o = 8'h49;    8'ha5: o = 8'h06;    8'ha6: o = 8'h24;    8'ha7: o = 8'h5c;
+        8'ha8: o = 8'hc2;    8'ha9: o = 8'hd3;    8'haa: o = 8'hac;    8'hab: o = 8'h62;
+        8'hac: o = 8'h91;    8'had: o = 8'h95;    8'hae: o = 8'he4;    8'haf: o = 8'h79;
+        8'hb0: o = 8'he7;    8'hb1: o = 8'hc8;    8'hb2: o = 8'h37;    8'hb3: o = 8'h6d;
+        8'hb4: o = 8'h8d;    8'hb5: o = 8'hd5;    8'hb6: o = 8'h4e;    8'hb7: o = 8'ha9;
+        8'hb8: o = 8'h6c;    8'hb9: o = 8'h56;    8'hba: o = 8'hf4;    8'hbb: o = 8'hea;
+        8'hbc: o = 8'h65;    8'hbd: o = 8'h7a;    8'hbe: o = 8'hae;    8'hbf: o = 8'h08;
+        8'hc0: o = 8'hba;    8'hc1: o = 8'h78;    8'hc2: o = 8'h25;    8'hc3: o = 8'h2e;
+        8'hc4: o = 8'h1c;    8'hc5: o = 8'ha6;    8'hc6: o = 8'hb4;    8'hc7: o = 8'hc6;
+        8'hc8: o = 8'he8;    8'hc9: o = 8'hdd;    8'hca: o = 8'h74;    8'hcb: o = 8'h1f;
+        8'hcc: o = 8'h4b;    8'hcd: o = 8'hbd;    8'hce: o = 8'h8b;    8'hcf: o = 8'h8a;
+        8'hd0: o = 8'h70;    8'hd1: o = 8'h3e;    8'hd2: o = 8'hb5;    8'hd3: o = 8'h66;
+        8'hd4: o = 8'h48;    8'hd5: o = 8'h03;    8'hd6: o = 8'hf6;    8'hd7: o = 8'h0e;
+        8'hd8: o = 8'h61;    8'hd9: o = 8'h35;    8'hda: o = 8'h57;    8'hdb: o = 8'hb9;
+        8'hdc: o = 8'h86;    8'hdd: o = 8'hc1;    8'hde: o = 8'h1d;    8'hdf: o = 8'h9e;
+        8'he0: o = 8'he1;    8'he1: o = 8'hf8;    8'he2: o = 8'h98;    8'he3: o = 8'h11;
+        8'he4: o = 8'h69;    8'he5: o = 8'hd9;    8'he6: o = 8'h8e;    8'he7: o = 8'h94;
+        8'he8: o = 8'h9b;    8'he9: o = 8'h1e;    8'hea: o = 8'h87;    8'heb: o = 8'he9;
+        8'hec: o = 8'hce;    8'hed: o = 8'h55;    8'hee: o = 8'h28;    8'hef: o = 8'hdf;
+        8'hf0: o = 8'h8c;    8'hf1: o = 8'ha1;    8'hf2: o = 8'h89;    8'hf3: o = 8'h0d;
+        8'hf4: o = 8'hbf;    8'hf5: o = 8'he6;    8'hf6: o = 8'h42;    8'hf7: o = 8'h68;
+        8'hf8: o = 8'h41;    8'hf9: o = 8'h99;    8'hfa: o = 8'h2d;    8'hfb: o = 8'h0f;
+        8'hfc: o = 8'hb0;    8'hfd: o = 8'h54;    8'hfe: o = 8'hbb;    8'hff: o = 8'h16;
+            default: o = 8'h0;
+      endcase
+    end
+    assign out = o;
+  end
+  else if (METHOD == 1) begin
+      eight_input_rom #(.mask(256'h4f1ead396f247a0410bdb210c006eab568ab4bfa8acb7a13b14ede67096c6eed)) r0 (.in(in),.out(out[0]));
+        //defparam r0 .mask = 256'h4f1ead396f247a0410bdb210c006eab568ab4bfa8acb7a13b14ede67096c6eed;
+      eight_input_rom #(.mask(256'hc870974094ead8a96a450b2ef33486b4e61a4c5e97816f7a7bae007d4c53fc7d)) r1 (.in(in),.out(out[1]));
+        //defparam r1 .mask = 256'hc870974094ead8a96a450b2ef33486b4e61a4c5e97816f7a7bae007d4c53fc7d;
+      eight_input_rom #(.mask(256'hac39b6c0d6ce2efc577d64e03b0c3ffb23a869a2a428c424a16387fb3b48b4c6)) r2 (.in(in),.out(out[2]));
+        //defparam r2 .mask = 256'hac39b6c0d6ce2efc577d64e03b0c3ffb23a869a2a428c424a16387fb3b48b4c6;
+      eight_input_rom #(.mask(256'h4e9ddb76c892fb1be9da849cf6ac6c1b2568ea2effa8527d109020a2193d586a)) r3 (.in(in),.out(out[3]));
+        //defparam r3 .mask = 256'h4e9ddb76c892fb1be9da849cf6ac6c1b2568ea2effa8527d109020a2193d586a;
+      eight_input_rom #(.mask(256'hf210a3aece472e532624b286bc48ecb4f7f17a494ce30f58c2b0f97752b8b11e)) r4 (.in(in),.out(out[4]));
+        //defparam r4 .mask = 256'hf210a3aece472e532624b286bc48ecb4f7f17a494ce30f58c2b0f97752b8b11e;
+      eight_input_rom #(.mask(256'h54b248130b4f256f7d8dcc4706319e086bc2aa4e0d787aa4f8045f7b6d98dd7f)) r5 (.in(in),.out(out[5]));
+        //defparam r5 .mask = 256'h54b248130b4f256f7d8dcc4706319e086bc2aa4e0d787aa4f8045f7b6d98dd7f;
+      eight_input_rom #(.mask(256'h21e0b833255917823f6bcb91b30db559e4851b3bf3ab2560980a3cc2c2fdb4ff)) r6 (.in(in),.out(out[6]));
+        //defparam r6 .mask = 256'h21e0b833255917823f6bcb91b30db559e4851b3bf3ab2560980a3cc2c2fdb4ff;
+      eight_input_rom #(.mask(256'h52379de7b844e3e14cb3770196ca0329e7bac28f866aac825caa2ec7bf977090)) r7 (.in(in),.out(out[7]));
+        //defparam r7 .mask = 256'h52379de7b844e3e14cb3770196ca0329e7bac28f866aac825caa2ec7bf977090;
+  end
+endgenerate
+endmodule
+
+//////////////////////////////////////////////
+// Single Rijndael Inverse SBOX
+//////////////////////////////////////////////
+module inv_sbox (in,out);
+input [7:0] in;
+output [7:0] out;
+wire [7:0] out;
+
+parameter METHOD = 1;
+
+generate
+  if (METHOD == 0) begin
+    reg [7:0] o;
+    always @(in) begin
+      case (in)
+        8'h00: o = 8'h52;    8'h01: o = 8'h09;    8'h02: o = 8'h6a;    8'h03: o = 8'hd5;
+        8'h04: o = 8'h30;    8'h05: o = 8'h36;    8'h06: o = 8'ha5;    8'h07: o = 8'h38;
+        8'h08: o = 8'hbf;    8'h09: o = 8'h40;    8'h0a: o = 8'ha3;    8'h0b: o = 8'h9e;
+        8'h0c: o = 8'h81;    8'h0d: o = 8'hf3;    8'h0e: o = 8'hd7;    8'h0f: o = 8'hfb;
+        8'h10: o = 8'h7c;    8'h11: o = 8'he3;    8'h12: o = 8'h39;    8'h13: o = 8'h82;
+        8'h14: o = 8'h9b;    8'h15: o = 8'h2f;    8'h16: o = 8'hff;    8'h17: o = 8'h87;
+        8'h18: o = 8'h34;    8'h19: o = 8'h8e;    8'h1a: o = 8'h43;    8'h1b: o = 8'h44;
+        8'h1c: o = 8'hc4;    8'h1d: o = 8'hde;    8'h1e: o = 8'he9;    8'h1f: o = 8'hcb;
+        8'h20: o = 8'h54;    8'h21: o = 8'h7b;    8'h22: o = 8'h94;    8'h23: o = 8'h32;
+        8'h24: o = 8'ha6;    8'h25: o = 8'hc2;    8'h26: o = 8'h23;    8'h27: o = 8'h3d;
+        8'h28: o = 8'hee;    8'h29: o = 8'h4c;    8'h2a: o = 8'h95;    8'h2b: o = 8'h0b;
+        8'h2c: o = 8'h42;    8'h2d: o = 8'hfa;    8'h2e: o = 8'hc3;    8'h2f: o = 8'h4e;
+        8'h30: o = 8'h08;    8'h31: o = 8'h2e;    8'h32: o = 8'ha1;    8'h33: o = 8'h66;
+        8'h34: o = 8'h28;    8'h35: o = 8'hd9;    8'h36: o = 8'h24;    8'h37: o = 8'hb2;
+        8'h38: o = 8'h76;    8'h39: o = 8'h5b;    8'h3a: o = 8'ha2;    8'h3b: o = 8'h49;
+        8'h3c: o = 8'h6d;    8'h3d: o = 8'h8b;    8'h3e: o = 8'hd1;    8'h3f: o = 8'h25;
+        8'h40: o = 8'h72;    8'h41: o = 8'hf8;    8'h42: o = 8'hf6;    8'h43: o = 8'h64;
+        8'h44: o = 8'h86;    8'h45: o = 8'h68;    8'h46: o = 8'h98;    8'h47: o = 8'h16;
+        8'h48: o = 8'hd4;    8'h49: o = 8'ha4;    8'h4a: o = 8'h5c;    8'h4b: o = 8'hcc;
+        8'h4c: o = 8'h5d;    8'h4d: o = 8'h65;    8'h4e: o = 8'hb6;    8'h4f: o = 8'h92;
+        8'h50: o = 8'h6c;    8'h51: o = 8'h70;    8'h52: o = 8'h48;    8'h53: o = 8'h50;
+        8'h54: o = 8'hfd;    8'h55: o = 8'hed;    8'h56: o = 8'hb9;    8'h57: o = 8'hda;
+        8'h58: o = 8'h5e;    8'h59: o = 8'h15;    8'h5a: o = 8'h46;    8'h5b: o = 8'h57;
+        8'h5c: o = 8'ha7;    8'h5d: o = 8'h8d;    8'h5e: o = 8'h9d;    8'h5f: o = 8'h84;
+        8'h60: o = 8'h90;    8'h61: o = 8'hd8;    8'h62: o = 8'hab;    8'h63: o = 8'h00;
+        8'h64: o = 8'h8c;    8'h65: o = 8'hbc;    8'h66: o = 8'hd3;    8'h67: o = 8'h0a;
+        8'h68: o = 8'hf7;    8'h69: o = 8'he4;    8'h6a: o = 8'h58;    8'h6b: o = 8'h05;
+        8'h6c: o = 8'hb8;    8'h6d: o = 8'hb3;    8'h6e: o = 8'h45;    8'h6f: o = 8'h06;
+        8'h70: o = 8'hd0;    8'h71: o = 8'h2c;    8'h72: o = 8'h1e;    8'h73: o = 8'h8f;
+        8'h74: o = 8'hca;    8'h75: o = 8'h3f;    8'h76: o = 8'h0f;    8'h77: o = 8'h02;
+        8'h78: o = 8'hc1;    8'h79: o = 8'haf;    8'h7a: o = 8'hbd;    8'h7b: o = 8'h03;
+        8'h7c: o = 8'h01;    8'h7d: o = 8'h13;    8'h7e: o = 8'h8a;    8'h7f: o = 8'h6b;
+        8'h80: o = 8'h3a;    8'h81: o = 8'h91;    8'h82: o = 8'h11;    8'h83: o = 8'h41;
+        8'h84: o = 8'h4f;    8'h85: o = 8'h67;    8'h86: o = 8'hdc;    8'h87: o = 8'hea;
+        8'h88: o = 8'h97;    8'h89: o = 8'hf2;    8'h8a: o = 8'hcf;    8'h8b: o = 8'hce;
+        8'h8c: o = 8'hf0;    8'h8d: o = 8'hb4;    8'h8e: o = 8'he6;    8'h8f: o = 8'h73;
+        8'h90: o = 8'h96;    8'h91: o = 8'hac;    8'h92: o = 8'h74;    8'h93: o = 8'h22;
+        8'h94: o = 8'he7;    8'h95: o = 8'had;    8'h96: o = 8'h35;    8'h97: o = 8'h85;
+        8'h98: o = 8'he2;    8'h99: o = 8'hf9;    8'h9a: o = 8'h37;    8'h9b: o = 8'he8;
+        8'h9c: o = 8'h1c;    8'h9d: o = 8'h75;    8'h9e: o = 8'hdf;    8'h9f: o = 8'h6e;
+        8'ha0: o = 8'h47;    8'ha1: o = 8'hf1;    8'ha2: o = 8'h1a;    8'ha3: o = 8'h71;
+        8'ha4: o = 8'h1d;    8'ha5: o = 8'h29;    8'ha6: o = 8'hc5;    8'ha7: o = 8'h89;
+        8'ha8: o = 8'h6f;    8'ha9: o = 8'hb7;    8'haa: o = 8'h62;    8'hab: o = 8'h0e;
+        8'hac: o = 8'haa;    8'had: o = 8'h18;    8'hae: o = 8'hbe;    8'haf: o = 8'h1b;
+        8'hb0: o = 8'hfc;    8'hb1: o = 8'h56;    8'hb2: o = 8'h3e;    8'hb3: o = 8'h4b;
+        8'hb4: o = 8'hc6;    8'hb5: o = 8'hd2;    8'hb6: o = 8'h79;    8'hb7: o = 8'h20;
+        8'hb8: o = 8'h9a;    8'hb9: o = 8'hdb;    8'hba: o = 8'hc0;    8'hbb: o = 8'hfe;
+        8'hbc: o = 8'h78;    8'hbd: o = 8'hcd;    8'hbe: o = 8'h5a;    8'hbf: o = 8'hf4;
+        8'hc0: o = 8'h1f;    8'hc1: o = 8'hdd;    8'hc2: o = 8'ha8;    8'hc3: o = 8'h33;
+        8'hc4: o = 8'h88;    8'hc5: o = 8'h07;    8'hc6: o = 8'hc7;    8'hc7: o = 8'h31;
+        8'hc8: o = 8'hb1;    8'hc9: o = 8'h12;    8'hca: o = 8'h10;    8'hcb: o = 8'h59;
+        8'hcc: o = 8'h27;    8'hcd: o = 8'h80;    8'hce: o = 8'hec;    8'hcf: o = 8'h5f;
+        8'hd0: o = 8'h60;    8'hd1: o = 8'h51;    8'hd2: o = 8'h7f;    8'hd3: o = 8'ha9;
+        8'hd4: o = 8'h19;    8'hd5: o = 8'hb5;    8'hd6: o = 8'h4a;    8'hd7: o = 8'h0d;
+        8'hd8: o = 8'h2d;    8'hd9: o = 8'he5;    8'hda: o = 8'h7a;    8'hdb: o = 8'h9f;
+        8'hdc: o = 8'h93;    8'hdd: o = 8'hc9;    8'hde: o = 8'h9c;    8'hdf: o = 8'hef;
+        8'he0: o = 8'ha0;    8'he1: o = 8'he0;    8'he2: o = 8'h3b;    8'he3: o = 8'h4d;
+        8'he4: o = 8'hae;    8'he5: o = 8'h2a;    8'he6: o = 8'hf5;    8'he7: o = 8'hb0;
+        8'he8: o = 8'hc8;    8'he9: o = 8'heb;    8'hea: o = 8'hbb;    8'heb: o = 8'h3c;
+        8'hec: o = 8'h83;    8'hed: o = 8'h53;    8'hee: o = 8'h99;    8'hef: o = 8'h61;
+        8'hf0: o = 8'h17;    8'hf1: o = 8'h2b;    8'hf2: o = 8'h04;    8'hf3: o = 8'h7e;
+        8'hf4: o = 8'hba;    8'hf5: o = 8'h77;    8'hf6: o = 8'hd6;    8'hf7: o = 8'h26;
+        8'hf8: o = 8'he1;    8'hf9: o = 8'h69;    8'hfa: o = 8'h14;    8'hfb: o = 8'h63;
+        8'hfc: o = 8'h55;    8'hfd: o = 8'h21;    8'hfe: o = 8'h0c;    8'hff: o = 8'h7d;
+            default: o = 8'h0;
+      endcase
+    end
+    assign out = o;
+  end
+  else if (METHOD == 1) begin
+      eight_input_rom #(.mask(256'hbb23f64cbbbe99eb224883fb66f0853ebf6869447a703000fa244cc2c4f6f54a)) r0 (.in(in),.out(out[0]));
+        //defparam r0 .mask = 256'hbb23f64cbbbe99eb224883fb66f0853ebf6869447a703000fa244cc2c4f6f54a;
+      eight_input_rom #(.mask(256'h08fb36349c4492694b3edf05c519cfb1eafca1c41d80c095278af97aa6faed25)) r1 (.in(in),.out(out[1]));
+        //defparam r1 .mask = 256'h08fb36349c4492694b3edf05c519cfb1eafca1c41d80c095278af97aa6faed25;
+      eight_input_rom #(.mask(256'hd4ed0858cba4d063a8174b51f4f76d70066ecb30ff317f9c914a87953be14968)) r2 (.in(in),.out(out[2]));
+        //defparam r2 .mask = 256'hd4ed0858cba4d063a8174b51f4f76d70066ecb30ff317f9c914a87953be14968;
+      eight_input_rom #(.mask(256'hc21a4f3ceddcc8177b4df9b4da220cd1c67e14b661f51c623a33ab82e2758986)) r3 (.in(in),.out(out[3]));
+        //defparam r3 .mask = 256'hc21a4f3ceddcc8177b4df9b4da220cd1c67e14b661f51c623a33ab82e2758986;
+      eight_input_rom #(.mask(256'h94796cc45c368f8bdb67e21e7645b347242535634bdad5c743a0248f2155e9b9)) r4 (.in(in),.out(out[4]));
+        //defparam r4 .mask = 256'h94796cc45c368f8bdb67e21e7645b347242535634bdad5c743a0248f2155e9b9;
+      eight_input_rom #(.mask(256'habba8ef7872d518c98c5572aaf7ef2a1862233241073622f95de21da4167a5f4)) r5 (.in(in),.out(out[5]));
+        //defparam r5 .mask = 256'habba8ef7872d518c98c5572aaf7ef2a1862233241073622f95de21da4167a5f4;
+      eight_input_rom #(.mask(256'h9b68a34aa647c842fe7b054beb14def8811147420dbf3d2f5b28f323fc43e20d)) r6 (.in(in),.out(out[6]));
+        //defparam r6 .mask = 256'h9b68a34aa647c842fe7b054beb14def8811147420dbf3d2f5b28f323fc43e20d;
+      eight_input_rom #(.mask(256'h015057d3fa286156af3152c24bb37fc247193377f0f0cb5664a46534f2dafd48)) r7 (.in(in),.out(out[7]));
+        //defparam r7 .mask = 256'h015057d3fa286156af3152c24bb37fc247193377f0f0cb5664a46534f2dafd48;
+  end
+endgenerate
+endmodule
+
+////////////////////////////////////////////////////
+// sub_bytes implemented as 4 by 4 array of SBOXes
+////////////////////////////////////////////////////
+module sub_bytes (in,out);
+input [16*8-1 : 0] in;
+output [16*8-1 : 0] out;
+wire [16*8-1 : 0] out;
+
+genvar i;
+generate
+    for (i=0; i<16; i=i+1)
+    begin : sb
+        sbox s (.in(in[8*i+7:8*i]), .out(out[8*i+7:8*i]));
+    end
+endgenerate
+endmodule
+
+////////////////////////////////////////////////////
+// inv_sub_bytes implemented as 4x4 inv_SBOXes
+////////////////////////////////////////////////////
+module inv_sub_bytes (in,out);
+input [16*8-1 : 0] in;
+output [16*8-1 : 0] out;
+wire [16*8-1 : 0] out;
+
+genvar i;
+generate
+    for (i=0; i<16; i=i+1)
+    begin : sb
+        inv_sbox s (.in(in[8*i+7:8*i]), .out(out[8*i+7:8*i]));
+    end
+endgenerate
+endmodule
+
diff --git vtr_flow/benchmarks/verilog/bgm_yosys.v vtr_flow/benchmarks/verilog/bgm_yosys.v
new file mode 100755
index 0000000..a810dfa
--- /dev/null
+++ vtr_flow/benchmarks/verilog/bgm_yosys.v
@@ -0,0 +1,2662 @@
+// DEFINES
+`define BITS 32         // Bit width of the operands
+`define NumPath 34     
+ 
+(* top *)
+module 	bgm(clock_IBUF, 
+		reset,
+		sigma_a, 
+		sigma_b, 
+		sigma_c,
+		Fn,
+		dw_x,
+		dw_y,
+		dw_z,
+		dt,
+		Fn_out 
+);
+
+// SIGNAL DECLARATIONS
+input	clock_IBUF;
+wire clock;
+bufgctrl b(.i({1'bx, clock_IBUF}), .s(2'bxx), .ce(2'bxx), .ignore(2'bxx), .o(clock));
+input 	reset;
+
+input [`BITS-1:0] sigma_a;
+input [`BITS-1:0] sigma_b;
+input [`BITS-1:0] sigma_c;
+input [`BITS-1:0] Fn;
+input [`BITS-1:0] dw_x;
+input [`BITS-1:0] dw_y;
+input [`BITS-1:0] dw_z;
+input [`BITS-1:0] dt;
+
+output [`BITS-1:0] Fn_out;
+
+wire [`BITS-1:0]	x0;
+wire [`BITS-1:0]	x1;
+wire [`BITS-1:0]	x2;
+wire [`BITS-1:0]	x3;
+wire [`BITS-1:0]	x4;
+wire [`BITS-1:0]	x5;
+wire [`BITS-1:0]	x6;
+wire [`BITS-1:0]	x7;
+wire [`BITS-1:0]	x8;
+wire [`BITS-1:0]	x9;
+wire [`BITS-1:0]	x10;
+
+wire [`BITS-1:0]	a0;
+wire [`BITS-1:0]	a1;
+wire [`BITS-1:0]	a2;
+wire [`BITS-1:0]	a3;
+wire [`BITS-1:0]	a4;
+wire [`BITS-1:0]	a5;
+wire [`BITS-1:0]	a6;
+wire [`BITS-1:0]	a7;
+wire [`BITS-1:0]	a8;
+
+wire [`BITS-1:0] Fn_out;
+wire [`BITS-1:0] Fn_delay_chain;
+wire [`BITS-1:0] Fn_delay_chain_delay5;
+
+wire [`BITS-1:0] dw_x_delay;
+wire [`BITS-1:0] dw_y_delay;
+wire [`BITS-1:0] dw_z_delay;
+wire [`BITS-1:0] sigma_a_delay;
+wire [`BITS-1:0] sigma_b_delay;
+wire [`BITS-1:0] sigma_c_delay;
+
+wire [`BITS-1:0] fifo_out1;
+wire [`BITS-1:0] fifo_out2;
+wire [`BITS-1:0] fifo_out3;
+
+wire [`BITS-1:0] a4_delay5;
+/*
+delay44 delay_u1(clock, dw_x, dw_x_delay);
+delay44 delay_u2(clock, dw_y, dw_y_delay);
+delay44 delay_u3(clock, dw_z, dw_z_delay);
+delay44 delay_u4(clock, sigma_a, sigma_a_delay);
+delay44 delay_u5(clock, sigma_b, sigma_b_delay);
+delay44 delay_u6(clock, sigma_c, sigma_c_delay);
+
+fifo fifo_1(clock, a0, fifo_out1);
+fifo fifo_2(clock, a1, fifo_out2);
+fifo fifo_3(clock, a2, fifo_out3);
+*/
+
+delay5 delay_u1(clock, dw_x, dw_x_delay);
+delay5 delay_u2(clock, dw_y, dw_y_delay);
+delay5 delay_u3(clock, dw_z, dw_z_delay);
+delay5 delay_u4(clock, sigma_a, sigma_a_delay);
+delay5 delay_u5(clock, sigma_b, sigma_b_delay);
+delay5 delay_u6(clock, sigma_c, sigma_c_delay);
+
+delay5 fifo_1(clock, a0, fifo_out1);
+delay5 fifo_2(clock, a1, fifo_out2);
+delay5 fifo_3(clock, a2, fifo_out3);
+
+
+
+//assign x0 = Fn * sigma_a;
+wire [7:0] x0_control;
+fpu_mul x0_mul
+( 
+	.clk(clock), 
+	.opa(Fn), 
+	.opb(sigma_a), 
+	.out(x0), 
+	.control(x0_control) 
+);
+
+//assign x1 = Fn * sigma_b;
+wire [7:0] x1_control;
+fpu_mul x1_mul
+( 
+	.clk(clock), 
+	.opa(Fn), 
+	.opb(sigma_b), 
+	.out(x1), 
+	.control(x1_control) 
+);
+
+
+//assign x2 = Fn * sigma_c;
+wire [7:0] x2_control;
+fpu_mul x2_mul
+( 
+	.clk(clock), 
+	.opa(Fn), 
+	.opb(sigma_c), 
+	.out(x2), 
+	.control(x2_control) 
+);
+
+//assign a0 = x0 + fifo_out1;
+wire [7:0] a0_control;
+fpu_add a0_add
+( 
+	.clk(clock), 
+	.opa(x0), 
+	.opb(fifo_out1), 
+	.out(a0), 
+	.control(a0_control) 
+);
+
+
+//assign a1 = x1 + fifo_out2;
+wire [7:0] a1_control;
+fpu_add a1_add
+( 
+	.clk(clock), 
+	.opa(x1), 
+	.opb(fifo_out2), 
+	.out(a1), 
+	.control(a1_control) 
+);
+
+//assign a2 = x2 + fifo_out3;
+wire [7:0] a2_control;
+fpu_add a2_add
+( 
+	.clk(clock), 
+	.opa(x2), 
+	.opb(fifo_out3), 
+	.out(a2), 
+	.control(a2_control) 
+);
+
+//assign x3 = dw_x_delay * sigma_a_delay;
+wire [7:0] x3_control;
+fpu_mul x3_mul
+( 
+	.clk(clock), 
+	.opa(dw_x_delay), 
+	.opb(sigma_a_delay), 
+	.out(x3), 
+	.control(x3_control) 
+);
+
+
+//assign x4 = a0 * sigma_a_delay;
+wire [7:0] x4_control;
+fpu_mul x4_mul
+( 
+	.clk(clock), 
+	.opa(a0), 
+	.opb(sigma_a_delay), 
+	.out(x4), 
+	.control(x4_control) 
+);
+
+
+//assign x5 = dw_y_delay * sigma_b_delay;
+wire [7:0] x5_control;
+fpu_mul x5_mul
+( 
+	.clk(clock), 
+	.opa(dw_y_delay), 
+	.opb(sigma_b_delay), 
+	.out(x5), 
+	.control(x5_control) 
+);
+
+//assign x6 = a1 * sigma_b_delay;
+wire [7:0] x6_control;
+fpu_mul x6_mul
+( 
+	.clk(clock), 
+	.opa(a1), 
+	.opb(sigma_b_delay), 
+	.out(x6), 
+	.control(x6_control) 
+);
+
+//assign x7 = dw_z_delay * sigma_c_delay;
+wire [7:0] x7_control;
+fpu_mul x7_mul
+( 
+	.clk(clock), 
+	.opa(dw_z_delay), 
+	.opb(sigma_c_delay), 
+	.out(x7), 
+	.control(x7_control) 
+);
+
+//assign x8 = a2 * sigma_c_delay;
+wire [7:0] x8_control;
+fpu_mul x8_mul
+( 
+	.clk(clock), 
+	.opa(a2), 
+	.opb(sigma_c_delay), 
+	.out(x8), 
+	.control(x8_control) 
+);
+
+//assign a3 = x3 + x5;
+wire [7:0] a3_control;
+fpu_add a3_add
+( 
+	.clk(clock), 
+	.opa(x3), 
+	.opb(x5), 
+	.out(a3), 
+	.control(a3_control) 
+);
+
+//assign a4 = a3 + x7;
+wire [7:0] a4_control;
+fpu_add a4_add
+( 
+	.clk(clock), 
+	.opa(a3), 
+	.opb(x7), 
+	.out(a4), 
+	.control(a4_control) 
+);
+
+
+//assign a5 = x4 + x6;
+wire [7:0] a5_control;
+fpu_add a5_add
+( 
+	.clk(clock), 
+	.opa(x4), 
+	.opb(x6), 
+	.out(a5), 
+	.control(a5_control) 
+);
+
+//assign a6 = a5 + x8;
+wire [7:0] a6_control;
+fpu_add a6_add
+( 
+	.clk(clock), 
+	.opa(a5), 
+	.opb(x8), 
+	.out(a6), 
+	.control(a6_control) 
+);
+
+delay5 delay_a5(clock, a4, a4_delay5);
+
+//assign x9 = dt * a6;
+wire [7:0] x9_control;
+fpu_mul x9_mul
+( 
+	.clk(clock), 
+	.opa(dt), 
+	.opb(a6), 
+	.out(x9), 
+	.control(x9_control) 
+);
+
+//assign a7 = a4_delay5 + x9;
+wire [7:0] a7_control;
+fpu_add a7_add
+( 
+	.clk(clock), 
+	.opa(a4_delay5), 
+	.opb(x9), 
+	.out(a7), 
+	.control(a7_control) 
+);
+
+
+//delay_chain delay_Fn(clock, Fn, Fn_delay_chain);
+delay5 delay_Fn(clock, Fn, Fn_delay_chain);
+delay5 delay_Fn_delay5(clock, Fn_delay_chain, Fn_delay_chain_delay5);
+
+//assign x10 = a7 * Fn_delay_chain;
+wire [7:0] x10_control;
+fpu_mul x10_mul
+( 
+	.clk(clock), 
+	.opa(a7), 
+	.opb(Fn_delay_chain), 
+	.out(x10), 
+	.control(x10_control) 
+);
+
+//assign a8 = Fn_delay_chain_delay5 + x10;
+wire [7:0] a8_control;
+fpu_add a8_add
+( 
+	.clk(clock), 
+	.opa(Fn_delay_chain_delay5), 
+	.opb(x10), 
+	.out(a8), 
+	.control(a8_control) 
+);
+
+assign	Fn_out	= a8;
+
+
+endmodule
+
+
+
+/*
+module fifo(clock, fifo_in, fifo_out);
+	input clock;
+	input [`BITS-1:0] fifo_in;
+	output [`BITS-1:0] fifo_out;
+	wire [`BITS-1:0] fifo_out;
+
+	reg [`BITS-1:0] freg1;
+
+	reg [`BITS-1:0] freg2;
+	reg [`BITS-1:0] freg3;
+	reg [`BITS-1:0] freg4;
+	reg [`BITS-1:0] freg5;
+	reg [`BITS-1:0] freg6;
+	reg [`BITS-1:0] freg7;
+	reg [`BITS-1:0] freg8;
+	reg [`BITS-1:0] freg9;
+	reg [`BITS-1:0] freg10;
+	reg [`BITS-1:0] freg11;
+	reg [`BITS-1:0] freg12;
+	reg [`BITS-1:0] freg13;
+	reg [`BITS-1:0] freg14;
+	reg [`BITS-1:0] freg15;
+	reg [`BITS-1:0] freg16;
+	reg [`BITS-1:0] freg17;
+	reg [`BITS-1:0] freg18;
+	reg [`BITS-1:0] freg19;
+	reg [`BITS-1:0] freg20;
+	reg [`BITS-1:0] freg21;
+	reg [`BITS-1:0] freg22;
+	reg [`BITS-1:0] freg23;
+	reg [`BITS-1:0] freg24;
+	reg [`BITS-1:0] freg25;
+	reg [`BITS-1:0] freg26;
+	reg [`BITS-1:0] freg27;
+	reg [`BITS-1:0] freg28;
+	reg [`BITS-1:0] freg29;
+	reg [`BITS-1:0] freg30;
+	reg [`BITS-1:0] freg31;
+	reg [`BITS-1:0] freg32;
+	reg [`BITS-1:0] freg33;
+	reg [`BITS-1:0] freg34;
+ 
+	assign fifo_out = freg34;
+
+	always @(posedge clock)
+	begin
+		freg1 <= fifo_in;
+
+		freg2 <= freg1;
+		freg3 <= freg2;
+		freg4 <= freg3;
+		freg5 <= freg4;
+		freg6 <= freg5;
+		freg7 <= freg6;
+		freg8 <= freg7;
+		freg9 <= freg8;
+		freg10 <= freg9;
+		freg11 <= freg10;
+		freg12 <= freg11;
+		freg13 <= freg12;
+		freg14 <= freg13;
+		freg15 <= freg14;
+		freg16 <= freg15;
+		freg17 <= freg16;
+		freg18 <= freg17;
+		freg19 <= freg18;
+		freg20 <= freg19;
+		freg21 <= freg20;
+		freg22 <= freg21;
+		freg23 <= freg22;
+		freg24 <= freg23;
+		freg25 <= freg24;
+		freg26 <= freg25;
+		freg27 <= freg26;
+		freg28 <= freg27;
+		freg29 <= freg28;
+		freg30 <= freg29;
+		freg31 <= freg30;
+		freg32 <= freg31;
+		freg33 <= freg32;
+		freg34 <= freg33;
+
+	end
+endmodule
+*/
+
+module delay5 (clock, d5_delay_in, d5_delay_out);
+	input clock;
+	input [`BITS-1:0] d5_delay_in;
+	output [`BITS-1:0] d5_delay_out;
+
+	//FIFO delay
+	reg [`BITS-1:0] d5_reg1;
+/*
+	reg [`BITS-1:0] d5_reg2;
+	reg [`BITS-1:0] d5_reg3;
+	reg [`BITS-1:0] d5_reg4;
+	reg [`BITS-1:0] d5_reg5;
+	reg [`BITS-1:0] d5_reg6;
+*/
+
+	assign d5_delay_out = d5_reg1;
+
+	always @(posedge clock)
+	begin
+		d5_reg1 <= d5_delay_in;
+/*
+		d5_reg2 <= d5_reg1;
+		d5_reg3 <= d5_reg2;
+		d5_reg4 <= d5_reg3;
+		d5_reg5 <= d5_reg4;
+		d5_reg6 <= d5_reg5;
+*/
+	end
+endmodule
+
+/*
+module delay44 (clock, delay_in, delay_out);
+	input clock;
+	input [`BITS-1:0] delay_in;
+	output [`BITS-1:0] delay_out;
+//	wire [`BITS-1:0] delay_out;
+
+	//FIFO delay
+	wire [`BITS-1:0] fifo_out;
+	
+	//multiplier delay
+ 	wire [`BITS-1:0] delay5_dout1;
+
+	//adder delay
+ 	wire [`BITS-1:0] delay5_dout2;
+
+	fifo fifo_delay(clock, delay_in , fifo_out);
+	delay5 delay_d1(clock, fifo_out, delay5_dout1);
+	delay5 delay_d2(clock, delay5_dout1, delay5_dout2);
+
+	assign delay_out = delay5_dout2;
+//	always @(posedge clock)
+//	begin
+//		fifo_out <= delay_in;
+//		delay5_dout1 <= fifo_out;
+//		delay5_dout2 <= delay5_dout1;
+//	end
+
+endmodule
+*/
+
+/*
+module delay_chain (clock, delay_in, delay_out);
+	input clock;
+	input [`BITS-1:0] delay_in;
+	output [`BITS-1:0] delay_out;
+//	wire [`BITS-1:0] delay_out;
+
+	wire [`BITS-1:0] delay44_out;
+	wire [`BITS-1:0] delay5_out1;
+	wire [`BITS-1:0] delay5_out2;
+	wire [`BITS-1:0] delay5_out3;
+	wire [`BITS-1:0] delay5_out4;
+
+	delay44 delay_c1(clock, delay_in, delay44_out);
+	delay5 delay_c2(clock, delay44_out, delay5_out1);
+	delay5 delay_c3(clock, delay5_out1, delay5_out2);
+	delay5 delay_c4(clock, delay5_out2, delay5_out3);
+	delay5 delay_c5(clock, delay5_out3, delay5_out4);
+
+	assign delay_out = delay5_out4;
+endmodule
+*/
+
+
+module fpu_mul( 
+clk, 
+//rmode, 
+opa, opb, out, 
+control
+/*
+inf, snan, qnan, ine, overflow, underflow, zero, div_by_zero
+*/
+);
+input		clk;
+//input	[1:0]	rmode;
+input	[31:0]	opa, opb;
+output	[31:0]	out;
+output  [7:0] control;
+/*
+output		inf, snan, qnan;
+output		ine;
+output		overflow, underflow;
+output		zero;
+output		div_by_zero;
+*/
+
+
+
+////////////////////////////////////////////////////////////////////////
+//
+// Local Wires
+//
+reg [2:0] fpu_op;
+reg		zero;
+reg	[31:0]	opa_r, opb_r;		// Input operand registers
+reg	[31:0]	out;			// Output register
+reg		div_by_zero;		// Divide by zero output register
+wire		signa, signb;		// alias to opX sign
+wire		sign_fasu;		// sign output
+wire	[26:0]	fracta, fractb;		// Fraction Outputs from EQU block
+wire	[7:0]	exp_fasu;		// Exponent output from EQU block
+reg	[7:0]	exp_r;			// Exponent output (registerd)
+wire	[26:0]	fract_out_d;		// fraction output
+wire		co;			// carry output
+reg	[27:0]	fract_out_q;		// fraction output (registerd)
+wire	[30:0]	out_d;			// Intermediate final result output
+wire		overflow_d, underflow_d;// Overflow/Underflow Indicators
+reg		overflow, underflow;	// Output registers for Overflow & Underflow
+reg		inf, snan, qnan;	// Output Registers for INF, SNAN and QNAN
+reg		ine;			// Output Registers for INE
+reg	[1:0]	rmode_r1, rmode_r2, 	// Pipeline registers for rounding mode
+		rmode_r3;
+reg	[2:0]	fpu_op_r1, fpu_op_r2,	// Pipeline registers for fp opration
+		fpu_op_r3;
+wire		mul_inf, div_inf;
+wire		mul_00, div_00;
+/*
+parameter	INF  = 31'h7f800000;
+parameter	QNAN = 31'h7fc00001;
+parameter	 SNAN = 31'h7f800001;
+
+*/
+wire	[1:0]	rmode;
+assign rmode = 2'b00;
+
+wire [30:0]	INF;
+assign INF = 31'h7f800000;
+wire [30:0]	QNAN; 
+assign QNAN = 31'h7fc00001;
+wire [30:0] SNAN;
+assign SNAN = 31'h7f800001;
+
+// start output_reg
+reg [31:0]  out_o1;
+reg     inf_o1, snan_o1, qnan_o1;
+reg     ine_o1;
+reg     overflow_o1, underflow_o1;
+reg     zero_o1;
+reg     div_by_zero_o1;
+// end output_reg
+
+wire [7:0] contorl;
+assign control = {inf, snan, qnan, ine, overflow, underflow, zero, div_by_zero};
+
+////////////////////////////////////////////////////////////////////////
+//
+// Input Registers
+//
+
+always @(posedge clk)  begin
+ fpu_op[2:0] <= 3'b010;
+end
+
+always @(posedge clk)
+	opa_r <= opa;
+
+always @(posedge clk)
+	opb_r <= opb;
+
+always @(posedge clk)
+	rmode_r1 <= rmode;
+
+always @(posedge clk)
+	rmode_r2 <= rmode_r1;
+
+always @(posedge clk)
+	rmode_r3 <= rmode_r2;
+
+always @(posedge clk)
+	fpu_op_r1 <= fpu_op;
+
+always @(posedge clk)
+	fpu_op_r2 <= fpu_op_r1;
+
+always @(posedge clk)
+	fpu_op_r3 <= fpu_op_r2;
+
+////////////////////////////////////////////////////////////////////////
+//
+// Exceptions block
+//
+wire		inf_d, ind_d, qnan_d, snan_d, opa_nan, opb_nan;
+wire		opa_00, opb_00;
+wire		opa_inf, opb_inf;
+wire		opa_dn, opb_dn;
+
+except u0(	.clk(clk),
+		.opa(opa_r[30:0]), .opb(opb_r[30:0]),
+		.inf(inf_d), .ind(ind_d),
+		.qnan(qnan_d), .snan(snan_d),
+		.opa_nan(opa_nan), .opb_nan(opb_nan),
+		.opa_00(opa_00), .opb_00(opb_00),
+		.opa_inf(opa_inf), .opb_inf(opb_inf),
+		.opa_dn(opa_dn), .opb_dn(opb_dn)
+		);
+
+////////////////////////////////////////////////////////////////////////
+//
+// Pre-Normalize block
+// - Adjusts the numbers to equal exponents and sorts them
+// - determine result sign
+// - determine actual operation to perform (add or sub)
+//
+
+wire		nan_sign_d, result_zero_sign_d;
+reg		sign_fasu_r;
+wire	[7:0]	exp_mul;
+wire		sign_mul;
+reg		sign_mul_r;
+wire	[23:0]	fracta_mul, fractb_mul;
+wire		inf_mul;
+reg		inf_mul_r;
+wire	[1:0]	exp_ovf;
+reg	[1:0]	exp_ovf_r;
+wire		sign_exe;
+reg		sign_exe_r;
+wire	[2:0]	underflow_fmul_d;
+
+pre_norm_fmul u2(
+		.clk(clk),
+		.fpu_op(fpu_op_r1),
+		.opa(opa_r), .opb(opb_r),
+		.fracta(fracta_mul),
+		.fractb(fractb_mul),
+		.exp_out(exp_mul),	// FMUL exponent output (registered)
+		.sign(sign_mul),	// FMUL sign output (registered)
+		.sign_exe(sign_exe),	// FMUL exception sign output (registered)
+		.inf(inf_mul),		// FMUL inf output (registered)
+		.exp_ovf(exp_ovf),	// FMUL exponnent overflow output (registered)
+		.underflow(underflow_fmul_d)
+		);
+
+always @(posedge clk)
+	sign_mul_r <=  sign_mul;
+
+always @(posedge clk)
+	sign_exe_r <=  sign_exe;
+
+always @(posedge clk)
+	inf_mul_r <=  inf_mul;
+
+always @(posedge clk)
+	exp_ovf_r <=  exp_ovf;
+
+
+////////////////////////////////////////////////////////////////////////
+//
+// Mul
+//
+wire	[47:0]	prod;
+
+mul_r2 u5(.clk(clk), .opa(fracta_mul), .opb(fractb_mul), .prod(prod));
+
+
+////////////////////////////////////////////////////////////////////////
+//
+// Normalize Result
+//
+wire		ine_d;
+reg	[47:0]	fract_denorm;
+wire	[47:0]	fract_div;
+wire		sign_d;
+reg		sign;
+reg	[30:0]	opa_r1;
+reg	[47:0]	fract_i2f;
+reg		opas_r1, opas_r2;
+wire		f2i_out_sign;
+
+always @(posedge clk)			// Exponent must be once cycle delayed
+	exp_r <=  exp_mul;
+
+always @(posedge clk)
+	opa_r1 <= opa_r[30:0];
+
+//always @(fpu_op_r3 or prod)
+always @(prod)
+	fract_denorm = prod;
+
+always @(posedge clk)
+	opas_r1 <=  opa_r[31];
+
+always @(posedge clk)
+	opas_r2 <=  opas_r1;
+
+assign sign_d =  sign_mul;
+
+always @(posedge clk)
+	sign <=  (rmode_r2==2'h3) ? !sign_d : sign_d;
+
+wire or_result;
+assign or_result = mul_00 | div_00;
+post_norm u4(
+//.clk(clk),			// System Clock
+	.fpu_op(fpu_op_r3),		// Floating Point Operation
+	.opas(opas_r2),			// OPA Sign
+	.sign(sign),			// Sign of the result
+	.rmode(rmode_r3),		// Rounding mode
+	.fract_in(fract_denorm),	// Fraction Input
+	.exp_in(exp_r),			// Exponent Input
+	.exp_ovf(exp_ovf_r),		// Exponent Overflow
+	.opa_dn(opa_dn),		// Operand A Denormalized
+	.opb_dn(opb_dn),		// Operand A Denormalized
+	.rem_00(1'b0),		// Diveide Remainder is zero
+	.div_opa_ldz(5'b00000),	// Divide opa leading zeros count
+//	.output_zero(mul_00 | div_00),	// Force output to Zero
+	.output_zero(or_result),	// Force output to Zero
+	.out(out_d),			// Normalized output (un-registered)
+	.ine(ine_d),			// Result Inexact output (un-registered)
+	.overflow(overflow_d),		// Overflow output (un-registered)
+	.underflow(underflow_d),	// Underflow output (un-registered)
+	.f2i_out_sign(f2i_out_sign)	// F2I Output Sign
+	);
+
+////////////////////////////////////////////////////////////////////////
+//
+// FPU Outputs
+//
+wire	[30:0]	out_fixed;
+wire		output_zero_fasu;
+wire		output_zero_fdiv;
+wire		output_zero_fmul;
+reg		inf_mul2;
+wire		overflow_fasu;
+wire		overflow_fmul;
+wire		overflow_fdiv;
+wire		inf_fmul;
+wire		sign_mul_final;
+wire		out_d_00;
+wire		sign_div_final;
+wire		ine_mul, ine_mula, ine_div, ine_fasu;
+wire		underflow_fasu, underflow_fmul, underflow_fdiv;
+wire		underflow_fmul1;
+reg	[2:0]	underflow_fmul_r;
+reg		opa_nan_r;
+
+
+
+always @(posedge clk)
+	inf_mul2 <=  exp_mul == 8'hff;
+
+
+// Force pre-set values for non numerical output
+assign mul_inf = (fpu_op_r3==3'b010) & (inf_mul_r | inf_mul2) & (rmode_r3==2'h0);
+assign div_inf = (fpu_op_r3==3'b011) & (opb_00 | opa_inf);
+
+assign mul_00 = (fpu_op_r3==3'b010) & (opa_00 | opb_00);
+assign div_00 = (fpu_op_r3==3'b011) & (opa_00 | opb_inf);
+
+assign out_fixed = 
+	( (qnan_d | snan_d) | 
+		(opa_inf & opb_00)|
+		(opb_inf & opa_00 )
+	)  ? QNAN : INF;
+
+always @(posedge clk)
+	out_o1[30:0] <=  (mul_inf | div_inf | inf_d | snan_d | qnan_d) ?  out_fixed : out_d;
+
+assign out_d_00 = !(|out_d);
+
+assign sign_mul_final = (sign_exe_r & ((opa_00 & opb_inf) | (opb_00 & opa_inf))) ? !sign_mul_r : sign_mul_r;
+
+assign sign_div_final = (sign_exe_r & (opa_inf & opb_inf)) ? !sign_mul_r : sign_mul_r | (opa_00 & opb_00);
+
+always @(posedge clk)
+//	out_o1[31] <= 	 !(snan_d | qnan_d) ?	sign_mul_final : nan_sign_d ;
+  out_o1[31] <= !(snan_d | qnan_d) & sign_mul_final;
+
+// Exception Outputs
+assign ine_mula = ((inf_mul_r |  inf_mul2 | opa_inf | opb_inf) & (rmode_r3==2'h1) & 
+		!((opa_inf & opb_00) | (opb_inf & opa_00 )) & fpu_op_r3[1]);
+
+assign ine_mul  = (ine_mula | ine_d | inf_fmul | out_d_00 | overflow_d | underflow_d) &
+		  !opa_00 & !opb_00 & !(snan_d | qnan_d | inf_d);
+
+always @(posedge  clk)
+	ine_o1 <=  ine_mul;
+
+
+assign overflow_fmul = !inf_d & (inf_mul_r | inf_mul2 | overflow_d) & !(snan_d | qnan_d);
+
+always @(posedge clk)
+	overflow_o1 <= 	 overflow_fmul;
+
+always @(posedge clk)
+	underflow_fmul_r <=  underflow_fmul_d;
+
+wire out_d_compare1;
+assign out_d_compare1 = (out_d[30:23]==8'b0);
+
+wire out_d_compare2;
+assign out_d_compare2 = (out_d[22:0]==23'b0);
+/*
+assign underflow_fmul1 = underflow_fmul_r[0] |
+			(underflow_fmul_r[1] & underflow_d ) |
+			((opa_dn | opb_dn) & out_d_00 & (prod!=0) & sign) |
+			(underflow_fmul_r[2] & ((out_d[30:23]==8'b0) | (out_d[22:0]==23'b0)));
+*/
+assign underflow_fmul1 = underflow_fmul_r[0] |
+			(underflow_fmul_r[1] & underflow_d ) |
+			((opa_dn | opb_dn) & out_d_00 & (prod!=48'b0) & sign) |
+			(underflow_fmul_r[2] & (out_d_compare1 | out_d_compare2));
+
+
+assign underflow_fmul = underflow_fmul1 & !(snan_d | qnan_d | inf_mul_r);
+/*
+always @(posedge clk)
+begin
+	underflow_o1 <=  1'b0;
+	snan_o1 <= 1'b0;
+	qnan_o1 <= 1'b0;
+	inf_fmul <= 1'b0;
+	inf_o1 <= 1'b0;
+	zero_o1 <= 1'b0;
+	opa_nan_r <= 1'b0;
+	div_by_zero_o1 <= 1'b0;
+end
+assign output_zero_fmul = 1'b0;
+*/
+
+
+always @(posedge clk)
+	underflow_o1 <=   underflow_fmul;
+
+always @(posedge clk)
+	snan_o1 <=  snan_d;
+
+// Status Outputs
+always @(posedge clk)
+	qnan_o1 <= 	 ( snan_d | qnan_d |
+				(((opa_inf & opb_00) | (opb_inf & opa_00 )) & fpu_op_r3==3'b010)
+					   );
+
+assign inf_fmul = 	(((inf_mul_r | inf_mul2) & (rmode_r3==2'h0)) | opa_inf | opb_inf) & 
+			!((opa_inf & opb_00) | (opb_inf & opa_00 )) &
+			fpu_op_r3==3'b010;
+
+always @(posedge clk)
+/*
+	inf_o1 <= 	fpu_op_r3[2] ? 1'b0 :
+			(!(qnan_d | snan_d) & 
+			( ((&out_d[30:23]) & !(|out_d[22:0]) & !(opb_00 & fpu_op_r3==3'b011)) | inf_fmul)
+			);
+*/
+	inf_o1 <= !fpu_op_r3[2] & (!(qnan_d | snan_d) & 
+			( ((&out_d[30:23]) & !(|out_d[22:0]) & !(opb_00 & fpu_op_r3==3'b011)) | inf_fmul)
+			);
+
+assign output_zero_fmul = (out_d_00 | opa_00 | opb_00) &
+			  !(inf_mul_r | inf_mul2 | opa_inf | opb_inf | snan_d | qnan_d) &
+			  !(opa_inf & opb_00) & !(opb_inf & opa_00);
+
+always @(posedge clk)
+	zero_o1 <=  output_zero_fmul;
+
+always @(posedge clk)
+	opa_nan_r <=  (!opa_nan) & (fpu_op_r2==3'b011) ;
+
+always @(posedge clk)
+	div_by_zero_o1 <=  opa_nan_r & !opa_00 & !opa_inf & opb_00;
+
+
+// output register
+always @(posedge clk)
+begin
+	qnan <=  qnan_o1;
+	out <=  out_o1;
+	inf <=  inf_o1;
+	snan <=  snan_o1;
+	//qnan <=  qnan_o1;
+	ine <=  ine_o1;
+	overflow <=  overflow_o1;
+	underflow <=  underflow_o1;
+	zero <=  zero_o1;
+	div_by_zero <=  div_by_zero_o1;
+end
+endmodule
+
+
+//---------------------------------------------------------------------------------
+module except(	clk, opa, opb, inf, ind, qnan, snan, opa_nan, opb_nan,
+		opa_00, opb_00, opa_inf, opb_inf, opa_dn, opb_dn);
+input		clk;
+input	[30:0]	opa, opb;
+output		inf, ind, qnan, snan, opa_nan, opb_nan;
+output		opa_00, opb_00;
+output		opa_inf, opb_inf;
+output		opa_dn;
+output		opb_dn;
+
+////////////////////////////////////////////////////////////////////////
+//
+// Local Wires and registers
+//
+
+wire	[7:0]	expa, expb;		// alias to opX exponent
+wire	[22:0]	fracta, fractb;		// alias to opX fraction
+reg		expa_ff, infa_f_r, qnan_r_a, snan_r_a;
+reg		expb_ff, infb_f_r, qnan_r_b, snan_r_b;
+reg		inf, ind, qnan, snan;	// Output registers
+reg		opa_nan, opb_nan;
+reg		expa_00, expb_00, fracta_00, fractb_00;
+reg		opa_00, opb_00;
+reg		opa_inf, opb_inf;
+reg		opa_dn, opb_dn;
+
+////////////////////////////////////////////////////////////////////////
+//
+// Aliases
+//
+
+assign   expa = opa[30:23];
+assign   expb = opb[30:23];
+assign fracta = opa[22:0];
+assign fractb = opb[22:0];
+
+////////////////////////////////////////////////////////////////////////
+//
+// Determine if any of the input operators is a INF or NAN or any other special number
+//
+
+always @(posedge clk)
+	expa_ff <=  &expa;
+
+always @(posedge clk)
+	expb_ff <=  &expb;
+	
+always @(posedge clk)
+	infa_f_r <=  !(|fracta);
+
+always @(posedge clk)
+	infb_f_r <=  !(|fractb);
+
+always @(posedge clk)
+	qnan_r_a <=   fracta[22];
+
+always @(posedge clk)
+	snan_r_a <=  !fracta[22] & |fracta[21:0];
+	
+always @(posedge clk)
+	qnan_r_b <=   fractb[22];
+
+always @(posedge clk)
+	snan_r_b <=  !fractb[22] & |fractb[21:0];
+
+always @(posedge clk)
+	ind  <=  (expa_ff & infa_f_r) & (expb_ff & infb_f_r);
+
+always @(posedge clk)
+	inf  <=  (expa_ff & infa_f_r) | (expb_ff & infb_f_r);
+
+always @(posedge clk)
+	qnan <=  (expa_ff & qnan_r_a) | (expb_ff & qnan_r_b);
+
+always @(posedge clk)
+	snan <=  (expa_ff & snan_r_a) | (expb_ff & snan_r_b);
+
+always @(posedge clk)
+	opa_nan <=  &expa & (|fracta[22:0]);
+
+always @(posedge clk)
+	opb_nan <=  &expb & (|fractb[22:0]);
+
+always @(posedge clk)
+	opa_inf <=  (expa_ff & infa_f_r);
+
+always @(posedge clk)
+	opb_inf <=  (expb_ff & infb_f_r);
+
+always @(posedge clk)
+	expa_00 <=  !(|expa);
+
+always @(posedge clk)
+	expb_00 <=  !(|expb);
+
+always @(posedge clk)
+	fracta_00 <=  !(|fracta);
+
+always @(posedge clk)
+	fractb_00 <=  !(|fractb);
+
+always @(posedge clk)
+	opa_00 <=  expa_00 & fracta_00;
+
+always @(posedge clk)
+	opb_00 <=  expb_00 & fractb_00;
+
+always @(posedge clk)
+	opa_dn <=  expa_00;
+
+always @(posedge clk)
+	opb_dn <=  expb_00;
+
+endmodule
+
+
+
+
+//---------------------------------------------------------------------------------
+module pre_norm_fmul(clk, fpu_op, opa, opb, fracta, fractb, exp_out, sign,
+		sign_exe, inf, exp_ovf, underflow);
+input		clk;
+input	[2:0]	fpu_op;
+input	[31:0]	opa, opb;
+output	[23:0]	fracta, fractb;
+output	[7:0]	exp_out;
+output		sign, sign_exe;
+output		inf;
+output	[1:0]	exp_ovf;
+output	[2:0]	underflow;
+
+////////////////////////////////////////////////////////////////////////
+//
+// Local Wires and registers
+//
+
+reg	[7:0]	exp_out;
+wire		signa, signb;
+reg		sign, sign_d;
+reg		sign_exe;
+reg		inf;
+wire	[1:0]	exp_ovf_d;
+reg	[1:0]	exp_ovf;
+wire	[7:0]	expa, expb;
+wire	[7:0]	exp_tmp1, exp_tmp2;
+wire		co1, co2;
+wire		expa_dn, expb_dn;
+wire	[7:0]	exp_out_a;
+wire		opa_00, opb_00, fracta_00, fractb_00;
+wire	[7:0]	exp_tmp3, exp_tmp4, exp_tmp5;
+wire	[2:0]	underflow_d;
+reg	[2:0]	underflow;
+wire		op_div;
+wire	[7:0]	exp_out_mul, exp_out_div;
+
+assign op_div = (fpu_op == 3'b011);
+////////////////////////////////////////////////////////////////////////
+//
+// Aliases
+//
+assign  signa = opa[31];
+assign  signb = opb[31];
+assign   expa = opa[30:23];
+assign   expb = opb[30:23];
+
+////////////////////////////////////////////////////////////////////////
+//
+// Calculate Exponenet
+//
+
+assign expa_dn   = !(|expa);
+assign expb_dn   = !(|expb);
+assign opa_00    = !(|opa[30:0]);
+assign opb_00    = !(|opb[30:0]);
+assign fracta_00 = !(|opa[22:0]);
+assign fractb_00 = !(|opb[22:0]);
+
+assign fracta[22:0] = opa[22:0];
+assign fractb[22:0] = opb[22:0];
+assign fracta[23:23] = !expa_dn;
+assign fractb[23:23] = !expb_dn;
+//assign fracta = {!expa_dn,opa[22:0]};	// Recover hidden bit
+//assign fractb = {!expb_dn,opb[22:0]};	// Recover hidden bit
+
+assign {co1,exp_tmp1} = op_div ? ({1'b0,expa[7:0]} - {1'b0,expb[7:0]}) : ({1'b0,expa[7:0]} + {1'b0,expb[7:0]});
+assign {co2,exp_tmp2} = op_div ? ({co1,exp_tmp1} + 9'h07f) : ({co1,exp_tmp1} - 9'h07f);
+assign exp_tmp3 = exp_tmp2 + 8'h01;
+assign exp_tmp4 = 8'h7f - exp_tmp1;
+assign exp_tmp5 = op_div ? (exp_tmp4+8'h01) : (exp_tmp4-8'h01);
+
+
+always@(posedge clk)
+	exp_out <= op_div ? exp_out_div : exp_out_mul;
+
+assign exp_out_div = (expa_dn | expb_dn) ? (co2 ? exp_tmp5 : exp_tmp3 ) : co2 ? exp_tmp4 : exp_tmp2;
+assign exp_out_mul = exp_ovf_d[1] ? exp_out_a : (expa_dn | expb_dn) ? exp_tmp3 : exp_tmp2;
+assign exp_out_a   = (expa_dn | expb_dn) ? exp_tmp5 : exp_tmp4;
+assign exp_ovf_d[0] = op_div ? (expa[7] & !expb[7]) : (co2 & expa[7] & expb[7]);
+assign exp_ovf_d[1] = op_div ? co2                  : ((!expa[7] & !expb[7] & exp_tmp2[7]) | co2);
+
+always @(posedge clk)
+	exp_ovf <=   exp_ovf_d;
+
+assign underflow_d[0] =	(exp_tmp1 < 8'h7f) & !co1 & !(opa_00 | opb_00 | expa_dn | expb_dn);
+assign underflow_d[1] =	((expa[7] | expb[7]) & !opa_00 & !opb_00) |
+			 (expa_dn & !fracta_00) | (expb_dn & !fractb_00);
+assign underflow_d[2] =	 !opa_00 & !opb_00 & (exp_tmp1 == 8'h7f);
+
+always @(posedge clk)
+	underflow <= underflow_d;
+
+always @(posedge clk)
+	inf <= op_div ? (expb_dn & !expa[7]) : ({co1,exp_tmp1} > 9'h17e) ;
+
+
+////////////////////////////////////////////////////////////////////////
+//
+// Determine sign for the output
+//
+
+// sign: 0=Posetive Number; 1=Negative Number
+always @(signa or signb)
+   case({signa, signb})		// synopsys full_case parallel_case
+	2'b00: sign_d = 0;
+	2'b01: sign_d = 1;
+	2'b10: sign_d = 1;
+	2'b11: sign_d = 0;
+   endcase
+
+always @(posedge clk)
+	sign <= sign_d;
+
+always @(posedge clk)
+	sign_exe <= signa & signb;
+
+endmodule
+
+//----------------------------------------------------------------------------
+////////////////////////////////////////////////////////////////////////
+//
+// Multiply
+//
+
+module mul_r2(clk, opa, opb, prod);
+input		clk;
+input	[23:0]	opa, opb;
+output	[47:0]	prod;
+
+reg	[47:0]	prod1, prod;
+
+always @(posedge clk)
+	prod1 <=   opa * opb;
+
+always @(posedge clk)
+	prod <=   prod1;
+
+endmodule
+
+
+
+//----------------------------------------------------------------------------
+
+
+module post_norm( fpu_op, opas, sign, rmode, fract_in, exp_in, exp_ovf,
+		opa_dn, opb_dn, rem_00, div_opa_ldz, output_zero, out,
+		ine, overflow, underflow, f2i_out_sign);
+	input	[2:0]	fpu_op;
+	input		opas;
+	input		sign;
+	input	[1:0]	rmode;
+	input	[47:0]	fract_in;
+	input	[7:0]	exp_in;
+	input	[1:0]	exp_ovf;
+	input		opa_dn, opb_dn;
+	input		rem_00;
+	input	[4:0]	div_opa_ldz;
+	input		output_zero;
+	output	[30:0]	out;
+	output		ine;
+	output		overflow, underflow;
+	output		f2i_out_sign;
+
+	////////////////////////////////////////////////////////////////////////
+	//
+	// Local Wires and registers
+	//
+
+	wire	[22:0]	fract_out;
+	wire	[7:0]	exp_out;
+	wire	[30:0]	out;
+	wire		exp_out1_co, overflow, underflow;
+	wire	[22:0]	fract_out_final;
+	reg	[22:0]	fract_out_rnd;
+	wire	[8:0]	exp_next_mi;
+	wire		dn;
+	wire		exp_rnd_adj;
+	wire	[7:0]	exp_out_final;
+	reg	[7:0]	exp_out_rnd;
+	wire		op_dn;
+
+	wire		op_mul;
+	wire		op_div;
+	wire		op_i2f;
+	wire		op_f2i;
+
+
+	//reg	[5:0]	fi_ldz;
+	wire	[5:0]	fi_ldz;
+
+	wire		g, r, s;
+	wire		round, round2, round2a, round2_fasu, round2_fmul;
+	wire	[7:0]	exp_out_rnd0, exp_out_rnd1, exp_out_rnd2, exp_out_rnd2a;
+	wire	[22:0]	fract_out_rnd0, fract_out_rnd1, fract_out_rnd2, fract_out_rnd2a;
+	wire		exp_rnd_adj0, exp_rnd_adj2a;
+	wire		r_sign;
+	wire		ovf0, ovf1;
+	wire	[23:0]	fract_out_pl1;
+	wire	[7:0]	exp_out_pl1, exp_out_mi1;
+	wire		exp_out_00, exp_out_fe, exp_out_ff, exp_in_00, exp_in_ff;
+	wire		exp_out_final_ff, fract_out_7fffff;
+	wire	[24:0]	fract_trunc;
+	wire	[7:0]	exp_out1;
+	wire		grs_sel;
+	wire		fract_out_00, fract_in_00;
+	wire		shft_co;
+	wire	[8:0]	exp_in_pl1, exp_in_mi1;
+	wire	[47:0]	fract_in_shftr;
+	wire	[47:0]	fract_in_shftl;
+
+	// for block shifter
+	wire	[47:0]	fract_in_shftr_1;
+	wire	[47:0]	fract_in_shftl_1;
+	// end for block shifter
+
+	wire	[7:0]	exp_div;
+	wire	[7:0]	shft2;
+	wire	[7:0]	exp_out1_mi1;
+	wire		div_dn;
+	wire		div_nr;
+	wire		grs_sel_div;
+
+	wire		div_inf;
+	wire	[6:0]	fi_ldz_2a;
+	wire	[7:0]	fi_ldz_2;
+	wire	[7:0]	div_shft1, div_shft2, div_shft3, div_shft4;
+	wire		div_shft1_co;
+	wire	[8:0]	div_exp1;
+	wire	[7:0]	div_exp2, div_exp3;
+	wire		left_right, lr_mul, lr_div;
+	wire	[7:0]	shift_right, shftr_mul, shftr_div;
+	wire	[7:0]	shift_left,  shftl_mul, shftl_div;
+	wire	[7:0]	fasu_shift;
+	wire	[7:0]	exp_fix_div;
+
+	wire	[7:0]	exp_fix_diva, exp_fix_divb;
+	wire	[5:0]	fi_ldz_mi1;
+	wire	[5:0]	fi_ldz_mi22;
+	wire		exp_zero;
+	wire	[6:0]	ldz_all;
+	wire	[7:0]	ldz_dif;
+
+	wire	[8:0]	div_scht1a;
+	wire	[7:0]	f2i_shft;
+	wire	[55:0]	exp_f2i_1;
+	wire		f2i_zero, f2i_max;
+	wire	[7:0]	f2i_emin;
+	wire	[7:0]	conv_shft;
+	wire	[7:0]	exp_i2f, exp_f2i, conv_exp;
+	wire		round2_f2i;
+
+
+	assign		op_mul = fpu_op[2:0]==3'b010;
+	assign		op_div = fpu_op[2:0]==3'b011;
+	assign		op_i2f = fpu_op[2:0]==3'b100;
+	assign		op_f2i = fpu_op[2:0]==3'b101;
+	assign		op_dn = opa_dn | opb_dn;
+
+	pri_encoder u6(
+		.fract_in (fract_in),
+		.fi_ldz (fi_ldz)
+	);
+
+	// ---------------------------------------------------------------------
+	// Normalize
+
+	wire		exp_in_80;
+	wire		rmode_00, rmode_01, rmode_10, rmode_11;
+
+	// Misc common signals
+	assign exp_in_ff        = &exp_in;
+	assign exp_in_00        = !(|exp_in);
+	assign exp_in_80	= exp_in[7] & !(|exp_in[6:0]);
+	assign exp_out_ff       = &exp_out;
+	assign exp_out_00       = !(|exp_out);
+	assign exp_out_fe       = &exp_out[7:1] & !exp_out[0];
+	assign exp_out_final_ff = &exp_out_final;
+
+	assign fract_out_7fffff = &fract_out;
+	assign fract_out_00     = !(|fract_out);
+	assign fract_in_00      = !(|fract_in);
+
+	assign rmode_00 = (rmode==2'b00);
+	assign rmode_01 = (rmode==2'b01);
+	assign rmode_10 = (rmode==2'b10);
+	assign rmode_11 = (rmode==2'b11);
+
+	// Fasu Output will be denormalized ...
+	assign dn = !op_mul & !op_div & (exp_in_00 | (exp_next_mi[8] & !fract_in[47]) );
+
+	// ---------------------------------------------------------------------
+	// Fraction Normalization
+	wire[7:0] f2i_emax;
+	assign f2i_emax = 8'h9d;
+	//parameter	f2i_emax = 8'h9d;
+
+	// Incremented fraction for rounding
+	assign fract_out_pl1 = {1'b0, fract_out} + 24'h000001;
+
+	// Special Signals for f2i
+	assign f2i_emin = rmode_00 ? 8'h7e : 8'h7f;
+	assign f2i_zero = (!opas & (exp_in<f2i_emin)) | (opas & (exp_in>f2i_emax)) | (opas & (exp_in<f2i_emin) & (fract_in_00 | !rmode_11));
+	assign f2i_max = (!opas & (exp_in>f2i_emax)) | (opas & (exp_in<f2i_emin) & !fract_in_00 & rmode_11);
+
+	// Calculate various shifting options
+
+	assign {shft_co,shftr_mul} = (!exp_ovf[1] & exp_in_00) ? {1'b0, exp_out} : exp_in_mi1 ;
+	assign {div_shft1_co, div_shft1} = exp_in_00 ? {1'b0, div_opa_ldz} : div_scht1a;
+	assign div_scht1a = {1'b0, exp_in}-{4'b0, div_opa_ldz}; // 9 bits - includes carry out
+	assign div_shft2  = exp_in+8'h02;
+	assign div_shft3  = {3'b0, div_opa_ldz}+exp_in;
+	assign div_shft4  = {3'b0, div_opa_ldz}-exp_in;
+
+	assign div_dn    = op_dn & div_shft1_co;
+	assign div_nr    = op_dn & exp_ovf[1]  & !(|fract_in[46:23]) & (div_shft3>8'h16);
+
+	assign f2i_shft  = exp_in-8'h7d;
+
+	// Select shifting direction
+	assign left_right = op_div ? lr_div : op_mul ? lr_mul :1'b1;
+
+	assign lr_div = 	(op_dn & !exp_ovf[1] & exp_ovf[0])     ? 1'b1 :
+				(op_dn & exp_ovf[1])                   ? 1'b0 :
+				(op_dn & div_shft1_co)                 ? 1'b0 :
+				(op_dn & exp_out_00)                   ? 1'b1 :
+				(!op_dn & exp_out_00 & !exp_ovf[1])    ? 1'b1 :
+				exp_ovf[1]                             ? 1'b0 :
+					                                 1'b1;
+	assign lr_mul = 	(shft_co | (!exp_ovf[1] & exp_in_00) |
+				(!exp_ovf[1] & !exp_in_00 & (exp_out1_co | exp_out_00) )) ? 	1'b1 :
+				( exp_ovf[1] | exp_in_00 ) ?					1'b0 :
+												1'b1;
+
+	// Select Left and Right shift value
+	assign fasu_shift  = (dn | exp_out_00) ? (exp_in_00 ? 8'h02 : exp_in_pl1[7:0]) : {2'h0, fi_ldz};
+	assign shift_right = op_div ? shftr_div : shftr_mul;
+
+	assign conv_shft = op_f2i ? f2i_shft : {2'h0, fi_ldz};
+
+	assign shift_left  = op_div ? shftl_div : op_mul ? shftl_mul : (op_f2i | op_i2f) ? conv_shft : fasu_shift;
+
+	assign shftl_mul = 	(shft_co |
+				(!exp_ovf[1] & exp_in_00) |
+				(!exp_ovf[1] & !exp_in_00 & (exp_out1_co | exp_out_00))) ? exp_in_pl1[7:0] : {2'h0, fi_ldz};
+
+	assign shftl_div = 	( op_dn & exp_out_00 & !(!exp_ovf[1] & exp_ovf[0]))	? div_shft1[7:0] :
+				(!op_dn & exp_out_00 & !exp_ovf[1])    			? exp_in[7:0] :
+					                                		 {2'h0, fi_ldz};
+	assign shftr_div = 	(op_dn & exp_ovf[1])                   ? div_shft3 :
+				(op_dn & div_shft1_co)                 ? div_shft4 : div_shft2;
+	// Do the actual shifting
+	//assign fract_in_shftr   = (|shift_right[7:6])                      ? 0 : fract_in>>shift_right[5:0];
+	//assign fract_in_shftl   = (|shift_left[7:6] | (f2i_zero & op_f2i)) ? 0 : fract_in<<shift_left[5:0];
+
+	b_right_shifter u1(
+		.shift_in (fract_in),
+		.shift_value (shift_right[5:0]),
+		.shift_out (fract_in_shftr_1)
+	);
+
+	assign fract_in_shftr   = (|shift_right[7:6]) ? 48'b0 : fract_in_shftr_1; // fract_in>>shift_right[5:0];
+
+
+	b_left_shifter u7(
+		.shift_in (fract_in),
+		.shift_value (shift_left[5:0]),
+		.shift_out (fract_in_shftl_1)
+	);
+
+	assign fract_in_shftl   = (|shift_left[7:6] | (f2i_zero & op_f2i)) ? 48'b0 : fract_in_shftl_1; // fract_in<<shift_left[5:0];
+
+
+	// Chose final fraction output
+	assign {fract_out,fract_trunc} = left_right ? fract_in_shftl : fract_in_shftr;
+
+	// ---------------------------------------------------------------------
+	// Exponent Normalization
+
+	assign fi_ldz_mi1    = fi_ldz - 6'h01;
+	assign fi_ldz_mi22   = fi_ldz - 6'd22;
+	assign exp_out_pl1   = exp_out + 8'h01;
+	assign exp_out_mi1   = exp_out - 8'h01;
+	assign exp_in_pl1    = {1'b0, exp_in}  + 9'd1;	// 9 bits - includes carry out
+	assign exp_in_mi1    = {1'b0, exp_in}  - 9'd1;	// 9 bits - includes carry out
+	assign exp_out1_mi1  = exp_out1 - 8'h01;
+
+	assign exp_next_mi  = exp_in_pl1 - {3'b0, fi_ldz_mi1};	// 9 bits - includes carry out
+
+	assign exp_fix_diva = exp_in - {2'b0, fi_ldz_mi22};
+	assign exp_fix_divb = exp_in - {2'b0, fi_ldz_mi1};
+
+	//assign exp_zero  = (exp_ovf[1] & !exp_ovf[0] & op_mul & (!exp_rnd_adj2a | !rmode[1])) | (op_mul & exp_out1_co);
+	assign exp_zero  = (exp_ovf[1] & !exp_ovf[0] & op_mul ) | (op_mul & exp_out1_co);
+
+	assign {exp_out1_co, exp_out1} = fract_in[47] ? exp_in_pl1 : exp_next_mi;
+
+	assign f2i_out_sign =  !opas ? ((exp_in<f2i_emin) ? 1'b0 : (exp_in>f2i_emax) ? 1'b0 : opas) :
+				       ((exp_in<f2i_emin) ? 1'b0 : (exp_in>f2i_emax) ? 1'b1 : opas);
+
+	assign exp_i2f   = fract_in_00 ? (opas ? 8'h9e : 8'h00) : (8'h9e-{2'b0, fi_ldz});
+
+	//assign exp_f2i_1 = {{8{fract_in[47]}}, fract_in }<<f2i_shft;
+	b_left_shifter_new u3(
+		.shift_in ({{8{fract_in[47]}}, fract_in }),
+		.shift_value (f2i_shft[5:0]),
+		.shift_out (exp_f2i_1)
+	);
+
+	assign exp_f2i   = f2i_zero ? 8'h00 : f2i_max ? 8'hff : exp_f2i_1[55:48];
+	assign conv_exp  = op_f2i ? exp_f2i : exp_i2f;
+
+	assign exp_out = op_div ? exp_div : (op_f2i | op_i2f) ? conv_exp : exp_zero ? 8'h0 : dn ? {6'h0, fract_in[47:46]} : exp_out1;
+
+	assign ldz_all   = {2'b0, div_opa_ldz} + {1'b0, fi_ldz};
+	assign ldz_dif   = fi_ldz_2 - {3'b0, div_opa_ldz};
+	assign fi_ldz_2a = 7'd23 - {1'b0,fi_ldz};
+	assign fi_ldz_2  = {fi_ldz_2a[6], fi_ldz_2a[6:0]};
+
+	assign div_exp1  = exp_in_mi1 + {1'b0, fi_ldz_2};	// 9 bits - includes carry out
+
+	assign div_exp2  = exp_in_pl1[7:0] - {1'b0, ldz_all};
+	assign div_exp3  = exp_in + ldz_dif;
+
+	assign exp_div =(opa_dn & opb_dn)? div_exp3 : opb_dn? div_exp1[7:0] :
+			(opa_dn & !( (exp_in[4:0]<div_opa_ldz) | (div_exp2>8'hfe) ))	? div_exp2 :
+			(opa_dn | (exp_in_00 & !exp_ovf[1]) )			? 8'h00 :
+										  exp_out1_mi1;
+
+	assign div_inf = opb_dn & !opa_dn & (div_exp1[7:0] < 8'h7f);
+
+	// ---------------------------------------------------------------------
+	// Round
+
+	// Extract rounding (GRS) bits
+	assign grs_sel_div = op_div & (exp_ovf[1] | div_dn | exp_out1_co | exp_out_00);
+
+	assign g = grs_sel_div ? fract_out[0]                   : fract_out[0];
+	assign r = grs_sel_div ? (fract_trunc[24] & !div_nr)    : fract_trunc[24];
+	assign s = grs_sel_div ? |fract_trunc[24:0]             : (|fract_trunc[23:0] | (fract_trunc[24] & op_div));
+
+	// Round to nearest even
+	assign round = (g & r) | (r & s) ;
+	assign {exp_rnd_adj0, fract_out_rnd0} = round ? fract_out_pl1 : {1'b0, fract_out};
+	assign exp_out_rnd0 =  exp_rnd_adj0 ? exp_out_pl1 : exp_out;
+	assign ovf0 = exp_out_final_ff & !rmode_01 & !op_f2i;
+
+	// round to zero
+	assign fract_out_rnd1 = (exp_out_ff & !op_div & !dn & !op_f2i) ? 23'h7fffff : fract_out;
+	assign exp_fix_div    = (fi_ldz>6'd22) ? exp_fix_diva : exp_fix_divb;
+	assign exp_out_rnd1   = (g & r & s & exp_in_ff) ? (op_div ? exp_fix_div : exp_next_mi[7:0]) : (exp_out_ff & !op_f2i) ? exp_in : exp_out;
+	assign ovf1 = exp_out_ff & !dn;
+
+	// round to +inf (UP) and -inf (DOWN)
+	assign r_sign = sign;
+
+	assign round2a = !exp_out_fe | !fract_out_7fffff | (exp_out_fe & fract_out_7fffff);
+	assign round2_fasu = ((r | s) & !r_sign) & (!exp_out[7] | (exp_out[7] & round2a));
+
+	assign round2_fmul = !r_sign & 
+			(
+				(exp_ovf[1] & !fract_in_00 &
+					( ((!exp_out1_co | op_dn) & (r | s | (!rem_00 & op_div) )) | fract_out_00 | (!op_dn & !op_div))
+				 ) |
+				(
+					(r | s | (!rem_00 & op_div)) & (
+							(!exp_ovf[1] & (exp_in_80 | !exp_ovf[0])) | op_div |
+							( exp_ovf[1] & !exp_ovf[0] & exp_out1_co)
+						)
+				)
+			);
+
+	//assign round2_f2i = rmode_10 & (( |fract_in[23:0] & !opas & (exp_in<8'h80 )) | (|fract_trunc));
+	wire temp_fract_in;
+	assign temp_fract_in = |fract_in[23:0];
+	assign round2_f2i = rmode_10 & (( temp_fract_in & !opas & (exp_in<8'h80 )) | (|fract_trunc));
+
+	assign round2 = (op_mul | op_div) ? round2_fmul : op_f2i ? round2_f2i : round2_fasu;
+
+	assign {exp_rnd_adj2a, fract_out_rnd2a} = round2 ? fract_out_pl1 : {1'b0, fract_out};
+	assign exp_out_rnd2a  = exp_rnd_adj2a ? ((exp_ovf[1] & op_mul) ? exp_out_mi1 : exp_out_pl1) : exp_out;
+
+	assign fract_out_rnd2 = (r_sign & exp_out_ff & !op_div & !dn & !op_f2i) ? 23'h7fffff : fract_out_rnd2a;
+	assign exp_out_rnd2   = (r_sign & exp_out_ff & !op_f2i) ? 8'hfe      : exp_out_rnd2a;
+
+
+	// Choose rounding mode
+
+	always @(rmode or exp_out_rnd0 or exp_out_rnd1 or exp_out_rnd2)
+		case(rmode)	// synopsys full_case parallel_case
+		   2'b00: exp_out_rnd = exp_out_rnd0;
+		   2'b01: exp_out_rnd = exp_out_rnd1;
+		2'b10: exp_out_rnd = exp_out_rnd2;
+		2'b11: exp_out_rnd = exp_out_rnd2;
+		endcase
+
+	always @(rmode or fract_out_rnd0 or fract_out_rnd1 or fract_out_rnd2)
+		case (rmode)	// synopsys full_case parallel_case
+			2'b00: fract_out_rnd = fract_out_rnd0;
+			2'b01: fract_out_rnd = fract_out_rnd1;
+			2'b10: fract_out_rnd = fract_out_rnd2;
+			2'b11: fract_out_rnd = fract_out_rnd2;
+		endcase
+
+	// ---------------------------------------------------------------------
+	// Final Output Mux
+	// Fix Output for denormalized and special numbers
+	wire	max_num, inf_out;
+
+	assign	max_num =  ( !rmode_00 & (op_mul | op_div ) & (
+								  ( exp_ovf[1] &  exp_ovf[0]) |
+								  (!exp_ovf[1] & !exp_ovf[0] & exp_in_ff & (fi_ldz_2<8'd24) & (exp_out!=8'hfe) )
+								  )
+			   ) |
+
+			   ( op_div & (
+					   ( rmode_01 & ( div_inf |
+								 (exp_out_ff & !exp_ovf[1] ) |
+								 (exp_ovf[1] &  exp_ovf[0] )
+							)
+					   ) |
+		
+					   ( rmode[1] & !exp_ovf[1] & (
+									   ( exp_ovf[0] & exp_in_ff & r_sign & fract_in[47]
+									   ) |
+						
+									   (  r_sign & (
+											(fract_in[47] & div_inf) |
+											(exp_in[7] & !exp_out_rnd[7] & !exp_in_80 & exp_out!=8'h7f ) |
+											(exp_in[7] &  exp_out_rnd[7] & r_sign & exp_out_ff & op_dn &
+												 div_exp1>9'h0fe )
+											)
+									   ) |
+
+									   ( exp_in_00 & r_sign & (
+													div_inf |
+													(r_sign & exp_out_ff & fi_ldz_2<8'h18)
+												  )
+									   )
+								       )
+					  )
+				    )
+			   );
+
+
+	assign inf_out = (rmode[1] & (op_mul | op_div) & !r_sign & (	(exp_in_ff & !op_div) |
+									(exp_ovf[1] & exp_ovf[0] & (exp_in_00 | exp_in[7]) ) 
+								   )
+			) | (div_inf & op_div & (
+					 rmode_00 |
+					(rmode[1] & !exp_in_ff & !exp_ovf[1] & !exp_ovf[0] & !r_sign ) |
+					(rmode[1] & !exp_ovf[1] & exp_ovf[0] & exp_in_00 & !r_sign)
+					)
+			) | (op_div & rmode[1] & exp_in_ff & op_dn & !r_sign & (fi_ldz_2 < 8'd24)  & (exp_out_rnd!=8'hfe) );
+
+	assign fract_out_final =	(inf_out | ovf0 | output_zero ) ? 23'h000000 :
+					(max_num | (f2i_max & op_f2i) ) ? 23'h7fffff :
+					fract_out_rnd;
+
+	assign exp_out_final =	((op_div & exp_ovf[1] & !exp_ovf[0]) | output_zero ) ? 8'h00 :
+				((op_div & exp_ovf[1] &  exp_ovf[0] & rmode_00) | inf_out | (f2i_max & op_f2i) ) ? 8'hff :
+				max_num ? 8'hfe :
+				exp_out_rnd;
+
+
+	// ---------------------------------------------------------------------
+	// Pack Result
+
+	assign out = {exp_out_final, fract_out_final};
+
+	// ---------------------------------------------------------------------
+	// Exceptions
+	wire		underflow_fmul;
+	wire		overflow_fdiv;
+	wire		undeflow_div;
+
+	wire		z;
+	assign		z =	shft_co | ( exp_ovf[1] |  exp_in_00) |
+				(!exp_ovf[1] & !exp_in_00 & (exp_out1_co | exp_out_00));
+
+	assign underflow_fmul = ( (|fract_trunc) & z & !exp_in_ff ) |
+				(fract_out_00 & !fract_in_00 & exp_ovf[1]);
+
+
+	assign undeflow_div =	!(exp_ovf[1] &  exp_ovf[0] & rmode_00) & !inf_out & !max_num & exp_out_final!=8'hff & (
+
+				((|fract_trunc) & !opb_dn & (
+								( op_dn & !exp_ovf[1] & exp_ovf[0])	|
+								( op_dn &  exp_ovf[1])			|
+								( op_dn &  div_shft1_co)		| 
+								  exp_out_00				|
+								  exp_ovf[1]
+							  )
+
+				) |
+
+				( exp_ovf[1] & !exp_ovf[0] & (
+								(  op_dn & exp_in>8'h16 & fi_ldz<6'd23) |
+								(  op_dn & exp_in<8'd23 & fi_ldz<6'd23 & !rem_00) |
+								( !op_dn & (exp_in[7]==exp_div[7]) & !rem_00) |
+								( !op_dn & exp_in_00 & (exp_div[7:1]==7'h7f) ) |
+								( !op_dn & exp_in<8'h7f & exp_in>8'h20 )
+								)
+				) |
+
+				(!exp_ovf[1] & !exp_ovf[0] & (
+								( op_dn & fi_ldz<6'd23 & exp_out_00) |
+								( exp_in_00 & !rem_00) |
+								( !op_dn & ldz_all<7'd23 & exp_in==8'h01 & exp_out_00 & !rem_00)
+								)
+				)
+
+				);
+
+	assign underflow = op_div ? undeflow_div : op_mul ? underflow_fmul : (!fract_in[47] & exp_out1_co) & !dn;
+
+	assign overflow_fdiv =	inf_out |
+				(!rmode_00 & max_num) |
+				(exp_in[7] & op_dn & exp_out_ff) |
+				(exp_ovf[0] & (exp_ovf[1] | exp_out_ff) );
+
+	assign overflow  = op_div ? overflow_fdiv : (ovf0 | ovf1);
+
+	wire		f2i_ine;
+	assign f2i_ine =	(f2i_zero & !fract_in_00 & !opas) |
+				(|fract_trunc) |
+				(f2i_zero & (exp_in<8'h80) & opas & !fract_in_00) |
+				(f2i_max & rmode_11 & (exp_in<8'h80));
+
+
+
+	assign ine =	op_f2i ? f2i_ine :
+			op_i2f ? (|fract_trunc) :
+			((r & !dn) | (s & !dn) | max_num | (op_div & !rem_00));
+endmodule
+
+//-------------------------------------------------------------------------------------
+
+module pri_encoder ( fract_in, fi_ldz );
+
+input [47:0] fract_in;
+output [5:0] fi_ldz;
+reg [5:0] fi_ldz_r0;
+
+assign fi_ldz = fi_ldz_r0;
+
+always @(fract_in)
+begin
+	if (fract_in[47:47] == 1'b1) 
+		 fi_ldz_r0 = 6'd1;
+	else if (fract_in[47:46] == 2'b01) 
+		 fi_ldz_r0 = 6'd2;
+	else if (fract_in[47:45] == 3'b001) 
+		 fi_ldz_r0 = 6'd3;
+	else if (fract_in[47:44] == 4'b0001) 
+		 fi_ldz_r0 = 6'd4;
+	else if (fract_in[47:43] == 5'b00001) 
+		 fi_ldz_r0 = 6'd5;
+	else if (fract_in[47:42] == 6'b000001) 
+		 fi_ldz_r0 = 6'd6;
+	else if (fract_in[47:41] == 7'b0000001) 
+		 fi_ldz_r0 = 6'd7;
+	else if (fract_in[47:40] == 8'b00000001) 
+		 fi_ldz_r0 = 6'd8;
+	else if (fract_in[47:39] == 9'b000000001) 
+		 fi_ldz_r0 = 6'd9;
+	else if (fract_in[47:38] == 10'b0000000001) 
+		 fi_ldz_r0 = 6'd10;
+	else if (fract_in[47:37] == 11'b00000000001) 
+		 fi_ldz_r0 = 6'd11;
+	else if (fract_in[47:36] == 12'b000000000001) 
+		 fi_ldz_r0 = 6'd12;
+	else if (fract_in[47:35] == 13'b0000000000001) 
+		 fi_ldz_r0 = 6'd13;
+	else if (fract_in[47:34] == 14'b00000000000001) 
+		 fi_ldz_r0 = 6'd14;
+	else if (fract_in[47:33] == 15'b000000000000001) 
+		 fi_ldz_r0 = 6'd15;
+	else if (fract_in[47:32] == 16'b0000000000000001) 
+		 fi_ldz_r0 = 6'd16;
+	else if (fract_in[47:31] == 17'b00000000000000001) 
+		 fi_ldz_r0 = 6'd17;
+	else if (fract_in[47:30] == 18'b000000000000000001) 
+		 fi_ldz_r0 = 6'd18;
+	else if (fract_in[47:29] == 19'b0000000000000000001) 
+		 fi_ldz_r0 = 6'd19;
+	else if (fract_in[47:28] == 20'b00000000000000000001) 
+		 fi_ldz_r0 = 6'd20;
+	else if (fract_in[47:27] == 21'b000000000000000000001) 
+		 fi_ldz_r0 = 6'd21;
+	else if (fract_in[47:26] == 22'b0000000000000000000001) 
+		 fi_ldz_r0 = 6'd22;
+	else if (fract_in[47:25] == 23'b00000000000000000000001) 
+		 fi_ldz_r0 = 6'd23;
+	else if (fract_in[47:24] == 24'b000000000000000000000001) 
+		 fi_ldz_r0 = 6'd24;
+	else if (fract_in[47:23] == 25'b0000000000000000000000001) 
+		 fi_ldz_r0 = 6'd25;
+	else if (fract_in[47:22] == 26'b00000000000000000000000001) 
+		 fi_ldz_r0 = 6'd26;
+	else if (fract_in[47:21] == 27'b000000000000000000000000001) 
+		 fi_ldz_r0 = 6'd27;
+	else if (fract_in[47:20] == 28'b0000000000000000000000000001) 
+		 fi_ldz_r0 = 6'd28;
+	else if (fract_in[47:19] == 29'b00000000000000000000000000001) 
+		 fi_ldz_r0 = 6'd29;
+	else if (fract_in[47:18] == 30'b000000000000000000000000000001) 
+		 fi_ldz_r0 = 6'd30;
+	else if (fract_in[47:17] == 31'b0000000000000000000000000000001) 
+		 fi_ldz_r0 = 6'd31;
+	else if (fract_in[47:16] == 32'b00000000000000000000000000000001) 
+		 fi_ldz_r0 = 6'd32;
+	else if (fract_in[47:15] == 33'b000000000000000000000000000000001) 
+		 fi_ldz_r0 = 6'd33;
+	else if (fract_in[47:14] == 34'b0000000000000000000000000000000001) 
+		 fi_ldz_r0 = 6'd34;
+	else if (fract_in[47:13] == 35'b00000000000000000000000000000000001) 
+		 fi_ldz_r0 = 6'd35;
+	else if (fract_in[47:12] == 36'b000000000000000000000000000000000001) 
+		 fi_ldz_r0 = 6'd36;
+	else if (fract_in[47:11] == 37'b0000000000000000000000000000000000001) 
+		 fi_ldz_r0 = 6'd37;
+	else if (fract_in[47:10] == 38'b00000000000000000000000000000000000001) 
+		 fi_ldz_r0 = 6'd38;
+	else if (fract_in[47:9]  == 39'b000000000000000000000000000000000000001) 
+		 fi_ldz_r0 = 6'd39;
+	else if (fract_in[47:8]  == 40'b0000000000000000000000000000000000000001) 
+		 fi_ldz_r0 = 6'd40;
+	else if (fract_in[47:7]  == 41'b00000000000000000000000000000000000000001) 
+		 fi_ldz_r0 = 6'd41;
+	else if (fract_in[47:6]  == 42'b000000000000000000000000000000000000000001) 
+		 fi_ldz_r0 = 6'd42;
+	else if (fract_in[47:5]  == 43'b0000000000000000000000000000000000000000001) 
+		 fi_ldz_r0 = 6'd43;
+	else if (fract_in[47:4]  == 44'b00000000000000000000000000000000000000000001) 
+		 fi_ldz_r0 = 6'd44;
+	else if (fract_in[47:3]  == 45'b000000000000000000000000000000000000000000001) 
+		 fi_ldz_r0 = 6'd45;
+	else if (fract_in[47:2]  == 46'b0000000000000000000000000000000000000000000001) 
+		 fi_ldz_r0 = 6'd46;
+	else if (fract_in[47:1]  == 47'b00000000000000000000000000000000000000000000001) 
+		 fi_ldz_r0 = 6'd47;
+	else if (fract_in[47:0]  == 48'b000000000000000000000000000000000000000000000001) 
+		 fi_ldz_r0 = 6'd48;
+	else if (fract_in[47:0]  == 48'b000000000000000000000000000000000000000000000000) 
+		 fi_ldz_r0 = 6'd48;
+end
+
+endmodule
+
+
+module b_right_shifter (
+	shift_in,
+	shift_value,
+	shift_out
+);
+
+input [47:0] shift_in;
+input [5:0] shift_value;
+output [47:0] shift_out;
+reg [47:0] shift_out; 
+
+always @(shift_value)
+begin
+	case (shift_value)	
+		6'b000000: shift_out = shift_in;
+		6'b000001: shift_out = shift_in >> 1;
+		6'b000010: shift_out = shift_in >> 2;
+		6'b000011: shift_out = shift_in >> 3;
+		6'b000100: shift_out = shift_in >> 4;
+		6'b000101: shift_out = shift_in >> 5;
+		6'b000110: shift_out = shift_in >> 6;
+		6'b000111: shift_out = shift_in >> 7;		
+		6'b001000: shift_out = shift_in >> 8;
+		6'b001001: shift_out = shift_in >> 9;
+		6'b001010: shift_out = shift_in >> 10;
+		6'b001011: shift_out = shift_in >> 11;
+		6'b001100: shift_out = shift_in >> 12;
+		6'b001101: shift_out = shift_in >> 13;
+		6'b001110: shift_out = shift_in >> 14;
+		6'b001111: shift_out = shift_in >> 15;		
+		6'b010000: shift_out = shift_in >> 16;
+		6'b010001: shift_out = shift_in >> 17;
+		6'b010010: shift_out = shift_in >> 18;
+		6'b010011: shift_out = shift_in >> 19;
+		6'b010100: shift_out = shift_in >> 20;
+		6'b010101: shift_out = shift_in >> 21;
+		6'b010110: shift_out = shift_in >> 22;
+		6'b010111: shift_out = shift_in >> 23;		
+		6'b011000: shift_out = shift_in >> 24;
+		6'b011001: shift_out = shift_in >> 25;
+		6'b011010: shift_out = shift_in >> 26;
+		6'b011011: shift_out = shift_in >> 27;
+		6'b011100: shift_out = shift_in >> 28;
+		6'b011101: shift_out = shift_in >> 29;
+		6'b011110: shift_out = shift_in >> 30;
+		6'b011111: shift_out = shift_in >> 31;		
+		6'b100000: shift_out = shift_in >> 32;
+		6'b100001: shift_out = shift_in >> 33;
+		6'b100010: shift_out = shift_in >> 34;
+		6'b100011: shift_out = shift_in >> 35;
+		6'b100100: shift_out = shift_in >> 36;
+		6'b100101: shift_out = shift_in >> 37;
+		6'b100110: shift_out = shift_in >> 38;
+		6'b100111: shift_out = shift_in >> 39;		
+		6'b101000: shift_out = shift_in >> 40;
+		6'b101001: shift_out = shift_in >> 41;
+		6'b101010: shift_out = shift_in >> 42;
+		6'b101011: shift_out = shift_in >> 43;
+		6'b101100: shift_out = shift_in >> 44;
+		6'b101101: shift_out = shift_in >> 45;
+		6'b101110: shift_out = shift_in >> 46;
+		6'b101111: shift_out = shift_in >> 47;	
+		6'b110000: shift_out = shift_in >> 48;
+		
+	endcase
+end
+
+//assign shift_out = shift_in >> shift_value;
+
+endmodule 
+
+module b_left_shifter (
+	shift_in,
+	shift_value,
+	shift_out
+);
+
+input [47:0] shift_in;
+input [5:0] shift_value;
+output [47:0] shift_out;
+reg [47:0] shift_out;
+
+always @(shift_value)
+begin
+	case (shift_value)	
+		6'b000000: shift_out = shift_in;
+		6'b000001: shift_out = shift_in << 1;
+		6'b000010: shift_out = shift_in << 2;
+		6'b000011: shift_out = shift_in << 3;
+		6'b000100: shift_out = shift_in << 4;
+		6'b000101: shift_out = shift_in << 5;
+		6'b000110: shift_out = shift_in << 6;
+		6'b000111: shift_out = shift_in << 7;		
+		6'b001000: shift_out = shift_in << 8;
+		6'b001001: shift_out = shift_in << 9;
+		6'b001010: shift_out = shift_in << 10;
+		6'b001011: shift_out = shift_in << 11;
+		6'b001100: shift_out = shift_in << 12;
+		6'b001101: shift_out = shift_in << 13;
+		6'b001110: shift_out = shift_in << 14;
+		6'b001111: shift_out = shift_in << 15;		
+		6'b010000: shift_out = shift_in << 16;
+		6'b010001: shift_out = shift_in << 17;
+		6'b010010: shift_out = shift_in << 18;
+		6'b010011: shift_out = shift_in << 19;
+		6'b010100: shift_out = shift_in << 20;
+		6'b010101: shift_out = shift_in << 21;
+		6'b010110: shift_out = shift_in << 22;
+		6'b010111: shift_out = shift_in << 23;		
+		6'b011000: shift_out = shift_in << 24;
+		6'b011001: shift_out = shift_in << 25;
+		6'b011010: shift_out = shift_in << 26;
+		6'b011011: shift_out = shift_in << 27;
+		6'b011100: shift_out = shift_in << 28;
+		6'b011101: shift_out = shift_in << 29;
+		6'b011110: shift_out = shift_in << 30;
+		6'b011111: shift_out = shift_in << 31;		
+		6'b100000: shift_out = shift_in << 32;
+		6'b100001: shift_out = shift_in << 33;
+		6'b100010: shift_out = shift_in << 34;
+		6'b100011: shift_out = shift_in << 35;
+		6'b100100: shift_out = shift_in << 36;
+		6'b100101: shift_out = shift_in << 37;
+		6'b100110: shift_out = shift_in << 38;
+		6'b100111: shift_out = shift_in << 39;		
+		6'b101000: shift_out = shift_in << 40;
+		6'b101001: shift_out = shift_in << 41;
+		6'b101010: shift_out = shift_in << 42;
+		6'b101011: shift_out = shift_in << 43;
+		6'b101100: shift_out = shift_in << 44;
+		6'b101101: shift_out = shift_in << 45;
+		6'b101110: shift_out = shift_in << 46;
+		6'b101111: shift_out = shift_in << 47;	
+		6'b110000: shift_out = shift_in << 48;
+		
+	endcase
+end
+
+endmodule 
+
+
+module b_left_shifter_new (
+	shift_in,
+	shift_value,
+	shift_out
+);
+
+input [55:0] shift_in;
+input [5:0] shift_value;
+output [55:0] shift_out;
+reg [55:0] shift_out;
+
+always @(shift_value)
+begin
+	case (shift_value)	
+		6'b000000: shift_out = shift_in;
+		6'b000001: shift_out = shift_in << 1;
+		6'b000010: shift_out = shift_in << 2;
+		6'b000011: shift_out = shift_in << 3;
+		6'b000100: shift_out = shift_in << 4;
+		6'b000101: shift_out = shift_in << 5;
+		6'b000110: shift_out = shift_in << 6;
+		6'b000111: shift_out = shift_in << 7;		
+		6'b001000: shift_out = shift_in << 8;
+		6'b001001: shift_out = shift_in << 9;
+		6'b001010: shift_out = shift_in << 10;
+		6'b001011: shift_out = shift_in << 11;
+		6'b001100: shift_out = shift_in << 12;
+		6'b001101: shift_out = shift_in << 13;
+		6'b001110: shift_out = shift_in << 14;
+		6'b001111: shift_out = shift_in << 15;		
+		6'b010000: shift_out = shift_in << 16;
+		6'b010001: shift_out = shift_in << 17;
+		6'b010010: shift_out = shift_in << 18;
+		6'b010011: shift_out = shift_in << 19;
+		6'b010100: shift_out = shift_in << 20;
+		6'b010101: shift_out = shift_in << 21;
+		6'b010110: shift_out = shift_in << 22;
+		6'b010111: shift_out = shift_in << 23;		
+		6'b011000: shift_out = shift_in << 24;
+		6'b011001: shift_out = shift_in << 25;
+		6'b011010: shift_out = shift_in << 26;
+		6'b011011: shift_out = shift_in << 27;
+		6'b011100: shift_out = shift_in << 28;
+		6'b011101: shift_out = shift_in << 29;
+		6'b011110: shift_out = shift_in << 30;
+		6'b011111: shift_out = shift_in << 31;		
+		6'b100000: shift_out = shift_in << 32;
+		6'b100001: shift_out = shift_in << 33;
+		6'b100010: shift_out = shift_in << 34;
+		6'b100011: shift_out = shift_in << 35;
+		6'b100100: shift_out = shift_in << 36;
+		6'b100101: shift_out = shift_in << 37;
+		6'b100110: shift_out = shift_in << 38;
+		6'b100111: shift_out = shift_in << 39;		
+		6'b101000: shift_out = shift_in << 40;
+		6'b101001: shift_out = shift_in << 41;
+		6'b101010: shift_out = shift_in << 42;
+		6'b101011: shift_out = shift_in << 43;
+		6'b101100: shift_out = shift_in << 44;
+		6'b101101: shift_out = shift_in << 45;
+		6'b101110: shift_out = shift_in << 46;
+		6'b101111: shift_out = shift_in << 47;	
+		6'b110000: shift_out = shift_in << 48;
+		6'b110001: shift_out = shift_in << 49;	
+		6'b110010: shift_out = shift_in << 50;	
+		6'b110011: shift_out = shift_in << 51;	
+		6'b110100: shift_out = shift_in << 52;	
+		6'b110101: shift_out = shift_in << 53;	
+		6'b110110: shift_out = shift_in << 54;	
+		6'b110111: shift_out = shift_in << 55;	
+		6'b111000: shift_out = shift_in << 56;			
+	endcase
+end
+
+endmodule 
+
+module fpu_add( clk, 
+//rmode, 
+opa, opb, out,
+control 
+//inf, snan, qnan, ine, overflow, underflow, zero, div_by_zero
+);
+	input		clk;
+	//input	[1:0]	rmode;
+	//input	[2:0]	fpu_op;
+	input	[31:0]	opa, opb;
+	output	[31:0]	out;
+	/*
+	output		inf, snan, qnan;
+	output		ine;
+	output		overflow, underflow;
+	output		zero;
+	output		div_by_zero;
+	*/
+	output [7:0] control;
+	/*
+	parameter	INF  = 31'h7f800000;
+	parameter	QNAN = 31'h7fc00001;
+	parameter	 SNAN = 31'h7f800001;
+
+	*/
+
+	wire [30:0]	INF;
+	assign INF = 31'h7f800000;
+	wire [30:0]	QNAN; 
+	assign QNAN = 31'h7fc00001;
+	wire [30:0] SNAN;
+	assign SNAN = 31'h7f800001;
+
+	////////////////////////////////////////////////////////////////////////
+	//
+	// Local Wires
+	//
+	reg	[2:0]	fpu_op;
+	reg		zero;
+	reg	[31:0]	opa_r, opb_r;		// Input operand registers
+	reg	[31:0]	out;			// Output register
+	reg		div_by_zero;		// Divide by zero output register
+	// wire		signa, signb;		// alias to opX sign
+	wire		sign_fasu;		// sign output
+	wire	[26:0]	fracta, fractb;		// Fraction Outputs from EQU block
+	wire	[7:0]	exp_fasu;		// Exponent output from EQU block
+	reg	[7:0]	exp_r;			// Exponent output (registerd)
+	wire	[26:0]	fract_out_d;		// fraction output
+	// wire		co;			// carry output
+	reg	[27:0]	fract_out_q;		// fraction output (registerd)
+	wire	[30:0]	out_d;			// Intermediate final result output
+	wire		overflow_d, underflow_d;// Overflow/Underflow Indicators
+	reg		overflow, underflow;	// Output registers for Overflow & Underflow
+	reg		inf, snan, qnan;	// Output Registers for INF, SNAN and QNAN
+	reg		ine;			// Output Registers for INE
+	reg	[1:0]	rmode_r1, rmode_r2, 	// Pipeline registers for rounding mode
+			rmode_r3;
+	reg	[2:0]	fpu_op_r1, fpu_op_r2,	// Pipeline registers for fp opration
+			fpu_op_r3;
+	// wire		mul_inf, div_inf;
+	// wire		mul_00, div_00;
+
+
+	// start output_reg
+	reg	[31:0]	out_o1;
+	reg		inf_o1, snan_o1, qnan_o1;
+	reg		ine_o1;
+	reg		overflow_o1, underflow_o1;
+	reg		zero_o1;
+	reg		div_by_zero_o1;
+	// end output_reg
+	wire [7:0] contorl;
+	assign control = {inf, snan, qnan, ine, overflow, underflow, zero, div_by_zero};
+	wire	[1:0]	rmode;
+	assign rmode= 2'b00;
+
+
+	always@(posedge clk)
+	begin
+	 fpu_op[2:0] <= 3'b000;
+	end
+	////////////////////////////////////////////////////////////////////////
+	//
+	// Input Registers
+	//
+
+	always @(posedge clk)
+		opa_r <=  opa;
+
+	always @(posedge clk)
+		opb_r <=  opb;
+
+	always @(posedge clk)
+		rmode_r1 <=  rmode;
+
+	always @(posedge clk)
+		rmode_r2 <=  rmode_r1;
+
+	always @(posedge clk)
+		rmode_r3 <=  rmode_r2;
+
+	always @(posedge clk)
+		fpu_op_r1 <=  fpu_op;
+
+	always @(posedge clk)
+		fpu_op_r2 <=  fpu_op_r1;
+
+	always @(posedge clk)
+		fpu_op_r3 <=  fpu_op_r2;
+
+	////////////////////////////////////////////////////////////////////////
+	//
+	// Exceptions block
+	//
+	wire		inf_d, ind_d, qnan_d, snan_d, opa_nan, opb_nan;
+	wire		opa_00, opb_00;
+	wire		opa_inf, opb_inf;
+	wire		opa_dn, opb_dn;
+
+	except u0(	.clk(clk),
+			.opa(opa_r), .opb(opb_r),
+			.inf(inf_d), .ind(ind_d),
+			.qnan(qnan_d), .snan(snan_d),
+			.opa_nan(opa_nan), .opb_nan(opb_nan),
+			.opa_00(opa_00), .opb_00(opb_00),
+			.opa_inf(opa_inf), .opb_inf(opb_inf),
+			.opa_dn(opa_dn), .opb_dn(opb_dn)
+			);
+
+	////////////////////////////////////////////////////////////////////////
+	//
+	// Pre-Normalize block
+	// - Adjusts the numbers to equal exponents and sorts them
+	// - determine result sign
+	// - determine actual operation to perform (add or sub)
+	//
+
+	wire		nan_sign_d, result_zero_sign_d;
+	reg		sign_fasu_r;
+	wire fasu_op;
+
+	wire add_input;
+	assign add_input=!fpu_op_r1[0];
+	pre_norm u1(.clk(clk),				// System Clock
+		.rmode(rmode_r2),			// Roundin Mode
+	//	.add(!fpu_op_r1[0]),			// Add/Sub Input
+		.add(add_input),
+		.opa(opa_r),  .opb(opb_r),		// Registered OP Inputs
+		.opa_nan(opa_nan),			// OpA is a NAN indicator
+		.opb_nan(opb_nan),			// OpB is a NAN indicator
+		.fracta_out(fracta),			// Equalized and sorted fraction
+		.fractb_out(fractb),			// outputs (Registered)
+		.exp_dn_out(exp_fasu),			// Selected exponent output (registered);
+		.sign(sign_fasu),			// Encoded output Sign (registered)
+		.nan_sign(nan_sign_d),			// Output Sign for NANs (registered)
+		.result_zero_sign(result_zero_sign_d),	// Output Sign for zero result (registered)
+		.fasu_op(fasu_op)			// Actual fasu operation output (registered)
+		);
+
+	always @(posedge clk)
+		sign_fasu_r <=   sign_fasu;
+
+	wire co_d;
+	////////////////////////////////////////////////////////////////////////
+	//
+	// Add/Sub
+	//
+
+	add_sub27 u3(
+		.add(fasu_op),			// Add/Sub
+		.opa(fracta),			// Fraction A input
+		.opb(fractb),			// Fraction B Input
+		.sum(fract_out_d),		// SUM output
+		.co(co_d) );			// Carry Output
+
+	always @(posedge clk)
+		fract_out_q <=   {co_d, fract_out_d};
+
+
+	////////////////////////////////////////////////////////////////////////
+	//
+	// Normalize Result
+	//
+	wire		ine_d;
+	//reg	[47:0]	fract_denorm;
+	wire	[47:0]	fract_denorm;
+
+	wire		sign_d;
+	reg		sign;
+	reg	[30:0]	opa_r1;
+	reg	[47:0]	fract_i2f;
+	reg		opas_r1, opas_r2;
+	wire		f2i_out_sign;
+
+	always @(posedge clk)			// Exponent must be once cycle delayed
+		  exp_r <=   exp_fasu;
+
+
+	always @(posedge clk)
+		opa_r1 <=   opa_r[30:0];
+
+	//always @(fpu_op_r3 or fract_out_q)
+	assign   fract_denorm = {fract_out_q, 20'h0};
+
+
+	always @(posedge clk)
+		opas_r1 <=   opa_r[31];
+
+	always @(posedge clk)
+		opas_r2 <=   opas_r1;
+
+	assign sign_d = sign_fasu;
+
+	always @(posedge clk)
+		sign <=   (rmode_r2==2'h3) ? !sign_d : sign_d;
+
+	post_norm u4(
+	//.clk(clk),			// System Clock
+		.fpu_op(fpu_op_r3),		// Floating Point Operation
+		.opas(opas_r2),			// OPA Sign
+		.sign(sign),			// Sign of the result
+		.rmode(rmode_r3),		// Rounding mode
+		.fract_in(fract_denorm),	// Fraction Input
+		.exp_in(exp_r),			// Exponent Input
+		.exp_ovf(2'b00),		// Exponent Overflow
+		.opa_dn(opa_dn),		// Operand A Denormalized
+		.opb_dn(opb_dn),		// Operand A Denormalized
+		.rem_00(1'b0),		// Diveide Remainder is zero
+		.div_opa_ldz(5'b00000),	// Divide opa leading zeros count
+		.output_zero(1'b0),	// Force output to Zero
+		.out(out_d),			// Normalized output (un-registered)
+		.ine(ine_d),			// Result Inexact output (un-registered)
+		.overflow(overflow_d),		// Overflow output (un-registered)
+		.underflow(underflow_d),	// Underflow output (un-registered)
+		.f2i_out_sign(f2i_out_sign)	// F2I Output Sign
+		);
+
+	////////////////////////////////////////////////////////////////////////
+	//
+	// FPU Outputs
+	//
+	reg		fasu_op_r1, fasu_op_r2;
+	wire	[30:0]	out_fixed;
+	wire		output_zero_fasu;
+	wire		overflow_fasu;
+	wire		out_d_00;
+	wire		ine_fasu;
+	wire		underflow_fasu;
+	reg		opa_nan_r;
+
+
+	always @(posedge clk)
+		fasu_op_r1 <=   fasu_op;
+
+	always @(posedge clk)
+		fasu_op_r2 <=   fasu_op_r1;
+
+
+	// Force pre-set values for non numerical output
+
+	assign out_fixed = (	(qnan_d | snan_d) |
+				(ind_d & !fasu_op_r2) )  ? QNAN : INF;
+
+	always @(posedge clk)
+		out_o1[30:0] <=   (inf_d | snan_d | qnan_d) ? out_fixed : out_d;
+	  
+
+	assign out_d_00 = !(|out_d);
+
+	always @(posedge clk)
+		out_o1[31] <=  	(snan_d | qnan_d | ind_d) ?			nan_sign_d :
+						output_zero_fasu ?	result_zero_sign_d :
+						sign_fasu_r;
+
+	assign ine_fasu = (ine_d | overflow_d | underflow_d) & !(snan_d | qnan_d | inf_d);
+
+	always @(posedge  clk)
+		ine_o1 <=    ine_fasu ;
+
+
+	assign overflow_fasu = overflow_d & !(snan_d | qnan_d | inf_d);
+
+	always @(posedge clk)
+		overflow_o1 <=  	  overflow_fasu ;
+
+	assign underflow_fasu = underflow_d & !(inf_d | snan_d | qnan_d);
+
+	always @(posedge clk)
+		underflow_o1 <=    underflow_fasu ;
+
+	always @(posedge clk)
+		snan_o1 <=   snan_d;
+
+
+
+	// Status Outputs
+	always @(posedge clk)
+		qnan_o1 <=  	( snan_d | qnan_d | (ind_d & !fasu_op_r2) );
+
+	always @(posedge clk)
+		inf_o1 <=   (!(qnan_d | snan_d) & (( (&out_d[30:23]) & !(|out_d[22:0] ) ) |  (inf_d & !(ind_d & !fasu_op_r2) & !fpu_op_r3[1]) ));
+
+	assign output_zero_fasu = out_d_00 & !(inf_d | snan_d | qnan_d);
+
+	always @(posedge clk)
+		zero_o1 <=  	output_zero_fasu ;
+
+	always @(posedge clk)
+		opa_nan_r <=   !opa_nan & fpu_op_r2==3'b011;
+
+	always @(posedge clk)
+		div_by_zero_o1 <=   1'b0;
+
+	// output register
+	always @(posedge clk)
+	begin
+		qnan <=   qnan_o1;
+		out <=   out_o1;
+		inf <=   inf_o1; 
+		snan <=   snan_o1;
+		//qnan <=   qnan_o1;
+		ine <=   ine_o1;
+		overflow <=   overflow_o1;
+		underflow <=   underflow_o1;
+		zero <=   zero_o1;
+		div_by_zero <=   div_by_zero_o1;
+	end
+
+endmodule
+
+
+
+
+//---------------------------------------------------------------------------------
+module pre_norm(clk, rmode, add, opa, opb, opa_nan, opb_nan, fracta_out,
+		fractb_out, exp_dn_out, sign, nan_sign, result_zero_sign,
+		fasu_op);
+input		clk;
+input	[1:0]	rmode;
+input		add;
+input	[31:0]	opa, opb;
+input		opa_nan, opb_nan;
+output	[26:0]	fracta_out, fractb_out;
+output	[7:0]	exp_dn_out;
+output		sign;
+output		nan_sign, result_zero_sign;
+output		fasu_op;			// Operation Output
+
+////////////////////////////////////////////////////////////////////////
+//
+// Local Wires and registers
+//
+
+wire		signa, signb;		// alias to opX sign
+wire	[7:0]	expa, expb;		// alias to opX exponent
+wire	[22:0]	fracta, fractb;		// alias to opX fraction
+wire		expa_lt_expb;		// expa is larger than expb indicator
+wire		fractb_lt_fracta;	// fractb is larger than fracta indicator
+reg	[7:0]	exp_dn_out;		// de normalized exponent output
+wire	[7:0]	exp_small, exp_large;
+wire	[7:0]	exp_diff;		// Numeric difference of the two exponents
+wire	[22:0]	adj_op;			// Fraction adjustment: input
+wire	[26:0]	adj_op_tmp;
+wire	[26:0]	adj_op_out;		// Fraction adjustment: output
+wire	[26:0]	fracta_n, fractb_n;	// Fraction selection after normalizing
+wire	[26:0]	fracta_s, fractb_s;	// Fraction Sorting out
+reg	[26:0]	fracta_out, fractb_out;	// Fraction Output
+reg		sign, sign_d;		// Sign Output
+reg		add_d;			// operation (add/sub)
+reg		fasu_op;		// operation (add/sub) register
+wire		expa_dn, expb_dn;
+reg		sticky;
+reg		result_zero_sign;
+reg		add_r, signa_r, signb_r;
+wire	[4:0]	exp_diff_sft;
+wire		exp_lt_27;
+wire		op_dn;
+wire	[26:0]	adj_op_out_sft;
+reg		fracta_lt_fractb, fracta_eq_fractb;
+wire		nan_sign1;
+reg		nan_sign;
+
+////////////////////////////////////////////////////////////////////////
+//
+// Aliases
+//
+
+assign  signa = opa[31];
+assign  signb = opb[31];
+assign   expa = opa[30:23];
+assign   expb = opb[30:23];
+assign fracta = opa[22:0];
+assign fractb = opb[22:0];
+
+////////////////////////////////////////////////////////////////////////
+//
+// Pre-Normalize exponents (and fractions)
+//
+
+assign expa_lt_expb = expa > expb;		// expa is larger than expb
+
+// ---------------------------------------------------------------------
+// Normalize
+
+assign expa_dn = !(|expa);			// opa denormalized
+assign expb_dn = !(|expb);			// opb denormalized
+
+// ---------------------------------------------------------------------
+// Calculate the difference between the smaller and larger exponent
+
+wire	[7:0]	exp_diff1, exp_diff1a, exp_diff2;
+
+assign exp_small  = expa_lt_expb ? expb : expa;
+assign exp_large  = expa_lt_expb ? expa : expb;
+assign exp_diff1  = exp_large - exp_small;
+assign exp_diff1a = exp_diff1-8'h01;
+assign exp_diff2  = (expa_dn | expb_dn) ? exp_diff1a : exp_diff1;
+assign  exp_diff  = (expa_dn & expb_dn) ? 8'h0 : exp_diff2;
+
+always @(posedge clk)	// If numbers are equal we should return zero
+	exp_dn_out <=   (!add_d & expa==expb & fracta==fractb) ? 8'h0 : exp_large;
+
+// ---------------------------------------------------------------------
+// Adjust the smaller fraction
+
+
+assign op_dn	  = expa_lt_expb ? expb_dn : expa_dn;
+assign adj_op     = expa_lt_expb ? fractb : fracta;
+wire temp1;
+assign temp1 = ~op_dn;
+//assign adj_op_tmp[26:0] = {~op_dn, adj_op, 3'b000};	// recover hidden bit (op_dn) 
+assign adj_op_tmp[26:0] = {temp1, adj_op, 3'b000};	// recover hidden bit (op_dn) 
+
+// adj_op_out is 27 bits wide, so can only be shifted 27 bits to the right
+assign exp_lt_27	= exp_diff  > 8'd27;
+assign exp_diff_sft	= exp_lt_27 ? 5'd27 : exp_diff[4:0];
+
+//assign adj_op_out_sft	= adj_op_tmp >> exp_diff_sft;
+b_right_shifter_new u7(
+	.shift_in(adj_op_tmp),
+	.shift_value(exp_diff_sft),
+	.shift_out(adj_op_out_sft)
+);
+
+wire temp2;
+assign temp2 = adj_op_out_sft[0] | sticky;
+//assign adj_op_out[26:0]	= {adj_op_out_sft[26:1], adj_op_out_sft[0] | sticky };
+assign adj_op_out[26:0]	= {adj_op_out_sft[26:1], temp2 };
+
+
+// ---------------------------------------------------------------------
+// Get truncated portion (sticky bit)
+
+always @(exp_diff_sft or adj_op_tmp)
+   case(exp_diff_sft)		// synopsys full_case parallel_case
+	5'd00: sticky = 1'h0;
+	5'd01: sticky =  adj_op_tmp[0]; 
+	5'd02: sticky = |adj_op_tmp[01:0];
+	5'd03: sticky = |adj_op_tmp[02:0];
+	5'd04: sticky = |adj_op_tmp[03:0];
+	5'd05: sticky = |adj_op_tmp[04:0];
+	5'd06: sticky = |adj_op_tmp[05:0];
+	5'd07: sticky = |adj_op_tmp[06:0];
+	5'd08: sticky = |adj_op_tmp[07:0];
+	5'd09: sticky = |adj_op_tmp[08:0];
+	5'd10: sticky = |adj_op_tmp[09:0];
+	5'd11: sticky = |adj_op_tmp[10:0];
+	5'd12: sticky = |adj_op_tmp[11:0];
+	5'd13: sticky = |adj_op_tmp[12:0];
+	5'd14: sticky = |adj_op_tmp[13:0];
+	5'd15: sticky = |adj_op_tmp[14:0];
+	5'd16: sticky = |adj_op_tmp[15:0];
+	5'd17: sticky = |adj_op_tmp[16:0];
+	5'd18: sticky = |adj_op_tmp[17:0];
+	5'd19: sticky = |adj_op_tmp[18:0];
+	5'd20: sticky = |adj_op_tmp[19:0];
+	5'd21: sticky = |adj_op_tmp[20:0];
+	5'd22: sticky = |adj_op_tmp[21:0];
+	5'd23: sticky = |adj_op_tmp[22:0];
+	5'd24: sticky = |adj_op_tmp[23:0];
+	5'd25: sticky = |adj_op_tmp[24:0];
+	5'd26: sticky = |adj_op_tmp[25:0];
+	5'd27: sticky = |adj_op_tmp[26:0];
+   endcase
+
+// ---------------------------------------------------------------------
+// Select operands for add/sub (recover hidden bit)
+
+assign fracta_n = expa_lt_expb ? {~expa_dn, fracta, 3'b0} : adj_op_out;
+assign fractb_n = expa_lt_expb ? adj_op_out : {~expb_dn, fractb, 3'b0};
+
+// ---------------------------------------------------------------------
+// Sort operands (for sub only)
+
+assign fractb_lt_fracta = fractb_n > fracta_n;	// fractb is larger than fracta
+assign fracta_s = fractb_lt_fracta ? fractb_n : fracta_n;
+assign fractb_s = fractb_lt_fracta ? fracta_n : fractb_n;
+
+always @(posedge clk)
+	fracta_out <=   fracta_s;
+
+always @(posedge clk)
+	fractb_out <=   fractb_s;
+
+// ---------------------------------------------------------------------
+// Determine sign for the output
+
+// sign: 0=Positive Number; 1=Negative Number
+always @(signa or signb or add or fractb_lt_fracta)
+   case({signa, signb, add})		// synopsys full_case parallel_case
+
+   	// Add
+	3'b001: sign_d = 0;
+	3'b011: sign_d = fractb_lt_fracta;
+	3'b101: sign_d = !fractb_lt_fracta;
+	3'b111: sign_d = 1;
+
+	// Sub
+	3'b000: sign_d = fractb_lt_fracta;
+	3'b010: sign_d = 0;
+	3'b100: sign_d = 1;
+	3'b110: sign_d = !fractb_lt_fracta;
+   endcase
+
+always @(posedge clk)
+	sign <=   sign_d;
+
+// Fix sign for ZERO result
+always @(posedge clk)
+	signa_r <=   signa;
+
+always @(posedge clk)
+	signb_r <=   signb;
+
+always @(posedge clk)
+	add_r <=   add;
+
+always @(posedge clk)
+	result_zero_sign <=  	( add_r &  signa_r &  signb_r) |
+				(!add_r &  signa_r & !signb_r) |
+				( add_r & (signa_r |  signb_r) & (rmode==3)) |
+				(!add_r & (signa_r == signb_r) & (rmode==3));
+
+// Fix sign for NAN result
+always @(posedge clk)
+	fracta_lt_fractb <=   fracta < fractb;
+
+always @(posedge clk)
+	fracta_eq_fractb <=   fracta == fractb;
+
+assign nan_sign1 = fracta_eq_fractb ? (signa_r & signb_r) : fracta_lt_fractb ? signb_r : signa_r;
+
+always @(posedge clk)
+	nan_sign <=   (opa_nan & opb_nan) ? nan_sign1 : opb_nan ? signb_r : signa_r;
+
+////////////////////////////////////////////////////////////////////////
+//
+// Decode Add/Sub operation
+//
+
+// add: 1=Add; 0=Subtract
+always @(signa or signb or add)
+   case({signa, signb, add})		// synopsys full_case parallel_case
+   
+   	// Add
+	3'b001: add_d = 1;
+	3'b011: add_d = 0;
+	3'b101: add_d = 0;
+	3'b111: add_d = 1;
+	
+	// Sub
+	3'b000: add_d = 0;
+	3'b010: add_d = 1;
+	3'b100: add_d = 1;
+	3'b110: add_d = 0;
+   endcase
+
+always @(posedge clk)
+	fasu_op <=   add_d;
+
+endmodule
+
+module b_right_shifter_new (
+	shift_in,
+	shift_value,
+	shift_out
+);
+
+input [26:0] shift_in;
+input [4:0] shift_value;
+output [26:0] shift_out;
+reg [26:0] shift_out;
+
+always @(shift_value)
+begin
+	case (shift_value)	
+		5'b00000: shift_out = shift_in;
+		5'b00001: shift_out = shift_in >> 1;
+		5'b00010: shift_out = shift_in >> 2;
+		5'b00011: shift_out = shift_in >> 3;
+		5'b00100: shift_out = shift_in >> 4;
+		5'b00101: shift_out = shift_in >> 5;
+		5'b00110: shift_out = shift_in >> 6;
+		5'b00111: shift_out = shift_in >> 7;		
+		5'b01000: shift_out = shift_in >> 8;
+		5'b01001: shift_out = shift_in >> 9;
+		5'b01010: shift_out = shift_in >> 10;
+		5'b01011: shift_out = shift_in >> 11;
+		5'b01100: shift_out = shift_in >> 12;
+		5'b01101: shift_out = shift_in >> 13;
+		5'b01110: shift_out = shift_in >> 14;
+		5'b01111: shift_out = shift_in >> 15;		
+		5'b10000: shift_out = shift_in >> 16;
+		5'b10001: shift_out = shift_in >> 17;
+		5'b10010: shift_out = shift_in >> 18;
+		5'b10011: shift_out = shift_in >> 19;
+		5'b10100: shift_out = shift_in >> 20;
+		5'b10101: shift_out = shift_in >> 21;
+		5'b10110: shift_out = shift_in >> 22;
+		5'b10111: shift_out = shift_in >> 23;		
+		5'b11000: shift_out = shift_in >> 24;
+		5'b11001: shift_out = shift_in >> 25;
+		5'b11010: shift_out = shift_in >> 26;
+		5'b11011: shift_out = shift_in >> 27;
+	endcase
+end
+
+
+endmodule 
+
+//----------------------------------------------------------------------------
+
+
+
+////////////////////////////////////////////////////////////////////////
+//
+// Add/Sub
+//
+
+module add_sub27(add, opa, opb, sum, co);
+input		add;
+input	[26:0]	opa, opb;
+output	[26:0]	sum;
+output		co;
+
+
+
+assign {co, sum} = add ? ({1'b0, opa} + {1'b0, opb}) : ({1'b0, opa} - {1'b0, opb});
+
+endmodule
+
diff --git vtr_flow/benchmarks/verilog/des90_yosys.v vtr_flow/benchmarks/verilog/des90_yosys.v
new file mode 100644
index 0000000..c68c6c0
--- /dev/null
+++ vtr_flow/benchmarks/verilog/des90_yosys.v
@@ -0,0 +1,33703 @@
+/****************************************************************************
+          AddSub unit
+- Should perform ADD, ADDU, SUBU, SUB, SLT, SLTU
+
+  is_slt signext addsub
+    op[2] op[1] op[0]  |  Operation
+0     0     0     0         SUBU
+2     0     1     0         SUB
+1     0     0     1         ADDU
+3     0     1     1         ADD
+4     1     0     0         SLTU
+6     1     1     0         SLT
+
+****************************************************************************/
+module addersub (
+            opA, opB,
+            op, 
+            result,
+            result_slt );
+
+parameter WIDTH=32; 
+
+
+input [WIDTH-1:0] opA;
+input [WIDTH-1:0] opB;
+//input carry_in;
+input [3-1:0] op;
+
+output [WIDTH-1:0] result;
+output result_slt;
+
+wire carry_out;
+wire [WIDTH:0] sum;
+
+// Mux between sum, and slt
+wire is_slt;
+wire signext;
+wire addsub;
+
+assign is_slt=op[2];
+assign signext=op[1];
+assign addsub=op[0];
+
+assign result=sum[WIDTH-1:0];
+//assign result_slt[WIDTH-1:1]={31{1'b0}};
+//assign result_slt[0]=sum[WIDTH];
+assign result_slt=sum[WIDTH];
+
+
+lpm_add_sub adder_inst(
+    .dataa({signext&opA[WIDTH-1],opA}),
+    .datab({signext&opB[WIDTH-1],opB}),
+    .cin(~addsub),
+    .add_sub(addsub),
+    .result(sum)
+        // synopsys translate_off
+        ,
+        .cout (),
+        .clken (),
+        .clock (),
+        .overflow (),
+        .aclr ()
+        // synopsys translate_on
+    );
+defparam 
+    adder_inst.lpm_width=WIDTH+1,
+    adder_inst.lpm_representation="SIGNED";
+
+assign carry_out=sum[WIDTH];
+
+
+endmodule
+
+module altsyncram(clock0, clocken0, clock1, clocken1, 
+address_a, wren_a, data_a, q_a, byteena_a,
+address_b, wren_b, data_b, q_b, byteena_b);
+
+parameter intended_device_family = "Stratix";
+parameter width_a = 1;
+parameter widthad_a = 1;
+parameter numwords_a = 1;
+parameter operation_mode = "BIDIR_DUAL_PORT";    // changed
+parameter width_b = 1;                 // new
+parameter widthad_b = 1;            // new
+parameter numwords_b = 1;                   // new
+parameter outdata_reg_b = "UNREGISTERED";
+parameter outdata_reg_a = "UNREGISTERED";
+parameter address_reg_b = "CLOCK1";              // new
+parameter wrcontrol_wraddress_reg_b = "CLOCK1";  // new
+parameter width_byteena_a = 1;
+parameter lpm_type = "altsyncram";
+parameter ram_block_type = "AUTO";
+parameter rdcontrol_reg_b = "CLOCK1";
+parameter address_aclr_b = "NONE";
+parameter outdata_aclr_b = "NONE";
+parameter read_during_write_mode_mixed_ports = "OLD_DATA";
+parameter init_file = "data.mif";
+parameter indata_aclr_a = "NONE";
+parameter wrcontrol_aclr_a = "NONE";
+parameter address_aclr_a = "NONE";
+parameter width_byteena_b = 1;
+parameter outdata_aclr_a = "NONE";
+parameter byteena_aclr_a = "NONE";
+parameter byte_size = 8;
+
+input clock0;
+input clocken0;
+input clock1;
+input clocken1;
+input [widthad_a-1:0] address_a;
+input wren_a;
+input wren_b;
+input byteena_a;
+input byteena_b;
+input [width_a-1:0] data_a;
+input [width_b-1:0] data_b;
+input [widthad_b-1:0] address_b;
+output [width_a-1:0] q_a;
+output [width_b-1:0] q_b;
+
+dual_port_ram #(.ADDR_WIDTH(widthad_a), .DATA_WIDTH(width_a)) 
+dpr(
+.clk(clock0), 
+.addr1(address_a),
+.addr2(address_b),
+.we1(wren_a),
+.we2(wren_b),
+.data1(data_a),
+.data2(data_b),
+.out1(q_a),
+.out2(q_b)
+);
+endmodule
+module branchresolve ( en, rs, rt, eq, ne, ltz, lez, gtz, gez, eqz);
+parameter WIDTH=32; //Deepak : Change from parameter to define
+input en;
+input [WIDTH-1:0] rs;
+input [WIDTH-1:0] rt;
+output eq;
+output ne;
+output ltz;
+output lez;
+output gtz;
+output gez;
+output eqz;
+
+assign eq=(en)&(rs==rt);
+assign ne=(en)&~eq;
+assign eqz=(en)&~(|rs);
+assign ltz=(en)&rs[WIDTH-1];
+assign lez=(en)&rs[WIDTH-1] | eqz;
+assign gtz=(en)&(~rs[WIDTH-1]) & ~eqz;
+assign gez=(en)&(~rs[WIDTH-1]);
+
+endmodule
+/****************************************************************************
+          Generic Register
+****************************************************************************/
+module register(d,clk,resetn,en,q);
+parameter WIDTH=32;
+
+input clk;
+input resetn;
+input en;
+input [WIDTH-1:0] d;
+output [WIDTH-1:0] q;
+reg [WIDTH-1:0] q;
+
+always @(posedge clk or negedge resetn)		//asynchronous reset
+begin
+	if (resetn==0)
+		q<=0;
+	else if (en==1)
+		q<=d;
+end
+
+endmodule
+
+/****************************************************************************
+          Generic Register - synchronous reset
+****************************************************************************/
+module register_sync(d,clk,resetn,en,q);
+parameter WIDTH=32;
+
+input clk;
+input resetn;
+input en;
+input [WIDTH-1:0] d;
+output [WIDTH-1:0] q;
+reg [WIDTH-1:0] q;
+
+always @(posedge clk)		//synchronous reset
+begin
+	if (resetn==0)
+		q<=0;
+	else if (en==1)
+		q<=d;
+end
+
+endmodule
+
+/****************************************************************************
+          Generic Pipelined Register
+
+          - Special component, components starting with "pipereg" have
+          their enables treated independently of instructrions that use them.
+          - They are enabled whenever the stage is active and not stalled
+****************************************************************************/
+module pipereg(d,clk,resetn,en,squashn,q);
+parameter WIDTH=32;
+
+input clk;
+input resetn;
+input en;
+input squashn;
+input [WIDTH-1:0] d;
+output [WIDTH-1:0] q;
+reg [WIDTH-1:0] q;
+
+always @(posedge clk)   //synchronous reset
+begin
+  if (resetn==0 || squashn==0)
+    q<=0;
+  else if (en==1)
+    q<=d;
+end
+
+endmodule
+
+/****************************************************************************
+          Generic Pipelined Register 2 -OLD: If not enabled, queues squash
+
+          - This piperegister stalls the reset signal as well
+module pipereg_full(d,clk,resetn,squashn,en,q);
+parameter WIDTH=32;
+
+input clk;
+input resetn;
+input en;
+input squashn;
+input [WIDTH-1:0] d;
+output [WIDTH-1:0] q;
+reg [WIDTH-1:0] q;
+reg squash_save;
+
+  always @(posedge clk)   //synchronous reset
+  begin
+    if (resetn==0 || (squashn==0 && en==1) || (squash_save&en))
+      q<=0;
+    else if (en==1)
+      q<=d;
+  end
+
+  always @(posedge clk)
+  begin
+    if (resetn==1 && squashn==0 && en==0)
+      squash_save<=1;
+    else
+      squash_save<=0;
+  end
+endmodule
+****************************************************************************/
+
+/****************************************************************************
+          One cycle Stall circuit
+****************************************************************************/
+module onecyclestall(request,clk,resetn,stalled);
+input request;
+input clk;
+input resetn;
+output stalled;
+
+  reg T,Tnext;
+
+  // State machine for Stalling 1 cycle
+  always@(request or T)
+  begin
+    case(T) 
+      1'b0: Tnext=request;
+      1'b1: Tnext=0;
+    endcase 
+  end       
+  always@(posedge clk)
+    if (~resetn)
+      T<=0; 
+    else    
+      T<=Tnext;
+  assign stalled=(request&~T);
+endmodule
+
+/****************************************************************************
+          Multi cycle Stall circuit - with wait signal
+
+          - One FF plus one 2:1 mux to stall 1st cycle on request, then wait
+          - this makes wait don't care for the first cycle
+****************************************************************************/
+module multicyclestall(request, devwait,clk,resetn,stalled);
+input request;
+input devwait;
+input clk;
+input resetn;
+output stalled;
+
+  reg T;
+
+  always@(posedge clk)
+    if (~resetn)
+      T<=0;
+    else
+      T<=stalled;
+
+  assign stalled=(T) ? devwait : request;
+endmodule
+                
+/****************************************************************************
+          One cycle - Pipeline delay register
+****************************************************************************/
+module pipedelayreg(d,en,clk,resetn,squashn,dst,stalled,q);
+parameter WIDTH=32;
+input [WIDTH-1:0] d;
+input [4:0] dst;
+input en;
+input clk;
+input resetn;
+input squashn;
+output stalled;
+output [WIDTH-1:0] q;
+
+  reg [WIDTH-1:0] q;
+  reg T,Tnext;
+
+  // State machine for Stalling 1 cycle
+  always@(en or T or dst)
+  begin
+    case(T) 
+      0: Tnext=en&(|dst);
+      1: Tnext=0;
+    endcase 
+  end       
+  always@(posedge clk)
+    if (~resetn)
+      T<=0; 
+    else    
+      T<=Tnext;
+
+  always @(posedge clk)   //synchronous reset
+  begin
+    if (resetn==0 || squashn==0)
+      q<=0;
+    else if (en==1)
+      q<=d;
+  end
+
+  assign stalled=(en&~T&(|dst));
+endmodule
+
+/****************************************************************************
+          Fake Delay
+****************************************************************************/
+module fakedelay(d,clk,q);
+parameter WIDTH=32;
+input [WIDTH-1:0] d;
+input clk;
+output [WIDTH-1:0] q;
+
+assign q=d;
+
+endmodule
+
+/****************************************************************************
+          Zeroer
+****************************************************************************/
+module zeroer(d,en,q);
+parameter WIDTH=32;
+
+input en;
+input [WIDTH-1:0] d;
+output [WIDTH-1:0] q;
+assign q= (en) ? d : 0;
+
+endmodule
+
+/****************************************************************************
+          NOP - used to hack position of multiplexors
+****************************************************************************/
+module nop(d,q);
+parameter WIDTH=32;
+
+input [WIDTH-1:0] d;
+output [WIDTH-1:0] q;
+
+  assign q=d;
+
+endmodule
+
+/****************************************************************************
+          Const
+****************************************************************************/
+//Deepak : Changed const to constant to resolve compilation error
+module constant (out);
+
+parameter WIDTH=32;
+parameter VAL=31;
+
+output [WIDTH-1:0] out;
+
+assign out=VAL;
+
+endmodule
+
+/****************************************************************************
+          Branch detector
+****************************************************************************/
+module branch_detector(opcode, func, is_branch);
+input [5:0] opcode;
+input [5:0] func;
+output is_branch;
+
+wire is_special;
+
+assign is_special=!(|opcode);
+assign is_branch=((!(|opcode[5:3])) && !is_special) || 
+                  ((is_special)&&(func[5:3]==3'b001));
+
+endmodule
+/******************************************************************************
+            Data memory and interface
+
+Operation table:
+
+  load/store sign size1 size0    |   Operation
+7     0       1     1     1      |      LB
+5     0       1     0     1      |      LH
+0     0       X     0     0      |      LW
+3     0       0     1     1      |      LBU
+1     0       0     0     1      |      LHU
+11    1       X     1     1      |      SB
+9     1       X     0     1      |      SH
+8     1       X     0     0      |      SW
+
+******************************************************************************/
+
+module data_mem( clk, resetn, en, stalled,
+                d_writedata,
+                d_address,
+                boot_daddr, boot_ddata, boot_dwe, 
+                op,
+                d_loadresult);
+
+parameter D_ADDRESSWIDTH=32;
+
+parameter DM_DATAWIDTH=32;
+parameter DM_BYTEENAWIDTH=4;            // usually should be DM_DATAWIDTH/8
+//parameter DM_ADDRESSWIDTH=16;         //Deepak commented
+//parameter DM_SIZE=16384;              //Deepak commented
+
+//Deepak : UnCommented to see why the processor is stopping after the first instruction
+parameter DM_ADDRESSWIDTH=8;     //Deepak
+parameter DM_SIZE=64;          //Deepak : Increased the size of memory
+
+input clk;
+input resetn;
+input en;
+output stalled;
+
+
+input [31:0] boot_daddr;
+input [31:0] boot_ddata;
+input boot_dwe;
+
+input [D_ADDRESSWIDTH-1:0] d_address;
+input [4-1:0] op;
+input [DM_DATAWIDTH-1:0] d_writedata;
+output [DM_DATAWIDTH-1:0] d_loadresult;
+
+wire [DM_BYTEENAWIDTH-1:0] d_byteena;
+wire [DM_DATAWIDTH-1:0] d_readdatain;
+wire [DM_DATAWIDTH-1:0] d_writedatamem;
+wire d_write;
+wire [1:0] d_address_latched;
+
+assign d_write=op[3];
+//assign d_write = d_write;//deepak
+register d_address_reg(d_address[1:0],clk,1'b1,en,d_address_latched);
+    defparam d_address_reg.WIDTH=2;
+                
+store_data_translator sdtrans_inst(
+    .write_data(d_writedata),
+    .d_address(d_address[1:0]),
+    .store_size(op[1:0]),
+    .d_byteena(d_byteena),
+    .d_writedataout(d_writedatamem));
+
+load_data_translator ldtrans_inst(
+    .d_readdatain(d_readdatain),
+    .d_address(d_address_latched[1:0]),
+    .load_size(op[1:0]),
+    .load_sign_ext(op[2]),
+    .d_loadresult(d_loadresult));
+  
+
+altsyncram  dmem (
+            .wren_a (d_write&en&(~d_address[31])),
+            .clock0 (clk),
+            .clocken0 (),
+            .clock1 (clk),
+            .clocken1 (boot_dwe),
+            `ifdef TEST_BENCH
+            .aclr0(~resetn), 
+            `endif
+            .byteena_a (d_byteena),
+            .address_a (d_address[DM_ADDRESSWIDTH+2-1:2]),
+            .data_a (d_writedatamem),
+            .wren_b (boot_dwe), .data_b (boot_ddata), .address_b (boot_daddr), 
+            // synopsys translate_off
+            .rden_b (), 
+            .aclr1 (), .byteena_b (),
+            .addressstall_a (), .addressstall_b (), .q_b (),
+            // synopsys translate_on
+            .q_a (d_readdatain)
+    
+);  
+    defparam
+        dmem.intended_device_family = "Stratix", //Deepak changed from Stratix to Cyclone
+        dmem.width_a = DM_DATAWIDTH,
+        dmem.widthad_a = DM_ADDRESSWIDTH-2,
+        dmem.numwords_a = DM_SIZE,
+        dmem.width_byteena_a = DM_BYTEENAWIDTH,
+        dmem.operation_mode = "BIDIR_DUAL_PORT",
+        dmem.width_b = DM_DATAWIDTH,
+        dmem.widthad_b = DM_ADDRESSWIDTH-2,
+        dmem.numwords_b = DM_SIZE,
+        dmem.width_byteena_b = 1,
+        dmem.outdata_reg_a = "UNREGISTERED",
+        dmem.address_reg_b = "CLOCK1",
+        dmem.wrcontrol_wraddress_reg_b = "CLOCK1",
+        dmem.wrcontrol_aclr_a = "NONE",
+        dmem.address_aclr_a = "NONE",
+        dmem.outdata_aclr_a = "NONE",
+        dmem.byteena_aclr_a = "NONE",
+        dmem.byte_size = 8,
+        `ifdef TEST_BENCH
+          dmem.indata_aclr_a = "CLEAR0",
+          dmem.init_file = "data.rif",
+        `endif
+        
+        //`ifdef QUARTUS_SIM
+          dmem.init_file = "data.mif",
+          dmem.ram_block_type = "M4K",
+        //`else
+         // dmem.ram_block_type = "MEGARAM",
+        //`endif
+        dmem.lpm_type = "altsyncram";
+  
+// 1 cycle stall state machine
+onecyclestall staller(en&~d_write,clk,resetn,stalled);
+
+
+endmodule
+
+
+
+/****************************************************************************
+          Store data translator
+          - moves store data to appropriate byte/halfword 
+          - interfaces with altera blockrams
+****************************************************************************/
+module store_data_translator(
+    write_data,             // data in least significant position
+    d_address,
+    store_size,
+    d_byteena,
+    d_writedataout);        // shifted data to coincide with address
+parameter WIDTH=32;
+
+input [WIDTH-1:0] write_data;
+input [1:0] d_address;
+input [1:0] store_size;
+output [3:0] d_byteena;
+output [WIDTH-1:0] d_writedataout;
+
+reg [3:0] d_byteena;
+reg [WIDTH-1:0] d_writedataout;
+
+always @(write_data or d_address or store_size)
+begin
+  
+    case (store_size)
+        2'b11:
+            case(d_address[1:0])
+                0: 
+                begin 
+                    d_byteena=4'b1000; 
+                    d_writedataout={write_data[7:0],24'b0}; 
+                end
+                1: 
+                begin 
+                    d_byteena=4'b0100; 
+                    d_writedataout={8'b0,write_data[7:0],16'b0}; 
+                end
+                2: 
+                begin 
+                    d_byteena=4'b0010; 
+                    d_writedataout={16'b0,write_data[7:0],8'b0}; 
+                end
+                default: 
+                begin 
+                    d_byteena=4'b0001; 
+                    d_writedataout={24'b0,write_data[7:0]}; 
+                end
+            endcase
+        2'b01:
+            case(d_address[1])
+                0: 
+                begin 
+                    d_byteena=4'b1100; 
+                    d_writedataout={write_data[15:0],16'b0}; 
+                end
+                default: 
+                begin 
+                    d_byteena=4'b0011; 
+                    d_writedataout={16'b0,write_data[15:0]}; 
+                end
+            endcase
+        default:
+        begin
+            d_byteena=4'b1111;
+            d_writedataout=write_data;
+        end
+    endcase
+end
+
+endmodule
+
+/****************************************************************************
+          Load data translator
+          - moves read data to appropriate byte/halfword and zero/sign extends
+****************************************************************************/
+module load_data_translator(
+    d_readdatain,
+    d_address,
+    load_size,
+    load_sign_ext,
+    d_loadresult);
+parameter WIDTH=32;
+
+input [WIDTH-1:0] d_readdatain;
+input [1:0] d_address;
+input [1:0] load_size;
+input load_sign_ext;
+output [WIDTH-1:0] d_loadresult;
+
+reg [WIDTH-1:0] d_loadresult;
+
+always @(d_readdatain or d_address or load_size or load_sign_ext)
+begin
+    case (load_size)
+        2'b11:
+        begin
+            case (d_address[1:0])
+                0: d_loadresult[7:0]=d_readdatain[31:24];
+                1: d_loadresult[7:0]=d_readdatain[23:16];
+                2: d_loadresult[7:0]=d_readdatain[15:8];
+                default: d_loadresult[7:0]=d_readdatain[7:0];
+            endcase
+            d_loadresult[31:8]={24{load_sign_ext&d_loadresult[7]}};
+        end
+        2'b01:
+        begin
+            case (d_address[1])
+                0: d_loadresult[15:0]=d_readdatain[31:16];
+                default: d_loadresult[15:0]=d_readdatain[15:0];
+            endcase
+            d_loadresult[31:16]={16{load_sign_ext&d_loadresult[15]}};
+        end
+        default:
+            d_loadresult=d_readdatain;
+    endcase
+end
+
+endmodule
+
+// A FIFO is used for a non-duplex communication between a processor and another
+
+module fifo(clk,resetn,dataIn,dataOut,wr,rd,full,empty,overflow);
+  parameter LOGSIZE = 2; //Default size is 4 elements (only 3 reqd)
+  parameter WIDTH   = 32; //Default width is 32 bits
+  parameter SIZE = 1 << LOGSIZE;
+
+  input clk,resetn,rd,wr;
+  input [WIDTH-1:0] dataIn;
+  output[WIDTH-1:0] dataOut;
+
+  output full,empty,overflow;
+
+  reg [WIDTH-1:0] fifo[SIZE-1:0] ; //Fifo data stored here
+  reg overflow; //true if WR but no room, cleared on RD
+  reg [LOGSIZE-1:0] wptr,rptr; //Fifo read and write pointers
+  wire [WIDTH-1:0] fifoWire[SIZE-1:0] ; //Fifo data stored here
+
+  reg counter = 0;
+  reg [WIDTH-1:0] tempOut;
+
+  wire [LOGSIZE-1:0] wptr_inc = wptr+1;
+  assign empty = (wptr==rptr);
+  assign full  = (wptr_inc==rptr);
+  assign dataOut = tempOut;
+
+  assign fifoWire[0] = fifo[0];
+
+  //always @ (posedge clk) begin
+  //  if(reset) begin
+  //    wptr<=0;
+  //    rptr<=0;
+      
+  //    fifo[0] <= 32'hdeadbeef;
+  //	  fifo[1] <= 32'hdeadbeef;
+  //	  fifo[2] <= 32'hdeadbeef;      
+  //  end
+  //end
+
+  always @ (posedge clk) begin
+    if(wr==1) begin
+      fifo[wptr]<=dataIn;
+      wptr <= wptr + 1;
+    end
+    if(rd==1&&!empty) begin
+      casex(counter)
+        0: begin
+		  tempOut <= fifo[rptr];
+		  rptr <= rptr + 1;
+		  counter <= 1;
+		end
+	  endcase
+	end
+	
+	if(rd==0) begin
+	  counter <=0;	        
+    end  
+    if(resetn==0) begin
+      rptr<=0;
+      wptr<=0;
+    end    
+  end  
+
+endmodule
+
+/****************************************************************************
+          Generic Register
+****************************************************************************/
+module hi_reg(d,clk,resetn,en,q);
+parameter WIDTH=32;
+
+input clk;
+input resetn;
+input en;
+input [WIDTH-1:0] d;
+output [WIDTH-1:0] q;
+reg [WIDTH-1:0] q;
+
+always @(posedge clk or negedge resetn)		//asynchronous reset
+begin
+	if (resetn==0)
+		q<=0;
+	else if (en==1)
+		q<=d;
+end
+
+endmodule
+
+/****************************************************************************
+            Fetch Unit
+op
+  0  Conditional PC write
+  1  UnConditional PC write
+
+****************************************************************************/
+
+module ifetch(clk,resetn,
+        en,
+        squashn,
+        we,
+        op,
+        load,
+        load_data,
+
+        pc_out,
+        next_pc,
+
+  boot_iaddr, 
+  boot_idata, 
+  boot_iwe,
+
+        opcode,
+        rs,
+        rt,
+        rd,
+        sa,
+        offset,
+        instr_index,
+        func,
+        instr);
+
+parameter PC_WIDTH=30;
+parameter I_DATAWIDTH=32;
+parameter I_ADDRESSWIDTH=8;
+parameter I_SIZE=64;
+
+input [31:0] boot_iaddr;
+input [31:0] boot_idata;
+input boot_iwe;
+
+input clk;
+input resetn;
+input en;     // PC increment enable
+input we;     // PC write enable
+input squashn;// squash fetch
+input op;     // determines if conditional or unconditional branch
+input load;
+input [I_DATAWIDTH-1:0] load_data;
+output [I_DATAWIDTH-1:0] pc_out;   // output pc + 1 shifted left 2 bits
+output [PC_WIDTH-1:0] next_pc;
+output [31:26] opcode;
+output [25:21] rs;
+output [20:16] rt;
+output [15:11] rd;
+output [10:6] sa;
+output [15:0] offset;
+output [25:0] instr_index;
+output [5:0] func;
+output [I_DATAWIDTH-1:0] instr;
+
+
+wire [PC_WIDTH-1:0] pc_plus_1;
+wire [PC_WIDTH-1:0] pc;
+wire ctrl_load;
+wire out_of_sync;
+
+assign ctrl_load=(load&~op|op);
+
+lpm_counter pc_register(
+        .data(load_data[I_DATAWIDTH-1:2]),
+        .clock(clk),
+        .clk_en(en|we),
+        .cnt_en((~ctrl_load)&~out_of_sync),
+        .aset(~resetn),
+        .sload(ctrl_load),
+
+        // synopsys translate_off
+        .updown(), .cin(), .sset(), .sclr(), .aclr(), .aload(), 
+        .eq(), .cout(),
+        // synopsys translate_on
+
+        .q(pc));
+    defparam  pc_register.lpm_width=PC_WIDTH,
+              pc_register.lpm_avalue="16777215";   // 0x4000000 divide by 4
+
+/****** Re-synchronize for case:
+ * en=0 && we=1  ->  pc_register gets updated but not imem address
+ *
+ * Solution: stall pc_register and load memory address by changing 
+ * incrementer to increment by 0
+ *******/
+register sync_pcs_up( (we&~en&squashn), clk, resetn,en|we, out_of_sync);
+  defparam sync_pcs_up.WIDTH=1;
+
+altsyncram  imem (
+    .clock0 (clk),
+    .clocken0 (en|~squashn|~resetn),
+    .clock1 (clk),                              // changed
+    .clocken1 (boot_iwe),                       // changed
+    `ifdef TEST_BENCH
+    .aclr0(~resetn), 
+    `endif
+    .address_a (next_pc[I_ADDRESSWIDTH-1:0]),
+    .wren_b (boot_iwe), .data_b (boot_idata), .address_b (boot_iaddr), //changed
+
+    // synopsys translate_off
+    .wren_a (), .rden_b (), .data_a (), 
+    .aclr1 (), .byteena_a (), .byteena_b (),
+    .addressstall_a (), .addressstall_b (), .q_b (),
+    // synopsys translate_on
+    
+    .q_a (instr)
+    );
+    defparam
+        imem.intended_device_family = "Stratix",
+        imem.width_a = I_DATAWIDTH, 
+        imem.widthad_a = I_ADDRESSWIDTH,
+        imem.numwords_a = I_SIZE,
+        imem.operation_mode = "BIDIR_DUAL_PORT",    // changed
+        imem.width_b = I_DATAWIDTH,                 // new
+        imem.widthad_b = I_ADDRESSWIDTH,            // new
+        imem.numwords_b = I_SIZE,                   // new
+        imem.outdata_reg_b = "UNREGISTERED",
+        imem.outdata_reg_a = "UNREGISTERED",
+        imem.address_reg_b = "CLOCK1",              // new
+        imem.wrcontrol_wraddress_reg_b = "CLOCK1",  // new
+        imem.width_byteena_a = 1,
+        `ifdef TEST_BENCH
+        imem.address_aclr_a = "CLEAR0",
+        imem.outdata_aclr_a = "CLEAR0",
+        imem.init_file = "instr.rif",
+        `endif
+        `ifdef QUARTUS_SIM
+          imem.init_file = "instr.mif",
+          imem.ram_block_type = "AUTO",
+        `else
+          imem.ram_block_type = "M4K",
+        `endif
+        imem.lpm_type = "altsyncram";
+        
+
+wire dummy;
+
+assign {dummy,pc_plus_1} = pc + {1'b0,~out_of_sync};
+assign pc_out={pc_plus_1,2'b0};
+
+assign next_pc = ctrl_load ? load_data[I_DATAWIDTH-1:2] : pc_plus_1;
+
+assign opcode=instr[31:26];
+assign rs=instr[25:21];
+assign rt=instr[20:16];
+assign rd=instr[15:11];
+assign sa=instr[10:6];
+assign offset=instr[15:0]; 
+assign instr_index=instr[25:0];
+assign func=instr[5:0];
+
+endmodule
+/****************************************************************************
+          logic unit
+- note ALU must be able to increment PC for JAL type instructions
+
+Operation Table
+  op
+  0     AND
+  1     OR
+  2     XOR
+  3     NOR
+****************************************************************************/
+module logic_unit (
+            opA, opB,
+            op,
+            result);
+parameter WIDTH=32;
+
+
+input [WIDTH-1:0] opA;
+input [WIDTH-1:0] opB;
+input [2-1:0] op;
+output [WIDTH-1:0] result;
+
+reg [WIDTH-1:0] logic_result;
+
+always@(opA or opB or op )
+    case(op)
+        2'b00:
+            logic_result=opA&opB;
+        2'b01:
+            logic_result=opA|opB;
+        2'b10:
+            logic_result=opA^opB;
+        2'b11:
+            logic_result=~(opA|opB);
+    endcase
+
+assign result=logic_result;
+
+
+endmodule
+
+/****************************************************************************
+          Generic Register
+****************************************************************************/
+module lo_reg(d,clk,resetn,en,q);
+parameter WIDTH=32;
+
+input clk;
+input resetn;
+input en;
+input [WIDTH-1:0] d;
+output [WIDTH-1:0] q;
+reg [WIDTH-1:0] q;
+
+always @(posedge clk or negedge resetn)		//asynchronous reset
+begin
+	if (resetn==0)
+		q<=0;
+	else if (en==1)
+		q<=d;
+end
+
+endmodule
+
+module lpm_add_sub (dataa, datab, cin, add_sub, result);
+parameter lpm_width=1;
+parameter lpm_representation="SIGNED";
+
+input [lpm_width-1:0] dataa;
+input [lpm_width-1:0] datab;
+input cin;
+input add_sub;
+output [lpm_width:0] result;
+
+assign result = (add_sub ?
+                 dataa + datab :
+					  dataa -datab);
+
+endmodule
+
+module lpm_counter (data, clock, clk_en, cnt_en, aset, sload, q);
+
+parameter lpm_width=1;
+parameter lpm_avalue="1"; 
+
+input [lpm_width-1:0] data;
+input clock;
+input clk_en;
+input cnt_en;
+input aset;
+input sload;
+output [lpm_width-1:0] q;
+reg [lpm_width-1:0] q;
+
+always @(posedge clock or posedge aset)
+if (aset)
+q <= lpm_avalue;
+else if (clk_en) begin
+if (sload)
+q <= data;
+else if (cnt_en)
+q <= q+1;
+end
+
+endmodule
+
+module lpm_mult(dataa, datab, result);
+parameter lpm_widtha = 1;
+parameter lpm_widthb = 1;
+parameter lpm_widthp = 2;
+
+parameter lpm_widths = 1;
+parameter lpm_pipeline = 0;
+parameter lpm_type = "LPM_MULT";
+parameter lpm_representation = "SIGNED";
+parameter lpm_hint = "MAXIMIZE_SPEED=6";
+
+input [lpm_widtha-1:0] dataa;
+input [lpm_widthb-1:0] datab;
+output [lpm_widthp-1:0] result;
+
+assign result = dataa * datab;
+endmodule
+module merge26lo(in1, in2, out);
+input [31:0] in1;
+input [25:0] in2;
+output [31:0] out;
+
+assign out[31:0]={in1[31:28],in2[25:0],2'b0};
+endmodule
+
+/****************************************************************************
+          MUL/DIV unit
+
+Operation table
+
+   op
+   0    MULTU
+   1    MULT
+****************************************************************************/
+module mul(
+            opA, opB, 
+            op,                 //is_signed
+            hi, lo);
+parameter WIDTH=32;
+
+input [WIDTH-1:0] opA;
+input [WIDTH-1:0] opB;
+input op;
+
+output [WIDTH-1:0] hi;
+output [WIDTH-1:0] lo;
+
+wire is_signed;
+assign is_signed=op;
+
+wire dum,dum2;
+
+    lpm_mult	lpm_mult_component (
+        .dataa ({is_signed&opA[WIDTH-1],opA}),
+        .datab ({is_signed&opB[WIDTH-1],opB}),
+        .result ({dum2,dum,hi,lo})
+        // synopsys translate_off
+        ,
+        .clken (1'b1),
+        .clock (1'b0),
+        .sum (1'b0),
+        .aclr (1'b0)
+        // synopsys translate_on
+    );
+    defparam
+        lpm_mult_component.lpm_widtha = WIDTH+1,
+        lpm_mult_component.lpm_widthb = WIDTH+1,
+        lpm_mult_component.lpm_widthp = 2*WIDTH+2,
+        lpm_mult_component.lpm_widths = 1,
+        lpm_mult_component.lpm_pipeline = 0,
+        lpm_mult_component.lpm_type = "LPM_MULT",
+        lpm_mult_component.lpm_representation = "SIGNED",
+        lpm_mult_component.lpm_hint = "MAXIMIZE_SPEED=6";
+
+endmodule
+
+module pcadder(pc, offset, result);
+parameter PC_WIDTH=32;
+
+input [PC_WIDTH-1:0] pc;
+input [PC_WIDTH-1:0] offset;
+output [PC_WIDTH-1:0] result;
+
+wire dum;
+
+assign {dum,result} = pc + {offset[PC_WIDTH-3:0],2'b0};
+
+endmodule
+/****************************************************************************
+          Register File
+
+   - Has two read ports (a and b) and one write port (c)
+   - sel chooses the register to be read/written
+****************************************************************************/
+module reg_file(clk,resetn, 
+	a_reg, a_readdataout, a_en,
+	b_reg, b_readdataout, b_en,
+	c_reg, c_writedatain, c_we);
+
+parameter WIDTH=32;
+parameter NUMREGS=32;
+parameter LOG2NUMREGS=5;
+
+input clk;
+input resetn;
+
+input a_en;
+input b_en;
+
+input [LOG2NUMREGS-1:0] a_reg,b_reg,c_reg;
+output [WIDTH-1:0] a_readdataout, b_readdataout;
+input [WIDTH-1:0] c_writedatain;
+input c_we;
+
+	altsyncram	reg_file1(
+				.wren_a (c_we&(|c_reg)),
+				.clock0 (clk),
+        .clock1 (clk),
+        .clocken1 (a_en),
+				.address_a (c_reg[LOG2NUMREGS-1:0]),
+				.address_b (a_reg[LOG2NUMREGS-1:0]),
+				.data_a (c_writedatain),
+				.q_b (a_readdataout)
+        // synopsys translate_off
+        ,
+        .aclr0 (1'b0),
+        .aclr1 (1'b0),
+        .byteena_a (1'b1),
+        .byteena_b (1'b1),
+        .data_b (32'b11111111),
+        .wren_b (1'b0),
+        .rden_b(1'b1),
+        .q_a (),
+        .clocken0 (1'b1),
+        .addressstall_a (1'b0),
+        .addressstall_b (1'b0)
+        // synopsys translate_on
+    );
+	defparam
+		reg_file1.operation_mode = "DUAL_PORT",
+		reg_file1.width_a = WIDTH,
+		reg_file1.widthad_a = LOG2NUMREGS,
+		reg_file1.numwords_a = NUMREGS,
+		reg_file1.width_b = WIDTH,
+		reg_file1.widthad_b = LOG2NUMREGS,
+		reg_file1.numwords_b = NUMREGS,
+		reg_file1.lpm_type = "altsyncram",
+		reg_file1.width_byteena_a = 1,
+		reg_file1.outdata_reg_b = "UNREGISTERED",
+		reg_file1.indata_aclr_a = "NONE",
+		reg_file1.wrcontrol_aclr_a = "NONE",
+		reg_file1.address_aclr_a = "NONE",
+		reg_file1.rdcontrol_reg_b = "CLOCK1",
+		reg_file1.address_reg_b = "CLOCK1",
+		reg_file1.address_aclr_b = "NONE",
+		reg_file1.outdata_aclr_b = "NONE",
+		reg_file1.read_during_write_mode_mixed_ports = "OLD_DATA",
+		reg_file1.ram_block_type = "AUTO",
+		reg_file1.intended_device_family = "Stratix";
+
+		//Reg file duplicated to avoid contention between 2 read
+		//and 1 write
+	altsyncram	reg_file2(
+				.wren_a (c_we&(|c_reg)),
+				.clock0 (clk),
+        .clock1 (clk),
+        .clocken1 (b_en),
+				.address_a (c_reg[LOG2NUMREGS-1:0]),
+				.address_b (b_reg[LOG2NUMREGS-1:0]),
+				.data_a (c_writedatain),
+				.q_b (b_readdataout)
+        // synopsys translate_off
+        ,
+        .aclr0 (1'b0),
+        .aclr1 (1'b0),
+        .byteena_a (1'b1),
+        .byteena_b (1'b1),
+        .data_b (32'b11111111),
+        .rden_b(1'b1),
+        .wren_b (1'b0),
+        .q_a (),
+        .clocken0 (1'b1),
+        .addressstall_a (1'b0),
+        .addressstall_b (1'b0)
+        // synopsys translate_on
+    );
+	defparam
+		reg_file2.operation_mode = "DUAL_PORT",
+		reg_file2.width_a = WIDTH,
+		reg_file2.widthad_a = LOG2NUMREGS,
+		reg_file2.numwords_a = NUMREGS,
+		reg_file2.width_b = WIDTH,
+		reg_file2.widthad_b = LOG2NUMREGS,
+		reg_file2.numwords_b = NUMREGS,
+		reg_file2.lpm_type = "altsyncram",
+		reg_file2.width_byteena_a = 1,
+		reg_file2.outdata_reg_b = "UNREGISTERED",
+		reg_file2.indata_aclr_a = "NONE",
+		reg_file2.wrcontrol_aclr_a = "NONE",
+		reg_file2.address_aclr_a = "NONE",
+		reg_file2.rdcontrol_reg_b = "CLOCK1",
+		reg_file2.address_reg_b = "CLOCK1",
+		reg_file2.address_aclr_b = "NONE",
+		reg_file2.outdata_aclr_b = "NONE",
+		reg_file2.read_during_write_mode_mixed_ports = "OLD_DATA",
+		reg_file2.ram_block_type = "AUTO",
+		reg_file2.intended_device_family = "Stratix";
+
+endmodule
+
+/****************************************************************************
+          Shifter unit
+
+Opcode Table:
+
+sign_ext dir 
+ 0        0    |  ShiftLeft
+ 0        1    |  ShiftRightLogic
+ 1        1    |  ShiftRightArith
+          
+****************************************************************************/
+module shifter(clk, resetn,
+            opB, sa, 
+            op, start, stalled,
+            dst,
+            result);
+parameter WIDTH=32;
+
+input clk;
+input resetn;
+
+input [WIDTH-1:0] opB;
+input [4:0] sa;                             // Shift Amount
+input [2-1:0] op;
+
+input start;
+output stalled;
+
+input [4:0] dst;
+
+output [WIDTH-1:0] result;
+
+wire sign_ext;
+wire shift_direction;
+assign sign_ext=op[1];
+assign shift_direction=op[0];
+
+reg [WIDTH-1:0] shifter;
+reg shift_state;
+reg [4:0] shift_count;
+wire wasjustbusy;
+wire is_zeroshift;
+wire was_zeroshift;
+wire is_nop;
+
+wire hi_bit, lo_bit;
+
+assign hi_bit=sign_ext&opB[WIDTH-1];
+assign lo_bit=0;
+// to separate nops from zero shifts (which occur) we hack this
+assign is_nop=~(|dst);
+assign is_zeroshift=(~|sa)&~is_nop;
+
+assign stalled = (start&(~wasjustbusy)&~is_nop&~was_zeroshift)|shift_state;
+assign result=shifter;
+
+register wasjustbusy_reg(shift_state,clk,resetn,1'b1,wasjustbusy);
+  defparam wasjustbusy_reg.WIDTH=1;
+
+register was_zeroshift_reg(is_zeroshift&~was_zeroshift,
+                           clk,resetn,start,was_zeroshift);
+  defparam was_zeroshift_reg.WIDTH=1;
+
+always @(posedge clk or negedge resetn)
+begin
+    if (!resetn)
+    begin
+        shifter<=0;
+        shift_state<=0;
+        shift_count<=0;
+    end
+    else
+    begin
+        case(shift_state)
+            0:
+                if (start&~wasjustbusy)
+                begin
+                    shift_count<=sa;
+                    shifter<=opB;
+                    if (!is_zeroshift && !is_nop)
+                        shift_state<=1;
+                end
+            default:
+            begin
+                if (shift_count==1)
+                    shift_state<=0;
+                shift_count<=shift_count-1;
+                shifter[31]<=(shift_direction) ? hi_bit : shifter[30];
+                shifter[30]<=(shift_direction) ? shifter[31] : shifter[29];
+                shifter[29]<=(shift_direction) ? shifter[30] : shifter[28];
+                shifter[28]<=(shift_direction) ? shifter[29] : shifter[27];
+                shifter[27]<=(shift_direction) ? shifter[28] : shifter[26];
+                shifter[26]<=(shift_direction) ? shifter[27] : shifter[25];
+                shifter[25]<=(shift_direction) ? shifter[26] : shifter[24];
+                shifter[24]<=(shift_direction) ? shifter[25] : shifter[23];
+                shifter[23]<=(shift_direction) ? shifter[24] : shifter[22];
+                shifter[22]<=(shift_direction) ? shifter[23] : shifter[21];
+                shifter[21]<=(shift_direction) ? shifter[22] : shifter[20];
+                shifter[20]<=(shift_direction) ? shifter[21] : shifter[19];
+                shifter[19]<=(shift_direction) ? shifter[20] : shifter[18];
+                shifter[18]<=(shift_direction) ? shifter[19] : shifter[17];
+                shifter[17]<=(shift_direction) ? shifter[18] : shifter[16];
+                shifter[16]<=(shift_direction) ? shifter[17] : shifter[15];
+                shifter[15]<=(shift_direction) ? shifter[16] : shifter[14];
+                shifter[14]<=(shift_direction) ? shifter[15] : shifter[13];
+                shifter[13]<=(shift_direction) ? shifter[14] : shifter[12];
+                shifter[12]<=(shift_direction) ? shifter[13] : shifter[11];
+                shifter[11]<=(shift_direction) ? shifter[12] : shifter[10];
+                shifter[10]<=(shift_direction) ? shifter[11] : shifter[9];
+                shifter[9]<=(shift_direction) ? shifter[10] : shifter[8];
+                shifter[8]<=(shift_direction) ? shifter[9] : shifter[7];
+                shifter[7]<=(shift_direction) ? shifter[8] : shifter[6];
+                shifter[6]<=(shift_direction) ? shifter[7] : shifter[5];
+                shifter[5]<=(shift_direction) ? shifter[6] : shifter[4];
+                shifter[4]<=(shift_direction) ? shifter[5] : shifter[3];
+                shifter[3]<=(shift_direction) ? shifter[4] : shifter[2];
+                shifter[2]<=(shift_direction) ? shifter[3] : shifter[1];
+                shifter[1]<=(shift_direction) ? shifter[2] : shifter[0];
+                shifter[0]<=(shift_direction) ? shifter[1] : lo_bit;
+            end
+        endcase
+    end
+end
+
+endmodule
+
+
+module signext16 ( in, out);
+
+input [15:0] in;
+output [31:0] out;
+
+assign out={{16{in[15]}},in[15:0]};
+
+endmodule
+`timescale 1ns / 1ns
+(* top *)
+module system50(clk_IBUF,resetn,boot_iaddr,boot_idata,boot_daddr,boot_ddata,reg_file_b_readdataout,processor_select);
+	input clk_IBUF;
+	wire clk;
+	bufgctrl b(.i({1'bx, clk_IBUF}), .s(2'bxx), .ce(2'bxx), .ignore(2'bxx), .o(clk));
+	input resetn;
+	input [6:0] processor_select;
+	output [31:0] reg_file_b_readdataout;
+	input [13:0] boot_iaddr;
+	input [31:0] boot_idata;
+	input [13:0] boot_daddr;
+	input [31:0] boot_ddata;
+
+
+	reg boot_iwe0;
+	reg boot_dwe0;
+	reg boot_iwe1;
+	reg boot_dwe1;
+	reg boot_iwe2;
+	reg boot_dwe2;
+	reg boot_iwe3;
+	reg boot_dwe3;
+	reg boot_iwe4;
+	reg boot_dwe4;
+	reg boot_iwe5;
+	reg boot_dwe5;
+	reg boot_iwe6;
+	reg boot_dwe6;
+	reg boot_iwe7;
+	reg boot_dwe7;
+	reg boot_iwe8;
+	reg boot_dwe8;
+	reg boot_iwe9;
+	reg boot_dwe9;
+	reg boot_iwe10;
+	reg boot_dwe10;
+	reg boot_iwe11;
+	reg boot_dwe11;
+	reg boot_iwe12;
+	reg boot_dwe12;
+	reg boot_iwe13;
+	reg boot_dwe13;
+	reg boot_iwe14;
+	reg boot_dwe14;
+	reg boot_iwe15;
+	reg boot_dwe15;
+	reg boot_iwe16;
+	reg boot_dwe16;
+	reg boot_iwe17;
+	reg boot_dwe17;
+	reg boot_iwe18;
+	reg boot_dwe18;
+	reg boot_iwe19;
+	reg boot_dwe19;
+	reg boot_iwe20;
+	reg boot_dwe20;
+	reg boot_iwe21;
+	reg boot_dwe21;
+	reg boot_iwe22;
+	reg boot_dwe22;
+	reg boot_iwe23;
+	reg boot_dwe23;
+	reg boot_iwe24;
+	reg boot_dwe24;
+	reg boot_iwe25;
+	reg boot_dwe25;
+	reg boot_iwe26;
+	reg boot_dwe26;
+	reg boot_iwe27;
+	reg boot_dwe27;
+	reg boot_iwe28;
+	reg boot_dwe28;
+	reg boot_iwe29;
+	reg boot_dwe29;
+	reg boot_iwe30;
+	reg boot_dwe30;
+	reg boot_iwe31;
+	reg boot_dwe31;
+	reg boot_iwe32;
+	reg boot_dwe32;
+	reg boot_iwe33;
+	reg boot_dwe33;
+	reg boot_iwe34;
+	reg boot_dwe34;
+	reg boot_iwe35;
+	reg boot_dwe35;
+	reg boot_iwe36;
+	reg boot_dwe36;
+	reg boot_iwe37;
+	reg boot_dwe37;
+	reg boot_iwe38;
+	reg boot_dwe38;
+	reg boot_iwe39;
+	reg boot_dwe39;
+	reg boot_iwe40;
+	reg boot_dwe40;
+	reg boot_iwe41;
+	reg boot_dwe41;
+	reg boot_iwe42;
+	reg boot_dwe42;
+	reg boot_iwe43;
+	reg boot_dwe43;
+	reg boot_iwe44;
+	reg boot_dwe44;
+	reg boot_iwe45;
+	reg boot_dwe45;
+	reg boot_iwe46;
+	reg boot_dwe46;
+	reg boot_iwe47;
+	reg boot_dwe47;
+	reg boot_iwe48;
+	reg boot_dwe48;
+	reg boot_iwe49;
+	reg boot_dwe49;
+
+	 //Processor 0 control and data signals
+	wire wrProc0South;
+	wire fullProc0South;
+	wire [31:0] dataOutProc0South;
+
+	 //Processor 0 control and data signals
+	wire rdProc0East;
+	wire emptyProc0East;
+	wire [31:0] dataInProc0East;
+
+	 //Processor 0 control and data signals
+	wire wrProc0East;
+	wire fullProc0East;
+	wire [31:0] dataOutProc0East;
+
+	 //Processor 1 control and data signals
+	wire rdProc1West;
+	wire emptyProc1West;
+	wire [31:0] dataInProc1West;
+
+	 //Processor 1 control and data signals
+	wire wrProc1West;
+	wire fullProc1West;
+	wire [31:0] dataOutProc1West;
+
+	 //Processor 2 control and data signals
+	wire rdProc2East;
+	wire emptyProc2East;
+	wire [31:0] dataInProc2East;
+
+	 //Processor 3 control and data signals
+	wire rdProc3East;
+	wire emptyProc3East;
+	wire [31:0] dataInProc3East;
+
+	 //Processor 3 control and data signals
+	wire wrProc3West;
+	wire fullProc3West;
+	wire [31:0] dataOutProc3West;
+
+	 //Processor 4 control and data signals
+	wire rdProc4East;
+	wire emptyProc4East;
+	wire [31:0] dataInProc4East;
+
+	 //Processor 4 control and data signals
+	wire wrProc4West;
+	wire fullProc4West;
+	wire [31:0] dataOutProc4West;
+
+	 //Processor 5 control and data signals
+	wire rdProc5East;
+	wire emptyProc5East;
+	wire [31:0] dataInProc5East;
+
+	 //Processor 5 control and data signals
+	wire wrProc5West;
+	wire fullProc5West;
+	wire [31:0] dataOutProc5West;
+
+	 //Processor 6 control and data signals
+	wire rdProc6South;
+	wire emptyProc6South;
+	wire [31:0] dataInProc6South;
+
+	 //Processor 6 control and data signals
+	wire wrProc6South;
+	wire fullProc6South;
+	wire [31:0] dataOutProc6South;
+
+	 //Processor 6 control and data signals
+	wire rdProc6East;
+	wire emptyProc6East;
+	wire [31:0] dataInProc6East;
+
+	 //Processor 6 control and data signals
+	wire wrProc6West;
+	wire fullProc6West;
+	wire [31:0] dataOutProc6West;
+
+	 //Processor 7 control and data signals
+	wire wrProc7South;
+	wire fullProc7South;
+	wire [31:0] dataOutProc7South;
+
+	 //Processor 7 control and data signals
+	wire rdProc7East;
+	wire emptyProc7East;
+	wire [31:0] dataInProc7East;
+
+	 //Processor 7 control and data signals
+	wire wrProc7West;
+	wire fullProc7West;
+	wire [31:0] dataOutProc7West;
+
+	 //Processor 8 control and data signals
+	wire rdProc8South;
+	wire emptyProc8South;
+	wire [31:0] dataInProc8South;
+
+	 //Processor 8 control and data signals
+	wire rdProc8East;
+	wire emptyProc8East;
+	wire [31:0] dataInProc8East;
+
+	 //Processor 8 control and data signals
+	wire wrProc8West;
+	wire fullProc8West;
+	wire [31:0] dataOutProc8West;
+
+	 //Processor 9 control and data signals
+	wire rdProc9South;
+	wire emptyProc9South;
+	wire [31:0] dataInProc9South;
+
+	 //Processor 9 control and data signals
+	wire wrProc9West;
+	wire fullProc9West;
+	wire [31:0] dataOutProc9West;
+
+	 //Processor 10 control and data signals
+	wire rdProc10North;
+	wire emptyProc10North;
+	wire [31:0] dataInProc10North;
+
+	 //Processor 10 control and data signals
+	wire wrProc10South;
+	wire fullProc10South;
+	wire [31:0] dataOutProc10South;
+
+	 //Processor 11 control and data signals
+	wire rdProc11South;
+	wire emptyProc11South;
+	wire [31:0] dataInProc11South;
+
+	 //Processor 11 control and data signals
+	wire wrProc11East;
+	wire fullProc11East;
+	wire [31:0] dataOutProc11East;
+
+	 //Processor 12 control and data signals
+	wire rdProc12South;
+	wire emptyProc12South;
+	wire [31:0] dataInProc12South;
+
+	 //Processor 12 control and data signals
+	wire wrProc12South;
+	wire fullProc12South;
+	wire [31:0] dataOutProc12South;
+
+	 //Processor 12 control and data signals
+	wire wrProc12East;
+	wire fullProc12East;
+	wire [31:0] dataOutProc12East;
+
+	 //Processor 12 control and data signals
+	wire rdProc12West;
+	wire emptyProc12West;
+	wire [31:0] dataInProc12West;
+
+	 //Processor 13 control and data signals
+	wire wrProc13East;
+	wire fullProc13East;
+	wire [31:0] dataOutProc13East;
+
+	 //Processor 13 control and data signals
+	wire rdProc13West;
+	wire emptyProc13West;
+	wire [31:0] dataInProc13West;
+
+	 //Processor 14 control and data signals
+	wire rdProc14South;
+	wire emptyProc14South;
+	wire [31:0] dataInProc14South;
+
+	 //Processor 14 control and data signals
+	wire wrProc14South;
+	wire fullProc14South;
+	wire [31:0] dataOutProc14South;
+
+	 //Processor 14 control and data signals
+	wire rdProc14East;
+	wire emptyProc14East;
+	wire [31:0] dataInProc14East;
+
+	 //Processor 14 control and data signals
+	wire wrProc14East;
+	wire fullProc14East;
+	wire [31:0] dataOutProc14East;
+
+	 //Processor 14 control and data signals
+	wire rdProc14West;
+	wire emptyProc14West;
+	wire [31:0] dataInProc14West;
+
+	 //Processor 15 control and data signals
+	wire wrProc15South;
+	wire fullProc15South;
+	wire [31:0] dataOutProc15South;
+
+	 //Processor 15 control and data signals
+	wire rdProc15East;
+	wire emptyProc15East;
+	wire [31:0] dataInProc15East;
+
+	 //Processor 15 control and data signals
+	wire wrProc15East;
+	wire fullProc15East;
+	wire [31:0] dataOutProc15East;
+
+	 //Processor 15 control and data signals
+	wire rdProc15West;
+	wire emptyProc15West;
+	wire [31:0] dataInProc15West;
+
+	 //Processor 15 control and data signals
+	wire wrProc15West;
+	wire fullProc15West;
+	wire [31:0] dataOutProc15West;
+
+	 //Processor 16 control and data signals
+	wire rdProc16North;
+	wire emptyProc16North;
+	wire [31:0] dataInProc16North;
+
+	 //Processor 16 control and data signals
+	wire wrProc16North;
+	wire fullProc16North;
+	wire [31:0] dataOutProc16North;
+
+	 //Processor 16 control and data signals
+	wire rdProc16South;
+	wire emptyProc16South;
+	wire [31:0] dataInProc16South;
+
+	 //Processor 16 control and data signals
+	wire wrProc16South;
+	wire fullProc16South;
+	wire [31:0] dataOutProc16South;
+
+	 //Processor 16 control and data signals
+	wire rdProc16East;
+	wire emptyProc16East;
+	wire [31:0] dataInProc16East;
+
+	 //Processor 16 control and data signals
+	wire rdProc16West;
+	wire emptyProc16West;
+	wire [31:0] dataInProc16West;
+
+	 //Processor 16 control and data signals
+	wire wrProc16West;
+	wire fullProc16West;
+	wire [31:0] dataOutProc16West;
+
+	 //Processor 17 control and data signals
+	wire rdProc17North;
+	wire emptyProc17North;
+	wire [31:0] dataInProc17North;
+
+	 //Processor 17 control and data signals
+	wire wrProc17West;
+	wire fullProc17West;
+	wire [31:0] dataOutProc17West;
+
+	 //Processor 18 control and data signals
+	wire wrProc18North;
+	wire fullProc18North;
+	wire [31:0] dataOutProc18North;
+
+	 //Processor 18 control and data signals
+	wire rdProc18South;
+	wire emptyProc18South;
+	wire [31:0] dataInProc18South;
+
+	 //Processor 18 control and data signals
+	wire rdProc18East;
+	wire emptyProc18East;
+	wire [31:0] dataInProc18East;
+
+	 //Processor 18 control and data signals
+	wire wrProc18East;
+	wire fullProc18East;
+	wire [31:0] dataOutProc18East;
+
+	 //Processor 19 control and data signals
+	wire wrProc19North;
+	wire fullProc19North;
+	wire [31:0] dataOutProc19North;
+
+	 //Processor 19 control and data signals
+	wire rdProc19South;
+	wire emptyProc19South;
+	wire [31:0] dataInProc19South;
+
+	 //Processor 19 control and data signals
+	wire rdProc19West;
+	wire emptyProc19West;
+	wire [31:0] dataInProc19West;
+
+	 //Processor 19 control and data signals
+	wire wrProc19West;
+	wire fullProc19West;
+	wire [31:0] dataOutProc19West;
+
+	 //Processor 20 control and data signals
+	wire rdProc20North;
+	wire emptyProc20North;
+	wire [31:0] dataInProc20North;
+
+	 //Processor 20 control and data signals
+	wire wrProc20South;
+	wire fullProc20South;
+	wire [31:0] dataOutProc20South;
+
+	 //Processor 21 control and data signals
+	wire wrProc21North;
+	wire fullProc21North;
+	wire [31:0] dataOutProc21North;
+
+	 //Processor 21 control and data signals
+	wire rdProc21South;
+	wire emptyProc21South;
+	wire [31:0] dataInProc21South;
+
+	 //Processor 21 control and data signals
+	wire wrProc21East;
+	wire fullProc21East;
+	wire [31:0] dataOutProc21East;
+
+	 //Processor 22 control and data signals
+	wire rdProc22North;
+	wire emptyProc22North;
+	wire [31:0] dataInProc22North;
+
+	 //Processor 22 control and data signals
+	wire wrProc22North;
+	wire fullProc22North;
+	wire [31:0] dataOutProc22North;
+
+	 //Processor 22 control and data signals
+	wire rdProc22South;
+	wire emptyProc22South;
+	wire [31:0] dataInProc22South;
+
+	 //Processor 22 control and data signals
+	wire wrProc22East;
+	wire fullProc22East;
+	wire [31:0] dataOutProc22East;
+
+	 //Processor 22 control and data signals
+	wire rdProc22West;
+	wire emptyProc22West;
+	wire [31:0] dataInProc22West;
+
+	 //Processor 23 control and data signals
+	wire rdProc23South;
+	wire emptyProc23South;
+	wire [31:0] dataInProc23South;
+
+	 //Processor 23 control and data signals
+	wire wrProc23East;
+	wire fullProc23East;
+	wire [31:0] dataOutProc23East;
+
+	 //Processor 23 control and data signals
+	wire rdProc23West;
+	wire emptyProc23West;
+	wire [31:0] dataInProc23West;
+
+	 //Processor 24 control and data signals
+	wire rdProc24North;
+	wire emptyProc24North;
+	wire [31:0] dataInProc24North;
+
+	 //Processor 24 control and data signals
+	wire wrProc24North;
+	wire fullProc24North;
+	wire [31:0] dataOutProc24North;
+
+	 //Processor 24 control and data signals
+	wire wrProc24South;
+	wire fullProc24South;
+	wire [31:0] dataOutProc24South;
+
+	 //Processor 24 control and data signals
+	wire wrProc24East;
+	wire fullProc24East;
+	wire [31:0] dataOutProc24East;
+
+	 //Processor 24 control and data signals
+	wire rdProc24West;
+	wire emptyProc24West;
+	wire [31:0] dataInProc24West;
+
+	 //Processor 25 control and data signals
+	wire rdProc25North;
+	wire emptyProc25North;
+	wire [31:0] dataInProc25North;
+
+	 //Processor 25 control and data signals
+	wire wrProc25South;
+	wire fullProc25South;
+	wire [31:0] dataOutProc25South;
+
+	 //Processor 25 control and data signals
+	wire wrProc25East;
+	wire fullProc25East;
+	wire [31:0] dataOutProc25East;
+
+	 //Processor 25 control and data signals
+	wire rdProc25West;
+	wire emptyProc25West;
+	wire [31:0] dataInProc25West;
+
+	 //Processor 26 control and data signals
+	wire rdProc26North;
+	wire emptyProc26North;
+	wire [31:0] dataInProc26North;
+
+	 //Processor 26 control and data signals
+	wire wrProc26North;
+	wire fullProc26North;
+	wire [31:0] dataOutProc26North;
+
+	 //Processor 26 control and data signals
+	wire rdProc26South;
+	wire emptyProc26South;
+	wire [31:0] dataInProc26South;
+
+	 //Processor 26 control and data signals
+	wire wrProc26South;
+	wire fullProc26South;
+	wire [31:0] dataOutProc26South;
+
+	 //Processor 26 control and data signals
+	wire rdProc26East;
+	wire emptyProc26East;
+	wire [31:0] dataInProc26East;
+
+	 //Processor 26 control and data signals
+	wire wrProc26East;
+	wire fullProc26East;
+	wire [31:0] dataOutProc26East;
+
+	 //Processor 26 control and data signals
+	wire rdProc26West;
+	wire emptyProc26West;
+	wire [31:0] dataInProc26West;
+
+	 //Processor 27 control and data signals
+	wire rdProc27South;
+	wire Proc27South;
+	wire [31:0] dataInProc27South;
+
+	 //Processor 27 control and data signals
+	wire wrProc27East;
+	wire fullProc27East;
+	wire [31:0] dataOutProc27East;
+
+	 //Processor 27 control and data signals
+	wire rdProc27West;
+	wire emptyProc27West;
+	wire [31:0] dataInProc27West;
+
+	 //Processor 27 control and data signals
+	wire wrProc27West;
+	wire fullProc27West;
+	wire [31:0] dataOutProc27West;
+
+	 //Processor 28 control and data signals
+	wire wrProc28North;
+	wire fullProc28North;
+	wire [31:0] dataOutProc28North;
+
+	 //Processor 28 control and data signals
+	wire wrProc28East;
+	wire fullProc28East;
+	wire [31:0] dataOutProc28East;
+
+	 //Processor 28 control and data signals
+	wire rdProc28West;
+	wire emptyProc28West;
+	wire [31:0] dataInProc28West;
+
+	 //Processor 29 control and data signals
+	wire wrProc29North;
+	wire fullProc29North;
+	wire [31:0] dataOutProc29North;
+
+	 //Processor 29 control and data signals
+	wire rdProc29West;
+	wire emptyProc29West;
+	wire [31:0] dataInProc29West;
+
+	 //Processor 30 control and data signals
+	wire rdProc30North;
+	wire emptyProc30North;
+	wire [31:0] dataInProc30North;
+
+	 //Processor 30 control and data signals
+	wire wrProc30South;
+	wire fullProc30South;
+	wire [31:0] dataOutProc30South;
+
+	 //Processor 30 control and data signals
+	wire wrProc30East;
+	wire fullProc30East;
+	wire [31:0] dataOutProc30East;
+
+	 //Processor 31 control and data signals
+	wire wrProc31North;
+	wire fullProc31North;
+	wire [31:0] dataOutProc31North;
+
+	 //Processor 31 control and data signals
+	wire rdProc31South;
+	wire emptyProc31South;
+	wire [31:0] dataInProc31South;
+
+	 //Processor 31 control and data signals
+	wire wrProc31South;
+	wire fullProc31South;
+	wire [31:0] dataOutProc31South;
+
+	 //Processor 31 control and data signals
+	wire rdProc31East;
+	wire emptyProc31East;
+	wire [31:0] dataInProc31East;
+
+	 //Processor 31 control and data signals
+	wire rdProc31West;
+	wire emptyProc31West;
+	wire [31:0] dataInProc31West;
+
+	 //Processor 32 control and data signals
+	wire wrProc32North;
+	wire fullProc32North;
+	wire [31:0] dataOutProc32North;
+
+	 //Processor 32 control and data signals
+	wire rdProc32South;
+	wire emptyProc32South;
+	wire [31:0] dataInProc32South;
+
+	 //Processor 32 control and data signals
+	wire wrProc32East;
+	wire fullProc32East;
+	wire [31:0] dataOutProc32East;
+
+	 //Processor 32 control and data signals
+	wire wrProc32West;
+	wire fullProc32West;
+	wire [31:0] dataOutProc32West;
+
+	 //Processor 33 control and data signals
+	wire wrProc33North;
+	wire fullProc33North;
+	wire [31:0] dataOutProc33North;
+
+	 //Processor 33 control and data signals
+	wire rdProc33West;
+	wire emptyProc33West;
+	wire [31:0] dataInProc33West;
+
+	 //Processor 34 control and data signals
+	wire rdProc34North;
+	wire emptyProc34North;
+	wire [31:0] dataInProc34North;
+
+	 //Processor 34 control and data signals
+	wire wrProc34South;
+	wire fullProc34South;
+	wire [31:0] dataOutProc34South;
+
+	 //Processor 35 control and data signals
+	wire rdProc35North;
+	wire emptyProc35North;
+	wire [31:0] dataInProc35North;
+
+	 //Processor 35 control and data signals
+	wire wrProc35South;
+	wire fullProc35South;
+	wire [31:0] dataOutProc35South;
+
+	 //Processor 35 control and data signals
+	wire wrProc35East;
+	wire fullProc35East;
+	wire [31:0] dataOutProc35East;
+
+	 //Processor 36 control and data signals
+	wire rdProc36North;
+	wire emptyProc36North;
+	wire [31:0] dataInProc36North;
+
+	 //Processor 36 control and data signals
+	wire wrProc36North;
+	wire fullProc36North;
+	wire [31:0] dataOutProc36North;
+
+	 //Processor 36 control and data signals
+	wire wrProc36South;
+	wire fullProc36South;
+	wire [31:0] dataOutProc36South;
+
+	 //Processor 36 control and data signals
+	wire rdProc36East;
+	wire emptyProc36East;
+	wire [31:0] dataInProc36East;
+
+	 //Processor 36 control and data signals
+	wire wrProc36East;
+	wire fullProc36East;
+	wire [31:0] dataOutProc36East;
+
+	 //Processor 36 control and data signals
+	wire rdProc36West;
+	wire emptyProc36West;
+	wire [31:0] dataInProc36West;
+
+	 //Processor 37 control and data signals
+	wire wrProc37North;
+	wire fullProc37North;
+	wire [31:0] dataOutProc37North;
+
+	 //Processor 37 control and data signals
+	wire wrProc37South;
+	wire fullProc37South;
+	wire [31:0] dataOutProc37South;
+
+	 //Processor 37 control and data signals
+	wire rdProc37East;
+	wire emptyProc37East;
+	wire [31:0] dataInProc37East;
+
+	 //Processor 37 control and data signals
+	wire rdProc37West;
+	wire emptyProc37West;
+	wire [31:0] dataInProc37West;
+
+	 //Processor 37 control and data signals
+	wire wrProc37West;
+	wire fullProc37West;
+	wire [31:0] dataOutProc37West;
+
+	 //Processor 38 control and data signals
+	wire rdProc38South;
+	wire emptyProc38South;
+	wire [31:0] dataInProc38South;
+
+	 //Processor 38 control and data signals
+	wire rdProc38East;
+	wire emptyProc38East;
+	wire [31:0] dataInProc38East;
+
+	 //Processor 38 control and data signals
+	wire wrProc38East;
+	wire fullProc38East;
+	wire [31:0] dataOutProc38East;
+
+	 //Processor 38 control and data signals
+	wire wrProc38West;
+	wire fullProc38West;
+	wire [31:0] dataOutProc38West;
+
+	 //Processor 39 control and data signals
+	wire rdProc39West;
+	wire emptyProc39West;
+	wire [31:0] dataInProc39West;
+
+	 //Processor 39 control and data signals
+	wire wrProc39West;
+	wire fullProc39West;
+	wire [31:0] dataOutProc39West;
+
+	 //Processor 40 control and data signals
+	wire rdProc40North;
+	wire emptyProc40North;
+	wire [31:0] dataInProc40North;
+
+	 //Processor 40 control and data signals
+	wire wrProc40East;
+	wire fullProc40East;
+	wire [31:0] dataOutProc40East;
+
+	 //Processor 41 control and data signals
+	wire rdProc41North;
+	wire emptyProc41North;
+	wire [31:0] dataInProc41North;
+
+	 //Processor 41 control and data signals
+	wire wrProc41North;
+	wire fullProc41North;
+	wire [31:0] dataOutProc41North;
+
+	 //Processor 41 control and data signals
+	wire wrProc41East;
+	wire fullProc41East;
+	wire [31:0] dataOutProc41East;
+
+	 //Processor 41 control and data signals
+	wire rdProc41West;
+	wire emptyProc41West;
+	wire [31:0] dataInProc41West;
+
+	 //Processor 42 control and data signals
+	wire wrProc42North;
+	wire fullProc42North;
+	wire [31:0] dataOutProc42North;
+
+	 //Processor 42 control and data signals
+	wire rdProc42East;
+	wire emptyProc42East;
+	wire [31:0] dataInProc42East;
+
+	 //Processor 42 control and data signals
+	wire rdProc42West;
+	wire emptyProc42West;
+	wire [31:0] dataInProc42West;
+
+	 //Processor 43 control and data signals
+	wire rdProc43East;
+	wire emptyProc43East;
+	wire [31:0] dataInProc43East;
+
+	 //Processor 43 control and data signals
+	wire wrProc43West;
+	wire fullProc43West;
+	wire [31:0] dataOutProc43West;
+
+	 //Processor 44 control and data signals
+	wire rdProc44North;
+	wire emptyProc44North;
+	wire [31:0] dataInProc44North;
+
+	 //Processor 44 control and data signals
+	wire rdProc44East;
+	wire emptyProc44East;
+	wire [31:0] dataInProc44East;
+
+	 //Processor 44 control and data signals
+	wire wrProc44West;
+	wire fullProc44West;
+	wire [31:0] dataOutProc44West;
+
+	 //Processor 45 control and data signals
+	wire rdProc45North;
+	wire emptyProc45North;
+	wire [31:0] dataInProc45North;
+
+	 //Processor 45 control and data signals
+	wire wrProc45West;
+	wire fullProc45West;
+	wire [31:0] dataOutProc45West;
+
+	 //Processor 46 control and data signals
+	wire rdProc46North;
+	wire emptyProc46North;
+	wire [31:0] dataInProc46North;
+
+	 //Processor 46 control and data signals
+	wire wrProc46East;
+	wire fullProc46East;
+	wire [31:0] dataOutProc46East;
+
+	 //Processor 47 control and data signals
+	wire rdProc47North;
+	wire emptyProc47North;
+	wire [31:0] dataInProc47North;
+
+	 //Processor 47 control and data signals
+	wire wrProc47East;
+	wire fullProc47East;
+	wire [31:0] dataOutProc47East;
+
+	 //Processor 47 control and data signals
+	wire rdProc47West;
+	wire emptyProc47West;
+	wire [31:0] dataInProc47West;
+
+	 //Processor 48 control and data signals
+	wire wrProc48North;
+	wire fullProc48North;
+	wire [31:0] dataOutProc48North;
+
+	 //Processor 48 control and data signals
+	wire rdProc48East;
+	wire emptyProc48East;
+	wire [31:0] dataInProc48East;
+
+	 //Processor 48 control and data signals
+	wire wrProc48East;
+	wire fullProc48East;
+	wire [31:0] dataOutProc48East;
+
+	 //Processor 48 control and data signals
+	wire rdProc48West;
+	wire emptyProc48West;
+	wire [31:0] dataInProc48West;
+
+	 //Processor 49 control and data signals
+	wire rdProc49West;
+	wire emptyProc49West;
+	wire [31:0] dataInProc49West;
+
+	 //Processor 49 control and data signals
+	wire wrProc49West;
+	wire fullProc49West;
+	wire [31:0] dataOutProc49West;
+
+
+
+//PROCESSOR 0
+system proc0(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe0),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe0),
+	.wrSouth(wrProc0South),
+	.fullSouth(fullProc0South),
+	.dataOutSouth(dataOutProc0South),
+	.rdEast(rdProc0East),
+	.emptyEast(emptyProc0East),
+	.dataInEast(dataInProc0East),
+	.wrEast(wrProc0East),
+	.fullEast(fullProc0East),
+	.dataOutEast(dataOutProc0East));
+
+//PROCESSOR 1
+system proc1(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe1),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe1),
+	.rdWest(rdProc1West),
+	.emptyWest(emptyProc1West),
+	.dataInWest(dataInProc1West),
+	.wrWest(wrProc1West),
+	.fullWest(fullProc1West),
+	.dataOutWest(dataOutProc1West));
+
+//PROCESSOR 2
+system proc2(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe2),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe2),
+	.rdEast(rdProc2East),
+	.emptyEast(emptyProc2East),
+	.dataInEast(dataInProc2East),
+	.reg_file_b_readdataout(reg_file_b_readdataout));
+
+//PROCESSOR 3
+system proc3(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe3),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe3),
+	.rdEast(rdProc3East),
+	.emptyEast(emptyProc3East),
+	.dataInEast(dataInProc3East),
+	.wrWest(wrProc3West),
+	.fullWest(fullProc3West),
+	.dataOutWest(dataOutProc3West));
+
+//PROCESSOR 4
+system proc4(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe4),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe4),
+	.rdEast(rdProc4East),
+	.emptyEast(emptyProc4East),
+	.dataInEast(dataInProc4East),
+	.wrWest(wrProc4West),
+	.fullWest(fullProc4West),
+	.dataOutWest(dataOutProc4West));
+
+//PROCESSOR 5
+system proc5(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe5),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe5),
+	.rdEast(rdProc5East),
+	.emptyEast(emptyProc5East),
+	.dataInEast(dataInProc5East),
+	.wrWest(wrProc5West),
+	.fullWest(fullProc5West),
+	.dataOutWest(dataOutProc5West));
+
+//PROCESSOR 6
+system proc6(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe6),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe6),
+	.rdSouth(rdProc6South),
+	.emptySouth(emptyProc6South),
+	.dataInSouth(dataInProc6South),
+	.wrSouth(wrProc6South),
+	.fullSouth(fullProc6South),
+	.dataOutSouth(dataOutProc6South),
+	.rdEast(rdProc6East),
+	.emptyEast(emptyProc6East),
+	.dataInEast(dataInProc6East),
+	.wrWest(wrProc6West),
+	.fullWest(fullProc6West),
+	.dataOutWest(dataOutProc6West));
+
+//PROCESSOR 7
+system proc7(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe7),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe7),
+	.wrSouth(wrProc7South),
+	.fullSouth(fullProc7South),
+	.dataOutSouth(dataOutProc7South),
+	.rdEast(rdProc7East),
+	.emptyEast(emptyProc7East),
+	.dataInEast(dataInProc7East),
+	.wrWest(wrProc7West),
+	.fullWest(fullProc7West),
+	.dataOutWest(dataOutProc7West));
+
+//PROCESSOR 8
+system proc8(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe8),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe8),
+	.rdSouth(rdProc8South),
+	.emptySouth(emptyProc8South),
+	.dataInSouth(dataInProc8South),
+	.rdEast(rdProc8East),
+	.emptyEast(emptyProc8East),
+	.dataInEast(dataInProc8East),
+	.wrWest(wrProc8West),
+	.fullWest(fullProc8West),
+	.dataOutWest(dataOutProc8West));
+
+//PROCESSOR 9
+system proc9(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe9),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe9),
+	.rdSouth(rdProc9South),
+	.emptySouth(emptyProc9South),
+	.dataInSouth(dataInProc9South),
+	.wrWest(wrProc9West),
+	.fullWest(fullProc9West),
+	.dataOutWest(dataOutProc9West));
+
+//PROCESSOR 10
+system proc10(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe10),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe10),
+	.rdNorth(rdProc10North),
+	.emptyNorth(emptyProc10North),
+	.dataInNorth(dataInProc10North),
+	.wrSouth(wrProc10South),
+	.fullSouth(fullProc10South),
+	.dataOutSouth(dataOutProc10South));
+
+//PROCESSOR 11
+system proc11(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe11),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe11),
+	.rdSouth(rdProc11South),
+	.emptySouth(emptyProc11South),
+	.dataInSouth(dataInProc11South),
+	.wrEast(wrProc11East),
+	.fullEast(fullProc11East),
+	.dataOutEast(dataOutProc11East));
+
+//PROCESSOR 12
+system proc12(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe12),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe12),
+	.rdSouth(rdProc12South),
+	.emptySouth(emptyProc12South),
+	.dataInSouth(dataInProc12South),
+	.wrSouth(wrProc12South),
+	.fullSouth(fullProc12South),
+	.dataOutSouth(dataOutProc12South),
+	.wrEast(wrProc12East),
+	.fullEast(fullProc12East),
+	.dataOutEast(dataOutProc12East),
+	.rdWest(rdProc12West),
+	.emptyWest(emptyProc12West),
+	.dataInWest(dataInProc12West));
+
+//PROCESSOR 13
+system proc13(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe13),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe13),
+	.wrEast(wrProc13East),
+	.fullEast(fullProc13East),
+	.dataOutEast(dataOutProc13East),
+	.rdWest(rdProc13West),
+	.emptyWest(emptyProc13West),
+	.dataInWest(dataInProc13West));
+
+//PROCESSOR 14
+system proc14(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe14),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe14),
+	.rdSouth(rdProc14South),
+	.emptySouth(emptyProc14South),
+	.dataInSouth(dataInProc14South),
+	.wrSouth(wrProc14South),
+	.fullSouth(fullProc14South),
+	.dataOutSouth(dataOutProc14South),
+	.rdEast(rdProc14East),
+	.emptyEast(emptyProc14East),
+	.dataInEast(dataInProc14East),
+	.wrEast(wrProc14East),
+	.fullEast(fullProc14East),
+	.dataOutEast(dataOutProc14East),
+	.rdWest(rdProc14West),
+	.emptyWest(emptyProc14West),
+	.dataInWest(dataInProc14West));
+
+//PROCESSOR 15
+system proc15(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe15),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe15),
+	.wrSouth(wrProc15South),
+	.fullSouth(fullProc15South),
+	.dataOutSouth(dataOutProc15South),
+	.rdEast(rdProc15East),
+	.emptyEast(emptyProc15East),
+	.dataInEast(dataInProc15East),
+	.wrEast(wrProc15East),
+	.fullEast(fullProc15East),
+	.dataOutEast(dataOutProc15East),
+	.rdWest(rdProc15West),
+	.emptyWest(emptyProc15West),
+	.dataInWest(dataInProc15West),
+	.wrWest(wrProc15West),
+	.fullWest(fullProc15West),
+	.dataOutWest(dataOutProc15West));
+
+//PROCESSOR 16
+system proc16(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe16),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe16),
+	.rdNorth(rdProc16North),
+	.emptyNorth(emptyProc16North),
+	.dataInNorth(dataInProc16North),
+	.wrNorth(wrProc16North),
+	.fullNorth(fullProc16North),
+	.dataOutNorth(dataOutProc16North),
+	.rdSouth(rdProc16South),
+	.emptySouth(emptyProc16South),
+	.dataInSouth(dataInProc16South),
+	.wrSouth(wrProc16South),
+	.fullSouth(fullProc16South),
+	.dataOutSouth(dataOutProc16South),
+	.rdEast(rdProc16East),
+	.emptyEast(emptyProc16East),
+	.dataInEast(dataInProc16East),
+	.rdWest(rdProc16West),
+	.emptyWest(emptyProc16West),
+	.dataInWest(dataInProc16West),
+	.wrWest(wrProc16West),
+	.fullWest(fullProc16West),
+	.dataOutWest(dataOutProc16West));
+
+//PROCESSOR 17
+system proc17(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe17),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe17),
+	.rdNorth(rdProc17North),
+	.emptyNorth(emptyProc17North),
+	.dataInNorth(dataInProc17North),
+	.wrWest(wrProc17West),
+	.fullWest(fullProc17West),
+	.dataOutWest(dataOutProc17West));
+
+//PROCESSOR 18
+system proc18(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe18),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe18),
+	.wrNorth(wrProc18North),
+	.fullNorth(fullProc18North),
+	.dataOutNorth(dataOutProc18North),
+	.rdSouth(rdProc18South),
+	.emptySouth(emptyProc18South),
+	.dataInSouth(dataInProc18South),
+	.rdEast(rdProc18East),
+	.emptyEast(emptyProc18East),
+	.dataInEast(dataInProc18East),
+	.wrEast(wrProc18East),
+	.fullEast(fullProc18East),
+	.dataOutEast(dataOutProc18East));
+
+//PROCESSOR 19
+system proc19(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe19),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe19),
+	.wrNorth(wrProc19North),
+	.fullNorth(fullProc19North),
+	.dataOutNorth(dataOutProc19North),
+	.rdSouth(rdProc19South),
+	.emptySouth(emptyProc19South),
+	.dataInSouth(dataInProc19South),
+	.rdWest(rdProc19West),
+	.emptyWest(emptyProc19West),
+	.dataInWest(dataInProc19West),
+	.wrWest(wrProc19West),
+	.fullWest(fullProc19West),
+	.dataOutWest(dataOutProc19West));
+
+//PROCESSOR 20
+system proc20(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe20),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe20),
+	.rdNorth(rdProc20North),
+	.emptyNorth(emptyProc20North),
+	.dataInNorth(dataInProc20North),
+	.wrSouth(wrProc20South),
+	.fullSouth(fullProc20South),
+	.dataOutSouth(dataOutProc20South));
+
+//PROCESSOR 21
+system proc21(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+
+	.boot_iwe(boot_iwe21),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe21),
+	.wrNorth(wrProc21North),
+	.fullNorth(fullProc21North),
+	.dataOutNorth(dataOutProc21North),
+	.rdSouth(rdProc21South),
+	.emptySouth(emptyProc21South),
+	.dataInSouth(dataInProc21South),
+	.wrEast(wrProc21East),
+	.fullEast(fullProc21East),
+	.dataOutEast(dataOutProc21East));
+
+//PROCESSOR 22
+system proc22(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe22),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe22),
+	.rdNorth(rdProc22North),
+	.emptyNorth(emptyProc22North),
+	.dataInNorth(dataInProc22North),
+	.wrNorth(wrProc22North),
+	.fullNorth(fullProc22North),
+	.dataOutNorth(dataOutProc22North),
+	.rdSouth(rdProc22South),
+	.emptySouth(emptyProc22South),
+	.dataInSouth(dataInProc22South),
+	.wrEast(wrProc22East),
+	.fullEast(fullProc22East),
+	.dataOutEast(dataOutProc22East),
+	.rdWest(rdProc22West),
+	.emptyWest(emptyProc22West),
+	.dataInWest(dataInProc22West));
+
+//PROCESSOR 23
+system proc23(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe23),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe23),
+	.rdSouth(rdProc23South),
+	.emptySouth(emptyProc23South),
+	.dataInSouth(dataInProc23South),
+	.wrEast(wrProc23East),
+	.fullEast(fullProc23East),
+	.dataOutEast(dataOutProc23East),
+	.rdWest(rdProc23West),
+	.emptyWest(emptyProc23West),
+	.dataInWest(dataInProc23West));
+
+//PROCESSOR 24
+system proc24(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe24),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe24),
+	.rdNorth(rdProc24North),
+	.emptyNorth(emptyProc24North),
+	.dataInNorth(dataInProc24North),
+	.wrNorth(wrProc24North),
+	.fullNorth(fullProc24North),
+	.dataOutNorth(dataOutProc24North),
+	.wrSouth(wrProc24South),
+	.fullSouth(fullProc24South),
+	.dataOutSouth(dataOutProc24South),
+	.wrEast(wrProc24East),
+	.fullEast(fullProc24East),
+	.dataOutEast(dataOutProc24East),
+	.rdWest(rdProc24West),
+	.emptyWest(emptyProc24West),
+	.dataInWest(dataInProc24West));
+
+//PROCESSOR 25
+system proc25(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe25),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe25),
+	.rdNorth(rdProc25North),
+	.emptyNorth(emptyProc25North),
+	.dataInNorth(dataInProc25North),
+	.wrSouth(wrProc25South),
+	.fullSouth(fullProc25South),
+	.dataOutSouth(dataOutProc25South),
+	.wrEast(wrProc25East),
+	.fullEast(fullProc25East),
+	.dataOutEast(dataOutProc25East),
+	.rdWest(rdProc25West),
+	.emptyWest(emptyProc25West),
+	.dataInWest(dataInProc25West));
+
+//PROCESSOR 26
+system proc26(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe26),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe26),
+	.rdNorth(rdProc26North),
+	.emptyNorth(emptyProc26North),
+	.dataInNorth(dataInProc26North),
+	.wrNorth(wrProc26North),
+	.fullNorth(fullProc26North),
+	.dataOutNorth(dataOutProc26North),
+	.rdSouth(rdProc26South),
+	.emptySouth(emptyProc26South),
+	.dataInSouth(dataInProc26South),
+	.wrSouth(wrProc26South),
+	.fullSouth(fullProc26South),
+	.dataOutSouth(dataOutProc26South),
+	.rdEast(rdProc26East),
+	.emptyEast(emptyProc26East),
+	.dataInEast(dataInProc26East),
+	.wrEast(wrProc26East),
+	.fullEast(fullProc26East),
+	.dataOutEast(dataOutProc26East),
+	.rdWest(rdProc26West),
+	.emptyWest(emptyProc26West),
+	.dataInWest(dataInProc26West));
+
+//PROCESSOR 27
+system proc27(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe27),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe27),
+	.rdSouth(rdProc27South),
+	.emptySouth(emptyProc27South),
+	.dataInSouth(dataInProc27South),
+	.wrEast(wrProc27East),
+	.fullEast(fullProc27East),
+	.dataOutEast(dataOutProc27East),
+	.rdWest(rdProc27West),
+	.emptyWest(emptyProc27West),
+	.dataInWest(dataInProc27West),
+	.wrWest(wrProc27West),
+	.fullWest(fullProc27West),
+	.dataOutWest(dataOutProc27West));
+
+//PROCESSOR 28
+system proc28(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe28),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe28),
+	.wrNorth(wrProc28North),
+	.fullNorth(fullProc28North),
+	.dataOutNorth(dataOutProc28North),
+	.wrEast(wrProc28East),
+	.fullEast(fullProc28East),
+	.dataOutEast(dataOutProc28East),
+	.rdWest(rdProc28West),
+	.emptyWest(emptyProc28West),
+	.dataInWest(dataInProc28West));
+
+//PROCESSOR 29
+system proc29(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe29),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe29),
+	.wrNorth(wrProc29North),
+	.fullNorth(fullProc29North),
+	.dataOutNorth(dataOutProc29North),
+	.rdWest(rdProc29West),
+	.emptyWest(emptyProc29West),
+	.dataInWest(dataInProc29West));
+
+//PROCESSOR 30
+system proc30(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe30),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe30),
+	.rdNorth(rdProc30North),
+	.emptyNorth(emptyProc30North),
+	.dataInNorth(dataInProc30North),
+	.wrSouth(wrProc30South),
+	.fullSouth(fullProc30South),
+	.dataOutSouth(dataOutProc30South),
+	.wrEast(wrProc30East),
+	.fullEast(fullProc30East),
+	.dataOutEast(dataOutProc30East));
+
+//PROCESSOR 31
+system proc31(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe31),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe31),
+	.wrNorth(wrProc31North),
+	.fullNorth(fullProc31North),
+	.dataOutNorth(dataOutProc31North),
+	.rdSouth(rdProc31South),
+	.emptySouth(emptyProc31South),
+	.dataInSouth(dataInProc31South),
+	.wrSouth(wrProc31South),
+	.fullSouth(fullProc31South),
+	.dataOutSouth(dataOutProc31South),
+	.rdEast(rdProc31East),
+	.emptyEast(emptyProc31East),
+	.dataInEast(dataInProc31East),
+	.rdWest(rdProc31West),
+	.emptyWest(emptyProc31West),
+	.dataInWest(dataInProc31West));
+
+//PROCESSOR 32
+system proc32(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe32),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe32),
+	.wrNorth(wrProc32North),
+	.fullNorth(fullProc32North),
+	.dataOutNorth(dataOutProc32North),
+	.rdSouth(rdProc32South),
+	.emptySouth(emptyProc32South),
+	.dataInSouth(dataInProc32South),
+	.wrEast(wrProc32East),
+	.fullEast(fullProc32East),
+	.dataOutEast(dataOutProc32East),
+	.wrWest(wrProc32West),
+	.fullWest(fullProc32West),
+	.dataOutWest(dataOutProc32West));
+
+//PROCESSOR 33
+system proc33(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe33),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe33),
+	.wrNorth(wrProc33North),
+	.fullNorth(fullProc33North),
+	.dataOutNorth(dataOutProc33North),
+	.rdWest(rdProc33West),
+	.emptyWest(emptyProc33West),
+	.dataInWest(dataInProc33West));
+
+//PROCESSOR 34
+system proc34(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe34),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe34),
+	.rdNorth(rdProc34North),
+	.emptyNorth(emptyProc34North),
+	.dataInNorth(dataInProc34North),
+	.wrSouth(wrProc34South),
+	.fullSouth(fullProc34South),
+	.dataOutSouth(dataOutProc34South));
+
+//PROCESSOR 35
+system proc35(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe35),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe35),
+	.rdNorth(rdProc35North),
+	.emptyNorth(emptyProc35North),
+	.dataInNorth(dataInProc35North),
+	.wrSouth(wrProc35South),
+	.fullSouth(fullProc35South),
+	.dataOutSouth(dataOutProc35South),
+	.wrEast(wrProc35East),
+	.fullEast(fullProc35East),
+	.dataOutEast(dataOutProc35East));
+
+//PROCESSOR 36
+system proc36(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe36),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe36),
+	.rdNorth(rdProc36North),
+	.emptyNorth(emptyProc36North),
+	.dataInNorth(dataInProc36North),
+	.wrNorth(wrProc36North),
+	.fullNorth(fullProc36North),
+	.dataOutNorth(dataOutProc36North),
+	.wrSouth(wrProc36South),
+	.fullSouth(fullProc36South),
+	.dataOutSouth(dataOutProc36South),
+	.rdEast(rdProc36East),
+	.emptyEast(emptyProc36East),
+	.dataInEast(dataInProc36East),
+	.wrEast(wrProc36East),
+	.fullEast(fullProc36East),
+	.dataOutEast(dataOutProc36East),
+	.rdWest(rdProc36West),
+	.emptyWest(emptyProc36West),
+	.dataInWest(dataInProc36West));
+
+//PROCESSOR 37
+system proc37(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe37),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe37),
+	.wrNorth(wrProc37North),
+	.fullNorth(fullProc37North),
+	.dataOutNorth(dataOutProc37North),
+	.wrSouth(wrProc37South),
+	.fullSouth(fullProc37South),
+	.dataOutSouth(dataOutProc37South),
+	.rdEast(rdProc37East),
+	.emptyEast(emptyProc37East),
+	.dataInEast(dataInProc37East),
+	.rdWest(rdProc37West),
+	.emptyWest(emptyProc37West),
+	.dataInWest(dataInProc37West),
+	.wrWest(wrProc37West),
+	.fullWest(fullProc37West),
+	.dataOutWest(dataOutProc37West));
+
+//PROCESSOR 38
+system proc38(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe38),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe38),
+	.rdSouth(rdProc38South),
+	.emptySouth(emptyProc38South),
+	.dataInSouth(dataInProc38South),
+	.rdEast(rdProc38East),
+	.emptyEast(emptyProc38East),
+	.dataInEast(dataInProc38East),
+	.wrEast(wrProc38East),
+	.fullEast(fullProc38East),
+	.dataOutEast(dataOutProc38East),
+	.wrWest(wrProc38West),
+	.fullWest(fullProc38West),
+	.dataOutWest(dataOutProc38West));
+
+//PROCESSOR 39
+system proc39(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe39),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe39),
+	.rdWest(rdProc39West),
+	.emptyWest(emptyProc39West),
+	.dataInWest(dataInProc39West),
+	.wrWest(wrProc39West),
+	.fullWest(fullProc39West),
+	.dataOutWest(dataOutProc39West));
+
+//PROCESSOR 40
+system proc40(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe40),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe40),
+	.rdNorth(rdProc40North),
+	.emptyNorth(emptyProc40North),
+	.dataInNorth(dataInProc40North),
+	.wrEast(wrProc40East),
+	.fullEast(fullProc40East),
+	.dataOutEast(dataOutProc40East));
+
+//PROCESSOR 41
+system proc41(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe41),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe41),
+	.rdNorth(rdProc41North),
+	.emptyNorth(emptyProc41North),
+	.dataInNorth(dataInProc41North),
+	.wrNorth(wrProc41North),
+	.fullNorth(fullProc41North),
+	.dataOutNorth(dataOutProc41North),
+	.wrEast(wrProc41East),
+	.fullEast(fullProc41East),
+	.dataOutEast(dataOutProc41East),
+	.rdWest(rdProc41West),
+	.emptyWest(emptyProc41West),
+	.dataInWest(dataInProc41West));
+
+//PROCESSOR 42
+system proc42(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe42),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe42),
+	.wrNorth(wrProc42North),
+	.fullNorth(fullProc42North),
+	.dataOutNorth(dataOutProc42North),
+	.rdEast(rdProc42East),
+	.emptyEast(emptyProc42East),
+	.dataInEast(dataInProc42East),
+	.rdWest(rdProc42West),
+	.emptyWest(emptyProc42West),
+	.dataInWest(dataInProc42West));
+
+//PROCESSOR 43
+system proc43(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe43),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe43),
+	.rdEast(rdProc43East),
+	.emptyEast(emptyProc43East),
+	.dataInEast(dataInProc43East),
+	.wrWest(wrProc43West),
+	.fullWest(fullProc43West),
+	.dataOutWest(dataOutProc43West));
+
+//PROCESSOR 44
+system proc44(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe44),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe44),
+	.rdNorth(rdProc44North),
+	.emptyNorth(emptyProc44North),
+	.dataInNorth(dataInProc44North),
+	.rdEast(rdProc44East),
+	.emptyEast(emptyProc44East),
+	.dataInEast(dataInProc44East),
+	.wrWest(wrProc44West),
+	.fullWest(fullProc44West),
+	.dataOutWest(dataOutProc44West));
+
+//PROCESSOR 45
+system proc45(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe45),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe45),
+	.rdNorth(rdProc45North),
+	.emptyNorth(emptyProc45North),
+	.dataInNorth(dataInProc45North),
+	.wrWest(wrProc45West),
+	.fullWest(fullProc45West),
+	.dataOutWest(dataOutProc45West));
+
+//PROCESSOR 46
+system proc46(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe46),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe46),
+	.rdNorth(rdProc46North),
+	.emptyNorth(emptyProc46North),
+	.dataInNorth(dataInProc46North),
+	.wrEast(wrProc46East),
+	.fullEast(fullProc46East),
+	.dataOutEast(dataOutProc46East));
+
+//PROCESSOR 47
+system proc47(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe47),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe47),
+	.rdNorth(rdProc47North),
+	.emptyNorth(emptyProc47North),
+	.dataInNorth(dataInProc47North),
+	.wrEast(wrProc47East),
+	.fullEast(fullProc47East),
+	.dataOutEast(dataOutProc47East),
+	.rdWest(rdProc47West),
+	.emptyWest(emptyProc47West),
+	.dataInWest(dataInProc47West));
+
+//PROCESSOR 48
+system proc48(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe48),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe48),
+	.wrNorth(wrProc48North),
+	.fullNorth(fullProc48North),
+	.dataOutNorth(dataOutProc48North),
+	.rdEast(rdProc48East),
+	.emptyEast(emptyProc48East),
+	.dataInEast(dataInProc48East),
+	.wrEast(wrProc48East),
+	.fullEast(fullProc48East),
+	.dataOutEast(dataOutProc48East),
+	.rdWest(rdProc48West),
+	.emptyWest(emptyProc48West),
+	.dataInWest(dataInProc48West));
+
+//PROCESSOR 49
+system proc49(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe49),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe49),
+	.rdWest(rdProc49West),
+	.emptyWest(emptyProc49West),
+	.dataInWest(dataInProc49West),
+	.wrWest(wrProc49West),
+	.fullWest(fullProc49West),
+	.dataOutWest(dataOutProc49West));
+
+//FIFO 0 TO 10
+fifo fifo_proc0_to_proc10(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc0South),
+	.full(fullProc0South),
+	.dataIn(dataOutProc0South),
+	.rd(rdProc10North),
+	.empty(emptyProc10North),
+	.dataOut(dataInProc10North));
+
+//FIFO 1 TO 0
+fifo fifo_proc1_to_proc0(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc1West),
+	.full(fullProc1West),
+	.dataIn(dataOutProc1West),
+	.rd(rdProc0East),
+	.empty(emptyProc0East),
+	.dataOut(dataInProc0East));
+
+//FIFO 0 TO 1
+fifo fifo_proc0_to_proc1(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc0East),
+	.full(fullProc0East),
+	.dataIn(dataOutProc0East),
+	.rd(rdProc1West),
+	.empty(emptyProc1West),
+	.dataOut(dataInProc1West));
+
+//FIFO 3 TO 2
+fifo fifo_proc3_to_proc2(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc3West),
+	.full(fullProc3West),
+	.dataIn(dataOutProc3West),
+	.rd(rdProc2East),
+	.empty(emptyProc2East),
+	.dataOut(dataInProc2East));
+
+//FIFO 4 TO 3
+fifo fifo_proc4_to_proc3(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc4West),
+	.full(fullProc4West),
+	.dataIn(dataOutProc4West),
+	.rd(rdProc3East),
+	.empty(emptyProc3East),
+	.dataOut(dataInProc3East));
+
+//FIFO 5 TO 4
+fifo fifo_proc5_to_proc4(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc5West),
+	.full(fullProc5West),
+	.dataIn(dataOutProc5West),
+	.rd(rdProc4East),
+	.empty(emptyProc4East),
+	.dataOut(dataInProc4East));
+
+//FIFO 6 TO 5
+fifo fifo_proc6_to_proc5(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc6West),
+	.full(fullProc6West),
+	.dataIn(dataOutProc6West),
+	.rd(rdProc5East),
+	.empty(emptyProc5East),
+	.dataOut(dataInProc5East));
+
+//FIFO 16 TO 6
+fifo fifo_proc16_to_proc6(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc16North),
+	.full(fullProc16North),
+	.dataIn(dataOutProc16North),
+	.rd(rdProc6South),
+	.empty(emptyProc6South),
+	.dataOut(dataInProc6South));
+
+//FIFO 6 TO 16
+fifo fifo_proc6_to_proc16(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc6South),
+	.full(fullProc6South),
+	.dataIn(dataOutProc6South),
+	.rd(rdProc16North),
+	.empty(emptyProc16North),
+	.dataOut(dataInProc16North));
+
+//FIFO 7 TO 6
+fifo fifo_proc7_to_proc6(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc7West),
+	.full(fullProc7West),
+	.dataIn(dataOutProc7West),
+	.rd(rdProc6East),
+	.empty(emptyProc6East),
+	.dataOut(dataInProc6East));
+
+//FIFO 7 TO 17
+fifo fifo_proc7_to_proc17(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc7South),
+	.full(fullProc7South),
+	.dataIn(dataOutProc7South),
+	.rd(rdProc17North),
+	.empty(emptyProc17North),
+	.dataOut(dataInProc17North));
+
+//FIFO 8 TO 7
+fifo fifo_proc8_to_proc7(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc8West),
+	.full(fullProc8West),
+	.dataIn(dataOutProc8West),
+	.rd(rdProc7East),
+	.empty(emptyProc7East),
+	.dataOut(dataInProc7East));
+
+//FIFO 18 TO 8
+fifo fifo_proc18_to_proc8(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc18North),
+	.full(fullProc18North),
+	.dataIn(dataOutProc18North),
+	.rd(rdProc8South),
+	.empty(emptyProc8South),
+	.dataOut(dataInProc8South));
+
+//FIFO 9 TO 8
+fifo fifo_proc9_to_proc8(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc9West),
+	.full(fullProc9West),
+	.dataIn(dataOutProc9West),
+	.rd(rdProc8East),
+	.empty(emptyProc8East),
+	.dataOut(dataInProc8East));
+
+//FIFO 19 TO 9
+fifo fifo_proc19_to_proc9(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc19North),
+	.full(fullProc19North),
+	.dataIn(dataOutProc19North),
+	.rd(rdProc9South),
+	.empty(emptyProc9South),
+	.dataOut(dataInProc9South));
+
+//FIFO 10 TO 20
+fifo fifo_proc10_to_proc20(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc10South),
+	.full(fullProc10South),
+	.dataIn(dataOutProc10South),
+	.rd(rdProc20North),
+	.empty(emptyProc20North),
+	.dataOut(dataInProc20North));
+
+//FIFO 21 TO 11
+fifo fifo_proc21_to_proc11(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc21North),
+	.full(fullProc21North),
+	.dataIn(dataOutProc21North),
+	.rd(rdProc11South),
+	.empty(emptyProc11South),
+	.dataOut(dataInProc11South));
+
+//FIFO 11 TO 12
+fifo fifo_proc11_to_proc12(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc11East),
+	.full(fullProc11East),
+	.dataIn(dataOutProc11East),
+	.rd(rdProc12West),
+	.empty(emptyProc12West),
+	.dataOut(dataInProc12West));
+
+//FIFO 22 TO 12
+fifo fifo_proc22_to_proc12(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc22North),
+	.full(fullProc22North),
+	.dataIn(dataOutProc22North),
+	.rd(rdProc12South),
+	.empty(emptyProc12South),
+	.dataOut(dataInProc12South));
+
+//FIFO 12 TO 22
+fifo fifo_proc12_to_proc22(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc12South),
+	.full(fullProc12South),
+	.dataIn(dataOutProc12South),
+	.rd(rdProc22North),
+	.empty(emptyProc22North),
+	.dataOut(dataInProc22North));
+
+//FIFO 12 TO 13
+fifo fifo_proc12_to_proc13(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc12East),
+	.full(fullProc12East),
+	.dataIn(dataOutProc12East),
+	.rd(rdProc13West),
+	.empty(emptyProc13West),
+	.dataOut(dataInProc13West));
+
+//FIFO 13 TO 14
+fifo fifo_proc13_to_proc14(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc13East),
+	.full(fullProc13East),
+	.dataIn(dataOutProc13East),
+	.rd(rdProc14West),
+	.empty(emptyProc14West),
+	.dataOut(dataInProc14West));
+
+//FIFO 24 TO 14
+fifo fifo_proc24_to_proc14(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc24North),
+	.full(fullProc24North),
+	.dataIn(dataOutProc24North),
+	.rd(rdProc14South),
+	.empty(emptyProc14South),
+	.dataOut(dataInProc14South));
+
+//FIFO 14 TO 24
+fifo fifo_proc14_to_proc24(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc14South),
+	.full(fullProc14South),
+	.dataIn(dataOutProc14South),
+	.rd(rdProc24North),
+	.empty(emptyProc24North),
+	.dataOut(dataInProc24North));
+
+//FIFO 15 TO 14
+fifo fifo_proc15_to_proc14(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc15West),
+	.full(fullProc15West),
+	.dataIn(dataOutProc15West),
+	.rd(rdProc14East),
+	.empty(emptyProc14East),
+	.dataOut(dataInProc14East));
+
+//FIFO 14 TO 15
+fifo fifo_proc14_to_proc15(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc14East),
+	.full(fullProc14East),
+	.dataIn(dataOutProc14East),
+	.rd(rdProc15West),
+	.empty(emptyProc15West),
+	.dataOut(dataInProc15West));
+
+//FIFO 15 TO 25
+fifo fifo_proc15_to_proc25(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc15South),
+	.full(fullProc15South),
+	.dataIn(dataOutProc15South),
+	.rd(rdProc25North),
+	.empty(emptyProc25North),
+	.dataOut(dataInProc25North));
+
+//FIFO 16 TO 15
+fifo fifo_proc16_to_proc15(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc16West),
+	.full(fullProc16West),
+	.dataIn(dataOutProc16West),
+	.rd(rdProc15East),
+	.empty(emptyProc15East),
+	.dataOut(dataInProc15East));
+
+//FIFO 15 TO 16
+fifo fifo_proc15_to_proc16(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc15East),
+	.full(fullProc15East),
+	.dataIn(dataOutProc15East),
+	.rd(rdProc16West),
+	.empty(emptyProc16West),
+	.dataOut(dataInProc16West));
+
+//FIFO 26 TO 16
+fifo fifo_proc26_to_proc16(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc26North),
+	.full(fullProc26North),
+	.dataIn(dataOutProc26North),
+	.rd(rdProc16South),
+	.empty(emptyProc16South),
+	.dataOut(dataInProc16South));
+
+//FIFO 16 TO 26
+fifo fifo_proc16_to_proc26(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc16South),
+	.full(fullProc16South),
+	.dataIn(dataOutProc16South),
+	.rd(rdProc26North),
+	.empty(emptyProc26North),
+	.dataOut(dataInProc26North));
+
+//FIFO 17 TO 16
+fifo fifo_proc17_to_proc16(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc17West),
+	.full(fullProc17West),
+	.dataIn(dataOutProc17West),
+	.rd(rdProc16East),
+	.empty(emptyProc16East),
+	.dataOut(dataInProc16East));
+
+//FIFO 28 TO 18
+fifo fifo_proc28_to_proc18(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc28North),
+	.full(fullProc28North),
+	.dataIn(dataOutProc28North),
+	.rd(rdProc18South),
+	.empty(emptyProc18South),
+	.dataOut(dataInProc18South));
+
+//FIFO 19 TO 18
+fifo fifo_proc19_to_proc18(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc19West),
+	.full(fullProc19West),
+	.dataIn(dataOutProc19West),
+	.rd(rdProc18East),
+	.empty(emptyProc18East),
+	.dataOut(dataInProc18East));
+
+//FIFO 18 TO 19
+fifo fifo_proc18_to_proc19(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc18East),
+	.full(fullProc18East),
+	.dataIn(dataOutProc18East),
+	.rd(rdProc19West),
+	.empty(emptyProc19West),
+	.dataOut(dataInProc19West));
+
+//FIFO 29 TO 19
+fifo fifo_proc29_to_proc19(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc29North),
+	.full(fullProc29North),
+	.dataIn(dataOutProc29North),
+	.rd(rdProc19South),
+	.empty(emptyProc19South),
+	.dataOut(dataInProc19South));
+
+//FIFO 20 TO 30
+fifo fifo_proc20_to_proc30(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc20South),
+	.full(fullProc20South),
+	.dataIn(dataOutProc20South),
+	.rd(rdProc30North),
+	.empty(emptyProc30North),
+	.dataOut(dataInProc30North));
+
+//FIFO 31 TO 21
+fifo fifo_proc31_to_proc21(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc31North),
+	.full(fullProc31North),
+	.dataIn(dataOutProc31North),
+	.rd(rdProc21South),
+	.empty(emptyProc21South),
+	.dataOut(dataInProc21South));
+
+//FIFO 21 TO 22
+fifo fifo_proc21_to_proc22(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc21East),
+	.full(fullProc21East),
+	.dataIn(dataOutProc21East),
+	.rd(rdProc22West),
+	.empty(emptyProc22West),
+	.dataOut(dataInProc22West));
+
+//FIFO 32 TO 22
+fifo fifo_proc32_to_proc22(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc32North),
+	.full(fullProc32North),
+	.dataIn(dataOutProc32North),
+	.rd(rdProc22South),
+	.empty(emptyProc22South),
+	.dataOut(dataInProc22South));
+
+//FIFO 22 TO 23
+fifo fifo_proc22_to_proc23(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc22East),
+	.full(fullProc22East),
+	.dataIn(dataOutProc22East),
+	.rd(rdProc23West),
+	.empty(emptyProc23West),
+	.dataOut(dataInProc23West));
+
+//FIFO 33 TO 23
+fifo fifo_proc33_to_proc23(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc33North),
+	.full(fullProc33North),
+	.dataIn(dataOutProc33North),
+	.rd(rdProc23South),
+	.empty(emptyProc23South),
+	.dataOut(dataInProc23South));
+
+//FIFO 23 TO 24
+fifo fifo_proc23_to_proc24(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc23East),
+	.full(fullProc23East),
+	.dataIn(dataOutProc23East),
+	.rd(rdProc24West),
+	.empty(emptyProc24West),
+	.dataOut(dataInProc24West));
+
+//FIFO 24 TO 34
+fifo fifo_proc24_to_proc34(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc24South),
+	.full(fullProc24South),
+	.dataIn(dataOutProc24South),
+	.rd(rdProc34North),
+	.empty(emptyProc34North),
+	.dataOut(dataInProc34North));
+
+//FIFO 24 TO 25
+fifo fifo_proc24_to_proc25(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc24East),
+	.full(fullProc24East),
+	.dataIn(dataOutProc24East),
+	.rd(rdProc25West),
+	.empty(emptyProc25West),
+	.dataOut(dataInProc25West));
+
+//FIFO 25 TO 35
+fifo fifo_proc25_to_proc35(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc25South),
+	.full(fullProc25South),
+	.dataIn(dataOutProc25South),
+	.rd(rdProc35North),
+	.empty(emptyProc35North),
+	.dataOut(dataInProc35North));
+
+//FIFO 25 TO 26
+fifo fifo_proc25_to_proc26(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc25East),
+	.full(fullProc25East),
+	.dataIn(dataOutProc25East),
+	.rd(rdProc26West),
+	.empty(emptyProc26West),
+	.dataOut(dataInProc26West));
+
+//FIFO 36 TO 26
+fifo fifo_proc36_to_proc26(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc36North),
+	.full(fullProc36North),
+	.dataIn(dataOutProc36North),
+	.rd(rdProc26South),
+	.empty(emptyProc26South),
+	.dataOut(dataInProc26South));
+
+//FIFO 26 TO 36
+fifo fifo_proc26_to_proc36(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc26South),
+	.full(fullProc26South),
+	.dataIn(dataOutProc26South),
+	.rd(rdProc36North),
+	.empty(emptyProc36North),
+	.dataOut(dataInProc36North));
+
+//FIFO 27 TO 26
+fifo fifo_proc27_to_proc26(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc27West),
+	.full(fullProc27West),
+	.dataIn(dataOutProc27West),
+	.rd(rdProc26East),
+	.empty(emptyProc26East),
+	.dataOut(dataInProc26East));
+
+//FIFO 26 TO 27
+fifo fifo_proc26_to_proc27(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc26East),
+	.full(fullProc26East),
+	.dataIn(dataOutProc26East),
+	.rd(rdProc27West),
+	.empty(emptyProc27West),
+	.dataOut(dataInProc27West));
+
+//FIFO 37 TO 27
+fifo fifo_proc37_to_proc27(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc37North),
+	.full(fullProc37North),
+	.dataIn(dataOutProc37North),
+	.rd(rdProc27South),
+	.empty(emptyProc27South),
+	.dataOut(dataInProc27South));
+
+//FIFO 27 TO 28
+fifo fifo_proc27_to_proc28(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc27East),
+	.full(fullProc27East),
+	.dataIn(dataOutProc27East),
+	.rd(rdProc28West),
+	.empty(emptyProc28West),
+	.dataOut(dataInProc28West));
+
+//FIFO 28 TO 29
+fifo fifo_proc28_to_proc29(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc28East),
+	.full(fullProc28East),
+	.dataIn(dataOutProc28East),
+	.rd(rdProc29West),
+	.empty(emptyProc29West),
+	.dataOut(dataInProc29West));
+
+//FIFO 30 TO 40
+fifo fifo_proc30_to_proc40(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc30South),
+	.full(fullProc30South),
+	.dataIn(dataOutProc30South),
+	.rd(rdProc40North),
+	.empty(emptyProc40North),
+	.dataOut(dataInProc40North));
+
+//FIFO 30 TO 31
+fifo fifo_proc30_to_proc31(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc30East),
+	.full(fullProc30East),
+	.dataIn(dataOutProc30East),
+	.rd(rdProc31West),
+	.empty(emptyProc31West),
+	.dataOut(dataInProc31West));
+
+//FIFO 41 TO 31
+fifo fifo_proc41_to_proc31(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc41North),
+	.full(fullProc41North),
+	.dataIn(dataOutProc41North),
+	.rd(rdProc31South),
+	.empty(emptyProc31South),
+	.dataOut(dataInProc31South));
+
+//FIFO 31 TO 41
+fifo fifo_proc31_to_proc41(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc31South),
+	.full(fullProc31South),
+	.dataIn(dataOutProc31South),
+	.rd(rdProc41North),
+	.empty(emptyProc41North),
+	.dataOut(dataInProc41North));
+
+//FIFO 32 TO 31
+fifo fifo_proc32_to_proc31(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc32West),
+	.full(fullProc32West),
+	.dataIn(dataOutProc32West),
+	.rd(rdProc31East),
+	.empty(emptyProc31East),
+	.dataOut(dataInProc31East));
+
+//FIFO 42 TO 32
+fifo fifo_proc42_to_proc32(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc42North),
+	.full(fullProc42North),
+	.dataIn(dataOutProc42North),
+	.rd(rdProc32South),
+	.empty(emptyProc32South),
+	.dataOut(dataInProc32South));
+
+//FIFO 32 TO 33
+fifo fifo_proc32_to_proc33(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc32East),
+	.full(fullProc32East),
+	.dataIn(dataOutProc32East),
+	.rd(rdProc33West),
+	.empty(emptyProc33West),
+	.dataOut(dataInProc33West));
+
+//FIFO 34 TO 44
+fifo fifo_proc34_to_proc44(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc34South),
+	.full(fullProc34South),
+	.dataIn(dataOutProc34South),
+	.rd(rdProc44North),
+	.empty(emptyProc44North),
+	.dataOut(dataInProc44North));
+
+//FIFO 35 TO 45
+fifo fifo_proc35_to_proc45(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc35South),
+	.full(fullProc35South),
+	.dataIn(dataOutProc35South),
+	.rd(rdProc45North),
+	.empty(emptyProc45North),
+	.dataOut(dataInProc45North));
+
+//FIFO 35 TO 36
+fifo fifo_proc35_to_proc36(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc35East),
+	.full(fullProc35East),
+	.dataIn(dataOutProc35East),
+	.rd(rdProc36West),
+	.empty(emptyProc36West),
+	.dataOut(dataInProc36West));
+
+//FIFO 36 TO 46
+fifo fifo_proc36_to_proc46(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc36South),
+	.full(fullProc36South),
+	.dataIn(dataOutProc36South),
+	.rd(rdProc46North),
+	.empty(emptyProc46North),
+	.dataOut(dataInProc46North));
+
+//FIFO 37 TO 36
+fifo fifo_proc37_to_proc36(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc37West),
+	.full(fullProc37West),
+	.dataIn(dataOutProc37West),
+	.rd(rdProc36East),
+	.empty(emptyProc36East),
+	.dataOut(dataInProc36East));
+
+//FIFO 36 TO 37
+fifo fifo_proc36_to_proc37(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc36East),
+	.full(fullProc36East),
+	.dataIn(dataOutProc36East),
+	.rd(rdProc37West),
+	.empty(emptyProc37West),
+	.dataOut(dataInProc37West));
+
+//FIFO 37 TO 47
+fifo fifo_proc37_to_proc47(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc37South),
+	.full(fullProc37South),
+	.dataIn(dataOutProc37South),
+	.rd(rdProc47North),
+	.empty(emptyProc47North),
+	.dataOut(dataInProc47North));
+
+//FIFO 38 TO 37
+fifo fifo_proc38_to_proc37(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc38West),
+	.full(fullProc38West),
+	.dataIn(dataOutProc38West),
+	.rd(rdProc37East),
+	.empty(emptyProc37East),
+	.dataOut(dataInProc37East));
+
+//FIFO 48 TO 38
+fifo fifo_proc48_to_proc38(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc48North),
+	.full(fullProc48North),
+	.dataIn(dataOutProc48North),
+	.rd(rdProc38South),
+	.empty(emptyProc38South),
+	.dataOut(dataInProc38South));
+
+//FIFO 39 TO 38
+fifo fifo_proc39_to_proc38(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc39West),
+	.full(fullProc39West),
+	.dataIn(dataOutProc39West),
+	.rd(rdProc38East),
+	.empty(emptyProc38East),
+	.dataOut(dataInProc38East));
+
+//FIFO 38 TO 39
+fifo fifo_proc38_to_proc39(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc38East),
+	.full(fullProc38East),
+	.dataIn(dataOutProc38East),
+	.rd(rdProc39West),
+	.empty(emptyProc39West),
+	.dataOut(dataInProc39West));
+
+//FIFO 40 TO 41
+fifo fifo_proc40_to_proc41(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc40East),
+	.full(fullProc40East),
+	.dataIn(dataOutProc40East),
+	.rd(rdProc41West),
+	.empty(emptyProc41West),
+	.dataOut(dataInProc41West));
+
+//FIFO 41 TO 42
+fifo fifo_proc41_to_proc42(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc41East),
+	.full(fullProc41East),
+	.dataIn(dataOutProc41East),
+	.rd(rdProc42West),
+	.empty(emptyProc42West),
+	.dataOut(dataInProc42West));
+
+//FIFO 43 TO 42
+fifo fifo_proc43_to_proc42(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc43West),
+	.full(fullProc43West),
+	.dataIn(dataOutProc43West),
+	.rd(rdProc42East),
+	.empty(emptyProc42East),
+	.dataOut(dataInProc42East));
+
+//FIFO 44 TO 43
+fifo fifo_proc44_to_proc43(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc44West),
+	.full(fullProc44West),
+	.dataIn(dataOutProc44West),
+	.rd(rdProc43East),
+	.empty(emptyProc43East),
+	.dataOut(dataInProc43East));
+
+//FIFO 45 TO 44
+fifo fifo_proc45_to_proc44(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc45West),
+	.full(fullProc45West),
+	.dataIn(dataOutProc45West),
+	.rd(rdProc44East),
+	.empty(emptyProc44East),
+	.dataOut(dataInProc44East));
+
+//FIFO 46 TO 47
+fifo fifo_proc46_to_proc47(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc46East),
+	.full(fullProc46East),
+	.dataIn(dataOutProc46East),
+	.rd(rdProc47West),
+	.empty(emptyProc47West),
+	.dataOut(dataInProc47West));
+
+//FIFO 47 TO 48
+fifo fifo_proc47_to_proc48(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc47East),
+	.full(fullProc47East),
+	.dataIn(dataOutProc47East),
+	.rd(rdProc48West),
+	.empty(emptyProc48West),
+	.dataOut(dataInProc48West));
+
+//FIFO 49 TO 48
+fifo fifo_proc49_to_proc48(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc49West),
+	.full(fullProc49West),
+	.dataIn(dataOutProc49West),
+	.rd(rdProc48East),
+	.empty(emptyProc48East),
+	.dataOut(dataInProc48East));
+
+//FIFO 48 TO 49
+fifo fifo_proc48_to_proc49(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc48East),
+	.full(fullProc48East),
+	.dataIn(dataOutProc48East),
+	.rd(rdProc49West),
+	.empty(emptyProc49West),
+	.dataOut(dataInProc49West));
+
+	/**************** Boot loader ********************/
+	/*******Boot up each processor one by one*********/
+	always@(posedge clk)
+	begin
+	case(processor_select)
+		0: begin
+
+			boot_iwe0 = ~resetn;
+			boot_dwe0 = ~resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		1: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 = ~resetn;
+			boot_dwe1 = ~resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		2: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 = ~resetn;
+			boot_dwe2 = ~resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		3: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 = ~resetn;
+			boot_dwe3 = ~resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		4: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 = ~resetn;
+			boot_dwe4 = ~resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		5: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 = ~resetn;
+			boot_dwe5 = ~resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		6: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 = ~resetn;
+			boot_dwe6 = ~resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		7: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 = ~resetn;
+			boot_dwe7 = ~resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		8: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 = ~resetn;
+			boot_dwe8 = ~resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		9: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 = ~resetn;
+			boot_dwe9 = ~resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		10: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 = ~resetn;
+			boot_dwe10 = ~resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		11: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 = ~resetn;
+			boot_dwe11 = ~resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		12: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 = ~resetn;
+			boot_dwe12 = ~resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		13: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 = ~resetn;
+			boot_dwe13 = ~resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		14: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 = ~resetn;
+			boot_dwe14 = ~resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		15: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 = ~resetn;
+			boot_dwe15 = ~resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		16: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 = ~resetn;
+			boot_dwe16 = ~resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		17: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 = ~resetn;
+			boot_dwe17 = ~resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		18: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 = ~resetn;
+			boot_dwe18 = ~resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		19: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 = ~resetn;
+			boot_dwe19 = ~resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		20: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 = ~resetn;
+			boot_dwe20 = ~resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		21: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 = ~resetn;
+			boot_dwe21 = ~resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		22: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 = ~resetn;
+			boot_dwe22 = ~resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		23: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 = ~resetn;
+			boot_dwe23 = ~resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		24: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 = ~resetn;
+			boot_dwe24 = ~resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		25: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 = ~resetn;
+			boot_dwe25 = ~resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		26: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 = ~resetn;
+			boot_dwe26 = ~resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		27: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 = ~resetn;
+			boot_dwe27 = ~resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		28: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 = ~resetn;
+			boot_dwe28 = ~resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		29: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 = ~resetn;
+			boot_dwe29 = ~resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		30: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 = ~resetn;
+			boot_dwe30 = ~resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		31: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 = ~resetn;
+			boot_dwe31 = ~resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		32: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 = ~resetn;
+			boot_dwe32 = ~resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		33: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 = ~resetn;
+			boot_dwe33 = ~resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		34: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 = ~resetn;
+			boot_dwe34 = ~resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		35: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 = ~resetn;
+			boot_dwe35 = ~resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		36: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 = ~resetn;
+			boot_dwe36 = ~resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		37: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 = ~resetn;
+			boot_dwe37 = ~resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		38: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 = ~resetn;
+			boot_dwe38 = ~resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		39: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 = ~resetn;
+			boot_dwe39 = ~resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		40: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 = ~resetn;
+			boot_dwe40 = ~resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		41: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 = ~resetn;
+			boot_dwe41 = ~resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		42: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 = ~resetn;
+			boot_dwe42 = ~resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		43: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 = ~resetn;
+			boot_dwe43 = ~resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		44: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 = ~resetn;
+			boot_dwe44 = ~resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		45: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 = ~resetn;
+			boot_dwe45 = ~resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		46: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 = ~resetn;
+			boot_dwe46 = ~resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		47: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 = ~resetn;
+			boot_dwe47 = ~resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		48: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 = ~resetn;
+			boot_dwe48 = ~resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+		end
+
+		49: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 = ~resetn;
+			boot_dwe49 = ~resetn;
+		end
+
+		50: begin
+
+			boot_iwe0 = 0;
+			boot_dwe0 = 0;
+			boot_iwe1 = 0;
+			boot_dwe1 = 0;
+			boot_iwe2 = 0;
+			boot_dwe2 = 0;
+			boot_iwe3 = 0;
+			boot_dwe3 = 0;
+			boot_iwe4 = 0;
+			boot_dwe4 = 0;
+			boot_iwe5 = 0;
+			boot_dwe5 = 0;
+			boot_iwe6 = 0;
+			boot_dwe6 = 0;
+			boot_iwe7 = 0;
+			boot_dwe7 = 0;
+			boot_iwe8 = 0;
+			boot_dwe8 = 0;
+			boot_iwe9 = 0;
+			boot_dwe9 = 0;
+			boot_iwe10 = 0;
+			boot_dwe10 = 0;
+			boot_iwe11 = 0;
+			boot_dwe11 = 0;
+			boot_iwe12 = 0;
+			boot_dwe12 = 0;
+			boot_iwe13 = 0;
+			boot_dwe13 = 0;
+			boot_iwe14 = 0;
+			boot_dwe14 = 0;
+			boot_iwe15 = 0;
+			boot_dwe15 = 0;
+			boot_iwe16 = 0;
+			boot_dwe16 = 0;
+			boot_iwe17 = 0;
+			boot_dwe17 = 0;
+			boot_iwe18 = 0;
+			boot_dwe18 = 0;
+			boot_iwe19 = 0;
+			boot_dwe19 = 0;
+			boot_iwe20 = 0;
+			boot_dwe20 = 0;
+			boot_iwe21 = 0;
+			boot_dwe21 = 0;
+			boot_iwe22 = 0;
+			boot_dwe22 = 0;
+			boot_iwe23 = 0;
+			boot_dwe23 = 0;
+			boot_iwe24 = 0;
+			boot_dwe24 = 0;
+			boot_iwe25 = 0;
+			boot_dwe25 = 0;
+			boot_iwe26 = 0;
+			boot_dwe26 = 0;
+			boot_iwe27 = 0;
+			boot_dwe27 = 0;
+			boot_iwe28 = 0;
+			boot_dwe28 = 0;
+			boot_iwe29 = 0;
+			boot_dwe29 = 0;
+			boot_iwe30 = 0;
+			boot_dwe30 = 0;
+			boot_iwe31 = 0;
+			boot_dwe31 = 0;
+			boot_iwe32 = 0;
+			boot_dwe32 = 0;
+			boot_iwe33 = 0;
+			boot_dwe33 = 0;
+			boot_iwe34 = 0;
+			boot_dwe34 = 0;
+			boot_iwe35 = 0;
+			boot_dwe35 = 0;
+			boot_iwe36 = 0;
+			boot_dwe36 = 0;
+			boot_iwe37 = 0;
+			boot_dwe37 = 0;
+			boot_iwe38 = 0;
+			boot_dwe38 = 0;
+			boot_iwe39 = 0;
+			boot_dwe39 = 0;
+			boot_iwe40 = 0;
+			boot_dwe40 = 0;
+			boot_iwe41 = 0;
+			boot_dwe41 = 0;
+			boot_iwe42 = 0;
+			boot_dwe42 = 0;
+			boot_iwe43 = 0;
+			boot_dwe43 = 0;
+			boot_iwe44 = 0;
+			boot_dwe44 = 0;
+			boot_iwe45 = 0;
+			boot_dwe45 = 0;
+			boot_iwe46 = 0;
+			boot_dwe46 = 0;
+			boot_iwe47 = 0;
+			boot_dwe47 = 0;
+			boot_iwe48 = 0;
+			boot_dwe48 = 0;
+			boot_iwe49 = 0;
+			boot_dwe49 = 0;
+		end
+
+	endcase
+end
+endmodule`timescale 1ns / 1ns
+module system90(clk,resetn,boot_iaddr,boot_idata,boot_daddr,boot_ddata,reg_file_b_readdataout,processor_select);
+	input clk;
+	input resetn;
+	input [6:0] processor_select;
+	output [31:0] reg_file_b_readdataout;
+	input [13:0] boot_iaddr;
+	input [31:0] boot_idata;
+	input [13:0] boot_daddr;
+	input [31:0] boot_ddata;
+
+
+	reg boot_iwe0;
+	reg boot_dwe0;
+	reg boot_iwe1;
+	reg boot_dwe1;
+	reg boot_iwe2;
+	reg boot_dwe2;
+	reg boot_iwe3;
+	reg boot_dwe3;
+	reg boot_iwe4;
+	reg boot_dwe4;
+	reg boot_iwe5;
+	reg boot_dwe5;
+	reg boot_iwe6;
+	reg boot_dwe6;
+	reg boot_iwe7;
+	reg boot_dwe7;
+	reg boot_iwe8;
+	reg boot_dwe8;
+	reg boot_iwe9;
+	reg boot_dwe9;
+	reg boot_iwe10;
+	reg boot_dwe10;
+	reg boot_iwe11;
+	reg boot_dwe11;
+	reg boot_iwe12;
+	reg boot_dwe12;
+	reg boot_iwe13;
+	reg boot_dwe13;
+	reg boot_iwe14;
+	reg boot_dwe14;
+	reg boot_iwe15;
+	reg boot_dwe15;
+	reg boot_iwe16;
+	reg boot_dwe16;
+	reg boot_iwe17;
+	reg boot_dwe17;
+	reg boot_iwe18;
+	reg boot_dwe18;
+	reg boot_iwe19;
+	reg boot_dwe19;
+	reg boot_iwe20;
+	reg boot_dwe20;
+	reg boot_iwe21;
+	reg boot_dwe21;
+	reg boot_iwe22;
+	reg boot_dwe22;
+	reg boot_iwe23;
+	reg boot_dwe23;
+	reg boot_iwe24;
+	reg boot_dwe24;
+	reg boot_iwe25;
+	reg boot_dwe25;
+	reg boot_iwe26;
+	reg boot_dwe26;
+	reg boot_iwe27;
+	reg boot_dwe27;
+	reg boot_iwe28;
+	reg boot_dwe28;
+	reg boot_iwe29;
+	reg boot_dwe29;
+	reg boot_iwe30;
+	reg boot_dwe30;
+	reg boot_iwe31;
+	reg boot_dwe31;
+	reg boot_iwe32;
+	reg boot_dwe32;
+	reg boot_iwe33;
+	reg boot_dwe33;
+	reg boot_iwe34;
+	reg boot_dwe34;
+	reg boot_iwe35;
+	reg boot_dwe35;
+	reg boot_iwe36;
+	reg boot_dwe36;
+	reg boot_iwe37;
+	reg boot_dwe37;
+	reg boot_iwe38;
+	reg boot_dwe38;
+	reg boot_iwe39;
+	reg boot_dwe39;
+	reg boot_iwe40;
+	reg boot_dwe40;
+	reg boot_iwe41;
+	reg boot_dwe41;
+	reg boot_iwe42;
+	reg boot_dwe42;
+	reg boot_iwe43;
+	reg boot_dwe43;
+	reg boot_iwe44;
+	reg boot_dwe44;
+	reg boot_iwe45;
+	reg boot_dwe45;
+	reg boot_iwe46;
+	reg boot_dwe46;
+	reg boot_iwe47;
+	reg boot_dwe47;
+	reg boot_iwe48;
+	reg boot_dwe48;
+	reg boot_iwe49;
+	reg boot_dwe49;
+	reg boot_iwe50;
+	reg boot_dwe50;
+	reg boot_iwe51;
+	reg boot_dwe51;
+	reg boot_iwe52;
+	reg boot_dwe52;
+	reg boot_iwe53;
+	reg boot_dwe53;
+	reg boot_iwe54;
+	reg boot_dwe54;
+	reg boot_iwe55;
+	reg boot_dwe55;
+	reg boot_iwe56;
+	reg boot_dwe56;
+	reg boot_iwe57;
+	reg boot_dwe57;
+	reg boot_iwe58;
+	reg boot_dwe58;
+	reg boot_iwe59;
+	reg boot_dwe59;
+	reg boot_iwe60;
+	reg boot_dwe60;
+	reg boot_iwe61;
+	reg boot_dwe61;
+	reg boot_iwe62;
+	reg boot_dwe62;
+	reg boot_iwe63;
+	reg boot_dwe63;
+	reg boot_iwe64;
+	reg boot_dwe64;
+	reg boot_iwe65;
+	reg boot_dwe65;
+	reg boot_iwe66;
+	reg boot_dwe66;
+	reg boot_iwe67;
+	reg boot_dwe67;
+	reg boot_iwe68;
+	reg boot_dwe68;
+	reg boot_iwe69;
+	reg boot_dwe69;
+	reg boot_iwe70;
+	reg boot_dwe70;
+	reg boot_iwe71;
+	reg boot_dwe71;
+	reg boot_iwe72;
+	reg boot_dwe72;
+	reg boot_iwe73;
+	reg boot_dwe73;
+	reg boot_iwe74;
+	reg boot_dwe74;
+	reg boot_iwe75;
+	reg boot_dwe75;
+	reg boot_iwe76;
+	reg boot_dwe76;
+	reg boot_iwe77;
+	reg boot_dwe77;
+	reg boot_iwe78;
+	reg boot_dwe78;
+	reg boot_iwe79;
+	reg boot_dwe79;
+	reg boot_iwe80;
+	reg boot_dwe80;
+	reg boot_iwe81;
+	reg boot_dwe81;
+	reg boot_iwe82;
+	reg boot_dwe82;
+	reg boot_iwe83;
+	reg boot_dwe83;
+	reg boot_iwe84;
+	reg boot_dwe84;
+	reg boot_iwe85;
+	reg boot_dwe85;
+	reg boot_iwe86;
+	reg boot_dwe86;
+	reg boot_iwe87;
+	reg boot_dwe87;
+	reg boot_iwe88;
+	reg boot_dwe88;
+	reg boot_iwe89;
+	reg boot_dwe89;
+
+	 //Processor 0 control and data signals
+	wire wrProc0South;
+	wire fullProc0South;
+	wire [31:0] dataOutProc0South;
+
+	 //Processor 0 control and data signals
+	wire wrProc0East;
+	wire fullProc0East;
+	wire [31:0] dataOutProc0East;
+
+	 //Processor 1 control and data signals
+	wire wrProc1South;
+	wire fullProc1South;
+	wire [31:0] dataOutProc1South;
+
+	 //Processor 1 control and data signals
+	wire rdProc1West;
+	wire emptyProc1West;
+	wire [31:0] dataInProc1West;
+
+	 //Processor 4 control and data signals
+	wire rdProc4South;
+	wire emptyProc4South;
+	wire [31:0] dataInProc4South;
+
+	 //Processor 4 control and data signals
+	wire rdProc4East;
+	wire emptyProc4East;
+	wire [31:0] dataInProc4East;
+
+	 //Processor 4 control and data signals
+	wire wrProc4East;
+	wire fullProc4East;
+	wire [31:0] dataOutProc4East;
+
+	 //Processor 5 control and data signals
+	wire rdProc5East;
+	wire emptyProc5East;
+	wire [31:0] dataInProc5East;
+
+	 //Processor 5 control and data signals
+	wire rdProc5West;
+	wire emptyProc5West;
+	wire [31:0] dataInProc5West;
+
+	 //Processor 5 control and data signals
+	wire wrProc5West;
+	wire fullProc5West;
+	wire [31:0] dataOutProc5West;
+
+	 //Processor 6 control and data signals
+	wire rdProc6South;
+	wire emptyProc6South;
+	wire [31:0] dataInProc6South;
+
+	 //Processor 6 control and data signals
+	wire wrProc6South;
+	wire fullProc6South;
+	wire [31:0] dataOutProc6South;
+
+	 //Processor 6 control and data signals
+	wire rdProc6East;
+	wire emptyProc6East;
+	wire [31:0] dataInProc6East;
+
+	 //Processor 6 control and data signals
+	wire wrProc6West;
+	wire fullProc6West;
+	wire [31:0] dataOutProc6West;
+
+	 //Processor 7 control and data signals
+	wire rdProc7South;
+	wire emptyProc7South;
+	wire [31:0] dataInProc7South;
+
+	 //Processor 7 control and data signals
+	wire wrProc7West;
+	wire fullProc7West;
+	wire [31:0] dataOutProc7West;
+
+	 //Processor 8 control and data signals
+	wire rdProc8South;
+	wire emptyProc8South;
+	wire [31:0] dataInProc8South;
+
+	 //Processor 8 control and data signals
+	wire wrProc8South;
+	wire fullProc8South;
+	wire [31:0] dataOutProc8South;
+
+	 //Processor 8 control and data signals
+	wire rdProc8East;
+	wire emptyProc8East;
+	wire [31:0] dataInProc8East;
+
+	 //Processor 9 control and data signals
+	wire rdProc9South;
+	wire emptyProc9South;
+	wire [31:0] dataInProc9South;
+
+	 //Processor 9 control and data signals
+	wire wrProc9West;
+	wire fullProc9West;
+	wire [31:0] dataOutProc9West;
+
+	 //Processor 10 control and data signals
+	wire rdProc10North;
+	wire emptyProc10North;
+	wire [31:0] dataInProc10North;
+
+	 //Processor 10 control and data signals
+	wire wrProc10East;
+	wire fullProc10East;
+	wire [31:0] dataOutProc10East;
+
+	 //Processor 11 control and data signals
+	wire rdProc11North;
+	wire emptyProc11North;
+	wire [31:0] dataInProc11North;
+
+	 //Processor 11 control and data signals
+	wire wrProc11South;
+	wire fullProc11South;
+	wire [31:0] dataOutProc11South;
+
+	 //Processor 11 control and data signals
+	wire rdProc11West;
+	wire emptyProc11West;
+	wire [31:0] dataInProc11West;
+
+	 //Processor 12 control and data signals
+	wire rdProc12South;
+	wire emptyProc12South;
+	wire [31:0] dataInProc12South;
+
+	 //Processor 12 control and data signals
+	wire wrProc12East;
+	wire fullProc12East;
+	wire [31:0] dataOutProc12East;
+
+	 //Processor 13 control and data signals
+	wire rdProc13South;
+	wire emptyProc13South;
+	wire [31:0] dataInProc13South;
+
+	 //Processor 13 control and data signals
+	wire wrProc13East;
+	wire fullProc13East;
+	wire [31:0] dataOutProc13East;
+
+	 //Processor 13 control and data signals
+	wire rdProc13West;
+	wire emptyProc13West;
+	wire [31:0] dataInProc13West;
+
+	 //Processor 14 control and data signals
+	wire wrProc14North;
+	wire fullProc14North;
+	wire [31:0] dataOutProc14North;
+
+	 //Processor 14 control and data signals
+	wire rdProc14South;
+	wire emptyProc14South;
+	wire [31:0] dataInProc14South;
+
+	 //Processor 14 control and data signals
+	wire wrProc14South;
+	wire fullProc14South;
+	wire [31:0] dataOutProc14South;
+
+	 //Processor 14 control and data signals
+	wire wrProc14East;
+	wire fullProc14East;
+	wire [31:0] dataOutProc14East;
+
+	 //Processor 14 control and data signals
+	wire rdProc14West;
+	wire emptyProc14West;
+	wire [31:0] dataInProc14West;
+
+	 //Processor 15 control and data signals
+	wire wrProc15East;
+	wire fullProc15East;
+	wire [31:0] dataOutProc15East;
+
+	 //Processor 15 control and data signals
+	wire rdProc15West;
+	wire emptyProc15West;
+	wire [31:0] dataInProc15West;
+
+	 //Processor 16 control and data signals
+	wire rdProc16North;
+	wire emptyProc16North;
+	wire [31:0] dataInProc16North;
+
+	 //Processor 16 control and data signals
+	wire wrProc16North;
+	wire fullProc16North;
+	wire [31:0] dataOutProc16North;
+
+	 //Processor 16 control and data signals
+	wire wrProc16South;
+	wire fullProc16South;
+	wire [31:0] dataOutProc16South;
+
+	 //Processor 16 control and data signals
+	wire rdProc16West;
+	wire emptyProc16West;
+	wire [31:0] dataInProc16West;
+
+	 //Processor 17 control and data signals
+	wire wrProc17North;
+	wire fullProc17North;
+	wire [31:0] dataOutProc17North;
+
+	 //Processor 17 control and data signals
+	wire rdProc17South;
+	wire emptyProc17South;
+	wire [31:0] dataInProc17South;
+
+	 //Processor 18 control and data signals
+	wire rdProc18North;
+	wire emptyProc18North;
+	wire [31:0] dataInProc18North;
+
+	 //Processor 18 control and data signals
+	wire wrProc18North;
+	wire fullProc18North;
+	wire [31:0] dataOutProc18North;
+
+	 //Processor 18 control and data signals
+	wire wrProc18South;
+	wire fullProc18South;
+	wire [31:0] dataOutProc18South;
+
+	 //Processor 19 control and data signals
+	wire wrProc19North;
+	wire fullProc19North;
+	wire [31:0] dataOutProc19North;
+
+	 //Processor 19 control and data signals
+	wire rdProc19South;
+	wire emptyProc19South;
+	wire [31:0] dataInProc19South;
+
+	 //Processor 19 control and data signals
+	wire wrProc19South;
+	wire fullProc19South;
+	wire [31:0] dataOutProc19South;
+
+	 //Processor 20 control and data signals
+	wire rdProc20South;
+	wire emptyProc20South;
+	wire [31:0] dataInProc20South;
+
+	 //Processor 20 control and data signals
+	wire wrProc20East;
+	wire fullProc20East;
+	wire [31:0] dataOutProc20East;
+
+	 //Processor 21 control and data signals
+	wire rdProc21North;
+	wire emptyProc21North;
+	wire [31:0] dataInProc21North;
+
+	 //Processor 21 control and data signals
+	wire rdProc21South;
+	wire emptyProc21South;
+	wire [31:0] dataInProc21South;
+
+	 //Processor 21 control and data signals
+	wire wrProc21South;
+	wire fullProc21South;
+	wire [31:0] dataOutProc21South;
+
+	 //Processor 21 control and data signals
+	wire wrProc21East;
+	wire fullProc21East;
+	wire [31:0] dataOutProc21East;
+
+	 //Processor 21 control and data signals
+	wire rdProc21West;
+	wire emptyProc21West;
+	wire [31:0] dataInProc21West;
+
+	 //Processor 22 control and data signals
+	wire wrProc22North;
+	wire fullProc22North;
+	wire [31:0] dataOutProc22North;
+
+	 //Processor 22 control and data signals
+	wire rdProc22South;
+	wire emptyProc22South;
+	wire [31:0] dataInProc22South;
+
+	 //Processor 22 control and data signals
+	wire wrProc22South;
+	wire fullProc22South;
+	wire [31:0] dataOutProc22South;
+
+	 //Processor 22 control and data signals
+	wire rdProc22East;
+	wire emptyProc22East;
+	wire [31:0] dataInProc22East;
+
+	 //Processor 22 control and data signals
+	wire wrProc22East;
+	wire fullProc22East;
+	wire [31:0] dataOutProc22East;
+
+	 //Processor 22 control and data signals
+	wire rdProc22West;
+	wire emptyProc22West;
+	wire [31:0] dataInProc22West;
+
+	 //Processor 23 control and data signals
+	wire wrProc23North;
+	wire fullProc23North;
+	wire [31:0] dataOutProc23North;
+
+	 //Processor 23 control and data signals
+	wire rdProc23South;
+	wire emptyProc23South;
+	wire [31:0] dataInProc23South;
+
+	 //Processor 23 control and data signals
+	wire rdProc23East;
+	wire emptyProc23East;
+	wire [31:0] dataInProc23East;
+
+	 //Processor 23 control and data signals
+	wire wrProc23East;
+	wire fullProc23East;
+	wire [31:0] dataOutProc23East;
+
+	 //Processor 23 control and data signals
+	wire rdProc23West;
+	wire emptyProc23West;
+	wire [31:0] dataInProc23West;
+
+	 //Processor 23 control and data signals
+	wire wrProc23West;
+	wire fullProc23West;
+	wire [31:0] dataOutProc23West;
+
+	 //Processor 24 control and data signals
+	wire rdProc24North;
+	wire emptyProc24North;
+	wire [31:0] dataInProc24North;
+
+	 //Processor 24 control and data signals
+	wire wrProc24North;
+	wire fullProc24North;
+	wire [31:0] dataOutProc24North;
+
+	 //Processor 24 control and data signals
+	wire wrProc24South;
+	wire fullProc24South;
+	wire [31:0] dataOutProc24South;
+
+	 //Processor 24 control and data signals
+	wire rdProc24East;
+	wire emptyProc24East;
+	wire [31:0] dataInProc24East;
+
+	 //Processor 24 control and data signals
+	wire wrProc24East;
+	wire fullProc24East;
+	wire [31:0] dataOutProc24East;
+
+	 //Processor 24 control and data signals
+	wire rdProc24West;
+	wire emptyProc24West;
+	wire [31:0] dataInProc24West;
+
+	 //Processor 24 control and data signals
+	wire wrProc24West;
+	wire fullProc24West;
+	wire [31:0] dataOutProc24West;
+
+	 //Processor 25 control and data signals
+	wire rdProc25South;
+	wire emptyProc25South;
+	wire [31:0] dataInProc25South;
+
+	 //Processor 25 control and data signals
+	wire wrProc25South;
+	wire fullProc25South;
+	wire [31:0] dataOutProc25South;
+
+	 //Processor 25 control and data signals
+	wire rdProc25East;
+	wire emptyProc25East;
+	wire [31:0] dataInProc25East;
+
+	 //Processor 25 control and data signals
+	wire wrProc25East;
+	wire fullProc25East;
+	wire [31:0] dataOutProc25East;
+
+	 //Processor 25 control and data signals
+	wire rdProc25West;
+	wire emptyProc25West;
+	wire [31:0] dataInProc25West;
+
+	 //Processor 25 control and data signals
+	wire wrProc25West;
+	wire fullProc25West;
+	wire [31:0] dataOutProc25West;
+
+	 //Processor 26 control and data signals
+	wire rdProc26North;
+	wire emptyProc26North;
+	wire [31:0] dataInProc26North;
+
+	 //Processor 26 control and data signals
+	wire wrProc26South;
+	wire fullProc26South;
+	wire [31:0] dataOutProc26South;
+
+	 //Processor 26 control and data signals
+	wire wrProc26East;
+	wire fullProc26East;
+	wire [31:0] dataOutProc26East;
+
+	 //Processor 26 control and data signals
+	wire rdProc26West;
+	wire emptyProc26West;
+	wire [31:0] dataInProc26West;
+
+	 //Processor 26 control and data signals
+	wire wrProc26West;
+	wire fullProc26West;
+	wire [31:0] dataOutProc26West;
+
+	 //Processor 27 control and data signals
+	wire wrProc27North;
+	wire fullProc27North;
+	wire [31:0] dataOutProc27North;
+
+	 //Processor 27 control and data signals
+	wire wrProc27South;
+	wire fullProc27South;
+	wire [31:0] dataOutProc27South;
+
+	 //Processor 27 control and data signals
+	wire rdProc27East;
+	wire emptyProc27East;
+	wire [31:0] dataInProc27East;
+
+	 //Processor 27 control and data signals
+	wire wrProc27East;
+	wire fullProc27East;
+	wire [31:0] dataOutProc27East;
+
+	 //Processor 27 control and data signals
+	wire rdProc27West;
+	wire emptyProc27West;
+	wire [31:0] dataInProc27West;
+
+	 //Processor 28 control and data signals
+	wire rdProc28North;
+	wire emptyProc28North;
+	wire [31:0] dataInProc28North;
+
+	 //Processor 28 control and data signals
+	wire wrProc28South;
+	wire fullProc28South;
+	wire [31:0] dataOutProc28South;
+
+	 //Processor 28 control and data signals
+	wire rdProc28East;
+	wire emptyProc28East;
+	wire [31:0] dataInProc28East;
+
+	 //Processor 28 control and data signals
+	wire rdProc28West;
+	wire emptyProc28West;
+	wire [31:0] dataInProc28West;
+
+	 //Processor 28 control and data signals
+	wire wrProc28West;
+	wire fullProc28West;
+	wire [31:0] dataOutProc28West;
+
+	 //Processor 29 control and data signals
+	wire rdProc29North;
+	wire emptyProc29North;
+	wire [31:0] dataInProc29North;
+
+	 //Processor 29 control and data signals
+	wire wrProc29North;
+	wire fullProc29North;
+	wire [31:0] dataOutProc29North;
+
+	 //Processor 29 control and data signals
+	wire rdProc29South;
+	wire emptyProc29South;
+	wire [31:0] dataInProc29South;
+
+	 //Processor 29 control and data signals
+	wire wrProc29West;
+	wire fullProc29West;
+	wire [31:0] dataOutProc29West;
+
+	 //Processor 30 control and data signals
+	wire wrProc30North;
+	wire fullProc30North;
+	wire [31:0] dataOutProc30North;
+
+	 //Processor 30 control and data signals
+	wire rdProc30South;
+	wire emptyProc30South;
+	wire [31:0] dataInProc30South;
+
+	 //Processor 31 control and data signals
+	wire rdProc31North;
+	wire emptyProc31North;
+	wire [31:0] dataInProc31North;
+
+	 //Processor 31 control and data signals
+	wire wrProc31North;
+	wire fullProc31North;
+	wire [31:0] dataOutProc31North;
+
+	 //Processor 32 control and data signals
+	wire rdProc32North;
+	wire emptyProc32North;
+	wire [31:0] dataInProc32North;
+
+	 //Processor 32 control and data signals
+	wire wrProc32North;
+	wire fullProc32North;
+	wire [31:0] dataOutProc32North;
+
+	 //Processor 33 control and data signals
+	wire wrProc33North;
+	wire fullProc33North;
+	wire [31:0] dataOutProc33North;
+
+	 //Processor 33 control and data signals
+	wire rdProc33South;
+	wire emptyProc33South;
+	wire [31:0] dataInProc33South;
+
+	 //Processor 33 control and data signals
+	wire wrProc33South;
+	wire fullProc33South;
+	wire [31:0] dataOutProc33South;
+
+	 //Processor 33 control and data signals
+	wire rdProc33East;
+	wire emptyProc33East;
+	wire [31:0] dataInProc33East;
+
+	 //Processor 34 control and data signals
+	wire rdProc34North;
+	wire emptyProc34North;
+	wire [31:0] dataInProc34North;
+
+	 //Processor 34 control and data signals
+	wire wrProc34West;
+	wire fullProc34West;
+	wire [31:0] dataOutProc34West;
+
+	 //Processor 35 control and data signals
+	wire rdProc35North;
+	wire emptyProc35North;
+	wire [31:0] dataInProc35North;
+
+	 //Processor 35 control and data signals
+	wire wrProc35North;
+	wire fullProc35North;
+	wire [31:0] dataOutProc35North;
+
+	 //Processor 35 control and data signals
+	wire rdProc35South;
+	wire emptyProc35South;
+	wire [31:0] dataInProc35South;
+
+	 //Processor 35 control and data signals
+	wire wrProc35East;
+	wire fullProc35East;
+	wire [31:0] dataOutProc35East;
+
+	 //Processor 36 control and data signals
+	wire rdProc36North;
+	wire emptyProc36North;
+	wire [31:0] dataInProc36North;
+
+	 //Processor 36 control and data signals
+	wire wrProc36South;
+	wire fullProc36South;
+	wire [31:0] dataOutProc36South;
+
+	 //Processor 36 control and data signals
+	wire wrProc36East;
+	wire fullProc36East;
+	wire [31:0] dataOutProc36East;
+
+	 //Processor 36 control and data signals
+	wire rdProc36West;
+	wire emptyProc36West;
+	wire [31:0] dataInProc36West;
+
+	 //Processor 37 control and data signals
+	wire rdProc37North;
+	wire emptyProc37North;
+	wire [31:0] dataInProc37North;
+
+	 //Processor 37 control and data signals
+	wire wrProc37South;
+	wire fullProc37South;
+	wire [31:0] dataOutProc37South;
+
+	 //Processor 37 control and data signals
+	wire rdProc37West;
+	wire emptyProc37West;
+	wire [31:0] dataInProc37West;
+
+	 //Processor 38 control and data signals
+	wire rdProc38North;
+	wire emptyProc38North;
+	wire [31:0] dataInProc38North;
+
+	 //Processor 38 control and data signals
+	wire rdProc38South;
+	wire emptyProc38South;
+	wire [31:0] dataInProc38South;
+
+	 //Processor 38 control and data signals
+	wire wrProc38South;
+	wire fullProc38South;
+	wire [31:0] dataOutProc38South;
+
+	 //Processor 38 control and data signals
+	wire wrProc38East;
+	wire fullProc38East;
+	wire [31:0] dataOutProc38East;
+
+	 //Processor 39 control and data signals
+	wire wrProc39North;
+	wire fullProc39North;
+	wire [31:0] dataOutProc39North;
+
+	 //Processor 39 control and data signals
+	wire rdProc39South;
+	wire emptyProc39South;
+	wire [31:0] dataInProc39South;
+
+	 //Processor 39 control and data signals
+	wire rdProc39West;
+	wire emptyProc39West;
+	wire [31:0] dataInProc39West;
+
+	 //Processor 40 control and data signals
+	wire wrProc40North;
+	wire fullProc40North;
+	wire [31:0] dataOutProc40North;
+
+	 //Processor 40 control and data signals
+	wire rdProc40South;
+	wire emptyProc40South;
+	wire [31:0] dataInProc40South;
+
+	 //Processor 40 control and data signals
+	wire wrProc40South;
+	wire fullProc40South;
+	wire [31:0] dataOutProc40South;
+
+	 //Processor 40 control and data signals
+	wire rdProc40East;
+	wire emptyProc40East;
+	wire [31:0] dataInProc40East;
+
+	 //Processor 41 control and data signals
+	wire rdProc41East;
+	wire emptyProc41East;
+	wire [31:0] dataInProc41East;
+
+	 //Processor 41 control and data signals
+	wire wrProc41West;
+	wire fullProc41West;
+	wire [31:0] dataOutProc41West;
+
+	 //Processor 42 control and data signals
+	wire rdProc42South;
+	wire emptyProc42South;
+	wire [31:0] dataInProc42South;
+
+	 //Processor 42 control and data signals
+	wire rdProc42East;
+	wire emptyProc42East;
+	wire [31:0] dataInProc42East;
+
+	 //Processor 42 control and data signals
+	wire wrProc42East;
+	wire fullProc42East;
+	wire [31:0] dataOutProc42East;
+
+	 //Processor 42 control and data signals
+	wire wrProc42West;
+	wire fullProc42West;
+	wire [31:0] dataOutProc42West;
+
+	 //Processor 43 control and data signals
+	wire rdProc43North;
+	wire emptyProc43North;
+	wire [31:0] dataInProc43North;
+
+	 //Processor 43 control and data signals
+	wire wrProc43North;
+	wire fullProc43North;
+	wire [31:0] dataOutProc43North;
+
+	 //Processor 43 control and data signals
+	wire rdProc43South;
+	wire emptyProc43South;
+	wire [31:0] dataInProc43South;
+
+	 //Processor 43 control and data signals
+	wire wrProc43South;
+	wire fullProc43South;
+	wire [31:0] dataOutProc43South;
+
+	 //Processor 43 control and data signals
+	wire wrProc43East;
+	wire fullProc43East;
+	wire [31:0] dataOutProc43East;
+
+	 //Processor 43 control and data signals
+	wire rdProc43West;
+	wire emptyProc43West;
+	wire [31:0] dataInProc43West;
+
+	 //Processor 43 control and data signals
+	wire wrProc43West;
+	wire fullProc43West;
+	wire [31:0] dataOutProc43West;
+
+	 //Processor 44 control and data signals
+	wire wrProc44East;
+	wire fullProc44East;
+	wire [31:0] dataOutProc44East;
+
+	 //Processor 44 control and data signals
+	wire rdProc44West;
+	wire emptyProc44West;
+	wire [31:0] dataInProc44West;
+
+	 //Processor 45 control and data signals
+	wire wrProc45North;
+	wire fullProc45North;
+	wire [31:0] dataOutProc45North;
+
+	 //Processor 45 control and data signals
+	wire wrProc45South;
+	wire fullProc45South;
+	wire [31:0] dataOutProc45South;
+
+	 //Processor 45 control and data signals
+	wire rdProc45East;
+	wire emptyProc45East;
+	wire [31:0] dataInProc45East;
+
+	 //Processor 45 control and data signals
+	wire rdProc45West;
+	wire emptyProc45West;
+	wire [31:0] dataInProc45West;
+
+	 //Processor 46 control and data signals
+	wire rdProc46North;
+	wire emptyProc46North;
+	wire [31:0] dataInProc46North;
+
+	 //Processor 46 control and data signals
+	wire wrProc46South;
+	wire fullProc46South;
+	wire [31:0] dataOutProc46South;
+
+	 //Processor 46 control and data signals
+	wire rdProc46East;
+	wire emptyProc46East;
+	wire [31:0] dataInProc46East;
+
+	 //Processor 46 control and data signals
+	wire wrProc46West;
+	wire fullProc46West;
+	wire [31:0] dataOutProc46West;
+
+	 //Processor 47 control and data signals
+	wire rdProc47North;
+	wire emptyProc47North;
+	wire [31:0] dataInProc47North;
+
+	 //Processor 47 control and data signals
+	wire wrProc47South;
+	wire fullProc47South;
+	wire [31:0] dataOutProc47South;
+
+	 //Processor 47 control and data signals
+	wire wrProc47West;
+	wire fullProc47West;
+	wire [31:0] dataOutProc47West;
+
+	 //Processor 48 control and data signals
+	wire rdProc48North;
+	wire emptyProc48North;
+	wire [31:0] dataInProc48North;
+
+	 //Processor 48 control and data signals
+	wire wrProc48North;
+	wire fullProc48North;
+	wire [31:0] dataOutProc48North;
+
+	 //Processor 48 control and data signals
+	wire rdProc48South;
+	wire emptyProc48South;
+	wire [31:0] dataInProc48South;
+
+	 //Processor 48 control and data signals
+	wire wrProc48South;
+	wire fullProc48South;
+	wire [31:0] dataOutProc48South;
+
+	 //Processor 49 control and data signals
+	wire wrProc49North;
+	wire fullProc49North;
+	wire [31:0] dataOutProc49North;
+
+	 //Processor 49 control and data signals
+	wire rdProc49South;
+	wire emptyProc49South;
+	wire [31:0] dataInProc49South;
+
+	 //Processor 50 control and data signals
+	wire rdProc50North;
+	wire emptyProc50North;
+	wire [31:0] dataInProc50North;
+
+	 //Processor 50 control and data signals
+	wire wrProc50North;
+	wire fullProc50North;
+	wire [31:0] dataOutProc50North;
+
+	 //Processor 50 control and data signals
+	wire rdProc50East;
+	wire emptyProc50East;
+	wire [31:0] dataInProc50East;
+
+	 //Processor 50 control and data signals
+	wire wrProc50East;
+	wire fullProc50East;
+	wire [31:0] dataOutProc50East;
+
+	 //Processor 51 control and data signals
+	wire rdProc51East;
+	wire emptyProc51East;
+	wire [31:0] dataInProc51East;
+
+	 //Processor 51 control and data signals
+	wire wrProc51East;
+	wire fullProc51East;
+	wire [31:0] dataOutProc51East;
+
+	 //Processor 51 control and data signals
+	wire rdProc51West;
+	wire emptyProc51West;
+	wire [31:0] dataInProc51West;
+
+	 //Processor 51 control and data signals
+	wire wrProc51West;
+	wire fullProc51West;
+	wire [31:0] dataOutProc51West;
+
+	 //Processor 52 control and data signals
+	wire wrProc52North;
+	wire fullProc52North;
+	wire [31:0] dataOutProc52North;
+
+	 //Processor 52 control and data signals
+	wire rdProc52South;
+	wire emptyProc52South;
+	wire [31:0] dataInProc52South;
+
+	 //Processor 52 control and data signals
+	wire wrProc52South;
+	wire fullProc52South;
+	wire [31:0] dataOutProc52South;
+
+	 //Processor 52 control and data signals
+	wire rdProc52East;
+	wire emptyProc52East;
+	wire [31:0] dataInProc52East;
+
+	 //Processor 52 control and data signals
+	wire wrProc52East;
+	wire fullProc52East;
+	wire [31:0] dataOutProc52East;
+
+	 //Processor 52 control and data signals
+	wire rdProc52West;
+	wire emptyProc52West;
+	wire [31:0] dataInProc52West;
+
+	 //Processor 52 control and data signals
+	wire wrProc52West;
+	wire fullProc52West;
+	wire [31:0] dataOutProc52West;
+
+	 //Processor 53 control and data signals
+	wire rdProc53North;
+	wire emptyProc53North;
+	wire [31:0] dataInProc53North;
+
+	 //Processor 53 control and data signals
+	wire wrProc53North;
+	wire fullProc53North;
+	wire [31:0] dataOutProc53North;
+
+	 //Processor 53 control and data signals
+	wire rdProc53South;
+	wire emptyProc53South;
+	wire [31:0] dataInProc53South;
+
+	 //Processor 53 control and data signals
+	wire wrProc53South;
+	wire fullProc53South;
+	wire [31:0] dataOutProc53South;
+
+	 //Processor 53 control and data signals
+	wire rdProc53East;
+	wire emptyProc53East;
+	wire [31:0] dataInProc53East;
+
+	 //Processor 53 control and data signals
+	wire rdProc53West;
+	wire emptyProc53West;
+	wire [31:0] dataInProc53West;
+
+	 //Processor 53 control and data signals
+	wire wrProc53West;
+	wire fullProc53West;
+	wire [31:0] dataOutProc53West;
+
+	 //Processor 54 control and data signals
+	wire rdProc54East;
+	wire emptyProc54East;
+	wire [31:0] dataInProc54East;
+
+	 //Processor 54 control and data signals
+	wire wrProc54West;
+	wire fullProc54West;
+	wire [31:0] dataOutProc54West;
+
+	 //Processor 55 control and data signals
+	wire rdProc55North;
+	wire emptyProc55North;
+	wire [31:0] dataInProc55North;
+
+	 //Processor 55 control and data signals
+	wire rdProc55East;
+	wire emptyProc55East;
+	wire [31:0] dataInProc55East;
+
+	 //Processor 55 control and data signals
+	wire wrProc55West;
+	wire fullProc55West;
+	wire [31:0] dataOutProc55West;
+
+	 //Processor 56 control and data signals
+	wire rdProc56North;
+	wire emptyProc56North;
+	wire [31:0] dataInProc56North;
+
+	 //Processor 56 control and data signals
+	wire rdProc56East;
+	wire emptyProc56East;
+	wire [31:0] dataInProc56East;
+
+	 //Processor 56 control and data signals
+	wire wrProc56East;
+	wire fullProc56East;
+	wire [31:0] dataOutProc56East;
+
+	 //Processor 56 control and data signals
+	wire wrProc56West;
+	wire fullProc56West;
+	wire [31:0] dataOutProc56West;
+
+	 //Processor 57 control and data signals
+	wire rdProc57North;
+	wire emptyProc57North;
+	wire [31:0] dataInProc57North;
+
+	 //Processor 57 control and data signals
+	wire wrProc57South;
+	wire fullProc57South;
+	wire [31:0] dataOutProc57South;
+
+	 //Processor 57 control and data signals
+	wire rdProc57West;
+	wire emptyProc57West;
+	wire [31:0] dataInProc57West;
+
+	 //Processor 57 control and data signals
+	wire wrProc57West;
+	wire fullProc57West;
+	wire [31:0] dataOutProc57West;
+
+	 //Processor 58 control and data signals
+	wire rdProc58North;
+	wire emptyProc58North;
+	wire [31:0] dataInProc58North;
+
+	 //Processor 58 control and data signals
+	wire wrProc58North;
+	wire fullProc58North;
+	wire [31:0] dataOutProc58North;
+
+	 //Processor 58 control and data signals
+	wire wrProc58South;
+	wire fullProc58South;
+	wire [31:0] dataOutProc58South;
+
+	 //Processor 58 control and data signals
+	wire rdProc58East;
+	wire emptyProc58East;
+	wire [31:0] dataInProc58East;
+
+	 //Processor 59 control and data signals
+	wire wrProc59North;
+	wire fullProc59North;
+	wire [31:0] dataOutProc59North;
+
+	 //Processor 59 control and data signals
+	wire rdProc59South;
+	wire emptyProc59South;
+	wire [31:0] dataInProc59South;
+
+	 //Processor 59 control and data signals
+	wire wrProc59West;
+	wire fullProc59West;
+	wire [31:0] dataOutProc59West;
+
+	 //Processor 60 control and data signals
+	wire wrProc60South;
+	wire fullProc60South;
+	wire [31:0] dataOutProc60South;
+
+	 //Processor 60 control and data signals
+	wire rdProc60East;
+	wire emptyProc60East;
+	wire [31:0] dataInProc60East;
+
+	 //Processor 61 control and data signals
+	wire rdProc61South;
+	wire emptyProc61South;
+	wire [31:0] dataInProc61South;
+
+	 //Processor 61 control and data signals
+	wire wrProc61East;
+	wire fullProc61East;
+	wire [31:0] dataOutProc61East;
+
+	 //Processor 61 control and data signals
+	wire wrProc61West;
+	wire fullProc61West;
+	wire [31:0] dataOutProc61West;
+
+	 //Processor 62 control and data signals
+	wire rdProc62North;
+	wire emptyProc62North;
+	wire [31:0] dataInProc62North;
+
+	 //Processor 62 control and data signals
+	wire wrProc62North;
+	wire fullProc62North;
+	wire [31:0] dataOutProc62North;
+
+	 //Processor 62 control and data signals
+	wire rdProc62South;
+	wire emptyProc62South;
+	wire [31:0] dataInProc62South;
+
+	 //Processor 62 control and data signals
+	wire wrProc62South;
+	wire fullProc62South;
+	wire [31:0] dataOutProc62South;
+
+	 //Processor 62 control and data signals
+	wire wrProc62East;
+	wire fullProc62East;
+	wire [31:0] dataOutProc62East;
+
+	 //Processor 62 control and data signals
+	wire rdProc62West;
+	wire emptyProc62West;
+	wire [31:0] dataInProc62West;
+
+	 //Processor 63 control and data signals
+	wire rdProc63North;
+	wire emptyProc63North;
+	wire [31:0] dataInProc63North;
+
+	 //Processor 63 control and data signals
+	wire wrProc63North;
+	wire fullProc63North;
+	wire [31:0] dataOutProc63North;
+
+	 //Processor 63 control and data signals
+	wire rdProc63South;
+	wire emptyProc63South;
+	wire [31:0] dataInProc63South;
+
+	 //Processor 63 control and data signals
+	wire wrProc63South;
+	wire fullProc63South;
+	wire [31:0] dataOutProc63South;
+
+	 //Processor 63 control and data signals
+	wire wrProc63East;
+	wire fullProc63East;
+	wire [31:0] dataOutProc63East;
+
+	 //Processor 63 control and data signals
+	wire rdProc63West;
+	wire emptyProc63West;
+	wire [31:0] dataInProc63West;
+
+	 //Processor 64 control and data signals
+	wire wrProc64South;
+	wire fullProc64South;
+	wire [31:0] dataOutProc64South;
+
+	 //Processor 64 control and data signals
+	wire rdProc64East;
+	wire emptyProc64East;
+	wire [31:0] dataInProc64East;
+
+	 //Processor 64 control and data signals
+	wire wrProc64East;
+	wire fullProc64East;
+	wire [31:0] dataOutProc64East;
+
+	 //Processor 64 control and data signals
+	wire rdProc64West;
+	wire emptyProc64West;
+	wire [31:0] dataInProc64West;
+
+	 //Processor 65 control and data signals
+	wire rdProc65West;
+	wire emptyProc65West;
+	wire [31:0] dataInProc65West;
+
+	 //Processor 65 control and data signals
+	wire wrProc65West;
+	wire fullProc65West;
+	wire [31:0] dataOutProc65West;
+
+	 //Processor 66 control and data signals
+	wire rdProc66South;
+	wire emptyProc66South;
+	wire [31:0] dataInProc66South;
+
+	 //Processor 66 control and data signals
+	wire wrProc66East;
+	wire fullProc66East;
+	wire [31:0] dataOutProc66East;
+
+	 //Processor 67 control and data signals
+	wire rdProc67North;
+	wire emptyProc67North;
+	wire [31:0] dataInProc67North;
+
+	 //Processor 67 control and data signals
+	wire wrProc67South;
+	wire fullProc67South;
+	wire [31:0] dataOutProc67South;
+
+	 //Processor 67 control and data signals
+	wire wrProc67East;
+	wire fullProc67East;
+	wire [31:0] dataOutProc67East;
+
+	 //Processor 67 control and data signals
+	wire rdProc67West;
+	wire emptyProc67West;
+	wire [31:0] dataInProc67West;
+
+	 //Processor 68 control and data signals
+	wire rdProc68North;
+	wire emptyProc68North;
+	wire [31:0] dataInProc68North;
+
+	 //Processor 68 control and data signals
+	wire wrProc68South;
+	wire fullProc68South;
+	wire [31:0] dataOutProc68South;
+
+	 //Processor 68 control and data signals
+	wire wrProc68East;
+	wire fullProc68East;
+	wire [31:0] dataOutProc68East;
+
+	 //Processor 68 control and data signals
+	wire rdProc68West;
+	wire emptyProc68West;
+	wire [31:0] dataInProc68West;
+
+	 //Processor 69 control and data signals
+	wire wrProc69North;
+	wire fullProc69North;
+	wire [31:0] dataOutProc69North;
+
+	 //Processor 69 control and data signals
+	wire rdProc69South;
+	wire emptyProc69South;
+	wire [31:0] dataInProc69South;
+
+	 //Processor 69 control and data signals
+	wire rdProc69West;
+	wire emptyProc69West;
+	wire [31:0] dataInProc69West;
+
+	 //Processor 70 control and data signals
+	wire rdProc70North;
+	wire emptyProc70North;
+	wire [31:0] dataInProc70North;
+
+	 //Processor 70 control and data signals
+	wire wrProc70South;
+	wire fullProc70South;
+	wire [31:0] dataOutProc70South;
+
+	 //Processor 71 control and data signals
+	wire wrProc71North;
+	wire fullProc71North;
+	wire [31:0] dataOutProc71North;
+
+	 //Processor 71 control and data signals
+	wire rdProc71South;
+	wire emptyProc71South;
+	wire [31:0] dataInProc71South;
+
+	 //Processor 72 control and data signals
+	wire rdProc72North;
+	wire emptyProc72North;
+	wire [31:0] dataInProc72North;
+
+	 //Processor 72 control and data signals
+	wire wrProc72North;
+	wire fullProc72North;
+	wire [31:0] dataOutProc72North;
+
+	 //Processor 72 control and data signals
+	wire rdProc72East;
+	wire emptyProc72East;
+	wire [31:0] dataInProc72East;
+
+	 //Processor 72 control and data signals
+	wire wrProc72East;
+	wire fullProc72East;
+	wire [31:0] dataOutProc72East;
+
+	 //Processor 73 control and data signals
+	wire rdProc73North;
+	wire emptyProc73North;
+	wire [31:0] dataInProc73North;
+
+	 //Processor 73 control and data signals
+	wire wrProc73North;
+	wire fullProc73North;
+	wire [31:0] dataOutProc73North;
+
+	 //Processor 73 control and data signals
+	wire wrProc73South;
+	wire fullProc73South;
+	wire [31:0] dataOutProc73South;
+
+	 //Processor 73 control and data signals
+	wire rdProc73East;
+	wire emptyProc73East;
+	wire [31:0] dataInProc73East;
+
+	 //Processor 73 control and data signals
+	wire rdProc73West;
+	wire emptyProc73West;
+	wire [31:0] dataInProc73West;
+
+	 //Processor 73 control and data signals
+	wire wrProc73West;
+	wire fullProc73West;
+	wire [31:0] dataOutProc73West;
+
+	 //Processor 74 control and data signals
+	wire rdProc74North;
+	wire emptyProc74North;
+	wire [31:0] dataInProc74North;
+
+	 //Processor 74 control and data signals
+	wire rdProc74South;
+	wire emptyProc74South;
+	wire [31:0] dataInProc74South;
+
+	 //Processor 74 control and data signals
+	wire wrProc74South;
+	wire fullProc74South;
+	wire [31:0] dataOutProc74South;
+
+	 //Processor 74 control and data signals
+	wire rdProc74East;
+	wire emptyProc74East;
+	wire [31:0] dataInProc74East;
+
+	 //Processor 74 control and data signals
+	wire wrProc74East;
+	wire fullProc74East;
+	wire [31:0] dataOutProc74East;
+
+	 //Processor 74 control and data signals
+	wire wrProc74West;
+	wire fullProc74West;
+	wire [31:0] dataOutProc74West;
+
+	 //Processor 75 control and data signals
+	wire rdProc75East;
+	wire emptyProc75East;
+	wire [31:0] dataInProc75East;
+
+	 //Processor 75 control and data signals
+	wire wrProc75East;
+	wire fullProc75East;
+	wire [31:0] dataOutProc75East;
+
+	 //Processor 75 control and data signals
+	wire rdProc75West;
+	wire emptyProc75West;
+	wire [31:0] dataInProc75West;
+
+	 //Processor 75 control and data signals
+	wire wrProc75West;
+	wire fullProc75West;
+	wire [31:0] dataOutProc75West;
+
+	 //Processor 76 control and data signals
+	wire wrProc76North;
+	wire fullProc76North;
+	wire [31:0] dataOutProc76North;
+
+	 //Processor 76 control and data signals
+	wire rdProc76South;
+	wire emptyProc76South;
+	wire [31:0] dataInProc76South;
+
+	 //Processor 76 control and data signals
+	wire rdProc76West;
+	wire emptyProc76West;
+	wire [31:0] dataInProc76West;
+
+	 //Processor 76 control and data signals
+	wire wrProc76West;
+	wire fullProc76West;
+	wire [31:0] dataOutProc76West;
+
+	 //Processor 77 control and data signals
+	wire rdProc77North;
+	wire emptyProc77North;
+	wire [31:0] dataInProc77North;
+
+	 //Processor 77 control and data signals
+	wire wrProc77South;
+	wire fullProc77South;
+	wire [31:0] dataOutProc77South;
+
+	 //Processor 77 control and data signals
+	wire rdProc77East;
+	wire emptyProc77East;
+	wire [31:0] dataInProc77East;
+
+	 //Processor 78 control and data signals
+	wire rdProc78North;
+	wire emptyProc78North;
+	wire [31:0] dataInProc78North;
+
+	 //Processor 78 control and data signals
+	wire wrProc78West;
+	wire fullProc78West;
+	wire [31:0] dataOutProc78West;
+
+	 //Processor 79 control and data signals
+	wire wrProc79North;
+	wire fullProc79North;
+	wire [31:0] dataOutProc79North;
+
+	 //Processor 79 control and data signals
+	wire rdProc79South;
+	wire emptyProc79South;
+	wire [31:0] dataInProc79South;
+
+	 //Processor 80 control and data signals
+	wire rdProc80North;
+	wire emptyProc80North;
+	wire [31:0] dataInProc80North;
+
+	 //Processor 80 control and data signals
+	wire wrProc80East;
+	wire fullProc80East;
+	wire [31:0] dataOutProc80East;
+
+	 //Processor 81 control and data signals
+	wire wrProc81North;
+	wire fullProc81North;
+	wire [31:0] dataOutProc81North;
+
+	 //Processor 81 control and data signals
+	wire rdProc81East;
+	wire emptyProc81East;
+	wire [31:0] dataInProc81East;
+
+	 //Processor 81 control and data signals
+	wire wrProc81East;
+	wire fullProc81East;
+	wire [31:0] dataOutProc81East;
+
+	 //Processor 81 control and data signals
+	wire rdProc81West;
+	wire emptyProc81West;
+	wire [31:0] dataInProc81West;
+
+	 //Processor 82 control and data signals
+	wire rdProc82East;
+	wire emptyProc82East;
+	wire [31:0] dataInProc82East;
+
+	 //Processor 82 control and data signals
+	wire wrProc82East;
+	wire fullProc82East;
+	wire [31:0] dataOutProc82East;
+
+	 //Processor 82 control and data signals
+	wire rdProc82West;
+	wire emptyProc82West;
+	wire [31:0] dataInProc82West;
+
+	 //Processor 82 control and data signals
+	wire wrProc82West;
+	wire fullProc82West;
+	wire [31:0] dataOutProc82West;
+
+	 //Processor 83 control and data signals
+	wire rdProc83North;
+	wire emptyProc83North;
+	wire [31:0] dataInProc83North;
+
+	 //Processor 83 control and data signals
+	wire rdProc83East;
+	wire emptyProc83East;
+	wire [31:0] dataInProc83East;
+
+	 //Processor 83 control and data signals
+	wire wrProc83East;
+	wire fullProc83East;
+	wire [31:0] dataOutProc83East;
+
+	 //Processor 83 control and data signals
+	wire rdProc83West;
+	wire emptyProc83West;
+	wire [31:0] dataInProc83West;
+
+	 //Processor 83 control and data signals
+	wire wrProc83West;
+	wire fullProc83West;
+	wire [31:0] dataOutProc83West;
+
+	 //Processor 84 control and data signals
+	wire rdProc84North;
+	wire emptyProc84North;
+	wire [31:0] dataInProc84North;
+
+	 //Processor 84 control and data signals
+	wire wrProc84North;
+	wire fullProc84North;
+	wire [31:0] dataOutProc84North;
+
+	 //Processor 84 control and data signals
+	wire rdProc84East;
+	wire emptyProc84East;
+	wire [31:0] dataInProc84East;
+
+	 //Processor 84 control and data signals
+	wire wrProc84East;
+	wire fullProc84East;
+	wire [31:0] dataOutProc84East;
+
+	 //Processor 84 control and data signals
+	wire rdProc84West;
+	wire emptyProc84West;
+	wire [31:0] dataInProc84West;
+
+	 //Processor 84 control and data signals
+	wire wrProc84West;
+	wire fullProc84West;
+	wire [31:0] dataOutProc84West;
+
+	 //Processor 85 control and data signals
+	wire rdProc85West;
+	wire emptyProc85West;
+	wire [31:0] dataInProc85West;
+
+	 //Processor 85 control and data signals
+	wire wrProc85West;
+	wire fullProc85West;
+	wire [31:0] dataOutProc85West;
+
+	 //Processor 86 control and data signals
+	wire wrProc86North;
+	wire fullProc86North;
+	wire [31:0] dataOutProc86North;
+
+	 //Processor 86 control and data signals
+	wire rdProc86East;
+	wire emptyProc86East;
+	wire [31:0] dataInProc86East;
+
+	 //Processor 87 control and data signals
+	wire rdProc87North;
+	wire emptyProc87North;
+	wire [31:0] dataInProc87North;
+
+	 //Processor 87 control and data signals
+	wire wrProc87East;
+	wire fullProc87East;
+	wire [31:0] dataOutProc87East;
+
+	 //Processor 87 control and data signals
+	wire wrProc87West;
+	wire fullProc87West;
+	wire [31:0] dataOutProc87West;
+
+	 //Processor 88 control and data signals
+	wire wrProc88East;
+	wire fullProc88East;
+	wire [31:0] dataOutProc88East;
+
+	 //Processor 88 control and data signals
+	wire rdProc88West;
+	wire emptyProc88West;
+	wire [31:0] dataInProc88West;
+
+	 //Processor 89 control and data signals
+	wire wrProc89North;
+	wire fullProc89North;
+	wire [31:0] dataOutProc89North;
+
+	 //Processor 89 control and data signals
+	wire rdProc89West;
+	wire emptyProc89West;
+	wire [31:0] dataInProc89West;
+
+
+
+//PROCESSOR 0
+system proc0(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe0),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe0),
+	.wrSouth(wrProc0South),
+	.fullSouth(fullProc0South),
+	.dataOutSouth(dataOutProc0South),
+	.wrEast(wrProc0East),
+	.fullEast(fullProc0East),
+	.dataOutEast(dataOutProc0East));
+
+//PROCESSOR 1
+system proc1(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe1),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe1),
+	.wrSouth(wrProc1South),
+	.fullSouth(fullProc1South),
+	.dataOutSouth(dataOutProc1South),
+	.rdWest(rdProc1West),
+	.emptyWest(emptyProc1West),
+	.dataInWest(dataInProc1West));
+
+//PROCESSOR 2
+system proc2(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe2),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe2));
+
+//PROCESSOR 3
+system proc3(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe3),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe3));
+
+//PROCESSOR 4
+system proc4(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe4),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe4),
+	.rdSouth(rdProc4South),
+	.emptySouth(emptyProc4South),
+	.dataInSouth(dataInProc4South),
+	.rdEast(rdProc4East),
+	.emptyEast(emptyProc4East),
+	.dataInEast(dataInProc4East),
+	.wrEast(wrProc4East),
+	.fullEast(fullProc4East),
+	.dataOutEast(dataOutProc4East));
+
+//PROCESSOR 5
+system proc5(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe5),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe5),
+	.rdEast(rdProc5East),
+	.emptyEast(emptyProc5East),
+	.dataInEast(dataInProc5East),
+	.rdWest(rdProc5West),
+	.emptyWest(emptyProc5West),
+	.dataInWest(dataInProc5West),
+	.wrWest(wrProc5West),
+	.fullWest(fullProc5West),
+	.dataOutWest(dataOutProc5West),
+	.reg_file_b_readdataout(reg_file_b_readdataout));
+
+//PROCESSOR 6
+system proc6(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe6),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe6),
+	.rdSouth(rdProc6South),
+	.emptySouth(emptyProc6South),
+	.dataInSouth(dataInProc6South),
+	.wrSouth(wrProc6South),
+	.fullSouth(fullProc6South),
+	.dataOutSouth(dataOutProc6South),
+	.rdEast(rdProc6East),
+	.emptyEast(emptyProc6East),
+	.dataInEast(dataInProc6East),
+	.wrWest(wrProc6West),
+	.fullWest(fullProc6West),
+	.dataOutWest(dataOutProc6West));
+
+//PROCESSOR 7
+system proc7(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe7),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe7),
+	.rdSouth(rdProc7South),
+	.emptySouth(emptyProc7South),
+	.dataInSouth(dataInProc7South),
+	.wrWest(wrProc7West),
+	.fullWest(fullProc7West),
+	.dataOutWest(dataOutProc7West));
+
+//PROCESSOR 8
+system proc8(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe8),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe8),
+	.rdSouth(rdProc8South),
+	.emptySouth(emptyProc8South),
+	.dataInSouth(dataInProc8South),
+	.wrSouth(wrProc8South),
+	.fullSouth(fullProc8South),
+	.dataOutSouth(dataOutProc8South),
+	.rdEast(rdProc8East),
+	.emptyEast(emptyProc8East),
+	.dataInEast(dataInProc8East));
+
+//PROCESSOR 9
+system proc9(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe9),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe9),
+	.rdSouth(rdProc9South),
+	.emptySouth(emptyProc9South),
+	.dataInSouth(dataInProc9South),
+	.wrWest(wrProc9West),
+	.fullWest(fullProc9West),
+	.dataOutWest(dataOutProc9West));
+
+//PROCESSOR 10
+system proc10(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe10),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe10),
+	.rdNorth(rdProc10North),
+	.emptyNorth(emptyProc10North),
+	.dataInNorth(dataInProc10North),
+	.wrEast(wrProc10East),
+	.fullEast(fullProc10East),
+	.dataOutEast(dataOutProc10East));
+
+//PROCESSOR 11
+system proc11(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe11),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe11),
+	.rdNorth(rdProc11North),
+	.emptyNorth(emptyProc11North),
+	.dataInNorth(dataInProc11North),
+	.wrSouth(wrProc11South),
+	.fullSouth(fullProc11South),
+	.dataOutSouth(dataOutProc11South),
+	.rdWest(rdProc11West),
+	.emptyWest(emptyProc11West),
+	.dataInWest(dataInProc11West));
+
+//PROCESSOR 12
+system proc12(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe12),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe12),
+	.rdSouth(rdProc12South),
+	.emptySouth(emptyProc12South),
+	.dataInSouth(dataInProc12South),
+	.wrEast(wrProc12East),
+	.fullEast(fullProc12East),
+	.dataOutEast(dataOutProc12East));
+
+//PROCESSOR 13
+system proc13(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe13),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe13),
+	.rdSouth(rdProc13South),
+	.emptySouth(emptyProc13South),
+	.dataInSouth(dataInProc13South),
+	.wrEast(wrProc13East),
+	.fullEast(fullProc13East),
+	.dataOutEast(dataOutProc13East),
+	.rdWest(rdProc13West),
+	.emptyWest(emptyProc13West),
+	.dataInWest(dataInProc13West));
+
+//PROCESSOR 14
+system proc14(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe14),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe14),
+	.wrNorth(wrProc14North),
+	.fullNorth(fullProc14North),
+	.dataOutNorth(dataOutProc14North),
+	.rdSouth(rdProc14South),
+	.emptySouth(emptyProc14South),
+	.dataInSouth(dataInProc14South),
+	.wrSouth(wrProc14South),
+	.fullSouth(fullProc14South),
+	.dataOutSouth(dataOutProc14South),
+	.wrEast(wrProc14East),
+	.fullEast(fullProc14East),
+	.dataOutEast(dataOutProc14East),
+	.rdWest(rdProc14West),
+	.emptyWest(emptyProc14West),
+	.dataInWest(dataInProc14West));
+
+//PROCESSOR 15
+system proc15(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe15),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe15),
+	.wrEast(wrProc15East),
+	.fullEast(fullProc15East),
+	.dataOutEast(dataOutProc15East),
+	.rdWest(rdProc15West),
+	.emptyWest(emptyProc15West),
+	.dataInWest(dataInProc15West));
+
+//PROCESSOR 16
+system proc16(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe16),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe16),
+	.rdNorth(rdProc16North),
+	.emptyNorth(emptyProc16North),
+	.dataInNorth(dataInProc16North),
+	.wrNorth(wrProc16North),
+	.fullNorth(fullProc16North),
+	.dataOutNorth(dataOutProc16North),
+	.wrSouth(wrProc16South),
+	.fullSouth(fullProc16South),
+	.dataOutSouth(dataOutProc16South),
+	.rdWest(rdProc16West),
+	.emptyWest(emptyProc16West),
+	.dataInWest(dataInProc16West));
+
+//PROCESSOR 17
+system proc17(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe17),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe17),
+	.wrNorth(wrProc17North),
+	.fullNorth(fullProc17North),
+	.dataOutNorth(dataOutProc17North),
+	.rdSouth(rdProc17South),
+	.emptySouth(emptyProc17South),
+	.dataInSouth(dataInProc17South));
+
+//PROCESSOR 18
+system proc18(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe18),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe18),
+	.rdNorth(rdProc18North),
+	.emptyNorth(emptyProc18North),
+	.dataInNorth(dataInProc18North),
+	.wrNorth(wrProc18North),
+	.fullNorth(fullProc18North),
+	.dataOutNorth(dataOutProc18North),
+	.wrSouth(wrProc18South),
+	.fullSouth(fullProc18South),
+	.dataOutSouth(dataOutProc18South));
+
+//PROCESSOR 19
+system proc19(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe19),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe19),
+	.wrNorth(wrProc19North),
+	.fullNorth(fullProc19North),
+	.dataOutNorth(dataOutProc19North),
+	.rdSouth(rdProc19South),
+	.emptySouth(emptyProc19South),
+	.dataInSouth(dataInProc19South),
+	.wrSouth(wrProc19South),
+	.fullSouth(fullProc19South),
+	.dataOutSouth(dataOutProc19South));
+
+//PROCESSOR 20
+system proc20(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe20),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe20),
+	.rdSouth(rdProc20South),
+	.emptySouth(emptyProc20South),
+	.dataInSouth(dataInProc20South),
+	.wrEast(wrProc20East),
+	.fullEast(fullProc20East),
+	.dataOutEast(dataOutProc20East));
+
+//PROCESSOR 21
+system proc21(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe21),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe21),
+	.rdNorth(rdProc21North),
+	.emptyNorth(emptyProc21North),
+	.dataInNorth(dataInProc21North),
+	.rdSouth(rdProc21South),
+	.emptySouth(emptyProc21South),
+	.dataInSouth(dataInProc21South),
+	.wrSouth(wrProc21South),
+	.fullSouth(fullProc21South),
+	.dataOutSouth(dataOutProc21South),
+	.wrEast(wrProc21East),
+	.fullEast(fullProc21East),
+	.dataOutEast(dataOutProc21East),
+	.rdWest(rdProc21West),
+	.emptyWest(emptyProc21West),
+	.dataInWest(dataInProc21West));
+
+//PROCESSOR 22
+system proc22(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe22),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe22),
+	.wrNorth(wrProc22North),
+	.fullNorth(fullProc22North),
+	.dataOutNorth(dataOutProc22North),
+	.rdSouth(rdProc22South),
+	.emptySouth(emptyProc22South),
+	.dataInSouth(dataInProc22South),
+	.wrSouth(wrProc22South),
+	.fullSouth(fullProc22South),
+	.dataOutSouth(dataOutProc22South),
+	.rdEast(rdProc22East),
+	.emptyEast(emptyProc22East),
+	.dataInEast(dataInProc22East),
+	.wrEast(wrProc22East),
+	.fullEast(fullProc22East),
+	.dataOutEast(dataOutProc22East),
+	.rdWest(rdProc22West),
+	.emptyWest(emptyProc22West),
+	.dataInWest(dataInProc22West));
+
+//PROCESSOR 23
+system proc23(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe23),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe23),
+	.wrNorth(wrProc23North),
+	.fullNorth(fullProc23North),
+	.dataOutNorth(dataOutProc23North),
+	.rdSouth(rdProc23South),
+	.emptySouth(emptyProc23South),
+	.dataInSouth(dataInProc23South),
+	.rdEast(rdProc23East),
+	.emptyEast(emptyProc23East),
+	.dataInEast(dataInProc23East),
+	.wrEast(wrProc23East),
+	.fullEast(fullProc23East),
+	.dataOutEast(dataOutProc23East),
+	.rdWest(rdProc23West),
+	.emptyWest(emptyProc23West),
+	.dataInWest(dataInProc23West),
+	.wrWest(wrProc23West),
+	.fullWest(fullProc23West),
+	.dataOutWest(dataOutProc23West));
+
+//PROCESSOR 24
+system proc24(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe24),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe24),
+	.rdNorth(rdProc24North),
+	.emptyNorth(emptyProc24North),
+	.dataInNorth(dataInProc24North),
+	.wrNorth(wrProc24North),
+	.fullNorth(fullProc24North),
+	.dataOutNorth(dataOutProc24North),
+	.wrSouth(wrProc24South),
+	.fullSouth(fullProc24South),
+	.dataOutSouth(dataOutProc24South),
+	.rdEast(rdProc24East),
+	.emptyEast(emptyProc24East),
+	.dataInEast(dataInProc24East),
+	.wrEast(wrProc24East),
+	.fullEast(fullProc24East),
+	.dataOutEast(dataOutProc24East),
+	.rdWest(rdProc24West),
+	.emptyWest(emptyProc24West),
+	.dataInWest(dataInProc24West),
+	.wrWest(wrProc24West),
+	.fullWest(fullProc24West),
+	.dataOutWest(dataOutProc24West));
+
+//PROCESSOR 25
+system proc25(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe25),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe25),
+	.rdSouth(rdProc25South),
+	.emptySouth(emptyProc25South),
+	.dataInSouth(dataInProc25South),
+	.wrSouth(wrProc25South),
+	.fullSouth(fullProc25South),
+	.dataOutSouth(dataOutProc25South),
+	.rdEast(rdProc25East),
+	.emptyEast(emptyProc25East),
+	.dataInEast(dataInProc25East),
+	.wrEast(wrProc25East),
+	.fullEast(fullProc25East),
+	.dataOutEast(dataOutProc25East),
+	.rdWest(rdProc25West),
+	.emptyWest(emptyProc25West),
+	.dataInWest(dataInProc25West),
+	.wrWest(wrProc25West),
+	.fullWest(fullProc25West),
+	.dataOutWest(dataOutProc25West));
+
+//PROCESSOR 26
+system proc26(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe26),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe26),
+	.rdNorth(rdProc26North),
+	.emptyNorth(emptyProc26North),
+	.dataInNorth(dataInProc26North),
+	.wrSouth(wrProc26South),
+	.fullSouth(fullProc26South),
+	.dataOutSouth(dataOutProc26South),
+	.wrEast(wrProc26East),
+	.fullEast(fullProc26East),
+	.dataOutEast(dataOutProc26East),
+	.rdWest(rdProc26West),
+	.emptyWest(emptyProc26West),
+	.dataInWest(dataInProc26West),
+	.wrWest(wrProc26West),
+	.fullWest(fullProc26West),
+	.dataOutWest(dataOutProc26West));
+
+//PROCESSOR 27
+system proc27(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe27),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe27),
+	.wrNorth(wrProc27North),
+	.fullNorth(fullProc27North),
+	.dataOutNorth(dataOutProc27North),
+	.wrSouth(wrProc27South),
+	.fullSouth(fullProc27South),
+	.dataOutSouth(dataOutProc27South),
+	.rdEast(rdProc27East),
+	.emptyEast(emptyProc27East),
+	.dataInEast(dataInProc27East),
+	.wrEast(wrProc27East),
+	.fullEast(fullProc27East),
+	.dataOutEast(dataOutProc27East),
+	.rdWest(rdProc27West),
+	.emptyWest(emptyProc27West),
+	.dataInWest(dataInProc27West));
+
+//PROCESSOR 28
+system proc28(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe28),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe28),
+	.rdNorth(rdProc28North),
+	.emptyNorth(emptyProc28North),
+	.dataInNorth(dataInProc28North),
+	.wrSouth(wrProc28South),
+	.fullSouth(fullProc28South),
+	.dataOutSouth(dataOutProc28South),
+	.rdEast(rdProc28East),
+	.emptyEast(emptyProc28East),
+	.dataInEast(dataInProc28East),
+	.rdWest(rdProc28West),
+	.emptyWest(emptyProc28West),
+	.dataInWest(dataInProc28West),
+	.wrWest(wrProc28West),
+	.fullWest(fullProc28West),
+	.dataOutWest(dataOutProc28West));
+
+//PROCESSOR 29
+system proc29(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe29),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe29),
+	.rdNorth(rdProc29North),
+	.emptyNorth(emptyProc29North),
+	.dataInNorth(dataInProc29North),
+	.wrNorth(wrProc29North),
+	.fullNorth(fullProc29North),
+	.dataOutNorth(dataOutProc29North),
+	.rdSouth(rdProc29South),
+	.emptySouth(emptyProc29South),
+	.dataInSouth(dataInProc29South),
+	.wrWest(wrProc29West),
+	.fullWest(fullProc29West),
+	.dataOutWest(dataOutProc29West));
+
+//PROCESSOR 30
+system proc30(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe30),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe30),
+	.wrNorth(wrProc30North),
+	.fullNorth(fullProc30North),
+	.dataOutNorth(dataOutProc30North),
+	.rdSouth(rdProc30South),
+	.emptySouth(emptyProc30South),
+	.dataInSouth(dataInProc30South));
+
+//PROCESSOR 31
+system proc31(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe31),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe31),
+	.rdNorth(rdProc31North),
+	.emptyNorth(emptyProc31North),
+	.dataInNorth(dataInProc31North),
+	.wrNorth(wrProc31North),
+	.fullNorth(fullProc31North),
+	.dataOutNorth(dataOutProc31North));
+
+//PROCESSOR 32
+system proc32(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe32),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe32),
+	.rdNorth(rdProc32North),
+	.emptyNorth(emptyProc32North),
+	.dataInNorth(dataInProc32North),
+	.wrNorth(wrProc32North),
+	.fullNorth(fullProc32North),
+	.dataOutNorth(dataOutProc32North));
+
+//PROCESSOR 33
+system proc33(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe33),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe33),
+	.wrNorth(wrProc33North),
+	.fullNorth(fullProc33North),
+	.dataOutNorth(dataOutProc33North),
+	.rdSouth(rdProc33South),
+	.emptySouth(emptyProc33South),
+	.dataInSouth(dataInProc33South),
+	.wrSouth(wrProc33South),
+	.fullSouth(fullProc33South),
+	.dataOutSouth(dataOutProc33South),
+	.rdEast(rdProc33East),
+	.emptyEast(emptyProc33East),
+	.dataInEast(dataInProc33East));
+
+//PROCESSOR 34
+system proc34(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe34),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe34),
+	.rdNorth(rdProc34North),
+	.emptyNorth(emptyProc34North),
+	.dataInNorth(dataInProc34North),
+	.wrWest(wrProc34West),
+	.fullWest(fullProc34West),
+	.dataOutWest(dataOutProc34West));
+
+//PROCESSOR 35
+system proc35(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe35),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe35),
+	.rdNorth(rdProc35North),
+	.emptyNorth(emptyProc35North),
+	.dataInNorth(dataInProc35North),
+	.wrNorth(wrProc35North),
+	.fullNorth(fullProc35North),
+	.dataOutNorth(dataOutProc35North),
+	.rdSouth(rdProc35South),
+	.emptySouth(emptyProc35South),
+	.dataInSouth(dataInProc35South),
+	.wrEast(wrProc35East),
+	.fullEast(fullProc35East),
+	.dataOutEast(dataOutProc35East));
+
+//PROCESSOR 36
+system proc36(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe36),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe36),
+	.rdNorth(rdProc36North),
+	.emptyNorth(emptyProc36North),
+	.dataInNorth(dataInProc36North),
+	.wrSouth(wrProc36South),
+	.fullSouth(fullProc36South),
+	.dataOutSouth(dataOutProc36South),
+	.wrEast(wrProc36East),
+	.fullEast(fullProc36East),
+	.dataOutEast(dataOutProc36East),
+	.rdWest(rdProc36West),
+	.emptyWest(emptyProc36West),
+	.dataInWest(dataInProc36West));
+
+//PROCESSOR 37
+system proc37(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe37),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe37),
+	.rdNorth(rdProc37North),
+	.emptyNorth(emptyProc37North),
+	.dataInNorth(dataInProc37North),
+	.wrSouth(wrProc37South),
+	.fullSouth(fullProc37South),
+	.dataOutSouth(dataOutProc37South),
+	.rdWest(rdProc37West),
+	.emptyWest(emptyProc37West),
+	.dataInWest(dataInProc37West));
+
+//PROCESSOR 38
+system proc38(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe38),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe38),
+	.rdNorth(rdProc38North),
+	.emptyNorth(emptyProc38North),
+	.dataInNorth(dataInProc38North),
+	.rdSouth(rdProc38South),
+	.emptySouth(emptyProc38South),
+	.dataInSouth(dataInProc38South),
+	.wrSouth(wrProc38South),
+	.fullSouth(fullProc38South),
+	.dataOutSouth(dataOutProc38South),
+	.wrEast(wrProc38East),
+	.fullEast(fullProc38East),
+	.dataOutEast(dataOutProc38East));
+
+//PROCESSOR 39
+system proc39(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe39),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe39),
+	.wrNorth(wrProc39North),
+	.fullNorth(fullProc39North),
+	.dataOutNorth(dataOutProc39North),
+	.rdSouth(rdProc39South),
+	.emptySouth(emptyProc39South),
+	.dataInSouth(dataInProc39South),
+	.rdWest(rdProc39West),
+	.emptyWest(emptyProc39West),
+	.dataInWest(dataInProc39West));
+
+//PROCESSOR 40
+system proc40(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe40),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe40),
+	.wrNorth(wrProc40North),
+	.fullNorth(fullProc40North),
+	.dataOutNorth(dataOutProc40North),
+	.rdSouth(rdProc40South),
+	.emptySouth(emptyProc40South),
+	.dataInSouth(dataInProc40South),
+	.wrSouth(wrProc40South),
+	.fullSouth(fullProc40South),
+	.dataOutSouth(dataOutProc40South),
+	.rdEast(rdProc40East),
+	.emptyEast(emptyProc40East),
+	.dataInEast(dataInProc40East));
+
+//PROCESSOR 41
+system proc41(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe41),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe41),
+	.rdEast(rdProc41East),
+	.emptyEast(emptyProc41East),
+	.dataInEast(dataInProc41East),
+	.wrWest(wrProc41West),
+	.fullWest(fullProc41West),
+	.dataOutWest(dataOutProc41West));
+
+//PROCESSOR 42
+system proc42(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe42),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe42),
+	.rdSouth(rdProc42South),
+	.emptySouth(emptyProc42South),
+	.dataInSouth(dataInProc42South),
+	.rdEast(rdProc42East),
+	.emptyEast(emptyProc42East),
+	.dataInEast(dataInProc42East),
+	.wrEast(wrProc42East),
+	.fullEast(fullProc42East),
+	.dataOutEast(dataOutProc42East),
+	.wrWest(wrProc42West),
+	.fullWest(fullProc42West),
+	.dataOutWest(dataOutProc42West));
+
+//PROCESSOR 43
+system proc43(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe43),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe43),
+	.rdNorth(rdProc43North),
+	.emptyNorth(emptyProc43North),
+	.dataInNorth(dataInProc43North),
+	.wrNorth(wrProc43North),
+	.fullNorth(fullProc43North),
+	.dataOutNorth(dataOutProc43North),
+	.rdSouth(rdProc43South),
+	.emptySouth(emptyProc43South),
+	.dataInSouth(dataInProc43South),
+	.wrSouth(wrProc43South),
+	.fullSouth(fullProc43South),
+	.dataOutSouth(dataOutProc43South),
+	.wrEast(wrProc43East),
+	.fullEast(fullProc43East),
+	.dataOutEast(dataOutProc43East),
+	.rdWest(rdProc43West),
+	.emptyWest(emptyProc43West),
+	.dataInWest(dataInProc43West),
+	.wrWest(wrProc43West),
+	.fullWest(fullProc43West),
+	.dataOutWest(dataOutProc43West));
+
+//PROCESSOR 44
+system proc44(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe44),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe44),
+	.wrEast(wrProc44East),
+	.fullEast(fullProc44East),
+	.dataOutEast(dataOutProc44East),
+	.rdWest(rdProc44West),
+	.emptyWest(emptyProc44West),
+	.dataInWest(dataInProc44West));
+
+//PROCESSOR 45
+system proc45(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe45),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe45),
+	.wrNorth(wrProc45North),
+	.fullNorth(fullProc45North),
+	.dataOutNorth(dataOutProc45North),
+	.wrSouth(wrProc45South),
+	.fullSouth(fullProc45South),
+	.dataOutSouth(dataOutProc45South),
+	.rdEast(rdProc45East),
+	.emptyEast(emptyProc45East),
+	.dataInEast(dataInProc45East),
+	.rdWest(rdProc45West),
+	.emptyWest(emptyProc45West),
+	.dataInWest(dataInProc45West));
+
+//PROCESSOR 46
+system proc46(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe46),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe46),
+	.rdNorth(rdProc46North),
+	.emptyNorth(emptyProc46North),
+	.dataInNorth(dataInProc46North),
+	.wrSouth(wrProc46South),
+	.fullSouth(fullProc46South),
+	.dataOutSouth(dataOutProc46South),
+	.rdEast(rdProc46East),
+	.emptyEast(emptyProc46East),
+	.dataInEast(dataInProc46East),
+	.wrWest(wrProc46West),
+	.fullWest(fullProc46West),
+	.dataOutWest(dataOutProc46West));
+
+//PROCESSOR 47
+system proc47(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe47),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe47),
+	.rdNorth(rdProc47North),
+	.emptyNorth(emptyProc47North),
+	.dataInNorth(dataInProc47North),
+	.wrSouth(wrProc47South),
+	.fullSouth(fullProc47South),
+	.dataOutSouth(dataOutProc47South),
+	.wrWest(wrProc47West),
+	.fullWest(fullProc47West),
+	.dataOutWest(dataOutProc47West));
+
+//PROCESSOR 48
+system proc48(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe48),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe48),
+	.rdNorth(rdProc48North),
+	.emptyNorth(emptyProc48North),
+	.dataInNorth(dataInProc48North),
+	.wrNorth(wrProc48North),
+	.fullNorth(fullProc48North),
+	.dataOutNorth(dataOutProc48North),
+	.rdSouth(rdProc48South),
+	.emptySouth(emptyProc48South),
+	.dataInSouth(dataInProc48South),
+	.wrSouth(wrProc48South),
+	.fullSouth(fullProc48South),
+	.dataOutSouth(dataOutProc48South));
+
+//PROCESSOR 49
+system proc49(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe49),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe49),
+	.wrNorth(wrProc49North),
+	.fullNorth(fullProc49North),
+	.dataOutNorth(dataOutProc49North),
+	.rdSouth(rdProc49South),
+	.emptySouth(emptyProc49South),
+	.dataInSouth(dataInProc49South));
+
+//PROCESSOR 50
+system proc50(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe50),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe50),
+	.rdNorth(rdProc50North),
+	.emptyNorth(emptyProc50North),
+	.dataInNorth(dataInProc50North),
+	.wrNorth(wrProc50North),
+	.fullNorth(fullProc50North),
+	.dataOutNorth(dataOutProc50North),
+	.rdEast(rdProc50East),
+	.emptyEast(emptyProc50East),
+	.dataInEast(dataInProc50East),
+	.wrEast(wrProc50East),
+	.fullEast(fullProc50East),
+	.dataOutEast(dataOutProc50East));
+
+//PROCESSOR 51
+system proc51(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe51),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe51),
+	.rdEast(rdProc51East),
+	.emptyEast(emptyProc51East),
+	.dataInEast(dataInProc51East),
+	.wrEast(wrProc51East),
+	.fullEast(fullProc51East),
+	.dataOutEast(dataOutProc51East),
+	.rdWest(rdProc51West),
+	.emptyWest(emptyProc51West),
+	.dataInWest(dataInProc51West),
+	.wrWest(wrProc51West),
+	.fullWest(fullProc51West),
+	.dataOutWest(dataOutProc51West));
+
+//PROCESSOR 52
+system proc52(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe52),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe52),
+	.wrNorth(wrProc52North),
+	.fullNorth(fullProc52North),
+	.dataOutNorth(dataOutProc52North),
+	.rdSouth(rdProc52South),
+	.emptySouth(emptyProc52South),
+	.dataInSouth(dataInProc52South),
+	.wrSouth(wrProc52South),
+	.fullSouth(fullProc52South),
+	.dataOutSouth(dataOutProc52South),
+	.rdEast(rdProc52East),
+	.emptyEast(emptyProc52East),
+	.dataInEast(dataInProc52East),
+	.wrEast(wrProc52East),
+	.fullEast(fullProc52East),
+	.dataOutEast(dataOutProc52East),
+	.rdWest(rdProc52West),
+	.emptyWest(emptyProc52West),
+	.dataInWest(dataInProc52West),
+	.wrWest(wrProc52West),
+	.fullWest(fullProc52West),
+	.dataOutWest(dataOutProc52West));
+
+//PROCESSOR 53
+system proc53(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe53),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe53),
+	.rdNorth(rdProc53North),
+	.emptyNorth(emptyProc53North),
+	.dataInNorth(dataInProc53North),
+	.wrNorth(wrProc53North),
+	.fullNorth(fullProc53North),
+	.dataOutNorth(dataOutProc53North),
+	.rdSouth(rdProc53South),
+	.emptySouth(emptyProc53South),
+	.dataInSouth(dataInProc53South),
+	.wrSouth(wrProc53South),
+	.fullSouth(fullProc53South),
+	.dataOutSouth(dataOutProc53South),
+	.rdEast(rdProc53East),
+	.emptyEast(emptyProc53East),
+	.dataInEast(dataInProc53East),
+	.rdWest(rdProc53West),
+	.emptyWest(emptyProc53West),
+	.dataInWest(dataInProc53West),
+	.wrWest(wrProc53West),
+	.fullWest(fullProc53West),
+	.dataOutWest(dataOutProc53West));
+
+//PROCESSOR 54
+system proc54(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe54),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe54),
+	.rdEast(rdProc54East),
+	.emptyEast(emptyProc54East),
+	.dataInEast(dataInProc54East),
+	.wrWest(wrProc54West),
+	.fullWest(fullProc54West),
+	.dataOutWest(dataOutProc54West));
+
+//PROCESSOR 55
+system proc55(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe55),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe55),
+	.rdNorth(rdProc55North),
+	.emptyNorth(emptyProc55North),
+	.dataInNorth(dataInProc55North),
+	.rdEast(rdProc55East),
+	.emptyEast(emptyProc55East),
+	.dataInEast(dataInProc55East),
+	.wrWest(wrProc55West),
+	.fullWest(fullProc55West),
+	.dataOutWest(dataOutProc55West));
+
+//PROCESSOR 56
+system proc56(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe56),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe56),
+	.rdNorth(rdProc56North),
+	.emptyNorth(emptyProc56North),
+	.dataInNorth(dataInProc56North),
+	.rdEast(rdProc56East),
+	.emptyEast(emptyProc56East),
+	.dataInEast(dataInProc56East),
+	.wrEast(wrProc56East),
+	.fullEast(fullProc56East),
+	.dataOutEast(dataOutProc56East),
+	.wrWest(wrProc56West),
+	.fullWest(fullProc56West),
+	.dataOutWest(dataOutProc56West));
+
+//PROCESSOR 57
+system proc57(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe57),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe57),
+	.rdNorth(rdProc57North),
+	.emptyNorth(emptyProc57North),
+	.dataInNorth(dataInProc57North),
+	.wrSouth(wrProc57South),
+	.fullSouth(fullProc57South),
+	.dataOutSouth(dataOutProc57South),
+	.rdWest(rdProc57West),
+	.emptyWest(emptyProc57West),
+	.dataInWest(dataInProc57West),
+	.wrWest(wrProc57West),
+	.fullWest(fullProc57West),
+	.dataOutWest(dataOutProc57West));
+
+//PROCESSOR 58
+system proc58(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe58),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe58),
+	.rdNorth(rdProc58North),
+	.emptyNorth(emptyProc58North),
+	.dataInNorth(dataInProc58North),
+	.wrNorth(wrProc58North),
+	.fullNorth(fullProc58North),
+	.dataOutNorth(dataOutProc58North),
+	.wrSouth(wrProc58South),
+	.fullSouth(fullProc58South),
+	.dataOutSouth(dataOutProc58South),
+	.rdEast(rdProc58East),
+	.emptyEast(emptyProc58East),
+	.dataInEast(dataInProc58East));
+
+//PROCESSOR 59
+system proc59(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe59),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe59),
+	.wrNorth(wrProc59North),
+	.fullNorth(fullProc59North),
+	.dataOutNorth(dataOutProc59North),
+	.rdSouth(rdProc59South),
+	.emptySouth(emptyProc59South),
+	.dataInSouth(dataInProc59South),
+	.wrWest(wrProc59West),
+	.fullWest(fullProc59West),
+	.dataOutWest(dataOutProc59West));
+
+//PROCESSOR 60
+system proc60(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe60),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe60),
+	.wrSouth(wrProc60South),
+	.fullSouth(fullProc60South),
+	.dataOutSouth(dataOutProc60South),
+	.rdEast(rdProc60East),
+	.emptyEast(emptyProc60East),
+	.dataInEast(dataInProc60East));
+
+//PROCESSOR 61
+system proc61(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe61),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe61),
+	.rdSouth(rdProc61South),
+	.emptySouth(emptyProc61South),
+	.dataInSouth(dataInProc61South),
+	.wrEast(wrProc61East),
+	.fullEast(fullProc61East),
+	.dataOutEast(dataOutProc61East),
+	.wrWest(wrProc61West),
+	.fullWest(fullProc61West),
+	.dataOutWest(dataOutProc61West));
+
+//PROCESSOR 62
+system proc62(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe62),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe62),
+	.rdNorth(rdProc62North),
+	.emptyNorth(emptyProc62North),
+	.dataInNorth(dataInProc62North),
+	.wrNorth(wrProc62North),
+	.fullNorth(fullProc62North),
+	.dataOutNorth(dataOutProc62North),
+	.rdSouth(rdProc62South),
+	.emptySouth(emptyProc62South),
+	.dataInSouth(dataInProc62South),
+	.wrSouth(wrProc62South),
+	.fullSouth(fullProc62South),
+	.dataOutSouth(dataOutProc62South),
+	.wrEast(wrProc62East),
+	.fullEast(fullProc62East),
+	.dataOutEast(dataOutProc62East),
+	.rdWest(rdProc62West),
+	.emptyWest(emptyProc62West),
+	.dataInWest(dataInProc62West));
+
+//PROCESSOR 63
+system proc63(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe63),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe63),
+	.rdNorth(rdProc63North),
+	.emptyNorth(emptyProc63North),
+	.dataInNorth(dataInProc63North),
+	.wrNorth(wrProc63North),
+	.fullNorth(fullProc63North),
+	.dataOutNorth(dataOutProc63North),
+	.rdSouth(rdProc63South),
+	.emptySouth(emptyProc63South),
+	.dataInSouth(dataInProc63South),
+	.wrSouth(wrProc63South),
+	.fullSouth(fullProc63South),
+	.dataOutSouth(dataOutProc63South),
+	.wrEast(wrProc63East),
+	.fullEast(fullProc63East),
+	.dataOutEast(dataOutProc63East),
+	.rdWest(rdProc63West),
+	.emptyWest(emptyProc63West),
+	.dataInWest(dataInProc63West));
+
+//PROCESSOR 64
+system proc64(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe64),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe64),
+	.wrSouth(wrProc64South),
+	.fullSouth(fullProc64South),
+	.dataOutSouth(dataOutProc64South),
+	.rdEast(rdProc64East),
+	.emptyEast(emptyProc64East),
+	.dataInEast(dataInProc64East),
+	.wrEast(wrProc64East),
+	.fullEast(fullProc64East),
+	.dataOutEast(dataOutProc64East),
+	.rdWest(rdProc64West),
+	.emptyWest(emptyProc64West),
+	.dataInWest(dataInProc64West));
+
+//PROCESSOR 65
+system proc65(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe65),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe65),
+	.rdWest(rdProc65West),
+	.emptyWest(emptyProc65West),
+	.dataInWest(dataInProc65West),
+	.wrWest(wrProc65West),
+	.fullWest(fullProc65West),
+	.dataOutWest(dataOutProc65West));
+
+//PROCESSOR 66
+system proc66(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe66),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe66),
+	.rdSouth(rdProc66South),
+	.emptySouth(emptyProc66South),
+	.dataInSouth(dataInProc66South),
+	.wrEast(wrProc66East),
+	.fullEast(fullProc66East),
+	.dataOutEast(dataOutProc66East));
+
+//PROCESSOR 67
+system proc67(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe67),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe67),
+	.rdNorth(rdProc67North),
+	.emptyNorth(emptyProc67North),
+	.dataInNorth(dataInProc67North),
+	.wrSouth(wrProc67South),
+	.fullSouth(fullProc67South),
+	.dataOutSouth(dataOutProc67South),
+	.wrEast(wrProc67East),
+	.fullEast(fullProc67East),
+	.dataOutEast(dataOutProc67East),
+	.rdWest(rdProc67West),
+	.emptyWest(emptyProc67West),
+	.dataInWest(dataInProc67West));
+
+//PROCESSOR 68
+system proc68(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe68),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe68),
+	.rdNorth(rdProc68North),
+	.emptyNorth(emptyProc68North),
+	.dataInNorth(dataInProc68North),
+	.wrSouth(wrProc68South),
+	.fullSouth(fullProc68South),
+	.dataOutSouth(dataOutProc68South),
+	.wrEast(wrProc68East),
+	.fullEast(fullProc68East),
+	.dataOutEast(dataOutProc68East),
+	.rdWest(rdProc68West),
+	.emptyWest(emptyProc68West),
+	.dataInWest(dataInProc68West));
+
+//PROCESSOR 69
+system proc69(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe69),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe69),
+	.wrNorth(wrProc69North),
+	.fullNorth(fullProc69North),
+	.dataOutNorth(dataOutProc69North),
+	.rdSouth(rdProc69South),
+	.emptySouth(emptyProc69South),
+	.dataInSouth(dataInProc69South),
+	.rdWest(rdProc69West),
+	.emptyWest(emptyProc69West),
+	.dataInWest(dataInProc69West));
+
+//PROCESSOR 70
+system proc70(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe70),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe70),
+	.rdNorth(rdProc70North),
+	.emptyNorth(emptyProc70North),
+	.dataInNorth(dataInProc70North),
+	.wrSouth(wrProc70South),
+	.fullSouth(fullProc70South),
+	.dataOutSouth(dataOutProc70South));
+
+//PROCESSOR 71
+system proc71(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe71),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe71),
+	.wrNorth(wrProc71North),
+	.fullNorth(fullProc71North),
+	.dataOutNorth(dataOutProc71North),
+	.rdSouth(rdProc71South),
+	.emptySouth(emptyProc71South),
+	.dataInSouth(dataInProc71South));
+
+//PROCESSOR 72
+system proc72(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe72),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe72),
+	.rdNorth(rdProc72North),
+	.emptyNorth(emptyProc72North),
+	.dataInNorth(dataInProc72North),
+	.wrNorth(wrProc72North),
+	.fullNorth(fullProc72North),
+	.dataOutNorth(dataOutProc72North),
+	.rdEast(rdProc72East),
+	.emptyEast(emptyProc72East),
+	.dataInEast(dataInProc72East),
+	.wrEast(wrProc72East),
+	.fullEast(fullProc72East),
+	.dataOutEast(dataOutProc72East));
+
+//PROCESSOR 73
+system proc73(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe73),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe73),
+	.rdNorth(rdProc73North),
+	.emptyNorth(emptyProc73North),
+	.dataInNorth(dataInProc73North),
+	.wrNorth(wrProc73North),
+	.fullNorth(fullProc73North),
+	.dataOutNorth(dataOutProc73North),
+	.wrSouth(wrProc73South),
+	.fullSouth(fullProc73South),
+	.dataOutSouth(dataOutProc73South),
+	.rdEast(rdProc73East),
+	.emptyEast(emptyProc73East),
+	.dataInEast(dataInProc73East),
+	.rdWest(rdProc73West),
+	.emptyWest(emptyProc73West),
+	.dataInWest(dataInProc73West),
+	.wrWest(wrProc73West),
+	.fullWest(fullProc73West),
+	.dataOutWest(dataOutProc73West));
+
+//PROCESSOR 74
+system proc74(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe74),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe74),
+	.rdNorth(rdProc74North),
+	.emptyNorth(emptyProc74North),
+	.dataInNorth(dataInProc74North),
+	.rdSouth(rdProc74South),
+	.emptySouth(emptyProc74South),
+	.dataInSouth(dataInProc74South),
+	.wrSouth(wrProc74South),
+	.fullSouth(fullProc74South),
+	.dataOutSouth(dataOutProc74South),
+	.rdEast(rdProc74East),
+	.emptyEast(emptyProc74East),
+	.dataInEast(dataInProc74East),
+	.wrEast(wrProc74East),
+	.fullEast(fullProc74East),
+	.dataOutEast(dataOutProc74East),
+	.wrWest(wrProc74West),
+	.fullWest(fullProc74West),
+	.dataOutWest(dataOutProc74West));
+
+//PROCESSOR 75
+system proc75(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe75),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe75),
+	.rdEast(rdProc75East),
+	.emptyEast(emptyProc75East),
+	.dataInEast(dataInProc75East),
+	.wrEast(wrProc75East),
+	.fullEast(fullProc75East),
+	.dataOutEast(dataOutProc75East),
+	.rdWest(rdProc75West),
+	.emptyWest(emptyProc75West),
+	.dataInWest(dataInProc75West),
+	.wrWest(wrProc75West),
+	.fullWest(fullProc75West),
+	.dataOutWest(dataOutProc75West));
+
+//PROCESSOR 76
+system proc76(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe76),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe76),
+	.wrNorth(wrProc76North),
+	.fullNorth(fullProc76North),
+	.dataOutNorth(dataOutProc76North),
+	.rdSouth(rdProc76South),
+	.emptySouth(emptyProc76South),
+	.dataInSouth(dataInProc76South),
+	.rdWest(rdProc76West),
+	.emptyWest(emptyProc76West),
+	.dataInWest(dataInProc76West),
+	.wrWest(wrProc76West),
+	.fullWest(fullProc76West),
+	.dataOutWest(dataOutProc76West));
+
+//PROCESSOR 77
+system proc77(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe77),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe77),
+	.rdNorth(rdProc77North),
+	.emptyNorth(emptyProc77North),
+	.dataInNorth(dataInProc77North),
+	.wrSouth(wrProc77South),
+	.fullSouth(fullProc77South),
+	.dataOutSouth(dataOutProc77South),
+	.rdEast(rdProc77East),
+	.emptyEast(emptyProc77East),
+	.dataInEast(dataInProc77East));
+
+//PROCESSOR 78
+system proc78(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe78),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe78),
+	.rdNorth(rdProc78North),
+	.emptyNorth(emptyProc78North),
+	.dataInNorth(dataInProc78North),
+	.wrWest(wrProc78West),
+	.fullWest(fullProc78West),
+	.dataOutWest(dataOutProc78West));
+
+//PROCESSOR 79
+system proc79(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe79),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe79),
+	.wrNorth(wrProc79North),
+	.fullNorth(fullProc79North),
+	.dataOutNorth(dataOutProc79North),
+	.rdSouth(rdProc79South),
+	.emptySouth(emptyProc79South),
+	.dataInSouth(dataInProc79South));
+
+//PROCESSOR 80
+system proc80(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe80),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe80),
+	.rdNorth(rdProc80North),
+	.emptyNorth(emptyProc80North),
+	.dataInNorth(dataInProc80North),
+	.wrEast(wrProc80East),
+	.fullEast(fullProc80East),
+	.dataOutEast(dataOutProc80East));
+
+//PROCESSOR 81
+system proc81(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe81),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe81),
+	.wrNorth(wrProc81North),
+	.fullNorth(fullProc81North),
+	.dataOutNorth(dataOutProc81North),
+	.rdEast(rdProc81East),
+	.emptyEast(emptyProc81East),
+	.dataInEast(dataInProc81East),
+	.wrEast(wrProc81East),
+	.fullEast(fullProc81East),
+	.dataOutEast(dataOutProc81East),
+	.rdWest(rdProc81West),
+	.emptyWest(emptyProc81West),
+	.dataInWest(dataInProc81West));
+
+//PROCESSOR 82
+system proc82(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe82),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe82),
+	.rdEast(rdProc82East),
+	.emptyEast(emptyProc82East),
+	.dataInEast(dataInProc82East),
+	.wrEast(wrProc82East),
+	.fullEast(fullProc82East),
+	.dataOutEast(dataOutProc82East),
+	.rdWest(rdProc82West),
+	.emptyWest(emptyProc82West),
+	.dataInWest(dataInProc82West),
+	.wrWest(wrProc82West),
+	.fullWest(fullProc82West),
+	.dataOutWest(dataOutProc82West));
+
+//PROCESSOR 83
+system proc83(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe83),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe83),
+	.rdNorth(rdProc83North),
+	.emptyNorth(emptyProc83North),
+	.dataInNorth(dataInProc83North),
+	.rdEast(rdProc83East),
+	.emptyEast(emptyProc83East),
+	.dataInEast(dataInProc83East),
+	.wrEast(wrProc83East),
+	.fullEast(fullProc83East),
+	.dataOutEast(dataOutProc83East),
+	.rdWest(rdProc83West),
+	.emptyWest(emptyProc83West),
+	.dataInWest(dataInProc83West),
+	.wrWest(wrProc83West),
+	.fullWest(fullProc83West),
+	.dataOutWest(dataOutProc83West));
+
+//PROCESSOR 84
+system proc84(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe84),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe84),
+	.rdNorth(rdProc84North),
+	.emptyNorth(emptyProc84North),
+	.dataInNorth(dataInProc84North),
+	.wrNorth(wrProc84North),
+	.fullNorth(fullProc84North),
+	.dataOutNorth(dataOutProc84North),
+	.rdEast(rdProc84East),
+	.emptyEast(emptyProc84East),
+	.dataInEast(dataInProc84East),
+	.wrEast(wrProc84East),
+	.fullEast(fullProc84East),
+	.dataOutEast(dataOutProc84East),
+	.rdWest(rdProc84West),
+	.emptyWest(emptyProc84West),
+	.dataInWest(dataInProc84West),
+	.wrWest(wrProc84West),
+	.fullWest(fullProc84West),
+	.dataOutWest(dataOutProc84West));
+
+//PROCESSOR 85
+system proc85(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe85),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe85),
+	.rdWest(rdProc85West),
+	.emptyWest(emptyProc85West),
+	.dataInWest(dataInProc85West),
+	.wrWest(wrProc85West),
+	.fullWest(fullProc85West),
+	.dataOutWest(dataOutProc85West));
+
+//PROCESSOR 86
+system proc86(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe86),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe86),
+	.wrNorth(wrProc86North),
+	.fullNorth(fullProc86North),
+	.dataOutNorth(dataOutProc86North),
+	.rdEast(rdProc86East),
+	.emptyEast(emptyProc86East),
+	.dataInEast(dataInProc86East));
+
+//PROCESSOR 87
+system proc87(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe87),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe87),
+	.rdNorth(rdProc87North),
+	.emptyNorth(emptyProc87North),
+	.dataInNorth(dataInProc87North),
+	.wrEast(wrProc87East),
+	.fullEast(fullProc87East),
+	.dataOutEast(dataOutProc87East),
+	.wrWest(wrProc87West),
+	.fullWest(fullProc87West),
+	.dataOutWest(dataOutProc87West));
+
+//PROCESSOR 88
+system proc88(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe88),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe88),
+	.wrEast(wrProc88East),
+	.fullEast(fullProc88East),
+	.dataOutEast(dataOutProc88East),
+	.rdWest(rdProc88West),
+	.emptyWest(emptyProc88West),
+	.dataInWest(dataInProc88West));
+
+//PROCESSOR 89
+system proc89(.clk(clk),
+	.resetn (resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe89),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe89),
+	.wrNorth(wrProc89North),
+	.fullNorth(fullProc89North),
+	.dataOutNorth(dataOutProc89North),
+	.rdWest(rdProc89West),
+	.emptyWest(emptyProc89West),
+	.dataInWest(dataInProc89West));
+
+//FIFO 0 TO 10
+fifo fifo_proc0_to_proc10(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc0South),
+	.full(fullProc0South),
+	.dataIn(dataOutProc0South),
+	.rd(rdProc10North),
+	.empty(emptyProc10North),
+	.dataOut(dataInProc10North));
+
+//FIFO 0 TO 1
+fifo fifo_proc0_to_proc1(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc0East),
+	.full(fullProc0East),
+	.dataIn(dataOutProc0East),
+	.rd(rdProc1West),
+	.empty(emptyProc1West),
+	.dataOut(dataInProc1West));
+
+//FIFO 1 TO 11
+fifo fifo_proc1_to_proc11(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc1South),
+	.full(fullProc1South),
+	.dataIn(dataOutProc1South),
+	.rd(rdProc11North),
+	.empty(emptyProc11North),
+	.dataOut(dataInProc11North));
+
+//FIFO 14 TO 4
+fifo fifo_proc14_to_proc4(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc14North),
+	.full(fullProc14North),
+	.dataIn(dataOutProc14North),
+	.rd(rdProc4South),
+	.empty(emptyProc4South),
+	.dataOut(dataInProc4South));
+
+//FIFO 5 TO 4
+fifo fifo_proc5_to_proc4(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc5West),
+	.full(fullProc5West),
+	.dataIn(dataOutProc5West),
+	.rd(rdProc4East),
+	.empty(emptyProc4East),
+	.dataOut(dataInProc4East));
+
+//FIFO 4 TO 5
+fifo fifo_proc4_to_proc5(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc4East),
+	.full(fullProc4East),
+	.dataIn(dataOutProc4East),
+	.rd(rdProc5West),
+	.empty(emptyProc5West),
+	.dataOut(dataInProc5West));
+
+//FIFO 6 TO 5
+fifo fifo_proc6_to_proc5(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc6West),
+	.full(fullProc6West),
+	.dataIn(dataOutProc6West),
+	.rd(rdProc5East),
+	.empty(emptyProc5East),
+	.dataOut(dataInProc5East));
+
+//FIFO 16 TO 6
+fifo fifo_proc16_to_proc6(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc16North),
+	.full(fullProc16North),
+	.dataIn(dataOutProc16North),
+	.rd(rdProc6South),
+	.empty(emptyProc6South),
+	.dataOut(dataInProc6South));
+
+//FIFO 6 TO 16
+fifo fifo_proc6_to_proc16(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc6South),
+	.full(fullProc6South),
+	.dataIn(dataOutProc6South),
+	.rd(rdProc16North),
+	.empty(emptyProc16North),
+	.dataOut(dataInProc16North));
+
+//FIFO 7 TO 6
+fifo fifo_proc7_to_proc6(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc7West),
+	.full(fullProc7West),
+	.dataIn(dataOutProc7West),
+	.rd(rdProc6East),
+	.empty(emptyProc6East),
+	.dataOut(dataInProc6East));
+
+//FIFO 17 TO 7
+fifo fifo_proc17_to_proc7(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc17North),
+	.full(fullProc17North),
+	.dataIn(dataOutProc17North),
+	.rd(rdProc7South),
+	.empty(emptyProc7South),
+	.dataOut(dataInProc7South));
+
+//FIFO 18 TO 8
+fifo fifo_proc18_to_proc8(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc18North),
+	.full(fullProc18North),
+	.dataIn(dataOutProc18North),
+	.rd(rdProc8South),
+	.empty(emptyProc8South),
+	.dataOut(dataInProc8South));
+
+//FIFO 8 TO 18
+fifo fifo_proc8_to_proc18(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc8South),
+	.full(fullProc8South),
+	.dataIn(dataOutProc8South),
+	.rd(rdProc18North),
+	.empty(emptyProc18North),
+	.dataOut(dataInProc18North));
+
+//FIFO 9 TO 8
+fifo fifo_proc9_to_proc8(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc9West),
+	.full(fullProc9West),
+	.dataIn(dataOutProc9West),
+	.rd(rdProc8East),
+	.empty(emptyProc8East),
+	.dataOut(dataInProc8East));
+
+//FIFO 19 TO 9
+fifo fifo_proc19_to_proc9(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc19North),
+	.full(fullProc19North),
+	.dataIn(dataOutProc19North),
+	.rd(rdProc9South),
+	.empty(emptyProc9South),
+	.dataOut(dataInProc9South));
+
+//FIFO 10 TO 11
+fifo fifo_proc10_to_proc11(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc10East),
+	.full(fullProc10East),
+	.dataIn(dataOutProc10East),
+	.rd(rdProc11West),
+	.empty(emptyProc11West),
+	.dataOut(dataInProc11West));
+
+//FIFO 11 TO 21
+fifo fifo_proc11_to_proc21(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc11South),
+	.full(fullProc11South),
+	.dataIn(dataOutProc11South),
+	.rd(rdProc21North),
+	.empty(emptyProc21North),
+	.dataOut(dataInProc21North));
+
+//FIFO 22 TO 12
+fifo fifo_proc22_to_proc12(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc22North),
+	.full(fullProc22North),
+	.dataIn(dataOutProc22North),
+	.rd(rdProc12South),
+	.empty(emptyProc12South),
+	.dataOut(dataInProc12South));
+
+//FIFO 12 TO 13
+fifo fifo_proc12_to_proc13(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc12East),
+	.full(fullProc12East),
+	.dataIn(dataOutProc12East),
+	.rd(rdProc13West),
+	.empty(emptyProc13West),
+	.dataOut(dataInProc13West));
+
+//FIFO 23 TO 13
+fifo fifo_proc23_to_proc13(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc23North),
+	.full(fullProc23North),
+	.dataIn(dataOutProc23North),
+	.rd(rdProc13South),
+	.empty(emptyProc13South),
+	.dataOut(dataInProc13South));
+
+//FIFO 13 TO 14
+fifo fifo_proc13_to_proc14(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc13East),
+	.full(fullProc13East),
+	.dataIn(dataOutProc13East),
+	.rd(rdProc14West),
+	.empty(emptyProc14West),
+	.dataOut(dataInProc14West));
+
+//FIFO 24 TO 14
+fifo fifo_proc24_to_proc14(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc24North),
+	.full(fullProc24North),
+	.dataIn(dataOutProc24North),
+	.rd(rdProc14South),
+	.empty(emptyProc14South),
+	.dataOut(dataInProc14South));
+
+//FIFO 14 TO 24
+fifo fifo_proc14_to_proc24(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc14South),
+	.full(fullProc14South),
+	.dataIn(dataOutProc14South),
+	.rd(rdProc24North),
+	.empty(emptyProc24North),
+	.dataOut(dataInProc24North));
+
+//FIFO 14 TO 15
+fifo fifo_proc14_to_proc15(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc14East),
+	.full(fullProc14East),
+	.dataIn(dataOutProc14East),
+	.rd(rdProc15West),
+	.empty(emptyProc15West),
+	.dataOut(dataInProc15West));
+
+//FIFO 15 TO 16
+fifo fifo_proc15_to_proc16(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc15East),
+	.full(fullProc15East),
+	.dataIn(dataOutProc15East),
+	.rd(rdProc16West),
+	.empty(emptyProc16West),
+	.dataOut(dataInProc16West));
+
+//FIFO 16 TO 26
+fifo fifo_proc16_to_proc26(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc16South),
+	.full(fullProc16South),
+	.dataIn(dataOutProc16South),
+	.rd(rdProc26North),
+	.empty(emptyProc26North),
+	.dataOut(dataInProc26North));
+
+//FIFO 27 TO 17
+fifo fifo_proc27_to_proc17(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc27North),
+	.full(fullProc27North),
+	.dataIn(dataOutProc27North),
+	.rd(rdProc17South),
+	.empty(emptyProc17South),
+	.dataOut(dataInProc17South));
+
+//FIFO 18 TO 28
+fifo fifo_proc18_to_proc28(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc18South),
+	.full(fullProc18South),
+	.dataIn(dataOutProc18South),
+	.rd(rdProc28North),
+	.empty(emptyProc28North),
+	.dataOut(dataInProc28North));
+
+//FIFO 29 TO 19
+fifo fifo_proc29_to_proc19(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc29North),
+	.full(fullProc29North),
+	.dataIn(dataOutProc29North),
+	.rd(rdProc19South),
+	.empty(emptyProc19South),
+	.dataOut(dataInProc19South));
+
+//FIFO 19 TO 29
+fifo fifo_proc19_to_proc29(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc19South),
+	.full(fullProc19South),
+	.dataIn(dataOutProc19South),
+	.rd(rdProc29North),
+	.empty(emptyProc29North),
+	.dataOut(dataInProc29North));
+
+//FIFO 30 TO 20
+fifo fifo_proc30_to_proc20(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc30North),
+	.full(fullProc30North),
+	.dataIn(dataOutProc30North),
+	.rd(rdProc20South),
+	.empty(emptyProc20South),
+	.dataOut(dataInProc20South));
+
+//FIFO 20 TO 21
+fifo fifo_proc20_to_proc21(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc20East),
+	.full(fullProc20East),
+	.dataIn(dataOutProc20East),
+	.rd(rdProc21West),
+	.empty(emptyProc21West),
+	.dataOut(dataInProc21West));
+
+//FIFO 31 TO 21
+fifo fifo_proc31_to_proc21(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc31North),
+	.full(fullProc31North),
+	.dataIn(dataOutProc31North),
+	.rd(rdProc21South),
+	.empty(emptyProc21South),
+	.dataOut(dataInProc21South));
+
+//FIFO 21 TO 31
+fifo fifo_proc21_to_proc31(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc21South),
+	.full(fullProc21South),
+	.dataIn(dataOutProc21South),
+	.rd(rdProc31North),
+	.empty(emptyProc31North),
+	.dataOut(dataInProc31North));
+
+//FIFO 21 TO 22
+fifo fifo_proc21_to_proc22(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc21East),
+	.full(fullProc21East),
+	.dataIn(dataOutProc21East),
+	.rd(rdProc22West),
+	.empty(emptyProc22West),
+	.dataOut(dataInProc22West));
+
+//FIFO 32 TO 22
+fifo fifo_proc32_to_proc22(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc32North),
+	.full(fullProc32North),
+	.dataIn(dataOutProc32North),
+	.rd(rdProc22South),
+	.empty(emptyProc22South),
+	.dataOut(dataInProc22South));
+
+//FIFO 22 TO 32
+fifo fifo_proc22_to_proc32(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc22South),
+	.full(fullProc22South),
+	.dataIn(dataOutProc22South),
+	.rd(rdProc32North),
+	.empty(emptyProc32North),
+	.dataOut(dataInProc32North));
+
+//FIFO 23 TO 22
+fifo fifo_proc23_to_proc22(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc23West),
+	.full(fullProc23West),
+	.dataIn(dataOutProc23West),
+	.rd(rdProc22East),
+	.empty(emptyProc22East),
+	.dataOut(dataInProc22East));
+
+//FIFO 22 TO 23
+fifo fifo_proc22_to_proc23(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc22East),
+	.full(fullProc22East),
+	.dataIn(dataOutProc22East),
+	.rd(rdProc23West),
+	.empty(emptyProc23West),
+	.dataOut(dataInProc23West));
+
+//FIFO 33 TO 23
+fifo fifo_proc33_to_proc23(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc33North),
+	.full(fullProc33North),
+	.dataIn(dataOutProc33North),
+	.rd(rdProc23South),
+	.empty(emptyProc23South),
+	.dataOut(dataInProc23South));
+
+//FIFO 24 TO 23
+fifo fifo_proc24_to_proc23(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc24West),
+	.full(fullProc24West),
+	.dataIn(dataOutProc24West),
+	.rd(rdProc23East),
+	.empty(emptyProc23East),
+	.dataOut(dataInProc23East));
+
+//FIFO 23 TO 24
+fifo fifo_proc23_to_proc24(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc23East),
+	.full(fullProc23East),
+	.dataIn(dataOutProc23East),
+	.rd(rdProc24West),
+	.empty(emptyProc24West),
+	.dataOut(dataInProc24West));
+
+//FIFO 24 TO 34
+fifo fifo_proc24_to_proc34(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc24South),
+	.full(fullProc24South),
+	.dataIn(dataOutProc24South),
+	.rd(rdProc34North),
+	.empty(emptyProc34North),
+	.dataOut(dataInProc34North));
+
+//FIFO 25 TO 24
+fifo fifo_proc25_to_proc24(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc25West),
+	.full(fullProc25West),
+	.dataIn(dataOutProc25West),
+	.rd(rdProc24East),
+	.empty(emptyProc24East),
+	.dataOut(dataInProc24East));
+
+//FIFO 24 TO 25
+fifo fifo_proc24_to_proc25(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc24East),
+	.full(fullProc24East),
+	.dataIn(dataOutProc24East),
+	.rd(rdProc25West),
+	.empty(emptyProc25West),
+	.dataOut(dataInProc25West));
+
+//FIFO 35 TO 25
+fifo fifo_proc35_to_proc25(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc35North),
+	.full(fullProc35North),
+	.dataIn(dataOutProc35North),
+	.rd(rdProc25South),
+	.empty(emptyProc25South),
+	.dataOut(dataInProc25South));
+
+//FIFO 25 TO 35
+fifo fifo_proc25_to_proc35(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc25South),
+	.full(fullProc25South),
+	.dataIn(dataOutProc25South),
+	.rd(rdProc35North),
+	.empty(emptyProc35North),
+	.dataOut(dataInProc35North));
+
+//FIFO 26 TO 25
+fifo fifo_proc26_to_proc25(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc26West),
+	.full(fullProc26West),
+	.dataIn(dataOutProc26West),
+	.rd(rdProc25East),
+	.empty(emptyProc25East),
+	.dataOut(dataInProc25East));
+
+//FIFO 25 TO 26
+fifo fifo_proc25_to_proc26(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc25East),
+	.full(fullProc25East),
+	.dataIn(dataOutProc25East),
+	.rd(rdProc26West),
+	.empty(emptyProc26West),
+	.dataOut(dataInProc26West));
+
+//FIFO 26 TO 36
+fifo fifo_proc26_to_proc36(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc26South),
+	.full(fullProc26South),
+	.dataIn(dataOutProc26South),
+	.rd(rdProc36North),
+	.empty(emptyProc36North),
+	.dataOut(dataInProc36North));
+
+//FIFO 26 TO 27
+fifo fifo_proc26_to_proc27(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc26East),
+	.full(fullProc26East),
+	.dataIn(dataOutProc26East),
+	.rd(rdProc27West),
+	.empty(emptyProc27West),
+	.dataOut(dataInProc27West));
+
+//FIFO 27 TO 37
+fifo fifo_proc27_to_proc37(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc27South),
+	.full(fullProc27South),
+	.dataIn(dataOutProc27South),
+	.rd(rdProc37North),
+	.empty(emptyProc37North),
+	.dataOut(dataInProc37North));
+
+//FIFO 28 TO 27
+fifo fifo_proc28_to_proc27(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc28West),
+	.full(fullProc28West),
+	.dataIn(dataOutProc28West),
+	.rd(rdProc27East),
+	.empty(emptyProc27East),
+	.dataOut(dataInProc27East));
+
+//FIFO 27 TO 28
+fifo fifo_proc27_to_proc28(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc27East),
+	.full(fullProc27East),
+	.dataIn(dataOutProc27East),
+	.rd(rdProc28West),
+	.empty(emptyProc28West),
+	.dataOut(dataInProc28West));
+
+//FIFO 28 TO 38
+fifo fifo_proc28_to_proc38(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc28South),
+	.full(fullProc28South),
+	.dataIn(dataOutProc28South),
+	.rd(rdProc38North),
+	.empty(emptyProc38North),
+	.dataOut(dataInProc38North));
+
+//FIFO 29 TO 28
+fifo fifo_proc29_to_proc28(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc29West),
+	.full(fullProc29West),
+	.dataIn(dataOutProc29West),
+	.rd(rdProc28East),
+	.empty(emptyProc28East),
+	.dataOut(dataInProc28East));
+
+//FIFO 39 TO 29
+fifo fifo_proc39_to_proc29(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc39North),
+	.full(fullProc39North),
+	.dataIn(dataOutProc39North),
+	.rd(rdProc29South),
+	.empty(emptyProc29South),
+	.dataOut(dataInProc29South));
+
+//FIFO 40 TO 30
+fifo fifo_proc40_to_proc30(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc40North),
+	.full(fullProc40North),
+	.dataIn(dataOutProc40North),
+	.rd(rdProc30South),
+	.empty(emptyProc30South),
+	.dataOut(dataInProc30South));
+
+//FIFO 43 TO 33
+fifo fifo_proc43_to_proc33(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc43North),
+	.full(fullProc43North),
+	.dataIn(dataOutProc43North),
+	.rd(rdProc33South),
+	.empty(emptyProc33South),
+	.dataOut(dataInProc33South));
+
+//FIFO 33 TO 43
+fifo fifo_proc33_to_proc43(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc33South),
+	.full(fullProc33South),
+	.dataIn(dataOutProc33South),
+	.rd(rdProc43North),
+	.empty(emptyProc43North),
+	.dataOut(dataInProc43North));
+
+//FIFO 34 TO 33
+fifo fifo_proc34_to_proc33(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc34West),
+	.full(fullProc34West),
+	.dataIn(dataOutProc34West),
+	.rd(rdProc33East),
+	.empty(emptyProc33East),
+	.dataOut(dataInProc33East));
+
+//FIFO 45 TO 35
+fifo fifo_proc45_to_proc35(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc45North),
+	.full(fullProc45North),
+	.dataIn(dataOutProc45North),
+	.rd(rdProc35South),
+	.empty(emptyProc35South),
+	.dataOut(dataInProc35South));
+
+//FIFO 35 TO 36
+fifo fifo_proc35_to_proc36(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc35East),
+	.full(fullProc35East),
+	.dataIn(dataOutProc35East),
+	.rd(rdProc36West),
+	.empty(emptyProc36West),
+	.dataOut(dataInProc36West));
+
+//FIFO 36 TO 46
+fifo fifo_proc36_to_proc46(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc36South),
+	.full(fullProc36South),
+	.dataIn(dataOutProc36South),
+	.rd(rdProc46North),
+	.empty(emptyProc46North),
+	.dataOut(dataInProc46North));
+
+//FIFO 36 TO 37
+fifo fifo_proc36_to_proc37(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc36East),
+	.full(fullProc36East),
+	.dataIn(dataOutProc36East),
+	.rd(rdProc37West),
+	.empty(emptyProc37West),
+	.dataOut(dataInProc37West));
+
+//FIFO 37 TO 47
+fifo fifo_proc37_to_proc47(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc37South),
+	.full(fullProc37South),
+	.dataIn(dataOutProc37South),
+	.rd(rdProc47North),
+	.empty(emptyProc47North),
+	.dataOut(dataInProc47North));
+
+//FIFO 48 TO 38
+fifo fifo_proc48_to_proc38(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc48North),
+	.full(fullProc48North),
+	.dataIn(dataOutProc48North),
+	.rd(rdProc38South),
+	.empty(emptyProc38South),
+	.dataOut(dataInProc38South));
+
+//FIFO 38 TO 48
+fifo fifo_proc38_to_proc48(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc38South),
+	.full(fullProc38South),
+	.dataIn(dataOutProc38South),
+	.rd(rdProc48North),
+	.empty(emptyProc48North),
+	.dataOut(dataInProc48North));
+
+//FIFO 38 TO 39
+fifo fifo_proc38_to_proc39(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc38East),
+	.full(fullProc38East),
+	.dataIn(dataOutProc38East),
+	.rd(rdProc39West),
+	.empty(emptyProc39West),
+	.dataOut(dataInProc39West));
+
+//FIFO 49 TO 39
+fifo fifo_proc49_to_proc39(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc49North),
+	.full(fullProc49North),
+	.dataIn(dataOutProc49North),
+	.rd(rdProc39South),
+	.empty(emptyProc39South),
+	.dataOut(dataInProc39South));
+
+//FIFO 50 TO 40
+fifo fifo_proc50_to_proc40(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc50North),
+	.full(fullProc50North),
+	.dataIn(dataOutProc50North),
+	.rd(rdProc40South),
+	.empty(emptyProc40South),
+	.dataOut(dataInProc40South));
+
+//FIFO 40 TO 50
+fifo fifo_proc40_to_proc50(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc40South),
+	.full(fullProc40South),
+	.dataIn(dataOutProc40South),
+	.rd(rdProc50North),
+	.empty(emptyProc50North),
+	.dataOut(dataInProc50North));
+
+//FIFO 41 TO 40
+fifo fifo_proc41_to_proc40(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc41West),
+	.full(fullProc41West),
+	.dataIn(dataOutProc41West),
+	.rd(rdProc40East),
+	.empty(emptyProc40East),
+	.dataOut(dataInProc40East));
+
+//FIFO 42 TO 41
+fifo fifo_proc42_to_proc41(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc42West),
+	.full(fullProc42West),
+	.dataIn(dataOutProc42West),
+	.rd(rdProc41East),
+	.empty(emptyProc41East),
+	.dataOut(dataInProc41East));
+
+//FIFO 52 TO 42
+fifo fifo_proc52_to_proc42(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc52North),
+	.full(fullProc52North),
+	.dataIn(dataOutProc52North),
+	.rd(rdProc42South),
+	.empty(emptyProc42South),
+	.dataOut(dataInProc42South));
+
+//FIFO 43 TO 42
+fifo fifo_proc43_to_proc42(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc43West),
+	.full(fullProc43West),
+	.dataIn(dataOutProc43West),
+	.rd(rdProc42East),
+	.empty(emptyProc42East),
+	.dataOut(dataInProc42East));
+
+//FIFO 42 TO 43
+fifo fifo_proc42_to_proc43(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc42East),
+	.full(fullProc42East),
+	.dataIn(dataOutProc42East),
+	.rd(rdProc43West),
+	.empty(emptyProc43West),
+	.dataOut(dataInProc43West));
+
+//FIFO 53 TO 43
+fifo fifo_proc53_to_proc43(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc53North),
+	.full(fullProc53North),
+	.dataIn(dataOutProc53North),
+	.rd(rdProc43South),
+	.empty(emptyProc43South),
+	.dataOut(dataInProc43South));
+
+//FIFO 43 TO 53
+fifo fifo_proc43_to_proc53(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc43South),
+	.full(fullProc43South),
+	.dataIn(dataOutProc43South),
+	.rd(rdProc53North),
+	.empty(emptyProc53North),
+	.dataOut(dataInProc53North));
+
+//FIFO 43 TO 44
+fifo fifo_proc43_to_proc44(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc43East),
+	.full(fullProc43East),
+	.dataIn(dataOutProc43East),
+	.rd(rdProc44West),
+	.empty(emptyProc44West),
+	.dataOut(dataInProc44West));
+
+//FIFO 44 TO 45
+fifo fifo_proc44_to_proc45(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc44East),
+	.full(fullProc44East),
+	.dataIn(dataOutProc44East),
+	.rd(rdProc45West),
+	.empty(emptyProc45West),
+	.dataOut(dataInProc45West));
+
+//FIFO 45 TO 55
+fifo fifo_proc45_to_proc55(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc45South),
+	.full(fullProc45South),
+	.dataIn(dataOutProc45South),
+	.rd(rdProc55North),
+	.empty(emptyProc55North),
+	.dataOut(dataInProc55North));
+
+//FIFO 46 TO 45
+fifo fifo_proc46_to_proc45(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc46West),
+	.full(fullProc46West),
+	.dataIn(dataOutProc46West),
+	.rd(rdProc45East),
+	.empty(emptyProc45East),
+	.dataOut(dataInProc45East));
+
+//FIFO 46 TO 56
+fifo fifo_proc46_to_proc56(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc46South),
+	.full(fullProc46South),
+	.dataIn(dataOutProc46South),
+	.rd(rdProc56North),
+	.empty(emptyProc56North),
+	.dataOut(dataInProc56North));
+
+//FIFO 47 TO 46
+fifo fifo_proc47_to_proc46(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc47West),
+	.full(fullProc47West),
+	.dataIn(dataOutProc47West),
+	.rd(rdProc46East),
+	.empty(emptyProc46East),
+	.dataOut(dataInProc46East));
+
+//FIFO 47 TO 57
+fifo fifo_proc47_to_proc57(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc47South),
+	.full(fullProc47South),
+	.dataIn(dataOutProc47South),
+	.rd(rdProc57North),
+	.empty(emptyProc57North),
+	.dataOut(dataInProc57North));
+
+//FIFO 58 TO 48
+fifo fifo_proc58_to_proc48(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc58North),
+	.full(fullProc58North),
+	.dataIn(dataOutProc58North),
+	.rd(rdProc48South),
+	.empty(emptyProc48South),
+	.dataOut(dataInProc48South));
+
+//FIFO 48 TO 58
+fifo fifo_proc48_to_proc58(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc48South),
+	.full(fullProc48South),
+	.dataIn(dataOutProc48South),
+	.rd(rdProc58North),
+	.empty(emptyProc58North),
+	.dataOut(dataInProc58North));
+
+//FIFO 59 TO 49
+fifo fifo_proc59_to_proc49(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc59North),
+	.full(fullProc59North),
+	.dataIn(dataOutProc59North),
+	.rd(rdProc49South),
+	.empty(emptyProc49South),
+	.dataOut(dataInProc49South));
+
+//FIFO 51 TO 50
+fifo fifo_proc51_to_proc50(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc51West),
+	.full(fullProc51West),
+	.dataIn(dataOutProc51West),
+	.rd(rdProc50East),
+	.empty(emptyProc50East),
+	.dataOut(dataInProc50East));
+
+//FIFO 50 TO 51
+fifo fifo_proc50_to_proc51(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc50East),
+	.full(fullProc50East),
+	.dataIn(dataOutProc50East),
+	.rd(rdProc51West),
+	.empty(emptyProc51West),
+	.dataOut(dataInProc51West));
+
+//FIFO 52 TO 51
+fifo fifo_proc52_to_proc51(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc52West),
+	.full(fullProc52West),
+	.dataIn(dataOutProc52West),
+	.rd(rdProc51East),
+	.empty(emptyProc51East),
+	.dataOut(dataInProc51East));
+
+//FIFO 51 TO 52
+fifo fifo_proc51_to_proc52(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc51East),
+	.full(fullProc51East),
+	.dataIn(dataOutProc51East),
+	.rd(rdProc52West),
+	.empty(emptyProc52West),
+	.dataOut(dataInProc52West));
+
+//FIFO 62 TO 52
+fifo fifo_proc62_to_proc52(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc62North),
+	.full(fullProc62North),
+	.dataIn(dataOutProc62North),
+	.rd(rdProc52South),
+	.empty(emptyProc52South),
+	.dataOut(dataInProc52South));
+
+//FIFO 52 TO 62
+fifo fifo_proc52_to_proc62(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc52South),
+	.full(fullProc52South),
+	.dataIn(dataOutProc52South),
+	.rd(rdProc62North),
+	.empty(emptyProc62North),
+	.dataOut(dataInProc62North));
+
+//FIFO 53 TO 52
+fifo fifo_proc53_to_proc52(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc53West),
+	.full(fullProc53West),
+	.dataIn(dataOutProc53West),
+	.rd(rdProc52East),
+	.empty(emptyProc52East),
+	.dataOut(dataInProc52East));
+
+//FIFO 52 TO 53
+fifo fifo_proc52_to_proc53(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc52East),
+	.full(fullProc52East),
+	.dataIn(dataOutProc52East),
+	.rd(rdProc53West),
+	.empty(emptyProc53West),
+	.dataOut(dataInProc53West));
+
+//FIFO 63 TO 53
+fifo fifo_proc63_to_proc53(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc63North),
+	.full(fullProc63North),
+	.dataIn(dataOutProc63North),
+	.rd(rdProc53South),
+	.empty(emptyProc53South),
+	.dataOut(dataInProc53South));
+
+//FIFO 53 TO 63
+fifo fifo_proc53_to_proc63(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc53South),
+	.full(fullProc53South),
+	.dataIn(dataOutProc53South),
+	.rd(rdProc63North),
+	.empty(emptyProc63North),
+	.dataOut(dataInProc63North));
+
+//FIFO 54 TO 53
+fifo fifo_proc54_to_proc53(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc54West),
+	.full(fullProc54West),
+	.dataIn(dataOutProc54West),
+	.rd(rdProc53East),
+	.empty(emptyProc53East),
+	.dataOut(dataInProc53East));
+
+//FIFO 55 TO 54
+fifo fifo_proc55_to_proc54(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc55West),
+	.full(fullProc55West),
+	.dataIn(dataOutProc55West),
+	.rd(rdProc54East),
+	.empty(emptyProc54East),
+	.dataOut(dataInProc54East));
+
+//FIFO 56 TO 55
+fifo fifo_proc56_to_proc55(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc56West),
+	.full(fullProc56West),
+	.dataIn(dataOutProc56West),
+	.rd(rdProc55East),
+	.empty(emptyProc55East),
+	.dataOut(dataInProc55East));
+
+//FIFO 57 TO 56
+fifo fifo_proc57_to_proc56(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc57West),
+	.full(fullProc57West),
+	.dataIn(dataOutProc57West),
+	.rd(rdProc56East),
+	.empty(emptyProc56East),
+	.dataOut(dataInProc56East));
+
+//FIFO 56 TO 57
+fifo fifo_proc56_to_proc57(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc56East),
+	.full(fullProc56East),
+	.dataIn(dataOutProc56East),
+	.rd(rdProc57West),
+	.empty(emptyProc57West),
+	.dataOut(dataInProc57West));
+
+//FIFO 57 TO 67
+fifo fifo_proc57_to_proc67(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc57South),
+	.full(fullProc57South),
+	.dataIn(dataOutProc57South),
+	.rd(rdProc67North),
+	.empty(emptyProc67North),
+	.dataOut(dataInProc67North));
+
+//FIFO 58 TO 68
+fifo fifo_proc58_to_proc68(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc58South),
+	.full(fullProc58South),
+	.dataIn(dataOutProc58South),
+	.rd(rdProc68North),
+	.empty(emptyProc68North),
+	.dataOut(dataInProc68North));
+
+//FIFO 59 TO 58
+fifo fifo_proc59_to_proc58(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc59West),
+	.full(fullProc59West),
+	.dataIn(dataOutProc59West),
+	.rd(rdProc58East),
+	.empty(emptyProc58East),
+	.dataOut(dataInProc58East));
+
+//FIFO 69 TO 59
+fifo fifo_proc69_to_proc59(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc69North),
+	.full(fullProc69North),
+	.dataIn(dataOutProc69North),
+	.rd(rdProc59South),
+	.empty(emptyProc59South),
+	.dataOut(dataInProc59South));
+
+//FIFO 60 TO 70
+fifo fifo_proc60_to_proc70(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc60South),
+	.full(fullProc60South),
+	.dataIn(dataOutProc60South),
+	.rd(rdProc70North),
+	.empty(emptyProc70North),
+	.dataOut(dataInProc70North));
+
+//FIFO 61 TO 60
+fifo fifo_proc61_to_proc60(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc61West),
+	.full(fullProc61West),
+	.dataIn(dataOutProc61West),
+	.rd(rdProc60East),
+	.empty(emptyProc60East),
+	.dataOut(dataInProc60East));
+
+//FIFO 71 TO 61
+fifo fifo_proc71_to_proc61(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc71North),
+	.full(fullProc71North),
+	.dataIn(dataOutProc71North),
+	.rd(rdProc61South),
+	.empty(emptyProc61South),
+	.dataOut(dataInProc61South));
+
+//FIFO 61 TO 62
+fifo fifo_proc61_to_proc62(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc61East),
+	.full(fullProc61East),
+	.dataIn(dataOutProc61East),
+	.rd(rdProc62West),
+	.empty(emptyProc62West),
+	.dataOut(dataInProc62West));
+
+//FIFO 72 TO 62
+fifo fifo_proc72_to_proc62(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc72North),
+	.full(fullProc72North),
+	.dataIn(dataOutProc72North),
+	.rd(rdProc62South),
+	.empty(emptyProc62South),
+	.dataOut(dataInProc62South));
+
+//FIFO 62 TO 72
+fifo fifo_proc62_to_proc72(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc62South),
+	.full(fullProc62South),
+	.dataIn(dataOutProc62South),
+	.rd(rdProc72North),
+	.empty(emptyProc72North),
+	.dataOut(dataInProc72North));
+
+//FIFO 62 TO 63
+fifo fifo_proc62_to_proc63(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc62East),
+	.full(fullProc62East),
+	.dataIn(dataOutProc62East),
+	.rd(rdProc63West),
+	.empty(emptyProc63West),
+	.dataOut(dataInProc63West));
+
+//FIFO 73 TO 63
+fifo fifo_proc73_to_proc63(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc73North),
+	.full(fullProc73North),
+	.dataIn(dataOutProc73North),
+	.rd(rdProc63South),
+	.empty(emptyProc63South),
+	.dataOut(dataInProc63South));
+
+//FIFO 63 TO 73
+fifo fifo_proc63_to_proc73(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc63South),
+	.full(fullProc63South),
+	.dataIn(dataOutProc63South),
+	.rd(rdProc73North),
+	.empty(emptyProc73North),
+	.dataOut(dataInProc73North));
+
+//FIFO 63 TO 64
+fifo fifo_proc63_to_proc64(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc63East),
+	.full(fullProc63East),
+	.dataIn(dataOutProc63East),
+	.rd(rdProc64West),
+	.empty(emptyProc64West),
+	.dataOut(dataInProc64West));
+
+//FIFO 64 TO 74
+fifo fifo_proc64_to_proc74(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc64South),
+	.full(fullProc64South),
+	.dataIn(dataOutProc64South),
+	.rd(rdProc74North),
+	.empty(emptyProc74North),
+	.dataOut(dataInProc74North));
+
+//FIFO 65 TO 64
+fifo fifo_proc65_to_proc64(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc65West),
+	.full(fullProc65West),
+	.dataIn(dataOutProc65West),
+	.rd(rdProc64East),
+	.empty(emptyProc64East),
+	.dataOut(dataInProc64East));
+
+//FIFO 64 TO 65
+fifo fifo_proc64_to_proc65(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc64East),
+	.full(fullProc64East),
+	.dataIn(dataOutProc64East),
+	.rd(rdProc65West),
+	.empty(emptyProc65West),
+	.dataOut(dataInProc65West));
+
+//FIFO 76 TO 66
+fifo fifo_proc76_to_proc66(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc76North),
+	.full(fullProc76North),
+	.dataIn(dataOutProc76North),
+	.rd(rdProc66South),
+	.empty(emptyProc66South),
+	.dataOut(dataInProc66South));
+
+//FIFO 66 TO 67
+fifo fifo_proc66_to_proc67(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc66East),
+	.full(fullProc66East),
+	.dataIn(dataOutProc66East),
+	.rd(rdProc67West),
+	.empty(emptyProc67West),
+	.dataOut(dataInProc67West));
+
+//FIFO 67 TO 77
+fifo fifo_proc67_to_proc77(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc67South),
+	.full(fullProc67South),
+	.dataIn(dataOutProc67South),
+	.rd(rdProc77North),
+	.empty(emptyProc77North),
+	.dataOut(dataInProc77North));
+
+//FIFO 67 TO 68
+fifo fifo_proc67_to_proc68(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc67East),
+	.full(fullProc67East),
+	.dataIn(dataOutProc67East),
+	.rd(rdProc68West),
+	.empty(emptyProc68West),
+	.dataOut(dataInProc68West));
+
+//FIFO 68 TO 78
+fifo fifo_proc68_to_proc78(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc68South),
+	.full(fullProc68South),
+	.dataIn(dataOutProc68South),
+	.rd(rdProc78North),
+	.empty(emptyProc78North),
+	.dataOut(dataInProc78North));
+
+//FIFO 68 TO 69
+fifo fifo_proc68_to_proc69(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc68East),
+	.full(fullProc68East),
+	.dataIn(dataOutProc68East),
+	.rd(rdProc69West),
+	.empty(emptyProc69West),
+	.dataOut(dataInProc69West));
+
+//FIFO 79 TO 69
+fifo fifo_proc79_to_proc69(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc79North),
+	.full(fullProc79North),
+	.dataIn(dataOutProc79North),
+	.rd(rdProc69South),
+	.empty(emptyProc69South),
+	.dataOut(dataInProc69South));
+
+//FIFO 70 TO 80
+fifo fifo_proc70_to_proc80(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc70South),
+	.full(fullProc70South),
+	.dataIn(dataOutProc70South),
+	.rd(rdProc80North),
+	.empty(emptyProc80North),
+	.dataOut(dataInProc80North));
+
+//FIFO 81 TO 71
+fifo fifo_proc81_to_proc71(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc81North),
+	.full(fullProc81North),
+	.dataIn(dataOutProc81North),
+	.rd(rdProc71South),
+	.empty(emptyProc71South),
+	.dataOut(dataInProc71South));
+
+//FIFO 73 TO 72
+fifo fifo_proc73_to_proc72(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc73West),
+	.full(fullProc73West),
+	.dataIn(dataOutProc73West),
+	.rd(rdProc72East),
+	.empty(emptyProc72East),
+	.dataOut(dataInProc72East));
+
+//FIFO 72 TO 73
+fifo fifo_proc72_to_proc73(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc72East),
+	.full(fullProc72East),
+	.dataIn(dataOutProc72East),
+	.rd(rdProc73West),
+	.empty(emptyProc73West),
+	.dataOut(dataInProc73West));
+
+//FIFO 73 TO 83
+fifo fifo_proc73_to_proc83(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc73South),
+	.full(fullProc73South),
+	.dataIn(dataOutProc73South),
+	.rd(rdProc83North),
+	.empty(emptyProc83North),
+	.dataOut(dataInProc83North));
+
+//FIFO 74 TO 73
+fifo fifo_proc74_to_proc73(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc74West),
+	.full(fullProc74West),
+	.dataIn(dataOutProc74West),
+	.rd(rdProc73East),
+	.empty(emptyProc73East),
+	.dataOut(dataInProc73East));
+
+//FIFO 84 TO 74
+fifo fifo_proc84_to_proc74(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc84North),
+	.full(fullProc84North),
+	.dataIn(dataOutProc84North),
+	.rd(rdProc74South),
+	.empty(emptyProc74South),
+	.dataOut(dataInProc74South));
+
+//FIFO 74 TO 84
+fifo fifo_proc74_to_proc84(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc74South),
+	.full(fullProc74South),
+	.dataIn(dataOutProc74South),
+	.rd(rdProc84North),
+	.empty(emptyProc84North),
+	.dataOut(dataInProc84North));
+
+//FIFO 75 TO 74
+fifo fifo_proc75_to_proc74(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc75West),
+	.full(fullProc75West),
+	.dataIn(dataOutProc75West),
+	.rd(rdProc74East),
+	.empty(emptyProc74East),
+	.dataOut(dataInProc74East));
+
+//FIFO 74 TO 75
+fifo fifo_proc74_to_proc75(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc74East),
+	.full(fullProc74East),
+	.dataIn(dataOutProc74East),
+	.rd(rdProc75West),
+	.empty(emptyProc75West),
+	.dataOut(dataInProc75West));
+
+//FIFO 76 TO 75
+fifo fifo_proc76_to_proc75(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc76West),
+	.full(fullProc76West),
+	.dataIn(dataOutProc76West),
+	.rd(rdProc75East),
+	.empty(emptyProc75East),
+	.dataOut(dataInProc75East));
+
+//FIFO 75 TO 76
+fifo fifo_proc75_to_proc76(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc75East),
+	.full(fullProc75East),
+	.dataIn(dataOutProc75East),
+	.rd(rdProc76West),
+	.empty(emptyProc76West),
+	.dataOut(dataInProc76West));
+
+//FIFO 86 TO 76
+fifo fifo_proc86_to_proc76(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc86North),
+	.full(fullProc86North),
+	.dataIn(dataOutProc86North),
+	.rd(rdProc76South),
+	.empty(emptyProc76South),
+	.dataOut(dataInProc76South));
+
+//FIFO 77 TO 87
+fifo fifo_proc77_to_proc87(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc77South),
+	.full(fullProc77South),
+	.dataIn(dataOutProc77South),
+	.rd(rdProc87North),
+	.empty(emptyProc87North),
+	.dataOut(dataInProc87North));
+
+//FIFO 78 TO 77
+fifo fifo_proc78_to_proc77(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc78West),
+	.full(fullProc78West),
+	.dataIn(dataOutProc78West),
+	.rd(rdProc77East),
+	.empty(emptyProc77East),
+	.dataOut(dataInProc77East));
+
+//FIFO 89 TO 79
+fifo fifo_proc89_to_proc79(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc89North),
+	.full(fullProc89North),
+	.dataIn(dataOutProc89North),
+	.rd(rdProc79South),
+	.empty(emptyProc79South),
+	.dataOut(dataInProc79South));
+
+//FIFO 80 TO 81
+fifo fifo_proc80_to_proc81(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc80East),
+	.full(fullProc80East),
+	.dataIn(dataOutProc80East),
+	.rd(rdProc81West),
+	.empty(emptyProc81West),
+	.dataOut(dataInProc81West));
+
+//FIFO 82 TO 81
+fifo fifo_proc82_to_proc81(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc82West),
+	.full(fullProc82West),
+	.dataIn(dataOutProc82West),
+	.rd(rdProc81East),
+	.empty(emptyProc81East),
+	.dataOut(dataInProc81East));
+
+//FIFO 81 TO 82
+fifo fifo_proc81_to_proc82(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc81East),
+	.full(fullProc81East),
+	.dataIn(dataOutProc81East),
+	.rd(rdProc82West),
+	.empty(emptyProc82West),
+	.dataOut(dataInProc82West));
+
+//FIFO 83 TO 82
+fifo fifo_proc83_to_proc82(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc83West),
+	.full(fullProc83West),
+	.dataIn(dataOutProc83West),
+	.rd(rdProc82East),
+	.empty(emptyProc82East),
+	.dataOut(dataInProc82East));
+
+//FIFO 82 TO 83
+fifo fifo_proc82_to_proc83(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc82East),
+	.full(fullProc82East),
+	.dataIn(dataOutProc82East),
+	.rd(rdProc83West),
+	.empty(emptyProc83West),
+	.dataOut(dataInProc83West));
+
+//FIFO 84 TO 83
+fifo fifo_proc84_to_proc83(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc84West),
+	.full(fullProc84West),
+	.dataIn(dataOutProc84West),
+	.rd(rdProc83East),
+	.empty(emptyProc83East),
+	.dataOut(dataInProc83East));
+
+//FIFO 83 TO 84
+fifo fifo_proc83_to_proc84(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc83East),
+	.full(fullProc83East),
+	.dataIn(dataOutProc83East),
+	.rd(rdProc84West),
+	.empty(emptyProc84West),
+	.dataOut(dataInProc84West));
+
+//FIFO 85 TO 84
+fifo fifo_proc85_to_proc84(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc85West),
+	.full(fullProc85West),
+	.dataIn(dataOutProc85West),
+	.rd(rdProc84East),
+	.empty(emptyProc84East),
+	.dataOut(dataInProc84East));
+
+//FIFO 84 TO 85
+fifo fifo_proc84_to_proc85(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc84East),
+	.full(fullProc84East),
+	.dataIn(dataOutProc84East),
+	.rd(rdProc85West),
+	.empty(emptyProc85West),
+	.dataOut(dataInProc85West));
+
+//FIFO 87 TO 86
+fifo fifo_proc87_to_proc86(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc87West),
+	.full(fullProc87West),
+	.dataIn(dataOutProc87West),
+	.rd(rdProc86East),
+	.empty(emptyProc86East),
+	.dataOut(dataInProc86East));
+
+//FIFO 87 TO 88
+fifo fifo_proc87_to_proc88(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc87East),
+	.full(fullProc87East),
+	.dataIn(dataOutProc87East),
+	.rd(rdProc88West),
+	.empty(emptyProc88West),
+	.dataOut(dataInProc88West));
+
+//FIFO 88 TO 89
+fifo fifo_proc88_to_proc89(
+	.clk(clk),
+	.resetn(resetn),
+	.wr(wrProc88East),
+	.full(fullProc88East),
+	.dataIn(dataOutProc88East),
+	.rd(rdProc89West),
+	.empty(emptyProc89West),
+	.dataOut(dataInProc89West));
+
+	/**************** Boot loader ********************/
+	/*******Boot up each processor one by one*********/
+	always@(posedge clk)
+	begin
+	case(processor_select)
+		0: begin
+
+			boot_iwe0 = ~resetn;
+			boot_dwe0 = ~resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		1: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 = ~resetn;
+			boot_dwe1 = ~resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		2: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 = ~resetn;
+			boot_dwe2 = ~resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		3: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 = ~resetn;
+			boot_dwe3 = ~resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		4: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 = ~resetn;
+			boot_dwe4 = ~resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		5: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 = ~resetn;
+			boot_dwe5 = ~resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		6: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 = ~resetn;
+			boot_dwe6 = ~resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		7: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 = ~resetn;
+			boot_dwe7 = ~resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		8: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 = ~resetn;
+			boot_dwe8 = ~resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		9: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 = ~resetn;
+			boot_dwe9 = ~resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		10: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 = ~resetn;
+			boot_dwe10 = ~resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		11: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 = ~resetn;
+			boot_dwe11 = ~resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		12: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 = ~resetn;
+			boot_dwe12 = ~resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		13: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 = ~resetn;
+			boot_dwe13 = ~resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		14: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 = ~resetn;
+			boot_dwe14 = ~resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		15: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 = ~resetn;
+			boot_dwe15 = ~resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		16: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 = ~resetn;
+			boot_dwe16 = ~resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		17: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 = ~resetn;
+			boot_dwe17 = ~resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		18: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 = ~resetn;
+			boot_dwe18 = ~resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		19: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 = ~resetn;
+			boot_dwe19 = ~resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		20: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 = ~resetn;
+			boot_dwe20 = ~resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		21: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 = ~resetn;
+			boot_dwe21 = ~resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		22: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 = ~resetn;
+			boot_dwe22 = ~resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		23: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 = ~resetn;
+			boot_dwe23 = ~resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		24: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 = ~resetn;
+			boot_dwe24 = ~resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		25: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 = ~resetn;
+			boot_dwe25 = ~resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		26: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 = ~resetn;
+			boot_dwe26 = ~resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		27: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 = ~resetn;
+			boot_dwe27 = ~resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		28: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 = ~resetn;
+			boot_dwe28 = ~resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		29: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 = ~resetn;
+			boot_dwe29 = ~resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		30: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 = ~resetn;
+			boot_dwe30 = ~resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		31: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 = ~resetn;
+			boot_dwe31 = ~resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		32: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 = ~resetn;
+			boot_dwe32 = ~resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		33: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 = ~resetn;
+			boot_dwe33 = ~resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		34: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 = ~resetn;
+			boot_dwe34 = ~resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		35: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 = ~resetn;
+			boot_dwe35 = ~resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		36: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 = ~resetn;
+			boot_dwe36 = ~resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		37: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 = ~resetn;
+			boot_dwe37 = ~resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		38: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 = ~resetn;
+			boot_dwe38 = ~resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		39: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 = ~resetn;
+			boot_dwe39 = ~resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		40: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 = ~resetn;
+			boot_dwe40 = ~resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		41: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 = ~resetn;
+			boot_dwe41 = ~resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		42: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 = ~resetn;
+			boot_dwe42 = ~resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		43: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 = ~resetn;
+			boot_dwe43 = ~resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		44: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 = ~resetn;
+			boot_dwe44 = ~resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		45: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 = ~resetn;
+			boot_dwe45 = ~resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		46: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 = ~resetn;
+			boot_dwe46 = ~resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		47: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 = ~resetn;
+			boot_dwe47 = ~resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		48: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 = ~resetn;
+			boot_dwe48 = ~resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		49: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 = ~resetn;
+			boot_dwe49 = ~resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		50: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 = ~resetn;
+			boot_dwe50 = ~resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		51: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 = ~resetn;
+			boot_dwe51 = ~resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		52: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 = ~resetn;
+			boot_dwe52 = ~resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		53: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 = ~resetn;
+			boot_dwe53 = ~resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		54: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 = ~resetn;
+			boot_dwe54 = ~resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		55: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 = ~resetn;
+			boot_dwe55 = ~resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		56: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 = ~resetn;
+			boot_dwe56 = ~resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		57: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 = ~resetn;
+			boot_dwe57 = ~resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		58: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 = ~resetn;
+			boot_dwe58 = ~resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		59: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 = ~resetn;
+			boot_dwe59 = ~resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		60: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 = ~resetn;
+			boot_dwe60 = ~resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		61: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 = ~resetn;
+			boot_dwe61 = ~resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		62: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 = ~resetn;
+			boot_dwe62 = ~resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		63: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 = ~resetn;
+			boot_dwe63 = ~resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		64: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 = ~resetn;
+			boot_dwe64 = ~resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		65: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 = ~resetn;
+			boot_dwe65 = ~resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		66: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 = ~resetn;
+			boot_dwe66 = ~resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		67: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 = ~resetn;
+			boot_dwe67 = ~resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		68: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 = ~resetn;
+			boot_dwe68 = ~resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		69: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 = ~resetn;
+			boot_dwe69 = ~resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		70: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 = ~resetn;
+			boot_dwe70 = ~resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		71: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 = ~resetn;
+			boot_dwe71 = ~resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		72: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 = ~resetn;
+			boot_dwe72 = ~resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		73: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 = ~resetn;
+			boot_dwe73 = ~resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		74: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 = ~resetn;
+			boot_dwe74 = ~resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		75: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 = ~resetn;
+			boot_dwe75 = ~resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		76: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 = ~resetn;
+			boot_dwe76 = ~resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		77: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 = ~resetn;
+			boot_dwe77 = ~resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		78: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 = ~resetn;
+			boot_dwe78 = ~resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		79: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 = ~resetn;
+			boot_dwe79 = ~resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		80: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 = ~resetn;
+			boot_dwe80 = ~resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		81: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 = ~resetn;
+			boot_dwe81 = ~resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		82: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 = ~resetn;
+			boot_dwe82 = ~resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		83: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 = ~resetn;
+			boot_dwe83 = ~resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		84: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 = ~resetn;
+			boot_dwe84 = ~resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		85: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 = ~resetn;
+			boot_dwe85 = ~resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		86: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 = ~resetn;
+			boot_dwe86 = ~resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		87: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 = ~resetn;
+			boot_dwe87 = ~resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		88: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 = ~resetn;
+			boot_dwe88 = ~resetn;
+			boot_iwe89 =  resetn;
+			boot_dwe89 =  resetn;
+		end
+
+		89: begin
+
+			boot_iwe0 =  resetn;
+			boot_dwe0 =  resetn;
+			boot_iwe1 =  resetn;
+			boot_dwe1 =  resetn;
+			boot_iwe2 =  resetn;
+			boot_dwe2 =  resetn;
+			boot_iwe3 =  resetn;
+			boot_dwe3 =  resetn;
+			boot_iwe4 =  resetn;
+			boot_dwe4 =  resetn;
+			boot_iwe5 =  resetn;
+			boot_dwe5 =  resetn;
+			boot_iwe6 =  resetn;
+			boot_dwe6 =  resetn;
+			boot_iwe7 =  resetn;
+			boot_dwe7 =  resetn;
+			boot_iwe8 =  resetn;
+			boot_dwe8 =  resetn;
+			boot_iwe9 =  resetn;
+			boot_dwe9 =  resetn;
+			boot_iwe10 =  resetn;
+			boot_dwe10 =  resetn;
+			boot_iwe11 =  resetn;
+			boot_dwe11 =  resetn;
+			boot_iwe12 =  resetn;
+			boot_dwe12 =  resetn;
+			boot_iwe13 =  resetn;
+			boot_dwe13 =  resetn;
+			boot_iwe14 =  resetn;
+			boot_dwe14 =  resetn;
+			boot_iwe15 =  resetn;
+			boot_dwe15 =  resetn;
+			boot_iwe16 =  resetn;
+			boot_dwe16 =  resetn;
+			boot_iwe17 =  resetn;
+			boot_dwe17 =  resetn;
+			boot_iwe18 =  resetn;
+			boot_dwe18 =  resetn;
+			boot_iwe19 =  resetn;
+			boot_dwe19 =  resetn;
+			boot_iwe20 =  resetn;
+			boot_dwe20 =  resetn;
+			boot_iwe21 =  resetn;
+			boot_dwe21 =  resetn;
+			boot_iwe22 =  resetn;
+			boot_dwe22 =  resetn;
+			boot_iwe23 =  resetn;
+			boot_dwe23 =  resetn;
+			boot_iwe24 =  resetn;
+			boot_dwe24 =  resetn;
+			boot_iwe25 =  resetn;
+			boot_dwe25 =  resetn;
+			boot_iwe26 =  resetn;
+			boot_dwe26 =  resetn;
+			boot_iwe27 =  resetn;
+			boot_dwe27 =  resetn;
+			boot_iwe28 =  resetn;
+			boot_dwe28 =  resetn;
+			boot_iwe29 =  resetn;
+			boot_dwe29 =  resetn;
+			boot_iwe30 =  resetn;
+			boot_dwe30 =  resetn;
+			boot_iwe31 =  resetn;
+			boot_dwe31 =  resetn;
+			boot_iwe32 =  resetn;
+			boot_dwe32 =  resetn;
+			boot_iwe33 =  resetn;
+			boot_dwe33 =  resetn;
+			boot_iwe34 =  resetn;
+			boot_dwe34 =  resetn;
+			boot_iwe35 =  resetn;
+			boot_dwe35 =  resetn;
+			boot_iwe36 =  resetn;
+			boot_dwe36 =  resetn;
+			boot_iwe37 =  resetn;
+			boot_dwe37 =  resetn;
+			boot_iwe38 =  resetn;
+			boot_dwe38 =  resetn;
+			boot_iwe39 =  resetn;
+			boot_dwe39 =  resetn;
+			boot_iwe40 =  resetn;
+			boot_dwe40 =  resetn;
+			boot_iwe41 =  resetn;
+			boot_dwe41 =  resetn;
+			boot_iwe42 =  resetn;
+			boot_dwe42 =  resetn;
+			boot_iwe43 =  resetn;
+			boot_dwe43 =  resetn;
+			boot_iwe44 =  resetn;
+			boot_dwe44 =  resetn;
+			boot_iwe45 =  resetn;
+			boot_dwe45 =  resetn;
+			boot_iwe46 =  resetn;
+			boot_dwe46 =  resetn;
+			boot_iwe47 =  resetn;
+			boot_dwe47 =  resetn;
+			boot_iwe48 =  resetn;
+			boot_dwe48 =  resetn;
+			boot_iwe49 =  resetn;
+			boot_dwe49 =  resetn;
+			boot_iwe50 =  resetn;
+			boot_dwe50 =  resetn;
+			boot_iwe51 =  resetn;
+			boot_dwe51 =  resetn;
+			boot_iwe52 =  resetn;
+			boot_dwe52 =  resetn;
+			boot_iwe53 =  resetn;
+			boot_dwe53 =  resetn;
+			boot_iwe54 =  resetn;
+			boot_dwe54 =  resetn;
+			boot_iwe55 =  resetn;
+			boot_dwe55 =  resetn;
+			boot_iwe56 =  resetn;
+			boot_dwe56 =  resetn;
+			boot_iwe57 =  resetn;
+			boot_dwe57 =  resetn;
+			boot_iwe58 =  resetn;
+			boot_dwe58 =  resetn;
+			boot_iwe59 =  resetn;
+			boot_dwe59 =  resetn;
+			boot_iwe60 =  resetn;
+			boot_dwe60 =  resetn;
+			boot_iwe61 =  resetn;
+			boot_dwe61 =  resetn;
+			boot_iwe62 =  resetn;
+			boot_dwe62 =  resetn;
+			boot_iwe63 =  resetn;
+			boot_dwe63 =  resetn;
+			boot_iwe64 =  resetn;
+			boot_dwe64 =  resetn;
+			boot_iwe65 =  resetn;
+			boot_dwe65 =  resetn;
+			boot_iwe66 =  resetn;
+			boot_dwe66 =  resetn;
+			boot_iwe67 =  resetn;
+			boot_dwe67 =  resetn;
+			boot_iwe68 =  resetn;
+			boot_dwe68 =  resetn;
+			boot_iwe69 =  resetn;
+			boot_dwe69 =  resetn;
+			boot_iwe70 =  resetn;
+			boot_dwe70 =  resetn;
+			boot_iwe71 =  resetn;
+			boot_dwe71 =  resetn;
+			boot_iwe72 =  resetn;
+			boot_dwe72 =  resetn;
+			boot_iwe73 =  resetn;
+			boot_dwe73 =  resetn;
+			boot_iwe74 =  resetn;
+			boot_dwe74 =  resetn;
+			boot_iwe75 =  resetn;
+			boot_dwe75 =  resetn;
+			boot_iwe76 =  resetn;
+			boot_dwe76 =  resetn;
+			boot_iwe77 =  resetn;
+			boot_dwe77 =  resetn;
+			boot_iwe78 =  resetn;
+			boot_dwe78 =  resetn;
+			boot_iwe79 =  resetn;
+			boot_dwe79 =  resetn;
+			boot_iwe80 =  resetn;
+			boot_dwe80 =  resetn;
+			boot_iwe81 =  resetn;
+			boot_dwe81 =  resetn;
+			boot_iwe82 =  resetn;
+			boot_dwe82 =  resetn;
+			boot_iwe83 =  resetn;
+			boot_dwe83 =  resetn;
+			boot_iwe84 =  resetn;
+			boot_dwe84 =  resetn;
+			boot_iwe85 =  resetn;
+			boot_dwe85 =  resetn;
+			boot_iwe86 =  resetn;
+			boot_dwe86 =  resetn;
+			boot_iwe87 =  resetn;
+			boot_dwe87 =  resetn;
+			boot_iwe88 =  resetn;
+			boot_dwe88 =  resetn;
+			boot_iwe89 = ~resetn;
+			boot_dwe89 = ~resetn;
+		end
+
+		90: begin
+
+			boot_iwe0 = 0;
+			boot_dwe0 = 0;
+			boot_iwe1 = 0;
+			boot_dwe1 = 0;
+			boot_iwe2 = 0;
+			boot_dwe2 = 0;
+			boot_iwe3 = 0;
+			boot_dwe3 = 0;
+			boot_iwe4 = 0;
+			boot_dwe4 = 0;
+			boot_iwe5 = 0;
+			boot_dwe5 = 0;
+			boot_iwe6 = 0;
+			boot_dwe6 = 0;
+			boot_iwe7 = 0;
+			boot_dwe7 = 0;
+			boot_iwe8 = 0;
+			boot_dwe8 = 0;
+			boot_iwe9 = 0;
+			boot_dwe9 = 0;
+			boot_iwe10 = 0;
+			boot_dwe10 = 0;
+			boot_iwe11 = 0;
+			boot_dwe11 = 0;
+			boot_iwe12 = 0;
+			boot_dwe12 = 0;
+			boot_iwe13 = 0;
+			boot_dwe13 = 0;
+			boot_iwe14 = 0;
+			boot_dwe14 = 0;
+			boot_iwe15 = 0;
+			boot_dwe15 = 0;
+			boot_iwe16 = 0;
+			boot_dwe16 = 0;
+			boot_iwe17 = 0;
+			boot_dwe17 = 0;
+			boot_iwe18 = 0;
+			boot_dwe18 = 0;
+			boot_iwe19 = 0;
+			boot_dwe19 = 0;
+			boot_iwe20 = 0;
+			boot_dwe20 = 0;
+			boot_iwe21 = 0;
+			boot_dwe21 = 0;
+			boot_iwe22 = 0;
+			boot_dwe22 = 0;
+			boot_iwe23 = 0;
+			boot_dwe23 = 0;
+			boot_iwe24 = 0;
+			boot_dwe24 = 0;
+			boot_iwe25 = 0;
+			boot_dwe25 = 0;
+			boot_iwe26 = 0;
+			boot_dwe26 = 0;
+			boot_iwe27 = 0;
+			boot_dwe27 = 0;
+			boot_iwe28 = 0;
+			boot_dwe28 = 0;
+			boot_iwe29 = 0;
+			boot_dwe29 = 0;
+			boot_iwe30 = 0;
+			boot_dwe30 = 0;
+			boot_iwe31 = 0;
+			boot_dwe31 = 0;
+			boot_iwe32 = 0;
+			boot_dwe32 = 0;
+			boot_iwe33 = 0;
+			boot_dwe33 = 0;
+			boot_iwe34 = 0;
+			boot_dwe34 = 0;
+			boot_iwe35 = 0;
+			boot_dwe35 = 0;
+			boot_iwe36 = 0;
+			boot_dwe36 = 0;
+			boot_iwe37 = 0;
+			boot_dwe37 = 0;
+			boot_iwe38 = 0;
+			boot_dwe38 = 0;
+			boot_iwe39 = 0;
+			boot_dwe39 = 0;
+			boot_iwe40 = 0;
+			boot_dwe40 = 0;
+			boot_iwe41 = 0;
+			boot_dwe41 = 0;
+			boot_iwe42 = 0;
+			boot_dwe42 = 0;
+			boot_iwe43 = 0;
+			boot_dwe43 = 0;
+			boot_iwe44 = 0;
+			boot_dwe44 = 0;
+			boot_iwe45 = 0;
+			boot_dwe45 = 0;
+			boot_iwe46 = 0;
+			boot_dwe46 = 0;
+			boot_iwe47 = 0;
+			boot_dwe47 = 0;
+			boot_iwe48 = 0;
+			boot_dwe48 = 0;
+			boot_iwe49 = 0;
+			boot_dwe49 = 0;
+			boot_iwe50 = 0;
+			boot_dwe50 = 0;
+			boot_iwe51 = 0;
+			boot_dwe51 = 0;
+			boot_iwe52 = 0;
+			boot_dwe52 = 0;
+			boot_iwe53 = 0;
+			boot_dwe53 = 0;
+			boot_iwe54 = 0;
+			boot_dwe54 = 0;
+			boot_iwe55 = 0;
+			boot_dwe55 = 0;
+			boot_iwe56 = 0;
+			boot_dwe56 = 0;
+			boot_iwe57 = 0;
+			boot_dwe57 = 0;
+			boot_iwe58 = 0;
+			boot_dwe58 = 0;
+			boot_iwe59 = 0;
+			boot_dwe59 = 0;
+			boot_iwe60 = 0;
+			boot_dwe60 = 0;
+			boot_iwe61 = 0;
+			boot_dwe61 = 0;
+			boot_iwe62 = 0;
+			boot_dwe62 = 0;
+			boot_iwe63 = 0;
+			boot_dwe63 = 0;
+			boot_iwe64 = 0;
+			boot_dwe64 = 0;
+			boot_iwe65 = 0;
+			boot_dwe65 = 0;
+			boot_iwe66 = 0;
+			boot_dwe66 = 0;
+			boot_iwe67 = 0;
+			boot_dwe67 = 0;
+			boot_iwe68 = 0;
+			boot_dwe68 = 0;
+			boot_iwe69 = 0;
+			boot_dwe69 = 0;
+			boot_iwe70 = 0;
+			boot_dwe70 = 0;
+			boot_iwe71 = 0;
+			boot_dwe71 = 0;
+			boot_iwe72 = 0;
+			boot_dwe72 = 0;
+			boot_iwe73 = 0;
+			boot_dwe73 = 0;
+			boot_iwe74 = 0;
+			boot_dwe74 = 0;
+			boot_iwe75 = 0;
+			boot_dwe75 = 0;
+			boot_iwe76 = 0;
+			boot_dwe76 = 0;
+			boot_iwe77 = 0;
+			boot_dwe77 = 0;
+			boot_iwe78 = 0;
+			boot_dwe78 = 0;
+			boot_iwe79 = 0;
+			boot_dwe79 = 0;
+			boot_iwe80 = 0;
+			boot_dwe80 = 0;
+			boot_iwe81 = 0;
+			boot_dwe81 = 0;
+			boot_iwe82 = 0;
+			boot_dwe82 = 0;
+			boot_iwe83 = 0;
+			boot_dwe83 = 0;
+			boot_iwe84 = 0;
+			boot_dwe84 = 0;
+			boot_iwe85 = 0;
+			boot_dwe85 = 0;
+			boot_iwe86 = 0;
+			boot_dwe86 = 0;
+			boot_iwe87 = 0;
+			boot_dwe87 = 0;
+			boot_iwe88 = 0;
+			boot_dwe88 = 0;
+			boot_iwe89 = 0;
+			boot_dwe89 = 0;
+		end
+
+	endcase
+end
+endmodule//Deepak: Commeted due to error: Module cannot be declared more than once
+
+//`include "lo_reg.v"
+//`include "hi_reg.v"
+//`include "data_mem_stall.v"
+//`include "mul.v"
+//`include "shifter_perbit_pipe.v"
+//`include "logic_unit.v"
+//`include "addersub_slt.v"
+//`include "merge26lo.v"
+//`include "branchresolve.v"
+//`include "pcadder.v"
+//`include "signext16.v"
+//`include "reg_file_pipe.v"
+//`include "ifetch_pipe.v"
+//`include "components.v"
+
+/*To remove an instruction and the associated logic, comment the specific `defines*/
+/*Instruction Set and Processor Logic Optimization Block*/
+`define ADDI
+`define ADDIU
+`define ANDI
+`define SPECIAL 
+`define REGIMM       
+`define J            
+`define JAL          
+`define BEQ          
+`define BNE          
+`define BLEZ         
+`define BGTZ         
+`define ADDI         
+`define ADDIU        
+`define SLTI         
+`define SLTIU        
+`define ANDI         
+`define ORI          
+`define XORI         
+`define LUI          
+`define LB           
+`define LH           
+`define LWL          
+`define LW           
+`define LBU          
+`define LHU          
+`define LWR          
+`define SB           
+`define SH           
+`define SWL          
+`define SW           
+`define SWR          
+/****** FUNCTION CLASS - bits 5...0 *******/
+`define SLL        
+`define SRL       
+`define SRA       
+`define SLLV      
+`define SRLV      
+`define SRAV      
+`define JR        
+`define JALR      
+`define MFHI      
+`define MTHI      
+`define MFLO      
+`define MTLO      
+`define MULT      
+`define MULTU     
+`define ADD        
+`define ADDU       
+`define SUB        
+`define SUBU       
+`define AND        
+`define OR         
+`define XOR        
+`define NOR        
+`define SLT        
+`define SLTU       
+`define BLTZ     
+`define BGEZ     
+/*End of Instruction Set and Processor Logic Optimization Block*/
+
+module system ( 
+	clk,
+	resetn,
+	boot_iaddr,
+	boot_idata,
+	boot_iwe,
+	boot_daddr,
+	boot_ddata,
+	boot_dwe,
+	reg_file_b_readdataout,
+	
+	dataInNorth,dataOutNorth,wrNorth,rdNorth,fullNorth,emptyNorth,overflowNorth,
+	dataInSouth,dataOutSouth,wrSouth,rdSouth,fullSouth,emptySouth,overflowSouth,
+	dataInWest,dataOutWest,wrWest,rdWest,fullWest,emptyWest,overflowWest,
+	dataInEast,dataOutEast,wrEast,rdEast,fullEast,emptyEast,overflowEast,
+	wrGeneric,genericDataOut);	//FIFO Signals
+	
+/************************* IO Declarations *********************/
+/****************************************************************************
+          ISA definition file
+
+  - The MIPS I ISA has a 6 bit opcode in the upper 6 bits.  
+  - The opcode can also specify a "class".  There are two classes:
+            1.  SPECIAL - look in lowest 6 bits to find operation
+            2.  REGIMM - look in [20:16] to find type of branch
+
+****************************************************************************/
+
+/****** OPCODES - bits 31...26 *******/
+
+parameter     OP_SPECIAL      = 6'b000000;
+parameter     OP_REGIMM       = 6'b000001;
+parameter     OP_J            = 6'b000010;
+parameter     OP_JAL          = 6'b000011;
+parameter     OP_BEQ          = 6'b000100;
+parameter     OP_BNE          = 6'b000101;
+parameter     OP_BLEZ         = 6'b000110;
+parameter     OP_BGTZ         = 6'b000111;
+
+parameter     OP_ADDI         = 6'b001000;
+parameter     OP_ADDIU        = 6'b001001;
+parameter     OP_SLTI         = 6'b001010;
+parameter     OP_SLTIU        = 6'b001011;
+parameter     OP_ANDI         = 6'b001100;
+parameter     OP_ORI          = 6'b001101;
+parameter     OP_XORI         = 6'b001110;
+parameter     OP_LUI          = 6'b001111;
+
+parameter     OP_LB           = 6'b100000;
+parameter     OP_LH           = 6'b100001;
+parameter     OP_LWL          = 6'b100010;
+parameter     OP_LW           = 6'b100011;
+parameter     OP_LBU          = 6'b100100;
+parameter     OP_LHU          = 6'b100101;
+parameter     OP_LWR          = 6'b100110;
+
+parameter     OP_SB           = 6'b101x00;
+parameter     OP_SH           = 6'b101x01;
+parameter     OP_SWL          = 6'b101010;
+parameter     OP_SW           = 6'b101x11;
+parameter     OP_SWR          = 6'b101110;
+
+/****** FUNCTION CLASS - bits 5...0 *******/
+parameter     FUNC_SLL        = 6'b000000;
+parameter     FUNC_SRL        = 6'b000010;
+parameter     FUNC_SRA        = 6'b000011;
+parameter     FUNC_SLLV       = 6'b000100;
+parameter     FUNC_SRLV       = 6'b000110;
+parameter     FUNC_SRAV       = 6'b000111;
+
+parameter     FUNC_JR         = 6'b001xx0;
+parameter     FUNC_JALR       = 6'b001xx1;
+
+parameter     FUNC_MFHI       = 6'bx10x00;
+parameter     FUNC_MTHI       = 6'bx10x01;
+parameter     FUNC_MFLO       = 6'bx10x10;
+parameter     FUNC_MTLO       = 6'bx10x11;
+
+parameter     FUNC_MULT       = 6'bx11x00;
+parameter     FUNC_MULTU      = 6'bx11x01;
+parameter     FUNC_DIV        = 6'bx11x10;
+parameter     FUNC_DIVU       = 6'bx11x11;
+
+parameter     FUNC_ADD        = 6'b100000;
+parameter     FUNC_ADDU       = 6'b100001;
+parameter     FUNC_SUB        = 6'b100010;
+parameter     FUNC_SUBU       = 6'b100011;
+parameter     FUNC_AND        = 6'b100100;
+parameter     FUNC_OR         = 6'b100101;
+parameter     FUNC_XOR        = 6'b100110;
+parameter     FUNC_NOR        = 6'b100111;
+
+parameter     FUNC_SLT        = 6'b101010;
+parameter     FUNC_SLTU       = 6'b101011;
+
+/****** REGIMM Class - bits 20...16 *******/
+parameter     FUNC_BLTZ       = 1'b0;
+parameter     FUNC_BGEZ       = 1'b1;
+
+parameter     OP_COP2       = 6'b010010;
+parameter     COP2_FUNC_CFC2     = 6'b111000;
+parameter     COP2_FUNC_CTC2     = 6'b111010;
+parameter     COP2_FUNC_MTC2     = 6'b111011;
+
+//parameter     FUNC_BLTZAL     = 5'b10000;
+//parameter     FUNC_BGEZAL     = 5'b10001;
+
+/****** 
+ * Original REGIMM class, compressed above to save decode logic
+parameter     FUNC_BLTZ       = 5'b00000;
+parameter     FUNC_BGEZ       = 5'b00001;
+parameter     FUNC_BLTZAL     = 5'b10000;
+parameter     FUNC_BGEZAL     = 5'b10001;
+*/
+
+
+input clk;
+input resetn;
+input [31:0] boot_iaddr;
+input [31:0] boot_idata;
+input boot_iwe;
+input [31:0] boot_daddr;
+input [31:0] boot_ddata;
+input boot_dwe;
+
+input  [31:0] dataInNorth;  //FIFO
+input  [31:0] dataInSouth;  //FIFO
+input  [31:0] dataInWest;  //FIFO
+input  [31:0] dataInEast;  //FIFO
+
+output [31:0] dataOutNorth; //FIFO
+output [31:0] dataOutSouth; //FIFO
+output [31:0] dataOutWest; //FIFO
+output [31:0] dataOutEast; //FIFO
+output [31:0] genericDataOut; 
+
+output  wrNorth; //FIFO write signal 
+output  wrSouth; //FIFO write signal 
+output  wrEast; //FIFO write signal 
+output  wrWest; //FIFO write signal 
+output  wrGeneric;
+
+output  rdNorth; //FIFO write signal 
+output  rdSouth; //FIFO write signal 
+output  rdEast; //FIFO write signal 
+output  rdWest; //FIFO write signal 
+
+input   fullNorth; //FIFO signal which indicates whether FIFO is full or not
+input   fullSouth; 
+input   fullEast;
+input   fullWest;
+
+input   emptyNorth; //FIFO signal which indicates whether FIFO is full or not
+input   emptySouth; 
+input   emptyEast;
+input   emptyWest;
+
+input   overflowNorth; //FIFO signal which indicates whether FIFO has overflowed or not
+input   overflowSouth; 
+input   overflowEast; 
+input   overflowWest; 
+
+output [31:0] reg_file_b_readdataout;
+
+
+/*********************** Signal Declarations *******************/
+wire	branch_mispred;
+wire	stall_2nd_delayslot;
+wire	has_delayslot;
+wire	haz_zeroer0_q_pipereg5_q;
+wire	haz_zeroer_q_pipereg5_q;
+		// Datapath signals declarations
+wire	addersub_result_slt;
+wire	[ 31 : 0 ]	addersub_result;
+wire	[ 31 : 0 ]	logic_unit_result;
+wire	[ 31 : 0 ]	shifter_result;
+wire	ctrl_shifter_stalled;
+wire	[ 31 : 0 ]	mul_lo;
+wire	[ 31 : 0 ]	mul_hi;
+wire	[ 31 : 0 ]	ifetch_pc_out;
+wire	[ 31 : 0 ]	ifetch_instr;
+wire	[ 5 : 0 ]	ifetch_opcode;
+wire	[ 5 : 0 ]	ifetch_func;
+wire	[ 4 : 0 ]	ifetch_rs;
+wire	[ 4 : 0 ]	ifetch_rt;
+wire	[ 4 : 0 ]	ifetch_rd;
+wire	[ 25 : 0 ]	ifetch_instr_index;
+wire	[ 15 : 0 ]	ifetch_offset;
+wire	[ 4 : 0 ]	ifetch_sa;
+wire	[ 31 : 0 ]	ifetch_next_pc;
+wire	[ 31 : 0 ]	data_mem_d_loadresult;
+wire	ctrl_data_mem_stalled;
+wire	[ 31 : 0 ]	pcadder_result;
+wire	[ 31 : 0 ]	signext16_out;
+wire	[ 31 : 0 ]	reg_file_b_readdataout;
+wire	[ 31 : 0 ]	reg_file_a_readdataout;
+wire	[ 31 : 0 ]	merge26lo_out;
+wire	branchresolve_eqz;
+wire	branchresolve_gez;
+wire	branchresolve_gtz;
+wire	branchresolve_lez;
+wire	branchresolve_ltz;
+wire	branchresolve_ne;
+wire	branchresolve_eq;
+wire	[ 31 : 0 ]	hi_reg_q;
+wire	[ 31 : 0 ]	lo_reg_q;
+wire	[ 31 : 0 ]	const6_out;
+wire	[ 31 : 0 ]	const7_out;
+wire	[ 31 : 0 ]	const_out;
+wire	[ 31 : 0 ]	pipereg_q;
+wire	[ 25 : 0 ]	pipereg1_q;
+wire	[ 4 : 0 ]	pipereg2_q;
+wire	[ 4 : 0 ]	pipereg5_q;
+wire	[ 31 : 0 ]	pipereg3_q;
+wire	[ 31 : 0 ]	fakedelay_q;
+wire	[ 31 : 0 ]	nop_q;
+wire	[ 4 : 0 ]	zeroer_q;
+wire	[ 4 : 0 ]	zeroer0_q;
+wire	[ 4 : 0 ]	zeroer4_q;
+wire	[ 4 : 0 ]	mux3to1_shifter_sa_out;
+wire	[ 31 : 0 ]	mux3to1_ifetch_load_data_out;
+wire	mux6to1_ifetch_load_out;
+wire	[ 31 : 0 ]	mux7to1_reg_file_c_writedatain_out;
+wire	[ 31 : 0 ]	mux2to1_addersub_opA_out;
+wire	[ 31 : 0 ]	mux2to1_pipereg_d_out;
+wire	[ 4 : 0 ]	mux3to1_zeroer4_d_out;
+wire	[ 31 : 0 ]	mux3to1_nop_d_out;
+wire	[ 5 : 0 ]	pipereg8_q;
+wire	[ 5 : 0 ]	pipereg9_q;
+wire	[ 4 : 0 ]	pipereg10_q;
+/***************** Control Signals ***************/
+		//Decoded Opcode signal declarations
+reg	[ 1 : 0 ]	ctrl_mux3to1_nop_d_sel;
+reg	[ 1 : 0 ]	ctrl_mux3to1_zeroer4_d_sel;
+reg	ctrl_mux2to1_pipereg_d_sel;
+reg	ctrl_mux2to1_addersub_opA_sel;
+reg	ctrl_zeroer0_en;
+reg	[ 4 : 0 ]	ctrl_mux7to1_reg_file_c_writedatain_sel; //Deepak Increased select lines
+reg	[ 2 : 0 ]	ctrl_mux6to1_ifetch_load_sel;
+reg	[ 1 : 0 ]	ctrl_mux3to1_ifetch_load_data_sel;
+reg	[ 1 : 0 ]	ctrl_mux3to1_shifter_sa_sel;
+reg	ctrl_zeroer4_en;
+reg	ctrl_zeroer_en;
+reg	[ 2 : 0 ]	ctrl_addersub_op;
+reg	ctrl_ifetch_op;
+reg	[ 3 : 0 ]	ctrl_data_mem_op;
+reg	ctrl_mul_op;
+reg	[ 1 : 0 ]	ctrl_logic_unit_op;
+reg	[ 1 : 0 ]	ctrl_shifter_op;
+		//Enable signal declarations
+reg	ctrl_reg_file_c_we;
+reg	ctrl_reg_file_b_en;
+reg	ctrl_lo_reg_en;
+reg	ctrl_branchresolve_en;
+reg	ctrl_hi_reg_en;
+reg	ctrl_reg_file_a_en;
+reg	ctrl_ifetch_we;
+reg	ctrl_ifetch_en;
+reg	ctrl_data_mem_en;
+reg	ctrl_shifter_start;
+		//Other Signals
+wire	squash_stage2;
+wire	stall_out_stage2;
+wire	squash_stage1;
+wire	stall_out_stage1;
+wire	ctrl_pipereg_squashn;
+wire	ctrl_pipereg5_squashn;
+wire	ctrl_pipereg2_squashn;
+wire	ctrl_pipereg3_squashn;
+wire	ctrl_pipereg1_squashn;
+wire	ctrl_pipereg8_squashn;
+wire	ctrl_pipereg9_squashn;
+wire	ctrl_pipereg10_squashn;
+wire	ctrl_pipereg_resetn;
+wire	ctrl_pipereg5_resetn;
+wire	ctrl_pipereg2_resetn;
+wire	ctrl_pipereg3_resetn;
+wire	ctrl_pipereg1_resetn;
+wire	ctrl_pipereg8_resetn;
+wire	ctrl_pipereg9_resetn;
+wire	ctrl_pipereg10_resetn;
+wire	ctrl_pipereg_en;
+wire	ctrl_pipereg5_en;
+wire	ctrl_pipereg2_en;
+wire	ctrl_pipereg3_en;
+wire	ctrl_pipereg1_en;
+wire	ctrl_pipereg8_en;
+wire	ctrl_pipereg9_en;
+wire	ctrl_pipereg10_en;
+
+
+wire     [31:0]  tempFifoDataInNorth;
+wire     [31:0]  tempFifoDataInSouth;
+wire     [31:0]  tempFifoDataInEast;
+wire     [31:0]  tempFifoDataInWest;
+
+wire     [31:0]  northEmpty;
+wire     [31:0]  southEmpty;
+wire     [31:0]  eastEmpty;
+wire     [31:0]  westEmpty;
+
+wire     [31:0]  northFull;
+wire     [31:0]  southFull;
+wire     [31:0]  eastFull;
+wire     [31:0]  westFull;
+
+reg writeFifoWest;
+reg writeFifoEast;
+reg writeFifoNorth;
+reg writeFifoSouth;
+
+reg readFifoWest;
+reg readFifoEast;
+reg readFifoNorth;
+reg readFifoSouth;
+reg writeGenOut;
+reg [31:0] tempDataOutNorth;
+reg [31:0] tempDataOutSouth;
+reg [31:0] tempDataOutEast;
+reg [31:0] tempDataOutWest;
+reg [31:0] tempDataOutGeneric;
+/*****Parameter Declarations and Port Map*******/
+
+parameter NorthIn  = 32'h00001000;
+parameter NorthOut = 32'h00001004;
+parameter SouthIn  = 32'h00001008;
+parameter SouthOut = 32'h0000100c;
+parameter EastIn   = 32'h00001010;
+parameter EastOut  = 32'h00001014;
+parameter WestIn   = 32'h00001018;
+parameter WestOut  = 32'h0000101c;
+
+parameter NorthEmptyPort = 32'h00001020;
+parameter NorthFullPort  = 32'h00001024;
+parameter SouthEmptyPort = 32'h00001028;
+parameter SouthFullPort  = 32'h0000102c;
+parameter EastEmptyPort  = 32'h00001030;
+parameter EastFullPort   = 32'h00001034;
+parameter WestEmptyPort  = 32'h00001038;
+parameter WestFullPort   = 32'h0000103c;
+
+parameter genericDataOutPort = 32'h00001200;
+/*********Parameter Declartions End************/
+
+
+
+assign northFull = 32'h00000000|fullNorth;
+assign southFull = 32'h00000000|fullSouth;
+assign eastFull  = 32'h00000000|fullEast;
+assign westFull  = 32'h00000000|fullWest;
+
+assign northEmpty = 32'h00000000|emptyNorth;
+assign southEmpty = 32'h00000000|emptySouth;
+assign eastEmpty  = 32'h00000000|emptyEast;
+assign westEmpty  = 32'h00000000|emptyWest;
+
+
+
+//  Port Map Table
+// ****************
+// 0x1000 North In
+// 0x1004 North Out
+// 0x1008 South In
+// 0x100c South Out
+// 0x1010 East  In
+// 0x1014 East  Out
+// 0x1018 West  In
+// 0x101c West  Out
+
+//Software will check the status of "full" mapped registers before writing.
+//That is write as long as  full is not high
+//Software will check the status of "empty" mapped registers before read.
+//That is read as long as  empty is not high
+
+// 0x1020 NorthEmpty
+// 0x1024 NorthFull
+// 0x1028 SouthEmpty
+// 0x102c SouthFull
+// 0x1030 EastEmpty
+// 0x1034 EastFull
+// 0x1038 WestEmpty
+// 0x103c WestFull
+
+/********************Store (Moving data out of the processor **************************/
+//assign dataOutWest = (addersub_result==WestOut) ? reg_file_b_readdataout : 32'hxxxxxxxx;
+assign dataOutWest = tempDataOutWest;
+assign wrWest = writeFifoWest;
+
+//assign dataOutEast = (addersub_result==EastOut) ? reg_file_b_readdataout : 32'hxxxxxxxx;
+assign dataOutEast = tempDataOutEast;
+assign wrEast = writeFifoEast;
+
+//assign dataOutNorth = (addersub_result==NorthOut) ? reg_file_b_readdataout : 32'hxxxxxxxx;
+assign dataOutNorth = tempDataOutNorth;
+assign wrNorth = writeFifoNorth;
+
+//assign dataOutSouth = (addersub_result==SouthOut) ? reg_file_b_readdataout : 32'hxxxxxxxx;
+assign dataOutSouth = tempDataOutSouth;
+assign wrSouth = writeFifoSouth;
+
+//assign genericDataOut = (addersub_result==genericDataOutPort) ? reg_file_b_readdataout : 32'hxxxxxxxx;
+assign wrGeneric = writeGenOut;
+assign genericDataOut = tempDataOutGeneric;
+
+always@ (posedge clk) begin
+	 writeFifoWest   <= (addersub_result==WestOut) ? 1'b1:1'b0;
+	 writeFifoEast   <= (addersub_result==EastOut) ? 1'b1:1'b0;
+     writeFifoNorth  <= (addersub_result==NorthOut) ? 1'b1:1'b0;
+     writeFifoSouth  <= (addersub_result==SouthOut) ? 1'b1:1'b0;
+     writeGenOut     <= (addersub_result==genericDataOutPort) ? 1'b1:1'b0;
+     
+     tempDataOutWest <= (addersub_result==WestOut) ? reg_file_b_readdataout : 32'hxxxxxxxx;
+     tempDataOutEast <= (addersub_result==EastOut) ? reg_file_b_readdataout : 32'hxxxxxxxx;
+     tempDataOutNorth <= (addersub_result==NorthOut) ? reg_file_b_readdataout : 32'hxxxxxxxx; 
+     tempDataOutSouth <= (addersub_result==SouthOut) ? reg_file_b_readdataout : 32'hxxxxxxxx;
+     tempDataOutGeneric <= (addersub_result==genericDataOutPort) ? reg_file_b_readdataout : 32'hxxxxxxxx;
+     
+     //readFifoNorth   <= (addersub_result==NorthIn) ? 1'b1:1'b0;
+     //readFifoSouth   <= (addersub_result==SouthIn) ? 1'b1:1'b0;
+     //readFifoEast    <= (addersub_result==EastIn)  ? 1'b1:1'b0;
+     //readFifoWest    <= (addersub_result==WestIn)  ? 1'b1:1'b0;
+     
+     //tempFifoDataInEast = (eastEmpty!=32'h00000001) ? dataInEast : 32'hxxxxxxxx;
+     //tempFifoDataInWest = (westEmpty!=32'h00000001) ? dataInWest : 32'hxxxxxxxx;
+     //tempFifoDataInNorth = (northEmpty!=32'h00000001) ? dataInNorth : 32'hxxxxxxxx;
+     //tempFifoDataInSouth = (southEmpty!=32'h00000001) ? dataInSouth : 32'hxxxxxxxx;
+end
+
+/********************Load (Taking data into processor from output port*******************/
+//If east port has something (indicated by eastEmpty != 1), read data to temp datain east
+//assign tempFifoDataInEast = (eastEmpty!=32'h00000001) ? dataInEast : 32'hxxxxxxxx;
+assign tempFifoDataInEast = dataInEast;
+assign rdEast             = (addersub_result==EastIn) ? 1'b1:1'b0;
+//assign rdEast = readFifoEast;
+
+//assign tempFifoDataInWest = (westEmpty!=32'h00000001) ? dataInWest : 32'hxxxxxxxx;
+assign tempFifoDataInWest = dataInWest;
+assign rdWest             = (addersub_result==WestIn) ? 1'b1:1'b0;
+//assign rdWest = readFifoWest;
+
+//assign tempFifoDataInNorth = (northEmpty!=32'h00000001) ? dataInNorth : 32'hxxxxxxxx;
+assign tempFifoDataInNorth = dataInNorth;
+assign rdNorth             = (addersub_result==NorthIn) ? 1'b1:1'b0;
+//assign rdNorth = readFifoNorth;
+
+//assign tempFifoDataInSouth = (southEmpty!=32'h00000001) ? dataInSouth : 32'hxxxxxxxx;
+assign tempFifoDataInSouth = dataInSouth;
+assign rdSouth             = (addersub_result==SouthIn) ? 1'b1:1'b0;
+//assign rdSouth = readFifoSouth;
+
+	
+
+
+/****************************** Control **************************/
+
+		//Decode Logic for Opcode and Multiplex Select signals
+always @(ifetch_opcode or ifetch_func or ifetch_rt)
+begin
+		// Initialize control opcodes to zero
+	ctrl_mux3to1_zeroer4_d_sel = 0;
+	ctrl_mux2to1_pipereg_d_sel = 0;
+	ctrl_zeroer0_en = 0;
+	ctrl_zeroer4_en = 0;
+	ctrl_zeroer_en = 0;
+	
+	casex (ifetch_opcode)
+	    `ifdef ADDI
+		OP_ADDI: 
+		begin
+			ctrl_mux3to1_zeroer4_d_sel = 2;
+			ctrl_mux2to1_pipereg_d_sel = 0;
+			ctrl_zeroer4_en = 1;
+			ctrl_zeroer_en = 1;
+		end
+		`endif
+		`ifdef ADDIU		
+		OP_ADDIU:
+		begin
+			ctrl_mux3to1_zeroer4_d_sel = 2;
+			ctrl_mux2to1_pipereg_d_sel = 0;
+			ctrl_zeroer4_en = 1;
+			ctrl_zeroer_en = 1;
+		end
+		`endif
+		`ifdef ANDI
+		OP_ANDI:
+		begin
+			ctrl_mux3to1_zeroer4_d_sel = 2;
+			ctrl_mux2to1_pipereg_d_sel = 1;
+			ctrl_zeroer4_en = 1;
+			ctrl_zeroer_en = 1;
+		end
+		`endif
+		`ifdef BEQ
+		OP_BEQ:
+		begin
+			ctrl_mux2to1_pipereg_d_sel = 0;
+			ctrl_zeroer0_en = 1;
+			ctrl_zeroer_en = 1;
+		end
+		`endif
+		`ifdef BGTZ
+		OP_BGTZ:
+		begin
+			ctrl_mux2to1_pipereg_d_sel = 0;
+			ctrl_zeroer_en = 1;
+		end
+		`endif
+		`ifdef BLEZ
+		OP_BLEZ:
+		begin
+			ctrl_mux2to1_pipereg_d_sel = 0;
+			ctrl_zeroer_en = 1;
+		end
+		`endif
+		
+		`ifdef BNE
+		OP_BNE:
+		begin
+			ctrl_mux2to1_pipereg_d_sel = 0;
+			ctrl_zeroer0_en = 1;
+			ctrl_zeroer_en = 1;
+		end
+		`endif
+		`ifdef JAL
+		OP_JAL:
+		begin
+			ctrl_mux3to1_zeroer4_d_sel = 0;
+			ctrl_zeroer4_en = 1;
+		end
+		`endif
+		
+		`ifdef LB
+		OP_LB:
+		begin
+			ctrl_mux3to1_zeroer4_d_sel = 2;
+			ctrl_mux2to1_pipereg_d_sel = 0;
+			ctrl_zeroer4_en = 1;
+			ctrl_zeroer_en = 1;
+		end
+		`endif
+		
+		`ifdef LBU
+		OP_LBU:
+		begin
+			ctrl_mux3to1_zeroer4_d_sel = 2;
+			ctrl_mux2to1_pipereg_d_sel = 0;
+			ctrl_zeroer4_en = 1;
+			ctrl_zeroer_en = 1;
+		end
+		`endif
+		
+		`ifdef LW
+		OP_LH:
+		begin
+			ctrl_mux3to1_zeroer4_d_sel = 2;
+			ctrl_mux2to1_pipereg_d_sel = 0;
+			ctrl_zeroer4_en = 1;
+			ctrl_zeroer_en = 1;
+		end
+		`endif
+		
+		`ifdef LHU
+		OP_LHU:
+		begin
+			ctrl_mux3to1_zeroer4_d_sel = 2;
+			ctrl_mux2to1_pipereg_d_sel = 0;
+			ctrl_zeroer4_en = 1;
+			ctrl_zeroer_en = 1;
+		end
+		`endif
+		
+		`ifdef LUI
+		OP_LUI:
+		begin
+			ctrl_mux3to1_zeroer4_d_sel = 2;
+			ctrl_mux2to1_pipereg_d_sel = 1;
+			ctrl_zeroer4_en = 1;
+		end
+		`endif
+		
+		`ifdef LW
+		OP_LW:
+		begin
+			ctrl_mux3to1_zeroer4_d_sel = 2;
+			ctrl_mux2to1_pipereg_d_sel = 0;
+			ctrl_zeroer4_en = 1;
+			ctrl_zeroer_en = 1;
+		end
+		`endif
+		
+		`ifdef ORI
+		OP_ORI:
+		begin
+			ctrl_mux3to1_zeroer4_d_sel = 2;
+			ctrl_mux2to1_pipereg_d_sel = 1;
+			ctrl_zeroer4_en = 1;
+			ctrl_zeroer_en = 1;
+		end
+		`endif
+		
+		
+		OP_REGIMM:
+		casex (ifetch_rt[0])
+		    `ifdef BGEZ
+			FUNC_BGEZ:
+			begin
+				ctrl_mux2to1_pipereg_d_sel = 0;
+				ctrl_zeroer_en = 1;
+			end
+			`endif
+			
+			`ifdef BLTZ			
+			FUNC_BLTZ:
+			begin
+				ctrl_mux2to1_pipereg_d_sel = 0;
+				ctrl_zeroer_en = 1;
+			end
+			`endif
+		endcase
+		
+		`ifdef SB
+		OP_SB:
+		begin
+			ctrl_mux2to1_pipereg_d_sel = 0;
+			ctrl_zeroer0_en = 1;
+			ctrl_zeroer_en = 1;
+		end
+		`endif
+		
+		`ifdef SH
+		OP_SH:
+		begin
+			ctrl_mux2to1_pipereg_d_sel = 0;
+			ctrl_zeroer0_en = 1;
+			ctrl_zeroer_en = 1;
+		end
+		`endif
+		
+		`ifdef SLTI
+		OP_SLTI:
+		begin
+			ctrl_mux3to1_zeroer4_d_sel = 2;
+			ctrl_mux2to1_pipereg_d_sel = 0;
+			ctrl_zeroer4_en = 1;
+			ctrl_zeroer_en = 1;
+		end
+		`endif
+		
+		`ifdef SLTIU
+		OP_SLTIU:
+		begin
+			ctrl_mux3to1_zeroer4_d_sel = 2;
+			ctrl_mux2to1_pipereg_d_sel = 0;
+			ctrl_zeroer4_en = 1;
+			ctrl_zeroer_en = 1;
+		end
+		`endif
+		
+		
+		OP_SPECIAL:
+		casex (ifetch_func)
+		    `ifdef ADD
+			FUNC_ADD:
+			begin
+				ctrl_mux3to1_zeroer4_d_sel = 1;
+				ctrl_zeroer0_en = 1;
+				ctrl_zeroer4_en = 1;
+				ctrl_zeroer_en = 1;
+			end
+			`endif
+			
+			`ifdef ADDU
+			FUNC_ADDU:
+			begin
+				ctrl_mux3to1_zeroer4_d_sel = 1;
+				ctrl_zeroer0_en = 1;
+				ctrl_zeroer4_en = 1;
+				ctrl_zeroer_en = 1;
+			end
+			`endif
+			
+			`ifdef AND			
+			FUNC_AND:
+			begin
+				ctrl_mux3to1_zeroer4_d_sel = 1;
+				ctrl_zeroer0_en = 1;
+				ctrl_zeroer4_en = 1;
+				ctrl_zeroer_en = 1;
+			end
+			`endif
+			
+			`ifdef JALR
+			FUNC_JALR:
+			begin
+				ctrl_mux3to1_zeroer4_d_sel = 0;
+				ctrl_zeroer4_en = 1;
+				ctrl_zeroer_en = 1;
+			end
+			`endif
+			
+			`ifdef JR
+			FUNC_JR:
+				ctrl_zeroer_en = 1;
+			`endif
+			
+			`ifdef MFHI	
+			FUNC_MFHI:
+			begin
+				ctrl_mux3to1_zeroer4_d_sel = 1;
+				ctrl_zeroer4_en = 1;
+			end
+			`endif
+			
+			`ifdef MFLO
+			FUNC_MFLO:
+			begin
+				ctrl_mux3to1_zeroer4_d_sel = 1;
+				ctrl_zeroer4_en = 1;
+			end
+			`endif
+			
+			`ifdef MULT
+			FUNC_MULT:
+			begin
+				ctrl_zeroer0_en = 1;
+				ctrl_zeroer_en = 1;
+			end
+			`endif
+			
+			`ifdef MULTU
+			FUNC_MULTU:
+			begin
+				ctrl_zeroer0_en = 1;
+				ctrl_zeroer_en = 1;
+			end
+			`endif
+			
+			`ifdef NOR
+			FUNC_NOR:
+			begin
+				ctrl_mux3to1_zeroer4_d_sel = 1;
+				ctrl_zeroer0_en = 1;
+				ctrl_zeroer4_en = 1;
+				ctrl_zeroer_en = 1;
+			end
+			`endif
+			
+			`ifdef OR
+			FUNC_OR:
+			begin
+				ctrl_mux3to1_zeroer4_d_sel = 1;
+				ctrl_zeroer0_en = 1;
+				ctrl_zeroer4_en = 1;
+				ctrl_zeroer_en = 1;
+			end
+			`endif
+			
+			`ifdef SLL
+			FUNC_SLL:
+			begin
+				ctrl_mux3to1_zeroer4_d_sel = 1;
+				ctrl_zeroer0_en = 1;
+				ctrl_zeroer4_en = 1;
+			end
+			`endif
+			
+			`ifdef SLLV
+			FUNC_SLLV:
+			begin
+				ctrl_mux3to1_zeroer4_d_sel = 1;
+				ctrl_zeroer0_en = 1;
+				ctrl_zeroer4_en = 1;
+				ctrl_zeroer_en = 1;
+			end
+			`endif
+			
+			`ifdef SLT
+			FUNC_SLT:
+			begin
+				ctrl_mux3to1_zeroer4_d_sel = 1;
+				ctrl_zeroer0_en = 1;
+				ctrl_zeroer4_en = 1;
+				ctrl_zeroer_en = 1;
+			end
+			`endif
+			
+			`ifdef SLTU
+			FUNC_SLTU:
+			begin
+				ctrl_mux3to1_zeroer4_d_sel = 1;
+				ctrl_zeroer0_en = 1;
+				ctrl_zeroer4_en = 1;
+				ctrl_zeroer_en = 1;
+			end
+			`endif
+			
+			`ifdef SRA
+			FUNC_SRA:
+			begin
+				ctrl_mux3to1_zeroer4_d_sel = 1;
+				ctrl_zeroer0_en = 1;
+				ctrl_zeroer4_en = 1;
+			end
+			`endif
+			
+			`ifdef SRAV
+			FUNC_SRAV:
+			begin
+				ctrl_mux3to1_zeroer4_d_sel = 1;
+				ctrl_zeroer0_en = 1;
+				ctrl_zeroer4_en = 1;
+				ctrl_zeroer_en = 1;
+			end
+			`endif
+			
+			`ifdef SRL
+			FUNC_SRL:
+			begin
+				ctrl_mux3to1_zeroer4_d_sel = 1;
+				ctrl_zeroer0_en = 1;
+				ctrl_zeroer4_en = 1;
+			end
+			`endif
+			
+			`ifdef SRLV
+			FUNC_SRLV:
+			begin
+				ctrl_mux3to1_zeroer4_d_sel = 1;
+				ctrl_zeroer0_en = 1;
+				ctrl_zeroer4_en = 1;
+				ctrl_zeroer_en = 1;
+			end
+			`endif
+			
+			`ifdef SUB
+			FUNC_SUB:
+			begin
+				ctrl_mux3to1_zeroer4_d_sel = 1;
+				ctrl_zeroer0_en = 1;
+				ctrl_zeroer4_en = 1;
+				ctrl_zeroer_en = 1;
+			end
+			`endif
+			
+			`ifdef SUBU			
+			FUNC_SUBU:
+			begin
+				ctrl_mux3to1_zeroer4_d_sel = 1;
+				ctrl_zeroer0_en = 1;
+				ctrl_zeroer4_en = 1;
+				ctrl_zeroer_en = 1;
+			end
+			`endif
+			
+			`ifdef XOR						
+			FUNC_XOR:
+			begin
+				ctrl_mux3to1_zeroer4_d_sel = 1;
+				ctrl_zeroer0_en = 1;
+				ctrl_zeroer4_en = 1;
+				ctrl_zeroer_en = 1;
+			end
+			`endif
+			
+		endcase
+		
+		
+		`ifdef SW
+		OP_SW:
+		begin
+			ctrl_mux2to1_pipereg_d_sel = 0;
+			ctrl_zeroer0_en = 1;
+			ctrl_zeroer_en = 1;
+		end
+		`endif
+				
+		`ifdef XORI
+		OP_XORI:
+		begin
+			ctrl_mux3to1_zeroer4_d_sel = 2;
+			ctrl_mux2to1_pipereg_d_sel = 1;
+			ctrl_zeroer4_en = 1;
+			ctrl_zeroer_en = 1;
+		end
+		`endif
+	endcase
+end
+		//Logic for enable signals in Pipe Stage 1
+always@(ifetch_opcode or ifetch_func or ifetch_rt[0] or stall_out_stage2 or haz_zeroer_q_pipereg5_q or haz_zeroer0_q_pipereg5_q)
+begin
+	ctrl_reg_file_b_en = 1 &~haz_zeroer0_q_pipereg5_q&~haz_zeroer_q_pipereg5_q&~stall_out_stage2;
+	ctrl_reg_file_a_en = 1 &~haz_zeroer0_q_pipereg5_q&~haz_zeroer_q_pipereg5_q&~stall_out_stage2;
+	ctrl_ifetch_en = 1 &~haz_zeroer0_q_pipereg5_q&~haz_zeroer_q_pipereg5_q&~stall_out_stage2;
+end
+		//Decode Logic for Opcode and Multiplex Select signals
+always@(pipereg8_q or pipereg9_q or pipereg10_q or addersub_result)
+begin
+		// Initialize control opcodes to zero
+	ctrl_mux3to1_nop_d_sel = 0;
+	ctrl_mux2to1_addersub_opA_sel = 0;
+	ctrl_mux7to1_reg_file_c_writedatain_sel = 0;
+	ctrl_mux6to1_ifetch_load_sel = 0;
+	ctrl_mux3to1_ifetch_load_data_sel = 0;
+	ctrl_mux3to1_shifter_sa_sel = 0;
+	ctrl_addersub_op = 0;
+	ctrl_ifetch_op = 0;
+	ctrl_data_mem_op = 0;
+	ctrl_mul_op = 0;
+	ctrl_logic_unit_op = 0;
+	ctrl_shifter_op = 0;
+	
+	casex (pipereg8_q)
+	    `ifdef ADDI
+		OP_ADDI:
+		begin
+			ctrl_mux3to1_nop_d_sel = 2;
+			ctrl_mux2to1_addersub_opA_sel = 0;
+			ctrl_mux7to1_reg_file_c_writedatain_sel = 6;
+			ctrl_addersub_op = 3;
+		end
+		`endif
+		
+		`ifdef ADDIU
+		OP_ADDIU:
+		begin
+			ctrl_mux3to1_nop_d_sel = 2;
+			ctrl_mux2to1_addersub_opA_sel = 0;
+			ctrl_mux7to1_reg_file_c_writedatain_sel = 6;
+			ctrl_addersub_op = 1;
+		end
+		`endif
+		
+		`ifdef ANDI
+		OP_ANDI:
+		begin
+			ctrl_mux3to1_nop_d_sel = 2;
+			ctrl_mux7to1_reg_file_c_writedatain_sel = 4;
+			ctrl_logic_unit_op = 0;
+		end
+		`endif
+		
+		`ifdef BEQ
+		OP_BEQ:
+		begin
+			ctrl_mux6to1_ifetch_load_sel = 5;
+			ctrl_mux3to1_ifetch_load_data_sel = 2;
+			ctrl_ifetch_op = 0;
+		end
+		`endif
+		
+		`ifdef BGTZ
+		OP_BGTZ:
+		begin
+			ctrl_mux6to1_ifetch_load_sel = 0;
+			ctrl_mux3to1_ifetch_load_data_sel = 2;
+			ctrl_ifetch_op = 0;
+		end
+		`endif
+		
+		`ifdef BLEZ
+		OP_BLEZ:
+		begin
+			ctrl_mux6to1_ifetch_load_sel = 3;
+			ctrl_mux3to1_ifetch_load_data_sel = 2;
+			ctrl_ifetch_op = 0;
+		end
+		`endif
+		
+		`ifdef BNE
+		OP_BNE:
+		begin
+			ctrl_mux6to1_ifetch_load_sel = 4;
+			ctrl_mux3to1_ifetch_load_data_sel = 2;
+			ctrl_ifetch_op = 0;
+		end
+		`endif
+		
+		`ifdef J
+		OP_J:
+		begin
+			ctrl_mux3to1_ifetch_load_data_sel = 1;
+			ctrl_ifetch_op = 1;
+		end
+		`endif
+		
+		`ifdef JAL
+		OP_JAL:
+		begin
+			ctrl_mux2to1_addersub_opA_sel = 1;
+			ctrl_mux7to1_reg_file_c_writedatain_sel = 6;
+			ctrl_mux3to1_ifetch_load_data_sel = 1;
+			ctrl_addersub_op = 1;
+			ctrl_ifetch_op = 1;
+		end
+		`endif
+		
+		`ifdef LB
+		OP_LB:
+		begin
+			ctrl_mux3to1_nop_d_sel = 2;
+			ctrl_mux2to1_addersub_opA_sel = 0;
+			ctrl_mux7to1_reg_file_c_writedatain_sel = 2;
+			ctrl_addersub_op = 3;
+			ctrl_data_mem_op = 7;
+		end
+		`endif
+		
+		`ifdef LBU
+		OP_LBU:
+		begin
+			ctrl_mux3to1_nop_d_sel = 2;
+			ctrl_mux2to1_addersub_opA_sel = 0;
+			ctrl_mux7to1_reg_file_c_writedatain_sel = 2;
+			ctrl_addersub_op = 3;
+			ctrl_data_mem_op = 3;
+		end
+		`endif
+		
+		`ifdef LH
+		OP_LH:
+		begin
+			ctrl_mux3to1_nop_d_sel = 2;
+			ctrl_mux2to1_addersub_opA_sel = 0;
+			ctrl_mux7to1_reg_file_c_writedatain_sel = 2;
+			ctrl_addersub_op = 3;
+			ctrl_data_mem_op = 5;
+		end
+		`endif
+		
+		`ifdef LHU
+		OP_LHU:
+		begin
+			ctrl_mux3to1_nop_d_sel = 2;
+			ctrl_mux2to1_addersub_opA_sel = 0;
+			ctrl_mux7to1_reg_file_c_writedatain_sel = 2;
+			ctrl_addersub_op = 3;
+			ctrl_data_mem_op = 1;
+		end
+		`endif
+		
+		`ifdef LUI
+		OP_LUI:
+		begin
+			ctrl_mux3to1_nop_d_sel = 2;
+			ctrl_mux7to1_reg_file_c_writedatain_sel = 3;
+			ctrl_mux3to1_shifter_sa_sel = 1;
+			ctrl_shifter_op = 0;
+		end
+		`endif
+		
+		`ifdef LW
+		OP_LW:
+		begin
+			
+			casex(addersub_result)
+		       NorthIn:       begin ctrl_mux7to1_reg_file_c_writedatain_sel = 8;  end
+		       SouthIn:       begin ctrl_mux7to1_reg_file_c_writedatain_sel = 9;  end
+		       EastIn:        begin ctrl_mux7to1_reg_file_c_writedatain_sel = 10; end
+		       WestIn:        begin ctrl_mux7to1_reg_file_c_writedatain_sel = 11; end
+		       NorthEmptyPort:begin ctrl_mux7to1_reg_file_c_writedatain_sel = 12; end
+		       SouthEmptyPort:begin ctrl_mux7to1_reg_file_c_writedatain_sel = 13; end
+		       EastEmptyPort: begin ctrl_mux7to1_reg_file_c_writedatain_sel = 14; end
+		       WestEmptyPort: begin ctrl_mux7to1_reg_file_c_writedatain_sel = 15; end
+			   NorthFullPort: begin ctrl_mux7to1_reg_file_c_writedatain_sel = 16; end
+			   SouthFullPort: begin ctrl_mux7to1_reg_file_c_writedatain_sel = 17; end
+			   EastFullPort:  begin ctrl_mux7to1_reg_file_c_writedatain_sel = 18; end
+			   WestFullPort:  begin ctrl_mux7to1_reg_file_c_writedatain_sel = 19; end
+			   default:       begin ctrl_mux7to1_reg_file_c_writedatain_sel = 2; end
+			endcase
+			   
+			 
+			    
+			ctrl_mux3to1_nop_d_sel = 2;			            			
+			ctrl_mux2to1_addersub_opA_sel = 0;
+			ctrl_addersub_op = 3;
+			ctrl_data_mem_op = 0;
+		end
+		`endif
+		
+		`ifdef ORI
+		OP_ORI:
+		begin
+			ctrl_mux3to1_nop_d_sel = 2;
+			ctrl_mux7to1_reg_file_c_writedatain_sel = 4;
+			ctrl_logic_unit_op = 1;
+		end
+		`endif
+		
+		`ifdef REGIMM
+		OP_REGIMM:
+		casex (pipereg10_q[0])
+		    `ifdef BGEZ
+			FUNC_BGEZ:
+			begin
+				ctrl_mux6to1_ifetch_load_sel = 1;
+				ctrl_mux3to1_ifetch_load_data_sel = 2;
+				ctrl_ifetch_op = 0;
+			end
+			`endif
+			
+			`ifdef BLTZ
+			FUNC_BLTZ:
+			begin
+				ctrl_mux6to1_ifetch_load_sel = 2;
+				ctrl_mux3to1_ifetch_load_data_sel = 2;
+				ctrl_ifetch_op = 0;
+			end
+			`endif
+		endcase
+		`endif
+		`ifdef SB
+		OP_SB:
+		begin
+			ctrl_mux3to1_nop_d_sel = 2;
+			ctrl_mux2to1_addersub_opA_sel = 0;
+			ctrl_addersub_op = 3;
+			ctrl_data_mem_op = 11;
+		end
+		`endif
+		
+		`ifdef SH
+		OP_SH:
+		begin
+			ctrl_mux3to1_nop_d_sel = 2;
+			ctrl_mux2to1_addersub_opA_sel = 0;
+			ctrl_addersub_op = 3;
+			ctrl_data_mem_op = 9;
+		end
+		`endif
+		
+		`ifdef SLTI
+		OP_SLTI:
+		begin
+			ctrl_mux3to1_nop_d_sel = 2;
+			ctrl_mux2to1_addersub_opA_sel = 0;
+			ctrl_mux7to1_reg_file_c_writedatain_sel = 5;
+			ctrl_addersub_op = 6;
+		end
+		`endif
+		
+		`ifdef SLTIU
+		OP_SLTIU:
+		begin
+			ctrl_mux3to1_nop_d_sel = 2;
+			ctrl_mux2to1_addersub_opA_sel = 0;
+			ctrl_mux7to1_reg_file_c_writedatain_sel = 5;
+			ctrl_addersub_op = 4;
+		end
+		`endif
+		
+		
+		OP_SPECIAL:
+		casex (pipereg9_q)
+		    `ifdef ADD
+			FUNC_ADD:
+			begin
+				ctrl_mux3to1_nop_d_sel = 1;
+				ctrl_mux2to1_addersub_opA_sel = 0;
+				ctrl_mux7to1_reg_file_c_writedatain_sel = 6;
+				ctrl_addersub_op = 3;
+			end
+			`endif
+			
+			`ifdef ADDU
+			FUNC_ADDU:
+			begin
+				ctrl_mux3to1_nop_d_sel = 1;
+				ctrl_mux2to1_addersub_opA_sel = 0;
+				ctrl_mux7to1_reg_file_c_writedatain_sel = 6;
+				ctrl_addersub_op = 1;
+			end
+			`endif
+			
+			`ifdef AND
+			FUNC_AND:
+			begin
+				ctrl_mux3to1_nop_d_sel = 1;
+				ctrl_mux7to1_reg_file_c_writedatain_sel = 4;
+				ctrl_logic_unit_op = 0;
+			end
+			`endif
+			
+			`ifdef JALR
+			FUNC_JALR:
+			begin
+				ctrl_mux2to1_addersub_opA_sel = 1;
+				ctrl_mux7to1_reg_file_c_writedatain_sel = 6;
+				ctrl_mux3to1_ifetch_load_data_sel = 0;
+				ctrl_addersub_op = 1;
+				ctrl_ifetch_op = 1;
+			end
+			`endif
+			
+			`ifdef JR
+			FUNC_JR:
+			begin
+				ctrl_mux3to1_ifetch_load_data_sel = 0;
+				ctrl_ifetch_op = 1;
+			end
+			`endif
+			
+			`ifdef MFHI			
+			FUNC_MFHI:
+				ctrl_mux7to1_reg_file_c_writedatain_sel = 1;
+			`endif
+			
+			`ifdef MFLO
+			FUNC_MFLO:
+				ctrl_mux7to1_reg_file_c_writedatain_sel = 0;
+			`endif
+			
+			`ifdef MULT
+			FUNC_MULT:
+				ctrl_mul_op = 1;
+			`endif
+			
+			`ifdef MULTU
+			FUNC_MULTU:
+				ctrl_mul_op = 0;
+			`endif
+			
+			`ifdef NOR
+			FUNC_NOR:
+			begin
+				ctrl_mux3to1_nop_d_sel = 1;
+				ctrl_mux7to1_reg_file_c_writedatain_sel = 4;
+				ctrl_logic_unit_op = 3;
+			end
+			`endif
+			
+			`ifdef OR			
+			FUNC_OR:
+			begin
+				ctrl_mux3to1_nop_d_sel = 1;
+				ctrl_mux7to1_reg_file_c_writedatain_sel = 4;
+				ctrl_logic_unit_op = 1;
+			end
+			`endif
+			
+			`ifdef SLL
+			FUNC_SLL:
+			begin
+				ctrl_mux3to1_nop_d_sel = 1;
+				ctrl_mux7to1_reg_file_c_writedatain_sel = 3;
+				ctrl_mux3to1_shifter_sa_sel = 0;
+				ctrl_shifter_op = 0;
+			end
+			`endif
+			
+			`ifdef SLLV			
+			FUNC_SLLV:
+			begin
+				ctrl_mux3to1_nop_d_sel = 1;
+				ctrl_mux7to1_reg_file_c_writedatain_sel = 3;
+				ctrl_mux3to1_shifter_sa_sel = 2;
+				ctrl_shifter_op = 0;
+			end
+			`endif
+			
+			`ifdef SLT						
+			FUNC_SLT:
+			begin
+				ctrl_mux3to1_nop_d_sel = 1;
+				ctrl_mux2to1_addersub_opA_sel = 0;
+				ctrl_mux7to1_reg_file_c_writedatain_sel = 5;
+				ctrl_addersub_op = 6;
+			end
+			`endif
+			
+			`ifdef SLTU
+			FUNC_SLTU:
+			begin
+				ctrl_mux3to1_nop_d_sel = 1;
+				ctrl_mux2to1_addersub_opA_sel = 0;
+				ctrl_mux7to1_reg_file_c_writedatain_sel = 5;
+				ctrl_addersub_op = 4;
+			end
+			`endif
+			
+			`ifdef SRA
+			FUNC_SRA:
+			begin
+				ctrl_mux3to1_nop_d_sel = 1;
+				ctrl_mux7to1_reg_file_c_writedatain_sel = 3;
+				ctrl_mux3to1_shifter_sa_sel = 0;
+				ctrl_shifter_op = 3;
+			end
+			`endif
+			
+			`ifdef SRAV
+			FUNC_SRAV:
+			begin
+				ctrl_mux3to1_nop_d_sel = 1;
+				ctrl_mux7to1_reg_file_c_writedatain_sel = 3;
+				ctrl_mux3to1_shifter_sa_sel = 2;
+				ctrl_shifter_op = 3;
+			end
+			`endif
+			
+			`ifdef SRL
+			FUNC_SRL:
+			begin
+				ctrl_mux3to1_nop_d_sel = 1;
+				ctrl_mux7to1_reg_file_c_writedatain_sel = 3;
+				ctrl_mux3to1_shifter_sa_sel = 0;
+				ctrl_shifter_op = 1;
+			end
+			`endif
+			
+			`ifdef SRLV
+			FUNC_SRLV:
+			begin
+				ctrl_mux3to1_nop_d_sel = 1;
+				ctrl_mux7to1_reg_file_c_writedatain_sel = 3;
+				ctrl_mux3to1_shifter_sa_sel = 2;
+				ctrl_shifter_op = 1;
+			end
+			`endif
+			
+			`ifdef SUB
+			FUNC_SUB:
+			begin
+				ctrl_mux3to1_nop_d_sel = 1;
+				ctrl_mux2to1_addersub_opA_sel = 0;
+				ctrl_mux7to1_reg_file_c_writedatain_sel = 6;
+				ctrl_addersub_op = 0;
+			end
+			`endif
+			
+			`ifdef SUBU
+			FUNC_SUBU:
+			begin
+				ctrl_mux3to1_nop_d_sel = 1;
+				ctrl_mux2to1_addersub_opA_sel = 0;
+				ctrl_mux7to1_reg_file_c_writedatain_sel = 6;
+				ctrl_addersub_op = 2;
+			end
+			`endif
+			
+			`ifdef XOR
+			FUNC_XOR:
+			begin
+				ctrl_mux3to1_nop_d_sel = 1;
+				ctrl_mux7to1_reg_file_c_writedatain_sel = 4;
+				ctrl_logic_unit_op = 2;
+			end
+			`endif
+		endcase
+	    `ifdef SW
+		OP_SW:
+		begin
+			ctrl_mux3to1_nop_d_sel = 2;
+			ctrl_mux2to1_addersub_opA_sel = 0;
+			ctrl_addersub_op = 3;
+			ctrl_data_mem_op = 8;
+		end
+		`endif
+		
+		`ifdef XORI
+		OP_XORI:
+		begin
+			ctrl_mux3to1_nop_d_sel = 2;
+			ctrl_mux7to1_reg_file_c_writedatain_sel = 4;
+			ctrl_logic_unit_op = 2;
+		end
+		`endif
+	endcase
+end
+		//Logic for enable signals in Pipe Stage 2
+always@(pipereg8_q or pipereg9_q or pipereg10_q[0] or ctrl_shifter_stalled or ctrl_data_mem_stalled)
+begin
+	ctrl_reg_file_c_we = 0;
+	ctrl_lo_reg_en = 0;
+	ctrl_branchresolve_en = 0;
+	ctrl_hi_reg_en = 0;
+	ctrl_ifetch_we = 0;
+	ctrl_data_mem_en = 0;
+	ctrl_shifter_start = 0;
+	casex (pipereg8_q)
+		
+		`ifdef ADDI
+		OP_ADDI:
+			ctrl_reg_file_c_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+		`endif
+		
+		`ifdef ADDIU			
+		OP_ADDIU:
+			ctrl_reg_file_c_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+		`endif
+		
+		`ifdef ANDI		
+		OP_ANDI:
+			ctrl_reg_file_c_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+		`endif
+		
+		`ifdef BEQ
+		OP_BEQ:
+		begin
+			ctrl_branchresolve_en = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+			ctrl_ifetch_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+		end
+		`endif
+		
+		`ifdef BGTZ
+		OP_BGTZ:
+		begin
+			ctrl_branchresolve_en = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+			ctrl_ifetch_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+		end
+		`endif
+		
+		`ifdef BLEZ
+		OP_BLEZ:
+		begin
+			ctrl_branchresolve_en = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+			ctrl_ifetch_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+		end
+		`endif
+		
+		`ifdef BNE
+		OP_BNE:
+		begin
+			ctrl_branchresolve_en = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+			ctrl_ifetch_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+		end
+		`endif
+		
+		`ifdef J
+		OP_J:
+			ctrl_ifetch_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+		`endif
+		
+		`ifdef JAL			
+		OP_JAL:
+		begin
+			ctrl_reg_file_c_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+			ctrl_ifetch_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+		end
+		`endif
+		
+		`ifdef LB
+		OP_LB:
+		begin
+			ctrl_reg_file_c_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+			ctrl_data_mem_en = 1 &~1'b0;
+		end
+		`endif
+		
+		`ifdef LBU
+		OP_LBU:
+		begin
+			ctrl_reg_file_c_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+			ctrl_data_mem_en = 1 &~1'b0;
+		end
+		`endif
+		
+		`ifdef LH
+		OP_LH:
+		begin
+			ctrl_reg_file_c_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+			ctrl_data_mem_en = 1 &~1'b0;
+		end
+		`endif
+		
+		`ifdef LHU
+		OP_LHU:
+		begin
+			ctrl_reg_file_c_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+			ctrl_data_mem_en = 1 &~1'b0;
+		end
+		`endif
+		
+		`ifdef LUI
+		OP_LUI:
+		begin
+			ctrl_reg_file_c_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+			ctrl_shifter_start = 1 &~1'b0;
+		end
+		`endif
+		
+		`ifdef LW
+		OP_LW:
+		begin
+			ctrl_reg_file_c_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+			ctrl_data_mem_en = 1 &~1'b0;
+		end
+		`endif
+		
+		`ifdef ORI		
+		OP_ORI:
+			ctrl_reg_file_c_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+		`endif
+		
+		OP_REGIMM:
+		casex (pipereg10_q[0])
+		   `ifdef BGEZ			
+			FUNC_BGEZ:
+			begin
+				ctrl_branchresolve_en = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+				ctrl_ifetch_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+			end
+			`endif
+			
+			`ifdef BLTZ			
+			FUNC_BLTZ:
+			begin
+				ctrl_branchresolve_en = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+				ctrl_ifetch_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+			end
+		    `endif
+		endcase
+		
+		`ifdef SB
+		OP_SB:
+			ctrl_data_mem_en = 1 &~1'b0;
+		`endif
+		
+		`ifdef SH	
+		OP_SH:
+			ctrl_data_mem_en = 1 &~1'b0;
+		`endif
+		
+		`ifdef SLTI				
+		OP_SLTI:
+			ctrl_reg_file_c_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+		`endif
+		
+		`ifdef SLTIU
+		OP_SLTIU:
+			ctrl_reg_file_c_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+		`endif
+		
+
+		OP_SPECIAL:
+		casex (pipereg9_q)
+		    `ifdef ADD
+			FUNC_ADD:
+				ctrl_reg_file_c_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+		    `endif
+		    
+		    `ifdef ADDU			  
+			FUNC_ADDU:
+				ctrl_reg_file_c_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+		    `endif
+		    
+		    `ifdef AND
+			FUNC_AND:
+				ctrl_reg_file_c_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+		    `endif
+		    
+		    `ifdef JALR
+			FUNC_JALR:
+			begin
+				ctrl_reg_file_c_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+				ctrl_ifetch_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+			end
+		    `endif
+		    
+		    `ifdef JR
+			FUNC_JR:
+				ctrl_ifetch_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+			`endif
+			
+			`ifdef MFHI
+			FUNC_MFHI:
+				ctrl_reg_file_c_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+			`endif
+			
+			`ifdef MFLO
+			FUNC_MFLO:
+				ctrl_reg_file_c_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+			`endif
+			
+			`ifdef MULT
+			FUNC_MULT:
+			begin
+				ctrl_lo_reg_en = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+				ctrl_hi_reg_en = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+			end
+			`endif
+			
+			`ifdef MULTU
+			FUNC_MULTU:
+			begin
+				ctrl_lo_reg_en = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+				ctrl_hi_reg_en = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+			end
+			`endif
+			
+			`ifdef NOR
+			FUNC_NOR:
+				ctrl_reg_file_c_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+			`endif
+			
+			`ifdef OR
+			FUNC_OR:
+				ctrl_reg_file_c_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+			`endif
+			
+			`ifdef SLL
+			FUNC_SLL:
+			begin
+				ctrl_reg_file_c_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+				ctrl_shifter_start = 1 &~1'b0;
+			end
+			`endif
+			
+			`ifdef SLLV
+			FUNC_SLLV:
+			begin
+				ctrl_reg_file_c_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+				ctrl_shifter_start = 1 &~1'b0;
+			end
+			`endif
+			
+			`ifdef SLT
+			FUNC_SLT:
+				ctrl_reg_file_c_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+			`endif
+			
+			`ifdef SLTU
+			FUNC_SLTU:
+				ctrl_reg_file_c_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+			`endif
+			
+			`ifdef SRA
+			FUNC_SRA:
+			begin
+				ctrl_reg_file_c_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+				ctrl_shifter_start = 1 &~1'b0;
+			end
+			`endif
+			
+			`ifdef SRAV
+			FUNC_SRAV:
+			begin
+				ctrl_reg_file_c_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+				ctrl_shifter_start = 1 &~1'b0;
+			end
+			`endif
+			
+			`ifdef SRL
+			FUNC_SRL:
+			begin
+				ctrl_reg_file_c_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+				ctrl_shifter_start = 1 &~1'b0;
+			end
+			`endif
+			
+			`ifdef SRLV
+			FUNC_SRLV:
+			begin
+				ctrl_reg_file_c_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+				ctrl_shifter_start = 1 &~1'b0;
+			end
+			`endif
+			
+			`ifdef SUB
+			FUNC_SUB:
+				ctrl_reg_file_c_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+			`endif
+			
+			`ifdef SUB
+			FUNC_SUBU:
+				ctrl_reg_file_c_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+			`endif
+			
+			`ifdef XOR
+			FUNC_XOR:
+				ctrl_reg_file_c_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+			`endif	
+		endcase
+		
+		`ifdef SW
+		OP_SW:
+			ctrl_data_mem_en = 1 &~1'b0;
+		`endif
+		
+		`ifdef XORI			
+		OP_XORI:
+			ctrl_reg_file_c_we = 1 &~ctrl_data_mem_stalled&~ctrl_shifter_stalled&~1'b0;
+		`endif	
+	endcase
+end
+
+/********* Stall Network & PipeReg Control ********/
+assign stall_out_stage1 = stall_out_stage2|haz_zeroer0_q_pipereg5_q|haz_zeroer_q_pipereg5_q;
+assign ctrl_pipereg10_en = ~stall_out_stage1;
+assign ctrl_pipereg9_en = ~stall_out_stage1;
+assign ctrl_pipereg8_en = ~stall_out_stage1;
+assign ctrl_pipereg1_en = ~stall_out_stage1;
+assign ctrl_pipereg3_en = ~stall_out_stage1;
+assign ctrl_pipereg2_en = ~stall_out_stage1;
+assign ctrl_pipereg5_en = ~stall_out_stage1;
+assign ctrl_pipereg_en = ~stall_out_stage1;
+assign stall_out_stage2 = 1'b0|ctrl_data_mem_stalled|ctrl_shifter_stalled;
+assign branch_mispred = (((ctrl_ifetch_op==1) || (ctrl_ifetch_op==0 && mux6to1_ifetch_load_out)) & ctrl_ifetch_we);
+assign stall_2nd_delayslot = &has_delayslot;
+assign has_delayslot = 0;
+assign squash_stage1 = ((stall_out_stage1&~stall_out_stage2))|~resetn;
+assign ctrl_pipereg10_resetn = ~squash_stage1;
+assign ctrl_pipereg9_resetn = ~squash_stage1;
+assign ctrl_pipereg8_resetn = ~squash_stage1;
+assign ctrl_pipereg1_resetn = ~squash_stage1;
+assign ctrl_pipereg3_resetn = ~squash_stage1;
+assign ctrl_pipereg2_resetn = ~squash_stage1;
+assign ctrl_pipereg5_resetn = ~squash_stage1;
+assign ctrl_pipereg_resetn = ~squash_stage1;
+assign ctrl_pipereg_squashn = ~(0);
+assign ctrl_pipereg5_squashn = ~(0);
+assign ctrl_pipereg2_squashn = ~(0);
+assign ctrl_pipereg3_squashn = ~(0);
+assign ctrl_pipereg1_squashn = ~(0);
+assign ctrl_pipereg8_squashn = ~(0);
+assign ctrl_pipereg9_squashn = ~(0);
+assign ctrl_pipereg10_squashn = ~(0);
+assign ctrl_ifetch_squashn = ~(0);
+assign squash_stage2 = ((stall_out_stage2&~1'b0))|~resetn;
+
+/****************************** Datapath **************************/
+/******************** Hazard Detection Logic ***********************/
+assign haz_zeroer0_q_pipereg5_q = (zeroer0_q==pipereg5_q) && (|zeroer0_q);
+assign haz_zeroer_q_pipereg5_q = (zeroer_q==pipereg5_q) && (|zeroer_q);
+
+/*************** DATAPATH COMPONENTS **************/
+addersub addersub (
+	.opB(nop_q),
+	.opA(mux2to1_addersub_opA_out),
+	.op(ctrl_addersub_op),
+	.result_slt(addersub_result_slt),
+	.result(addersub_result));
+	defparam
+		addersub.WIDTH=32;
+
+logic_unit logic_unit (
+	.opB(nop_q),
+	.opA(reg_file_a_readdataout),
+	.op(ctrl_logic_unit_op),
+	.result(logic_unit_result));
+	defparam
+		logic_unit.WIDTH=32;
+
+shifter shifter (
+	.clk(clk),
+	.resetn(resetn),
+	.dst(pipereg5_q),
+	.sa(mux3to1_shifter_sa_out),
+	.opB(nop_q),
+	.op(ctrl_shifter_op),
+	.start(ctrl_shifter_start),
+	.stalled(ctrl_shifter_stalled),
+	.result(shifter_result));
+	defparam
+		shifter.WIDTH=32;
+
+mul mul (
+	.opB(reg_file_b_readdataout),
+	.opA(reg_file_a_readdataout),
+	.op(ctrl_mul_op),
+	.lo(mul_lo),
+	.hi(mul_hi));
+	defparam
+		mul.WIDTH=32;
+
+ifetch ifetch (
+	.clk(clk),
+	.resetn(resetn),
+	.boot_iaddr(boot_iaddr),
+	.boot_idata(boot_idata),
+	.boot_iwe(boot_iwe),
+	.load(mux6to1_ifetch_load_out),
+	.load_data(mux3to1_ifetch_load_data_out),
+	.op(ctrl_ifetch_op),
+	.we(ctrl_ifetch_we),
+	.squashn(ctrl_ifetch_squashn),
+	.en(ctrl_ifetch_en),
+	.pc_out(ifetch_pc_out),
+	.instr(ifetch_instr),
+	.opcode(ifetch_opcode),
+	.func(ifetch_func),
+	.rs(ifetch_rs),
+	.rt(ifetch_rt),
+	.rd(ifetch_rd),
+	.instr_index(ifetch_instr_index),
+	.offset(ifetch_offset),
+	.sa(ifetch_sa),
+	.next_pc(ifetch_next_pc));
+
+data_mem data_mem (
+	.clk(clk),
+	.resetn(resetn),
+	.boot_daddr(boot_daddr),
+	.boot_ddata(boot_ddata),
+	.boot_dwe(boot_dwe),
+	.d_address(addersub_result),
+	.d_writedata(reg_file_b_readdataout),
+	.op(ctrl_data_mem_op),
+	.en(ctrl_data_mem_en),
+	.stalled(ctrl_data_mem_stalled),
+	.d_loadresult(data_mem_d_loadresult));
+
+pcadder pcadder (
+	.offset(pipereg_q),
+	.pc(pipereg3_q),
+	.result(pcadder_result));
+
+signext16 signext16 (
+	.in(ifetch_offset),
+	.out(signext16_out));
+
+reg_file reg_file (
+	.clk(clk),
+	.resetn(resetn),
+	.c_writedatain(mux7to1_reg_file_c_writedatain_out),
+	.c_reg(pipereg5_q),
+	.b_reg(zeroer0_q),
+	.a_reg(zeroer_q),
+	.c_we(ctrl_reg_file_c_we),
+	.b_en(ctrl_reg_file_b_en),
+	.a_en(ctrl_reg_file_a_en),
+	.b_readdataout(reg_file_b_readdataout),
+	.a_readdataout(reg_file_a_readdataout));
+
+merge26lo merge26lo (
+	.in2(pipereg1_q),
+	.in1(pipereg3_q),
+	.out(merge26lo_out));
+
+branchresolve branchresolve (
+	.rt(reg_file_b_readdataout),
+	.rs(reg_file_a_readdataout),
+	.en(ctrl_branchresolve_en),
+	.eqz(branchresolve_eqz),
+	.gez(branchresolve_gez),
+	.gtz(branchresolve_gtz),
+	.lez(branchresolve_lez),
+	.ltz(branchresolve_ltz),
+	.ne(branchresolve_ne),
+	.eq(branchresolve_eq));
+	defparam
+		branchresolve.WIDTH=32;
+
+hi_reg hi_reg (
+	.clk(clk),
+	.resetn(resetn),
+	.d(mul_hi),
+	.en(ctrl_hi_reg_en),
+	.q(hi_reg_q));
+	defparam
+		hi_reg.WIDTH=32;
+
+lo_reg lo_reg (
+	.clk(clk),
+	.resetn(resetn),
+	.d(mul_lo),
+	.en(ctrl_lo_reg_en),
+	.q(lo_reg_q));
+	defparam
+		lo_reg.WIDTH=32;
+
+constant const6 (
+	.out(const6_out));
+	defparam
+		const6.WIDTH=32,
+		const6.VAL=0;
+
+constant const7 (
+	.out(const7_out));
+	defparam
+		const7.WIDTH=32,
+		const7.VAL=16;
+
+constant constant (
+	.out(const_out));
+	defparam
+		constant.WIDTH=32,
+		constant.VAL=31;
+
+pipereg pipereg (
+	.clk(clk),
+	.resetn(ctrl_pipereg_resetn),
+	.d(mux2to1_pipereg_d_out),
+	.squashn(ctrl_pipereg_squashn),
+	.en(ctrl_pipereg_en),
+	.q(pipereg_q));
+	defparam
+		pipereg.WIDTH=32;
+
+pipereg pipereg1 (
+	.clk(clk),
+	.resetn(ctrl_pipereg1_resetn),
+	.d(ifetch_instr_index),
+	.squashn(ctrl_pipereg1_squashn),
+	.en(ctrl_pipereg1_en),
+	.q(pipereg1_q));
+	defparam
+		pipereg1.WIDTH=26;
+
+pipereg pipereg2 (
+	.clk(clk),
+	.resetn(ctrl_pipereg2_resetn),
+	.d(ifetch_sa),
+	.squashn(ctrl_pipereg2_squashn),
+	.en(ctrl_pipereg2_en),
+	.q(pipereg2_q));
+	defparam
+		pipereg2.WIDTH=5;
+
+pipereg pipereg5 (
+	.clk(clk),
+	.resetn(ctrl_pipereg5_resetn),
+	.d(zeroer4_q),
+	.squashn(ctrl_pipereg5_squashn),
+	.en(ctrl_pipereg5_en),
+	.q(pipereg5_q));
+	defparam
+		pipereg5.WIDTH=5;
+
+pipereg pipereg3 (
+	.clk(clk),
+	.resetn(ctrl_pipereg3_resetn),
+	.d(ifetch_pc_out),
+	.squashn(ctrl_pipereg3_squashn),
+	.en(ctrl_pipereg3_en),
+	.q(pipereg3_q));
+	defparam
+		pipereg3.WIDTH=32;
+
+fakedelay fakedelay (
+	.clk(clk),
+	.d(ifetch_pc_out),
+	.q(fakedelay_q));
+	defparam
+		fakedelay.WIDTH=32;
+
+nop nop (
+	.d(mux3to1_nop_d_out),
+	.q(nop_q));
+	defparam
+		nop.WIDTH=32;
+
+zeroer zeroer (
+	.d(ifetch_rs),
+	.en(ctrl_zeroer_en),
+	.q(zeroer_q));
+	defparam
+		zeroer.WIDTH=5;
+
+zeroer zeroer0 (
+	.d(ifetch_rt),
+	.en(ctrl_zeroer0_en),
+	.q(zeroer0_q));
+	defparam
+		zeroer0.WIDTH=5;
+
+zeroer zeroer4 (
+	.d(mux3to1_zeroer4_d_out),
+	.en(ctrl_zeroer4_en),
+	.q(zeroer4_q));
+	defparam
+		zeroer4.WIDTH=5;
+
+		// Multiplexor mux3to1_shifter_sa instantiation
+assign mux3to1_shifter_sa_out = 
+	(ctrl_mux3to1_shifter_sa_sel==2) ? reg_file_a_readdataout :
+	(ctrl_mux3to1_shifter_sa_sel==1) ? const7_out :
+	pipereg2_q;
+
+		// Multiplexor mux3to1_ifetch_load_data instantiation
+assign mux3to1_ifetch_load_data_out = 
+	(ctrl_mux3to1_ifetch_load_data_sel==2) ? pcadder_result :
+	(ctrl_mux3to1_ifetch_load_data_sel==1) ? merge26lo_out :
+	reg_file_a_readdataout;
+
+		// Multiplexor mux6to1_ifetch_load instantiation
+assign mux6to1_ifetch_load_out = 
+	(ctrl_mux6to1_ifetch_load_sel==5) ? branchresolve_eq :
+	(ctrl_mux6to1_ifetch_load_sel==4) ? branchresolve_ne :
+	(ctrl_mux6to1_ifetch_load_sel==3) ? branchresolve_lez :
+	(ctrl_mux6to1_ifetch_load_sel==2) ? branchresolve_ltz :
+	(ctrl_mux6to1_ifetch_load_sel==1) ? branchresolve_gez :
+	branchresolve_gtz;
+
+		// Multiplexor mux7to1_reg_file_c_writedatain instantiation
+assign mux7to1_reg_file_c_writedatain_out = 
+	(ctrl_mux7to1_reg_file_c_writedatain_sel==6) ? addersub_result :
+	(ctrl_mux7to1_reg_file_c_writedatain_sel==5) ? addersub_result_slt :
+	(ctrl_mux7to1_reg_file_c_writedatain_sel==4) ? logic_unit_result :
+	(ctrl_mux7to1_reg_file_c_writedatain_sel==3) ? shifter_result :
+	(ctrl_mux7to1_reg_file_c_writedatain_sel==2) ? data_mem_d_loadresult :
+	
+	(ctrl_mux7to1_reg_file_c_writedatain_sel==8) ? tempFifoDataInNorth : //Deepak
+	(ctrl_mux7to1_reg_file_c_writedatain_sel==9) ? tempFifoDataInSouth : //Deepak
+	(ctrl_mux7to1_reg_file_c_writedatain_sel==10)? tempFifoDataInEast : //Deepak
+	(ctrl_mux7to1_reg_file_c_writedatain_sel==11)? tempFifoDataInWest : //Deepak	
+
+	(ctrl_mux7to1_reg_file_c_writedatain_sel==12)? northEmpty : //Deepak	
+	(ctrl_mux7to1_reg_file_c_writedatain_sel==13)? southEmpty : //Deepak	
+	(ctrl_mux7to1_reg_file_c_writedatain_sel==14)? eastEmpty  : //Deepak	
+	(ctrl_mux7to1_reg_file_c_writedatain_sel==15)? westEmpty  : //Deepak	
+	
+	(ctrl_mux7to1_reg_file_c_writedatain_sel==16)? northFull  : //Deepak	
+	(ctrl_mux7to1_reg_file_c_writedatain_sel==17)? southFull  : //Deepak	
+	(ctrl_mux7to1_reg_file_c_writedatain_sel==18)? eastFull   : //Deepak	
+	(ctrl_mux7to1_reg_file_c_writedatain_sel==19)? westFull   : //Deepak	
+	
+	(ctrl_mux7to1_reg_file_c_writedatain_sel==1) ? hi_reg_q :
+	lo_reg_q;
+
+		// Multiplexor mux2to1_addersub_opA instantiation
+assign mux2to1_addersub_opA_out = 
+	(ctrl_mux2to1_addersub_opA_sel==1) ? fakedelay_q :
+	reg_file_a_readdataout;
+
+		// Multiplexor mux2to1_pipereg_d instantiation
+assign mux2to1_pipereg_d_out = 
+	(ctrl_mux2to1_pipereg_d_sel==1) ? ifetch_offset :
+	signext16_out;
+
+		// Multiplexor mux3to1_zeroer4_d instantiation
+assign mux3to1_zeroer4_d_out = 
+	(ctrl_mux3to1_zeroer4_d_sel==2) ? ifetch_rt :
+	(ctrl_mux3to1_zeroer4_d_sel==1) ? ifetch_rd :
+	const_out;
+
+		// Multiplexor mux3to1_nop_d instantiation
+assign mux3to1_nop_d_out = 
+	(ctrl_mux3to1_nop_d_sel==2) ? pipereg_q :
+	(ctrl_mux3to1_nop_d_sel==1) ? reg_file_b_readdataout :
+	const6_out;
+
+pipereg pipereg8 (
+	.clk(clk),
+	.resetn(ctrl_pipereg8_resetn),
+	.d(ifetch_opcode),
+	.squashn(ctrl_pipereg8_squashn),
+	.en(ctrl_pipereg8_en),
+	.q(pipereg8_q));
+	defparam
+		pipereg8.WIDTH=6;
+
+pipereg pipereg9 (
+	.clk(clk),
+	.resetn(ctrl_pipereg9_resetn),
+	.d(ifetch_func),
+	.squashn(ctrl_pipereg9_squashn),
+	.en(ctrl_pipereg9_en),
+	.q(pipereg9_q));
+	defparam
+		pipereg9.WIDTH=6;
+
+pipereg pipereg10 (
+	.clk(clk),
+	.resetn(ctrl_pipereg10_resetn),
+	.d(ifetch_rt),
+	.squashn(ctrl_pipereg10_squashn),
+	.en(ctrl_pipereg10_en),
+	.q(pipereg10_q));
+	defparam
+		pipereg10.WIDTH=5;
+
+
+
+endmodule
diff --git vtr_flow/benchmarks/verilog/mcml_yosys.v vtr_flow/benchmarks/verilog/mcml_yosys.v
new file mode 100755
index 0000000..300c65f
--- /dev/null
+++ vtr_flow/benchmarks/verilog/mcml_yosys.v
@@ -0,0 +1,24783 @@
+
+// Skeleton
+// Reads constants and instantiates all modules used by the hardware components
+
+//parameter BIT_WIDTH=32;
+//parameter LAYER_WIDTH=3;
+`define TRIG_WIDTH 5'b01010 //10;
+`define PIPELINE_DEPTH_UPPER_LIMIT 10'b0100000000 //256;
+`define ABSORB_ADDR_WIDTH 6'b010000 //16;
+`define ABSORB_WORD_WIDTH 7'b01000000 //64;
+`define WSCALE 22'b0111010100101111111111 //1919999;
+
+//From Roulette
+//`define BIT_WIDTH 7'b0100000
+//`define LAYER_WIDTH 6'b000011 
+`define LEFTSHIFT 6'b000011         // 2^3=8=1/0.125 where 0.125 = CHANCE of roulette
+`define INTCHANCE 32'b00100000000000000000000000000000 //Based on 32 bit rand num generator
+`define MIN_WEIGHT 9'b011001000 
+
+// From Boundary
+`define BIT_WIDTH 7'b0100000
+`define LAYER_WIDTH 6'b000011
+`define INTMAX 32'b01111111111111111111111111111111
+`define INTMIN 32'b10000000000000000000000000000000
+`define DIVIDER_LATENCY 6'b011110
+`define FINAL_LATENCY 6'b011100
+`define MULT_LATENCY 1'b1
+`define ASPECT_RATIO 6'b000111
+`define TOTAL_LATENCY 7'b0111100
+
+//From Move
+//`define BIT_WIDTH 6'b100000
+//`define LAYER_WIDTH 6'b000011
+`define LOGSCALEFACTOR 6'b000101
+`define MAXLOG 32'b10110001011100100001011111110111		//Based on 32 bit unsigned rand num generator
+`define CONST_MOVE_AMOUNT 15'b110000110101000  //Used for testing purposes only
+`define MUTMAX_BITS 6'b001111
+
+//From Hop
+//`define BIT_WIDTH 6'b100000
+//`define LAYER_WIDTH 6'b000011
+//`define INTMAX 32'b01111111111111111111111111111111
+//`define INTMIN 32'b10000000000000000000000000000000
+
+//From LogCalc
+//`define BIT_WIDTH 7'b0100000
+`define MANTISSA_PRECISION 6'b001010
+`define LOG2_BIT_WIDTH 6'b000110
+`define LOG2 28'b0101100010111001000010111111
+
+//From DropSpinWrapper
+`define NR 10'b0100000000             
+`define NZ 10'b0100000000              
+
+`define NR_EXP 5'b01000              //meaning `NR=2^`NR_exp or 2^8=256
+`define RGRID_SCLAE_EXP 6'b010101    //2^21 = RGRID_SCALE
+`define ZGRID_SCLAE_EXP 6'b010101    //2^21 = ZGRID_SCALE
+
+
+//`define BIT_WIDTH 7'b0100000
+`define BIT_WIDTH_2 8'b01000000
+`define WORD_WIDTH 8'b01000000
+`define ADDR_WIDTH 6'b010000          //256x256=2^8*2^8=2^16
+
+
+//From scatterer:
+`define DIV 6'b010100//20;
+`define SQRT 5'b01010 //10;
+`define LAT 7'b0100101 //DIV + SQRT + 7;
+`define INTMAX_2 {32'h3FFFFFFF,32'h00000001}
+//`define INTMAX 32'b01111111111111111111111111111111//2147483647;
+//`define INTMIN 32'b10000000000000000000000000000001//-2147483647;
+`define INTMAXMinus3 32'b01111111111111111111111111111100//2147483644;
+`define negINTMAXPlus3 32'b10000000000000000000000000000100//-2147483644;
+
+//From Reflector:
+`define INTMAX_2_ref {32'h3FFFFFFF,32'hFFFFFFFF}
+
+(* top *)
+module mcml (
+	reset,
+	clk_IBUF,	
+
+	constants,
+	read_constants,
+
+	result, 
+	inc_result,
+
+	calc_in_progress
+	);
+
+// Total number of constants
+//parameter LAST_CONSTANT = 104;
+//parameter NUM_FRESNELS = 128;
+//parameter NUM_TRIG_ELS = 1024;
+//parameter ABSORB_ADDR_WIDTH=16;
+//parameter ABSORB_WORD_WIDTH=64;
+//parameter BIT_WIDTH = 32;
+
+input				reset;
+input clk_IBUF;
+wire clk;
+bufgctrl b(.i({1'bx, clk_IBUF}), .s(2'bxx), .ce(2'bxx), .ignore(2'bxx), .o(clk));
+input [31:0]		constants;
+input				read_constants;
+input				inc_result;
+
+output				calc_in_progress;
+output [31:0]		result;
+reg					calc_in_progress;
+reg [31:0]			result;
+
+
+//integer i;
+
+wire [31:0] mem_fres_up, mem_fres_down, mem_sint, mem_cost;
+
+// photon calculator
+
+wire reset;
+
+// Scatterer Reflector memory look-up
+wire [12:0] tindex;
+wire [9:0] fresIndex;
+
+//   DeadOrAlive Module (nothing)
+
+// Final results
+wire [16-1:0] absorb_rdaddress, absorb_wraddress;
+wire absorb_wren;
+wire [64-1:0] absorb_data;
+wire [64-1:0] absorb_q;
+
+// Flag when final results ready
+wire done;
+reg enable;
+reg reset_calculator;
+
+// Combinational drivers
+//reg [31:0]			c_const[104 - 1:0];
+reg [31:0]			c_const__103;
+reg [31:0]			c_const__102;
+reg [31:0]			c_const__101;
+reg [31:0]			c_const__100;
+reg [31:0]			c_const__99;
+reg [31:0]			c_const__98;
+reg [31:0]			c_const__97;
+reg [31:0]			c_const__96;
+reg [31:0]			c_const__95;
+reg [31:0]			c_const__94;
+reg [31:0]			c_const__93;
+reg [31:0]			c_const__92;
+reg [31:0]			c_const__91;
+reg [31:0]			c_const__90;
+reg [31:0]			c_const__89;
+reg [31:0]			c_const__88;
+reg [31:0]			c_const__87;
+reg [31:0]			c_const__86;
+reg [31:0]			c_const__85;
+reg [31:0]			c_const__84;
+reg [31:0]			c_const__83;
+reg [31:0]			c_const__82;
+reg [31:0]			c_const__81;
+reg [31:0]			c_const__80;
+reg [31:0]			c_const__79;
+reg [31:0]			c_const__78;
+reg [31:0]			c_const__77;
+reg [31:0]			c_const__76;
+reg [31:0]			c_const__75;
+reg [31:0]			c_const__74;
+reg [31:0]			c_const__73;
+reg [31:0]			c_const__72;
+reg [31:0]			c_const__71;
+reg [31:0]			c_const__70;
+reg [31:0]			c_const__69;
+reg [31:0]			c_const__68;
+reg [31:0]			c_const__67;
+reg [31:0]			c_const__66;
+reg [31:0]			c_const__65;
+reg [31:0]			c_const__64;
+reg [31:0]			c_const__63;
+reg [31:0]			c_const__62;
+reg [31:0]			c_const__61;
+reg [31:0]			c_const__60;
+reg [31:0]			c_const__59;
+reg [31:0]			c_const__58;
+reg [31:0]			c_const__57;
+reg [31:0]			c_const__56;
+reg [31:0]			c_const__55;
+reg [31:0]			c_const__54;
+reg [31:0]			c_const__53;
+reg [31:0]			c_const__52;
+reg [31:0]			c_const__51;
+reg [31:0]			c_const__50;
+reg [31:0]			c_const__49;
+reg [31:0]			c_const__48;
+reg [31:0]			c_const__47;
+reg [31:0]			c_const__46;
+reg [31:0]			c_const__45;
+reg [31:0]			c_const__44;
+reg [31:0]			c_const__43;
+reg [31:0]			c_const__42;
+reg [31:0]			c_const__41;
+reg [31:0]			c_const__40;
+reg [31:0]			c_const__39;
+reg [31:0]			c_const__38;
+reg [31:0]			c_const__37;
+reg [31:0]			c_const__36;
+reg [31:0]			c_const__35;
+reg [31:0]			c_const__34;
+reg [31:0]			c_const__33;
+reg [31:0]			c_const__32;
+reg [31:0]			c_const__31;
+reg [31:0]			c_const__30;
+reg [31:0]			c_const__29;
+reg [31:0]			c_const__28;
+reg [31:0]			c_const__27;
+reg [31:0]			c_const__26;
+reg [31:0]			c_const__25;
+reg [31:0]			c_const__24;
+reg [31:0]			c_const__23;
+reg [31:0]			c_const__22;
+reg [31:0]			c_const__21;
+reg [31:0]			c_const__20;
+reg [31:0]			c_const__19;
+reg [31:0]			c_const__18;
+reg [31:0]			c_const__17;
+reg [31:0]			c_const__16;
+reg [31:0]			c_const__15;
+reg [31:0]			c_const__14;
+reg [31:0]			c_const__13;
+reg [31:0]			c_const__12;
+reg [31:0]			c_const__11;
+reg [31:0]			c_const__10;
+reg [31:0]			c_const__9;
+reg [31:0]			c_const__8;
+reg [31:0]			c_const__7;
+reg [31:0]			c_const__6;
+reg [31:0]			c_const__5;
+reg [31:0]			c_const__4;
+reg [31:0]			c_const__3;
+reg [31:0]			c_const__2;
+reg [31:0]			c_const__1;
+reg [31:0]			c_const__0;
+
+
+reg [12:0]			c_counter;
+reg	c_toggle;
+
+reg [16-1:0] c_absorb_read_counter, c_absorb_write_counter;
+reg [16-1:0] absorb_rdaddress_mux, absorb_wraddress_mux;
+reg [64-1:0] absorb_data_mux;
+reg absorb_wren_mux;
+
+reg [3:0]			c_state;
+
+reg [31:0]			c_result;
+reg					c_calc_in_progress;
+
+reg wren_fres_up, wren_fres_down, wren_sinp, wren_cosp, wren_sint, wren_cost;
+reg [2:0] mem_layer;
+
+// Registered drivers
+//reg [31:0]			r_const[104 - 1:0];
+reg [31:0]			r_const__103;
+reg [31:0]			r_const__102;
+reg [31:0]			r_const__101;
+reg [31:0]			r_const__100;
+reg [31:0]			r_const__99;
+reg [31:0]			r_const__98;
+reg [31:0]			r_const__97;
+reg [31:0]			r_const__96;
+reg [31:0]			r_const__95;
+reg [31:0]			r_const__94;
+reg [31:0]			r_const__93;
+reg [31:0]			r_const__92;
+reg [31:0]			r_const__91;
+reg [31:0]			r_const__90;
+reg [31:0]			r_const__89;
+reg [31:0]			r_const__88;
+reg [31:0]			r_const__87;
+reg [31:0]			r_const__86;
+reg [31:0]			r_const__85;
+reg [31:0]			r_const__84;
+reg [31:0]			r_const__83;
+reg [31:0]			r_const__82;
+reg [31:0]			r_const__81;
+reg [31:0]			r_const__80;
+reg [31:0]			r_const__79;
+reg [31:0]			r_const__78;
+reg [31:0]			r_const__77;
+reg [31:0]			r_const__76;
+reg [31:0]			r_const__75;
+reg [31:0]			r_const__74;
+reg [31:0]			r_const__73;
+reg [31:0]			r_const__72;
+reg [31:0]			r_const__71;
+reg [31:0]			r_const__70;
+reg [31:0]			r_const__69;
+reg [31:0]			r_const__68;
+reg [31:0]			r_const__67;
+reg [31:0]			r_const__66;
+reg [31:0]			r_const__65;
+reg [31:0]			r_const__64;
+reg [31:0]			r_const__63;
+reg [31:0]			r_const__62;
+reg [31:0]			r_const__61;
+reg [31:0]			r_const__60;
+reg [31:0]			r_const__59;
+reg [31:0]			r_const__58;
+reg [31:0]			r_const__57;
+reg [31:0]			r_const__56;
+reg [31:0]			r_const__55;
+reg [31:0]			r_const__54;
+reg [31:0]			r_const__53;
+reg [31:0]			r_const__52;
+reg [31:0]			r_const__51;
+reg [31:0]			r_const__50;
+reg [31:0]			r_const__49;
+reg [31:0]			r_const__48;
+reg [31:0]			r_const__47;
+reg [31:0]			r_const__46;
+reg [31:0]			r_const__45;
+reg [31:0]			r_const__44;
+reg [31:0]			r_const__43;
+reg [31:0]			r_const__42;
+reg [31:0]			r_const__41;
+reg [31:0]			r_const__40;
+reg [31:0]			r_const__39;
+reg [31:0]			r_const__38;
+reg [31:0]			r_const__37;
+reg [31:0]			r_const__36;
+reg [31:0]			r_const__35;
+reg [31:0]			r_const__34;
+reg [31:0]			r_const__33;
+reg [31:0]			r_const__32;
+reg [31:0]			r_const__31;
+reg [31:0]			r_const__30;
+reg [31:0]			r_const__29;
+reg [31:0]			r_const__28;
+reg [31:0]			r_const__27;
+reg [31:0]			r_const__26;
+reg [31:0]			r_const__25;
+reg [31:0]			r_const__24;
+reg [31:0]			r_const__23;
+reg [31:0]			r_const__22;
+reg [31:0]			r_const__21;
+reg [31:0]			r_const__20;
+reg [31:0]			r_const__19;
+reg [31:0]			r_const__18;
+reg [31:0]			r_const__17;
+reg [31:0]			r_const__16;
+reg [31:0]			r_const__15;
+reg [31:0]			r_const__14;
+reg [31:0]			r_const__13;
+reg [31:0]			r_const__12;
+reg [31:0]			r_const__11;
+reg [31:0]			r_const__10;
+reg [31:0]			r_const__9;
+reg [31:0]			r_const__8;
+reg [31:0]			r_const__7;
+reg [31:0]			r_const__6;
+reg [31:0]			r_const__5;
+reg [31:0]			r_const__4;
+reg [31:0]			r_const__3;
+reg [31:0]			r_const__2;
+reg [31:0]			r_const__1;
+reg [31:0]			r_const__0;
+
+
+
+reg [12:0]			r_counter;
+reg [16-1:0] r_absorb_read_counter;
+reg [16-1:0] r_absorb_write_counter;
+reg [3:0]			r_state;
+reg	r_toggle;
+
+// Skeleton program states
+parameter [3:0] ERROR_ST = 4'b0000, 
+				READ1_ST = 4'b0001, 
+				READ2_ST = 4'b0010, 
+				READ3_ST = 4'b0011, 
+				READ4_ST = 4'b0100, 
+				READ5_ST = 4'b0101, 
+				RESET_MEM_ST = 4'b0110,
+				CALC_ST = 4'b1000, 
+				DONE1_ST = 4'b1001, 
+				DONE2_ST = 4'b1010, 
+				DONE3_ST = 4'b1011, 
+				DONE4_ST = 4'b1100, 
+				DONE5_ST = 4'b1101, 
+				DONE6_ST = 4'b1110;
+
+// Instantiate lookup memories
+dual_port_mem_zz u_fres_up(clk, constants, {3'b0, fresIndex}, {3'b0, mem_layer, r_counter[6:0]}, wren_fres_up, mem_fres_up);
+dual_port_mem_yy u_fres_down(clk, constants, {3'b0, fresIndex}, {3'b0, mem_layer, r_counter[6:0]}, wren_fres_down, mem_fres_down);
+dual_port_mem_xx u_sint(clk, constants, tindex, {mem_layer, r_counter[9:0]}, wren_sint, mem_sint);
+dual_port_mem_ww u_cost(clk, constants, tindex, {mem_layer, r_counter[9:0]}, wren_cost, mem_cost);
+
+// Reduce size of absorption matrix
+dual absorptionMatrix(   .clk (clk), .data(absorb_data_mux[35:0]), 
+                         .rdaddress(absorb_rdaddress_mux), .wraddress(absorb_wraddress_mux), 
+                         .wren(absorb_wren_mux), .q(absorb_q[35:0]));
+dual2 absorptionMatrix2(   .clk (clk), .data(absorb_data_mux[53:36]), 
+                         .rdaddress(absorb_rdaddress_mux), .wraddress(absorb_wraddress_mux), 
+                         .wren(absorb_wren_mux), .q(absorb_q[53:36]));
+dual3 absorptionMatrix3(   .clk (clk), .data(absorb_data_mux[61:54]), 
+                         .rdaddress(absorb_rdaddress_mux), .wraddress(absorb_wraddress_mux), 
+                         .wren(absorb_wren_mux), .q(absorb_q[61:54]));
+
+						 
+						 //
+						 //peter m test since absorb_q not defined for 63:62
+						 assign absorb_q[63:62] = 2'b00;
+						 
+						 
+PhotonCalculator u_calc (
+	.clock(clk), .reset(reset_calculator), .enable(enable),
+
+	// CONSTANTS
+	.total_photons(r_const__0),
+	
+	.randseed1(r_const__19), .randseed2(r_const__20), .randseed3(r_const__21), .randseed4(r_const__22), .randseed5(r_const__23),
+
+	//Because it is in the module:
+	.initialWeight(32'b00000000000111010100101111111111),
+	
+	//   Mover
+	.OneOver_MutMaxrad_0(r_const__32), .OneOver_MutMaxrad_1(r_const__33), .OneOver_MutMaxrad_2(r_const__34), .OneOver_MutMaxrad_3(r_const__35), .OneOver_MutMaxrad_4(r_const__36), .OneOver_MutMaxrad_5(r_const__37),
+	.OneOver_MutMaxdep_0(r_const__38), .OneOver_MutMaxdep_1(r_const__39), .OneOver_MutMaxdep_2(r_const__40), .OneOver_MutMaxdep_3(r_const__41), .OneOver_MutMaxdep_4(r_const__42), .OneOver_MutMaxdep_5(r_const__43),
+	.OneOver_Mut_0(r_const__26), .OneOver_Mut_1(r_const__27), .OneOver_Mut_2(r_const__28), .OneOver_Mut_3(r_const__29), .OneOver_Mut_4(r_const__30), .OneOver_Mut_5(r_const__31),
+
+	//   BoundaryChecker
+	.z1_0(r_const__50), .z1_1(r_const__51), .z1_2(r_const__52), .z1_3(r_const__53), .z1_4(r_const__54), .z1_5(r_const__55),
+	.z0_0(r_const__44), .z0_1(r_const__45), .z0_2(r_const__46), .z0_3(r_const__47), .z0_4(r_const__48), .z0_5(r_const__49),
+	.mut_0(32'b00000000000000000000000000000000), .mut_1(r_const__2), .mut_2(r_const__3), .mut_3(r_const__4), .mut_4(r_const__5), .mut_5(r_const__6),
+	.maxDepth_over_maxRadius(r_const__1),
+
+	//   Hop (no constants)
+
+	//   Scatterer Reflector Wrapper
+	.down_niOverNt_1(r_const__69), .down_niOverNt_2(r_const__70), .down_niOverNt_3(r_const__71), .down_niOverNt_4(r_const__72), .down_niOverNt_5(r_const__73),
+	.up_niOverNt_1(r_const__75), .up_niOverNt_2(r_const__76), .up_niOverNt_3(r_const__77), .up_niOverNt_4(r_const__78), .up_niOverNt_5(r_const__79),
+	.down_niOverNt_2_1({r_const__81,r_const__87}), .down_niOverNt_2_2({r_const__82,r_const__88}), .down_niOverNt_2_3({r_const__83,r_const__89}), .down_niOverNt_2_4({r_const__84,r_const__90}), .down_niOverNt_2_5({r_const__85,r_const__91}),
+	.up_niOverNt_2_1({r_const__93,r_const__99}), .up_niOverNt_2_2({r_const__94,r_const__100}), .up_niOverNt_2_3({r_const__95,r_const__101}), .up_niOverNt_2_4({r_const__96,r_const__102}), .up_niOverNt_2_5({r_const__97,r_const__103}),
+	.downCritAngle_0(r_const__7), .downCritAngle_1(r_const__8), .downCritAngle_2(r_const__9), .downCritAngle_3(r_const__10), .downCritAngle_4(r_const__11),
+	.upCritAngle_0(r_const__13), .upCritAngle_1(r_const__14), .upCritAngle_2(r_const__15), .upCritAngle_3(r_const__16), .upCritAngle_4(r_const__17),
+	.muaFraction1(r_const__57), .muaFraction2(r_const__58), .muaFraction3(r_const__59), .muaFraction4(r_const__60), .muaFraction5(r_const__61),
+	  // Interface to memory look-up
+	    // From Memories
+	.up_rFresnel(mem_fres_up), .down_rFresnel(mem_fres_down), .sint(mem_sint), .cost(mem_cost),
+		// To Memories
+	.tindex(tindex), .fresIndex(fresIndex),
+
+	// DeadOrAlive (no Constants)
+
+	// Absorber
+	.absorb_data(absorb_data), .absorb_rdaddress(absorb_rdaddress), .absorb_wraddress(absorb_wraddress), 
+	.absorb_wren(absorb_wren), .absorb_q(absorb_q),
+
+	// Done signal
+	.done(done)
+	);
+
+// Mux to read the absorbtion array
+always @(r_state or done or r_absorb_read_counter or r_absorb_write_counter or absorb_wraddress or absorb_data or absorb_rdaddress or absorb_data or absorb_wren )
+begin
+	if(r_state == RESET_MEM_ST)
+	begin
+		absorb_wren_mux = 1'b1;
+		absorb_data_mux = 64'b0;
+		absorb_rdaddress_mux = r_absorb_read_counter;
+		absorb_wraddress_mux = r_absorb_write_counter;
+	end
+	else if(done == 1'b1)
+	begin
+		absorb_rdaddress_mux = r_absorb_read_counter;
+		absorb_wraddress_mux = absorb_wraddress;
+		absorb_data_mux = absorb_data;
+		absorb_wren_mux = 1'b0;
+	end
+	else
+	begin
+		absorb_rdaddress_mux = absorb_rdaddress;
+		absorb_wraddress_mux = absorb_wraddress;
+		absorb_data_mux = absorb_data;
+		absorb_wren_mux = absorb_wren;
+	end
+end
+
+// Skeleton SW/HW interface
+//  1.  Read constants
+//  2.  Wait for completion
+//  3.  Write data back
+always @(r_state or r_absorb_read_counter or r_absorb_write_counter or result or r_toggle or r_counter or read_constants or constants or done
+			or inc_result or mem_cost or mem_sint or absorb_q
+			or r_const__103
+			or r_const__102
+			or r_const__101
+			or r_const__100
+			or r_const__99
+			or r_const__98
+			or r_const__97
+			or r_const__96
+			or r_const__95
+			or r_const__94
+			or r_const__93
+			or r_const__92
+			or r_const__91
+			or r_const__90
+			or r_const__89
+			or r_const__88
+			or r_const__87
+			or r_const__86
+			or r_const__85
+			or r_const__84
+			or r_const__83
+			or r_const__82
+			or r_const__81
+			or r_const__80
+			or r_const__79
+			or r_const__78
+			or r_const__77
+			or r_const__76
+			or r_const__75
+			or r_const__74
+			or r_const__73
+			or r_const__72
+			or r_const__71
+			or r_const__70
+			or r_const__69
+			or r_const__68
+			or r_const__67
+			or r_const__66
+			or r_const__65
+			or r_const__64
+			or r_const__63
+			or r_const__62
+			or r_const__61
+			or r_const__60
+			or r_const__59
+			or r_const__58
+			or r_const__57
+			or r_const__56
+			or r_const__55
+			or r_const__54
+			or r_const__53
+			or r_const__52
+			or r_const__51
+			or r_const__50
+			or r_const__49
+			or r_const__48
+			or r_const__47
+			or r_const__46
+			or r_const__45
+			or r_const__44
+			or r_const__43
+			or r_const__42
+			or r_const__41
+			or r_const__40
+			or r_const__39
+			or r_const__38
+			or r_const__37
+			or r_const__36
+			or r_const__35
+			or r_const__34
+			or r_const__33
+			or r_const__32
+			or r_const__31
+			or r_const__30
+			or r_const__29
+			or r_const__28
+			or r_const__27
+			or r_const__26
+			or r_const__25
+			or r_const__24
+			or r_const__23
+			or r_const__22
+			or r_const__21
+			or r_const__20
+			or r_const__19
+			or r_const__18
+			or r_const__17
+			or r_const__16
+			or r_const__15
+			or r_const__14
+			or r_const__13
+			or r_const__12
+			or r_const__11
+			or r_const__10
+			or r_const__9
+			or r_const__8
+			or r_const__7
+			or r_const__6
+			or r_const__5
+			or r_const__4
+			or r_const__3
+			or r_const__2
+			or r_const__1
+			or r_const__0) begin
+		// Initialize data
+		//for(i = 0; i < 104; i = i + 1) begin
+		//	c_const[i] = r_const[i];
+		//end
+		begin
+//c_const__103 = r_const__103;
+c_const__102 = r_const__102;
+c_const__101 = r_const__101;
+c_const__100 = r_const__100;
+c_const__99 = r_const__99;
+c_const__98 = r_const__98;
+c_const__97 = r_const__97;
+c_const__96 = r_const__96;
+c_const__95 = r_const__95;
+c_const__94 = r_const__94;
+c_const__93 = r_const__93;
+c_const__92 = r_const__92;
+c_const__91 = r_const__91;
+c_const__90 = r_const__90;
+c_const__89 = r_const__89;
+c_const__88 = r_const__88;
+c_const__87 = r_const__87;
+c_const__86 = r_const__86;
+c_const__85 = r_const__85;
+c_const__84 = r_const__84;
+c_const__83 = r_const__83;
+c_const__82 = r_const__82;
+c_const__81 = r_const__81;
+c_const__80 = r_const__80;
+c_const__79 = r_const__79;
+c_const__78 = r_const__78;
+c_const__77 = r_const__77;
+c_const__76 = r_const__76;
+c_const__75 = r_const__75;
+c_const__74 = r_const__74;
+c_const__73 = r_const__73;
+c_const__72 = r_const__72;
+c_const__71 = r_const__71;
+c_const__70 = r_const__70;
+c_const__69 = r_const__69;
+c_const__68 = r_const__68;
+c_const__67 = r_const__67;
+c_const__66 = r_const__66;
+c_const__65 = r_const__65;
+c_const__64 = r_const__64;
+c_const__63 = r_const__63;
+c_const__62 = r_const__62;
+c_const__61 = r_const__61;
+c_const__60 = r_const__60;
+c_const__59 = r_const__59;
+c_const__58 = r_const__58;
+c_const__57 = r_const__57;
+c_const__56 = r_const__56;
+c_const__55 = r_const__55;
+c_const__54 = r_const__54;
+c_const__53 = r_const__53;
+c_const__52 = r_const__52;
+c_const__51 = r_const__51;
+c_const__50 = r_const__50;
+c_const__49 = r_const__49;
+c_const__48 = r_const__48;
+c_const__47 = r_const__47;
+c_const__46 = r_const__46;
+c_const__45 = r_const__45;
+c_const__44 = r_const__44;
+c_const__43 = r_const__43;
+c_const__42 = r_const__42;
+c_const__41 = r_const__41;
+c_const__40 = r_const__40;
+c_const__39 = r_const__39;
+c_const__38 = r_const__38;
+c_const__37 = r_const__37;
+c_const__36 = r_const__36;
+c_const__35 = r_const__35;
+c_const__34 = r_const__34;
+c_const__33 = r_const__33;
+c_const__32 = r_const__32;
+c_const__31 = r_const__31;
+c_const__30 = r_const__30;
+c_const__29 = r_const__29;
+c_const__28 = r_const__28;
+c_const__27 = r_const__27;
+c_const__26 = r_const__26;
+c_const__25 = r_const__25;
+c_const__24 = r_const__24;
+c_const__23 = r_const__23;
+c_const__22 = r_const__22;
+c_const__21 = r_const__21;
+c_const__20 = r_const__20;
+c_const__19 = r_const__19;
+c_const__18 = r_const__18;
+c_const__17 = r_const__17;
+c_const__16 = r_const__16;
+c_const__15 = r_const__15;
+c_const__14 = r_const__14;
+c_const__13 = r_const__13;
+c_const__12 = r_const__12;
+c_const__11 = r_const__11;
+c_const__10 = r_const__10;
+c_const__9 = r_const__9;
+c_const__8 = r_const__8;
+c_const__7 = r_const__7;
+c_const__6 = r_const__6;
+c_const__5 = r_const__5;
+c_const__4 = r_const__4;
+c_const__3 = r_const__3;
+c_const__2 = r_const__2;
+c_const__1 = r_const__1;
+c_const__0 = r_const__0;
+		end
+		/*
+		//honourary c_const__103 = r_const__103
+		c_counter = r_counter;
+		c_absorb_read_counter = r_absorb_read_counter;
+		c_result = result;
+		c_calc_in_progress = 1'b0;
+		c_state = r_state;
+		wren_fres_up = 1'b0;
+		wren_fres_down = 1'b0;
+		wren_sint = 1'b0;
+		wren_cost = 1'b0;
+		c_absorb_write_counter = r_absorb_write_counter;
+		c_toggle = r_toggle;
+		
+		mem_layer = r_counter[12:10];
+*/
+		// Determine next state and which data changes
+		case(r_state)
+			//ERROR_ST:
+			READ1_ST:
+				begin			
+					if(read_constants)
+						begin
+						// peter m redoing this to a shift register r_const 104 will shift to r_const 103 etc etc
+						// if its in the read_constants state
+						//	c_const[r_counter] = constants;
+						c_counter = r_counter + 13'b00000000000001;
+						c_const__103 = constants;
+						//pm preventing latches
+						c_absorb_read_counter = r_absorb_read_counter;
+						c_result = result;
+						c_calc_in_progress = 1'b0;
+						c_state = r_state;
+						wren_fres_up = 1'b0;
+						wren_fres_down = 1'b0;
+						wren_sint = 1'b0;
+						wren_cost = 1'b0;
+						c_absorb_write_counter = r_absorb_write_counter;
+						c_toggle = r_toggle;
+						mem_layer = r_counter[12:10];
+						end
+					else
+						begin
+						c_const__103 = r_const__103;
+							if(r_counter >= 104) 
+								begin
+									c_counter = 13'b0000000000000;
+									c_state = READ2_ST;
+									//preventing latches
+									
+									c_absorb_read_counter = r_absorb_read_counter;
+									c_result = result;
+									c_calc_in_progress = 1'b0;
+									wren_fres_up = 1'b0;
+									wren_fres_down = 1'b0;
+									wren_sint = 1'b0;
+									wren_cost = 1'b0;
+									c_absorb_write_counter = r_absorb_write_counter;
+									c_toggle = r_toggle;
+									mem_layer = r_counter[12:10];
+									
+								end
+								else
+								begin
+								c_counter = r_counter;
+								c_state = r_state;
+								
+								//preventing latches
+								c_absorb_read_counter = r_absorb_read_counter;
+								c_result = result;
+								c_calc_in_progress = 1'b0;
+								wren_fres_up = 1'b0;
+								wren_fres_down = 1'b0;
+								wren_sint = 1'b0;
+								wren_cost = 1'b0;
+								c_absorb_write_counter = r_absorb_write_counter;
+								c_toggle = r_toggle;
+								mem_layer = r_counter[12:10];
+								end
+						end
+				end
+			READ2_ST:
+				begin		
+					mem_layer = r_counter[9:7];
+					if(read_constants)
+						begin
+							wren_fres_up = 1'b1;
+							c_counter = r_counter + 13'b00000000000001;
+						//prevent latches
+						
+						c_const__103 = r_const__103;
+						c_absorb_read_counter = r_absorb_read_counter;
+						c_result = result;
+						c_calc_in_progress = 1'b0;
+						c_state = r_state;
+						wren_fres_down = 1'b0;
+						wren_sint = 1'b0;
+						wren_cost = 1'b0;
+						c_absorb_write_counter = r_absorb_write_counter;
+						c_toggle = r_toggle;
+		
+		
+						end
+					else
+						begin
+							if(r_counter >= 5*128) 
+								begin
+									c_counter = 13'b0000000000000;
+									c_state = READ3_ST;
+									
+					c_const__103 = r_const__103;
+				
+		c_absorb_read_counter = r_absorb_read_counter;
+		c_result = result;
+		c_calc_in_progress = 1'b0;
+	
+		wren_fres_up = 1'b0;
+		wren_fres_down = 1'b0;
+		wren_sint = 1'b0;
+		wren_cost = 1'b0;
+		c_absorb_write_counter = r_absorb_write_counter;
+		c_toggle = r_toggle;
+	
+								end
+								else
+								begin
+		c_counter = r_counter;
+		c_const__103 = r_const__103;
+		
+		c_absorb_read_counter = r_absorb_read_counter;
+		c_result = result;
+		c_calc_in_progress = 1'b0;
+		c_state = r_state;
+		wren_fres_up = 1'b0;
+		wren_fres_down = 1'b0;
+		wren_sint = 1'b0;
+		wren_cost = 1'b0;
+		c_absorb_write_counter = r_absorb_write_counter;
+		c_toggle = r_toggle;
+		
+	
+								end
+						end
+				end
+			READ3_ST:
+				begin
+			mem_layer = r_counter[9:7];
+			 c_const__103 = r_const__103;
+	
+		c_absorb_read_counter = r_absorb_read_counter;
+		c_result = result;
+		c_calc_in_progress = 1'b0;
+		
+		wren_fres_up = 1'b0;
+		
+		wren_sint = 1'b0;
+		wren_cost = 1'b0;
+		c_absorb_write_counter = r_absorb_write_counter;
+		c_toggle = r_toggle;
+		
+	//	mem_layer = r_counter[12:10];
+					if(read_constants)
+						begin
+							wren_fres_down = 1'b1;
+							c_counter = r_counter + 13'b00000000000001;
+							c_state = r_state;
+						end
+					else
+						begin
+							if(r_counter >= 5*128) 
+								begin
+									c_counter = 13'b0000000000000;
+									c_state = READ4_ST;
+									wren_fres_down = 1'b0;
+								end
+								else
+								begin
+								c_counter = r_counter;
+								c_state = r_state;
+								wren_fres_down = 1'b0;
+								end
+						end
+				end
+			READ4_ST:
+				begin
+		c_const__103 = r_const__103;
+		//c_counter = r_counter;
+		c_absorb_read_counter = r_absorb_read_counter;
+		c_result = result;
+		c_calc_in_progress = 1'b0;
+		//c_state = r_state;
+		wren_fres_up = 1'b0;
+		wren_fres_down = 1'b0;
+		wren_sint = 1'b0;
+		//wren_cost = 1'b0;
+		c_absorb_write_counter = r_absorb_write_counter;
+		c_toggle = r_toggle;
+		
+		mem_layer = r_counter[12:10];
+		
+		
+					if(read_constants)
+						begin
+							wren_cost = 1'b1;
+							c_counter = r_counter + 13'b00000000000001;
+							c_state = r_state;
+						end
+					else
+						begin
+							if(r_counter >= 13'b1010000000000) //5*1024 = 5120
+								begin
+									c_counter = 13'b0000000000000000000000000;
+									c_state = READ5_ST;
+									wren_cost = 1'b0;
+								end
+								else
+								begin
+								c_counter = r_counter;
+								c_state = r_state;
+								wren_cost = 1'b0;
+								end
+						end
+				end
+			READ5_ST:
+				begin			
+		c_const__103 = r_const__103;
+		//c_counter = r_counter;
+		//c_absorb_read_counter = r_absorb_read_counter;
+		c_result = result;
+		c_calc_in_progress = 1'b0;
+		//c_state = r_state;
+		wren_fres_up = 1'b0;
+		wren_fres_down = 1'b0;
+		//wren_sint = 1'b0;
+		wren_cost = 1'b0;
+		c_absorb_write_counter = r_absorb_write_counter;
+		c_toggle = r_toggle;
+		
+		mem_layer = r_counter[12:10];
+		
+		
+					if(read_constants)
+						begin
+							wren_sint = 1'b1;
+							c_counter = r_counter + 13'b00000000000000000000000001;
+							c_state = r_state;
+							c_absorb_read_counter = r_absorb_read_counter;
+					end
+					else
+						begin
+							if(r_counter >= 13'b1010000000000) //5*1024 = 5120
+								begin
+									c_counter = 13'b0000000000000000000000000;
+									c_absorb_read_counter = 16'b0000000000000000000000000; //use to be 13 bit. Error in odin
+									c_state = RESET_MEM_ST;
+									wren_sint = 1'b0;
+								end
+								else
+								begin
+								c_counter = r_counter;
+								c_absorb_read_counter = r_absorb_read_counter;
+									c_state = r_state;
+									wren_sint = 1'b0;
+								end
+						end
+				end
+			RESET_MEM_ST:
+				begin
+		 c_const__103 = r_const__103;
+	//	c_counter = r_counter;
+		c_absorb_read_counter = r_absorb_read_counter;
+		c_result = result;
+		//c_calc_in_progress = 1'b0;
+		//c_state = r_state;
+		wren_fres_up = 1'b0;
+		wren_fres_down = 1'b0;
+		wren_sint = 1'b0;
+		wren_cost = 1'b0;
+		//c_absorb_write_counter = r_absorb_write_counter;
+		//c_toggle = r_toggle;
+		
+		mem_layer = r_counter[12:10];
+				
+
+				
+				
+				c_counter = r_counter;
+				
+				    c_toggle = 1'b0;
+					c_calc_in_progress = 1'b1;
+					c_absorb_write_counter = r_absorb_write_counter + 16'b0000000000000001;
+					if(r_absorb_write_counter == 16'b1111111111111111)
+					begin
+						c_state = CALC_ST;
+					end
+					else
+					begin
+					c_state = r_state;
+					
+					end
+				end
+			CALC_ST:
+				begin
+		c_const__103 = r_const__103;
+		//c_counter = r_counter;
+		c_absorb_read_counter = r_absorb_read_counter;
+		c_result = result;
+		//c_calc_in_progress = 1'b0;
+		//c_state = r_state;
+		wren_fres_up = 1'b0;
+		wren_fres_down = 1'b0;
+		wren_sint = 1'b0;
+		wren_cost = 1'b0;
+		c_absorb_write_counter = r_absorb_write_counter;
+		//c_toggle = r_toggle;
+		
+		mem_layer = r_counter[12:10];
+				
+				
+				
+					if(done == 1'b0)
+						begin
+							c_calc_in_progress = 1'b1;
+							c_toggle = 1'b0;
+							c_counter = r_counter;
+							c_state = r_state;
+								
+						end
+					else
+						begin
+							c_toggle = 1'b0;
+							c_calc_in_progress = 1'b0;
+							c_state = DONE6_ST;
+							c_counter = 13'b0000000000000;
+						end
+				end
+		// DEBUG STATES BEGIN
+		
+			DONE1_ST:
+				begin
+		c_const__103 = r_const__103;
+		//c_counter = r_counter;
+		c_absorb_read_counter = r_absorb_read_counter;
+		//c_result = result;
+		c_calc_in_progress = 1'b0;
+		//c_state = r_state;
+		wren_fres_up = 1'b0;
+		wren_fres_down = 1'b0;
+		wren_sint = 1'b0;
+		wren_cost = 1'b0;
+		c_absorb_write_counter = r_absorb_write_counter;
+		c_toggle = r_toggle;
+		
+		mem_layer = r_counter[12:10];
+				
+				
+					c_result = r_const__103;				
+					//original -c_result = {32'b0,r_const[r_counter]};
+					if(inc_result)
+						begin
+						if(r_counter >= 13'b0000010001100) //104
+							begin
+								c_counter = 13'b0000000000000;
+								c_state = DONE2_ST;
+							end
+						else
+							begin
+								c_counter = r_counter + 13'b0000000000001;
+								c_state = DONE1_ST;
+							end
+						end
+							
+						else
+						begin
+						if(r_counter >= 13'b0000010001100) //104
+							begin
+								c_counter = 13'b0;
+								c_state = DONE2_ST;
+							end
+						else
+							begin
+								c_state = DONE1_ST;
+								c_counter = r_counter;
+							end
+					end
+				end
+			DONE2_ST:
+				begin
+		c_const__103 = r_const__103;
+		//c_counter = r_counter;
+		c_absorb_read_counter = r_absorb_read_counter;
+		//c_result = result;
+		c_calc_in_progress = 1'b0;
+		//c_state = r_state;
+		wren_fres_up = 1'b0;
+		wren_fres_down = 1'b0;
+		wren_sint = 1'b0;
+		wren_cost = 1'b0;
+		c_absorb_write_counter = r_absorb_write_counter;
+		c_toggle = r_toggle;
+		
+		//mem_layer = r_counter[12:10];
+			
+				
+					mem_layer = r_counter[9:7];
+					//c_result = {32'b00000000000000000000000000000000,mem_fres_up};
+					c_result = 32'b0;
+						if(inc_result)
+						begin
+								c_counter = r_counter + 13'b0000000000001;
+								c_state = DONE1_ST;
+						end
+						else
+						begin
+						if(r_counter >= 13'b0000010001100) //104
+							begin
+								c_counter = 13'b0000000000000;
+								c_state = DONE2_ST;
+							end
+						else
+							begin
+								c_counter = r_counter;
+								c_state = r_state;
+							end
+						end
+				end
+			DONE3_ST:
+				begin
+		c_const__103 = r_const__103;
+		//c_counter = r_counter;
+		c_absorb_read_counter = r_absorb_read_counter;
+		//c_result = result;
+		c_calc_in_progress = 1'b0;
+		//c_state = r_state;
+		wren_fres_up = 1'b0;
+		wren_fres_down = 1'b0;
+		wren_sint = 1'b0;
+		wren_cost = 1'b0;
+		c_absorb_write_counter = r_absorb_write_counter;
+		c_toggle = r_toggle;
+		
+		//mem_layer = r_counter[12:10];
+			
+				
+				
+				
+					mem_layer = r_counter[9:7];
+					//c_result = {32'b00000000000000000000000000000000,mem_fres_down};
+					c_result = 32'b0;
+					
+					if(inc_result)
+						begin
+							// stub, write constants back to see if read in properly
+							c_counter = r_counter + 13'b0000000000001;
+							c_state = DONE3_ST;
+						end
+						
+					else
+						begin
+						if(r_counter >= 13'b0001010000000) //5*128 = 640
+							begin
+								c_counter = 13'b0000000000000;
+								c_state = DONE4_ST;
+							end
+						else
+							begin
+								c_counter = r_counter;
+								c_state = DONE3_ST;
+							end
+						
+						
+						
+						
+						end
+				end
+			DONE4_ST:
+				begin
+				
+				
+				
+						c_const__103 = r_const__103;
+		//c_counter = r_counter;
+		c_absorb_read_counter = r_absorb_read_counter;
+		//c_result = result;
+		c_calc_in_progress = 1'b0;
+		//c_state = r_state;
+		wren_fres_up = 1'b0;
+		wren_fres_down = 1'b0;
+		wren_sint = 1'b0;
+		wren_cost = 1'b0;
+		c_absorb_write_counter = r_absorb_write_counter;
+		c_toggle = r_toggle;
+		
+		mem_layer = r_counter[12:10];
+		
+		
+		
+					c_result = mem_cost;
+					
+				if(inc_result)
+						begin
+							// stub, write constants back to see if read in properly
+						c_counter = r_counter + 13'b0000000000001;
+						c_state = DONE4_ST;
+						end
+				else
+				begin
+					if(r_counter >= 13'b1010000000000) //5*1024 = 5120
+						begin
+							c_counter = 13'b0000000000000;
+							c_state = DONE5_ST;
+						end
+						
+						else
+						begin
+							c_state = DONE4_ST;
+							c_counter = r_counter;
+						end
+					end
+				end
+			DONE5_ST:
+				begin
+				
+		c_const__103 = r_const__103;
+		//c_counter = r_counter;
+		c_absorb_read_counter = r_absorb_read_counter;
+		//c_result = result;
+		c_calc_in_progress = 1'b0;
+		//c_state = r_state;
+		wren_fres_up = 1'b0;
+		wren_fres_down = 1'b0;
+		wren_sint = 1'b0;
+		wren_cost = 1'b0;
+		c_absorb_write_counter = r_absorb_write_counter;
+		c_toggle = r_toggle;
+		
+		mem_layer = r_counter[12:10];
+		
+			
+					c_result = mem_sint;
+				
+					if(r_counter >= 13'b1010000000000) //5*1024 = 5120
+						begin
+							c_counter = 13'b0000000000000;
+							c_state = DONE6_ST;
+						end
+						else
+						begin
+						c_state = DONE5_ST;
+						if(inc_result)
+						begin
+							// stub, write constants back to see if read in properly
+							c_counter = r_counter + 13'b00000000000001;
+						end
+						else
+						begin
+						c_counter = r_counter;
+						end
+				end
+				end
+
+			// DEBUG STATES END*/
+			DONE6_ST:
+				begin
+		c_const__103 = r_const__103;
+		c_counter = r_counter;
+		//c_absorb_read_counter = r_absorb_read_counter;
+		//c_result = result;
+		c_calc_in_progress = 1'b0;
+		//c_state = r_state;
+		wren_fres_up = 1'b0;
+		wren_fres_down = 1'b0;
+		wren_sint = 1'b0;
+		wren_cost = 1'b0;
+		c_absorb_write_counter = r_absorb_write_counter;
+		//c_toggle = r_toggle;
+		
+		mem_layer = r_counter[12:10];
+				
+				
+									c_state = DONE6_ST;
+
+				
+					if(r_toggle == 1'b0)
+					begin
+						c_result = absorb_q[63:32];
+					//	c_state = r_state;
+						end
+					else
+					begin
+						c_result = absorb_q[31:0];
+					//	c_state = r_state;
+					end
+
+					if(inc_result)
+						begin
+							if(r_toggle == 1'b0)
+							begin
+								c_toggle = 1'b1;
+								c_absorb_read_counter = r_absorb_read_counter ;
+							end
+							else
+							begin
+								c_toggle = 1'b0;
+								c_absorb_read_counter = r_absorb_read_counter + 16'b01;
+							end
+						end
+					else
+					begin
+					c_absorb_read_counter = r_absorb_read_counter;
+					c_toggle= r_toggle;
+
+					end
+				//	c_state = DONE6_ST;
+					end
+				
+			default:
+				begin
+			c_state = ERROR_ST;
+		c_const__103 = r_const__103;
+		c_counter = r_counter;
+		c_absorb_read_counter = r_absorb_read_counter;
+		c_result = result;
+		c_calc_in_progress = 1'b0;
+	//	c_state = r_state;
+		wren_fres_up = 1'b0;
+		wren_fres_down = 1'b0;
+		wren_sint = 1'b0;
+		wren_cost = 1'b0;
+		c_absorb_write_counter = r_absorb_write_counter;
+		c_toggle = r_toggle;
+		
+		mem_layer = r_counter[12:10];
+				end
+		endcase
+	end // FSM always
+
+
+
+// Latch Data
+always @(posedge clk)
+	begin
+		if(reset)
+			begin
+	r_counter <= 13'b0000000000000000000000000;
+r_const__103 <= 32'b00000000000000000000000000000000;
+r_const__102 <= 32'b00000000000000000000000000000000;
+r_const__101 <= 32'b00000000000000000000000000000000;
+r_const__100 <= 32'b00000000000000000000000000000000;
+r_const__99 <= 32'b00000000000000000000000000000000;
+r_const__98 <= 32'b00000000000000000000000000000000;
+r_const__97 <= 32'b00000000000000000000000000000000;
+r_const__96 <= 32'b00000000000000000000000000000000;
+r_const__95 <= 32'b00000000000000000000000000000000;
+r_const__94 <= 32'b00000000000000000000000000000000;
+r_const__93 <= 32'b00000000000000000000000000000000;
+r_const__92 <= 32'b00000000000000000000000000000000;
+r_const__91 <= 32'b00000000000000000000000000000000;
+r_const__90 <= 32'b00000000000000000000000000000000;
+r_const__89 <= 32'b00000000000000000000000000000000;
+r_const__88 <= 32'b00000000000000000000000000000000;
+r_const__87 <= 32'b00000000000000000000000000000000;
+r_const__86 <= 32'b00000000000000000000000000000000;
+r_const__85 <= 32'b00000000000000000000000000000000;
+r_const__84 <= 32'b00000000000000000000000000000000;
+r_const__83 <= 32'b00000000000000000000000000000000;
+r_const__82 <= 32'b00000000000000000000000000000000;
+r_const__81 <= 32'b00000000000000000000000000000000;
+r_const__80 <= 32'b00000000000000000000000000000000;
+r_const__79 <= 32'b00000000000000000000000000000000;
+r_const__78 <= 32'b00000000000000000000000000000000;
+r_const__77 <= 32'b00000000000000000000000000000000;
+r_const__76 <= 32'b00000000000000000000000000000000;
+r_const__75 <= 32'b00000000000000000000000000000000;
+r_const__74 <= 32'b00000000000000000000000000000000;
+r_const__73 <= 32'b00000000000000000000000000000000;
+r_const__72 <= 32'b00000000000000000000000000000000;
+r_const__71 <= 32'b00000000000000000000000000000000;
+r_const__70 <= 32'b00000000000000000000000000000000;
+r_const__69 <= 32'b00000000000000000000000000000000;
+r_const__68 <= 32'b00000000000000000000000000000000;
+r_const__67 <= 32'b00000000000000000000000000000000;
+r_const__66 <= 32'b00000000000000000000000000000000;
+r_const__65 <= 32'b00000000000000000000000000000000;
+r_const__64 <= 32'b00000000000000000000000000000000;
+r_const__63 <= 32'b00000000000000000000000000000000;
+r_const__62 <= 32'b00000000000000000000000000000000;
+r_const__61 <= 32'b00000000000000000000000000000000;
+r_const__60 <= 32'b00000000000000000000000000000000;
+r_const__59 <= 32'b00000000000000000000000000000000;
+r_const__58 <= 32'b00000000000000000000000000000000;
+r_const__57 <= 32'b00000000000000000000000000000000;
+r_const__56 <= 32'b00000000000000000000000000000000;
+r_const__55 <= 32'b00000000000000000000000000000000;
+r_const__54 <= 32'b00000000000000000000000000000000;
+r_const__53 <= 32'b00000000000000000000000000000000;
+r_const__52 <= 32'b00000000000000000000000000000000;
+r_const__51 <= 32'b00000000000000000000000000000000;
+r_const__50 <= 32'b00000000000000000000000000000000;
+r_const__49 <= 32'b00000000000000000000000000000000;
+r_const__48 <= 32'b00000000000000000000000000000000;
+r_const__47 <= 32'b00000000000000000000000000000000;
+r_const__46 <= 32'b00000000000000000000000000000000;
+r_const__45 <= 32'b00000000000000000000000000000000;
+r_const__44 <= 32'b00000000000000000000000000000000;
+r_const__43 <= 32'b00000000000000000000000000000000;
+r_const__42 <= 32'b00000000000000000000000000000000;
+r_const__41 <= 32'b00000000000000000000000000000000;
+r_const__40 <= 32'b00000000000000000000000000000000;
+r_const__39 <= 32'b00000000000000000000000000000000;
+r_const__38 <= 32'b00000000000000000000000000000000;
+r_const__37 <= 32'b00000000000000000000000000000000;
+r_const__36 <= 32'b00000000000000000000000000000000;
+r_const__35 <= 32'b00000000000000000000000000000000;
+r_const__34 <= 32'b00000000000000000000000000000000;
+r_const__33 <= 32'b00000000000000000000000000000000;
+r_const__32 <= 32'b00000000000000000000000000000000;
+r_const__31 <= 32'b00000000000000000000000000000000;
+r_const__30 <= 32'b00000000000000000000000000000000;
+r_const__29 <= 32'b00000000000000000000000000000000;
+r_const__28 <= 32'b00000000000000000000000000000000;
+r_const__27 <= 32'b00000000000000000000000000000000;
+r_const__26 <= 32'b00000000000000000000000000000000;
+r_const__25 <= 32'b00000000000000000000000000000000;
+r_const__24 <= 32'b00000000000000000000000000000000;
+r_const__23 <= 32'b00000000000000000000000000000000;
+r_const__22 <= 32'b00000000000000000000000000000000;
+r_const__21 <= 32'b00000000000000000000000000000000;
+r_const__20 <= 32'b00000000000000000000000000000000;
+r_const__19 <= 32'b00000000000000000000000000000000;
+r_const__18 <= 32'b00000000000000000000000000000000;
+r_const__17 <= 32'b00000000000000000000000000000000;
+r_const__16 <= 32'b00000000000000000000000000000000;
+r_const__15 <= 32'b00000000000000000000000000000000;
+r_const__14 <= 32'b00000000000000000000000000000000;
+r_const__13 <= 32'b00000000000000000000000000000000;
+r_const__12 <= 32'b00000000000000000000000000000000;
+r_const__11 <= 32'b00000000000000000000000000000000;
+r_const__10 <= 32'b00000000000000000000000000000000;
+r_const__9 <= 32'b00000000000000000000000000000000;
+r_const__8 <= 32'b00000000000000000000000000000000;
+r_const__7 <= 32'b00000000000000000000000000000000;
+r_const__6 <= 32'b00000000000000000000000000000000;
+r_const__5 <= 32'b00000000000000000000000000000000;
+r_const__4 <= 32'b00000000000000000000000000000000;
+r_const__3 <= 32'b00000000000000000000000000000000;
+r_const__2 <= 32'b00000000000000000000000000000000;
+r_const__1 <= 32'b00000000000000000000000000000000;
+r_const__0 <= 32'b00000000000000000000000000000000;
+
+				r_state <= READ1_ST;
+				result <= 32'b00000000000000000000000000000000;
+				calc_in_progress <= 1'b0;
+				r_absorb_read_counter <= 16'b0000000000000000;
+				enable <= 1'b0;
+				r_absorb_write_counter <= 16'b0000000000000000;
+				reset_calculator <= 1'b1;
+				r_toggle <= 1'b0;
+			end
+		else
+			begin
+					r_counter <= c_counter;
+			if (c_state == READ1_ST)
+				
+				//for(i = 0; i < 104; i = i + 1) begin
+				//	r_const[i] <= c_const[i];
+				//end
+				begin
+				
+				//shift register implementation for read-in constant state
+
+//first one is from counter				
+r_const__103 <= c_const__103;
+// all others shift
+r_const__102 <= r_const__103;
+r_const__101 <= r_const__102;
+r_const__100 <= r_const__101;
+r_const__99 <= r_const__100;
+r_const__98 <= r_const__99;
+r_const__97 <= r_const__98;
+r_const__96 <= r_const__97;
+r_const__95 <= r_const__96;
+r_const__94 <= r_const__95;
+r_const__93 <= r_const__94;
+r_const__92 <= r_const__93;
+r_const__91 <= r_const__92;
+r_const__90 <= r_const__91;
+r_const__89 <= r_const__90;
+r_const__88 <= r_const__89;
+r_const__87 <= r_const__88;
+r_const__86 <= r_const__87;
+r_const__85 <= r_const__86;
+r_const__84 <= r_const__85;
+r_const__83 <= r_const__84;
+r_const__82 <= r_const__83;
+r_const__81 <= r_const__82;
+r_const__80 <= r_const__81;
+r_const__79 <= r_const__80;
+r_const__78 <= r_const__79;
+r_const__77 <= r_const__78;
+r_const__76 <= r_const__77;
+r_const__75 <= r_const__76;
+r_const__74 <= r_const__75;
+r_const__73 <= r_const__74;
+r_const__72 <= r_const__73;
+r_const__71 <= r_const__72;
+r_const__70 <= r_const__71;
+r_const__69 <= r_const__70;
+r_const__68 <= r_const__69;
+r_const__67 <= r_const__68;
+r_const__66 <= r_const__67;
+r_const__65 <= r_const__66;
+r_const__64 <= r_const__65;
+r_const__63 <= r_const__64;
+r_const__62 <= r_const__63;
+r_const__61 <= r_const__62;
+r_const__60 <= r_const__61;
+r_const__59 <= r_const__60;
+r_const__58 <= r_const__59;
+r_const__57 <= r_const__58;
+r_const__56 <= r_const__57;
+r_const__55 <= r_const__56;
+r_const__54 <= r_const__55;
+r_const__53 <= r_const__54;
+r_const__52 <= r_const__53;
+r_const__51 <= r_const__52;
+r_const__50 <= r_const__51;
+r_const__49 <= r_const__50;
+r_const__48 <= r_const__49;
+r_const__47 <= r_const__48;
+r_const__46 <= r_const__47;
+r_const__45 <= r_const__46;
+r_const__44 <= r_const__45;
+r_const__43 <= r_const__44;
+r_const__42 <= r_const__43;
+r_const__41 <= r_const__42;
+r_const__40 <= r_const__41;
+r_const__39 <= r_const__40;
+r_const__38 <= r_const__39;
+r_const__37 <= r_const__38;
+r_const__36 <= r_const__37;
+r_const__35 <= r_const__36;
+r_const__34 <= r_const__35;
+r_const__33 <= r_const__34;
+r_const__32 <= r_const__33;
+r_const__31 <= r_const__32;
+r_const__30 <= r_const__31;
+r_const__29 <= r_const__30;
+r_const__28 <= r_const__29;
+r_const__27 <= r_const__28;
+r_const__26 <= r_const__27;
+r_const__25 <= r_const__26;
+r_const__24 <= r_const__25;
+r_const__23 <= r_const__24;
+r_const__22 <= r_const__23;
+r_const__21 <= r_const__22;
+r_const__20 <= r_const__21;
+r_const__19 <= r_const__20;
+r_const__18 <= r_const__19;
+r_const__17 <= r_const__18;
+r_const__16 <= r_const__17;
+r_const__15 <= r_const__16;
+r_const__14 <= r_const__15;
+r_const__13 <= r_const__14;
+r_const__12 <= r_const__13;
+r_const__11 <= r_const__12;
+r_const__10 <= r_const__11;
+r_const__9 <= r_const__10;
+r_const__8 <= r_const__9;
+r_const__7 <= r_const__8;
+r_const__6 <= r_const__7;
+r_const__5 <= r_const__6;
+r_const__4 <= r_const__5;
+r_const__3 <= r_const__4;
+r_const__2 <= r_const__3;
+r_const__1 <= r_const__2;
+r_const__0 <= r_const__1;
+end
+else
+begin
+//original code
+r_const__103 <= c_const__103;
+r_const__102 <= c_const__102;
+r_const__101 <= c_const__101;
+r_const__100 <= c_const__100;
+r_const__99 <= c_const__99;
+r_const__98 <= c_const__98;
+r_const__97 <= c_const__97;
+r_const__96 <= c_const__96;
+r_const__95 <= c_const__95;
+r_const__94 <= c_const__94;
+r_const__93 <= c_const__93;
+r_const__92 <= c_const__92;
+r_const__91 <= c_const__91;
+r_const__90 <= c_const__90;
+r_const__89 <= c_const__89;
+r_const__88 <= c_const__88;
+r_const__87 <= c_const__87;
+r_const__86 <= c_const__86;
+r_const__85 <= c_const__85;
+r_const__84 <= c_const__84;
+r_const__83 <= c_const__83;
+r_const__82 <= c_const__82;
+r_const__81 <= c_const__81;
+r_const__80 <= c_const__80;
+r_const__79 <= c_const__79;
+r_const__78 <= c_const__78;
+r_const__77 <= c_const__77;
+r_const__76 <= c_const__76;
+r_const__75 <= c_const__75;
+r_const__74 <= c_const__74;
+r_const__73 <= c_const__73;
+r_const__72 <= c_const__72;
+r_const__71 <= c_const__71;
+r_const__70 <= c_const__70;
+r_const__69 <= c_const__69;
+r_const__68 <= c_const__68;
+r_const__67 <= c_const__67;
+r_const__66 <= c_const__66;
+r_const__65 <= c_const__65;
+r_const__64 <= c_const__64;
+r_const__63 <= c_const__63;
+r_const__62 <= c_const__62;
+r_const__61 <= c_const__61;
+r_const__60 <= c_const__60;
+r_const__59 <= c_const__59;
+r_const__58 <= c_const__58;
+r_const__57 <= c_const__57;
+r_const__56 <= c_const__56;
+r_const__55 <= c_const__55;
+r_const__54 <= c_const__54;
+r_const__53 <= c_const__53;
+r_const__52 <= c_const__52;
+r_const__51 <= c_const__51;
+r_const__50 <= c_const__50;
+r_const__49 <= c_const__49;
+r_const__48 <= c_const__48;
+r_const__47 <= c_const__47;
+r_const__46 <= c_const__46;
+r_const__45 <= c_const__45;
+r_const__44 <= c_const__44;
+r_const__43 <= c_const__43;
+r_const__42 <= c_const__42;
+r_const__41 <= c_const__41;
+r_const__40 <= c_const__40;
+r_const__39 <= c_const__39;
+r_const__38 <= c_const__38;
+r_const__37 <= c_const__37;
+r_const__36 <= c_const__36;
+r_const__35 <= c_const__35;
+r_const__34 <= c_const__34;
+r_const__33 <= c_const__33;
+r_const__32 <= c_const__32;
+r_const__31 <= c_const__31;
+r_const__30 <= c_const__30;
+r_const__29 <= c_const__29;
+r_const__28 <= c_const__28;
+r_const__27 <= c_const__27;
+r_const__26 <= c_const__26;
+r_const__25 <= c_const__25;
+r_const__24 <= c_const__24;
+r_const__23 <= c_const__23;
+r_const__22 <= c_const__22;
+r_const__21 <= c_const__21;
+r_const__20 <= c_const__20;
+r_const__19 <= c_const__19;
+r_const__18 <= c_const__18;
+r_const__17 <= c_const__17;
+r_const__16 <= c_const__16;
+r_const__15 <= c_const__15;
+r_const__14 <= c_const__14;
+r_const__13 <= c_const__13;
+r_const__12 <= c_const__12;
+r_const__11 <= c_const__11;
+r_const__10 <= c_const__10;
+r_const__9 <= c_const__9;
+r_const__8 <= c_const__8;
+r_const__7 <= c_const__7;
+r_const__6 <= c_const__6;
+r_const__5 <= c_const__5;
+r_const__4 <= c_const__4;
+r_const__3 <= c_const__3;
+r_const__2 <= c_const__2;
+r_const__1 <= c_const__1;
+r_const__0 <= c_const__0;
+end
+
+
+
+				
+				r_state <= c_state;
+				result <= c_result;
+				calc_in_progress <= c_calc_in_progress;
+				r_absorb_read_counter <= c_absorb_read_counter;
+				r_absorb_write_counter <= c_absorb_write_counter;
+				r_toggle <= c_toggle;
+				//if(c_state == CALC_ST) 
+				//begin
+					enable <= 1'b1;
+				//end
+				//else
+				//begin
+				//	enable = 1'b0;
+				//end
+				if(c_state == RESET_MEM_ST) 
+				begin
+					reset_calculator <= 1'b1;
+				end
+				else
+				begin
+					reset_calculator <= 1'b0;
+				end
+			end
+	end
+
+endmodule
+			
+			
+			
+
+
+			
+			
+module dual_port_mem_zz (clk, data, rdaddress, wraddress , wren, q);
+
+// 32bit wide
+// 13bit address
+
+input clk;
+input[31:0] data;
+input [12:0] rdaddress;
+input [12:0] wraddress;
+input wren;
+output [31:0] q;
+
+
+wire const_zero;
+wire [31:0] const_zero_data;
+wire [31:0] dont_care_out;
+
+assign const_zero = 1'b0;
+assign const_zero_data = 32'b00000000000000000000000000000000;
+//assign dont_care_out = 32'b00000000000000000000000000000000;
+	
+dual_port_ram #(.ADDR_WIDTH(13),.DATA_WIDTH(32)) dpram1(	
+  .clk (clk),
+  .we1(wren),
+  .we2(const_zero),
+  .data1(data),
+  .data2(const_zero_data),
+  .out1(dont_care_out),
+  .out2 (q),
+  .addr1(wraddress),
+  .addr2(rdaddress));
+  
+  
+  endmodule
+  
+module dual_port_mem_yy (clk, data, rdaddress, wraddress , wren, q);
+
+// 32bit wide
+// 13bit address
+
+input clk;
+input[31:0] data;
+input [12:0] rdaddress;
+input [12:0] wraddress;
+input wren;
+output [31:0] q;
+
+
+wire const_zero;
+wire [31:0] const_zero_data;
+wire [31:0] dont_care_out;
+
+assign const_zero = 1'b0;
+assign const_zero_data = 32'b00000000000000000000000000000000;
+//assign dont_care_out = 32'b00000000000000000000000000000000;
+	
+dual_port_ram #(.ADDR_WIDTH(13),.DATA_WIDTH(32)) dpram1(	
+  .clk (clk),
+  .we1(wren),
+  .we2(const_zero),
+  .data1(data),
+  .data2(const_zero_data),
+  .out1(dont_care_out),
+  .out2 (q),
+  .addr1(wraddress),
+  .addr2(rdaddress));
+  
+  
+  endmodule
+  
+module dual_port_mem_xx (clk, data, rdaddress, wraddress , wren, q);
+
+// 32bit wide
+// 13bit address
+
+input clk;
+input[31:0] data;
+input [12:0] rdaddress;
+input [12:0] wraddress;
+input wren;
+output [31:0] q;
+
+
+wire const_zero;
+wire [31:0] const_zero_data;
+wire [31:0] dont_care_out;
+
+assign const_zero = 1'b0;
+assign const_zero_data = 32'b00000000000000000000000000000000;
+//assign dont_care_out = 32'b00000000000000000000000000000000;
+	
+dual_port_ram #(.ADDR_WIDTH(13),.DATA_WIDTH(32)) dpram1(	
+  .clk (clk),
+  .we1(wren),
+  .we2(const_zero),
+  .data1(data),
+  .data2(const_zero_data),
+  .out1(dont_care_out),
+  .out2 (q),
+  .addr1(wraddress),
+  .addr2(rdaddress));
+  
+  
+  endmodule
+
+module dual_port_mem_ww (clk, data, rdaddress, wraddress , wren, q);
+
+// 32bit wide
+// 13bit address
+
+input clk;
+input[31:0] data;
+input [12:0] rdaddress;
+input [12:0] wraddress;
+input wren;
+output [31:0] q;
+
+
+wire const_zero;
+wire [31:0] const_zero_data;
+wire [31:0] dont_care_out;
+
+assign const_zero = 1'b0;
+assign const_zero_data = 32'b00000000000000000000000000000000;
+//assign dont_care_out = 32'b00000000000000000000000000000000;
+	
+dual_port_ram #(.ADDR_WIDTH(13),.DATA_WIDTH(32)) dpram1(	
+  .clk (clk),
+  .we1(wren),
+  .we2(const_zero),
+  .data1(data),
+  .data2(const_zero_data),
+  .out1(dont_care_out),
+  .out2 (q),
+  .addr1(wraddress),
+  .addr2(rdaddress));
+  
+  
+  endmodule
+  module dual (clk, data, rdaddress, wraddress , wren, q);
+
+// 36bit wide
+// 16bit address
+
+input clk;
+input[35:0] data;
+input [15:0] rdaddress;
+input [15:0] wraddress;
+input wren;
+output [35:0] q;
+
+
+wire const_zero;
+wire [35:0] const_zero_data;
+wire [35:0] dont_care_out;
+
+assign const_zero = 1'b0;
+assign const_zero_data = 36'b000000000000000000000000000000000000;
+//assign dont_care_out = 36'b000000000000000000000000000000000000;
+	
+dual_port_ram #(.ADDR_WIDTH(16),.DATA_WIDTH(36)) dpram1(	
+  .clk (clk),
+  .we1(wren),
+  .we2(const_zero),
+  .data1(data),
+  .data2(const_zero_data),
+  .out1(dont_care_out),
+  .out2 (q),
+  .addr1(wraddress),
+  .addr2(rdaddress));
+  
+  
+  endmodule
+   module dual2 (clk, data, rdaddress, wraddress , wren, q);
+
+// 18bit wide
+// 16bit address
+
+input clk;
+input[17:0] data;
+input [15:0] rdaddress;
+input [15:0] wraddress;
+input wren;
+output [17:0] q;
+
+
+wire const_zero;
+wire [17:0] const_zero_data;
+wire [17:0] dont_care_out;
+
+assign const_zero = 1'b0;
+assign const_zero_data = 18'b000000000000000000;
+//assign dont_care_out = 18'b000000000000000000;
+	
+dual_port_ram #(.ADDR_WIDTH(16),.DATA_WIDTH(18)) dpram1(	
+  .clk (clk),
+  .we1(wren),
+  .we2(const_zero),
+  .data1(data),
+  .data2(const_zero_data),
+  .out1(dont_care_out),
+  .out2 (q),
+  .addr1(wraddress),
+  .addr2(rdaddress));
+  
+  
+  endmodule
+   module dual3 (clk, data, rdaddress, wraddress , wren, q);
+
+// 8bit wide
+// 16bit address
+
+input clk;
+input[7:0] data;
+input [15:0] rdaddress;
+input [15:0] wraddress;
+input wren;
+output [7:0] q;
+
+
+wire const_zero;
+wire [7:0] const_zero_data;
+wire [7:0] dont_care_out;
+
+assign const_zero = 1'b0;
+assign const_zero_data = 8'b00000000;
+//assign dont_care_out = 8'b00000000;
+	
+dual_port_ram #(.ADDR_WIDTH(16),.DATA_WIDTH(8)) dpram1(	
+  .clk (clk),
+  .we1(wren),
+  .we2(const_zero),
+  .data1(data),
+  .data2(const_zero_data),
+  .out1(dont_care_out),
+  .out2 (q),
+  .addr1(wraddress),
+  .addr2(rdaddress));
+  
+  
+  endmodule
+
+ 
+ 
+ //  Photon Calculator
+// Note: Use the same random number for fresnel (reflect) as for scatterer because they are mutually exclusive blocks
+//       Also scatterer needs two
+
+
+module PhotonCalculator (
+	clock, reset, enable,
+
+	// CONSTANTS
+	total_photons,
+
+	randseed1, randseed2, randseed3, randseed4, randseed5,
+	
+	initialWeight,
+
+	//   Mover
+	OneOver_MutMaxrad_0, OneOver_MutMaxrad_1, OneOver_MutMaxrad_2, OneOver_MutMaxrad_3, OneOver_MutMaxrad_4, OneOver_MutMaxrad_5,
+	OneOver_MutMaxdep_0, OneOver_MutMaxdep_1, OneOver_MutMaxdep_2, OneOver_MutMaxdep_3, OneOver_MutMaxdep_4, OneOver_MutMaxdep_5,
+	OneOver_Mut_0, OneOver_Mut_1, OneOver_Mut_2, OneOver_Mut_3, OneOver_Mut_4, OneOver_Mut_5,
+
+	//   BoundaryChecker
+	z1_0, z1_1, z1_2, z1_3, z1_4, z1_5,
+	z0_0, z0_1, z0_2, z0_3, z0_4, z0_5,
+	mut_0, mut_1, mut_2, mut_3, mut_4, mut_5,
+	maxDepth_over_maxRadius,
+
+	//   Hop (no constants)
+
+	//   Scatterer Reflector Wrapper
+	down_niOverNt_1, down_niOverNt_2, down_niOverNt_3, down_niOverNt_4, down_niOverNt_5,
+	up_niOverNt_1, up_niOverNt_2, up_niOverNt_3, up_niOverNt_4, up_niOverNt_5,
+	down_niOverNt_2_1, down_niOverNt_2_2, down_niOverNt_2_3, down_niOverNt_2_4, down_niOverNt_2_5,
+	up_niOverNt_2_1, up_niOverNt_2_2, up_niOverNt_2_3, up_niOverNt_2_4, up_niOverNt_2_5,
+	downCritAngle_0, downCritAngle_1, downCritAngle_2, downCritAngle_3, downCritAngle_4,
+	upCritAngle_0, upCritAngle_1, upCritAngle_2, upCritAngle_3, upCritAngle_4,
+	muaFraction1, muaFraction2, muaFraction3, muaFraction4, muaFraction5,
+	  // Interface to memory look-up
+	    // From Memories
+	up_rFresnel, down_rFresnel, sint, cost,
+		// To Memories
+	tindex, fresIndex,
+
+	// Roulette (no Constants)
+
+	// Absorber
+	absorb_data, absorb_rdaddress, absorb_wraddress, 
+	absorb_wren, absorb_q,
+
+	// Done signal
+	done
+	);
+//parameter BIT_WIDTH=32;
+//parameter LAYER_WIDTH=3;
+//parameter TRIG_WIDTH=10;
+//parameter PIPELINE_DEPTH_UPPER_LIMIT = 256;
+//parameter ABSORB_ADDR_WIDTH=16;
+//parameter ABSORB_WORD_WIDTH=64;
+//parameter WSCALE=1919999;
+
+
+input clock, reset, enable;
+
+// CONSTANTS
+input [`BIT_WIDTH-1:0] total_photons;
+
+input [`BIT_WIDTH-1:0] randseed1;
+input [`BIT_WIDTH-1:0] randseed2;
+input [`BIT_WIDTH-1:0] randseed3;
+input [`BIT_WIDTH-1:0] randseed4;
+input [`BIT_WIDTH-1:0] randseed5;
+
+input [`BIT_WIDTH-1:0] initialWeight;
+
+//   Mover
+input [`BIT_WIDTH-1:0] OneOver_MutMaxrad_0, OneOver_MutMaxrad_1, OneOver_MutMaxrad_2, OneOver_MutMaxrad_3, OneOver_MutMaxrad_4, OneOver_MutMaxrad_5;
+input [`BIT_WIDTH-1:0] OneOver_MutMaxdep_0, OneOver_MutMaxdep_1, OneOver_MutMaxdep_2, OneOver_MutMaxdep_3, OneOver_MutMaxdep_4, OneOver_MutMaxdep_5;
+input [`BIT_WIDTH-1:0] OneOver_Mut_0, OneOver_Mut_1, OneOver_Mut_2, OneOver_Mut_3, OneOver_Mut_4, OneOver_Mut_5;
+
+//   BoundaryChecker
+input [`BIT_WIDTH-1:0] z1_0, z1_1, z1_2, z1_3, z1_4, z1_5;
+input [`BIT_WIDTH-1:0] z0_0, z0_1, z0_2, z0_3, z0_4, z0_5;
+input [`BIT_WIDTH-1:0] mut_0, mut_1, mut_2, mut_3, mut_4, mut_5;
+input [`BIT_WIDTH-1:0] maxDepth_over_maxRadius;
+
+//   Hop (no constants)
+
+//   Scatterer Reflector Absorber Wrapper
+input [`BIT_WIDTH-1:0] down_niOverNt_1, down_niOverNt_2, down_niOverNt_3, down_niOverNt_4, down_niOverNt_5;
+input [`BIT_WIDTH-1:0] up_niOverNt_1, up_niOverNt_2, up_niOverNt_3, up_niOverNt_4, up_niOverNt_5;
+input [2*`BIT_WIDTH-1:0] down_niOverNt_2_1, down_niOverNt_2_2, down_niOverNt_2_3, down_niOverNt_2_4, down_niOverNt_2_5;
+input [2*`BIT_WIDTH-1:0] up_niOverNt_2_1, up_niOverNt_2_2, up_niOverNt_2_3, up_niOverNt_2_4, up_niOverNt_2_5;
+input [`BIT_WIDTH-1:0] downCritAngle_0, downCritAngle_1, downCritAngle_2, downCritAngle_3, downCritAngle_4;
+input [`BIT_WIDTH-1:0] upCritAngle_0, upCritAngle_1, upCritAngle_2, upCritAngle_3, upCritAngle_4;
+input [`BIT_WIDTH-1:0] muaFraction1, muaFraction2, muaFraction3, muaFraction4, muaFraction5;
+
+  // Memory look-up interface
+input [`BIT_WIDTH-1:0] up_rFresnel;
+input [`BIT_WIDTH-1:0] down_rFresnel;
+input [`BIT_WIDTH-1:0] sint;
+input [`BIT_WIDTH-1:0] cost;
+	//To Memories
+output [12:0] tindex;
+output [9:0] fresIndex;
+
+//   Roulette Module (nothing)
+
+// Final results
+output [`ABSORB_ADDR_WIDTH-1:0] absorb_rdaddress, absorb_wraddress;
+output absorb_wren;
+output [`ABSORB_WORD_WIDTH-1:0] absorb_data;
+input [`ABSORB_WORD_WIDTH-1:0] absorb_q;
+
+// Flag when final results ready
+output done;
+
+
+// Local variables
+// Wired nets
+/*mover inputs*/
+reg [`BIT_WIDTH-1:0] x_moverMux;
+reg [`BIT_WIDTH-1:0] y_moverMux;
+reg [`BIT_WIDTH-1:0] z_moverMux;
+reg [`BIT_WIDTH-1:0] ux_moverMux;
+reg [`BIT_WIDTH-1:0] uy_moverMux;
+reg [`BIT_WIDTH-1:0] uz_moverMux;
+reg [`BIT_WIDTH-1:0] sz_moverMux;
+reg [`BIT_WIDTH-1:0] sr_moverMux;
+reg [`BIT_WIDTH-1:0] sleftz_moverMux;
+reg [`BIT_WIDTH-1:0] sleftr_moverMux;
+reg [`LAYER_WIDTH-1:0] layer_moverMux;
+reg [`BIT_WIDTH-1:0] weight_moverMux;
+reg dead_moverMux;
+
+/*mover outputs*/
+wire [`BIT_WIDTH-1:0] x_mover;
+wire [`BIT_WIDTH-1:0] y_mover;
+wire [`BIT_WIDTH-1:0] z_mover;
+wire [`BIT_WIDTH-1:0] ux_mover;
+wire [`BIT_WIDTH-1:0] uy_mover;
+wire [`BIT_WIDTH-1:0] uz_mover;
+wire [`BIT_WIDTH-1:0] sz_mover;
+wire [`BIT_WIDTH-1:0] sr_mover;
+wire [`BIT_WIDTH-1:0] sleftz_mover;
+wire [`BIT_WIDTH-1:0] sleftr_mover;
+wire [`LAYER_WIDTH-1:0] layer_mover;
+wire [`BIT_WIDTH-1:0] weight_mover;
+wire dead_mover;
+
+/*boundary checker outputs*/
+wire [`BIT_WIDTH-1:0] x_boundaryChecker;
+wire [`BIT_WIDTH-1:0] y_boundaryChecker;
+wire [`BIT_WIDTH-1:0] z_boundaryChecker;
+wire [`BIT_WIDTH-1:0] ux_boundaryChecker;
+wire [`BIT_WIDTH-1:0] uy_boundaryChecker;
+wire [`BIT_WIDTH-1:0] uz_boundaryChecker;
+wire [`BIT_WIDTH-1:0] sz_boundaryChecker;
+wire [`BIT_WIDTH-1:0] sr_boundaryChecker;
+wire [`BIT_WIDTH-1:0] sleftz_boundaryChecker;
+wire [`BIT_WIDTH-1:0] sleftr_boundaryChecker;
+wire [`LAYER_WIDTH-1:0] layer_boundaryChecker;
+wire [`BIT_WIDTH-1:0] weight_boundaryChecker;
+wire dead_boundaryChecker;
+wire hit_boundaryChecker;
+
+/*hop outputs*/
+wire [`BIT_WIDTH-1:0] x_hop;
+wire [`BIT_WIDTH-1:0] y_hop;
+wire [`BIT_WIDTH-1:0] z_hop;
+wire [`BIT_WIDTH-1:0] ux_hop;
+wire [`BIT_WIDTH-1:0] uy_hop;
+wire [`BIT_WIDTH-1:0] uz_hop;
+wire [`BIT_WIDTH-1:0] sz_hop;
+wire [`BIT_WIDTH-1:0] sr_hop;
+wire [`BIT_WIDTH-1:0] sleftz_hop;
+wire [`BIT_WIDTH-1:0] sleftr_hop;
+wire [`LAYER_WIDTH-1:0] layer_hop;
+wire [`BIT_WIDTH-1:0] weight_hop;
+wire dead_hop;
+wire hit_hop;
+
+/*Drop spin outputs*/
+wire [`BIT_WIDTH-1:0] x_dropSpin;
+wire [`BIT_WIDTH-1:0] y_dropSpin;
+wire [`BIT_WIDTH-1:0] z_dropSpin;
+wire [`BIT_WIDTH-1:0] ux_dropSpin;
+wire [`BIT_WIDTH-1:0] uy_dropSpin;
+wire [`BIT_WIDTH-1:0] uz_dropSpin;
+wire [`BIT_WIDTH-1:0] sz_dropSpin;
+wire [`BIT_WIDTH-1:0] sr_dropSpin;
+wire [`BIT_WIDTH-1:0] sleftz_dropSpin;
+wire [`BIT_WIDTH-1:0] sleftr_dropSpin;
+wire [`LAYER_WIDTH-1:0] layer_dropSpin;
+wire [`BIT_WIDTH-1:0] weight_dropSpin;
+wire dead_dropSpin;
+//Had to add this one to avoid implicit net:
+wire hit_dropSpin;
+
+/*Dead or Alive outputs*/
+wire [`BIT_WIDTH-1:0] x_Roulette;
+wire [`BIT_WIDTH-1:0] y_Roulette;
+wire [`BIT_WIDTH-1:0] z_Roulette;
+wire [`BIT_WIDTH-1:0] ux_Roulette;
+wire [`BIT_WIDTH-1:0] uy_Roulette;
+wire [`BIT_WIDTH-1:0] uz_Roulette;
+wire [`BIT_WIDTH-1:0] sz_Roulette;
+wire [`BIT_WIDTH-1:0] sr_Roulette;
+wire [`BIT_WIDTH-1:0] sleftz_Roulette;
+wire [`BIT_WIDTH-1:0] sleftr_Roulette;
+wire [`LAYER_WIDTH-1:0] layer_Roulette;
+wire [`BIT_WIDTH-1:0] weight_Roulette;
+wire dead_Roulette;
+
+// internals
+wire [`BIT_WIDTH-1:0] rand1, rand2, rand3, rand4, rand5;
+wire [`BIT_WIDTH-1:0] logrand;
+
+// Combinational Drivers
+reg [`BIT_WIDTH-1:0] c_num_photons_left;
+reg [`BIT_WIDTH-1:0] c_counter;
+reg c_done;
+
+// Registered Drivers
+reg r_done;
+reg loadseed;
+reg delay_loadseed;
+
+
+reg [`BIT_WIDTH-1:0] r_num_photons_left;
+reg [`BIT_WIDTH-1:0] r_counter;
+
+assign done = r_done;
+
+//Cannot be logic in instantiatino:
+wire not_reset;
+assign not_reset = ~reset;
+
+// Connect blocks
+LogCalc log_u1(.clock(clock), .reset(reset), .enable(1'b1), .in_x(rand1), .log_x(logrand));
+rng rand_u1(.clk(clock), .en(1'b1), .resetn(not_reset), .loadseed_i(loadseed), .seed_i(randseed1), .number_o(rand1));
+rng rand_u2(.clk(clock), .en(1'b1), .resetn(not_reset), .loadseed_i(loadseed), .seed_i(randseed2), .number_o(rand2));
+rng rand_u3(.clk(clock), .en(1'b1), .resetn(not_reset), .loadseed_i(loadseed), .seed_i(randseed3), .number_o(rand3));
+rng rand_u4(.clk(clock), .en(1'b1), .resetn(not_reset), .loadseed_i(loadseed), .seed_i(randseed4), .number_o(rand4));
+rng rand_u5(.clk(clock), .en(1'b1), .resetn(not_reset), .loadseed_i(loadseed), .seed_i(randseed5), .number_o(rand5));
+
+Move mover(		 .clock(clock), .reset(reset), .enable(enable),
+				 .x_moverMux(x_moverMux), .y_moverMux(y_moverMux), .z_moverMux(z_moverMux),
+				 .ux_moverMux(ux_moverMux), .uy_moverMux(uy_moverMux), .uz_moverMux(uz_moverMux),
+				 .sz_moverMux(sz_moverMux), .sr_moverMux(sr_moverMux),
+				 .sleftz_moverMux(sleftz_moverMux), .sleftr_moverMux(sleftr_moverMux),
+				 .layer_moverMux(layer_moverMux), .weight_moverMux(weight_moverMux), .dead_moverMux(dead_moverMux),
+
+				 .log_rand_num(logrand),
+
+				 //OUTPUTS
+				 .x_mover(x_mover), .y_mover(y_mover), .z_mover(z_mover),
+				 .ux_mover(ux_mover), .uy_mover(uy_mover), .uz_mover(uz_mover),
+				 .sz_mover(sz_mover), .sr_mover(sr_mover),
+				 .sleftz_mover(sleftz_mover), .sleftr_mover(sleftr_mover),
+				 .layer_mover(layer_mover), .weight_mover(weight_mover), .dead_mover(dead_mover),
+
+				 // CONSTANTS
+				 .OneOver_MutMaxrad_0(OneOver_MutMaxrad_0), .OneOver_MutMaxrad_1(OneOver_MutMaxrad_1), .OneOver_MutMaxrad_2(OneOver_MutMaxrad_2), .OneOver_MutMaxrad_3(OneOver_MutMaxrad_3), .OneOver_MutMaxrad_4(OneOver_MutMaxrad_4), .OneOver_MutMaxrad_5(OneOver_MutMaxrad_5),
+				 .OneOver_MutMaxdep_0(OneOver_MutMaxdep_0), .OneOver_MutMaxdep_1(OneOver_MutMaxdep_1), .OneOver_MutMaxdep_2(OneOver_MutMaxdep_2), .OneOver_MutMaxdep_3(OneOver_MutMaxdep_3), .OneOver_MutMaxdep_4(OneOver_MutMaxdep_4), .OneOver_MutMaxdep_5(OneOver_MutMaxdep_5),
+				 .OneOver_Mut_0(OneOver_Mut_0), .OneOver_Mut_1(OneOver_Mut_1), .OneOver_Mut_2(OneOver_Mut_2), .OneOver_Mut_3(OneOver_Mut_3), .OneOver_Mut_4(OneOver_Mut_4), .OneOver_Mut_5(OneOver_Mut_5)
+		);
+
+Boundary boundaryChecker ( //INPUTS
+				 .clock(clock), .reset(reset), .enable(enable),
+				 .x_mover(x_mover), .y_mover(y_mover), .z_mover(z_mover),
+				 .ux_mover(ux_mover), .uy_mover(uy_mover), .uz_mover(uz_mover),
+				 .sz_mover(sz_mover), .sr_mover(sr_mover),
+				 .sleftz_mover(sleftz_mover), .sleftr_mover(sleftr_mover),
+				 .layer_mover(layer_mover), .weight_mover(weight_mover), .dead_mover(dead_mover),
+
+				 //OUTPUTS
+				 .x_boundaryChecker(x_boundaryChecker), .y_boundaryChecker(y_boundaryChecker), .z_boundaryChecker(z_boundaryChecker),
+				 .ux_boundaryChecker(ux_boundaryChecker), .uy_boundaryChecker(uy_boundaryChecker), .uz_boundaryChecker(uz_boundaryChecker),
+				 .sz_boundaryChecker(sz_boundaryChecker), .sr_boundaryChecker(sr_boundaryChecker),
+				 .sleftz_boundaryChecker(sleftz_boundaryChecker), .sleftr_boundaryChecker(sleftr_boundaryChecker),
+				 .layer_boundaryChecker(layer_boundaryChecker), .weight_boundaryChecker(weight_boundaryChecker), .dead_boundaryChecker(dead_boundaryChecker), .hit_boundaryChecker(hit_boundaryChecker),
+
+				 //CONSTANTS
+				 .z1_0(z1_0), .z1_1(z1_1), .z1_2(z1_2), .z1_3(z1_3), .z1_4(z1_4), .z1_5(z1_5),
+				 .z0_0(z0_0), .z0_1(z0_1), .z0_2(z0_2), .z0_3(z0_3), .z0_4(z0_4), .z0_5(z0_5),
+				 .mut_0(mut_0), .mut_1(mut_1), .mut_2(mut_2), .mut_3(mut_3), .mut_4(mut_4), .mut_5(mut_5),
+				 .maxDepth_over_maxRadius(maxDepth_over_maxRadius)
+				 );
+
+Hop hopper (     //INPUTS
+				 .clock(clock), .reset(reset), .enable(enable),
+				 .x_boundaryChecker(x_boundaryChecker), .y_boundaryChecker(y_boundaryChecker), .z_boundaryChecker(z_boundaryChecker),
+				 .ux_boundaryChecker(ux_boundaryChecker), .uy_boundaryChecker(uy_boundaryChecker), .uz_boundaryChecker(uz_boundaryChecker),
+				 .sz_boundaryChecker(sz_boundaryChecker), .sr_boundaryChecker(sr_boundaryChecker),
+				 .sleftz_boundaryChecker(sleftz_boundaryChecker), .sleftr_boundaryChecker(sleftr_boundaryChecker),
+				 .layer_boundaryChecker(layer_boundaryChecker), .weight_boundaryChecker(weight_boundaryChecker), .dead_boundaryChecker(dead_boundaryChecker),
+				 .hit_boundaryChecker(hit_boundaryChecker),
+
+				 //OUTPUTS
+				 .x_hop(x_hop), .y_hop(y_hop), .z_hop(z_hop),
+				 .ux_hop(ux_hop), .uy_hop(uy_hop), .uz_hop(uz_hop),
+				 .sz_hop(sz_hop), .sr_hop(sr_hop),
+				 .sleftz_hop(sleftz_hop), .sleftr_hop(sleftr_hop),
+				 .layer_hop(layer_hop), .weight_hop(weight_hop), .dead_hop(dead_hop), .hit_hop(hit_hop)
+				 );
+
+Roulette Roulette ( //INPUTS
+                     .clock(clock), .reset(reset), .enable(enable),
+                     .x_RouletteMux(x_dropSpin), .y_RouletteMux(y_dropSpin), .z_RouletteMux(z_dropSpin),
+                     .ux_RouletteMux(ux_dropSpin), .uy_RouletteMux(uy_dropSpin), .uz_RouletteMux(uz_dropSpin),
+                     .sz_RouletteMux(sz_dropSpin), .sr_RouletteMux(sr_dropSpin),
+                     .sleftz_RouletteMux(sleftz_dropSpin), .sleftr_RouletteMux(sleftr_dropSpin),
+                     .layer_RouletteMux(layer_dropSpin), .weight_absorber(weight_dropSpin), .dead_RouletteMux(dead_dropSpin),
+					 .randnumber(rand4),
+
+                     //OUTPUTS
+                     .x_Roulette(x_Roulette), .y_Roulette(y_Roulette), .z_Roulette(z_Roulette),
+                     .ux_Roulette(ux_Roulette), .uy_Roulette(uy_Roulette), .uz_Roulette(uz_Roulette),
+                     .sz_Roulette(sz_Roulette), .sr_Roulette(sr_Roulette),
+                     .sleftz_Roulette(sleftz_Roulette), .sleftr_Roulette(sleftr_Roulette),
+                     .layer_Roulette(layer_Roulette), .weight_Roulette(weight_Roulette), .dead_Roulette(dead_Roulette)
+					 );
+
+
+DropSpinWrapper dropSpin (
+	.clock(clock), .reset(reset), .enable(enable),
+
+   //From Hopper Module
+    .i_x(x_hop),
+	.i_y(y_hop),
+	.i_z(z_hop),
+	.i_ux(ux_hop),
+	.i_uy(uy_hop),
+	.i_uz(uz_hop),
+	.i_sz(sz_hop),
+	.i_sr(sr_hop),
+	.i_sleftz(sleftz_hop),
+	.i_sleftr(sleftr_hop),
+	.i_weight(weight_hop),
+	.i_layer(layer_hop),
+	.i_dead(dead_hop),
+	.i_hit(hit_hop),	
+	
+	//From System Register File (5 layers)- Absorber
+	.muaFraction1(muaFraction1), .muaFraction2(muaFraction2), .muaFraction3(muaFraction3), .muaFraction4(muaFraction4), .muaFraction5(muaFraction5),
+ 
+ 	//From System Register File - ScattererReflector 
+	.down_niOverNt_1(down_niOverNt_1),
+	.down_niOverNt_2(down_niOverNt_2),
+	.down_niOverNt_3(down_niOverNt_3),
+	.down_niOverNt_4(down_niOverNt_4),
+	.down_niOverNt_5(down_niOverNt_5),
+	.up_niOverNt_1(up_niOverNt_1),
+	.up_niOverNt_2(up_niOverNt_2),
+	.up_niOverNt_3(up_niOverNt_3),
+	.up_niOverNt_4(up_niOverNt_4),
+	.up_niOverNt_5(up_niOverNt_5),
+	.down_niOverNt_2_1(down_niOverNt_2_1),
+	.down_niOverNt_2_2(down_niOverNt_2_2),
+	.down_niOverNt_2_3(down_niOverNt_2_3),
+	.down_niOverNt_2_4(down_niOverNt_2_4),
+	.down_niOverNt_2_5(down_niOverNt_2_5),
+	.up_niOverNt_2_1(up_niOverNt_2_1),
+	.up_niOverNt_2_2(up_niOverNt_2_2),
+	.up_niOverNt_2_3(up_niOverNt_2_3),
+	.up_niOverNt_2_4(up_niOverNt_2_4),
+	.up_niOverNt_2_5(up_niOverNt_2_5),
+	.downCritAngle_0(downCritAngle_0),
+	.downCritAngle_1(downCritAngle_1),
+	.downCritAngle_2(downCritAngle_2),
+	.downCritAngle_3(downCritAngle_3),
+	.downCritAngle_4(downCritAngle_4),
+	.upCritAngle_0(upCritAngle_0),
+	.upCritAngle_1(upCritAngle_1),
+	.upCritAngle_2(upCritAngle_2),
+	.upCritAngle_3(upCritAngle_3),
+	.upCritAngle_4(upCritAngle_4),
+ 
+	// port to memory
+	 .data(absorb_data), .rdaddress(absorb_rdaddress), .wraddress(absorb_wraddress), 
+	 .wren(absorb_wren), .q(absorb_q),
+
+ //Generated by random number generators controlled by skeleton
+	.up_rFresnel(up_rFresnel),
+	.down_rFresnel(down_rFresnel),
+	.sint(sint),
+	.cost(cost),
+	.rand2(rand2),
+	.rand3(rand3),
+	.rand5(rand5),
+	//To Memories
+	.tindex(tindex),
+	.fresIndex(fresIndex),
+
+
+	 
+   //To Roulette Module
+	.o_x(x_dropSpin),
+	.o_y(y_dropSpin),
+	.o_z(z_dropSpin),
+	.o_ux(ux_dropSpin),
+	.o_uy(uy_dropSpin),
+	.o_uz(uz_dropSpin),
+	.o_sz(sz_dropSpin),
+	.o_sr(sr_dropSpin),
+	.o_sleftz(sleftz_dropSpin),
+	.o_sleftr(sleftr_dropSpin),
+	.o_weight(weight_dropSpin),
+	.o_layer(layer_dropSpin),
+	.o_dead(dead_dropSpin),
+	.o_hit(hit_dropSpin)
+                    
+	);
+	
+// Determine how many photons left
+always @(r_num_photons_left or dead_Roulette or r_done or r_counter)
+begin
+	//c_num_photons_left = r_num_photons_left;
+	//c_counter = 0;
+
+	if(dead_Roulette == 1'b1 && r_done == 1'b0)
+	begin
+		if(r_num_photons_left > 0)
+		begin
+			c_num_photons_left = r_num_photons_left - 1;
+			c_counter = 0;
+		end
+		else
+		begin
+			c_counter = r_counter + 1;
+			c_num_photons_left = r_num_photons_left;
+		end
+	end 
+	else
+	begin
+		c_num_photons_left = r_num_photons_left;
+		c_counter = 0;
+	end
+end
+
+// Only state info is done
+always @(r_done or r_counter)
+begin
+	//c_done = r_done;
+	if(r_counter > `PIPELINE_DEPTH_UPPER_LIMIT)
+	begin
+		c_done = 1'b1;
+	end else begin
+		c_done = r_done;
+	end
+end
+
+// Create mux to mover
+always @(dead_Roulette or initialWeight or r_num_photons_left or x_Roulette or y_Roulette or z_Roulette or 
+			ux_Roulette or uy_Roulette or uz_Roulette or sz_Roulette or sr_Roulette or sleftz_Roulette or 
+			sleftr_Roulette or layer_Roulette or weight_Roulette or dead_Roulette)
+begin
+	if(dead_Roulette)
+	begin
+		x_moverMux = 0;
+		y_moverMux = 0;
+		z_moverMux = 0;
+		ux_moverMux = 0;
+		uy_moverMux = 0;
+		uz_moverMux = 32'h7fffffff;
+		sz_moverMux = 0;
+		sr_moverMux = 0;
+		sleftz_moverMux = 0;
+		sleftr_moverMux = 0;
+		layer_moverMux = 3'b01;
+		weight_moverMux = initialWeight;
+		if(r_num_photons_left > 0)
+		begin
+			dead_moverMux = 1'b0;
+		end
+		else
+		begin
+			dead_moverMux = 1'b1;
+		end
+	end
+	else
+	begin
+		x_moverMux = x_Roulette;
+		y_moverMux = y_Roulette;
+		z_moverMux = z_Roulette;
+		ux_moverMux = ux_Roulette;
+		uy_moverMux = uy_Roulette;
+		uz_moverMux = uz_Roulette;
+		sz_moverMux = sz_Roulette;
+		sr_moverMux = sr_Roulette;
+		sleftz_moverMux = sleftz_Roulette;
+		sleftr_moverMux = sleftr_Roulette;
+		layer_moverMux = layer_Roulette;
+		weight_moverMux = weight_Roulette;
+		dead_moverMux = dead_Roulette;
+	end
+end
+
+// register state
+always @(posedge clock)
+begin
+	if(reset)
+	begin
+		r_num_photons_left <= total_photons;
+		r_counter <= 1'b0;
+		r_done <= 1'b0;
+		delay_loadseed <= 1'b1;
+		loadseed <= 1'b1;
+	end
+	else
+	begin
+		if(enable)
+		begin
+			r_num_photons_left <= c_num_photons_left;
+			r_counter <= c_counter;
+			r_done <= c_done;
+			delay_loadseed <= 1'b0;
+			loadseed <= delay_loadseed;
+		end
+	end
+end
+endmodule
+
+
+module Move(     //INPUTS
+				 clock, reset, enable,
+				 x_moverMux, y_moverMux, z_moverMux,
+				 ux_moverMux, uy_moverMux, uz_moverMux,
+				 sz_moverMux, sr_moverMux,
+				 sleftz_moverMux, sleftr_moverMux,
+				 layer_moverMux, weight_moverMux, dead_moverMux,
+
+				 log_rand_num,
+
+				 //OUTPUTS
+				 x_mover, y_mover, z_mover,
+				 ux_mover, uy_mover, uz_mover,
+				 sz_mover, sr_mover,
+				 sleftz_mover, sleftr_mover,
+				 layer_mover, weight_mover, dead_mover,
+
+				 // CONSTANTS
+				 OneOver_MutMaxrad_0, OneOver_MutMaxrad_1, OneOver_MutMaxrad_2, OneOver_MutMaxrad_3, OneOver_MutMaxrad_4, OneOver_MutMaxrad_5,
+				 OneOver_MutMaxdep_0, OneOver_MutMaxdep_1, OneOver_MutMaxdep_2, OneOver_MutMaxdep_3, OneOver_MutMaxdep_4, OneOver_MutMaxdep_5,
+				 OneOver_Mut_0, OneOver_Mut_1, OneOver_Mut_2, OneOver_Mut_3, OneOver_Mut_4, OneOver_Mut_5
+				 );
+
+
+input clock;
+input reset;
+input enable;
+
+input [`BIT_WIDTH-1:0] x_moverMux;
+input [`BIT_WIDTH-1:0] y_moverMux;
+input [`BIT_WIDTH-1:0] z_moverMux;
+input [`BIT_WIDTH-1:0] ux_moverMux;
+input [`BIT_WIDTH-1:0] uy_moverMux;
+input [`BIT_WIDTH-1:0] uz_moverMux;
+input [`BIT_WIDTH-1:0] sz_moverMux;
+input [`BIT_WIDTH-1:0] sr_moverMux;
+input [`BIT_WIDTH-1:0] sleftz_moverMux;
+input [`BIT_WIDTH-1:0] sleftr_moverMux;
+input [`LAYER_WIDTH-1:0] layer_moverMux;
+input [`BIT_WIDTH-1:0] weight_moverMux;
+input	dead_moverMux;
+
+output [`BIT_WIDTH-1:0] x_mover;
+output [`BIT_WIDTH-1:0] y_mover;
+output [`BIT_WIDTH-1:0] z_mover;
+output [`BIT_WIDTH-1:0] ux_mover;
+output [`BIT_WIDTH-1:0] uy_mover;
+output [`BIT_WIDTH-1:0] uz_mover;
+output [`BIT_WIDTH-1:0] sz_mover;
+output [`BIT_WIDTH-1:0] sr_mover;
+output [`BIT_WIDTH-1:0] sleftz_mover;
+output [`BIT_WIDTH-1:0] sleftr_mover;
+output [`LAYER_WIDTH-1:0]layer_mover;
+output [`BIT_WIDTH-1:0] weight_mover;
+output	dead_mover;
+
+
+input [`BIT_WIDTH-1:0] OneOver_MutMaxrad_0;
+input [`BIT_WIDTH-1:0] OneOver_MutMaxrad_1;
+input [`BIT_WIDTH-1:0] OneOver_MutMaxrad_2;
+input [`BIT_WIDTH-1:0] OneOver_MutMaxrad_3;
+input [`BIT_WIDTH-1:0] OneOver_MutMaxrad_4;
+input [`BIT_WIDTH-1:0] OneOver_MutMaxrad_5;
+input [`BIT_WIDTH-1:0] OneOver_MutMaxdep_0;
+input [`BIT_WIDTH-1:0] OneOver_MutMaxdep_1;
+input [`BIT_WIDTH-1:0] OneOver_MutMaxdep_2;
+input [`BIT_WIDTH-1:0] OneOver_MutMaxdep_3;
+input [`BIT_WIDTH-1:0] OneOver_MutMaxdep_4;
+input [`BIT_WIDTH-1:0] OneOver_MutMaxdep_5;
+input [`BIT_WIDTH-1:0] OneOver_Mut_0;
+input [`BIT_WIDTH-1:0] OneOver_Mut_1;
+input [`BIT_WIDTH-1:0] OneOver_Mut_2;
+input [`BIT_WIDTH-1:0] OneOver_Mut_3;
+input [`BIT_WIDTH-1:0] OneOver_Mut_4;
+input [`BIT_WIDTH-1:0] OneOver_Mut_5;
+input [`BIT_WIDTH-1:0] log_rand_num;
+
+//------------Local Variables------------------------
+reg [`BIT_WIDTH-1:0] c_sr;
+reg [`BIT_WIDTH-1:0] c_sz;
+reg [2*`BIT_WIDTH-1:0] c_sr_big;
+reg [2*`BIT_WIDTH-1:0] c_sz_big;
+reg [`BIT_WIDTH-1:0] c_sleftr;
+reg [`BIT_WIDTH-1:0] c_sleftz;
+
+//No signed regs, unsigned unecessary
+//reg unsigned [`BIT_WIDTH-1:0] c_r_op0;
+//reg unsigned [`BIT_WIDTH-1:0] c_r_op1;
+//reg unsigned [`BIT_WIDTH-1:0] c_z_op0;
+//reg unsigned [`BIT_WIDTH-1:0] c_z_op1;
+
+reg [`BIT_WIDTH-1:0] c_r_op0;
+reg [`BIT_WIDTH-1:0] c_r_op1;
+reg [`BIT_WIDTH-1:0] c_z_op0;
+reg [`BIT_WIDTH-1:0] c_z_op1;
+
+// grab multiplexed constant
+reg [`BIT_WIDTH-1:0] OneOver_MutMaxrad;
+reg [`BIT_WIDTH-1:0] OneOver_MutMaxdep;
+reg [`BIT_WIDTH-1:0] OneOver_Mut;
+
+//------------REGISTERED Values------------------------
+reg [`BIT_WIDTH-1:0] x_mover;
+reg [`BIT_WIDTH-1:0] y_mover;
+reg [`BIT_WIDTH-1:0] z_mover;
+reg [`BIT_WIDTH-1:0] ux_mover;
+reg [`BIT_WIDTH-1:0] uy_mover;
+reg [`BIT_WIDTH-1:0] uz_mover;
+reg [`BIT_WIDTH-1:0] sz_mover;
+reg [`BIT_WIDTH-1:0] sr_mover;
+reg [`BIT_WIDTH-1:0] sleftz_mover;
+reg [`BIT_WIDTH-1:0] sleftr_mover;
+reg [`LAYER_WIDTH-1:0]layer_mover;
+reg [`BIT_WIDTH-1:0] weight_mover;
+reg	dead_mover;
+
+
+//Need this to deal with 'unused' inputs for ODIN II
+wire bigOr;
+assign bigOr = sr_moverMux[0] | sr_moverMux[1] | sr_moverMux[2] | sr_moverMux[3] | sr_moverMux[4] | sr_moverMux[5] | 
+					sr_moverMux[6] | sr_moverMux[7] | sr_moverMux[8] | sr_moverMux[9] | sr_moverMux[10] | sr_moverMux[11] | 
+					sr_moverMux[12] | sr_moverMux[13] | sr_moverMux[14] | sr_moverMux[15] | sr_moverMux[16] | sr_moverMux[17] | 
+					sr_moverMux[18] | sr_moverMux[19] | sr_moverMux[20] | sr_moverMux[21] | sr_moverMux[22] | sr_moverMux[23] | 
+					sr_moverMux[24] | sr_moverMux[25] | sr_moverMux[26] | sr_moverMux[27] | sr_moverMux[28] | sr_moverMux[29] | 
+					sr_moverMux[30] | sr_moverMux[31] | 
+					sz_moverMux[0] | sz_moverMux[1] | sz_moverMux[2] | sz_moverMux[3] | sz_moverMux[4] | sz_moverMux[5] | 
+					sz_moverMux[6] | sz_moverMux[7] | sz_moverMux[8] | sz_moverMux[9] | sz_moverMux[10] | sz_moverMux[11] | 
+					sz_moverMux[12] | sz_moverMux[13] | sz_moverMux[14] | sz_moverMux[15] | sz_moverMux[16] | sz_moverMux[17] | 
+					sz_moverMux[18] | sz_moverMux[19] | sz_moverMux[20] | sz_moverMux[21] | sz_moverMux[22] | sz_moverMux[23] | 
+					sz_moverMux[24] | sz_moverMux[25] | sz_moverMux[26] | sz_moverMux[27] | sz_moverMux[28] | sz_moverMux[29] | 
+					sz_moverMux[30] | sz_moverMux[31] | 
+					1'b1;
+wire reset_new;
+assign reset_new = reset & bigOr;
+
+// multiplex constants
+always @(layer_moverMux or OneOver_MutMaxrad_0 or OneOver_MutMaxdep_0 or OneOver_Mut_0 or
+						OneOver_MutMaxrad_1 or OneOver_MutMaxdep_1 or OneOver_Mut_1 or
+						OneOver_MutMaxrad_2 or OneOver_MutMaxdep_2 or OneOver_Mut_2 or
+						OneOver_MutMaxrad_3 or OneOver_MutMaxdep_3 or OneOver_Mut_3 or
+						OneOver_MutMaxrad_4 or OneOver_MutMaxdep_4 or OneOver_Mut_4 or
+						OneOver_MutMaxrad_5 or OneOver_MutMaxdep_5 or OneOver_Mut_5)
+begin
+case(layer_moverMux)
+	3'b000:
+	begin
+		OneOver_MutMaxrad = OneOver_MutMaxrad_0;
+		OneOver_MutMaxdep = OneOver_MutMaxdep_0;
+		OneOver_Mut = OneOver_Mut_0;
+	end
+	3'b001:
+	begin
+		OneOver_MutMaxrad = OneOver_MutMaxrad_1;
+		OneOver_MutMaxdep = OneOver_MutMaxdep_1;
+		OneOver_Mut = OneOver_Mut_1;
+	end
+	3'b010:
+	begin
+		OneOver_MutMaxrad = OneOver_MutMaxrad_2;
+		OneOver_MutMaxdep = OneOver_MutMaxdep_2;
+		OneOver_Mut = OneOver_Mut_2;
+	end
+	3'b011:
+	begin
+		OneOver_MutMaxrad = OneOver_MutMaxrad_3;
+		OneOver_MutMaxdep = OneOver_MutMaxdep_3;
+		OneOver_Mut = OneOver_Mut_3;
+	end
+	3'b100:
+	begin
+		OneOver_MutMaxrad = OneOver_MutMaxrad_4;
+		OneOver_MutMaxdep = OneOver_MutMaxdep_4;
+		OneOver_Mut = OneOver_Mut_4;
+	end
+	3'b101:
+	begin
+		OneOver_MutMaxrad = OneOver_MutMaxrad_5;
+		OneOver_MutMaxdep = OneOver_MutMaxdep_5;
+		OneOver_Mut = OneOver_Mut_5;
+	end
+	default:
+	begin
+		OneOver_MutMaxrad = 0;
+		OneOver_MutMaxdep = 0;
+		OneOver_Mut = 0;
+	end
+endcase
+end
+
+// Determine move value
+always @(sleftz_moverMux or log_rand_num or OneOver_MutMaxrad or OneOver_MutMaxdep or sleftr_moverMux or
+		OneOver_Mut)
+begin
+	// Resource sharing for multipliers
+	if(sleftz_moverMux == 32'b0)
+	begin
+		c_r_op0 = `MAXLOG - log_rand_num;
+		c_r_op1 = OneOver_MutMaxrad;
+		c_z_op0 = `MAXLOG - log_rand_num;
+		c_z_op1 = OneOver_MutMaxdep;
+	end
+	else
+	begin
+		c_r_op0 = sleftr_moverMux;
+		c_r_op1 = OneOver_Mut;
+		c_z_op0 = sleftz_moverMux;
+		c_z_op1 = OneOver_Mut;
+	end
+end
+
+// Determine move value
+always @(sleftz_moverMux or c_r_op0 or c_r_op1 or c_z_op0 or c_z_op1 or sleftr_moverMux)
+begin
+	c_sr_big = c_r_op0 * c_r_op1;
+	c_sz_big = c_z_op0 * c_z_op1;
+	if(sleftz_moverMux == 32'b0)
+	begin
+		c_sr = c_sr_big[2*`BIT_WIDTH - `LOGSCALEFACTOR - 1:`BIT_WIDTH - `LOGSCALEFACTOR];
+		c_sz = c_sz_big[2*`BIT_WIDTH - `LOGSCALEFACTOR - 1:`BIT_WIDTH - `LOGSCALEFACTOR];
+
+		c_sleftr = sleftr_moverMux;
+		c_sleftz = 0;
+
+		//c_sr = `CONST_MOVE_AMOUNT;
+		//c_sz = `CONST_MOVE_AMOUNT;
+	end
+	else
+	begin
+		c_sr = c_sr_big[2*`BIT_WIDTH - `MUTMAX_BITS - 1 - 1:`BIT_WIDTH - `MUTMAX_BITS - 1];
+		c_sz = c_sz_big[2*`BIT_WIDTH - `MUTMAX_BITS - 1 - 1:`BIT_WIDTH - `MUTMAX_BITS - 1];
+
+		c_sleftz = 0;
+		c_sleftr = 0;
+	end
+end
+
+// latch values
+always @ (posedge clock)
+begin
+	if (reset_new)
+	begin
+		// Photon variables
+		x_mover <= 0;
+		y_mover <= 0;
+		z_mover <= 0;
+		ux_mover <= 0;
+		uy_mover <= 0;
+		uz_mover <= 0;
+		sz_mover <= 0;
+		sr_mover <= 0;
+		sleftz_mover <= 0;
+		sleftr_mover <= 0;
+		layer_mover <= 0;
+		weight_mover <= 0;
+		dead_mover <= 1'b1;
+	end
+	else
+	begin
+		if(enable)
+		begin
+			// Photon variables
+			x_mover <= x_moverMux;
+			y_mover <= y_moverMux;
+			z_mover <= z_moverMux;
+			ux_mover <= ux_moverMux;
+			uy_mover <= uy_moverMux;
+			uz_mover <= uz_moverMux;
+			layer_mover <= layer_moverMux;
+			weight_mover <= weight_moverMux;
+			dead_mover <= dead_moverMux;
+
+			sz_mover <= c_sz;
+			sr_mover <= c_sr;
+			sleftz_mover <= c_sleftz;
+			sleftr_mover <= c_sleftr;
+		end
+	end
+end
+
+endmodule
+
+
+module Boundary ( //INPUTS
+				 clock, reset, enable,
+				 x_mover, y_mover, z_mover,
+				 ux_mover, uy_mover, uz_mover,
+				 sz_mover, sr_mover,
+				 sleftz_mover, sleftr_mover,
+				 layer_mover, weight_mover, dead_mover,
+
+				 //OUTPUTS
+				 x_boundaryChecker, y_boundaryChecker, z_boundaryChecker,
+				 ux_boundaryChecker, uy_boundaryChecker, uz_boundaryChecker,
+				 sz_boundaryChecker, sr_boundaryChecker,
+				 sleftz_boundaryChecker, sleftr_boundaryChecker,
+				 layer_boundaryChecker, weight_boundaryChecker, dead_boundaryChecker, hit_boundaryChecker,
+
+				 //CONSTANTS
+				 z1_0, z1_1, z1_2, z1_3, z1_4, z1_5, 
+				 z0_0, z0_1, z0_2, z0_3, z0_4, z0_5,
+				 mut_0, mut_1, mut_2, mut_3, mut_4, mut_5, 
+				 maxDepth_over_maxRadius
+				 );
+
+//parameter BIT_WIDTH=32;
+//parameter LAYER_WIDTH=3;
+//parameter INTMAX=2147483647;
+//parameter INTMIN=-2147483648;
+//parameter DIVIDER_LATENCY=30;
+//parameter FINAL_LATENCY=28;
+//parameter MULT_LATENCY=1;
+//parameter ASPECT_RATIO = 7;
+//parameter TOTAL_LATENCY = `DIVIDER_LATENCY + `FINAL_LATENCY + `MULT_LATENCY + `MULT_LATENCY;
+
+input clock;
+input reset;
+input enable;
+
+input [`BIT_WIDTH-1:0] x_mover;
+input [`BIT_WIDTH-1:0] y_mover;
+input [`BIT_WIDTH-1:0] z_mover;
+input [`BIT_WIDTH-1:0] ux_mover;
+input [`BIT_WIDTH-1:0] uy_mover;
+input [`BIT_WIDTH-1:0] uz_mover;
+input [`BIT_WIDTH-1:0] sz_mover;
+input [`BIT_WIDTH-1:0] sr_mover;
+input [`BIT_WIDTH-1:0] sleftz_mover;
+input [`BIT_WIDTH-1:0] sleftr_mover;
+input [`LAYER_WIDTH-1:0] layer_mover;
+input [`BIT_WIDTH-1:0] weight_mover;
+input	dead_mover;
+
+output [`BIT_WIDTH-1:0] x_boundaryChecker;
+output [`BIT_WIDTH-1:0] y_boundaryChecker;
+output [`BIT_WIDTH-1:0] z_boundaryChecker;
+output [`BIT_WIDTH-1:0] ux_boundaryChecker;
+output [`BIT_WIDTH-1:0] uy_boundaryChecker;
+output [`BIT_WIDTH-1:0] uz_boundaryChecker;
+output [`BIT_WIDTH-1:0] sz_boundaryChecker;
+output [`BIT_WIDTH-1:0] sr_boundaryChecker;
+output [`BIT_WIDTH-1:0] sleftz_boundaryChecker;
+output [`BIT_WIDTH-1:0] sleftr_boundaryChecker;
+output [`LAYER_WIDTH-1:0]layer_boundaryChecker;
+output [`BIT_WIDTH-1:0] weight_boundaryChecker;
+output dead_boundaryChecker;
+output hit_boundaryChecker;
+
+// Constants
+input [`BIT_WIDTH-1:0] z1_0;
+input [`BIT_WIDTH-1:0] z1_1;
+input [`BIT_WIDTH-1:0] z1_2;
+input [`BIT_WIDTH-1:0] z1_3;
+input [`BIT_WIDTH-1:0] z1_4;
+input [`BIT_WIDTH-1:0] z1_5;
+input [`BIT_WIDTH-1:0] z0_0;
+input [`BIT_WIDTH-1:0] z0_1;
+input [`BIT_WIDTH-1:0] z0_2;
+input [`BIT_WIDTH-1:0] z0_3;
+input [`BIT_WIDTH-1:0] z0_4;
+input [`BIT_WIDTH-1:0] z0_5;
+input [`BIT_WIDTH-1:0] mut_0;
+input [`BIT_WIDTH-1:0] mut_1;
+input [`BIT_WIDTH-1:0] mut_2;
+input [`BIT_WIDTH-1:0] mut_3;
+input [`BIT_WIDTH-1:0] mut_4;
+input [`BIT_WIDTH-1:0] mut_5;
+input [`BIT_WIDTH-1:0] maxDepth_over_maxRadius;
+
+
+//WIRES FOR CONNECTING REGISTERS
+//reg	[BIT_WIDTH-1:0]				c_x	[TOTAL_LATENCY - 1:0];
+//reg	[BIT_WIDTH-1:0]				c_y	[TOTAL_LATENCY - 1:0];
+//reg	[BIT_WIDTH-1:0]				c_z	[TOTAL_LATENCY - 1:0];
+//reg	[BIT_WIDTH-1:0]				c_ux	[TOTAL_LATENCY - 1:0];
+//reg	[BIT_WIDTH-1:0]				c_uy	[TOTAL_LATENCY - 1:0];
+//reg	[BIT_WIDTH-1:0]				c_uz	[TOTAL_LATENCY - 1:0];
+//reg	[BIT_WIDTH-1:0]				c_sz	[TOTAL_LATENCY - 1:0];
+//reg	[BIT_WIDTH-1:0]				c_sr	[TOTAL_LATENCY - 1:0];
+//reg	[BIT_WIDTH-1:0]				c_sleftz	[TOTAL_LATENCY - 1:0];
+//reg	[BIT_WIDTH-1:0]				c_sleftr	[TOTAL_LATENCY - 1:0];
+//reg	[BIT_WIDTH-1:0]				c_weight	[TOTAL_LATENCY - 1:0];
+//reg	[LAYER_WIDTH-1:0]			c_layer	[TOTAL_LATENCY - 1:0];
+//reg								c_dead	[TOTAL_LATENCY - 1:0];
+//reg								c_hit	[TOTAL_LATENCY - 1:0];
+//reg	[BIT_WIDTH-1:0]				c_diff[TOTAL_LATENCY - 1:0];
+//reg	[BIT_WIDTH-1:0]				c_dl_b[TOTAL_LATENCY - 1:0];
+//reg	[2*BIT_WIDTH-1:0]			c_numer[TOTAL_LATENCY - 1:0];
+//reg	[BIT_WIDTH-1:0]				c_z1[TOTAL_LATENCY - 1:0];
+//reg	[BIT_WIDTH-1:0]				c_z0[TOTAL_LATENCY - 1:0];
+//reg	[BIT_WIDTH-1:0]				c_mut[TOTAL_LATENCY - 1:0];
+
+//reg	[BIT_WIDTH-1:0]				r_x	[TOTAL_LATENCY - 1:0];
+//reg	[BIT_WIDTH-1:0]				r_y	[TOTAL_LATENCY - 1:0];
+//reg	[BIT_WIDTH-1:0]				r_z	[TOTAL_LATENCY - 1:0];
+//reg	[BIT_WIDTH-1:0]				r_ux	[TOTAL_LATENCY - 1:0];
+//reg	[BIT_WIDTH-1:0]				r_uy	[TOTAL_LATENCY - 1:0];
+//reg	[BIT_WIDTH-1:0]				r_uz	[TOTAL_LATENCY - 1:0];
+//reg	[BIT_WIDTH-1:0]				r_sz	[TOTAL_LATENCY - 1:0];
+//reg	[BIT_WIDTH-1:0]				r_sr	[TOTAL_LATENCY - 1:0];
+//reg	[BIT_WIDTH-1:0]				r_sleftz	[TOTAL_LATENCY - 1:0];
+//reg	[BIT_WIDTH-1:0]				r_sleftr	[TOTAL_LATENCY - 1:0];
+//reg	[BIT_WIDTH-1:0]				r_weight	[TOTAL_LATENCY - 1:0];
+//reg	[LAYER_WIDTH-1:0]			r_layer	[TOTAL_LATENCY - 1:0];
+//reg								r_dead	[TOTAL_LATENCY - 1:0];
+//reg								r_hit	[TOTAL_LATENCY - 1:0];
+//reg	[BIT_WIDTH-1:0]				r_diff[TOTAL_LATENCY - 1:0];
+//reg	[BIT_WIDTH-1:0]				r_dl_b[TOTAL_LATENCY - 1:0];
+//reg	[2*BIT_WIDTH-1:0]			r_numer[TOTAL_LATENCY - 1:0];
+//reg	[BIT_WIDTH-1:0]				r_z1[TOTAL_LATENCY - 1:0];
+//reg	[BIT_WIDTH-1:0]				r_z0[TOTAL_LATENCY - 1:0];
+//reg	[BIT_WIDTH-1:0]				r_mut[TOTAL_LATENCY - 1:0];
+
+
+//EXPANDED FOR ODIN
+//reg	[BIT_WIDTH-1:0]				c_x	[TOTAL_LATENCY - 1:0];
+reg	[`BIT_WIDTH-1:0]				c_x__0;
+reg	[`BIT_WIDTH-1:0]				c_x__1;
+reg	[`BIT_WIDTH-1:0]				c_x__2;
+reg	[`BIT_WIDTH-1:0]				c_x__3;
+reg	[`BIT_WIDTH-1:0]				c_x__4;
+reg	[`BIT_WIDTH-1:0]				c_x__5;
+reg	[`BIT_WIDTH-1:0]				c_x__6;
+reg	[`BIT_WIDTH-1:0]				c_x__7;
+reg	[`BIT_WIDTH-1:0]				c_x__8;
+reg	[`BIT_WIDTH-1:0]				c_x__9;
+reg	[`BIT_WIDTH-1:0]				c_x__10;
+reg	[`BIT_WIDTH-1:0]				c_x__11;
+reg	[`BIT_WIDTH-1:0]				c_x__12;
+reg	[`BIT_WIDTH-1:0]				c_x__13;
+reg	[`BIT_WIDTH-1:0]				c_x__14;
+reg	[`BIT_WIDTH-1:0]				c_x__15;
+reg	[`BIT_WIDTH-1:0]				c_x__16;
+reg	[`BIT_WIDTH-1:0]				c_x__17;
+reg	[`BIT_WIDTH-1:0]				c_x__18;
+reg	[`BIT_WIDTH-1:0]				c_x__19;
+reg	[`BIT_WIDTH-1:0]				c_x__20;
+reg	[`BIT_WIDTH-1:0]				c_x__21;
+reg	[`BIT_WIDTH-1:0]				c_x__22;
+reg	[`BIT_WIDTH-1:0]				c_x__23;
+reg	[`BIT_WIDTH-1:0]				c_x__24;
+reg	[`BIT_WIDTH-1:0]				c_x__25;
+reg	[`BIT_WIDTH-1:0]				c_x__26;
+reg	[`BIT_WIDTH-1:0]				c_x__27;
+reg	[`BIT_WIDTH-1:0]				c_x__28;
+reg	[`BIT_WIDTH-1:0]				c_x__29;
+reg	[`BIT_WIDTH-1:0]				c_x__30;
+reg	[`BIT_WIDTH-1:0]				c_x__31;
+reg	[`BIT_WIDTH-1:0]				c_x__32;
+reg	[`BIT_WIDTH-1:0]				c_x__33;
+reg	[`BIT_WIDTH-1:0]				c_x__34;
+reg	[`BIT_WIDTH-1:0]				c_x__35;
+reg	[`BIT_WIDTH-1:0]				c_x__36;
+reg	[`BIT_WIDTH-1:0]				c_x__37;
+reg	[`BIT_WIDTH-1:0]				c_x__38;
+reg	[`BIT_WIDTH-1:0]				c_x__39;
+reg	[`BIT_WIDTH-1:0]				c_x__40;
+reg	[`BIT_WIDTH-1:0]				c_x__41;
+reg	[`BIT_WIDTH-1:0]				c_x__42;
+reg	[`BIT_WIDTH-1:0]				c_x__43;
+reg	[`BIT_WIDTH-1:0]				c_x__44;
+reg	[`BIT_WIDTH-1:0]				c_x__45;
+reg	[`BIT_WIDTH-1:0]				c_x__46;
+reg	[`BIT_WIDTH-1:0]				c_x__47;
+reg	[`BIT_WIDTH-1:0]				c_x__48;
+reg	[`BIT_WIDTH-1:0]				c_x__49;
+reg	[`BIT_WIDTH-1:0]				c_x__50;
+reg	[`BIT_WIDTH-1:0]				c_x__51;
+reg	[`BIT_WIDTH-1:0]				c_x__52;
+reg	[`BIT_WIDTH-1:0]				c_x__53;
+reg	[`BIT_WIDTH-1:0]				c_x__54;
+reg	[`BIT_WIDTH-1:0]				c_x__55;
+reg	[`BIT_WIDTH-1:0]				c_x__56;
+reg	[`BIT_WIDTH-1:0]				c_x__57;
+reg	[`BIT_WIDTH-1:0]				c_x__58;
+reg	[`BIT_WIDTH-1:0]				c_x__59;
+
+//reg	[BIT_WIDTH-1:0]				c_y	[TOTAL_LATENCY - 1:0];
+
+
+reg	[`BIT_WIDTH-1:0]				c_y__0;
+reg	[`BIT_WIDTH-1:0]				c_y__1;
+reg	[`BIT_WIDTH-1:0]				c_y__2;
+reg	[`BIT_WIDTH-1:0]				c_y__3;
+reg	[`BIT_WIDTH-1:0]				c_y__4;
+reg	[`BIT_WIDTH-1:0]				c_y__5;
+reg	[`BIT_WIDTH-1:0]				c_y__6;
+reg	[`BIT_WIDTH-1:0]				c_y__7;
+reg	[`BIT_WIDTH-1:0]				c_y__8;
+reg	[`BIT_WIDTH-1:0]				c_y__9;
+reg	[`BIT_WIDTH-1:0]				c_y__10;
+reg	[`BIT_WIDTH-1:0]				c_y__11;
+reg	[`BIT_WIDTH-1:0]				c_y__12;
+reg	[`BIT_WIDTH-1:0]				c_y__13;
+reg	[`BIT_WIDTH-1:0]				c_y__14;
+reg	[`BIT_WIDTH-1:0]				c_y__15;
+reg	[`BIT_WIDTH-1:0]				c_y__16;
+reg	[`BIT_WIDTH-1:0]				c_y__17;
+reg	[`BIT_WIDTH-1:0]				c_y__18;
+reg	[`BIT_WIDTH-1:0]				c_y__19;
+reg	[`BIT_WIDTH-1:0]				c_y__20;
+reg	[`BIT_WIDTH-1:0]				c_y__21;
+reg	[`BIT_WIDTH-1:0]				c_y__22;
+reg	[`BIT_WIDTH-1:0]				c_y__23;
+reg	[`BIT_WIDTH-1:0]				c_y__24;
+reg	[`BIT_WIDTH-1:0]				c_y__25;
+reg	[`BIT_WIDTH-1:0]				c_y__26;
+reg	[`BIT_WIDTH-1:0]				c_y__27;
+reg	[`BIT_WIDTH-1:0]				c_y__28;
+reg	[`BIT_WIDTH-1:0]				c_y__29;
+reg	[`BIT_WIDTH-1:0]				c_y__30;
+reg	[`BIT_WIDTH-1:0]				c_y__31;
+reg	[`BIT_WIDTH-1:0]				c_y__32;
+reg	[`BIT_WIDTH-1:0]				c_y__33;
+reg	[`BIT_WIDTH-1:0]				c_y__34;
+reg	[`BIT_WIDTH-1:0]				c_y__35;
+reg	[`BIT_WIDTH-1:0]				c_y__36;
+reg	[`BIT_WIDTH-1:0]				c_y__37;
+reg	[`BIT_WIDTH-1:0]				c_y__38;
+reg	[`BIT_WIDTH-1:0]				c_y__39;
+reg	[`BIT_WIDTH-1:0]				c_y__40;
+reg	[`BIT_WIDTH-1:0]				c_y__41;
+reg	[`BIT_WIDTH-1:0]				c_y__42;
+reg	[`BIT_WIDTH-1:0]				c_y__43;
+reg	[`BIT_WIDTH-1:0]				c_y__44;
+reg	[`BIT_WIDTH-1:0]				c_y__45;
+reg	[`BIT_WIDTH-1:0]				c_y__46;
+reg	[`BIT_WIDTH-1:0]				c_y__47;
+reg	[`BIT_WIDTH-1:0]				c_y__48;
+reg	[`BIT_WIDTH-1:0]				c_y__49;
+reg	[`BIT_WIDTH-1:0]				c_y__50;
+reg	[`BIT_WIDTH-1:0]				c_y__51;
+reg	[`BIT_WIDTH-1:0]				c_y__52;
+reg	[`BIT_WIDTH-1:0]				c_y__53;
+reg	[`BIT_WIDTH-1:0]				c_y__54;
+reg	[`BIT_WIDTH-1:0]				c_y__55;
+reg	[`BIT_WIDTH-1:0]				c_y__56;
+reg	[`BIT_WIDTH-1:0]				c_y__57;
+reg	[`BIT_WIDTH-1:0]				c_y__58;
+reg	[`BIT_WIDTH-1:0]				c_y__59;
+
+
+//reg	[BIT_WIDTH-1:0]				c_z	[TOTAL_LATENCY - 1:0];
+
+
+reg	[`BIT_WIDTH-1:0]				c_z__0;
+reg	[`BIT_WIDTH-1:0]				c_z__1;
+reg	[`BIT_WIDTH-1:0]				c_z__2;
+reg	[`BIT_WIDTH-1:0]				c_z__3;
+reg	[`BIT_WIDTH-1:0]				c_z__4;
+reg	[`BIT_WIDTH-1:0]				c_z__5;
+reg	[`BIT_WIDTH-1:0]				c_z__6;
+reg	[`BIT_WIDTH-1:0]				c_z__7;
+reg	[`BIT_WIDTH-1:0]				c_z__8;
+reg	[`BIT_WIDTH-1:0]				c_z__9;
+reg	[`BIT_WIDTH-1:0]				c_z__10;
+reg	[`BIT_WIDTH-1:0]				c_z__11;
+reg	[`BIT_WIDTH-1:0]				c_z__12;
+reg	[`BIT_WIDTH-1:0]				c_z__13;
+reg	[`BIT_WIDTH-1:0]				c_z__14;
+reg	[`BIT_WIDTH-1:0]				c_z__15;
+reg	[`BIT_WIDTH-1:0]				c_z__16;
+reg	[`BIT_WIDTH-1:0]				c_z__17;
+reg	[`BIT_WIDTH-1:0]				c_z__18;
+reg	[`BIT_WIDTH-1:0]				c_z__19;
+reg	[`BIT_WIDTH-1:0]				c_z__20;
+reg	[`BIT_WIDTH-1:0]				c_z__21;
+reg	[`BIT_WIDTH-1:0]				c_z__22;
+reg	[`BIT_WIDTH-1:0]				c_z__23;
+reg	[`BIT_WIDTH-1:0]				c_z__24;
+reg	[`BIT_WIDTH-1:0]				c_z__25;
+reg	[`BIT_WIDTH-1:0]				c_z__26;
+reg	[`BIT_WIDTH-1:0]				c_z__27;
+reg	[`BIT_WIDTH-1:0]				c_z__28;
+reg	[`BIT_WIDTH-1:0]				c_z__29;
+reg	[`BIT_WIDTH-1:0]				c_z__30;
+reg	[`BIT_WIDTH-1:0]				c_z__31;
+reg	[`BIT_WIDTH-1:0]				c_z__32;
+reg	[`BIT_WIDTH-1:0]				c_z__33;
+reg	[`BIT_WIDTH-1:0]				c_z__34;
+reg	[`BIT_WIDTH-1:0]				c_z__35;
+reg	[`BIT_WIDTH-1:0]				c_z__36;
+reg	[`BIT_WIDTH-1:0]				c_z__37;
+reg	[`BIT_WIDTH-1:0]				c_z__38;
+reg	[`BIT_WIDTH-1:0]				c_z__39;
+reg	[`BIT_WIDTH-1:0]				c_z__40;
+reg	[`BIT_WIDTH-1:0]				c_z__41;
+reg	[`BIT_WIDTH-1:0]				c_z__42;
+reg	[`BIT_WIDTH-1:0]				c_z__43;
+reg	[`BIT_WIDTH-1:0]				c_z__44;
+reg	[`BIT_WIDTH-1:0]				c_z__45;
+reg	[`BIT_WIDTH-1:0]				c_z__46;
+reg	[`BIT_WIDTH-1:0]				c_z__47;
+reg	[`BIT_WIDTH-1:0]				c_z__48;
+reg	[`BIT_WIDTH-1:0]				c_z__49;
+reg	[`BIT_WIDTH-1:0]				c_z__50;
+reg	[`BIT_WIDTH-1:0]				c_z__51;
+reg	[`BIT_WIDTH-1:0]				c_z__52;
+reg	[`BIT_WIDTH-1:0]				c_z__53;
+reg	[`BIT_WIDTH-1:0]				c_z__54;
+reg	[`BIT_WIDTH-1:0]				c_z__55;
+reg	[`BIT_WIDTH-1:0]				c_z__56;
+reg	[`BIT_WIDTH-1:0]				c_z__57;
+reg	[`BIT_WIDTH-1:0]				c_z__58;
+reg	[`BIT_WIDTH-1:0]				c_z__59;
+
+
+
+//reg	[`BIT_WIDTH-1:0]				c_ux	[TOTAL_LATENCY - 1:0];
+
+reg	[`BIT_WIDTH-1:0]				c_ux__0;
+reg	[`BIT_WIDTH-1:0]				c_ux__1;
+reg	[`BIT_WIDTH-1:0]				c_ux__2;
+reg	[`BIT_WIDTH-1:0]				c_ux__3;
+reg	[`BIT_WIDTH-1:0]				c_ux__4;
+reg	[`BIT_WIDTH-1:0]				c_ux__5;
+reg	[`BIT_WIDTH-1:0]				c_ux__6;
+reg	[`BIT_WIDTH-1:0]				c_ux__7;
+reg	[`BIT_WIDTH-1:0]				c_ux__8;
+reg	[`BIT_WIDTH-1:0]				c_ux__9;
+reg	[`BIT_WIDTH-1:0]				c_ux__10;
+reg	[`BIT_WIDTH-1:0]				c_ux__11;
+reg	[`BIT_WIDTH-1:0]				c_ux__12;
+reg	[`BIT_WIDTH-1:0]				c_ux__13;
+reg	[`BIT_WIDTH-1:0]				c_ux__14;
+reg	[`BIT_WIDTH-1:0]				c_ux__15;
+reg	[`BIT_WIDTH-1:0]				c_ux__16;
+reg	[`BIT_WIDTH-1:0]				c_ux__17;
+reg	[`BIT_WIDTH-1:0]				c_ux__18;
+reg	[`BIT_WIDTH-1:0]				c_ux__19;
+reg	[`BIT_WIDTH-1:0]				c_ux__20;
+reg	[`BIT_WIDTH-1:0]				c_ux__21;
+reg	[`BIT_WIDTH-1:0]				c_ux__22;
+reg	[`BIT_WIDTH-1:0]				c_ux__23;
+reg	[`BIT_WIDTH-1:0]				c_ux__24;
+reg	[`BIT_WIDTH-1:0]				c_ux__25;
+reg	[`BIT_WIDTH-1:0]				c_ux__26;
+reg	[`BIT_WIDTH-1:0]				c_ux__27;
+reg	[`BIT_WIDTH-1:0]				c_ux__28;
+reg	[`BIT_WIDTH-1:0]				c_ux__29;
+reg	[`BIT_WIDTH-1:0]				c_ux__30;
+reg	[`BIT_WIDTH-1:0]				c_ux__31;
+reg	[`BIT_WIDTH-1:0]				c_ux__32;
+reg	[`BIT_WIDTH-1:0]				c_ux__33;
+reg	[`BIT_WIDTH-1:0]				c_ux__34;
+reg	[`BIT_WIDTH-1:0]				c_ux__35;
+reg	[`BIT_WIDTH-1:0]				c_ux__36;
+reg	[`BIT_WIDTH-1:0]				c_ux__37;
+reg	[`BIT_WIDTH-1:0]				c_ux__38;
+reg	[`BIT_WIDTH-1:0]				c_ux__39;
+reg	[`BIT_WIDTH-1:0]				c_ux__40;
+reg	[`BIT_WIDTH-1:0]				c_ux__41;
+reg	[`BIT_WIDTH-1:0]				c_ux__42;
+reg	[`BIT_WIDTH-1:0]				c_ux__43;
+reg	[`BIT_WIDTH-1:0]				c_ux__44;
+reg	[`BIT_WIDTH-1:0]				c_ux__45;
+reg	[`BIT_WIDTH-1:0]				c_ux__46;
+reg	[`BIT_WIDTH-1:0]				c_ux__47;
+reg	[`BIT_WIDTH-1:0]				c_ux__48;
+reg	[`BIT_WIDTH-1:0]				c_ux__49;
+reg	[`BIT_WIDTH-1:0]				c_ux__50;
+reg	[`BIT_WIDTH-1:0]				c_ux__51;
+reg	[`BIT_WIDTH-1:0]				c_ux__52;
+reg	[`BIT_WIDTH-1:0]				c_ux__53;
+reg	[`BIT_WIDTH-1:0]				c_ux__54;
+reg	[`BIT_WIDTH-1:0]				c_ux__55;
+reg	[`BIT_WIDTH-1:0]				c_ux__56;
+reg	[`BIT_WIDTH-1:0]				c_ux__57;
+reg	[`BIT_WIDTH-1:0]				c_ux__58;
+reg	[`BIT_WIDTH-1:0]				c_ux__59;
+//reg	[`BIT_WIDTH-1:0]				c_uy	[TOTAL_LATENCY - 1:0];
+
+reg	[`BIT_WIDTH-1:0]				c_uy__0;
+reg	[`BIT_WIDTH-1:0]				c_uy__1;
+reg	[`BIT_WIDTH-1:0]				c_uy__2;
+reg	[`BIT_WIDTH-1:0]				c_uy__3;
+reg	[`BIT_WIDTH-1:0]				c_uy__4;
+reg	[`BIT_WIDTH-1:0]				c_uy__5;
+reg	[`BIT_WIDTH-1:0]				c_uy__6;
+reg	[`BIT_WIDTH-1:0]				c_uy__7;
+reg	[`BIT_WIDTH-1:0]				c_uy__8;
+reg	[`BIT_WIDTH-1:0]				c_uy__9;
+reg	[`BIT_WIDTH-1:0]				c_uy__10;
+reg	[`BIT_WIDTH-1:0]				c_uy__11;
+reg	[`BIT_WIDTH-1:0]				c_uy__12;
+reg	[`BIT_WIDTH-1:0]				c_uy__13;
+reg	[`BIT_WIDTH-1:0]				c_uy__14;
+reg	[`BIT_WIDTH-1:0]				c_uy__15;
+reg	[`BIT_WIDTH-1:0]				c_uy__16;
+reg	[`BIT_WIDTH-1:0]				c_uy__17;
+reg	[`BIT_WIDTH-1:0]				c_uy__18;
+reg	[`BIT_WIDTH-1:0]				c_uy__19;
+reg	[`BIT_WIDTH-1:0]				c_uy__20;
+reg	[`BIT_WIDTH-1:0]				c_uy__21;
+reg	[`BIT_WIDTH-1:0]				c_uy__22;
+reg	[`BIT_WIDTH-1:0]				c_uy__23;
+reg	[`BIT_WIDTH-1:0]				c_uy__24;
+reg	[`BIT_WIDTH-1:0]				c_uy__25;
+reg	[`BIT_WIDTH-1:0]				c_uy__26;
+reg	[`BIT_WIDTH-1:0]				c_uy__27;
+reg	[`BIT_WIDTH-1:0]				c_uy__28;
+reg	[`BIT_WIDTH-1:0]				c_uy__29;
+reg	[`BIT_WIDTH-1:0]				c_uy__30;
+reg	[`BIT_WIDTH-1:0]				c_uy__31;
+reg	[`BIT_WIDTH-1:0]				c_uy__32;
+reg	[`BIT_WIDTH-1:0]				c_uy__33;
+reg	[`BIT_WIDTH-1:0]				c_uy__34;
+reg	[`BIT_WIDTH-1:0]				c_uy__35;
+reg	[`BIT_WIDTH-1:0]				c_uy__36;
+reg	[`BIT_WIDTH-1:0]				c_uy__37;
+reg	[`BIT_WIDTH-1:0]				c_uy__38;
+reg	[`BIT_WIDTH-1:0]				c_uy__39;
+reg	[`BIT_WIDTH-1:0]				c_uy__40;
+reg	[`BIT_WIDTH-1:0]				c_uy__41;
+reg	[`BIT_WIDTH-1:0]				c_uy__42;
+reg	[`BIT_WIDTH-1:0]				c_uy__43;
+reg	[`BIT_WIDTH-1:0]				c_uy__44;
+reg	[`BIT_WIDTH-1:0]				c_uy__45;
+reg	[`BIT_WIDTH-1:0]				c_uy__46;
+reg	[`BIT_WIDTH-1:0]				c_uy__47;
+reg	[`BIT_WIDTH-1:0]				c_uy__48;
+reg	[`BIT_WIDTH-1:0]				c_uy__49;
+reg	[`BIT_WIDTH-1:0]				c_uy__50;
+reg	[`BIT_WIDTH-1:0]				c_uy__51;
+reg	[`BIT_WIDTH-1:0]				c_uy__52;
+reg	[`BIT_WIDTH-1:0]				c_uy__53;
+reg	[`BIT_WIDTH-1:0]				c_uy__54;
+reg	[`BIT_WIDTH-1:0]				c_uy__55;
+reg	[`BIT_WIDTH-1:0]				c_uy__56;
+reg	[`BIT_WIDTH-1:0]				c_uy__57;
+reg	[`BIT_WIDTH-1:0]				c_uy__58;
+reg	[`BIT_WIDTH-1:0]				c_uy__59;
+//reg	[`BIT_WIDTH-1:0]				c_uz	[TOTAL_LATENCY - 1:0];
+
+reg	[`BIT_WIDTH-1:0]				c_uz__0;
+reg	[`BIT_WIDTH-1:0]				c_uz__1;
+reg	[`BIT_WIDTH-1:0]				c_uz__2;
+reg	[`BIT_WIDTH-1:0]				c_uz__3;
+reg	[`BIT_WIDTH-1:0]				c_uz__4;
+reg	[`BIT_WIDTH-1:0]				c_uz__5;
+reg	[`BIT_WIDTH-1:0]				c_uz__6;
+reg	[`BIT_WIDTH-1:0]				c_uz__7;
+reg	[`BIT_WIDTH-1:0]				c_uz__8;
+reg	[`BIT_WIDTH-1:0]				c_uz__9;
+reg	[`BIT_WIDTH-1:0]				c_uz__10;
+reg	[`BIT_WIDTH-1:0]				c_uz__11;
+reg	[`BIT_WIDTH-1:0]				c_uz__12;
+reg	[`BIT_WIDTH-1:0]				c_uz__13;
+reg	[`BIT_WIDTH-1:0]				c_uz__14;
+reg	[`BIT_WIDTH-1:0]				c_uz__15;
+reg	[`BIT_WIDTH-1:0]				c_uz__16;
+reg	[`BIT_WIDTH-1:0]				c_uz__17;
+reg	[`BIT_WIDTH-1:0]				c_uz__18;
+reg	[`BIT_WIDTH-1:0]				c_uz__19;
+reg	[`BIT_WIDTH-1:0]				c_uz__20;
+reg	[`BIT_WIDTH-1:0]				c_uz__21;
+reg	[`BIT_WIDTH-1:0]				c_uz__22;
+reg	[`BIT_WIDTH-1:0]				c_uz__23;
+reg	[`BIT_WIDTH-1:0]				c_uz__24;
+reg	[`BIT_WIDTH-1:0]				c_uz__25;
+reg	[`BIT_WIDTH-1:0]				c_uz__26;
+reg	[`BIT_WIDTH-1:0]				c_uz__27;
+reg	[`BIT_WIDTH-1:0]				c_uz__28;
+reg	[`BIT_WIDTH-1:0]				c_uz__29;
+reg	[`BIT_WIDTH-1:0]				c_uz__30;
+reg	[`BIT_WIDTH-1:0]				c_uz__31;
+reg	[`BIT_WIDTH-1:0]				c_uz__32;
+reg	[`BIT_WIDTH-1:0]				c_uz__33;
+reg	[`BIT_WIDTH-1:0]				c_uz__34;
+reg	[`BIT_WIDTH-1:0]				c_uz__35;
+reg	[`BIT_WIDTH-1:0]				c_uz__36;
+reg	[`BIT_WIDTH-1:0]				c_uz__37;
+reg	[`BIT_WIDTH-1:0]				c_uz__38;
+reg	[`BIT_WIDTH-1:0]				c_uz__39;
+reg	[`BIT_WIDTH-1:0]				c_uz__40;
+reg	[`BIT_WIDTH-1:0]				c_uz__41;
+reg	[`BIT_WIDTH-1:0]				c_uz__42;
+reg	[`BIT_WIDTH-1:0]				c_uz__43;
+reg	[`BIT_WIDTH-1:0]				c_uz__44;
+reg	[`BIT_WIDTH-1:0]				c_uz__45;
+reg	[`BIT_WIDTH-1:0]				c_uz__46;
+reg	[`BIT_WIDTH-1:0]				c_uz__47;
+reg	[`BIT_WIDTH-1:0]				c_uz__48;
+reg	[`BIT_WIDTH-1:0]				c_uz__49;
+reg	[`BIT_WIDTH-1:0]				c_uz__50;
+reg	[`BIT_WIDTH-1:0]				c_uz__51;
+reg	[`BIT_WIDTH-1:0]				c_uz__52;
+reg	[`BIT_WIDTH-1:0]				c_uz__53;
+reg	[`BIT_WIDTH-1:0]				c_uz__54;
+reg	[`BIT_WIDTH-1:0]				c_uz__55;
+reg	[`BIT_WIDTH-1:0]				c_uz__56;
+reg	[`BIT_WIDTH-1:0]				c_uz__57;
+reg	[`BIT_WIDTH-1:0]				c_uz__58;
+reg	[`BIT_WIDTH-1:0]				c_uz__59;
+//reg	[`BIT_WIDTH-1:0]				c_sz	[TOTAL_LATENCY - 1:0];
+
+reg	[`BIT_WIDTH-1:0]				c_sz__0;
+reg	[`BIT_WIDTH-1:0]				c_sz__1;
+reg	[`BIT_WIDTH-1:0]				c_sz__2;
+reg	[`BIT_WIDTH-1:0]				c_sz__3;
+reg	[`BIT_WIDTH-1:0]				c_sz__4;
+reg	[`BIT_WIDTH-1:0]				c_sz__5;
+reg	[`BIT_WIDTH-1:0]				c_sz__6;
+reg	[`BIT_WIDTH-1:0]				c_sz__7;
+reg	[`BIT_WIDTH-1:0]				c_sz__8;
+reg	[`BIT_WIDTH-1:0]				c_sz__9;
+reg	[`BIT_WIDTH-1:0]				c_sz__10;
+reg	[`BIT_WIDTH-1:0]				c_sz__11;
+reg	[`BIT_WIDTH-1:0]				c_sz__12;
+reg	[`BIT_WIDTH-1:0]				c_sz__13;
+reg	[`BIT_WIDTH-1:0]				c_sz__14;
+reg	[`BIT_WIDTH-1:0]				c_sz__15;
+reg	[`BIT_WIDTH-1:0]				c_sz__16;
+reg	[`BIT_WIDTH-1:0]				c_sz__17;
+reg	[`BIT_WIDTH-1:0]				c_sz__18;
+reg	[`BIT_WIDTH-1:0]				c_sz__19;
+reg	[`BIT_WIDTH-1:0]				c_sz__20;
+reg	[`BIT_WIDTH-1:0]				c_sz__21;
+reg	[`BIT_WIDTH-1:0]				c_sz__22;
+reg	[`BIT_WIDTH-1:0]				c_sz__23;
+reg	[`BIT_WIDTH-1:0]				c_sz__24;
+reg	[`BIT_WIDTH-1:0]				c_sz__25;
+reg	[`BIT_WIDTH-1:0]				c_sz__26;
+reg	[`BIT_WIDTH-1:0]				c_sz__27;
+reg	[`BIT_WIDTH-1:0]				c_sz__28;
+reg	[`BIT_WIDTH-1:0]				c_sz__29;
+reg	[`BIT_WIDTH-1:0]				c_sz__30;
+reg	[`BIT_WIDTH-1:0]				c_sz__31;
+reg	[`BIT_WIDTH-1:0]				c_sz__32;
+reg	[`BIT_WIDTH-1:0]				c_sz__33;
+reg	[`BIT_WIDTH-1:0]				c_sz__34;
+reg	[`BIT_WIDTH-1:0]				c_sz__35;
+reg	[`BIT_WIDTH-1:0]				c_sz__36;
+reg	[`BIT_WIDTH-1:0]				c_sz__37;
+reg	[`BIT_WIDTH-1:0]				c_sz__38;
+reg	[`BIT_WIDTH-1:0]				c_sz__39;
+reg	[`BIT_WIDTH-1:0]				c_sz__40;
+reg	[`BIT_WIDTH-1:0]				c_sz__41;
+reg	[`BIT_WIDTH-1:0]				c_sz__42;
+reg	[`BIT_WIDTH-1:0]				c_sz__43;
+reg	[`BIT_WIDTH-1:0]				c_sz__44;
+reg	[`BIT_WIDTH-1:0]				c_sz__45;
+reg	[`BIT_WIDTH-1:0]				c_sz__46;
+reg	[`BIT_WIDTH-1:0]				c_sz__47;
+reg	[`BIT_WIDTH-1:0]				c_sz__48;
+reg	[`BIT_WIDTH-1:0]				c_sz__49;
+reg	[`BIT_WIDTH-1:0]				c_sz__50;
+reg	[`BIT_WIDTH-1:0]				c_sz__51;
+reg	[`BIT_WIDTH-1:0]				c_sz__52;
+reg	[`BIT_WIDTH-1:0]				c_sz__53;
+reg	[`BIT_WIDTH-1:0]				c_sz__54;
+reg	[`BIT_WIDTH-1:0]				c_sz__55;
+reg	[`BIT_WIDTH-1:0]				c_sz__56;
+reg	[`BIT_WIDTH-1:0]				c_sz__57;
+reg	[`BIT_WIDTH-1:0]				c_sz__58;
+reg	[`BIT_WIDTH-1:0]				c_sz__59;
+//reg	[`BIT_WIDTH-1:0]				c_sr	[TOTAL_LATENCY - 1:0];
+
+reg	[`BIT_WIDTH-1:0]				c_sr__0;
+reg	[`BIT_WIDTH-1:0]				c_sr__1;
+reg	[`BIT_WIDTH-1:0]				c_sr__2;
+reg	[`BIT_WIDTH-1:0]				c_sr__3;
+reg	[`BIT_WIDTH-1:0]				c_sr__4;
+reg	[`BIT_WIDTH-1:0]				c_sr__5;
+reg	[`BIT_WIDTH-1:0]				c_sr__6;
+reg	[`BIT_WIDTH-1:0]				c_sr__7;
+reg	[`BIT_WIDTH-1:0]				c_sr__8;
+reg	[`BIT_WIDTH-1:0]				c_sr__9;
+reg	[`BIT_WIDTH-1:0]				c_sr__10;
+reg	[`BIT_WIDTH-1:0]				c_sr__11;
+reg	[`BIT_WIDTH-1:0]				c_sr__12;
+reg	[`BIT_WIDTH-1:0]				c_sr__13;
+reg	[`BIT_WIDTH-1:0]				c_sr__14;
+reg	[`BIT_WIDTH-1:0]				c_sr__15;
+reg	[`BIT_WIDTH-1:0]				c_sr__16;
+reg	[`BIT_WIDTH-1:0]				c_sr__17;
+reg	[`BIT_WIDTH-1:0]				c_sr__18;
+reg	[`BIT_WIDTH-1:0]				c_sr__19;
+reg	[`BIT_WIDTH-1:0]				c_sr__20;
+reg	[`BIT_WIDTH-1:0]				c_sr__21;
+reg	[`BIT_WIDTH-1:0]				c_sr__22;
+reg	[`BIT_WIDTH-1:0]				c_sr__23;
+reg	[`BIT_WIDTH-1:0]				c_sr__24;
+reg	[`BIT_WIDTH-1:0]				c_sr__25;
+reg	[`BIT_WIDTH-1:0]				c_sr__26;
+reg	[`BIT_WIDTH-1:0]				c_sr__27;
+reg	[`BIT_WIDTH-1:0]				c_sr__28;
+reg	[`BIT_WIDTH-1:0]				c_sr__29;
+reg	[`BIT_WIDTH-1:0]				c_sr__30;
+reg	[`BIT_WIDTH-1:0]				c_sr__31;
+reg	[`BIT_WIDTH-1:0]				c_sr__32;
+reg	[`BIT_WIDTH-1:0]				c_sr__33;
+reg	[`BIT_WIDTH-1:0]				c_sr__34;
+reg	[`BIT_WIDTH-1:0]				c_sr__35;
+reg	[`BIT_WIDTH-1:0]				c_sr__36;
+reg	[`BIT_WIDTH-1:0]				c_sr__37;
+reg	[`BIT_WIDTH-1:0]				c_sr__38;
+reg	[`BIT_WIDTH-1:0]				c_sr__39;
+reg	[`BIT_WIDTH-1:0]				c_sr__40;
+reg	[`BIT_WIDTH-1:0]				c_sr__41;
+reg	[`BIT_WIDTH-1:0]				c_sr__42;
+reg	[`BIT_WIDTH-1:0]				c_sr__43;
+reg	[`BIT_WIDTH-1:0]				c_sr__44;
+reg	[`BIT_WIDTH-1:0]				c_sr__45;
+reg	[`BIT_WIDTH-1:0]				c_sr__46;
+reg	[`BIT_WIDTH-1:0]				c_sr__47;
+reg	[`BIT_WIDTH-1:0]				c_sr__48;
+reg	[`BIT_WIDTH-1:0]				c_sr__49;
+reg	[`BIT_WIDTH-1:0]				c_sr__50;
+reg	[`BIT_WIDTH-1:0]				c_sr__51;
+reg	[`BIT_WIDTH-1:0]				c_sr__52;
+reg	[`BIT_WIDTH-1:0]				c_sr__53;
+reg	[`BIT_WIDTH-1:0]				c_sr__54;
+reg	[`BIT_WIDTH-1:0]				c_sr__55;
+reg	[`BIT_WIDTH-1:0]				c_sr__56;
+reg	[`BIT_WIDTH-1:0]				c_sr__57;
+reg	[`BIT_WIDTH-1:0]				c_sr__58;
+reg	[`BIT_WIDTH-1:0]				c_sr__59;
+//reg	[`BIT_WIDTH-1:0]				c_sleftz	[TOTAL_LATENCY - 1:0];
+
+reg	[`BIT_WIDTH-1:0]				c_sleftz__0;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__1;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__2;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__3;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__4;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__5;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__6;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__7;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__8;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__9;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__10;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__11;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__12;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__13;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__14;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__15;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__16;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__17;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__18;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__19;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__20;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__21;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__22;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__23;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__24;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__25;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__26;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__27;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__28;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__29;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__30;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__31;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__32;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__33;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__34;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__35;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__36;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__37;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__38;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__39;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__40;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__41;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__42;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__43;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__44;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__45;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__46;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__47;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__48;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__49;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__50;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__51;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__52;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__53;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__54;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__55;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__56;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__57;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__58;
+reg	[`BIT_WIDTH-1:0]				c_sleftz__59;
+//reg	[`BIT_WIDTH-1:0]				c_sleftr	[TOTAL_LATENCY - 1:0];
+
+reg	[`BIT_WIDTH-1:0]				c_sleftr__0;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__1;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__2;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__3;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__4;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__5;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__6;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__7;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__8;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__9;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__10;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__11;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__12;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__13;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__14;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__15;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__16;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__17;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__18;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__19;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__20;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__21;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__22;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__23;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__24;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__25;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__26;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__27;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__28;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__29;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__30;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__31;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__32;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__33;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__34;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__35;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__36;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__37;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__38;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__39;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__40;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__41;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__42;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__43;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__44;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__45;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__46;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__47;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__48;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__49;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__50;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__51;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__52;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__53;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__54;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__55;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__56;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__57;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__58;
+reg	[`BIT_WIDTH-1:0]				c_sleftr__59;
+//reg	[`BIT_WIDTH-1:0]				c_weight	[TOTAL_LATENCY - 1:0];
+
+reg	[`BIT_WIDTH-1:0]				c_weight__0;
+reg	[`BIT_WIDTH-1:0]				c_weight__1;
+reg	[`BIT_WIDTH-1:0]				c_weight__2;
+reg	[`BIT_WIDTH-1:0]				c_weight__3;
+reg	[`BIT_WIDTH-1:0]				c_weight__4;
+reg	[`BIT_WIDTH-1:0]				c_weight__5;
+reg	[`BIT_WIDTH-1:0]				c_weight__6;
+reg	[`BIT_WIDTH-1:0]				c_weight__7;
+reg	[`BIT_WIDTH-1:0]				c_weight__8;
+reg	[`BIT_WIDTH-1:0]				c_weight__9;
+reg	[`BIT_WIDTH-1:0]				c_weight__10;
+reg	[`BIT_WIDTH-1:0]				c_weight__11;
+reg	[`BIT_WIDTH-1:0]				c_weight__12;
+reg	[`BIT_WIDTH-1:0]				c_weight__13;
+reg	[`BIT_WIDTH-1:0]				c_weight__14;
+reg	[`BIT_WIDTH-1:0]				c_weight__15;
+reg	[`BIT_WIDTH-1:0]				c_weight__16;
+reg	[`BIT_WIDTH-1:0]				c_weight__17;
+reg	[`BIT_WIDTH-1:0]				c_weight__18;
+reg	[`BIT_WIDTH-1:0]				c_weight__19;
+reg	[`BIT_WIDTH-1:0]				c_weight__20;
+reg	[`BIT_WIDTH-1:0]				c_weight__21;
+reg	[`BIT_WIDTH-1:0]				c_weight__22;
+reg	[`BIT_WIDTH-1:0]				c_weight__23;
+reg	[`BIT_WIDTH-1:0]				c_weight__24;
+reg	[`BIT_WIDTH-1:0]				c_weight__25;
+reg	[`BIT_WIDTH-1:0]				c_weight__26;
+reg	[`BIT_WIDTH-1:0]				c_weight__27;
+reg	[`BIT_WIDTH-1:0]				c_weight__28;
+reg	[`BIT_WIDTH-1:0]				c_weight__29;
+reg	[`BIT_WIDTH-1:0]				c_weight__30;
+reg	[`BIT_WIDTH-1:0]				c_weight__31;
+reg	[`BIT_WIDTH-1:0]				c_weight__32;
+reg	[`BIT_WIDTH-1:0]				c_weight__33;
+reg	[`BIT_WIDTH-1:0]				c_weight__34;
+reg	[`BIT_WIDTH-1:0]				c_weight__35;
+reg	[`BIT_WIDTH-1:0]				c_weight__36;
+reg	[`BIT_WIDTH-1:0]				c_weight__37;
+reg	[`BIT_WIDTH-1:0]				c_weight__38;
+reg	[`BIT_WIDTH-1:0]				c_weight__39;
+reg	[`BIT_WIDTH-1:0]				c_weight__40;
+reg	[`BIT_WIDTH-1:0]				c_weight__41;
+reg	[`BIT_WIDTH-1:0]				c_weight__42;
+reg	[`BIT_WIDTH-1:0]				c_weight__43;
+reg	[`BIT_WIDTH-1:0]				c_weight__44;
+reg	[`BIT_WIDTH-1:0]				c_weight__45;
+reg	[`BIT_WIDTH-1:0]				c_weight__46;
+reg	[`BIT_WIDTH-1:0]				c_weight__47;
+reg	[`BIT_WIDTH-1:0]				c_weight__48;
+reg	[`BIT_WIDTH-1:0]				c_weight__49;
+reg	[`BIT_WIDTH-1:0]				c_weight__50;
+reg	[`BIT_WIDTH-1:0]				c_weight__51;
+reg	[`BIT_WIDTH-1:0]				c_weight__52;
+reg	[`BIT_WIDTH-1:0]				c_weight__53;
+reg	[`BIT_WIDTH-1:0]				c_weight__54;
+reg	[`BIT_WIDTH-1:0]				c_weight__55;
+reg	[`BIT_WIDTH-1:0]				c_weight__56;
+reg	[`BIT_WIDTH-1:0]				c_weight__57;
+reg	[`BIT_WIDTH-1:0]				c_weight__58;
+reg	[`BIT_WIDTH-1:0]				c_weight__59;
+
+//reg	[`LAYER_WIDTH-1:0]			c_layer	[TOTAL_LATENCY - 1:0];
+
+reg	[`LAYER_WIDTH-1:0]				c_layer__0;
+reg	[`LAYER_WIDTH-1:0]				c_layer__1;
+reg	[`LAYER_WIDTH-1:0]				c_layer__2;
+reg	[`LAYER_WIDTH-1:0]				c_layer__3;
+reg	[`LAYER_WIDTH-1:0]				c_layer__4;
+reg	[`LAYER_WIDTH-1:0]				c_layer__5;
+reg	[`LAYER_WIDTH-1:0]				c_layer__6;
+reg	[`LAYER_WIDTH-1:0]				c_layer__7;
+reg	[`LAYER_WIDTH-1:0]				c_layer__8;
+reg	[`LAYER_WIDTH-1:0]				c_layer__9;
+reg	[`LAYER_WIDTH-1:0]				c_layer__10;
+reg	[`LAYER_WIDTH-1:0]				c_layer__11;
+reg	[`LAYER_WIDTH-1:0]				c_layer__12;
+reg	[`LAYER_WIDTH-1:0]				c_layer__13;
+reg	[`LAYER_WIDTH-1:0]				c_layer__14;
+reg	[`LAYER_WIDTH-1:0]				c_layer__15;
+reg	[`LAYER_WIDTH-1:0]				c_layer__16;
+reg	[`LAYER_WIDTH-1:0]				c_layer__17;
+reg	[`LAYER_WIDTH-1:0]				c_layer__18;
+reg	[`LAYER_WIDTH-1:0]				c_layer__19;
+reg	[`LAYER_WIDTH-1:0]				c_layer__20;
+reg	[`LAYER_WIDTH-1:0]				c_layer__21;
+reg	[`LAYER_WIDTH-1:0]				c_layer__22;
+reg	[`LAYER_WIDTH-1:0]				c_layer__23;
+reg	[`LAYER_WIDTH-1:0]				c_layer__24;
+reg	[`LAYER_WIDTH-1:0]				c_layer__25;
+reg	[`LAYER_WIDTH-1:0]				c_layer__26;
+reg	[`LAYER_WIDTH-1:0]				c_layer__27;
+reg	[`LAYER_WIDTH-1:0]				c_layer__28;
+reg	[`LAYER_WIDTH-1:0]				c_layer__29;
+reg	[`LAYER_WIDTH-1:0]				c_layer__30;
+reg	[`LAYER_WIDTH-1:0]				c_layer__31;
+reg	[`LAYER_WIDTH-1:0]				c_layer__32;
+reg	[`LAYER_WIDTH-1:0]				c_layer__33;
+reg	[`LAYER_WIDTH-1:0]				c_layer__34;
+reg	[`LAYER_WIDTH-1:0]				c_layer__35;
+reg	[`LAYER_WIDTH-1:0]				c_layer__36;
+reg	[`LAYER_WIDTH-1:0]				c_layer__37;
+reg	[`LAYER_WIDTH-1:0]				c_layer__38;
+reg	[`LAYER_WIDTH-1:0]				c_layer__39;
+reg	[`LAYER_WIDTH-1:0]				c_layer__40;
+reg	[`LAYER_WIDTH-1:0]				c_layer__41;
+reg	[`LAYER_WIDTH-1:0]				c_layer__42;
+reg	[`LAYER_WIDTH-1:0]				c_layer__43;
+reg	[`LAYER_WIDTH-1:0]				c_layer__44;
+reg	[`LAYER_WIDTH-1:0]				c_layer__45;
+reg	[`LAYER_WIDTH-1:0]				c_layer__46;
+reg	[`LAYER_WIDTH-1:0]				c_layer__47;
+reg	[`LAYER_WIDTH-1:0]				c_layer__48;
+reg	[`LAYER_WIDTH-1:0]				c_layer__49;
+reg	[`LAYER_WIDTH-1:0]				c_layer__50;
+reg	[`LAYER_WIDTH-1:0]				c_layer__51;
+reg	[`LAYER_WIDTH-1:0]				c_layer__52;
+reg	[`LAYER_WIDTH-1:0]				c_layer__53;
+reg	[`LAYER_WIDTH-1:0]				c_layer__54;
+reg	[`LAYER_WIDTH-1:0]				c_layer__55;
+reg	[`LAYER_WIDTH-1:0]				c_layer__56;
+reg	[`LAYER_WIDTH-1:0]				c_layer__57;
+reg	[`LAYER_WIDTH-1:0]				c_layer__58;
+reg	[`LAYER_WIDTH-1:0]				c_layer__59;
+
+
+
+//reg								c_dead	[TOTAL_LATENCY - 1:0];
+
+reg					c_dead__0;
+reg					c_dead__1;
+reg					c_dead__2;
+reg					c_dead__3;
+reg					c_dead__4;
+reg					c_dead__5;
+reg					c_dead__6;
+reg					c_dead__7;
+reg					c_dead__8;
+reg					c_dead__9;
+reg					c_dead__10;
+reg					c_dead__11;
+reg					c_dead__12;
+reg					c_dead__13;
+reg					c_dead__14;
+reg					c_dead__15;
+reg					c_dead__16;
+reg					c_dead__17;
+reg					c_dead__18;
+reg					c_dead__19;
+reg					c_dead__20;
+reg					c_dead__21;
+reg					c_dead__22;
+reg					c_dead__23;
+reg					c_dead__24;
+reg					c_dead__25;
+reg					c_dead__26;
+reg					c_dead__27;
+reg					c_dead__28;
+reg					c_dead__29;
+reg					c_dead__30;
+reg					c_dead__31;
+reg					c_dead__32;
+reg					c_dead__33;
+reg					c_dead__34;
+reg					c_dead__35;
+reg					c_dead__36;
+reg					c_dead__37;
+reg					c_dead__38;
+reg					c_dead__39;
+reg					c_dead__40;
+reg					c_dead__41;
+reg					c_dead__42;
+reg					c_dead__43;
+reg					c_dead__44;
+reg					c_dead__45;
+reg					c_dead__46;
+reg					c_dead__47;
+reg					c_dead__48;
+reg					c_dead__49;
+reg					c_dead__50;
+reg					c_dead__51;
+reg					c_dead__52;
+reg					c_dead__53;
+reg					c_dead__54;
+reg					c_dead__55;
+reg					c_dead__56;
+reg					c_dead__57;
+reg					c_dead__58;
+reg					c_dead__59;
+
+
+//reg								c_hit	[TOTAL_LATENCY - 1:0];
+
+reg					c_hit__0;
+reg					c_hit__1;
+reg					c_hit__2;
+reg					c_hit__3;
+reg					c_hit__4;
+reg					c_hit__5;
+reg					c_hit__6;
+reg					c_hit__7;
+reg					c_hit__8;
+reg					c_hit__9;
+reg					c_hit__10;
+reg					c_hit__11;
+reg					c_hit__12;
+reg					c_hit__13;
+reg					c_hit__14;
+reg					c_hit__15;
+reg					c_hit__16;
+reg					c_hit__17;
+reg					c_hit__18;
+reg					c_hit__19;
+reg					c_hit__20;
+reg					c_hit__21;
+reg					c_hit__22;
+reg					c_hit__23;
+reg					c_hit__24;
+reg					c_hit__25;
+reg					c_hit__26;
+reg					c_hit__27;
+reg					c_hit__28;
+reg					c_hit__29;
+reg					c_hit__30;
+reg					c_hit__31;
+reg					c_hit__32;
+reg					c_hit__33;
+reg					c_hit__34;
+reg					c_hit__35;
+reg					c_hit__36;
+reg					c_hit__37;
+reg					c_hit__38;
+reg					c_hit__39;
+reg					c_hit__40;
+reg					c_hit__41;
+reg					c_hit__42;
+reg					c_hit__43;
+reg					c_hit__44;
+reg					c_hit__45;
+reg					c_hit__46;
+reg					c_hit__47;
+reg					c_hit__48;
+reg					c_hit__49;
+reg					c_hit__50;
+reg					c_hit__51;
+reg					c_hit__52;
+reg					c_hit__53;
+reg					c_hit__54;
+reg					c_hit__55;
+reg					c_hit__56;
+reg					c_hit__57;
+reg					c_hit__58;
+reg					c_hit__59;
+
+//reg	[`BIT_WIDTH-1:0]				c_diff[TOTAL_LATENCY - 1:0];
+
+
+reg	[`BIT_WIDTH-1:0]				c_diff__0;
+reg	[`BIT_WIDTH-1:0]				c_diff__1;
+reg	[`BIT_WIDTH-1:0]				c_diff__2;
+reg	[`BIT_WIDTH-1:0]				c_diff__3;
+reg	[`BIT_WIDTH-1:0]				c_diff__4;
+reg	[`BIT_WIDTH-1:0]				c_diff__5;
+reg	[`BIT_WIDTH-1:0]				c_diff__6;
+reg	[`BIT_WIDTH-1:0]				c_diff__7;
+reg	[`BIT_WIDTH-1:0]				c_diff__8;
+reg	[`BIT_WIDTH-1:0]				c_diff__9;
+reg	[`BIT_WIDTH-1:0]				c_diff__10;
+reg	[`BIT_WIDTH-1:0]				c_diff__11;
+reg	[`BIT_WIDTH-1:0]				c_diff__12;
+reg	[`BIT_WIDTH-1:0]				c_diff__13;
+reg	[`BIT_WIDTH-1:0]				c_diff__14;
+reg	[`BIT_WIDTH-1:0]				c_diff__15;
+reg	[`BIT_WIDTH-1:0]				c_diff__16;
+reg	[`BIT_WIDTH-1:0]				c_diff__17;
+reg	[`BIT_WIDTH-1:0]				c_diff__18;
+reg	[`BIT_WIDTH-1:0]				c_diff__19;
+reg	[`BIT_WIDTH-1:0]				c_diff__20;
+reg	[`BIT_WIDTH-1:0]				c_diff__21;
+reg	[`BIT_WIDTH-1:0]				c_diff__22;
+reg	[`BIT_WIDTH-1:0]				c_diff__23;
+reg	[`BIT_WIDTH-1:0]				c_diff__24;
+reg	[`BIT_WIDTH-1:0]				c_diff__25;
+reg	[`BIT_WIDTH-1:0]				c_diff__26;
+reg	[`BIT_WIDTH-1:0]				c_diff__27;
+reg	[`BIT_WIDTH-1:0]				c_diff__28;
+reg	[`BIT_WIDTH-1:0]				c_diff__29;
+reg	[`BIT_WIDTH-1:0]				c_diff__30;
+reg	[`BIT_WIDTH-1:0]				c_diff__31;
+reg	[`BIT_WIDTH-1:0]				c_diff__32;
+reg	[`BIT_WIDTH-1:0]				c_diff__33;
+reg	[`BIT_WIDTH-1:0]				c_diff__34;
+reg	[`BIT_WIDTH-1:0]				c_diff__35;
+reg	[`BIT_WIDTH-1:0]				c_diff__36;
+reg	[`BIT_WIDTH-1:0]				c_diff__37;
+reg	[`BIT_WIDTH-1:0]				c_diff__38;
+reg	[`BIT_WIDTH-1:0]				c_diff__39;
+reg	[`BIT_WIDTH-1:0]				c_diff__40;
+reg	[`BIT_WIDTH-1:0]				c_diff__41;
+reg	[`BIT_WIDTH-1:0]				c_diff__42;
+reg	[`BIT_WIDTH-1:0]				c_diff__43;
+reg	[`BIT_WIDTH-1:0]				c_diff__44;
+reg	[`BIT_WIDTH-1:0]				c_diff__45;
+reg	[`BIT_WIDTH-1:0]				c_diff__46;
+reg	[`BIT_WIDTH-1:0]				c_diff__47;
+reg	[`BIT_WIDTH-1:0]				c_diff__48;
+reg	[`BIT_WIDTH-1:0]				c_diff__49;
+reg	[`BIT_WIDTH-1:0]				c_diff__50;
+reg	[`BIT_WIDTH-1:0]				c_diff__51;
+reg	[`BIT_WIDTH-1:0]				c_diff__52;
+reg	[`BIT_WIDTH-1:0]				c_diff__53;
+reg	[`BIT_WIDTH-1:0]				c_diff__54;
+reg	[`BIT_WIDTH-1:0]				c_diff__55;
+reg	[`BIT_WIDTH-1:0]				c_diff__56;
+reg	[`BIT_WIDTH-1:0]				c_diff__57;
+reg	[`BIT_WIDTH-1:0]				c_diff__58;
+reg	[`BIT_WIDTH-1:0]				c_diff__59;
+
+
+//reg	[`BIT_WIDTH-1:0]				c_dl_b[TOTAL_LATENCY - 1:0];
+
+
+reg	[`BIT_WIDTH-1:0]				c_dl_b__0;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__1;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__2;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__3;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__4;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__5;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__6;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__7;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__8;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__9;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__10;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__11;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__12;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__13;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__14;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__15;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__16;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__17;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__18;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__19;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__20;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__21;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__22;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__23;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__24;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__25;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__26;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__27;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__28;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__29;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__30;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__31;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__32;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__33;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__34;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__35;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__36;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__37;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__38;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__39;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__40;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__41;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__42;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__43;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__44;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__45;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__46;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__47;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__48;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__49;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__50;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__51;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__52;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__53;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__54;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__55;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__56;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__57;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__58;
+reg	[`BIT_WIDTH-1:0]				c_dl_b__59;
+
+
+//reg	[2*`BIT_WIDTH-1:0]			c_numer[TOTAL_LATENCY - 1:0];
+
+
+reg	[2*`BIT_WIDTH-1:0]				c_numer__0;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__1;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__2;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__3;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__4;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__5;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__6;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__7;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__8;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__9;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__10;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__11;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__12;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__13;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__14;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__15;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__16;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__17;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__18;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__19;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__20;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__21;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__22;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__23;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__24;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__25;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__26;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__27;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__28;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__29;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__30;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__31;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__32;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__33;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__34;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__35;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__36;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__37;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__38;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__39;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__40;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__41;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__42;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__43;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__44;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__45;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__46;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__47;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__48;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__49;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__50;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__51;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__52;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__53;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__54;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__55;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__56;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__57;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__58;
+reg	[2*`BIT_WIDTH-1:0]				c_numer__59;
+
+//reg	[`BIT_WIDTH-1:0]				c_z1[TOTAL_LATENCY - 1:0];
+
+
+reg	[`BIT_WIDTH-1:0]				c_z1__0;
+reg	[`BIT_WIDTH-1:0]				c_z1__1;
+reg	[`BIT_WIDTH-1:0]				c_z1__2;
+reg	[`BIT_WIDTH-1:0]				c_z1__3;
+reg	[`BIT_WIDTH-1:0]				c_z1__4;
+reg	[`BIT_WIDTH-1:0]				c_z1__5;
+reg	[`BIT_WIDTH-1:0]				c_z1__6;
+reg	[`BIT_WIDTH-1:0]				c_z1__7;
+reg	[`BIT_WIDTH-1:0]				c_z1__8;
+reg	[`BIT_WIDTH-1:0]				c_z1__9;
+reg	[`BIT_WIDTH-1:0]				c_z1__10;
+reg	[`BIT_WIDTH-1:0]				c_z1__11;
+reg	[`BIT_WIDTH-1:0]				c_z1__12;
+reg	[`BIT_WIDTH-1:0]				c_z1__13;
+reg	[`BIT_WIDTH-1:0]				c_z1__14;
+reg	[`BIT_WIDTH-1:0]				c_z1__15;
+reg	[`BIT_WIDTH-1:0]				c_z1__16;
+reg	[`BIT_WIDTH-1:0]				c_z1__17;
+reg	[`BIT_WIDTH-1:0]				c_z1__18;
+reg	[`BIT_WIDTH-1:0]				c_z1__19;
+reg	[`BIT_WIDTH-1:0]				c_z1__20;
+reg	[`BIT_WIDTH-1:0]				c_z1__21;
+reg	[`BIT_WIDTH-1:0]				c_z1__22;
+reg	[`BIT_WIDTH-1:0]				c_z1__23;
+reg	[`BIT_WIDTH-1:0]				c_z1__24;
+reg	[`BIT_WIDTH-1:0]				c_z1__25;
+reg	[`BIT_WIDTH-1:0]				c_z1__26;
+reg	[`BIT_WIDTH-1:0]				c_z1__27;
+reg	[`BIT_WIDTH-1:0]				c_z1__28;
+reg	[`BIT_WIDTH-1:0]				c_z1__29;
+reg	[`BIT_WIDTH-1:0]				c_z1__30;
+reg	[`BIT_WIDTH-1:0]				c_z1__31;
+reg	[`BIT_WIDTH-1:0]				c_z1__32;
+reg	[`BIT_WIDTH-1:0]				c_z1__33;
+reg	[`BIT_WIDTH-1:0]				c_z1__34;
+reg	[`BIT_WIDTH-1:0]				c_z1__35;
+reg	[`BIT_WIDTH-1:0]				c_z1__36;
+reg	[`BIT_WIDTH-1:0]				c_z1__37;
+reg	[`BIT_WIDTH-1:0]				c_z1__38;
+reg	[`BIT_WIDTH-1:0]				c_z1__39;
+reg	[`BIT_WIDTH-1:0]				c_z1__40;
+reg	[`BIT_WIDTH-1:0]				c_z1__41;
+reg	[`BIT_WIDTH-1:0]				c_z1__42;
+reg	[`BIT_WIDTH-1:0]				c_z1__43;
+reg	[`BIT_WIDTH-1:0]				c_z1__44;
+reg	[`BIT_WIDTH-1:0]				c_z1__45;
+reg	[`BIT_WIDTH-1:0]				c_z1__46;
+reg	[`BIT_WIDTH-1:0]				c_z1__47;
+reg	[`BIT_WIDTH-1:0]				c_z1__48;
+reg	[`BIT_WIDTH-1:0]				c_z1__49;
+reg	[`BIT_WIDTH-1:0]				c_z1__50;
+reg	[`BIT_WIDTH-1:0]				c_z1__51;
+reg	[`BIT_WIDTH-1:0]				c_z1__52;
+reg	[`BIT_WIDTH-1:0]				c_z1__53;
+reg	[`BIT_WIDTH-1:0]				c_z1__54;
+reg	[`BIT_WIDTH-1:0]				c_z1__55;
+reg	[`BIT_WIDTH-1:0]				c_z1__56;
+reg	[`BIT_WIDTH-1:0]				c_z1__57;
+reg	[`BIT_WIDTH-1:0]				c_z1__58;
+reg	[`BIT_WIDTH-1:0]				c_z1__59;
+
+//reg	[`BIT_WIDTH-1:0]				c_z0[TOTAL_LATENCY - 1:0];
+
+
+reg	[`BIT_WIDTH-1:0]				c_z0__0;
+reg	[`BIT_WIDTH-1:0]				c_z0__1;
+reg	[`BIT_WIDTH-1:0]				c_z0__2;
+reg	[`BIT_WIDTH-1:0]				c_z0__3;
+reg	[`BIT_WIDTH-1:0]				c_z0__4;
+reg	[`BIT_WIDTH-1:0]				c_z0__5;
+reg	[`BIT_WIDTH-1:0]				c_z0__6;
+reg	[`BIT_WIDTH-1:0]				c_z0__7;
+reg	[`BIT_WIDTH-1:0]				c_z0__8;
+reg	[`BIT_WIDTH-1:0]				c_z0__9;
+reg	[`BIT_WIDTH-1:0]				c_z0__10;
+reg	[`BIT_WIDTH-1:0]				c_z0__11;
+reg	[`BIT_WIDTH-1:0]				c_z0__12;
+reg	[`BIT_WIDTH-1:0]				c_z0__13;
+reg	[`BIT_WIDTH-1:0]				c_z0__14;
+reg	[`BIT_WIDTH-1:0]				c_z0__15;
+reg	[`BIT_WIDTH-1:0]				c_z0__16;
+reg	[`BIT_WIDTH-1:0]				c_z0__17;
+reg	[`BIT_WIDTH-1:0]				c_z0__18;
+reg	[`BIT_WIDTH-1:0]				c_z0__19;
+reg	[`BIT_WIDTH-1:0]				c_z0__20;
+reg	[`BIT_WIDTH-1:0]				c_z0__21;
+reg	[`BIT_WIDTH-1:0]				c_z0__22;
+reg	[`BIT_WIDTH-1:0]				c_z0__23;
+reg	[`BIT_WIDTH-1:0]				c_z0__24;
+reg	[`BIT_WIDTH-1:0]				c_z0__25;
+reg	[`BIT_WIDTH-1:0]				c_z0__26;
+reg	[`BIT_WIDTH-1:0]				c_z0__27;
+reg	[`BIT_WIDTH-1:0]				c_z0__28;
+reg	[`BIT_WIDTH-1:0]				c_z0__29;
+reg	[`BIT_WIDTH-1:0]				c_z0__30;
+reg	[`BIT_WIDTH-1:0]				c_z0__31;
+reg	[`BIT_WIDTH-1:0]				c_z0__32;
+reg	[`BIT_WIDTH-1:0]				c_z0__33;
+reg	[`BIT_WIDTH-1:0]				c_z0__34;
+reg	[`BIT_WIDTH-1:0]				c_z0__35;
+reg	[`BIT_WIDTH-1:0]				c_z0__36;
+reg	[`BIT_WIDTH-1:0]				c_z0__37;
+reg	[`BIT_WIDTH-1:0]				c_z0__38;
+reg	[`BIT_WIDTH-1:0]				c_z0__39;
+reg	[`BIT_WIDTH-1:0]				c_z0__40;
+reg	[`BIT_WIDTH-1:0]				c_z0__41;
+reg	[`BIT_WIDTH-1:0]				c_z0__42;
+reg	[`BIT_WIDTH-1:0]				c_z0__43;
+reg	[`BIT_WIDTH-1:0]				c_z0__44;
+reg	[`BIT_WIDTH-1:0]				c_z0__45;
+reg	[`BIT_WIDTH-1:0]				c_z0__46;
+reg	[`BIT_WIDTH-1:0]				c_z0__47;
+reg	[`BIT_WIDTH-1:0]				c_z0__48;
+reg	[`BIT_WIDTH-1:0]				c_z0__49;
+reg	[`BIT_WIDTH-1:0]				c_z0__50;
+reg	[`BIT_WIDTH-1:0]				c_z0__51;
+reg	[`BIT_WIDTH-1:0]				c_z0__52;
+reg	[`BIT_WIDTH-1:0]				c_z0__53;
+reg	[`BIT_WIDTH-1:0]				c_z0__54;
+reg	[`BIT_WIDTH-1:0]				c_z0__55;
+reg	[`BIT_WIDTH-1:0]				c_z0__56;
+reg	[`BIT_WIDTH-1:0]				c_z0__57;
+reg	[`BIT_WIDTH-1:0]				c_z0__58;
+reg	[`BIT_WIDTH-1:0]				c_z0__59;
+
+
+
+//reg	[`BIT_WIDTH-1:0]				c_mut[TOTAL_LATENCY - 1:0];
+
+reg	[`BIT_WIDTH-1:0]				c_mut__0;
+reg	[`BIT_WIDTH-1:0]				c_mut__1;
+reg	[`BIT_WIDTH-1:0]				c_mut__2;
+reg	[`BIT_WIDTH-1:0]				c_mut__3;
+reg	[`BIT_WIDTH-1:0]				c_mut__4;
+reg	[`BIT_WIDTH-1:0]				c_mut__5;
+reg	[`BIT_WIDTH-1:0]				c_mut__6;
+reg	[`BIT_WIDTH-1:0]				c_mut__7;
+reg	[`BIT_WIDTH-1:0]				c_mut__8;
+reg	[`BIT_WIDTH-1:0]				c_mut__9;
+reg	[`BIT_WIDTH-1:0]				c_mut__10;
+reg	[`BIT_WIDTH-1:0]				c_mut__11;
+reg	[`BIT_WIDTH-1:0]				c_mut__12;
+reg	[`BIT_WIDTH-1:0]				c_mut__13;
+reg	[`BIT_WIDTH-1:0]				c_mut__14;
+reg	[`BIT_WIDTH-1:0]				c_mut__15;
+reg	[`BIT_WIDTH-1:0]				c_mut__16;
+reg	[`BIT_WIDTH-1:0]				c_mut__17;
+reg	[`BIT_WIDTH-1:0]				c_mut__18;
+reg	[`BIT_WIDTH-1:0]				c_mut__19;
+reg	[`BIT_WIDTH-1:0]				c_mut__20;
+reg	[`BIT_WIDTH-1:0]				c_mut__21;
+reg	[`BIT_WIDTH-1:0]				c_mut__22;
+reg	[`BIT_WIDTH-1:0]				c_mut__23;
+reg	[`BIT_WIDTH-1:0]				c_mut__24;
+reg	[`BIT_WIDTH-1:0]				c_mut__25;
+reg	[`BIT_WIDTH-1:0]				c_mut__26;
+reg	[`BIT_WIDTH-1:0]				c_mut__27;
+reg	[`BIT_WIDTH-1:0]				c_mut__28;
+reg	[`BIT_WIDTH-1:0]				c_mut__29;
+reg	[`BIT_WIDTH-1:0]				c_mut__30;
+reg	[`BIT_WIDTH-1:0]				c_mut__31;
+reg	[`BIT_WIDTH-1:0]				c_mut__32;
+reg	[`BIT_WIDTH-1:0]				c_mut__33;
+reg	[`BIT_WIDTH-1:0]				c_mut__34;
+reg	[`BIT_WIDTH-1:0]				c_mut__35;
+reg	[`BIT_WIDTH-1:0]				c_mut__36;
+reg	[`BIT_WIDTH-1:0]				c_mut__37;
+reg	[`BIT_WIDTH-1:0]				c_mut__38;
+reg	[`BIT_WIDTH-1:0]				c_mut__39;
+reg	[`BIT_WIDTH-1:0]				c_mut__40;
+reg	[`BIT_WIDTH-1:0]				c_mut__41;
+reg	[`BIT_WIDTH-1:0]				c_mut__42;
+reg	[`BIT_WIDTH-1:0]				c_mut__43;
+reg	[`BIT_WIDTH-1:0]				c_mut__44;
+reg	[`BIT_WIDTH-1:0]				c_mut__45;
+reg	[`BIT_WIDTH-1:0]				c_mut__46;
+reg	[`BIT_WIDTH-1:0]				c_mut__47;
+reg	[`BIT_WIDTH-1:0]				c_mut__48;
+reg	[`BIT_WIDTH-1:0]				c_mut__49;
+reg	[`BIT_WIDTH-1:0]				c_mut__50;
+reg	[`BIT_WIDTH-1:0]				c_mut__51;
+reg	[`BIT_WIDTH-1:0]				c_mut__52;
+reg	[`BIT_WIDTH-1:0]				c_mut__53;
+reg	[`BIT_WIDTH-1:0]				c_mut__54;
+reg	[`BIT_WIDTH-1:0]				c_mut__55;
+reg	[`BIT_WIDTH-1:0]				c_mut__56;
+reg	[`BIT_WIDTH-1:0]				c_mut__57;
+reg	[`BIT_WIDTH-1:0]				c_mut__58;
+reg	[`BIT_WIDTH-1:0]				c_mut__59;
+
+
+//reg	[`BIT_WIDTH-1:0]				r_x	[TOTAL_LATENCY - 1:0];
+
+reg	[`BIT_WIDTH-1:0]				r_x__0;
+reg	[`BIT_WIDTH-1:0]				r_x__1;
+reg	[`BIT_WIDTH-1:0]				r_x__2;
+reg	[`BIT_WIDTH-1:0]				r_x__3;
+reg	[`BIT_WIDTH-1:0]				r_x__4;
+reg	[`BIT_WIDTH-1:0]				r_x__5;
+reg	[`BIT_WIDTH-1:0]				r_x__6;
+reg	[`BIT_WIDTH-1:0]				r_x__7;
+reg	[`BIT_WIDTH-1:0]				r_x__8;
+reg	[`BIT_WIDTH-1:0]				r_x__9;
+reg	[`BIT_WIDTH-1:0]				r_x__10;
+reg	[`BIT_WIDTH-1:0]				r_x__11;
+reg	[`BIT_WIDTH-1:0]				r_x__12;
+reg	[`BIT_WIDTH-1:0]				r_x__13;
+reg	[`BIT_WIDTH-1:0]				r_x__14;
+reg	[`BIT_WIDTH-1:0]				r_x__15;
+reg	[`BIT_WIDTH-1:0]				r_x__16;
+reg	[`BIT_WIDTH-1:0]				r_x__17;
+reg	[`BIT_WIDTH-1:0]				r_x__18;
+reg	[`BIT_WIDTH-1:0]				r_x__19;
+reg	[`BIT_WIDTH-1:0]				r_x__20;
+reg	[`BIT_WIDTH-1:0]				r_x__21;
+reg	[`BIT_WIDTH-1:0]				r_x__22;
+reg	[`BIT_WIDTH-1:0]				r_x__23;
+reg	[`BIT_WIDTH-1:0]				r_x__24;
+reg	[`BIT_WIDTH-1:0]				r_x__25;
+reg	[`BIT_WIDTH-1:0]				r_x__26;
+reg	[`BIT_WIDTH-1:0]				r_x__27;
+reg	[`BIT_WIDTH-1:0]				r_x__28;
+reg	[`BIT_WIDTH-1:0]				r_x__29;
+reg	[`BIT_WIDTH-1:0]				r_x__30;
+reg	[`BIT_WIDTH-1:0]				r_x__31;
+reg	[`BIT_WIDTH-1:0]				r_x__32;
+reg	[`BIT_WIDTH-1:0]				r_x__33;
+reg	[`BIT_WIDTH-1:0]				r_x__34;
+reg	[`BIT_WIDTH-1:0]				r_x__35;
+reg	[`BIT_WIDTH-1:0]				r_x__36;
+reg	[`BIT_WIDTH-1:0]				r_x__37;
+reg	[`BIT_WIDTH-1:0]				r_x__38;
+reg	[`BIT_WIDTH-1:0]				r_x__39;
+reg	[`BIT_WIDTH-1:0]				r_x__40;
+reg	[`BIT_WIDTH-1:0]				r_x__41;
+reg	[`BIT_WIDTH-1:0]				r_x__42;
+reg	[`BIT_WIDTH-1:0]				r_x__43;
+reg	[`BIT_WIDTH-1:0]				r_x__44;
+reg	[`BIT_WIDTH-1:0]				r_x__45;
+reg	[`BIT_WIDTH-1:0]				r_x__46;
+reg	[`BIT_WIDTH-1:0]				r_x__47;
+reg	[`BIT_WIDTH-1:0]				r_x__48;
+reg	[`BIT_WIDTH-1:0]				r_x__49;
+reg	[`BIT_WIDTH-1:0]				r_x__50;
+reg	[`BIT_WIDTH-1:0]				r_x__51;
+reg	[`BIT_WIDTH-1:0]				r_x__52;
+reg	[`BIT_WIDTH-1:0]				r_x__53;
+reg	[`BIT_WIDTH-1:0]				r_x__54;
+reg	[`BIT_WIDTH-1:0]				r_x__55;
+reg	[`BIT_WIDTH-1:0]				r_x__56;
+reg	[`BIT_WIDTH-1:0]				r_x__57;
+reg	[`BIT_WIDTH-1:0]				r_x__58;
+reg	[`BIT_WIDTH-1:0]				r_x__59;
+
+//reg	[`BIT_WIDTH-1:0]				r_y	[TOTAL_LATENCY - 1:0];
+
+reg	[`BIT_WIDTH-1:0]				r_y__0;
+reg	[`BIT_WIDTH-1:0]				r_y__1;
+reg	[`BIT_WIDTH-1:0]				r_y__2;
+reg	[`BIT_WIDTH-1:0]				r_y__3;
+reg	[`BIT_WIDTH-1:0]				r_y__4;
+reg	[`BIT_WIDTH-1:0]				r_y__5;
+reg	[`BIT_WIDTH-1:0]				r_y__6;
+reg	[`BIT_WIDTH-1:0]				r_y__7;
+reg	[`BIT_WIDTH-1:0]				r_y__8;
+reg	[`BIT_WIDTH-1:0]				r_y__9;
+reg	[`BIT_WIDTH-1:0]				r_y__10;
+reg	[`BIT_WIDTH-1:0]				r_y__11;
+reg	[`BIT_WIDTH-1:0]				r_y__12;
+reg	[`BIT_WIDTH-1:0]				r_y__13;
+reg	[`BIT_WIDTH-1:0]				r_y__14;
+reg	[`BIT_WIDTH-1:0]				r_y__15;
+reg	[`BIT_WIDTH-1:0]				r_y__16;
+reg	[`BIT_WIDTH-1:0]				r_y__17;
+reg	[`BIT_WIDTH-1:0]				r_y__18;
+reg	[`BIT_WIDTH-1:0]				r_y__19;
+reg	[`BIT_WIDTH-1:0]				r_y__20;
+reg	[`BIT_WIDTH-1:0]				r_y__21;
+reg	[`BIT_WIDTH-1:0]				r_y__22;
+reg	[`BIT_WIDTH-1:0]				r_y__23;
+reg	[`BIT_WIDTH-1:0]				r_y__24;
+reg	[`BIT_WIDTH-1:0]				r_y__25;
+reg	[`BIT_WIDTH-1:0]				r_y__26;
+reg	[`BIT_WIDTH-1:0]				r_y__27;
+reg	[`BIT_WIDTH-1:0]				r_y__28;
+reg	[`BIT_WIDTH-1:0]				r_y__29;
+reg	[`BIT_WIDTH-1:0]				r_y__30;
+reg	[`BIT_WIDTH-1:0]				r_y__31;
+reg	[`BIT_WIDTH-1:0]				r_y__32;
+reg	[`BIT_WIDTH-1:0]				r_y__33;
+reg	[`BIT_WIDTH-1:0]				r_y__34;
+reg	[`BIT_WIDTH-1:0]				r_y__35;
+reg	[`BIT_WIDTH-1:0]				r_y__36;
+reg	[`BIT_WIDTH-1:0]				r_y__37;
+reg	[`BIT_WIDTH-1:0]				r_y__38;
+reg	[`BIT_WIDTH-1:0]				r_y__39;
+reg	[`BIT_WIDTH-1:0]				r_y__40;
+reg	[`BIT_WIDTH-1:0]				r_y__41;
+reg	[`BIT_WIDTH-1:0]				r_y__42;
+reg	[`BIT_WIDTH-1:0]				r_y__43;
+reg	[`BIT_WIDTH-1:0]				r_y__44;
+reg	[`BIT_WIDTH-1:0]				r_y__45;
+reg	[`BIT_WIDTH-1:0]				r_y__46;
+reg	[`BIT_WIDTH-1:0]				r_y__47;
+reg	[`BIT_WIDTH-1:0]				r_y__48;
+reg	[`BIT_WIDTH-1:0]				r_y__49;
+reg	[`BIT_WIDTH-1:0]				r_y__50;
+reg	[`BIT_WIDTH-1:0]				r_y__51;
+reg	[`BIT_WIDTH-1:0]				r_y__52;
+reg	[`BIT_WIDTH-1:0]				r_y__53;
+reg	[`BIT_WIDTH-1:0]				r_y__54;
+reg	[`BIT_WIDTH-1:0]				r_y__55;
+reg	[`BIT_WIDTH-1:0]				r_y__56;
+reg	[`BIT_WIDTH-1:0]				r_y__57;
+reg	[`BIT_WIDTH-1:0]				r_y__58;
+reg	[`BIT_WIDTH-1:0]				r_y__59;
+
+
+
+//reg	[`BIT_WIDTH-1:0]				r_z	[TOTAL_LATENCY - 1:0];
+
+reg	[`BIT_WIDTH-1:0]				r_z__0;
+reg	[`BIT_WIDTH-1:0]				r_z__1;
+reg	[`BIT_WIDTH-1:0]				r_z__2;
+reg	[`BIT_WIDTH-1:0]				r_z__3;
+reg	[`BIT_WIDTH-1:0]				r_z__4;
+reg	[`BIT_WIDTH-1:0]				r_z__5;
+reg	[`BIT_WIDTH-1:0]				r_z__6;
+reg	[`BIT_WIDTH-1:0]				r_z__7;
+reg	[`BIT_WIDTH-1:0]				r_z__8;
+reg	[`BIT_WIDTH-1:0]				r_z__9;
+reg	[`BIT_WIDTH-1:0]				r_z__10;
+reg	[`BIT_WIDTH-1:0]				r_z__11;
+reg	[`BIT_WIDTH-1:0]				r_z__12;
+reg	[`BIT_WIDTH-1:0]				r_z__13;
+reg	[`BIT_WIDTH-1:0]				r_z__14;
+reg	[`BIT_WIDTH-1:0]				r_z__15;
+reg	[`BIT_WIDTH-1:0]				r_z__16;
+reg	[`BIT_WIDTH-1:0]				r_z__17;
+reg	[`BIT_WIDTH-1:0]				r_z__18;
+reg	[`BIT_WIDTH-1:0]				r_z__19;
+reg	[`BIT_WIDTH-1:0]				r_z__20;
+reg	[`BIT_WIDTH-1:0]				r_z__21;
+reg	[`BIT_WIDTH-1:0]				r_z__22;
+reg	[`BIT_WIDTH-1:0]				r_z__23;
+reg	[`BIT_WIDTH-1:0]				r_z__24;
+reg	[`BIT_WIDTH-1:0]				r_z__25;
+reg	[`BIT_WIDTH-1:0]				r_z__26;
+reg	[`BIT_WIDTH-1:0]				r_z__27;
+reg	[`BIT_WIDTH-1:0]				r_z__28;
+reg	[`BIT_WIDTH-1:0]				r_z__29;
+reg	[`BIT_WIDTH-1:0]				r_z__30;
+reg	[`BIT_WIDTH-1:0]				r_z__31;
+reg	[`BIT_WIDTH-1:0]				r_z__32;
+reg	[`BIT_WIDTH-1:0]				r_z__33;
+reg	[`BIT_WIDTH-1:0]				r_z__34;
+reg	[`BIT_WIDTH-1:0]				r_z__35;
+reg	[`BIT_WIDTH-1:0]				r_z__36;
+reg	[`BIT_WIDTH-1:0]				r_z__37;
+reg	[`BIT_WIDTH-1:0]				r_z__38;
+reg	[`BIT_WIDTH-1:0]				r_z__39;
+reg	[`BIT_WIDTH-1:0]				r_z__40;
+reg	[`BIT_WIDTH-1:0]				r_z__41;
+reg	[`BIT_WIDTH-1:0]				r_z__42;
+reg	[`BIT_WIDTH-1:0]				r_z__43;
+reg	[`BIT_WIDTH-1:0]				r_z__44;
+reg	[`BIT_WIDTH-1:0]				r_z__45;
+reg	[`BIT_WIDTH-1:0]				r_z__46;
+reg	[`BIT_WIDTH-1:0]				r_z__47;
+reg	[`BIT_WIDTH-1:0]				r_z__48;
+reg	[`BIT_WIDTH-1:0]				r_z__49;
+reg	[`BIT_WIDTH-1:0]				r_z__50;
+reg	[`BIT_WIDTH-1:0]				r_z__51;
+reg	[`BIT_WIDTH-1:0]				r_z__52;
+reg	[`BIT_WIDTH-1:0]				r_z__53;
+reg	[`BIT_WIDTH-1:0]				r_z__54;
+reg	[`BIT_WIDTH-1:0]				r_z__55;
+reg	[`BIT_WIDTH-1:0]				r_z__56;
+reg	[`BIT_WIDTH-1:0]				r_z__57;
+reg	[`BIT_WIDTH-1:0]				r_z__58;
+reg	[`BIT_WIDTH-1:0]				r_z__59;
+
+//reg	[`BIT_WIDTH-1:0]				r_ux	[TOTAL_LATENCY - 1:0];
+
+reg	[`BIT_WIDTH-1:0]				r_ux__0;
+reg	[`BIT_WIDTH-1:0]				r_ux__1;
+reg	[`BIT_WIDTH-1:0]				r_ux__2;
+reg	[`BIT_WIDTH-1:0]				r_ux__3;
+reg	[`BIT_WIDTH-1:0]				r_ux__4;
+reg	[`BIT_WIDTH-1:0]				r_ux__5;
+reg	[`BIT_WIDTH-1:0]				r_ux__6;
+reg	[`BIT_WIDTH-1:0]				r_ux__7;
+reg	[`BIT_WIDTH-1:0]				r_ux__8;
+reg	[`BIT_WIDTH-1:0]				r_ux__9;
+reg	[`BIT_WIDTH-1:0]				r_ux__10;
+reg	[`BIT_WIDTH-1:0]				r_ux__11;
+reg	[`BIT_WIDTH-1:0]				r_ux__12;
+reg	[`BIT_WIDTH-1:0]				r_ux__13;
+reg	[`BIT_WIDTH-1:0]				r_ux__14;
+reg	[`BIT_WIDTH-1:0]				r_ux__15;
+reg	[`BIT_WIDTH-1:0]				r_ux__16;
+reg	[`BIT_WIDTH-1:0]				r_ux__17;
+reg	[`BIT_WIDTH-1:0]				r_ux__18;
+reg	[`BIT_WIDTH-1:0]				r_ux__19;
+reg	[`BIT_WIDTH-1:0]				r_ux__20;
+reg	[`BIT_WIDTH-1:0]				r_ux__21;
+reg	[`BIT_WIDTH-1:0]				r_ux__22;
+reg	[`BIT_WIDTH-1:0]				r_ux__23;
+reg	[`BIT_WIDTH-1:0]				r_ux__24;
+reg	[`BIT_WIDTH-1:0]				r_ux__25;
+reg	[`BIT_WIDTH-1:0]				r_ux__26;
+reg	[`BIT_WIDTH-1:0]				r_ux__27;
+reg	[`BIT_WIDTH-1:0]				r_ux__28;
+reg	[`BIT_WIDTH-1:0]				r_ux__29;
+reg	[`BIT_WIDTH-1:0]				r_ux__30;
+reg	[`BIT_WIDTH-1:0]				r_ux__31;
+reg	[`BIT_WIDTH-1:0]				r_ux__32;
+reg	[`BIT_WIDTH-1:0]				r_ux__33;
+reg	[`BIT_WIDTH-1:0]				r_ux__34;
+reg	[`BIT_WIDTH-1:0]				r_ux__35;
+reg	[`BIT_WIDTH-1:0]				r_ux__36;
+reg	[`BIT_WIDTH-1:0]				r_ux__37;
+reg	[`BIT_WIDTH-1:0]				r_ux__38;
+reg	[`BIT_WIDTH-1:0]				r_ux__39;
+reg	[`BIT_WIDTH-1:0]				r_ux__40;
+reg	[`BIT_WIDTH-1:0]				r_ux__41;
+reg	[`BIT_WIDTH-1:0]				r_ux__42;
+reg	[`BIT_WIDTH-1:0]				r_ux__43;
+reg	[`BIT_WIDTH-1:0]				r_ux__44;
+reg	[`BIT_WIDTH-1:0]				r_ux__45;
+reg	[`BIT_WIDTH-1:0]				r_ux__46;
+reg	[`BIT_WIDTH-1:0]				r_ux__47;
+reg	[`BIT_WIDTH-1:0]				r_ux__48;
+reg	[`BIT_WIDTH-1:0]				r_ux__49;
+reg	[`BIT_WIDTH-1:0]				r_ux__50;
+reg	[`BIT_WIDTH-1:0]				r_ux__51;
+reg	[`BIT_WIDTH-1:0]				r_ux__52;
+reg	[`BIT_WIDTH-1:0]				r_ux__53;
+reg	[`BIT_WIDTH-1:0]				r_ux__54;
+reg	[`BIT_WIDTH-1:0]				r_ux__55;
+reg	[`BIT_WIDTH-1:0]				r_ux__56;
+reg	[`BIT_WIDTH-1:0]				r_ux__57;
+reg	[`BIT_WIDTH-1:0]				r_ux__58;
+reg	[`BIT_WIDTH-1:0]				r_ux__59;
+
+//reg	[`BIT_WIDTH-1:0]				r_uy	[TOTAL_LATENCY - 1:0];
+
+reg	[`BIT_WIDTH-1:0]				r_uy__0;
+reg	[`BIT_WIDTH-1:0]				r_uy__1;
+reg	[`BIT_WIDTH-1:0]				r_uy__2;
+reg	[`BIT_WIDTH-1:0]				r_uy__3;
+reg	[`BIT_WIDTH-1:0]				r_uy__4;
+reg	[`BIT_WIDTH-1:0]				r_uy__5;
+reg	[`BIT_WIDTH-1:0]				r_uy__6;
+reg	[`BIT_WIDTH-1:0]				r_uy__7;
+reg	[`BIT_WIDTH-1:0]				r_uy__8;
+reg	[`BIT_WIDTH-1:0]				r_uy__9;
+reg	[`BIT_WIDTH-1:0]				r_uy__10;
+reg	[`BIT_WIDTH-1:0]				r_uy__11;
+reg	[`BIT_WIDTH-1:0]				r_uy__12;
+reg	[`BIT_WIDTH-1:0]				r_uy__13;
+reg	[`BIT_WIDTH-1:0]				r_uy__14;
+reg	[`BIT_WIDTH-1:0]				r_uy__15;
+reg	[`BIT_WIDTH-1:0]				r_uy__16;
+reg	[`BIT_WIDTH-1:0]				r_uy__17;
+reg	[`BIT_WIDTH-1:0]				r_uy__18;
+reg	[`BIT_WIDTH-1:0]				r_uy__19;
+reg	[`BIT_WIDTH-1:0]				r_uy__20;
+reg	[`BIT_WIDTH-1:0]				r_uy__21;
+reg	[`BIT_WIDTH-1:0]				r_uy__22;
+reg	[`BIT_WIDTH-1:0]				r_uy__23;
+reg	[`BIT_WIDTH-1:0]				r_uy__24;
+reg	[`BIT_WIDTH-1:0]				r_uy__25;
+reg	[`BIT_WIDTH-1:0]				r_uy__26;
+reg	[`BIT_WIDTH-1:0]				r_uy__27;
+reg	[`BIT_WIDTH-1:0]				r_uy__28;
+reg	[`BIT_WIDTH-1:0]				r_uy__29;
+reg	[`BIT_WIDTH-1:0]				r_uy__30;
+reg	[`BIT_WIDTH-1:0]				r_uy__31;
+reg	[`BIT_WIDTH-1:0]				r_uy__32;
+reg	[`BIT_WIDTH-1:0]				r_uy__33;
+reg	[`BIT_WIDTH-1:0]				r_uy__34;
+reg	[`BIT_WIDTH-1:0]				r_uy__35;
+reg	[`BIT_WIDTH-1:0]				r_uy__36;
+reg	[`BIT_WIDTH-1:0]				r_uy__37;
+reg	[`BIT_WIDTH-1:0]				r_uy__38;
+reg	[`BIT_WIDTH-1:0]				r_uy__39;
+reg	[`BIT_WIDTH-1:0]				r_uy__40;
+reg	[`BIT_WIDTH-1:0]				r_uy__41;
+reg	[`BIT_WIDTH-1:0]				r_uy__42;
+reg	[`BIT_WIDTH-1:0]				r_uy__43;
+reg	[`BIT_WIDTH-1:0]				r_uy__44;
+reg	[`BIT_WIDTH-1:0]				r_uy__45;
+reg	[`BIT_WIDTH-1:0]				r_uy__46;
+reg	[`BIT_WIDTH-1:0]				r_uy__47;
+reg	[`BIT_WIDTH-1:0]				r_uy__48;
+reg	[`BIT_WIDTH-1:0]				r_uy__49;
+reg	[`BIT_WIDTH-1:0]				r_uy__50;
+reg	[`BIT_WIDTH-1:0]				r_uy__51;
+reg	[`BIT_WIDTH-1:0]				r_uy__52;
+reg	[`BIT_WIDTH-1:0]				r_uy__53;
+reg	[`BIT_WIDTH-1:0]				r_uy__54;
+reg	[`BIT_WIDTH-1:0]				r_uy__55;
+reg	[`BIT_WIDTH-1:0]				r_uy__56;
+reg	[`BIT_WIDTH-1:0]				r_uy__57;
+reg	[`BIT_WIDTH-1:0]				r_uy__58;
+reg	[`BIT_WIDTH-1:0]				r_uy__59;
+
+//reg	[`BIT_WIDTH-1:0]				r_uz	[TOTAL_LATENCY - 1:0];
+
+reg	[`BIT_WIDTH-1:0]				r_uz__0;
+reg	[`BIT_WIDTH-1:0]				r_uz__1;
+reg	[`BIT_WIDTH-1:0]				r_uz__2;
+reg	[`BIT_WIDTH-1:0]				r_uz__3;
+reg	[`BIT_WIDTH-1:0]				r_uz__4;
+reg	[`BIT_WIDTH-1:0]				r_uz__5;
+reg	[`BIT_WIDTH-1:0]				r_uz__6;
+reg	[`BIT_WIDTH-1:0]				r_uz__7;
+reg	[`BIT_WIDTH-1:0]				r_uz__8;
+reg	[`BIT_WIDTH-1:0]				r_uz__9;
+reg	[`BIT_WIDTH-1:0]				r_uz__10;
+reg	[`BIT_WIDTH-1:0]				r_uz__11;
+reg	[`BIT_WIDTH-1:0]				r_uz__12;
+reg	[`BIT_WIDTH-1:0]				r_uz__13;
+reg	[`BIT_WIDTH-1:0]				r_uz__14;
+reg	[`BIT_WIDTH-1:0]				r_uz__15;
+reg	[`BIT_WIDTH-1:0]				r_uz__16;
+reg	[`BIT_WIDTH-1:0]				r_uz__17;
+reg	[`BIT_WIDTH-1:0]				r_uz__18;
+reg	[`BIT_WIDTH-1:0]				r_uz__19;
+reg	[`BIT_WIDTH-1:0]				r_uz__20;
+reg	[`BIT_WIDTH-1:0]				r_uz__21;
+reg	[`BIT_WIDTH-1:0]				r_uz__22;
+reg	[`BIT_WIDTH-1:0]				r_uz__23;
+reg	[`BIT_WIDTH-1:0]				r_uz__24;
+reg	[`BIT_WIDTH-1:0]				r_uz__25;
+reg	[`BIT_WIDTH-1:0]				r_uz__26;
+reg	[`BIT_WIDTH-1:0]				r_uz__27;
+reg	[`BIT_WIDTH-1:0]				r_uz__28;
+reg	[`BIT_WIDTH-1:0]				r_uz__29;
+reg	[`BIT_WIDTH-1:0]				r_uz__30;
+reg	[`BIT_WIDTH-1:0]				r_uz__31;
+reg	[`BIT_WIDTH-1:0]				r_uz__32;
+reg	[`BIT_WIDTH-1:0]				r_uz__33;
+reg	[`BIT_WIDTH-1:0]				r_uz__34;
+reg	[`BIT_WIDTH-1:0]				r_uz__35;
+reg	[`BIT_WIDTH-1:0]				r_uz__36;
+reg	[`BIT_WIDTH-1:0]				r_uz__37;
+reg	[`BIT_WIDTH-1:0]				r_uz__38;
+reg	[`BIT_WIDTH-1:0]				r_uz__39;
+reg	[`BIT_WIDTH-1:0]				r_uz__40;
+reg	[`BIT_WIDTH-1:0]				r_uz__41;
+reg	[`BIT_WIDTH-1:0]				r_uz__42;
+reg	[`BIT_WIDTH-1:0]				r_uz__43;
+reg	[`BIT_WIDTH-1:0]				r_uz__44;
+reg	[`BIT_WIDTH-1:0]				r_uz__45;
+reg	[`BIT_WIDTH-1:0]				r_uz__46;
+reg	[`BIT_WIDTH-1:0]				r_uz__47;
+reg	[`BIT_WIDTH-1:0]				r_uz__48;
+reg	[`BIT_WIDTH-1:0]				r_uz__49;
+reg	[`BIT_WIDTH-1:0]				r_uz__50;
+reg	[`BIT_WIDTH-1:0]				r_uz__51;
+reg	[`BIT_WIDTH-1:0]				r_uz__52;
+reg	[`BIT_WIDTH-1:0]				r_uz__53;
+reg	[`BIT_WIDTH-1:0]				r_uz__54;
+reg	[`BIT_WIDTH-1:0]				r_uz__55;
+reg	[`BIT_WIDTH-1:0]				r_uz__56;
+reg	[`BIT_WIDTH-1:0]				r_uz__57;
+reg	[`BIT_WIDTH-1:0]				r_uz__58;
+reg	[`BIT_WIDTH-1:0]				r_uz__59;
+
+
+//reg	[`BIT_WIDTH-1:0]				r_sz	[TOTAL_LATENCY - 1:0];
+
+reg	[`BIT_WIDTH-1:0]				r_sz__0;
+reg	[`BIT_WIDTH-1:0]				r_sz__1;
+reg	[`BIT_WIDTH-1:0]				r_sz__2;
+reg	[`BIT_WIDTH-1:0]				r_sz__3;
+reg	[`BIT_WIDTH-1:0]				r_sz__4;
+reg	[`BIT_WIDTH-1:0]				r_sz__5;
+reg	[`BIT_WIDTH-1:0]				r_sz__6;
+reg	[`BIT_WIDTH-1:0]				r_sz__7;
+reg	[`BIT_WIDTH-1:0]				r_sz__8;
+reg	[`BIT_WIDTH-1:0]				r_sz__9;
+reg	[`BIT_WIDTH-1:0]				r_sz__10;
+reg	[`BIT_WIDTH-1:0]				r_sz__11;
+reg	[`BIT_WIDTH-1:0]				r_sz__12;
+reg	[`BIT_WIDTH-1:0]				r_sz__13;
+reg	[`BIT_WIDTH-1:0]				r_sz__14;
+reg	[`BIT_WIDTH-1:0]				r_sz__15;
+reg	[`BIT_WIDTH-1:0]				r_sz__16;
+reg	[`BIT_WIDTH-1:0]				r_sz__17;
+reg	[`BIT_WIDTH-1:0]				r_sz__18;
+reg	[`BIT_WIDTH-1:0]				r_sz__19;
+reg	[`BIT_WIDTH-1:0]				r_sz__20;
+reg	[`BIT_WIDTH-1:0]				r_sz__21;
+reg	[`BIT_WIDTH-1:0]				r_sz__22;
+reg	[`BIT_WIDTH-1:0]				r_sz__23;
+reg	[`BIT_WIDTH-1:0]				r_sz__24;
+reg	[`BIT_WIDTH-1:0]				r_sz__25;
+reg	[`BIT_WIDTH-1:0]				r_sz__26;
+reg	[`BIT_WIDTH-1:0]				r_sz__27;
+reg	[`BIT_WIDTH-1:0]				r_sz__28;
+reg	[`BIT_WIDTH-1:0]				r_sz__29;
+reg	[`BIT_WIDTH-1:0]				r_sz__30;
+reg	[`BIT_WIDTH-1:0]				r_sz__31;
+reg	[`BIT_WIDTH-1:0]				r_sz__32;
+reg	[`BIT_WIDTH-1:0]				r_sz__33;
+reg	[`BIT_WIDTH-1:0]				r_sz__34;
+reg	[`BIT_WIDTH-1:0]				r_sz__35;
+reg	[`BIT_WIDTH-1:0]				r_sz__36;
+reg	[`BIT_WIDTH-1:0]				r_sz__37;
+reg	[`BIT_WIDTH-1:0]				r_sz__38;
+reg	[`BIT_WIDTH-1:0]				r_sz__39;
+reg	[`BIT_WIDTH-1:0]				r_sz__40;
+reg	[`BIT_WIDTH-1:0]				r_sz__41;
+reg	[`BIT_WIDTH-1:0]				r_sz__42;
+reg	[`BIT_WIDTH-1:0]				r_sz__43;
+reg	[`BIT_WIDTH-1:0]				r_sz__44;
+reg	[`BIT_WIDTH-1:0]				r_sz__45;
+reg	[`BIT_WIDTH-1:0]				r_sz__46;
+reg	[`BIT_WIDTH-1:0]				r_sz__47;
+reg	[`BIT_WIDTH-1:0]				r_sz__48;
+reg	[`BIT_WIDTH-1:0]				r_sz__49;
+reg	[`BIT_WIDTH-1:0]				r_sz__50;
+reg	[`BIT_WIDTH-1:0]				r_sz__51;
+reg	[`BIT_WIDTH-1:0]				r_sz__52;
+reg	[`BIT_WIDTH-1:0]				r_sz__53;
+reg	[`BIT_WIDTH-1:0]				r_sz__54;
+reg	[`BIT_WIDTH-1:0]				r_sz__55;
+reg	[`BIT_WIDTH-1:0]				r_sz__56;
+reg	[`BIT_WIDTH-1:0]				r_sz__57;
+reg	[`BIT_WIDTH-1:0]				r_sz__58;
+reg	[`BIT_WIDTH-1:0]				r_sz__59;
+
+//reg	[`BIT_WIDTH-1:0]				r_sr	[TOTAL_LATENCY - 1:0];
+
+reg	[`BIT_WIDTH-1:0]				r_sr__0;
+reg	[`BIT_WIDTH-1:0]				r_sr__1;
+reg	[`BIT_WIDTH-1:0]				r_sr__2;
+reg	[`BIT_WIDTH-1:0]				r_sr__3;
+reg	[`BIT_WIDTH-1:0]				r_sr__4;
+reg	[`BIT_WIDTH-1:0]				r_sr__5;
+reg	[`BIT_WIDTH-1:0]				r_sr__6;
+reg	[`BIT_WIDTH-1:0]				r_sr__7;
+reg	[`BIT_WIDTH-1:0]				r_sr__8;
+reg	[`BIT_WIDTH-1:0]				r_sr__9;
+reg	[`BIT_WIDTH-1:0]				r_sr__10;
+reg	[`BIT_WIDTH-1:0]				r_sr__11;
+reg	[`BIT_WIDTH-1:0]				r_sr__12;
+reg	[`BIT_WIDTH-1:0]				r_sr__13;
+reg	[`BIT_WIDTH-1:0]				r_sr__14;
+reg	[`BIT_WIDTH-1:0]				r_sr__15;
+reg	[`BIT_WIDTH-1:0]				r_sr__16;
+reg	[`BIT_WIDTH-1:0]				r_sr__17;
+reg	[`BIT_WIDTH-1:0]				r_sr__18;
+reg	[`BIT_WIDTH-1:0]				r_sr__19;
+reg	[`BIT_WIDTH-1:0]				r_sr__20;
+reg	[`BIT_WIDTH-1:0]				r_sr__21;
+reg	[`BIT_WIDTH-1:0]				r_sr__22;
+reg	[`BIT_WIDTH-1:0]				r_sr__23;
+reg	[`BIT_WIDTH-1:0]				r_sr__24;
+reg	[`BIT_WIDTH-1:0]				r_sr__25;
+reg	[`BIT_WIDTH-1:0]				r_sr__26;
+reg	[`BIT_WIDTH-1:0]				r_sr__27;
+reg	[`BIT_WIDTH-1:0]				r_sr__28;
+reg	[`BIT_WIDTH-1:0]				r_sr__29;
+reg	[`BIT_WIDTH-1:0]				r_sr__30;
+reg	[`BIT_WIDTH-1:0]				r_sr__31;
+reg	[`BIT_WIDTH-1:0]				r_sr__32;
+reg	[`BIT_WIDTH-1:0]				r_sr__33;
+reg	[`BIT_WIDTH-1:0]				r_sr__34;
+reg	[`BIT_WIDTH-1:0]				r_sr__35;
+reg	[`BIT_WIDTH-1:0]				r_sr__36;
+reg	[`BIT_WIDTH-1:0]				r_sr__37;
+reg	[`BIT_WIDTH-1:0]				r_sr__38;
+reg	[`BIT_WIDTH-1:0]				r_sr__39;
+reg	[`BIT_WIDTH-1:0]				r_sr__40;
+reg	[`BIT_WIDTH-1:0]				r_sr__41;
+reg	[`BIT_WIDTH-1:0]				r_sr__42;
+reg	[`BIT_WIDTH-1:0]				r_sr__43;
+reg	[`BIT_WIDTH-1:0]				r_sr__44;
+reg	[`BIT_WIDTH-1:0]				r_sr__45;
+reg	[`BIT_WIDTH-1:0]				r_sr__46;
+reg	[`BIT_WIDTH-1:0]				r_sr__47;
+reg	[`BIT_WIDTH-1:0]				r_sr__48;
+reg	[`BIT_WIDTH-1:0]				r_sr__49;
+reg	[`BIT_WIDTH-1:0]				r_sr__50;
+reg	[`BIT_WIDTH-1:0]				r_sr__51;
+reg	[`BIT_WIDTH-1:0]				r_sr__52;
+reg	[`BIT_WIDTH-1:0]				r_sr__53;
+reg	[`BIT_WIDTH-1:0]				r_sr__54;
+reg	[`BIT_WIDTH-1:0]				r_sr__55;
+reg	[`BIT_WIDTH-1:0]				r_sr__56;
+reg	[`BIT_WIDTH-1:0]				r_sr__57;
+reg	[`BIT_WIDTH-1:0]				r_sr__58;
+reg	[`BIT_WIDTH-1:0]				r_sr__59;
+
+//reg	[`BIT_WIDTH-1:0]				r_sleftz	[TOTAL_LATENCY - 1:0];
+
+reg	[`BIT_WIDTH-1:0]				r_sleftz__0;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__1;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__2;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__3;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__4;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__5;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__6;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__7;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__8;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__9;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__10;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__11;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__12;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__13;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__14;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__15;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__16;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__17;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__18;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__19;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__20;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__21;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__22;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__23;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__24;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__25;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__26;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__27;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__28;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__29;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__30;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__31;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__32;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__33;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__34;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__35;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__36;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__37;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__38;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__39;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__40;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__41;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__42;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__43;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__44;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__45;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__46;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__47;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__48;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__49;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__50;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__51;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__52;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__53;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__54;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__55;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__56;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__57;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__58;
+reg	[`BIT_WIDTH-1:0]				r_sleftz__59;
+
+
+
+//reg	[`BIT_WIDTH-1:0]				r_sleftr	[TOTAL_LATENCY - 1:0];
+
+reg	[`BIT_WIDTH-1:0]				r_sleftr__0;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__1;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__2;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__3;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__4;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__5;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__6;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__7;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__8;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__9;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__10;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__11;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__12;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__13;
+
+reg	[`BIT_WIDTH-1:0]				r_sleftr__14;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__15;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__16;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__17;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__18;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__19;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__20;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__21;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__22;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__23;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__24;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__25;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__26;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__27;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__28;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__29;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__30;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__31;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__32;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__33;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__34;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__35;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__36;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__37;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__38;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__39;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__40;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__41;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__42;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__43;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__44;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__45;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__46;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__47;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__48;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__49;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__50;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__51;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__52;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__53;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__54;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__55;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__56;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__57;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__58;
+reg	[`BIT_WIDTH-1:0]				r_sleftr__59;
+
+
+//reg	[`BIT_WIDTH-1:0]				r_weight	[TOTAL_LATENCY - 1:0];
+
+reg	[`BIT_WIDTH-1:0]				r_weight__0;
+reg	[`BIT_WIDTH-1:0]				r_weight__1;
+reg	[`BIT_WIDTH-1:0]				r_weight__2;
+reg	[`BIT_WIDTH-1:0]				r_weight__3;
+reg	[`BIT_WIDTH-1:0]				r_weight__4;
+reg	[`BIT_WIDTH-1:0]				r_weight__5;
+reg	[`BIT_WIDTH-1:0]				r_weight__6;
+reg	[`BIT_WIDTH-1:0]				r_weight__7;
+reg	[`BIT_WIDTH-1:0]				r_weight__8;
+reg	[`BIT_WIDTH-1:0]				r_weight__9;
+reg	[`BIT_WIDTH-1:0]				r_weight__10;
+reg	[`BIT_WIDTH-1:0]				r_weight__11;
+reg	[`BIT_WIDTH-1:0]				r_weight__12;
+reg	[`BIT_WIDTH-1:0]				r_weight__13;
+reg	[`BIT_WIDTH-1:0]				r_weight__14;
+reg	[`BIT_WIDTH-1:0]				r_weight__15;
+reg	[`BIT_WIDTH-1:0]				r_weight__16;
+reg	[`BIT_WIDTH-1:0]				r_weight__17;
+reg	[`BIT_WIDTH-1:0]				r_weight__18;
+reg	[`BIT_WIDTH-1:0]				r_weight__19;
+reg	[`BIT_WIDTH-1:0]				r_weight__20;
+reg	[`BIT_WIDTH-1:0]				r_weight__21;
+reg	[`BIT_WIDTH-1:0]				r_weight__22;
+reg	[`BIT_WIDTH-1:0]				r_weight__23;
+reg	[`BIT_WIDTH-1:0]				r_weight__24;
+reg	[`BIT_WIDTH-1:0]				r_weight__25;
+reg	[`BIT_WIDTH-1:0]				r_weight__26;
+reg	[`BIT_WIDTH-1:0]				r_weight__27;
+reg	[`BIT_WIDTH-1:0]				r_weight__28;
+reg	[`BIT_WIDTH-1:0]				r_weight__29;
+reg	[`BIT_WIDTH-1:0]				r_weight__30;
+reg	[`BIT_WIDTH-1:0]				r_weight__31;
+reg	[`BIT_WIDTH-1:0]				r_weight__32;
+reg	[`BIT_WIDTH-1:0]				r_weight__33;
+reg	[`BIT_WIDTH-1:0]				r_weight__34;
+reg	[`BIT_WIDTH-1:0]				r_weight__35;
+reg	[`BIT_WIDTH-1:0]				r_weight__36;
+reg	[`BIT_WIDTH-1:0]				r_weight__37;
+reg	[`BIT_WIDTH-1:0]				r_weight__38;
+reg	[`BIT_WIDTH-1:0]				r_weight__39;
+reg	[`BIT_WIDTH-1:0]				r_weight__40;
+reg	[`BIT_WIDTH-1:0]				r_weight__41;
+reg	[`BIT_WIDTH-1:0]				r_weight__42;
+reg	[`BIT_WIDTH-1:0]				r_weight__43;
+reg	[`BIT_WIDTH-1:0]				r_weight__44;
+reg	[`BIT_WIDTH-1:0]				r_weight__45;
+reg	[`BIT_WIDTH-1:0]				r_weight__46;
+reg	[`BIT_WIDTH-1:0]				r_weight__47;
+reg	[`BIT_WIDTH-1:0]				r_weight__48;
+reg	[`BIT_WIDTH-1:0]				r_weight__49;
+reg	[`BIT_WIDTH-1:0]				r_weight__50;
+reg	[`BIT_WIDTH-1:0]				r_weight__51;
+reg	[`BIT_WIDTH-1:0]				r_weight__52;
+reg	[`BIT_WIDTH-1:0]				r_weight__53;
+reg	[`BIT_WIDTH-1:0]				r_weight__54;
+reg	[`BIT_WIDTH-1:0]				r_weight__55;
+reg	[`BIT_WIDTH-1:0]				r_weight__56;
+reg	[`BIT_WIDTH-1:0]				r_weight__57;
+reg	[`BIT_WIDTH-1:0]				r_weight__58;
+reg	[`BIT_WIDTH-1:0]				r_weight__59;
+
+//reg	[`LAYER_WIDTH-1:0]			r_layer	[TOTAL_LATENCY - 1:0];
+
+reg	[`LAYER_WIDTH-1:0]				r_layer__0;
+reg	[`LAYER_WIDTH-1:0]				r_layer__1;
+reg	[`LAYER_WIDTH-1:0]				r_layer__2;
+reg	[`LAYER_WIDTH-1:0]				r_layer__3;
+reg	[`LAYER_WIDTH-1:0]				r_layer__4;
+reg	[`LAYER_WIDTH-1:0]				r_layer__5;
+reg	[`LAYER_WIDTH-1:0]				r_layer__6;
+reg	[`LAYER_WIDTH-1:0]				r_layer__7;
+reg	[`LAYER_WIDTH-1:0]				r_layer__8;
+reg	[`LAYER_WIDTH-1:0]				r_layer__9;
+reg	[`LAYER_WIDTH-1:0]				r_layer__10;
+reg	[`LAYER_WIDTH-1:0]				r_layer__11;
+reg	[`LAYER_WIDTH-1:0]				r_layer__12;
+reg	[`LAYER_WIDTH-1:0]				r_layer__13;
+reg	[`LAYER_WIDTH-1:0]				r_layer__14;
+reg	[`LAYER_WIDTH-1:0]				r_layer__15;
+reg	[`LAYER_WIDTH-1:0]				r_layer__16;
+reg	[`LAYER_WIDTH-1:0]				r_layer__17;
+reg	[`LAYER_WIDTH-1:0]				r_layer__18;
+reg	[`LAYER_WIDTH-1:0]				r_layer__19;
+reg	[`LAYER_WIDTH-1:0]				r_layer__20;
+reg	[`LAYER_WIDTH-1:0]				r_layer__21;
+reg	[`LAYER_WIDTH-1:0]				r_layer__22;
+reg	[`LAYER_WIDTH-1:0]				r_layer__23;
+reg	[`LAYER_WIDTH-1:0]				r_layer__24;
+reg	[`LAYER_WIDTH-1:0]				r_layer__25;
+reg	[`LAYER_WIDTH-1:0]				r_layer__26;
+reg	[`LAYER_WIDTH-1:0]				r_layer__27;
+reg	[`LAYER_WIDTH-1:0]				r_layer__28;
+reg	[`LAYER_WIDTH-1:0]				r_layer__29;
+reg	[`LAYER_WIDTH-1:0]				r_layer__30;
+reg	[`LAYER_WIDTH-1:0]				r_layer__31;
+reg	[`LAYER_WIDTH-1:0]				r_layer__32;
+reg	[`LAYER_WIDTH-1:0]				r_layer__33;
+reg	[`LAYER_WIDTH-1:0]				r_layer__34;
+reg	[`LAYER_WIDTH-1:0]				r_layer__35;
+reg	[`LAYER_WIDTH-1:0]				r_layer__36;
+reg	[`LAYER_WIDTH-1:0]				r_layer__37;
+reg	[`LAYER_WIDTH-1:0]				r_layer__38;
+reg	[`LAYER_WIDTH-1:0]				r_layer__39;
+reg	[`LAYER_WIDTH-1:0]				r_layer__40;
+reg	[`LAYER_WIDTH-1:0]				r_layer__41;
+reg	[`LAYER_WIDTH-1:0]				r_layer__42;
+reg	[`LAYER_WIDTH-1:0]				r_layer__43;
+reg	[`LAYER_WIDTH-1:0]				r_layer__44;
+reg	[`LAYER_WIDTH-1:0]				r_layer__45;
+reg	[`LAYER_WIDTH-1:0]				r_layer__46;
+reg	[`LAYER_WIDTH-1:0]				r_layer__47;
+reg	[`LAYER_WIDTH-1:0]				r_layer__48;
+reg	[`LAYER_WIDTH-1:0]				r_layer__49;
+reg	[`LAYER_WIDTH-1:0]				r_layer__50;
+reg	[`LAYER_WIDTH-1:0]				r_layer__51;
+reg	[`LAYER_WIDTH-1:0]				r_layer__52;
+reg	[`LAYER_WIDTH-1:0]				r_layer__53;
+reg	[`LAYER_WIDTH-1:0]				r_layer__54;
+reg	[`LAYER_WIDTH-1:0]				r_layer__55;
+reg	[`LAYER_WIDTH-1:0]				r_layer__56;
+reg	[`LAYER_WIDTH-1:0]				r_layer__57;
+reg	[`LAYER_WIDTH-1:0]				r_layer__58;
+reg	[`LAYER_WIDTH-1:0]				r_layer__59;
+
+//reg								r_dead	[TOTAL_LATENCY - 1:0];
+
+reg					r_dead__0;
+reg					r_dead__1;
+reg					r_dead__2;
+reg					r_dead__3;
+reg					r_dead__4;
+reg					r_dead__5;
+reg					r_dead__6;
+reg					r_dead__7;
+reg					r_dead__8;
+reg					r_dead__9;
+reg					r_dead__10;
+reg					r_dead__11;
+reg					r_dead__12;
+reg					r_dead__13;
+reg					r_dead__14;
+reg					r_dead__15;
+reg					r_dead__16;
+reg					r_dead__17;
+reg					r_dead__18;
+reg					r_dead__19;
+reg					r_dead__20;
+reg					r_dead__21;
+reg					r_dead__22;
+reg					r_dead__23;
+reg					r_dead__24;
+reg					r_dead__25;
+reg					r_dead__26;
+reg					r_dead__27;
+reg					r_dead__28;
+reg					r_dead__29;
+reg					r_dead__30;
+reg					r_dead__31;
+reg					r_dead__32;
+reg					r_dead__33;
+reg					r_dead__34;
+reg					r_dead__35;
+reg					r_dead__36;
+reg					r_dead__37;
+reg					r_dead__38;
+reg					r_dead__39;
+reg					r_dead__40;
+reg					r_dead__41;
+reg					r_dead__42;
+reg					r_dead__43;
+reg					r_dead__44;
+reg					r_dead__45;
+reg					r_dead__46;
+reg					r_dead__47;
+reg					r_dead__48;
+reg					r_dead__49;
+reg					r_dead__50;
+reg					r_dead__51;
+reg					r_dead__52;
+reg					r_dead__53;
+reg					r_dead__54;
+reg					r_dead__55;
+reg					r_dead__56;
+reg					r_dead__57;
+reg					r_dead__58;
+reg					r_dead__59;
+
+//reg								r_hit	[TOTAL_LATENCY - 1:0];
+
+reg					r_hit__0;
+reg					r_hit__1;
+reg					r_hit__2;
+reg					r_hit__3;
+reg					r_hit__4;
+reg					r_hit__5;
+reg					r_hit__6;
+reg					r_hit__7;
+reg					r_hit__8;
+reg					r_hit__9;
+reg					r_hit__10;
+reg					r_hit__11;
+reg					r_hit__12;
+reg					r_hit__13;
+reg					r_hit__14;
+reg					r_hit__15;
+reg					r_hit__16;
+reg					r_hit__17;
+reg					r_hit__18;
+reg					r_hit__19;
+reg					r_hit__20;
+reg					r_hit__21;
+reg					r_hit__22;
+reg					r_hit__23;
+reg					r_hit__24;
+reg					r_hit__25;
+reg					r_hit__26;
+reg					r_hit__27;
+reg					r_hit__28;
+reg					r_hit__29;
+reg					r_hit__30;
+reg					r_hit__31;
+reg					r_hit__32;
+reg					r_hit__33;
+reg					r_hit__34;
+reg					r_hit__35;
+reg					r_hit__36;
+reg					r_hit__37;
+reg					r_hit__38;
+reg					r_hit__39;
+reg					r_hit__40;
+reg					r_hit__41;
+reg					r_hit__42;
+reg					r_hit__43;
+reg					r_hit__44;
+reg					r_hit__45;
+reg					r_hit__46;
+reg					r_hit__47;
+reg					r_hit__48;
+reg					r_hit__49;
+reg					r_hit__50;
+reg					r_hit__51;
+reg					r_hit__52;
+reg					r_hit__53;
+reg					r_hit__54;
+reg					r_hit__55;
+reg					r_hit__56;
+reg					r_hit__57;
+reg					r_hit__58;
+reg					r_hit__59;
+
+//reg	[`BIT_WIDTH-1:0]				r_diff[TOTAL_LATENCY - 1:0];
+
+reg	[`BIT_WIDTH-1:0]				r_diff__0;
+reg	[`BIT_WIDTH-1:0]				r_diff__1;
+reg	[`BIT_WIDTH-1:0]				r_diff__2;
+reg	[`BIT_WIDTH-1:0]				r_diff__3;
+reg	[`BIT_WIDTH-1:0]				r_diff__4;
+reg	[`BIT_WIDTH-1:0]				r_diff__5;
+reg	[`BIT_WIDTH-1:0]				r_diff__6;
+reg	[`BIT_WIDTH-1:0]				r_diff__7;
+reg	[`BIT_WIDTH-1:0]				r_diff__8;
+reg	[`BIT_WIDTH-1:0]				r_diff__9;
+reg	[`BIT_WIDTH-1:0]				r_diff__10;
+reg	[`BIT_WIDTH-1:0]				r_diff__11;
+reg	[`BIT_WIDTH-1:0]				r_diff__12;
+reg	[`BIT_WIDTH-1:0]				r_diff__13;
+reg	[`BIT_WIDTH-1:0]				r_diff__14;
+reg	[`BIT_WIDTH-1:0]				r_diff__15;
+reg	[`BIT_WIDTH-1:0]				r_diff__16;
+reg	[`BIT_WIDTH-1:0]				r_diff__17;
+reg	[`BIT_WIDTH-1:0]				r_diff__18;
+reg	[`BIT_WIDTH-1:0]				r_diff__19;
+reg	[`BIT_WIDTH-1:0]				r_diff__20;
+reg	[`BIT_WIDTH-1:0]				r_diff__21;
+reg	[`BIT_WIDTH-1:0]				r_diff__22;
+reg	[`BIT_WIDTH-1:0]				r_diff__23;
+reg	[`BIT_WIDTH-1:0]				r_diff__24;
+reg	[`BIT_WIDTH-1:0]				r_diff__25;
+reg	[`BIT_WIDTH-1:0]				r_diff__26;
+reg	[`BIT_WIDTH-1:0]				r_diff__27;
+reg	[`BIT_WIDTH-1:0]				r_diff__28;
+reg	[`BIT_WIDTH-1:0]				r_diff__29;
+reg	[`BIT_WIDTH-1:0]				r_diff__30;
+reg	[`BIT_WIDTH-1:0]				r_diff__31;
+reg	[`BIT_WIDTH-1:0]				r_diff__32;
+reg	[`BIT_WIDTH-1:0]				r_diff__33;
+reg	[`BIT_WIDTH-1:0]				r_diff__34;
+reg	[`BIT_WIDTH-1:0]				r_diff__35;
+reg	[`BIT_WIDTH-1:0]				r_diff__36;
+reg	[`BIT_WIDTH-1:0]				r_diff__37;
+reg	[`BIT_WIDTH-1:0]				r_diff__38;
+reg	[`BIT_WIDTH-1:0]				r_diff__39;
+reg	[`BIT_WIDTH-1:0]				r_diff__40;
+reg	[`BIT_WIDTH-1:0]				r_diff__41;
+reg	[`BIT_WIDTH-1:0]				r_diff__42;
+reg	[`BIT_WIDTH-1:0]				r_diff__43;
+reg	[`BIT_WIDTH-1:0]				r_diff__44;
+reg	[`BIT_WIDTH-1:0]				r_diff__45;
+reg	[`BIT_WIDTH-1:0]				r_diff__46;
+reg	[`BIT_WIDTH-1:0]				r_diff__47;
+reg	[`BIT_WIDTH-1:0]				r_diff__48;
+reg	[`BIT_WIDTH-1:0]				r_diff__49;
+reg	[`BIT_WIDTH-1:0]				r_diff__50;
+reg	[`BIT_WIDTH-1:0]				r_diff__51;
+reg	[`BIT_WIDTH-1:0]				r_diff__52;
+reg	[`BIT_WIDTH-1:0]				r_diff__53;
+reg	[`BIT_WIDTH-1:0]				r_diff__54;
+reg	[`BIT_WIDTH-1:0]				r_diff__55;
+reg	[`BIT_WIDTH-1:0]				r_diff__56;
+reg	[`BIT_WIDTH-1:0]				r_diff__57;
+reg	[`BIT_WIDTH-1:0]				r_diff__58;
+reg	[`BIT_WIDTH-1:0]				r_diff__59;
+
+//reg	[`BIT_WIDTH-1:0]				r_dl_b[TOTAL_LATENCY - 1:0];
+
+reg	[`BIT_WIDTH-1:0]				r_dl_b__0;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__1;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__2;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__3;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__4;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__5;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__6;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__7;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__8;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__9;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__10;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__11;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__12;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__13;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__14;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__15;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__16;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__17;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__18;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__19;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__20;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__21;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__22;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__23;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__24;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__25;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__26;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__27;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__28;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__29;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__30;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__31;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__32;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__33;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__34;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__35;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__36;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__37;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__38;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__39;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__40;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__41;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__42;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__43;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__44;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__45;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__46;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__47;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__48;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__49;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__50;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__51;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__52;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__53;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__54;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__55;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__56;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__57;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__58;
+reg	[`BIT_WIDTH-1:0]				r_dl_b__59;
+
+//reg	[2*`BIT_WIDTH-1:0]			r_numer[TOTAL_LATENCY - 1:0];
+
+reg	[2*`BIT_WIDTH-1:0]				r_numer__0;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__1;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__2;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__3;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__4;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__5;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__6;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__7;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__8;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__9;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__10;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__11;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__12;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__13;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__14;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__15;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__16;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__17;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__18;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__19;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__20;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__21;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__22;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__23;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__24;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__25;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__26;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__27;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__28;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__29;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__30;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__31;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__32;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__33;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__34;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__35;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__36;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__37;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__38;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__39;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__40;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__41;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__42;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__43;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__44;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__45;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__46;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__47;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__48;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__49;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__50;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__51;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__52;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__53;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__54;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__55;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__56;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__57;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__58;
+reg	[2*`BIT_WIDTH-1:0]				r_numer__59;
+
+//reg	[`BIT_WIDTH-1:0]				r_z1[TOTAL_LATENCY - 1:0];
+
+reg	[`BIT_WIDTH-1:0]				r_z1__0;
+reg	[`BIT_WIDTH-1:0]				r_z1__1;
+reg	[`BIT_WIDTH-1:0]				r_z1__2;
+reg	[`BIT_WIDTH-1:0]				r_z1__3;
+reg	[`BIT_WIDTH-1:0]				r_z1__4;
+reg	[`BIT_WIDTH-1:0]				r_z1__5;
+reg	[`BIT_WIDTH-1:0]				r_z1__6;
+reg	[`BIT_WIDTH-1:0]				r_z1__7;
+reg	[`BIT_WIDTH-1:0]				r_z1__8;
+reg	[`BIT_WIDTH-1:0]				r_z1__9;
+reg	[`BIT_WIDTH-1:0]				r_z1__10;
+reg	[`BIT_WIDTH-1:0]				r_z1__11;
+reg	[`BIT_WIDTH-1:0]				r_z1__12;
+reg	[`BIT_WIDTH-1:0]				r_z1__13;
+reg	[`BIT_WIDTH-1:0]				r_z1__14;
+reg	[`BIT_WIDTH-1:0]				r_z1__15;
+reg	[`BIT_WIDTH-1:0]				r_z1__16;
+reg	[`BIT_WIDTH-1:0]				r_z1__17;
+reg	[`BIT_WIDTH-1:0]				r_z1__18;
+reg	[`BIT_WIDTH-1:0]				r_z1__19;
+reg	[`BIT_WIDTH-1:0]				r_z1__20;
+reg	[`BIT_WIDTH-1:0]				r_z1__21;
+reg	[`BIT_WIDTH-1:0]				r_z1__22;
+reg	[`BIT_WIDTH-1:0]				r_z1__23;
+reg	[`BIT_WIDTH-1:0]				r_z1__24;
+reg	[`BIT_WIDTH-1:0]				r_z1__25;
+reg	[`BIT_WIDTH-1:0]				r_z1__26;
+reg	[`BIT_WIDTH-1:0]				r_z1__27;
+reg	[`BIT_WIDTH-1:0]				r_z1__28;
+reg	[`BIT_WIDTH-1:0]				r_z1__29;
+reg	[`BIT_WIDTH-1:0]				r_z1__30;
+reg	[`BIT_WIDTH-1:0]				r_z1__31;
+reg	[`BIT_WIDTH-1:0]				r_z1__32;
+reg	[`BIT_WIDTH-1:0]				r_z1__33;
+reg	[`BIT_WIDTH-1:0]				r_z1__34;
+reg	[`BIT_WIDTH-1:0]				r_z1__35;
+reg	[`BIT_WIDTH-1:0]				r_z1__36;
+reg	[`BIT_WIDTH-1:0]				r_z1__37;
+reg	[`BIT_WIDTH-1:0]				r_z1__38;
+reg	[`BIT_WIDTH-1:0]				r_z1__39;
+reg	[`BIT_WIDTH-1:0]				r_z1__40;
+reg	[`BIT_WIDTH-1:0]				r_z1__41;
+reg	[`BIT_WIDTH-1:0]				r_z1__42;
+reg	[`BIT_WIDTH-1:0]				r_z1__43;
+reg	[`BIT_WIDTH-1:0]				r_z1__44;
+reg	[`BIT_WIDTH-1:0]				r_z1__45;
+reg	[`BIT_WIDTH-1:0]				r_z1__46;
+reg	[`BIT_WIDTH-1:0]				r_z1__47;
+reg	[`BIT_WIDTH-1:0]				r_z1__48;
+reg	[`BIT_WIDTH-1:0]				r_z1__49;
+reg	[`BIT_WIDTH-1:0]				r_z1__50;
+reg	[`BIT_WIDTH-1:0]				r_z1__51;
+reg	[`BIT_WIDTH-1:0]				r_z1__52;
+reg	[`BIT_WIDTH-1:0]				r_z1__53;
+reg	[`BIT_WIDTH-1:0]				r_z1__54;
+reg	[`BIT_WIDTH-1:0]				r_z1__55;
+reg	[`BIT_WIDTH-1:0]				r_z1__56;
+reg	[`BIT_WIDTH-1:0]				r_z1__57;
+reg	[`BIT_WIDTH-1:0]				r_z1__58;
+reg	[`BIT_WIDTH-1:0]				r_z1__59;
+
+//reg	[`BIT_WIDTH-1:0]				r_z0[TOTAL_LATENCY - 1:0];
+
+reg	[`BIT_WIDTH-1:0]				r_z0__0;
+reg	[`BIT_WIDTH-1:0]				r_z0__1;
+reg	[`BIT_WIDTH-1:0]				r_z0__2;
+reg	[`BIT_WIDTH-1:0]				r_z0__3;
+reg	[`BIT_WIDTH-1:0]				r_z0__4;
+reg	[`BIT_WIDTH-1:0]				r_z0__5;
+reg	[`BIT_WIDTH-1:0]				r_z0__6;
+reg	[`BIT_WIDTH-1:0]				r_z0__7;
+reg	[`BIT_WIDTH-1:0]				r_z0__8;
+reg	[`BIT_WIDTH-1:0]				r_z0__9;
+reg	[`BIT_WIDTH-1:0]				r_z0__10;
+reg	[`BIT_WIDTH-1:0]				r_z0__11;
+reg	[`BIT_WIDTH-1:0]				r_z0__12;
+reg	[`BIT_WIDTH-1:0]				r_z0__13;
+reg	[`BIT_WIDTH-1:0]				r_z0__14;
+reg	[`BIT_WIDTH-1:0]				r_z0__15;
+reg	[`BIT_WIDTH-1:0]				r_z0__16;
+reg	[`BIT_WIDTH-1:0]				r_z0__17;
+reg	[`BIT_WIDTH-1:0]				r_z0__18;
+reg	[`BIT_WIDTH-1:0]				r_z0__19;
+reg	[`BIT_WIDTH-1:0]				r_z0__20;
+reg	[`BIT_WIDTH-1:0]				r_z0__21;
+reg	[`BIT_WIDTH-1:0]				r_z0__22;
+reg	[`BIT_WIDTH-1:0]				r_z0__23;
+reg	[`BIT_WIDTH-1:0]				r_z0__24;
+reg	[`BIT_WIDTH-1:0]				r_z0__25;
+reg	[`BIT_WIDTH-1:0]				r_z0__26;
+reg	[`BIT_WIDTH-1:0]				r_z0__27;
+reg	[`BIT_WIDTH-1:0]				r_z0__28;
+reg	[`BIT_WIDTH-1:0]				r_z0__29;
+reg	[`BIT_WIDTH-1:0]				r_z0__30;
+reg	[`BIT_WIDTH-1:0]				r_z0__31;
+reg	[`BIT_WIDTH-1:0]				r_z0__32;
+reg	[`BIT_WIDTH-1:0]				r_z0__33;
+reg	[`BIT_WIDTH-1:0]				r_z0__34;
+reg	[`BIT_WIDTH-1:0]				r_z0__35;
+reg	[`BIT_WIDTH-1:0]				r_z0__36;
+reg	[`BIT_WIDTH-1:0]				r_z0__37;
+reg	[`BIT_WIDTH-1:0]				r_z0__38;
+reg	[`BIT_WIDTH-1:0]				r_z0__39;
+reg	[`BIT_WIDTH-1:0]				r_z0__40;
+reg	[`BIT_WIDTH-1:0]				r_z0__41;
+reg	[`BIT_WIDTH-1:0]				r_z0__42;
+reg	[`BIT_WIDTH-1:0]				r_z0__43;
+reg	[`BIT_WIDTH-1:0]				r_z0__44;
+reg	[`BIT_WIDTH-1:0]				r_z0__45;
+reg	[`BIT_WIDTH-1:0]				r_z0__46;
+reg	[`BIT_WIDTH-1:0]				r_z0__47;
+reg	[`BIT_WIDTH-1:0]				r_z0__48;
+reg	[`BIT_WIDTH-1:0]				r_z0__49;
+reg	[`BIT_WIDTH-1:0]				r_z0__50;
+reg	[`BIT_WIDTH-1:0]				r_z0__51;
+reg	[`BIT_WIDTH-1:0]				r_z0__52;
+reg	[`BIT_WIDTH-1:0]				r_z0__53;
+reg	[`BIT_WIDTH-1:0]				r_z0__54;
+reg	[`BIT_WIDTH-1:0]				r_z0__55;
+reg	[`BIT_WIDTH-1:0]				r_z0__56;
+reg	[`BIT_WIDTH-1:0]				r_z0__57;
+reg	[`BIT_WIDTH-1:0]				r_z0__58;
+reg	[`BIT_WIDTH-1:0]				r_z0__59;
+//reg	[`BIT_WIDTH-1:0]				r_mut[TOTAL_LATENCY - 1:0];
+
+reg	[`BIT_WIDTH-1:0]				r_mut__0;
+reg	[`BIT_WIDTH-1:0]				r_mut__1;
+reg	[`BIT_WIDTH-1:0]				r_mut__2;
+reg	[`BIT_WIDTH-1:0]				r_mut__3;
+reg	[`BIT_WIDTH-1:0]				r_mut__4;
+reg	[`BIT_WIDTH-1:0]				r_mut__5;
+reg	[`BIT_WIDTH-1:0]				r_mut__6;
+reg	[`BIT_WIDTH-1:0]				r_mut__7;
+reg	[`BIT_WIDTH-1:0]				r_mut__8;
+reg	[`BIT_WIDTH-1:0]				r_mut__9;
+reg	[`BIT_WIDTH-1:0]				r_mut__10;
+reg	[`BIT_WIDTH-1:0]				r_mut__11;
+reg	[`BIT_WIDTH-1:0]				r_mut__12;
+reg	[`BIT_WIDTH-1:0]				r_mut__13;
+reg	[`BIT_WIDTH-1:0]				r_mut__14;
+reg	[`BIT_WIDTH-1:0]				r_mut__15;
+reg	[`BIT_WIDTH-1:0]				r_mut__16;
+reg	[`BIT_WIDTH-1:0]				r_mut__17;
+reg	[`BIT_WIDTH-1:0]				r_mut__18;
+reg	[`BIT_WIDTH-1:0]				r_mut__19;
+reg	[`BIT_WIDTH-1:0]				r_mut__20;
+reg	[`BIT_WIDTH-1:0]				r_mut__21;
+reg	[`BIT_WIDTH-1:0]				r_mut__22;
+reg	[`BIT_WIDTH-1:0]				r_mut__23;
+reg	[`BIT_WIDTH-1:0]				r_mut__24;
+reg	[`BIT_WIDTH-1:0]				r_mut__25;
+reg	[`BIT_WIDTH-1:0]				r_mut__26;
+reg	[`BIT_WIDTH-1:0]				r_mut__27;
+reg	[`BIT_WIDTH-1:0]				r_mut__28;
+reg	[`BIT_WIDTH-1:0]				r_mut__29;
+reg	[`BIT_WIDTH-1:0]				r_mut__30;
+reg	[`BIT_WIDTH-1:0]				r_mut__31;
+reg	[`BIT_WIDTH-1:0]				r_mut__32;
+reg	[`BIT_WIDTH-1:0]				r_mut__33;
+reg	[`BIT_WIDTH-1:0]				r_mut__34;
+reg	[`BIT_WIDTH-1:0]				r_mut__35;
+reg	[`BIT_WIDTH-1:0]				r_mut__36;
+reg	[`BIT_WIDTH-1:0]				r_mut__37;
+reg	[`BIT_WIDTH-1:0]				r_mut__38;
+reg	[`BIT_WIDTH-1:0]				r_mut__39;
+reg	[`BIT_WIDTH-1:0]				r_mut__40;
+reg	[`BIT_WIDTH-1:0]				r_mut__41;
+reg	[`BIT_WIDTH-1:0]				r_mut__42;
+reg	[`BIT_WIDTH-1:0]				r_mut__43;
+reg	[`BIT_WIDTH-1:0]				r_mut__44;
+reg	[`BIT_WIDTH-1:0]				r_mut__45;
+reg	[`BIT_WIDTH-1:0]				r_mut__46;
+reg	[`BIT_WIDTH-1:0]				r_mut__47;
+reg	[`BIT_WIDTH-1:0]				r_mut__48;
+reg	[`BIT_WIDTH-1:0]				r_mut__49;
+reg	[`BIT_WIDTH-1:0]				r_mut__50;
+reg	[`BIT_WIDTH-1:0]				r_mut__51;
+reg	[`BIT_WIDTH-1:0]				r_mut__52;
+reg	[`BIT_WIDTH-1:0]				r_mut__53;
+reg	[`BIT_WIDTH-1:0]				r_mut__54;
+reg	[`BIT_WIDTH-1:0]				r_mut__55;
+reg	[`BIT_WIDTH-1:0]				r_mut__56;
+reg	[`BIT_WIDTH-1:0]				r_mut__57;
+reg	[`BIT_WIDTH-1:0]				r_mut__58;
+reg	[`BIT_WIDTH-1:0]				r_mut__59;
+
+wire	[2*`BIT_WIDTH-1:0]			sleftz_big;
+wire	[2*`BIT_WIDTH-1:0]			sleftr_big;
+wire	[2*`BIT_WIDTH-1:0]			sr_big;
+wire	[`BIT_WIDTH-1:0]			remainder_div1;
+wire	[2*`BIT_WIDTH-1:0]			quotient_div1;
+
+//ASSIGNMENTS FROM PIPE TO OUTPUT
+assign x_boundaryChecker = r_x__59;
+assign y_boundaryChecker = r_y__59;
+assign z_boundaryChecker = r_z__59;
+assign ux_boundaryChecker = r_ux__59;
+assign uy_boundaryChecker = r_uy__59;
+assign uz_boundaryChecker = r_uz__59;
+assign sz_boundaryChecker = r_sz__59;
+assign sr_boundaryChecker = r_sr__59;
+assign sleftz_boundaryChecker = r_sleftz__59;
+assign sleftr_boundaryChecker = r_sleftr__59;
+assign weight_boundaryChecker = r_weight__59;
+assign layer_boundaryChecker = r_layer__59;
+assign dead_boundaryChecker = r_dead__59;
+assign hit_boundaryChecker = r_hit__59;
+
+// divider
+signed_div_30 divide_u1 (
+	.clock(clock),
+	.denom(c_uz__0),
+	.numer(c_numer__0),
+	.quotient(quotient_div1),
+	.remain(remainder_div1));
+
+// multipliers
+mult_signed_32_bc mult_u1(
+	.clock(clock),
+	.dataa(c_diff__30),
+	.datab(c_mut__30),
+	.result(sleftz_big));
+
+mult_signed_32_bc mult_u2(
+	.clock(clock),
+	.dataa(maxDepth_over_maxRadius),
+	.datab(c_sleftz__31),
+	.result(sleftr_big));
+
+mult_signed_32_bc mult_u3(
+	.clock(clock),
+	.dataa(maxDepth_over_maxRadius),
+	.datab(c_dl_b__30),
+	.result(sr_big));
+
+// multiplexor to find z1 and z0
+always @(c_layer__0 or z1_0 or z0_0 or mut_0 or
+					z1_1 or z0_1 or mut_1 or
+					z1_2 or z0_2 or mut_2 or
+					z1_3 or z0_3 or mut_3 or
+					z1_4 or z0_4 or mut_4 or
+					z1_5 or z0_5 or mut_5)
+begin
+	case(c_layer__0)
+		3'b000:
+		begin
+			c_z1__0 = z1_0;
+			c_z0__0 = z0_0;
+			c_mut__0 = mut_0;
+		end
+		3'b001:
+		begin
+			c_z1__0 = z1_1;
+			c_z0__0 = z0_1;
+			c_mut__0 = mut_1;
+		end
+		3'b010:
+		begin
+			c_z1__0 = z1_2;
+			c_z0__0 = z0_2;
+			c_mut__0 = mut_2;
+		end
+		3'b011:
+		begin
+			c_z1__0 = z1_3;
+			c_z0__0 = z0_3;
+			c_mut__0 = mut_3;
+		end
+		3'b100:
+		begin
+			c_z1__0 = z1_4;
+			c_z0__0 = z0_4;
+			c_mut__0 = mut_4;
+		end
+		3'b101:
+		begin
+			c_z1__0 = z1_5;
+			c_z0__0 = z0_5;
+			c_mut__0 = mut_5;
+		end
+		default:
+		begin
+			c_z1__0 = 0;
+			c_z0__0 = 0;
+			c_mut__0 = 0;
+		end
+	endcase
+end
+
+// May have to change block staments on this one for odin
+// set numerator
+always @(c_uz__0 or c_z1__0 or c_z__0 or c_z0__0)
+begin
+	//c_numer__0 = 63'b0;
+	if(c_uz__0[31] == 1'b0)
+	begin
+		c_numer__0[63:32] = c_z1__0 - c_z__0;
+		c_numer__0[31:0] = 32'b0;
+	end
+	else if(c_uz__0[31] == 1'b1)
+	begin
+		c_numer__0[63:32] = c_z0__0 - c_z__0;
+		c_numer__0[31:0] = 32'b0;
+	end
+	else
+	begin
+		c_numer__0 = 63'b0;
+	end
+end
+
+// initialize uninitialized data in pipeline
+always @(x_mover or y_mover or z_mover or 
+		ux_mover or uy_mover or uz_mover or
+		sz_mover or sr_mover or sleftz_mover or sleftr_mover or
+		weight_mover or layer_mover or dead_mover)
+begin
+	c_x__0 = x_mover;
+	c_y__0 = y_mover;
+	c_z__0 = z_mover;
+	c_ux__0 = ux_mover;
+	c_uy__0 = uy_mover;
+	c_uz__0 = uz_mover;
+	c_sz__0 = sz_mover;
+	c_sr__0 = sr_mover;
+	c_sleftz__0 = sleftz_mover;
+	c_sleftr__0 = sleftr_mover;
+	c_weight__0 = weight_mover;
+	c_layer__0 = layer_mover;
+	c_dead__0 = dead_mover;
+	c_hit__0 = 1'b0;
+	c_diff__0 = 32'b0;
+	c_dl_b__0 = 32'b0;
+end
+
+// Determine new (x,y,z) coordinates
+always @(r_x__0 or r_y__0 or r_z__0 or r_ux__0 or r_uy__0 or r_uz__0 or r_sz__0 or r_sr__0 or r_sleftz__0 or r_sleftr__0 or
+		r_weight__0 or r_layer__0 or r_dead__0 or r_hit__0 or r_diff__0 or r_dl_b__0 or r_numer__0 or r_z1__0 or r_z0__0 or r_mut__0 or
+
+		r_x__1 or r_y__1 or r_z__1 or r_ux__1 or r_uy__1 or r_uz__1 or r_sz__1 or r_sr__1 or r_sleftz__1 or r_sleftr__1 or
+		r_weight__1 or r_layer__1 or r_dead__1 or r_hit__1 or r_diff__1 or r_dl_b__1 or r_numer__1 or r_z1__1 or r_z0__1 or r_mut__1 or
+
+		r_x__2 or r_y__2 or r_z__2 or r_ux__2 or r_uy__2 or r_uz__2 or r_sz__2 or r_sr__2 or r_sleftz__2 or r_sleftr__2 or
+		r_weight__2 or r_layer__2 or r_dead__2 or r_hit__2 or r_diff__2 or r_dl_b__2 or r_numer__2 or r_z1__2 or r_z0__2 or r_mut__2 or
+
+		r_x__3 or r_y__3 or r_z__3 or r_ux__3 or r_uy__3 or r_uz__3 or r_sz__3 or r_sr__3 or r_sleftz__3 or r_sleftr__3 or
+		r_weight__3 or r_layer__3 or r_dead__3 or r_hit__3 or r_diff__3 or r_dl_b__3 or r_numer__3 or r_z1__3 or r_z0__3 or r_mut__3 or
+
+		r_x__4 or r_y__4 or r_z__4 or r_ux__4 or r_uy__4 or r_uz__4 or r_sz__4 or r_sr__4 or r_sleftz__4 or r_sleftr__4 or
+		r_weight__4 or r_layer__4 or r_dead__4 or r_hit__4 or r_diff__4 or r_dl_b__4 or r_numer__4 or r_z1__4 or r_z0__4 or r_mut__4 or
+
+		r_x__5 or r_y__5 or r_z__5 or r_ux__5 or r_uy__5 or r_uz__5 or r_sz__5 or r_sr__5 or r_sleftz__5 or r_sleftr__5 or
+		r_weight__5 or r_layer__5 or r_dead__5 or r_hit__5 or r_diff__5 or r_dl_b__5 or r_numer__5 or r_z1__5 or r_z0__5 or r_mut__5 or
+
+		r_x__6 or r_y__6 or r_z__6 or r_ux__6 or r_uy__6 or r_uz__6 or r_sz__6 or r_sr__6 or r_sleftz__6 or r_sleftr__6 or
+		r_weight__6 or r_layer__6 or r_dead__6 or r_hit__6 or r_diff__6 or r_dl_b__6 or r_numer__6 or r_z1__6 or r_z0__6 or r_mut__6 or
+
+		r_x__7 or r_y__7 or r_z__7 or r_ux__7 or r_uy__7 or r_uz__7 or r_sz__7 or r_sr__7 or r_sleftz__7 or r_sleftr__7 or
+		r_weight__7 or r_layer__7 or r_dead__7 or r_hit__7 or r_diff__7 or r_dl_b__7 or r_numer__7 or r_z1__7 or r_z0__7 or r_mut__7 or
+
+		r_x__8 or r_y__8 or r_z__8 or r_ux__8 or r_uy__8 or r_uz__8 or r_sz__8 or r_sr__8 or r_sleftz__8 or r_sleftr__8 or
+		r_weight__8 or r_layer__8 or r_dead__8 or r_hit__8 or r_diff__8 or r_dl_b__8 or r_numer__8 or r_z1__8 or r_z0__8 or r_mut__8 or
+
+		r_x__9 or r_y__9 or r_z__9 or r_ux__9 or r_uy__9 or r_uz__9 or r_sz__9 or r_sr__9 or r_sleftz__9 or r_sleftr__9 or
+		r_weight__9 or r_layer__9 or r_dead__9 or r_hit__9 or r_diff__9 or r_dl_b__9 or r_numer__9 or r_z1__9 or r_z0__9 or r_mut__9 or
+
+		r_x__10 or r_y__10 or r_z__10 or r_ux__10 or r_uy__10 or r_uz__10 or r_sz__10 or r_sr__10 or r_sleftz__10 or r_sleftr__10 or
+		r_weight__10 or r_layer__10 or r_dead__10 or r_hit__10 or r_diff__10 or r_dl_b__10 or r_numer__10 or r_z1__10 or r_z0__10 or r_mut__10 or
+
+		r_x__11 or r_y__11 or r_z__11 or r_ux__11 or r_uy__11 or r_uz__11 or r_sz__11 or r_sr__11 or r_sleftz__11 or r_sleftr__11 or
+		r_weight__11 or r_layer__11 or r_dead__11 or r_hit__11 or r_diff__11 or r_dl_b__11 or r_numer__11 or r_z1__11 or r_z0__11 or r_mut__11 or
+
+		r_x__12 or r_y__12 or r_z__12 or r_ux__12 or r_uy__12 or r_uz__12 or r_sz__12 or r_sr__12 or r_sleftz__12 or r_sleftr__12 or
+		r_weight__12 or r_layer__12 or r_dead__12 or r_hit__12 or r_diff__12 or r_dl_b__12 or r_numer__12 or r_z1__12 or r_z0__12 or r_mut__12 or
+
+		r_x__13 or r_y__13 or r_z__13 or r_ux__13 or r_uy__13 or r_uz__13 or r_sz__13 or r_sr__13 or r_sleftz__13 or r_sleftr__13 or
+		r_weight__13 or r_layer__13 or r_dead__13 or r_hit__13 or r_diff__13 or r_dl_b__13 or r_numer__13 or r_z1__13 or r_z0__13 or r_mut__13 or
+
+		r_x__14 or r_y__14 or r_z__14 or r_ux__14 or r_uy__14 or r_uz__14 or r_sz__14 or r_sr__14 or r_sleftz__14 or r_sleftr__14 or
+		r_weight__14 or r_layer__14 or r_dead__14 or r_hit__14 or r_diff__14 or r_dl_b__14 or r_numer__14 or r_z1__14 or r_z0__14 or r_mut__14 or
+
+		r_x__15 or r_y__15 or r_z__15 or r_ux__15 or r_uy__15 or r_uz__15 or r_sz__15 or r_sr__15 or r_sleftz__15 or r_sleftr__15 or
+		r_weight__15 or r_layer__15 or r_dead__15 or r_hit__15 or r_diff__15 or r_dl_b__15 or r_numer__15 or r_z1__15 or r_z0__15 or r_mut__15 or
+
+		r_x__16 or r_y__16 or r_z__16 or r_ux__16 or r_uy__16 or r_uz__16 or r_sz__16 or r_sr__16 or r_sleftz__16 or r_sleftr__16 or
+		r_weight__16 or r_layer__16 or r_dead__16 or r_hit__16 or r_diff__16 or r_dl_b__16 or r_numer__16 or r_z1__16 or r_z0__16 or r_mut__16 or
+
+		r_x__17 or r_y__17 or r_z__17 or r_ux__17 or r_uy__17 or r_uz__17 or r_sz__17 or r_sr__17 or r_sleftz__17 or r_sleftr__17 or
+		r_weight__17 or r_layer__17 or r_dead__17 or r_hit__17 or r_diff__17 or r_dl_b__17 or r_numer__17 or r_z1__17 or r_z0__17 or r_mut__17 or
+
+		r_x__18 or r_y__18 or r_z__18 or r_ux__18 or r_uy__18 or r_uz__18 or r_sz__18 or r_sr__18 or r_sleftz__18 or r_sleftr__18 or
+		r_weight__18 or r_layer__18 or r_dead__18 or r_hit__18 or r_diff__18 or r_dl_b__18 or r_numer__18 or r_z1__18 or r_z0__18 or r_mut__18 or
+
+		r_x__19 or r_y__19 or r_z__19 or r_ux__19 or r_uy__19 or r_uz__19 or r_sz__19 or r_sr__19 or r_sleftz__19 or r_sleftr__19 or
+		r_weight__19 or r_layer__19 or r_dead__19 or r_hit__19 or r_diff__19 or r_dl_b__19 or r_numer__19 or r_z1__19 or r_z0__19 or r_mut__19 or
+
+		r_x__20 or r_y__20 or r_z__20 or r_ux__20 or r_uy__20 or r_uz__20 or r_sz__20 or r_sr__20 or r_sleftz__20 or r_sleftr__20 or
+		r_weight__20 or r_layer__20 or r_dead__20 or r_hit__20 or r_diff__20 or r_dl_b__20 or r_numer__20 or r_z1__20 or r_z0__20 or r_mut__20 or
+
+		r_x__21 or r_y__21 or r_z__21 or r_ux__21 or r_uy__21 or r_uz__21 or r_sz__21 or r_sr__21 or r_sleftz__21 or r_sleftr__21 or
+		r_weight__21 or r_layer__21 or r_dead__21 or r_hit__21 or r_diff__21 or r_dl_b__21 or r_numer__21 or r_z1__21 or r_z0__21 or r_mut__21 or
+
+		r_x__22 or r_y__22 or r_z__22 or r_ux__22 or r_uy__22 or r_uz__22 or r_sz__22 or r_sr__22 or r_sleftz__22 or r_sleftr__22 or
+		r_weight__22 or r_layer__22 or r_dead__22 or r_hit__22 or r_diff__22 or r_dl_b__22 or r_numer__22 or r_z1__22 or r_z0__22 or r_mut__22 or
+
+		r_x__23 or r_y__23 or r_z__23 or r_ux__23 or r_uy__23 or r_uz__23 or r_sz__23 or r_sr__23 or r_sleftz__23 or r_sleftr__23 or
+		r_weight__23 or r_layer__23 or r_dead__23 or r_hit__23 or r_diff__23 or r_dl_b__23 or r_numer__23 or r_z1__23 or r_z0__23 or r_mut__23 or
+
+		r_x__24 or r_y__24 or r_z__24 or r_ux__24 or r_uy__24 or r_uz__24 or r_sz__24 or r_sr__24 or r_sleftz__24 or r_sleftr__24 or
+		r_weight__24 or r_layer__24 or r_dead__24 or r_hit__24 or r_diff__24 or r_dl_b__24 or r_numer__24 or r_z1__24 or r_z0__24 or r_mut__24 or
+
+		r_x__25 or r_y__25 or r_z__25 or r_ux__25 or r_uy__25 or r_uz__25 or r_sz__25 or r_sr__25 or r_sleftz__25 or r_sleftr__25 or
+		r_weight__25 or r_layer__25 or r_dead__25 or r_hit__25 or r_diff__25 or r_dl_b__25 or r_numer__25 or r_z1__25 or r_z0__25 or r_mut__25 or
+
+		r_x__26 or r_y__26 or r_z__26 or r_ux__26 or r_uy__26 or r_uz__26 or r_sz__26 or r_sr__26 or r_sleftz__26 or r_sleftr__26 or
+		r_weight__26 or r_layer__26 or r_dead__26 or r_hit__26 or r_diff__26 or r_dl_b__26 or r_numer__26 or r_z1__26 or r_z0__26 or r_mut__26 or
+
+		r_x__27 or r_y__27 or r_z__27 or r_ux__27 or r_uy__27 or r_uz__27 or r_sz__27 or r_sr__27 or r_sleftz__27 or r_sleftr__27 or
+		r_weight__27 or r_layer__27 or r_dead__27 or r_hit__27 or r_diff__27 or r_dl_b__27 or r_numer__27 or r_z1__27 or r_z0__27 or r_mut__27 or
+
+		r_x__28 or r_y__28 or r_z__28 or r_ux__28 or r_uy__28 or r_uz__28 or r_sz__28 or r_sr__28 or r_sleftz__28 or r_sleftr__28 or
+		r_weight__28 or r_layer__28 or r_dead__28 or r_hit__28 or r_diff__28 or r_dl_b__28 or r_numer__28 or r_z1__28 or r_z0__28 or r_mut__28 or
+
+		r_x__29 or r_y__29 or r_z__29 or r_ux__29 or r_uy__29 or r_uz__29 or r_sz__29 or r_sr__29 or r_sleftz__29 or r_sleftr__29 or
+		r_weight__29 or r_layer__29 or r_dead__29 or r_hit__29 or r_diff__29 or r_dl_b__29 or r_numer__29 or r_z1__29 or r_z0__29 or r_mut__29 or
+
+		r_x__30 or r_y__30 or r_z__30 or r_ux__30 or r_uy__30 or r_uz__30 or r_sz__30 or r_sr__30 or r_sleftz__30 or r_sleftr__30 or
+		r_weight__30 or r_layer__30 or r_dead__30 or r_hit__30 or r_diff__30 or r_dl_b__30 or r_numer__30 or r_z1__30 or r_z0__30 or r_mut__30 or
+
+		r_x__31 or r_y__31 or r_z__31 or r_ux__31 or r_uy__31 or r_uz__31 or r_sz__31 or r_sr__31 or r_sleftz__31 or r_sleftr__31 or
+		r_weight__31 or r_layer__31 or r_dead__31 or r_hit__31 or r_diff__31 or r_dl_b__31 or r_numer__31 or r_z1__31 or r_z0__31 or r_mut__31 or
+
+		r_x__32 or r_y__32 or r_z__32 or r_ux__32 or r_uy__32 or r_uz__32 or r_sz__32 or r_sr__32 or r_sleftz__32 or r_sleftr__32 or
+		r_weight__32 or r_layer__32 or r_dead__32 or r_hit__32 or r_diff__32 or r_dl_b__32 or r_numer__32 or r_z1__32 or r_z0__32 or r_mut__32 or
+
+		r_x__33 or r_y__33 or r_z__33 or r_ux__33 or r_uy__33 or r_uz__33 or r_sz__33 or r_sr__33 or r_sleftz__33 or r_sleftr__33 or
+		r_weight__33 or r_layer__33 or r_dead__33 or r_hit__33 or r_diff__33 or r_dl_b__33 or r_numer__33 or r_z1__33 or r_z0__33 or r_mut__33 or
+
+		r_x__34 or r_y__34 or r_z__34 or r_ux__34 or r_uy__34 or r_uz__34 or r_sz__34 or r_sr__34 or r_sleftz__34 or r_sleftr__34 or
+		r_weight__34 or r_layer__34 or r_dead__34 or r_hit__34 or r_diff__34 or r_dl_b__34 or r_numer__34 or r_z1__34 or r_z0__34 or r_mut__34 or
+
+		r_x__35 or r_y__35 or r_z__35 or r_ux__35 or r_uy__35 or r_uz__35 or r_sz__35 or r_sr__35 or r_sleftz__35 or r_sleftr__35 or
+		r_weight__35 or r_layer__35 or r_dead__35 or r_hit__35 or r_diff__35 or r_dl_b__35 or r_numer__35 or r_z1__35 or r_z0__35 or r_mut__35 or
+
+		r_x__36 or r_y__36 or r_z__36 or r_ux__36 or r_uy__36 or r_uz__36 or r_sz__36 or r_sr__36 or r_sleftz__36 or r_sleftr__36 or
+		r_weight__36 or r_layer__36 or r_dead__36 or r_hit__36 or r_diff__36 or r_dl_b__36 or r_numer__36 or r_z1__36 or r_z0__36 or r_mut__36 or
+
+		r_x__37 or r_y__37 or r_z__37 or r_ux__37 or r_uy__37 or r_uz__37 or r_sz__37 or r_sr__37 or r_sleftz__37 or r_sleftr__37 or
+		r_weight__37 or r_layer__37 or r_dead__37 or r_hit__37 or r_diff__37 or r_dl_b__37 or r_numer__37 or r_z1__37 or r_z0__37 or r_mut__37 or
+
+		r_x__38 or r_y__38 or r_z__38 or r_ux__38 or r_uy__38 or r_uz__38 or r_sz__38 or r_sr__38 or r_sleftz__38 or r_sleftr__38 or
+		r_weight__38 or r_layer__38 or r_dead__38 or r_hit__38 or r_diff__38 or r_dl_b__38 or r_numer__38 or r_z1__38 or r_z0__38 or r_mut__38 or
+
+		r_x__39 or r_y__39 or r_z__39 or r_ux__39 or r_uy__39 or r_uz__39 or r_sz__39 or r_sr__39 or r_sleftz__39 or r_sleftr__39 or
+		r_weight__39 or r_layer__39 or r_dead__39 or r_hit__39 or r_diff__39 or r_dl_b__39 or r_numer__39 or r_z1__39 or r_z0__39 or r_mut__39 or
+
+		r_x__40 or r_y__40 or r_z__40 or r_ux__40 or r_uy__40 or r_uz__40 or r_sz__40 or r_sr__40 or r_sleftz__40 or r_sleftr__40 or
+		r_weight__40 or r_layer__40 or r_dead__40 or r_hit__40 or r_diff__40 or r_dl_b__40 or r_numer__40 or r_z1__40 or r_z0__40 or r_mut__40 or
+
+		r_x__41 or r_y__41 or r_z__41 or r_ux__41 or r_uy__41 or r_uz__41 or r_sz__41 or r_sr__41 or r_sleftz__41 or r_sleftr__41 or
+		r_weight__41 or r_layer__41 or r_dead__41 or r_hit__41 or r_diff__41 or r_dl_b__41 or r_numer__41 or r_z1__41 or r_z0__41 or r_mut__41 or
+
+		r_x__42 or r_y__42 or r_z__42 or r_ux__42 or r_uy__42 or r_uz__42 or r_sz__42 or r_sr__42 or r_sleftz__42 or r_sleftr__42 or
+		r_weight__42 or r_layer__42 or r_dead__42 or r_hit__42 or r_diff__42 or r_dl_b__42 or r_numer__42 or r_z1__42 or r_z0__42 or r_mut__42 or
+
+		r_x__43 or r_y__43 or r_z__43 or r_ux__43 or r_uy__43 or r_uz__43 or r_sz__43 or r_sr__43 or r_sleftz__43 or r_sleftr__43 or
+		r_weight__43 or r_layer__43 or r_dead__43 or r_hit__43 or r_diff__43 or r_dl_b__43 or r_numer__43 or r_z1__43 or r_z0__43 or r_mut__43 or
+
+		r_x__44 or r_y__44 or r_z__44 or r_ux__44 or r_uy__44 or r_uz__44 or r_sz__44 or r_sr__44 or r_sleftz__44 or r_sleftr__44 or
+		r_weight__44 or r_layer__44 or r_dead__44 or r_hit__44 or r_diff__44 or r_dl_b__44 or r_numer__44 or r_z1__44 or r_z0__44 or r_mut__44 or
+
+		r_x__45 or r_y__45 or r_z__45 or r_ux__45 or r_uy__45 or r_uz__45 or r_sz__45 or r_sr__45 or r_sleftz__45 or r_sleftr__45 or
+		r_weight__45 or r_layer__45 or r_dead__45 or r_hit__45 or r_diff__45 or r_dl_b__45 or r_numer__45 or r_z1__45 or r_z0__45 or r_mut__45 or
+
+		r_x__46 or r_y__46 or r_z__46 or r_ux__46 or r_uy__46 or r_uz__46 or r_sz__46 or r_sr__46 or r_sleftz__46 or r_sleftr__46 or
+		r_weight__46 or r_layer__46 or r_dead__46 or r_hit__46 or r_diff__46 or r_dl_b__46 or r_numer__46 or r_z1__46 or r_z0__46 or r_mut__46 or
+
+		r_x__47 or r_y__47 or r_z__47 or r_ux__47 or r_uy__47 or r_uz__47 or r_sz__47 or r_sr__47 or r_sleftz__47 or r_sleftr__47 or
+		r_weight__47 or r_layer__47 or r_dead__47 or r_hit__47 or r_diff__47 or r_dl_b__47 or r_numer__47 or r_z1__47 or r_z0__47 or r_mut__47 or
+
+		r_x__48 or r_y__48 or r_z__48 or r_ux__48 or r_uy__48 or r_uz__48 or r_sz__48 or r_sr__48 or r_sleftz__48 or r_sleftr__48 or
+		r_weight__48 or r_layer__48 or r_dead__48 or r_hit__48 or r_diff__48 or r_dl_b__48 or r_numer__48 or r_z1__48 or r_z0__48 or r_mut__48 or
+
+		r_x__49 or r_y__49 or r_z__49 or r_ux__49 or r_uy__49 or r_uz__49 or r_sz__49 or r_sr__49 or r_sleftz__49 or r_sleftr__49 or
+		r_weight__49 or r_layer__49 or r_dead__49 or r_hit__49 or r_diff__49 or r_dl_b__49 or r_numer__49 or r_z1__49 or r_z0__49 or r_mut__49 or
+
+		r_x__50 or r_y__50 or r_z__50 or r_ux__50 or r_uy__50 or r_uz__50 or r_sz__50 or r_sr__50 or r_sleftz__50 or r_sleftr__50 or
+		r_weight__50 or r_layer__50 or r_dead__50 or r_hit__50 or r_diff__50 or r_dl_b__50 or r_numer__50 or r_z1__50 or r_z0__50 or r_mut__50 or
+
+		r_x__51 or r_y__51 or r_z__51 or r_ux__51 or r_uy__51 or r_uz__51 or r_sz__51 or r_sr__51 or r_sleftz__51 or r_sleftr__51 or
+		r_weight__51 or r_layer__51 or r_dead__51 or r_hit__51 or r_diff__51 or r_dl_b__51 or r_numer__51 or r_z1__51 or r_z0__51 or r_mut__51 or
+
+		r_x__52 or r_y__52 or r_z__52 or r_ux__52 or r_uy__52 or r_uz__52 or r_sz__52 or r_sr__52 or r_sleftz__52 or r_sleftr__52 or
+		r_weight__52 or r_layer__52 or r_dead__52 or r_hit__52 or r_diff__52 or r_dl_b__52 or r_numer__52 or r_z1__52 or r_z0__52 or r_mut__52 or
+
+		r_x__53 or r_y__53 or r_z__53 or r_ux__53 or r_uy__53 or r_uz__53 or r_sz__53 or r_sr__53 or r_sleftz__53 or r_sleftr__53 or
+		r_weight__53 or r_layer__53 or r_dead__53 or r_hit__53 or r_diff__53 or r_dl_b__53 or r_numer__53 or r_z1__53 or r_z0__53 or r_mut__53 or
+
+		r_x__54 or r_y__54 or r_z__54 or r_ux__54 or r_uy__54 or r_uz__54 or r_sz__54 or r_sr__54 or r_sleftz__54 or r_sleftr__54 or
+		r_weight__54 or r_layer__54 or r_dead__54 or r_hit__54 or r_diff__54 or r_dl_b__54 or r_numer__54 or r_z1__54 or r_z0__54 or r_mut__54 or
+
+		r_x__55 or r_y__55 or r_z__55 or r_ux__55 or r_uy__55 or r_uz__55 or r_sz__55 or r_sr__55 or r_sleftz__55 or r_sleftr__55 or
+		r_weight__55 or r_layer__55 or r_dead__55 or r_hit__55 or r_diff__55 or r_dl_b__55 or r_numer__55 or r_z1__55 or r_z0__55 or r_mut__55 or
+
+		r_x__56 or r_y__56 or r_z__56 or r_ux__56 or r_uy__56 or r_uz__56 or r_sz__56 or r_sr__56 or r_sleftz__56 or r_sleftr__56 or
+		r_weight__56 or r_layer__56 or r_dead__56 or r_hit__56 or r_diff__56 or r_dl_b__56 or r_numer__56 or r_z1__56 or r_z0__56 or r_mut__56 or
+
+		r_x__57 or r_y__57 or r_z__57 or r_ux__57 or r_uy__57 or r_uz__57 or r_sz__57 or r_sr__57 or r_sleftz__57 or r_sleftr__57 or
+		r_weight__57 or r_layer__57 or r_dead__57 or r_hit__57 or r_diff__57 or r_dl_b__57 or r_numer__57 or r_z1__57 or r_z0__57 or r_mut__57 or
+
+		r_x__58 or r_y__58 or r_z__58 or r_ux__58 or r_uy__58 or r_uz__58 or r_sz__58 or r_sr__58 or r_sleftz__58 or r_sleftr__58 or
+		r_weight__58 or r_layer__58 or r_dead__58 or r_hit__58 or r_diff__58 or r_dl_b__58 or r_numer__58 or r_z1__58 or r_z0__58 or r_mut__58 or
+
+		r_x__59 or r_y__59 or r_z__59 or r_ux__59 or r_uy__59 or r_uz__59 or r_sz__59 or r_sr__59 or r_sleftz__59 or r_sleftr__59 or
+		r_weight__59 or r_layer__59 or r_dead__59 or r_hit__59 or r_diff__59 or r_dl_b__59 or r_numer__59 or r_z1__59 or r_z0__59 or r_mut__59 or 
+		
+		sr_big or sleftz_big or sleftr_big or quotient_div1)
+
+	// default
+	// setup standard pipeline
+//	for(i = 1; i < `TOTAL_LATENCY; i = i + 1)
+//	begin
+//		c_x[i]	= r_x[i-1];
+//		c_y[i]	= r_y[i-1];
+//		c_z[i]	= r_z[i-1];
+//		c_ux[i]	= r_ux[i-1];
+//		c_uy[i]	= r_uy[i-1];
+//		c_uz[i]	= r_uz[i-1];
+//		c_sz[i]	= r_sz[i-1];
+//		c_sr[i]	= r_sr[i-1];
+//		c_sleftz[i]	= r_sleftz[i-1];
+//		c_sleftr[i]	= r_sleftr[i-1];
+//		c_weight[i]	= r_weight[i-1];
+//		c_layer[i]	= r_layer[i-1];
+//		c_dead[i]	= r_dead[i-1];
+//		c_hit[i]	= r_hit[i-1];
+//		c_diff[i] = r_diff[i-1];
+//		c_dl_b[i] = r_dl_b[i-1];
+//		c_numer[i] = r_numer[i-1];
+//		c_z1[i] = r_z1[i-1];
+//		c_z0[i] = r_z0[i-1];
+//		c_mut[i] = r_mut[i-1];
+//	end
+
+begin
+	//Instatiate all 60 instances of the above for-loop
+	//for 1
+		c_x__1	= r_x__0;
+		c_y__1	= r_y__0;
+		c_z__1	= r_z__0;
+		c_ux__1	= r_ux__0;
+		c_uy__1	= r_uy__0;
+		c_uz__1	= r_uz__0;
+		c_sz__1	= r_sz__0;
+		c_sr__1	= r_sr__0;
+		c_sleftz__1	= r_sleftz__0;
+		c_sleftr__1	= r_sleftr__0;
+		c_weight__1	= r_weight__0;
+		c_layer__1	= r_layer__0;
+		c_dead__1	= r_dead__0;
+		c_hit__1	= r_hit__0;
+		c_diff__1 = r_diff__0;
+		c_dl_b__1 = r_dl_b__0;
+		c_numer__1 = r_numer__0;
+		c_z1__1 = r_z1__0;
+		c_z0__1 = r_z0__0;
+		c_mut__1 = r_mut__0;
+		
+		//for 2
+		c_x__2	= r_x__1;
+		c_y__2	= r_y__1;
+		c_z__2	= r_z__1;
+		c_ux__2	= r_ux__1;
+		c_uy__2	= r_uy__1;
+		c_uz__2	= r_uz__1;
+		c_sz__2	= r_sz__1;
+		c_sr__2	= r_sr__1;
+		c_sleftz__2	= r_sleftz__1;
+		c_sleftr__2	= r_sleftr__1;
+		c_weight__2	= r_weight__1;
+		c_layer__2	= r_layer__1;
+		c_dead__2	= r_dead__1;
+		c_hit__2	= r_hit__1;
+		c_diff__2 = r_diff__1;
+		c_dl_b__2 = r_dl_b__1;
+		c_numer__2 = r_numer__1;
+		c_z1__2 = r_z1__1;
+		c_z0__2 = r_z0__1;
+		c_mut__2 = r_mut__1;
+	
+		//for 3
+		c_x__3	= r_x__2;
+		c_y__3	= r_y__2;
+		c_z__3	= r_z__2;
+		c_ux__3	= r_ux__2;
+		c_uy__3	= r_uy__2;
+		c_uz__3	= r_uz__2;
+		c_sz__3	= r_sz__2;
+		c_sr__3	= r_sr__2;
+		c_sleftz__3	= r_sleftz__2;
+		c_sleftr__3	= r_sleftr__2;
+		c_weight__3	= r_weight__2;
+		c_layer__3	= r_layer__2;
+		c_dead__3	= r_dead__2;
+		c_hit__3	= r_hit__2;
+		c_diff__3 = r_diff__2;
+		c_dl_b__3 = r_dl_b__2;
+		c_numer__3 = r_numer__2;
+		c_z1__3 = r_z1__2;
+		c_z0__3 = r_z0__2;
+		c_mut__3 = r_mut__2;
+		
+		//for 4
+		c_x__4	= r_x__3;
+		c_y__4	= r_y__3;
+		c_z__4	= r_z__3;
+		c_ux__4	= r_ux__3;
+		c_uy__4	= r_uy__3;
+		c_uz__4	= r_uz__3;
+		c_sz__4	= r_sz__3;
+		c_sr__4	= r_sr__3;
+		c_sleftz__4	= r_sleftz__3;
+		c_sleftr__4	= r_sleftr__3;
+		c_weight__4	= r_weight__3;
+		c_layer__4	= r_layer__3;
+		c_dead__4	= r_dead__3;
+		c_hit__4	= r_hit__3;
+		c_diff__4 = r_diff__3;
+		c_dl_b__4 = r_dl_b__3;
+		c_numer__4 = r_numer__3;
+		c_z1__4 = r_z1__3;
+		c_z0__4 = r_z0__3;
+		c_mut__4 = r_mut__3;
+		
+		//for 5
+		c_x__5	= r_x__4;
+		c_y__5	= r_y__4;
+		c_z__5	= r_z__4;
+		c_ux__5	= r_ux__4;
+		c_uy__5	= r_uy__4;
+		c_uz__5	= r_uz__4;
+		c_sz__5	= r_sz__4;
+		c_sr__5	= r_sr__4;
+		c_sleftz__5	= r_sleftz__4;
+		c_sleftr__5	= r_sleftr__4;
+		c_weight__5	= r_weight__4;
+		c_layer__5	= r_layer__4;
+		c_dead__5	= r_dead__4;
+		c_hit__5	= r_hit__4;
+		c_diff__5 = r_diff__4;
+		c_dl_b__5 = r_dl_b__4;
+		c_numer__5 = r_numer__4;
+		c_z1__5 = r_z1__4;
+		c_z0__5 = r_z0__4;
+		c_mut__5 = r_mut__4;
+		
+		//for 6
+		c_x__6	= r_x__5;
+		c_y__6	= r_y__5;
+		c_z__6	= r_z__5;
+		c_ux__6	= r_ux__5;
+		c_uy__6	= r_uy__5;
+		c_uz__6	= r_uz__5;
+		c_sz__6	= r_sz__5;
+		c_sr__6	= r_sr__5;
+		c_sleftz__6	= r_sleftz__5;
+		c_sleftr__6	= r_sleftr__5;
+		c_weight__6	= r_weight__5;
+		c_layer__6	= r_layer__5;
+		c_dead__6	= r_dead__5;
+		c_hit__6	= r_hit__5;
+		c_diff__6 = r_diff__5;
+		c_dl_b__6 = r_dl_b__5;
+		c_numer__6 = r_numer__5;
+		c_z1__6 = r_z1__5;
+		c_z0__6 = r_z0__5;
+		c_mut__6 = r_mut__5;
+		
+		//for 7
+		c_x__7	= r_x__6;
+		c_y__7	= r_y__6;
+		c_z__7	= r_z__6;
+		c_ux__7	= r_ux__6;
+		c_uy__7	= r_uy__6;
+		c_uz__7	= r_uz__6;
+		c_sz__7	= r_sz__6;
+		c_sr__7	= r_sr__6;
+		c_sleftz__7	= r_sleftz__6;
+		c_sleftr__7	= r_sleftr__6;
+		c_weight__7	= r_weight__6;
+		c_layer__7	= r_layer__6;
+		c_dead__7	= r_dead__6;
+		c_hit__7	= r_hit__6;
+		c_diff__7 = r_diff__6;
+		c_dl_b__7 = r_dl_b__6;
+		c_numer__7 = r_numer__6;
+		c_z1__7 = r_z1__6;
+		c_z0__7 = r_z0__6;
+		c_mut__7 = r_mut__6;
+		
+		//for 8
+		c_x__8	= r_x__7;
+		c_y__8	= r_y__7;
+		c_z__8	= r_z__7;
+		c_ux__8	= r_ux__7;
+		c_uy__8	= r_uy__7;
+		c_uz__8	= r_uz__7;
+		c_sz__8	= r_sz__7;
+		c_sr__8	= r_sr__7;
+		c_sleftz__8	= r_sleftz__7;
+		c_sleftr__8	= r_sleftr__7;
+		c_weight__8	= r_weight__7;
+		c_layer__8	= r_layer__7;
+		c_dead__8	= r_dead__7;
+		c_hit__8	= r_hit__7;
+		c_diff__8 = r_diff__7;
+		c_dl_b__8 = r_dl_b__7;
+		c_numer__8 = r_numer__7;
+		c_z1__8 = r_z1__7;
+		c_z0__8 = r_z0__7;
+		c_mut__8 = r_mut__7;
+		
+		//for 9
+		c_x__9	= r_x__8;
+		c_y__9	= r_y__8;
+		c_z__9	= r_z__8;
+		c_ux__9	= r_ux__8;
+		c_uy__9	= r_uy__8;
+		c_uz__9	= r_uz__8;
+		c_sz__9	= r_sz__8;
+		c_sr__9	= r_sr__8;
+		c_sleftz__9	= r_sleftz__8;
+		c_sleftr__9	= r_sleftr__8;
+		c_weight__9	= r_weight__8;
+		c_layer__9	= r_layer__8;
+		c_dead__9	= r_dead__8;
+		c_hit__9	= r_hit__8;
+		c_diff__9 = r_diff__8;
+		c_dl_b__9 = r_dl_b__8;
+		c_numer__9 = r_numer__8;
+		c_z1__9 = r_z1__8;
+		c_z0__9 = r_z0__8;
+		c_mut__9 = r_mut__8;
+		
+		//for 10
+		c_x__10	= r_x__9;
+		c_y__10	= r_y__9;
+		c_z__10	= r_z__9;
+		c_ux__10	= r_ux__9;
+		c_uy__10	= r_uy__9;
+		c_uz__10	= r_uz__9;
+		c_sz__10	= r_sz__9;
+		c_sr__10	= r_sr__9;
+		c_sleftz__10	= r_sleftz__9;
+		c_sleftr__10	= r_sleftr__9;
+		c_weight__10	= r_weight__9;
+		c_layer__10	= r_layer__9;
+		c_dead__10	= r_dead__9;
+		c_hit__10	= r_hit__9;
+		c_diff__10 = r_diff__9;
+		c_dl_b__10 = r_dl_b__9;
+		c_numer__10 = r_numer__9;
+		c_z1__10 = r_z1__9;
+		c_z0__10 = r_z0__9;
+		c_mut__10 = r_mut__9;
+		
+		//for 11
+		c_x__11	= r_x__10;
+		c_y__11	= r_y__10;
+		c_z__11	= r_z__10;
+		c_ux__11	= r_ux__10;
+		c_uy__11	= r_uy__10;
+		c_uz__11	= r_uz__10;
+		c_sz__11	= r_sz__10;
+		c_sr__11	= r_sr__10;
+		c_sleftz__11	= r_sleftz__10;
+		c_sleftr__11	= r_sleftr__10;
+		c_weight__11	= r_weight__10;
+		c_layer__11	= r_layer__10;
+		c_dead__11	= r_dead__10;
+		c_hit__11	= r_hit__10;
+		c_diff__11 = r_diff__10;
+		c_dl_b__11 = r_dl_b__10;
+		c_numer__11 = r_numer__10;
+		c_z1__11 = r_z1__10;
+		c_z0__11 = r_z0__10;
+		c_mut__11 = r_mut__10;
+		
+		//for 12
+		c_x__12	= r_x__11;
+		c_y__12	= r_y__11;
+		c_z__12	= r_z__11;
+		c_ux__12	= r_ux__11;
+		c_uy__12	= r_uy__11;
+		c_uz__12	= r_uz__11;
+		c_sz__12	= r_sz__11;
+		c_sr__12	= r_sr__11;
+		c_sleftz__12	= r_sleftz__11;
+		c_sleftr__12	= r_sleftr__11;
+		c_weight__12	= r_weight__11;
+		c_layer__12	= r_layer__11;
+		c_dead__12	= r_dead__11;
+		c_hit__12	= r_hit__11;
+		c_diff__12 = r_diff__11;
+		c_dl_b__12 = r_dl_b__11;
+		c_numer__12 = r_numer__11;
+		c_z1__12 = r_z1__11;
+		c_z0__12 = r_z0__11;
+		c_mut__12 = r_mut__11;
+		
+		//for 13
+		c_x__13	= r_x__12;
+		c_y__13	= r_y__12;
+		c_z__13	= r_z__12;
+		c_ux__13	= r_ux__12;
+		c_uy__13	= r_uy__12;
+		c_uz__13	= r_uz__12;
+		c_sz__13	= r_sz__12;
+		c_sr__13	= r_sr__12;
+		c_sleftz__13	= r_sleftz__12;
+		c_sleftr__13	= r_sleftr__12;
+		c_weight__13	= r_weight__12;
+		c_layer__13	= r_layer__12;
+		c_dead__13	= r_dead__12;
+		c_hit__13	= r_hit__12;
+		c_diff__13 = r_diff__12;
+		c_dl_b__13 = r_dl_b__12;
+		c_numer__13 = r_numer__12;
+		c_z1__13 = r_z1__12;
+		c_z0__13 = r_z0__12;
+		c_mut__13 = r_mut__12;
+		
+		//for 14
+		c_x__14	= r_x__13;
+		c_y__14	= r_y__13;
+		c_z__14	= r_z__13;
+		c_ux__14	= r_ux__13;
+		c_uy__14	= r_uy__13;
+		c_uz__14	= r_uz__13;
+		c_sz__14	= r_sz__13;
+		c_sr__14	= r_sr__13;
+		c_sleftz__14	= r_sleftz__13;
+		c_sleftr__14	= r_sleftr__13;
+		c_weight__14	= r_weight__13;
+		c_layer__14	= r_layer__13;
+		c_dead__14	= r_dead__13;
+		c_hit__14	= r_hit__13;
+		c_diff__14 = r_diff__13;
+		c_dl_b__14 = r_dl_b__13;
+		c_numer__14 = r_numer__13;
+		c_z1__14 = r_z1__13;
+		c_z0__14 = r_z0__13;
+		c_mut__14 = r_mut__13;
+		
+		//for 15
+		c_x__15	= r_x__14;
+		c_y__15	= r_y__14;
+		c_z__15	= r_z__14;
+		c_ux__15	= r_ux__14;
+		c_uy__15	= r_uy__14;
+		c_uz__15	= r_uz__14;
+		c_sz__15	= r_sz__14;
+		c_sr__15	= r_sr__14;
+		c_sleftz__15	= r_sleftz__14;
+		c_sleftr__15	= r_sleftr__14;
+		c_weight__15	= r_weight__14;
+		c_layer__15	= r_layer__14;
+		c_dead__15	= r_dead__14;
+		c_hit__15	= r_hit__14;
+		c_diff__15 = r_diff__14;
+		c_dl_b__15 = r_dl_b__14;
+		c_numer__15 = r_numer__14;
+		c_z1__15 = r_z1__14;
+		c_z0__15 = r_z0__14;
+		c_mut__15 = r_mut__14;
+		
+		//for 16
+		c_x__16	= r_x__15;
+		c_y__16	= r_y__15;
+		c_z__16	= r_z__15;
+		c_ux__16	= r_ux__15;
+		c_uy__16	= r_uy__15;
+		c_uz__16	= r_uz__15;
+		c_sz__16	= r_sz__15;
+		c_sr__16	= r_sr__15;
+		c_sleftz__16	= r_sleftz__15;
+		c_sleftr__16	= r_sleftr__15;
+		c_weight__16	= r_weight__15;
+		c_layer__16	= r_layer__15;
+		c_dead__16	= r_dead__15;
+		c_hit__16	= r_hit__15;
+		c_diff__16 = r_diff__15;
+		c_dl_b__16 = r_dl_b__15;
+		c_numer__16 = r_numer__15;
+		c_z1__16 = r_z1__15;
+		c_z0__16 = r_z0__15;
+		c_mut__16 = r_mut__15;
+		
+		//for 17
+		c_x__17	= r_x__16;
+		c_y__17	= r_y__16;
+		c_z__17	= r_z__16;
+		c_ux__17	= r_ux__16;
+		c_uy__17	= r_uy__16;
+		c_uz__17	= r_uz__16;
+		c_sz__17	= r_sz__16;
+		c_sr__17	= r_sr__16;
+		c_sleftz__17	= r_sleftz__16;
+		c_sleftr__17	= r_sleftr__16;
+		c_weight__17	= r_weight__16;
+		c_layer__17	= r_layer__16;
+		c_dead__17	= r_dead__16;
+		c_hit__17	= r_hit__16;
+		c_diff__17 = r_diff__16;
+		c_dl_b__17 = r_dl_b__16;
+		c_numer__17 = r_numer__16;
+		c_z1__17 = r_z1__16;
+		c_z0__17 = r_z0__16;
+		c_mut__17 = r_mut__16;
+		
+		//for 18
+		c_x__18	= r_x__17;
+		c_y__18	= r_y__17;
+		c_z__18	= r_z__17;
+		c_ux__18	= r_ux__17;
+		c_uy__18	= r_uy__17;
+		c_uz__18	= r_uz__17;
+		c_sz__18	= r_sz__17;
+		c_sr__18	= r_sr__17;
+		c_sleftz__18	= r_sleftz__17;
+		c_sleftr__18	= r_sleftr__17;
+		c_weight__18	= r_weight__17;
+		c_layer__18	= r_layer__17;
+		c_dead__18	= r_dead__17;
+		c_hit__18	= r_hit__17;
+		c_diff__18 = r_diff__17;
+		c_dl_b__18 = r_dl_b__17;
+		c_numer__18 = r_numer__17;
+		c_z1__18 = r_z1__17;
+		c_z0__18 = r_z0__17;
+		c_mut__18 = r_mut__17;
+		
+		//for 19
+		c_x__19	= r_x__18;
+		c_y__19	= r_y__18;
+		c_z__19	= r_z__18;
+		c_ux__19	= r_ux__18;
+		c_uy__19	= r_uy__18;
+		c_uz__19	= r_uz__18;
+		c_sz__19	= r_sz__18;
+		c_sr__19	= r_sr__18;
+		c_sleftz__19	= r_sleftz__18;
+		c_sleftr__19	= r_sleftr__18;
+		c_weight__19	= r_weight__18;
+		c_layer__19	= r_layer__18;
+		c_dead__19	= r_dead__18;
+		c_hit__19	= r_hit__18;
+		c_diff__19 = r_diff__18;
+		c_dl_b__19 = r_dl_b__18;
+		c_numer__19 = r_numer__18;
+		c_z1__19 = r_z1__18;
+		c_z0__19 = r_z0__18;
+		c_mut__19 = r_mut__18;
+		
+		//for 20
+		c_x__20	= r_x__19;
+		c_y__20	= r_y__19;
+		c_z__20	= r_z__19;
+		c_ux__20	= r_ux__19;
+		c_uy__20	= r_uy__19;
+		c_uz__20	= r_uz__19;
+		c_sz__20	= r_sz__19;
+		c_sr__20	= r_sr__19;
+		c_sleftz__20	= r_sleftz__19;
+		c_sleftr__20	= r_sleftr__19;
+		c_weight__20	= r_weight__19;
+		c_layer__20	= r_layer__19;
+		c_dead__20	= r_dead__19;
+		c_hit__20	= r_hit__19;
+		c_diff__20 = r_diff__19;
+		c_dl_b__20 = r_dl_b__19;
+		c_numer__20 = r_numer__19;
+		c_z1__20 = r_z1__19;
+		c_z0__20 = r_z0__19;
+		c_mut__20 = r_mut__19;
+		
+		
+		//for 21
+		c_x__21	= r_x__20;
+		c_y__21	= r_y__20;
+		c_z__21	= r_z__20;
+		c_ux__21	= r_ux__20;
+		c_uy__21	= r_uy__20;
+		c_uz__21	= r_uz__20;
+		c_sz__21	= r_sz__20;
+		c_sr__21	= r_sr__20;
+		c_sleftz__21	= r_sleftz__20;
+		c_sleftr__21	= r_sleftr__20;
+		c_weight__21	= r_weight__20;
+		c_layer__21	= r_layer__20;
+		c_dead__21	= r_dead__20;
+		c_hit__21	= r_hit__20;
+		c_diff__21 = r_diff__20;
+		c_dl_b__21 = r_dl_b__20;
+		c_numer__21 = r_numer__20;
+		c_z1__21 = r_z1__20;
+		c_z0__21 = r_z0__20;
+		c_mut__21 = r_mut__20;
+		
+		//for 22
+		c_x__22	= r_x__21;
+		c_y__22	= r_y__21;
+		c_z__22	= r_z__21;
+		c_ux__22	= r_ux__21;
+		c_uy__22	= r_uy__21;
+		c_uz__22	= r_uz__21;
+		c_sz__22	= r_sz__21;
+		c_sr__22	= r_sr__21;
+		c_sleftz__22	= r_sleftz__21;
+		c_sleftr__22	= r_sleftr__21;
+		c_weight__22	= r_weight__21;
+		c_layer__22	= r_layer__21;
+		c_dead__22	= r_dead__21;
+		c_hit__22	= r_hit__21;
+		c_diff__22 = r_diff__21;
+		c_dl_b__22 = r_dl_b__21;
+		c_numer__22 = r_numer__21;
+		c_z1__22 = r_z1__21;
+		c_z0__22 = r_z0__21;
+		c_mut__22 = r_mut__21;
+		
+		//for 23
+		c_x__23	= r_x__22;
+		c_y__23	= r_y__22;
+		c_z__23	= r_z__22;
+		c_ux__23	= r_ux__22;
+		c_uy__23	= r_uy__22;
+		c_uz__23	= r_uz__22;
+		c_sz__23	= r_sz__22;
+		c_sr__23	= r_sr__22;
+		c_sleftz__23	= r_sleftz__22;
+		c_sleftr__23	= r_sleftr__22;
+		c_weight__23	= r_weight__22;
+		c_layer__23	= r_layer__22;
+		c_dead__23	= r_dead__22;
+		c_hit__23	= r_hit__22;
+		c_diff__23 = r_diff__22;
+		c_dl_b__23 = r_dl_b__22;
+		c_numer__23 = r_numer__22;
+		c_z1__23 = r_z1__22;
+		c_z0__23 = r_z0__22;
+		c_mut__23 = r_mut__22;
+		
+		//for 24
+		c_x__24	= r_x__23;
+		c_y__24	= r_y__23;
+		c_z__24	= r_z__23;
+		c_ux__24	= r_ux__23;
+		c_uy__24	= r_uy__23;
+		c_uz__24	= r_uz__23;
+		c_sz__24	= r_sz__23;
+		c_sr__24	= r_sr__23;
+		c_sleftz__24	= r_sleftz__23;
+		c_sleftr__24	= r_sleftr__23;
+		c_weight__24	= r_weight__23;
+		c_layer__24	= r_layer__23;
+		c_dead__24	= r_dead__23;
+		c_hit__24	= r_hit__23;
+		c_diff__24 = r_diff__23;
+		c_dl_b__24 = r_dl_b__23;
+		c_numer__24 = r_numer__23;
+		c_z1__24 = r_z1__23;
+		c_z0__24 = r_z0__23;
+		c_mut__24 = r_mut__23;
+		
+		//for 25
+		c_x__25	= r_x__24;
+		c_y__25	= r_y__24;
+		c_z__25	= r_z__24;
+		c_ux__25	= r_ux__24;
+		c_uy__25	= r_uy__24;
+		c_uz__25	= r_uz__24;
+		c_sz__25	= r_sz__24;
+		c_sr__25	= r_sr__24;
+		c_sleftz__25	= r_sleftz__24;
+		c_sleftr__25	= r_sleftr__24;
+		c_weight__25	= r_weight__24;
+		c_layer__25	= r_layer__24;
+		c_dead__25	= r_dead__24;
+		c_hit__25	= r_hit__24;
+		c_diff__25 = r_diff__24;
+		c_dl_b__25 = r_dl_b__24;
+		c_numer__25 = r_numer__24;
+		c_z1__25 = r_z1__24;
+		c_z0__25 = r_z0__24;
+		c_mut__25 = r_mut__24;
+		
+		//for 26
+		c_x__26	= r_x__25;
+		c_y__26	= r_y__25;
+		c_z__26	= r_z__25;
+		c_ux__26	= r_ux__25;
+		c_uy__26	= r_uy__25;
+		c_uz__26	= r_uz__25;
+		c_sz__26	= r_sz__25;
+		c_sr__26	= r_sr__25;
+		c_sleftz__26	= r_sleftz__25;
+		c_sleftr__26	= r_sleftr__25;
+		c_weight__26	= r_weight__25;
+		c_layer__26	= r_layer__25;
+		c_dead__26	= r_dead__25;
+		c_hit__26	= r_hit__25;
+		c_diff__26 = r_diff__25;
+		c_dl_b__26 = r_dl_b__25;
+		c_numer__26 = r_numer__25;
+		c_z1__26 = r_z1__25;
+		c_z0__26 = r_z0__25;
+		c_mut__26 = r_mut__25;
+		
+		//for 27
+		c_x__27	= r_x__26;
+		c_y__27	= r_y__26;
+		c_z__27	= r_z__26;
+		c_ux__27	= r_ux__26;
+		c_uy__27	= r_uy__26;
+		c_uz__27	= r_uz__26;
+		c_sz__27	= r_sz__26;
+		c_sr__27	= r_sr__26;
+		c_sleftz__27	= r_sleftz__26;
+		c_sleftr__27	= r_sleftr__26;
+		c_weight__27	= r_weight__26;
+		c_layer__27	= r_layer__26;
+		c_dead__27	= r_dead__26;
+		c_hit__27	= r_hit__26;
+		c_diff__27 = r_diff__26;
+		c_dl_b__27 = r_dl_b__26;
+		c_numer__27 = r_numer__26;
+		c_z1__27 = r_z1__26;
+		c_z0__27 = r_z0__26;
+		c_mut__27 = r_mut__26;
+		
+		//for 28
+		c_x__28	= r_x__27;
+		c_y__28	= r_y__27;
+		c_z__28	= r_z__27;
+		c_ux__28	= r_ux__27;
+		c_uy__28	= r_uy__27;
+		c_uz__28	= r_uz__27;
+		c_sz__28	= r_sz__27;
+		c_sr__28	= r_sr__27;
+		c_sleftz__28	= r_sleftz__27;
+		c_sleftr__28	= r_sleftr__27;
+		c_weight__28	= r_weight__27;
+		c_layer__28	= r_layer__27;
+		c_dead__28	= r_dead__27;
+		c_hit__28	= r_hit__27;
+		c_diff__28 = r_diff__27;
+		c_dl_b__28 = r_dl_b__27;
+		c_numer__28 = r_numer__27;
+		c_z1__28 = r_z1__27;
+		c_z0__28 = r_z0__27;
+		c_mut__28 = r_mut__27;
+		
+		//for 29
+		c_x__29	= r_x__28;
+		c_y__29	= r_y__28;
+		c_z__29	= r_z__28;
+		c_ux__29	= r_ux__28;
+		c_uy__29	= r_uy__28;
+		c_uz__29	= r_uz__28;
+		c_sz__29	= r_sz__28;
+		c_sr__29	= r_sr__28;
+		c_sleftz__29	= r_sleftz__28;
+		c_sleftr__29	= r_sleftr__28;
+		c_weight__29	= r_weight__28;
+		c_layer__29	= r_layer__28;
+		c_dead__29	= r_dead__28;
+		c_hit__29	= r_hit__28;
+		c_diff__29 = r_diff__28;
+		c_dl_b__29 = r_dl_b__28;
+		c_numer__29 = r_numer__28;
+		c_z1__29 = r_z1__28;
+		c_z0__29 = r_z0__28;
+		c_mut__29 = r_mut__28;
+		
+		//for 30
+		c_x__30	= r_x__29;
+		c_y__30	= r_y__29;
+		c_z__30	= r_z__29;
+		c_ux__30	= r_ux__29;
+		c_uy__30	= r_uy__29;
+		c_uz__30	= r_uz__29;
+		c_sz__30	= r_sz__29;
+		c_sr__30	= r_sr__29;
+		c_sleftz__30	= r_sleftz__29;
+		c_sleftr__30	= r_sleftr__29;
+		c_weight__30	= r_weight__29;
+		c_layer__30	= r_layer__29;
+		c_dead__30	= r_dead__29;
+	//	c_hit__30	= r_hit__29;//
+	//	c_diff__30 = r_diff__29;//
+	// this value is set later, removing default - peter m	
+	//	c_dl_b__30 = r_dl_b__29;//
+	// this one too
+		c_numer__30 = r_numer__29;
+		c_z1__30 = r_z1__29;
+		c_z0__30 = r_z0__29;
+		c_mut__30 = r_mut__29;
+		
+		//for 31
+		c_x__31	= r_x__30;
+		c_y__31	= r_y__30;
+	//	c_z__31	= r_z__30;//
+		c_ux__31	= r_ux__30;
+		c_uy__31	= r_uy__30;
+		c_uz__31	= r_uz__30;
+	//	c_sz__31	= r_sz__30;//
+	//	c_sr__31	= r_sr__30;//
+	//	c_sleftz__31	= r_sleftz__30;//
+		c_sleftr__31	= r_sleftr__30;
+		c_weight__31	= r_weight__30;
+		c_layer__31	= r_layer__30;
+		c_dead__31	= r_dead__30;
+		c_hit__31	= r_hit__30;
+		c_diff__31 = r_diff__30;
+		c_dl_b__31 = r_dl_b__30;
+		c_numer__31 = r_numer__30;
+		c_z1__31 = r_z1__30;
+		c_z0__31 = r_z0__30;
+		c_mut__31 = r_mut__30;
+		
+		//for 32
+		c_x__32	= r_x__31;
+		c_y__32	= r_y__31;
+		c_z__32	= r_z__31;
+		c_ux__32	= r_ux__31;
+		c_uy__32	= r_uy__31;
+		c_uz__32	= r_uz__31;
+		c_sz__32	= r_sz__31;
+		c_sr__32	= r_sr__31;
+		c_sleftz__32	= r_sleftz__31;
+	//	c_sleftr__32	= r_sleftr__31;//
+		c_weight__32	= r_weight__31;
+		c_layer__32	= r_layer__31;
+		c_dead__32	= r_dead__31;
+		c_hit__32	= r_hit__31;
+		c_diff__32 = r_diff__31;
+		c_dl_b__32 = r_dl_b__31;
+		c_numer__32 = r_numer__31;
+		c_z1__32 = r_z1__31;
+		c_z0__32 = r_z0__31;
+		c_mut__32 = r_mut__31;
+		
+		//for 33
+		c_x__33	= r_x__32;
+		c_y__33	= r_y__32;
+		c_z__33	= r_z__32;
+		c_ux__33	= r_ux__32;
+		c_uy__33	= r_uy__32;
+		c_uz__33	= r_uz__32;
+		c_sz__33	= r_sz__32;
+		c_sr__33	= r_sr__32;
+		c_sleftz__33	= r_sleftz__32;
+		c_sleftr__33	= r_sleftr__32;
+		c_weight__33	= r_weight__32;
+		c_layer__33	= r_layer__32;
+		c_dead__33	= r_dead__32;
+		c_hit__33	= r_hit__32;
+		c_diff__33 = r_diff__32;
+		c_dl_b__33 = r_dl_b__32;
+		c_numer__33 = r_numer__32;
+		c_z1__33 = r_z1__32;
+		c_z0__33 = r_z0__32;
+		c_mut__33 = r_mut__32;
+		
+		//for 34
+		c_x__34	= r_x__33;
+		c_y__34	= r_y__33;
+		c_z__34	= r_z__33;
+		c_ux__34	= r_ux__33;
+		c_uy__34	= r_uy__33;
+		c_uz__34	= r_uz__33;
+		c_sz__34	= r_sz__33;
+		c_sr__34	= r_sr__33;
+		c_sleftz__34	= r_sleftz__33;
+		c_sleftr__34	= r_sleftr__33;
+		c_weight__34	= r_weight__33;
+		c_layer__34	= r_layer__33;
+		c_dead__34	= r_dead__33;
+		c_hit__34	= r_hit__33;
+		c_diff__34 = r_diff__33;
+		c_dl_b__34 = r_dl_b__33;
+		c_numer__34 = r_numer__33;
+		c_z1__34 = r_z1__33;
+		c_z0__34 = r_z0__33;
+		c_mut__34 = r_mut__33;
+		
+		//for 35
+		c_x__35	= r_x__34;
+		c_y__35	= r_y__34;
+		c_z__35	= r_z__34;
+		c_ux__35	= r_ux__34;
+		c_uy__35	= r_uy__34;
+		c_uz__35	= r_uz__34;
+		c_sz__35	= r_sz__34;
+		c_sr__35	= r_sr__34;
+		c_sleftz__35	= r_sleftz__34;
+		c_sleftr__35	= r_sleftr__34;
+		c_weight__35	= r_weight__34;
+		c_layer__35	= r_layer__34;
+		c_dead__35	= r_dead__34;
+		c_hit__35	= r_hit__34;
+		c_diff__35 = r_diff__34;
+		c_dl_b__35 = r_dl_b__34;
+		c_numer__35 = r_numer__34;
+		c_z1__35 = r_z1__34;
+		c_z0__35 = r_z0__34;
+		c_mut__35 = r_mut__34;
+		
+		//for 36
+		c_x__36	= r_x__35;
+		c_y__36	= r_y__35;
+		c_z__36	= r_z__35;
+		c_ux__36	= r_ux__35;
+		c_uy__36	= r_uy__35;
+		c_uz__36	= r_uz__35;
+		c_sz__36	= r_sz__35;
+		c_sr__36	= r_sr__35;
+		c_sleftz__36	= r_sleftz__35;
+		c_sleftr__36	= r_sleftr__35;
+		c_weight__36	= r_weight__35;
+		c_layer__36	= r_layer__35;
+		c_dead__36	= r_dead__35;
+		c_hit__36	= r_hit__35;
+		c_diff__36 = r_diff__35;
+		c_dl_b__36 = r_dl_b__35;
+		c_numer__36 = r_numer__35;
+		c_z1__36 = r_z1__35;
+		c_z0__36 = r_z0__35;
+		c_mut__36 = r_mut__35;
+		
+		//for 37
+		c_x__37	= r_x__36;
+		c_y__37	= r_y__36;
+		c_z__37	= r_z__36;
+		c_ux__37	= r_ux__36;
+		c_uy__37	= r_uy__36;
+		c_uz__37	= r_uz__36;
+		c_sz__37	= r_sz__36;
+		c_sr__37	= r_sr__36;
+		c_sleftz__37	= r_sleftz__36;
+		c_sleftr__37	= r_sleftr__36;
+		c_weight__37	= r_weight__36;
+		c_layer__37	= r_layer__36;
+		c_dead__37	= r_dead__36;
+		c_hit__37	= r_hit__36;
+		c_diff__37 = r_diff__36;
+		c_dl_b__37 = r_dl_b__36;
+		c_numer__37 = r_numer__36;
+		c_z1__37 = r_z1__36;
+		c_z0__37 = r_z0__36;
+		c_mut__37 = r_mut__36;
+		
+		//for 38
+		c_x__38	= r_x__37;
+		c_y__38	= r_y__37;
+		c_z__38	= r_z__37;
+		c_ux__38	= r_ux__37;
+		c_uy__38	= r_uy__37;
+		c_uz__38	= r_uz__37;
+		c_sz__38	= r_sz__37;
+		c_sr__38	= r_sr__37;
+		c_sleftz__38	= r_sleftz__37;
+		c_sleftr__38	= r_sleftr__37;
+		c_weight__38	= r_weight__37;
+		c_layer__38	= r_layer__37;
+		c_dead__38	= r_dead__37;
+		c_hit__38	= r_hit__37;
+		c_diff__38 = r_diff__37;
+		c_dl_b__38 = r_dl_b__37;
+		c_numer__38 = r_numer__37;
+		c_z1__38 = r_z1__37;
+		c_z0__38 = r_z0__37;
+		c_mut__38 = r_mut__37;
+		
+		//for 39
+		c_x__39	= r_x__38;
+		c_y__39	= r_y__38;
+		c_z__39	= r_z__38;
+		c_ux__39	= r_ux__38;
+		c_uy__39	= r_uy__38;
+		c_uz__39	= r_uz__38;
+		c_sz__39	= r_sz__38;
+		c_sr__39	= r_sr__38;
+		c_sleftz__39	= r_sleftz__38;
+		c_sleftr__39	= r_sleftr__38;
+		c_weight__39	= r_weight__38;
+		c_layer__39	= r_layer__38;
+		c_dead__39	= r_dead__38;
+		c_hit__39	= r_hit__38;
+		c_diff__39 = r_diff__38;
+		c_dl_b__39 = r_dl_b__38;
+		c_numer__39 = r_numer__38;
+		c_z1__39 = r_z1__38;
+		c_z0__39 = r_z0__38;
+		c_mut__39 = r_mut__38;
+		
+		//for 40
+		c_x__40	= r_x__39;
+		c_y__40	= r_y__39;
+		c_z__40	= r_z__39;
+		c_ux__40	= r_ux__39;
+		c_uy__40	= r_uy__39;
+		c_uz__40	= r_uz__39;
+		c_sz__40	= r_sz__39;
+		c_sr__40	= r_sr__39;
+		c_sleftz__40	= r_sleftz__39;
+		c_sleftr__40	= r_sleftr__39;
+		c_weight__40	= r_weight__39;
+		c_layer__40	= r_layer__39;
+		c_dead__40	= r_dead__39;
+		c_hit__40	= r_hit__39;
+		c_diff__40 = r_diff__39;
+		c_dl_b__40 = r_dl_b__39;
+		c_numer__40 = r_numer__39;
+		c_z1__40 = r_z1__39;
+		c_z0__40 = r_z0__39;
+		c_mut__40 = r_mut__39;
+		
+		//for 41
+		c_x__41	= r_x__40;
+		c_y__41	= r_y__40;
+		c_z__41	= r_z__40;
+		c_ux__41	= r_ux__40;
+		c_uy__41	= r_uy__40;
+		c_uz__41	= r_uz__40;
+		c_sz__41	= r_sz__40;
+		c_sr__41	= r_sr__40;
+		c_sleftz__41	= r_sleftz__40;
+		c_sleftr__41	= r_sleftr__40;
+		c_weight__41	= r_weight__40;
+		c_layer__41	= r_layer__40;
+		c_dead__41	= r_dead__40;
+		c_hit__41	= r_hit__40;
+		c_diff__41 = r_diff__40;
+		c_dl_b__41 = r_dl_b__40;
+		c_numer__41 = r_numer__40;
+		c_z1__41 = r_z1__40;
+		c_z0__41 = r_z0__40;
+		c_mut__41 = r_mut__40;
+		
+		//for 42
+		c_x__42	= r_x__41;
+		c_y__42	= r_y__41;
+		c_z__42	= r_z__41;
+		c_ux__42	= r_ux__41;
+		c_uy__42	= r_uy__41;
+		c_uz__42	= r_uz__41;
+		c_sz__42	= r_sz__41;
+		c_sr__42	= r_sr__41;
+		c_sleftz__42	= r_sleftz__41;
+		c_sleftr__42	= r_sleftr__41;
+		c_weight__42	= r_weight__41;
+		c_layer__42	= r_layer__41;
+		c_dead__42	= r_dead__41;
+		c_hit__42	= r_hit__41;
+		c_diff__42 = r_diff__41;
+		c_dl_b__42 = r_dl_b__41;
+		c_numer__42 = r_numer__41;
+		c_z1__42 = r_z1__41;
+		c_z0__42 = r_z0__41;
+		c_mut__42 = r_mut__41;
+		
+		//for 43
+		c_x__43	= r_x__42;
+		c_y__43	= r_y__42;
+		c_z__43	= r_z__42;
+		c_ux__43	= r_ux__42;
+		c_uy__43	= r_uy__42;
+		c_uz__43	= r_uz__42;
+		c_sz__43	= r_sz__42;
+		c_sr__43	= r_sr__42;
+		c_sleftz__43	= r_sleftz__42;
+		c_sleftr__43	= r_sleftr__42;
+		c_weight__43	= r_weight__42;
+		c_layer__43	= r_layer__42;
+		c_dead__43	= r_dead__42;
+		c_hit__43	= r_hit__42;
+		c_diff__43 = r_diff__42;
+		c_dl_b__43 = r_dl_b__42;
+		c_numer__43 = r_numer__42;
+		c_z1__43 = r_z1__42;
+		c_z0__43 = r_z0__42;
+		c_mut__43 = r_mut__42;
+		
+		//for 44
+		c_x__44	= r_x__43;
+		c_y__44	= r_y__43;
+		c_z__44	= r_z__43;
+		c_ux__44	= r_ux__43;
+		c_uy__44	= r_uy__43;
+		c_uz__44	= r_uz__43;
+		c_sz__44	= r_sz__43;
+		c_sr__44	= r_sr__43;
+		c_sleftz__44	= r_sleftz__43;
+		c_sleftr__44	= r_sleftr__43;
+		c_weight__44	= r_weight__43;
+		c_layer__44	= r_layer__43;
+		c_dead__44	= r_dead__43;
+		c_hit__44	= r_hit__43;
+		c_diff__44 = r_diff__43;
+		c_dl_b__44 = r_dl_b__43;
+		c_numer__44 = r_numer__43;
+		c_z1__44 = r_z1__43;
+		c_z0__44 = r_z0__43;
+		c_mut__44 = r_mut__43;
+		
+		//for 45
+		c_x__45	= r_x__44;
+		c_y__45	= r_y__44;
+		c_z__45	= r_z__44;
+		c_ux__45	= r_ux__44;
+		c_uy__45	= r_uy__44;
+		c_uz__45	= r_uz__44;
+		c_sz__45	= r_sz__44;
+		c_sr__45	= r_sr__44;
+		c_sleftz__45	= r_sleftz__44;
+		c_sleftr__45	= r_sleftr__44;
+		c_weight__45	= r_weight__44;
+		c_layer__45	= r_layer__44;
+		c_dead__45	= r_dead__44;
+		c_hit__45	= r_hit__44;
+		c_diff__45 = r_diff__44;
+		c_dl_b__45 = r_dl_b__44;
+		c_numer__45 = r_numer__44;
+		c_z1__45 = r_z1__44;
+		c_z0__45 = r_z0__44;
+		c_mut__45 = r_mut__44;
+		
+		//for 46
+		c_x__46	= r_x__45;
+		c_y__46	= r_y__45;
+		c_z__46	= r_z__45;
+		c_ux__46	= r_ux__45;
+		c_uy__46	= r_uy__45;
+		c_uz__46	= r_uz__45;
+		c_sz__46	= r_sz__45;
+		c_sr__46	= r_sr__45;
+		c_sleftz__46	= r_sleftz__45;
+		c_sleftr__46	= r_sleftr__45;
+		c_weight__46	= r_weight__45;
+		c_layer__46	= r_layer__45;
+		c_dead__46	= r_dead__45;
+		c_hit__46	= r_hit__45;
+		c_diff__46 = r_diff__45;
+		c_dl_b__46 = r_dl_b__45;
+		c_numer__46 = r_numer__45;
+		c_z1__46 = r_z1__45;
+		c_z0__46 = r_z0__45;
+		c_mut__46 = r_mut__45;
+		
+		//for 47
+		c_x__47	= r_x__46;
+		c_y__47	= r_y__46;
+		c_z__47	= r_z__46;
+		c_ux__47	= r_ux__46;
+		c_uy__47	= r_uy__46;
+		c_uz__47	= r_uz__46;
+		c_sz__47	= r_sz__46;
+		c_sr__47	= r_sr__46;
+		c_sleftz__47	= r_sleftz__46;
+		c_sleftr__47	= r_sleftr__46;
+		c_weight__47	= r_weight__46;
+		c_layer__47	= r_layer__46;
+		c_dead__47	= r_dead__46;
+		c_hit__47	= r_hit__46;
+		c_diff__47 = r_diff__46;
+		c_dl_b__47 = r_dl_b__46;
+		c_numer__47 = r_numer__46;
+		c_z1__47 = r_z1__46;
+		c_z0__47 = r_z0__46;
+		c_mut__47 = r_mut__46;
+		
+		//for 48
+		c_x__48	= r_x__47;
+		c_y__48	= r_y__47;
+		c_z__48	= r_z__47;
+		c_ux__48	= r_ux__47;
+		c_uy__48	= r_uy__47;
+		c_uz__48	= r_uz__47;
+		c_sz__48	= r_sz__47;
+		c_sr__48	= r_sr__47;
+		c_sleftz__48	= r_sleftz__47;
+		c_sleftr__48	= r_sleftr__47;
+		c_weight__48	= r_weight__47;
+		c_layer__48	= r_layer__47;
+		c_dead__48	= r_dead__47;
+		c_hit__48	= r_hit__47;
+		c_diff__48 = r_diff__47;
+		c_dl_b__48 = r_dl_b__47;
+		c_numer__48 = r_numer__47;
+		c_z1__48 = r_z1__47;
+		c_z0__48 = r_z0__47;
+		c_mut__48 = r_mut__47;
+		
+		//for 49
+		c_x__49	= r_x__48;
+		c_y__49	= r_y__48;
+		c_z__49	= r_z__48;
+		c_ux__49	= r_ux__48;
+		c_uy__49	= r_uy__48;
+		c_uz__49	= r_uz__48;
+		c_sz__49	= r_sz__48;
+		c_sr__49	= r_sr__48;
+		c_sleftz__49	= r_sleftz__48;
+		c_sleftr__49	= r_sleftr__48;
+		c_weight__49	= r_weight__48;
+		c_layer__49	= r_layer__48;
+		c_dead__49	= r_dead__48;
+		c_hit__49	= r_hit__48;
+		c_diff__49 = r_diff__48;
+		c_dl_b__49 = r_dl_b__48;
+		c_numer__49 = r_numer__48;
+		c_z1__49 = r_z1__48;
+		c_z0__49 = r_z0__48;
+		c_mut__49 = r_mut__48;
+		
+		//for 50
+		c_x__50	= r_x__49;
+		c_y__50	= r_y__49;
+		c_z__50	= r_z__49;
+		c_ux__50	= r_ux__49;
+		c_uy__50	= r_uy__49;
+		c_uz__50	= r_uz__49;
+		c_sz__50	= r_sz__49;
+		c_sr__50	= r_sr__49;
+		c_sleftz__50	= r_sleftz__49;
+		c_sleftr__50	= r_sleftr__49;
+		c_weight__50	= r_weight__49;
+		c_layer__50	= r_layer__49;
+		c_dead__50	= r_dead__49;
+		c_hit__50	= r_hit__49;
+		c_diff__50 = r_diff__49;
+		c_dl_b__50 = r_dl_b__49;
+		c_numer__50 = r_numer__49;
+		c_z1__50 = r_z1__49;
+		c_z0__50 = r_z0__49;
+		c_mut__50 = r_mut__49;
+		
+		//for 51
+		c_x__51	= r_x__50;
+		c_y__51	= r_y__50;
+		c_z__51	= r_z__50;
+		c_ux__51	= r_ux__50;
+		c_uy__51	= r_uy__50;
+		c_uz__51	= r_uz__50;
+		c_sz__51	= r_sz__50;
+		c_sr__51	= r_sr__50;
+		c_sleftz__51	= r_sleftz__50;
+		c_sleftr__51	= r_sleftr__50;
+		c_weight__51	= r_weight__50;
+		c_layer__51	= r_layer__50;
+		c_dead__51	= r_dead__50;
+		c_hit__51	= r_hit__50;
+		c_diff__51 = r_diff__50;
+		c_dl_b__51 = r_dl_b__50;
+		c_numer__51 = r_numer__50;
+		c_z1__51 = r_z1__50;
+		c_z0__51 = r_z0__50;
+		c_mut__51 = r_mut__50;
+		
+		//for 52
+		c_x__52	= r_x__51;
+		c_y__52	= r_y__51;
+		c_z__52	= r_z__51;
+		c_ux__52	= r_ux__51;
+		c_uy__52	= r_uy__51;
+		c_uz__52	= r_uz__51;
+		c_sz__52	= r_sz__51;
+		c_sr__52	= r_sr__51;
+		c_sleftz__52	= r_sleftz__51;
+		c_sleftr__52	= r_sleftr__51;
+		c_weight__52	= r_weight__51;
+		c_layer__52	= r_layer__51;
+		c_dead__52	= r_dead__51;
+		c_hit__52	= r_hit__51;
+		c_diff__52 = r_diff__51;
+		c_dl_b__52 = r_dl_b__51;
+		c_numer__52 = r_numer__51;
+		c_z1__52 = r_z1__51;
+		c_z0__52 = r_z0__51;
+		c_mut__52 = r_mut__51;
+		
+		//for 53
+		c_x__53	= r_x__52;
+		c_y__53	= r_y__52;
+		c_z__53	= r_z__52;
+		c_ux__53	= r_ux__52;
+		c_uy__53	= r_uy__52;
+		c_uz__53	= r_uz__52;
+		c_sz__53	= r_sz__52;
+		c_sr__53	= r_sr__52;
+		c_sleftz__53	= r_sleftz__52;
+		c_sleftr__53	= r_sleftr__52;
+		c_weight__53	= r_weight__52;
+		c_layer__53	= r_layer__52;
+		c_dead__53	= r_dead__52;
+		c_hit__53	= r_hit__52;
+		c_diff__53 = r_diff__52;
+		c_dl_b__53 = r_dl_b__52;
+		c_numer__53 = r_numer__52;
+		c_z1__53 = r_z1__52;
+		c_z0__53 = r_z0__52;
+		c_mut__53 = r_mut__52;
+		
+		//for 54
+		c_x__54	= r_x__53;
+		c_y__54	= r_y__53;
+		c_z__54	= r_z__53;
+		c_ux__54	= r_ux__53;
+		c_uy__54	= r_uy__53;
+		c_uz__54	= r_uz__53;
+		c_sz__54	= r_sz__53;
+		c_sr__54	= r_sr__53;
+		c_sleftz__54	= r_sleftz__53;
+		c_sleftr__54	= r_sleftr__53;
+		c_weight__54	= r_weight__53;
+		c_layer__54	= r_layer__53;
+		c_dead__54	= r_dead__53;
+		c_hit__54	= r_hit__53;
+		c_diff__54 = r_diff__53;
+		c_dl_b__54 = r_dl_b__53;
+		c_numer__54 = r_numer__53;
+		c_z1__54 = r_z1__53;
+		c_z0__54 = r_z0__53;
+		c_mut__54 = r_mut__53;
+		
+		//for 55
+		c_x__55	= r_x__54;
+		c_y__55	= r_y__54;
+		c_z__55	= r_z__54;
+		c_ux__55	= r_ux__54;
+		c_uy__55	= r_uy__54;
+		c_uz__55	= r_uz__54;
+		c_sz__55	= r_sz__54;
+		c_sr__55	= r_sr__54;
+		c_sleftz__55	= r_sleftz__54;
+		c_sleftr__55	= r_sleftr__54;
+		c_weight__55	= r_weight__54;
+		c_layer__55	= r_layer__54;
+		c_dead__55	= r_dead__54;
+		c_hit__55	= r_hit__54;
+		c_diff__55 = r_diff__54;
+		c_dl_b__55 = r_dl_b__54;
+		c_numer__55 = r_numer__54;
+		c_z1__55 = r_z1__54;
+		c_z0__55 = r_z0__54;
+		c_mut__55 = r_mut__54;
+		
+		//for 56
+		c_x__56	= r_x__55;
+		c_y__56	= r_y__55;
+		c_z__56	= r_z__55;
+		c_ux__56	= r_ux__55;
+		c_uy__56	= r_uy__55;
+		c_uz__56	= r_uz__55;
+		c_sz__56	= r_sz__55;
+		c_sr__56	= r_sr__55;
+		c_sleftz__56	= r_sleftz__55;
+		c_sleftr__56	= r_sleftr__55;
+		c_weight__56	= r_weight__55;
+		c_layer__56	= r_layer__55;
+		c_dead__56	= r_dead__55;
+		c_hit__56	= r_hit__55;
+		c_diff__56 = r_diff__55;
+		c_dl_b__56 = r_dl_b__55;
+		c_numer__56 = r_numer__55;
+		c_z1__56 = r_z1__55;
+		c_z0__56 = r_z0__55;
+		c_mut__56 = r_mut__55;
+		
+		//for 57
+		c_x__57	= r_x__56;
+		c_y__57	= r_y__56;
+		c_z__57	= r_z__56;
+		c_ux__57	= r_ux__56;
+		c_uy__57	= r_uy__56;
+		c_uz__57	= r_uz__56;
+		c_sz__57	= r_sz__56;
+		c_sr__57	= r_sr__56;
+		c_sleftz__57	= r_sleftz__56;
+		c_sleftr__57	= r_sleftr__56;
+		c_weight__57	= r_weight__56;
+		c_layer__57	= r_layer__56;
+		c_dead__57	= r_dead__56;
+		c_hit__57	= r_hit__56;
+		c_diff__57 = r_diff__56;
+		c_dl_b__57 = r_dl_b__56;
+		c_numer__57 = r_numer__56;
+		c_z1__57 = r_z1__56;
+		c_z0__57 = r_z0__56;
+		c_mut__57 = r_mut__56;
+		
+		//for 58
+		c_x__58	= r_x__57;
+		c_y__58	= r_y__57;
+		c_z__58	= r_z__57;
+		c_ux__58	= r_ux__57;
+		c_uy__58	= r_uy__57;
+		c_uz__58	= r_uz__57;
+		c_sz__58	= r_sz__57;
+		c_sr__58	= r_sr__57;
+		c_sleftz__58	= r_sleftz__57;
+		c_sleftr__58	= r_sleftr__57;
+		c_weight__58	= r_weight__57;
+		c_layer__58	= r_layer__57;
+		c_dead__58	= r_dead__57;
+		c_hit__58	= r_hit__57;
+		c_diff__58 = r_diff__57;
+		c_dl_b__58 = r_dl_b__57;
+		c_numer__58 = r_numer__57;
+		c_z1__58 = r_z1__57;
+		c_z0__58 = r_z0__57;
+		c_mut__58 = r_mut__57;
+		
+		//for 59
+		c_x__59	= r_x__58;
+		c_y__59	= r_y__58;
+		c_z__59	= r_z__58;
+		c_ux__59	= r_ux__58;
+		c_uy__59	= r_uy__58;
+		c_uz__59	= r_uz__58;
+		c_sz__59	= r_sz__58;
+		c_sr__59	= r_sr__58;
+		c_sleftz__59	= r_sleftz__58;
+		c_sleftr__59	= r_sleftr__58;
+		c_weight__59	= r_weight__58;
+		c_layer__59	= r_layer__58;
+		c_dead__59	= r_dead__58;
+		c_hit__59	= r_hit__58;
+		c_diff__59 = r_diff__58;
+		c_dl_b__59 = r_dl_b__58;
+		c_numer__59 = r_numer__58;
+		c_z1__59 = r_z1__58;
+		c_z0__59 = r_z0__58;
+		c_mut__59 = r_mut__58;
+	
+
+	// Pull out and replace signals in pipe
+	/* STAGE 1: Division completed */
+	c_dl_b__30 = quotient_div1[32:1];
+	c_diff__30 = c_sz__30 - c_dl_b__30;
+
+	if(c_uz__30 != 32'b0 && c_sz__30 > c_dl_b__30 && quotient_div1[63:32] == 32'b0)
+	begin
+		/* not horizontal & crossing. */
+		c_hit__30 = 1'b1;
+	end
+	//Remove blocking on c_hit__30
+	else
+	begin
+		c_hit__30	= r_hit__29;
+	end
+
+	/* STAGE 2: First multiply completed */
+	if(c_hit__31 == 1'b1)
+	begin
+		/*step left = (original step - distance travelled) * scaling factor*/
+
+		c_sleftz__31 = sleftz_big[2*`BIT_WIDTH-2:`BIT_WIDTH - 1];
+		if(c_uz__31[`BIT_WIDTH-1] == 1'b0) 
+		begin
+			c_z__31 = c_z1__31;
+		end
+		else
+		begin
+			c_z__31 = c_z0__31;
+		end
+
+		c_sz__31 = c_dl_b__31;
+		c_sr__31 = sr_big[2*`BIT_WIDTH-2 - `ASPECT_RATIO:`BIT_WIDTH - 1 - `ASPECT_RATIO];
+	end
+	//Remove blocking on c_sleftz_31, c_sr__31, c_sz__31, c_z__31
+	else 
+	begin
+		c_sleftz__31 = r_sleftz__30;
+		c_sr__31 = r_sr__30;
+		c_sz__31 = r_sz__30;
+		c_z__31	= r_z__30;
+	end
+
+	/* STAGE 3: Second multiply completed */
+	if(c_hit__32 == 1'b1)
+	begin
+		/*additional scaling factor on dl_b to switch to r-dimension scale*/
+		c_sleftr__32 = sleftr_big[2*`BIT_WIDTH-2 - `ASPECT_RATIO:`BIT_WIDTH - 1 - `ASPECT_RATIO];
+	end
+	//Remove blocking on c_sleftr__32
+	else
+	begin
+		c_sleftr__32 = r_sleftr__31;
+	
+	end
+end
+
+// latch values
+always @ (posedge clock)
+begin
+//	for(j = 0; j < `TOTAL_LATENCY; j = j + 1)
+//	begin
+//		if (reset)
+//		begin
+//			r_x[j]	<= 32'b0;
+//			r_y[j]	<= 32'b0;
+//			r_z[j]	<= 32'b0;
+//			r_ux[j]	<= 32'b0;
+//			r_uy[j]	<= 32'b0;
+//			r_uz[j]	<= 32'b0;
+//			r_sz[j]	<= 32'b0;
+//			r_sr[j]	<= 32'b0;
+//			r_sleftz[j]	<= 32'b0;
+//			r_sleftr[j]	<= 32'b0;
+//			r_weight[j]	<= 32'b0;
+//			r_layer[j]	<= 3'b0;
+//			r_dead[j]	<= 1'b1;
+//			r_hit[j]	<= 1'b0;
+//			r_diff[j] <= 32'b0;
+//			r_dl_b[j] <= 32'b0;
+//			r_numer[j] <= 64'b0;
+//			r_z1[j] <= 32'b0;
+//			r_z0[j] <= 32'b0;
+//			r_mut[j] <= 32'b0;
+//		end
+//		else
+//		begin
+//			if(enable)
+//			begin
+//				r_x[j]	<= c_x[j];
+//				r_y[j]	<= c_y[j];
+//				r_z[j]	<= c_z[j];
+//				r_ux[j]	<= c_ux[j];
+//				r_uy[j]	<= c_uy[j];
+//				r_uz[j]	<= c_uz[j];
+//				r_sz[j]	<= c_sz[j];
+//				r_sr[j]	<= c_sr[j];
+//				r_sleftz[j]	<= c_sleftz[j];
+//				r_sleftr[j]	<= c_sleftr[j];
+//				r_weight[j]	<= c_weight[j];
+//				r_layer[j]	<= c_layer[j];
+//				r_dead[j]	<= c_dead[j];
+//				r_hit[j]	<= c_hit[j];
+//				r_diff[j] <= c_diff[j];
+//				r_dl_b[j] <= c_dl_b[j];
+//				r_numer[j] <= c_numer[j];
+//				r_z1[j] <= c_z1[j];
+//				r_z0[j] <= c_z0[j];
+//				r_mut[j] <= c_mut[j];
+//			end
+//		end
+//	end
+	if(reset)
+	begin
+		//Instantiate all 60 aspects of loop
+			r_x__59	<= 32'b00000000000000000000000000000000;
+			r_y__59	<= 32'b00000000000000000000000000000000;
+			r_z__59	<= 32'b00000000000000000000000000000000;
+			r_ux__59	<= 32'b00000000000000000000000000000000;
+			r_uy__59	<= 32'b00000000000000000000000000000000;
+			r_uz__59	<= 32'b00000000000000000000000000000000;
+			r_sz__59	<= 32'b00000000000000000000000000000000;
+			r_sr__59	<= 32'b00000000000000000000000000000000;
+			r_sleftz__59	<= 32'b00000000000000000000000000000000;
+			r_sleftr__59	<= 32'b00000000000000000000000000000000;
+			r_weight__59	<= 32'b00000000000000000000000000000000;
+			r_layer__59	<= 3'b000;
+			r_dead__59	<= 1'b1;
+			r_hit__59	<= 1'b0;
+			r_diff__59 <= 32'b00000000000000000000000000000000;
+			r_dl_b__59 <= 32'b00000000000000000000000000000000;
+			r_numer__59 <= 0;
+			r_z1__59 <= 32'b00000000000000000000000000000000;
+			r_z0__59 <= 32'b00000000000000000000000000000000;
+			r_mut__59 <= 32'b00000000000000000000000000000000;
+
+			r_x__58	<= 32'b00000000000000000000000000000000;
+			r_y__58	<= 32'b00000000000000000000000000000000;
+			r_z__58	<= 32'b00000000000000000000000000000000;
+			r_ux__58	<= 32'b00000000000000000000000000000000;
+			r_uy__58	<= 32'b00000000000000000000000000000000;
+			r_uz__58	<= 32'b00000000000000000000000000000000;
+			r_sz__58	<= 32'b00000000000000000000000000000000;
+			r_sr__58	<= 32'b00000000000000000000000000000000;
+			r_sleftz__58	<= 32'b00000000000000000000000000000000;
+			r_sleftr__58	<= 32'b00000000000000000000000000000000;
+			r_weight__58	<= 32'b00000000000000000000000000000000;
+			r_layer__58	<= 3'b000;
+			r_dead__58	<= 1'b1;
+			r_hit__58	<= 1'b0;
+			r_diff__58 <= 32'b00000000000000000000000000000000;
+			r_dl_b__58 <= 32'b00000000000000000000000000000000;
+			r_numer__58 <= 0;
+			r_z1__58 <= 32'b00000000000000000000000000000000;
+			r_z0__58 <= 32'b00000000000000000000000000000000;
+			r_mut__58 <= 32'b00000000000000000000000000000000;
+
+			r_x__57	<= 32'b00000000000000000000000000000000;
+			r_y__57	<= 32'b00000000000000000000000000000000;
+			r_z__57	<= 32'b00000000000000000000000000000000;
+			r_ux__57	<= 32'b00000000000000000000000000000000;
+			r_uy__57	<= 32'b00000000000000000000000000000000;
+			r_uz__57	<= 32'b00000000000000000000000000000000;
+			r_sz__57	<= 32'b00000000000000000000000000000000;
+			r_sr__57	<= 32'b00000000000000000000000000000000;
+			r_sleftz__57	<= 32'b00000000000000000000000000000000;
+			r_sleftr__57	<= 32'b00000000000000000000000000000000;
+			r_weight__57	<= 32'b00000000000000000000000000000000;
+			r_layer__57	<= 3'b000;
+			r_dead__57	<= 1'b1;
+			r_hit__57	<= 1'b0;
+			r_diff__57 <= 32'b00000000000000000000000000000000;
+			r_dl_b__57 <= 32'b00000000000000000000000000000000;
+			r_numer__57 <= 0;
+			r_z1__57 <= 32'b00000000000000000000000000000000;
+			r_z0__57 <= 32'b00000000000000000000000000000000;
+			r_mut__57 <= 32'b00000000000000000000000000000000;
+
+			r_x__56	<= 32'b00000000000000000000000000000000;
+			r_y__56	<= 32'b00000000000000000000000000000000;
+			r_z__56	<= 32'b00000000000000000000000000000000;
+			r_ux__56	<= 32'b00000000000000000000000000000000;
+			r_uy__56	<= 32'b00000000000000000000000000000000;
+			r_uz__56	<= 32'b00000000000000000000000000000000;
+			r_sz__56	<= 32'b00000000000000000000000000000000;
+			r_sr__56	<= 32'b00000000000000000000000000000000;
+			r_sleftz__56	<= 32'b00000000000000000000000000000000;
+			r_sleftr__56	<= 32'b00000000000000000000000000000000;
+			r_weight__56	<= 32'b00000000000000000000000000000000;
+			r_layer__56	<= 3'b000;
+			r_dead__56	<= 1'b1;
+			r_hit__56	<= 1'b0;
+			r_diff__56 <= 32'b00000000000000000000000000000000;
+			r_dl_b__56 <= 32'b00000000000000000000000000000000;
+			r_numer__56 <= 0;
+			r_z1__56 <= 32'b00000000000000000000000000000000;
+			r_z0__56 <= 32'b00000000000000000000000000000000;
+			r_mut__56 <= 32'b00000000000000000000000000000000;
+
+			r_x__55	<= 32'b00000000000000000000000000000000;
+			r_y__55	<= 32'b00000000000000000000000000000000;
+			r_z__55	<= 32'b00000000000000000000000000000000;
+			r_ux__55	<= 32'b00000000000000000000000000000000;
+			r_uy__55	<= 32'b00000000000000000000000000000000;
+			r_uz__55	<= 32'b00000000000000000000000000000000;
+			r_sz__55	<= 32'b00000000000000000000000000000000;
+			r_sr__55	<= 32'b00000000000000000000000000000000;
+			r_sleftz__55	<= 32'b00000000000000000000000000000000;
+			r_sleftr__55	<= 32'b00000000000000000000000000000000;
+			r_weight__55	<= 32'b00000000000000000000000000000000;
+			r_layer__55	<= 3'b000;
+			r_dead__55	<= 1'b1;
+			r_hit__55	<= 1'b0;
+			r_diff__55 <= 32'b00000000000000000000000000000000;
+			r_dl_b__55 <= 32'b00000000000000000000000000000000;
+			r_numer__55 <= 0;
+			r_z1__55 <= 32'b00000000000000000000000000000000;
+			r_z0__55 <= 32'b00000000000000000000000000000000;
+			r_mut__55 <= 32'b00000000000000000000000000000000;
+
+			r_x__54	<= 32'b00000000000000000000000000000000;
+			r_y__54	<= 32'b00000000000000000000000000000000;
+			r_z__54	<= 32'b00000000000000000000000000000000;
+			r_ux__54	<= 32'b00000000000000000000000000000000;
+			r_uy__54	<= 32'b00000000000000000000000000000000;
+			r_uz__54	<= 32'b00000000000000000000000000000000;
+			r_sz__54	<= 32'b00000000000000000000000000000000;
+			r_sr__54	<= 32'b00000000000000000000000000000000;
+			r_sleftz__54	<= 32'b00000000000000000000000000000000;
+			r_sleftr__54	<= 32'b00000000000000000000000000000000;
+			r_weight__54	<= 32'b00000000000000000000000000000000;
+			r_layer__54	<= 3'b000;
+			r_dead__54	<= 1'b1;
+			r_hit__54	<= 1'b0;
+			r_diff__54 <= 32'b00000000000000000000000000000000;
+			r_dl_b__54 <= 32'b00000000000000000000000000000000;
+			r_numer__54 <= 0;
+			r_z1__54 <= 32'b00000000000000000000000000000000;
+			r_z0__54 <= 32'b00000000000000000000000000000000;
+			r_mut__54 <= 32'b00000000000000000000000000000000;
+
+			r_x__53	<= 32'b00000000000000000000000000000000;
+			r_y__53	<= 32'b00000000000000000000000000000000;
+			r_z__53	<= 32'b00000000000000000000000000000000;
+			r_ux__53	<= 32'b00000000000000000000000000000000;
+			r_uy__53	<= 32'b00000000000000000000000000000000;
+			r_uz__53	<= 32'b00000000000000000000000000000000;
+			r_sz__53	<= 32'b00000000000000000000000000000000;
+			r_sr__53	<= 32'b00000000000000000000000000000000;
+			r_sleftz__53	<= 32'b00000000000000000000000000000000;
+			r_sleftr__53	<= 32'b00000000000000000000000000000000;
+			r_weight__53	<= 32'b00000000000000000000000000000000;
+			r_layer__53	<= 3'b000;
+			r_dead__53	<= 1'b1;
+			r_hit__53	<= 1'b0;
+			r_diff__53 <= 32'b00000000000000000000000000000000;
+			r_dl_b__53 <= 32'b00000000000000000000000000000000;
+			r_numer__53 <= 0;
+			r_z1__53 <= 32'b00000000000000000000000000000000;
+			r_z0__53 <= 32'b00000000000000000000000000000000;
+			r_mut__53 <= 32'b00000000000000000000000000000000;
+
+			r_x__52	<= 32'b00000000000000000000000000000000;
+			r_y__52	<= 32'b00000000000000000000000000000000;
+			r_z__52	<= 32'b00000000000000000000000000000000;
+			r_ux__52	<= 32'b00000000000000000000000000000000;
+			r_uy__52	<= 32'b00000000000000000000000000000000;
+			r_uz__52	<= 32'b00000000000000000000000000000000;
+			r_sz__52	<= 32'b00000000000000000000000000000000;
+			r_sr__52	<= 32'b00000000000000000000000000000000;
+			r_sleftz__52	<= 32'b00000000000000000000000000000000;
+			r_sleftr__52	<= 32'b00000000000000000000000000000000;
+			r_weight__52	<= 32'b00000000000000000000000000000000;
+			r_layer__52	<= 3'b000;
+			r_dead__52	<= 1'b1;
+			r_hit__52	<= 1'b0;
+			r_diff__52 <= 32'b00000000000000000000000000000000;
+			r_dl_b__52 <= 32'b00000000000000000000000000000000;
+			r_numer__52 <= 0;
+			r_z1__52 <= 32'b00000000000000000000000000000000;
+			r_z0__52 <= 32'b00000000000000000000000000000000;
+			r_mut__52 <= 32'b00000000000000000000000000000000;
+
+			r_x__51	<= 32'b00000000000000000000000000000000;
+			r_y__51	<= 32'b00000000000000000000000000000000;
+			r_z__51	<= 32'b00000000000000000000000000000000;
+			r_ux__51	<= 32'b00000000000000000000000000000000;
+			r_uy__51	<= 32'b00000000000000000000000000000000;
+			r_uz__51	<= 32'b00000000000000000000000000000000;
+			r_sz__51	<= 32'b00000000000000000000000000000000;
+			r_sr__51	<= 32'b00000000000000000000000000000000;
+			r_sleftz__51	<= 32'b00000000000000000000000000000000;
+			r_sleftr__51	<= 32'b00000000000000000000000000000000;
+			r_weight__51	<= 32'b00000000000000000000000000000000;
+			r_layer__51	<= 3'b000;
+			r_dead__51	<= 1'b1;
+			r_hit__51	<= 1'b0;
+			r_diff__51 <= 32'b00000000000000000000000000000000;
+			r_dl_b__51 <= 32'b00000000000000000000000000000000;
+			r_numer__51 <= 0;
+			r_z1__51 <= 32'b00000000000000000000000000000000;
+			r_z0__51 <= 32'b00000000000000000000000000000000;
+			r_mut__51 <= 32'b00000000000000000000000000000000;
+
+			r_x__50	<= 32'b00000000000000000000000000000000;
+			r_y__50	<= 32'b00000000000000000000000000000000;
+			r_z__50	<= 32'b00000000000000000000000000000000;
+			r_ux__50	<= 32'b00000000000000000000000000000000;
+			r_uy__50	<= 32'b00000000000000000000000000000000;
+			r_uz__50	<= 32'b00000000000000000000000000000000;
+			r_sz__50	<= 32'b00000000000000000000000000000000;
+			r_sr__50	<= 32'b00000000000000000000000000000000;
+			r_sleftz__50	<= 32'b00000000000000000000000000000000;
+			r_sleftr__50	<= 32'b00000000000000000000000000000000;
+			r_weight__50	<= 32'b00000000000000000000000000000000;
+			r_layer__50	<= 3'b000;
+			r_dead__50	<= 1'b1;
+			r_hit__50	<= 1'b0;
+			r_diff__50 <= 32'b00000000000000000000000000000000;
+			r_dl_b__50 <= 32'b00000000000000000000000000000000;
+			r_numer__50 <= 0;
+			r_z1__50 <= 32'b00000000000000000000000000000000;
+			r_z0__50 <= 32'b00000000000000000000000000000000;
+			r_mut__50 <= 32'b00000000000000000000000000000000;
+
+			r_x__49	<= 32'b00000000000000000000000000000000;
+			r_y__49	<= 32'b00000000000000000000000000000000;
+			r_z__49	<= 32'b00000000000000000000000000000000;
+			r_ux__49	<= 32'b00000000000000000000000000000000;
+			r_uy__49	<= 32'b00000000000000000000000000000000;
+			r_uz__49	<= 32'b00000000000000000000000000000000;
+			r_sz__49	<= 32'b00000000000000000000000000000000;
+			r_sr__49	<= 32'b00000000000000000000000000000000;
+			r_sleftz__49	<= 32'b00000000000000000000000000000000;
+			r_sleftr__49	<= 32'b00000000000000000000000000000000;
+			r_weight__49	<= 32'b00000000000000000000000000000000;
+			r_layer__49	<= 3'b000;
+			r_dead__49	<= 1'b1;
+			r_hit__49	<= 1'b0;
+			r_diff__49 <= 32'b00000000000000000000000000000000;
+			r_dl_b__49 <= 32'b00000000000000000000000000000000;
+			r_numer__49 <= 0;
+			r_z1__49 <= 32'b00000000000000000000000000000000;
+			r_z0__49 <= 32'b00000000000000000000000000000000;
+			r_mut__49 <= 32'b00000000000000000000000000000000;
+
+			r_x__48	<= 32'b00000000000000000000000000000000;
+			r_y__48	<= 32'b00000000000000000000000000000000;
+			r_z__48	<= 32'b00000000000000000000000000000000;
+			r_ux__48	<= 32'b00000000000000000000000000000000;
+			r_uy__48	<= 32'b00000000000000000000000000000000;
+			r_uz__48	<= 32'b00000000000000000000000000000000;
+			r_sz__48	<= 32'b00000000000000000000000000000000;
+			r_sr__48	<= 32'b00000000000000000000000000000000;
+			r_sleftz__48	<= 32'b00000000000000000000000000000000;
+			r_sleftr__48	<= 32'b00000000000000000000000000000000;
+			r_weight__48	<= 32'b00000000000000000000000000000000;
+			r_layer__48	<= 3'b000;
+			r_dead__48	<= 1'b1;
+			r_hit__48	<= 1'b0;
+			r_diff__48 <= 32'b00000000000000000000000000000000;
+			r_dl_b__48 <= 32'b00000000000000000000000000000000;
+			r_numer__48 <= 0;
+			r_z1__48 <= 32'b00000000000000000000000000000000;
+			r_z0__48 <= 32'b00000000000000000000000000000000;
+			r_mut__48 <= 32'b00000000000000000000000000000000;
+
+			r_x__47	<= 32'b00000000000000000000000000000000;
+			r_y__47	<= 32'b00000000000000000000000000000000;
+			r_z__47	<= 32'b00000000000000000000000000000000;
+			r_ux__47	<= 32'b00000000000000000000000000000000;
+			r_uy__47	<= 32'b00000000000000000000000000000000;
+			r_uz__47	<= 32'b00000000000000000000000000000000;
+			r_sz__47	<= 32'b00000000000000000000000000000000;
+			r_sr__47	<= 32'b00000000000000000000000000000000;
+			r_sleftz__47	<= 32'b00000000000000000000000000000000;
+			r_sleftr__47	<= 32'b00000000000000000000000000000000;
+			r_weight__47	<= 32'b00000000000000000000000000000000;
+			r_layer__47	<= 3'b000;
+			r_dead__47	<= 1'b1;
+			r_hit__47	<= 1'b0;
+			r_diff__47 <= 32'b00000000000000000000000000000000;
+			r_dl_b__47 <= 32'b00000000000000000000000000000000;
+			r_numer__47 <= 0;
+			r_z1__47 <= 32'b00000000000000000000000000000000;
+			r_z0__47 <= 32'b00000000000000000000000000000000;
+			r_mut__47 <= 32'b00000000000000000000000000000000;
+
+			r_x__46	<= 32'b00000000000000000000000000000000;
+			r_y__46	<= 32'b00000000000000000000000000000000;
+			r_z__46	<= 32'b00000000000000000000000000000000;
+			r_ux__46	<= 32'b00000000000000000000000000000000;
+			r_uy__46	<= 32'b00000000000000000000000000000000;
+			r_uz__46	<= 32'b00000000000000000000000000000000;
+			r_sz__46	<= 32'b00000000000000000000000000000000;
+			r_sr__46	<= 32'b00000000000000000000000000000000;
+			r_sleftz__46	<= 32'b00000000000000000000000000000000;
+			r_sleftr__46	<= 32'b00000000000000000000000000000000;
+			r_weight__46	<= 32'b00000000000000000000000000000000;
+			r_layer__46	<= 3'b000;
+			r_dead__46	<= 1'b1;
+			r_hit__46	<= 1'b0;
+			r_diff__46 <= 32'b00000000000000000000000000000000;
+			r_dl_b__46 <= 32'b00000000000000000000000000000000;
+			r_numer__46 <= 0;
+			r_z1__46 <= 32'b00000000000000000000000000000000;
+			r_z0__46 <= 32'b00000000000000000000000000000000;
+			r_mut__46 <= 32'b00000000000000000000000000000000;
+
+			r_x__45	<= 32'b00000000000000000000000000000000;
+			r_y__45	<= 32'b00000000000000000000000000000000;
+			r_z__45	<= 32'b00000000000000000000000000000000;
+			r_ux__45	<= 32'b00000000000000000000000000000000;
+			r_uy__45	<= 32'b00000000000000000000000000000000;
+			r_uz__45	<= 32'b00000000000000000000000000000000;
+			r_sz__45	<= 32'b00000000000000000000000000000000;
+			r_sr__45	<= 32'b00000000000000000000000000000000;
+			r_sleftz__45	<= 32'b00000000000000000000000000000000;
+			r_sleftr__45	<= 32'b00000000000000000000000000000000;
+			r_weight__45	<= 32'b00000000000000000000000000000000;
+			r_layer__45	<= 3'b000;
+			r_dead__45	<= 1'b1;
+			r_hit__45	<= 1'b0;
+			r_diff__45 <= 32'b00000000000000000000000000000000;
+			r_dl_b__45 <= 32'b00000000000000000000000000000000;
+			r_numer__45 <= 0;
+			r_z1__45 <= 32'b00000000000000000000000000000000;
+			r_z0__45 <= 32'b00000000000000000000000000000000;
+			r_mut__45 <= 32'b00000000000000000000000000000000;
+
+			r_x__44	<= 32'b00000000000000000000000000000000;
+			r_y__44	<= 32'b00000000000000000000000000000000;
+			r_z__44	<= 32'b00000000000000000000000000000000;
+			r_ux__44	<= 32'b00000000000000000000000000000000;
+			r_uy__44	<= 32'b00000000000000000000000000000000;
+			r_uz__44	<= 32'b00000000000000000000000000000000;
+			r_sz__44	<= 32'b00000000000000000000000000000000;
+			r_sr__44	<= 32'b00000000000000000000000000000000;
+			r_sleftz__44	<= 32'b00000000000000000000000000000000;
+			r_sleftr__44	<= 32'b00000000000000000000000000000000;
+			r_weight__44	<= 32'b00000000000000000000000000000000;
+			r_layer__44	<= 3'b000;
+			r_dead__44	<= 1'b1;
+			r_hit__44	<= 1'b0;
+			r_diff__44 <= 32'b00000000000000000000000000000000;
+			r_dl_b__44 <= 32'b00000000000000000000000000000000;
+			r_numer__44 <= 0;
+			r_z1__44 <= 32'b00000000000000000000000000000000;
+			r_z0__44 <= 32'b00000000000000000000000000000000;
+			r_mut__44 <= 32'b00000000000000000000000000000000;
+
+			r_x__43	<= 32'b00000000000000000000000000000000;
+			r_y__43	<= 32'b00000000000000000000000000000000;
+			r_z__43	<= 32'b00000000000000000000000000000000;
+			r_ux__43	<= 32'b00000000000000000000000000000000;
+			r_uy__43	<= 32'b00000000000000000000000000000000;
+			r_uz__43	<= 32'b00000000000000000000000000000000;
+			r_sz__43	<= 32'b00000000000000000000000000000000;
+			r_sr__43	<= 32'b00000000000000000000000000000000;
+			r_sleftz__43	<= 32'b00000000000000000000000000000000;
+			r_sleftr__43	<= 32'b00000000000000000000000000000000;
+			r_weight__43	<= 32'b00000000000000000000000000000000;
+			r_layer__43	<= 3'b000;
+			r_dead__43	<= 1'b1;
+			r_hit__43	<= 1'b0;
+			r_diff__43 <= 32'b00000000000000000000000000000000;
+			r_dl_b__43 <= 32'b00000000000000000000000000000000;
+			r_numer__43 <= 0;
+			r_z1__43 <= 32'b00000000000000000000000000000000;
+			r_z0__43 <= 32'b00000000000000000000000000000000;
+			r_mut__43 <= 32'b00000000000000000000000000000000;
+
+			r_x__42	<= 32'b00000000000000000000000000000000;
+			r_y__42	<= 32'b00000000000000000000000000000000;
+			r_z__42	<= 32'b00000000000000000000000000000000;
+			r_ux__42	<= 32'b00000000000000000000000000000000;
+			r_uy__42	<= 32'b00000000000000000000000000000000;
+			r_uz__42	<= 32'b00000000000000000000000000000000;
+			r_sz__42	<= 32'b00000000000000000000000000000000;
+			r_sr__42	<= 32'b00000000000000000000000000000000;
+			r_sleftz__42	<= 32'b00000000000000000000000000000000;
+			r_sleftr__42	<= 32'b00000000000000000000000000000000;
+			r_weight__42	<= 32'b00000000000000000000000000000000;
+			r_layer__42	<= 3'b000;
+			r_dead__42	<= 1'b1;
+			r_hit__42	<= 1'b0;
+			r_diff__42 <= 32'b00000000000000000000000000000000;
+			r_dl_b__42 <= 32'b00000000000000000000000000000000;
+			r_numer__42 <= 0;
+			r_z1__42 <= 32'b00000000000000000000000000000000;
+			r_z0__42 <= 32'b00000000000000000000000000000000;
+			r_mut__42 <= 32'b00000000000000000000000000000000;
+
+			r_x__41	<= 32'b00000000000000000000000000000000;
+			r_y__41	<= 32'b00000000000000000000000000000000;
+			r_z__41	<= 32'b00000000000000000000000000000000;
+			r_ux__41	<= 32'b00000000000000000000000000000000;
+			r_uy__41	<= 32'b00000000000000000000000000000000;
+			r_uz__41	<= 32'b00000000000000000000000000000000;
+			r_sz__41	<= 32'b00000000000000000000000000000000;
+			r_sr__41	<= 32'b00000000000000000000000000000000;
+			r_sleftz__41	<= 32'b00000000000000000000000000000000;
+			r_sleftr__41	<= 32'b00000000000000000000000000000000;
+			r_weight__41	<= 32'b00000000000000000000000000000000;
+			r_layer__41	<= 3'b000;
+			r_dead__41	<= 1'b1;
+			r_hit__41	<= 1'b0;
+			r_diff__41 <= 32'b00000000000000000000000000000000;
+			r_dl_b__41 <= 32'b00000000000000000000000000000000;
+			r_numer__41 <= 0;
+			r_z1__41 <= 32'b00000000000000000000000000000000;
+			r_z0__41 <= 32'b00000000000000000000000000000000;
+			r_mut__41 <= 32'b00000000000000000000000000000000;
+
+			r_x__40	<= 32'b00000000000000000000000000000000;
+			r_y__40	<= 32'b00000000000000000000000000000000;
+			r_z__40	<= 32'b00000000000000000000000000000000;
+			r_ux__40	<= 32'b00000000000000000000000000000000;
+			r_uy__40	<= 32'b00000000000000000000000000000000;
+			r_uz__40	<= 32'b00000000000000000000000000000000;
+			r_sz__40	<= 32'b00000000000000000000000000000000;
+			r_sr__40	<= 32'b00000000000000000000000000000000;
+			r_sleftz__40	<= 32'b00000000000000000000000000000000;
+			r_sleftr__40	<= 32'b00000000000000000000000000000000;
+			r_weight__40	<= 32'b00000000000000000000000000000000;
+			r_layer__40	<= 3'b000;
+			r_dead__40	<= 1'b1;
+			r_hit__40	<= 1'b0;
+			r_diff__40 <= 32'b00000000000000000000000000000000;
+			r_dl_b__40 <= 32'b00000000000000000000000000000000;
+			r_numer__40 <= 0;
+			r_z1__40 <= 32'b00000000000000000000000000000000;
+			r_z0__40 <= 32'b00000000000000000000000000000000;
+			r_mut__40 <= 32'b00000000000000000000000000000000;
+
+			r_x__39	<= 32'b00000000000000000000000000000000;
+			r_y__39	<= 32'b00000000000000000000000000000000;
+			r_z__39	<= 32'b00000000000000000000000000000000;
+			r_ux__39	<= 32'b00000000000000000000000000000000;
+			r_uy__39	<= 32'b00000000000000000000000000000000;
+			r_uz__39	<= 32'b00000000000000000000000000000000;
+			r_sz__39	<= 32'b00000000000000000000000000000000;
+			r_sr__39	<= 32'b00000000000000000000000000000000;
+			r_sleftz__39	<= 32'b00000000000000000000000000000000;
+			r_sleftr__39	<= 32'b00000000000000000000000000000000;
+			r_weight__39	<= 32'b00000000000000000000000000000000;
+			r_layer__39	<= 3'b000;
+			r_dead__39	<= 1'b1;
+			r_hit__39	<= 1'b0;
+			r_diff__39 <= 32'b00000000000000000000000000000000;
+			r_dl_b__39 <= 32'b00000000000000000000000000000000;
+			r_numer__39 <= 0;
+			r_z1__39 <= 32'b00000000000000000000000000000000;
+			r_z0__39 <= 32'b00000000000000000000000000000000;
+			r_mut__39 <= 32'b00000000000000000000000000000000;
+
+			r_x__38	<= 32'b00000000000000000000000000000000;
+			r_y__38	<= 32'b00000000000000000000000000000000;
+			r_z__38	<= 32'b00000000000000000000000000000000;
+			r_ux__38	<= 32'b00000000000000000000000000000000;
+			r_uy__38	<= 32'b00000000000000000000000000000000;
+			r_uz__38	<= 32'b00000000000000000000000000000000;
+			r_sz__38	<= 32'b00000000000000000000000000000000;
+			r_sr__38	<= 32'b00000000000000000000000000000000;
+			r_sleftz__38	<= 32'b00000000000000000000000000000000;
+			r_sleftr__38	<= 32'b00000000000000000000000000000000;
+			r_weight__38	<= 32'b00000000000000000000000000000000;
+			r_layer__38	<= 3'b000;
+			r_dead__38	<= 1'b1;
+			r_hit__38	<= 1'b0;
+			r_diff__38 <= 32'b00000000000000000000000000000000;
+			r_dl_b__38 <= 32'b00000000000000000000000000000000;
+			r_numer__38 <= 0;
+			r_z1__38 <= 32'b00000000000000000000000000000000;
+			r_z0__38 <= 32'b00000000000000000000000000000000;
+			r_mut__38 <= 32'b00000000000000000000000000000000;
+
+			r_x__37	<= 32'b00000000000000000000000000000000;
+			r_y__37	<= 32'b00000000000000000000000000000000;
+			r_z__37	<= 32'b00000000000000000000000000000000;
+			r_ux__37	<= 32'b00000000000000000000000000000000;
+			r_uy__37	<= 32'b00000000000000000000000000000000;
+			r_uz__37	<= 32'b00000000000000000000000000000000;
+			r_sz__37	<= 32'b00000000000000000000000000000000;
+			r_sr__37	<= 32'b00000000000000000000000000000000;
+			r_sleftz__37	<= 32'b00000000000000000000000000000000;
+			r_sleftr__37	<= 32'b00000000000000000000000000000000;
+			r_weight__37	<= 32'b00000000000000000000000000000000;
+			r_layer__37	<= 3'b000;
+			r_dead__37	<= 1'b1;
+			r_hit__37	<= 1'b0;
+			r_diff__37 <= 32'b00000000000000000000000000000000;
+			r_dl_b__37 <= 32'b00000000000000000000000000000000;
+			r_numer__37 <= 0;
+			r_z1__37 <= 32'b00000000000000000000000000000000;
+			r_z0__37 <= 32'b00000000000000000000000000000000;
+			r_mut__37 <= 32'b00000000000000000000000000000000;
+
+			r_x__36	<= 32'b00000000000000000000000000000000;
+			r_y__36	<= 32'b00000000000000000000000000000000;
+			r_z__36	<= 32'b00000000000000000000000000000000;
+			r_ux__36	<= 32'b00000000000000000000000000000000;
+			r_uy__36	<= 32'b00000000000000000000000000000000;
+			r_uz__36	<= 32'b00000000000000000000000000000000;
+			r_sz__36	<= 32'b00000000000000000000000000000000;
+			r_sr__36	<= 32'b00000000000000000000000000000000;
+			r_sleftz__36	<= 32'b00000000000000000000000000000000;
+			r_sleftr__36	<= 32'b00000000000000000000000000000000;
+			r_weight__36	<= 32'b00000000000000000000000000000000;
+			r_layer__36	<= 3'b000;
+			r_dead__36	<= 1'b1;
+			r_hit__36	<= 1'b0;
+			r_diff__36 <= 32'b00000000000000000000000000000000;
+			r_dl_b__36 <= 32'b00000000000000000000000000000000;
+			r_numer__36 <= 0;
+			r_z1__36 <= 32'b00000000000000000000000000000000;
+			r_z0__36 <= 32'b00000000000000000000000000000000;
+			r_mut__36 <= 32'b00000000000000000000000000000000;
+
+			r_x__35	<= 32'b00000000000000000000000000000000;
+			r_y__35	<= 32'b00000000000000000000000000000000;
+			r_z__35	<= 32'b00000000000000000000000000000000;
+			r_ux__35	<= 32'b00000000000000000000000000000000;
+			r_uy__35	<= 32'b00000000000000000000000000000000;
+			r_uz__35	<= 32'b00000000000000000000000000000000;
+			r_sz__35	<= 32'b00000000000000000000000000000000;
+			r_sr__35	<= 32'b00000000000000000000000000000000;
+			r_sleftz__35	<= 32'b00000000000000000000000000000000;
+			r_sleftr__35	<= 32'b00000000000000000000000000000000;
+			r_weight__35	<= 32'b00000000000000000000000000000000;
+			r_layer__35	<= 3'b000;
+			r_dead__35	<= 1'b1;
+			r_hit__35	<= 1'b0;
+			r_diff__35 <= 32'b00000000000000000000000000000000;
+			r_dl_b__35 <= 32'b00000000000000000000000000000000;
+			r_numer__35 <= 0;
+			r_z1__35 <= 32'b00000000000000000000000000000000;
+			r_z0__35 <= 32'b00000000000000000000000000000000;
+			r_mut__35 <= 32'b00000000000000000000000000000000;
+
+			r_x__34	<= 32'b00000000000000000000000000000000;
+			r_y__34	<= 32'b00000000000000000000000000000000;
+			r_z__34	<= 32'b00000000000000000000000000000000;
+			r_ux__34	<= 32'b00000000000000000000000000000000;
+			r_uy__34	<= 32'b00000000000000000000000000000000;
+			r_uz__34	<= 32'b00000000000000000000000000000000;
+			r_sz__34	<= 32'b00000000000000000000000000000000;
+			r_sr__34	<= 32'b00000000000000000000000000000000;
+			r_sleftz__34	<= 32'b00000000000000000000000000000000;
+			r_sleftr__34	<= 32'b00000000000000000000000000000000;
+			r_weight__34	<= 32'b00000000000000000000000000000000;
+			r_layer__34	<= 3'b000;
+			r_dead__34	<= 1'b1;
+			r_hit__34	<= 1'b0;
+			r_diff__34 <= 32'b00000000000000000000000000000000;
+			r_dl_b__34 <= 32'b00000000000000000000000000000000;
+			r_numer__34 <= 0;
+			r_z1__34 <= 32'b00000000000000000000000000000000;
+			r_z0__34 <= 32'b00000000000000000000000000000000;
+			r_mut__34 <= 32'b00000000000000000000000000000000;
+
+			r_x__33	<= 32'b00000000000000000000000000000000;
+			r_y__33	<= 32'b00000000000000000000000000000000;
+			r_z__33	<= 32'b00000000000000000000000000000000;
+			r_ux__33	<= 32'b00000000000000000000000000000000;
+			r_uy__33	<= 32'b00000000000000000000000000000000;
+			r_uz__33	<= 32'b00000000000000000000000000000000;
+			r_sz__33	<= 32'b00000000000000000000000000000000;
+			r_sr__33	<= 32'b00000000000000000000000000000000;
+			r_sleftz__33	<= 32'b00000000000000000000000000000000;
+			r_sleftr__33	<= 32'b00000000000000000000000000000000;
+			r_weight__33	<= 32'b00000000000000000000000000000000;
+			r_layer__33	<= 3'b000;
+			r_dead__33	<= 1'b1;
+			r_hit__33	<= 1'b0;
+			r_diff__33 <= 32'b00000000000000000000000000000000;
+			r_dl_b__33 <= 32'b00000000000000000000000000000000;
+			r_numer__33 <= 0;
+			r_z1__33 <= 32'b00000000000000000000000000000000;
+			r_z0__33 <= 32'b00000000000000000000000000000000;
+			r_mut__33 <= 32'b00000000000000000000000000000000;
+
+			r_x__32	<= 32'b00000000000000000000000000000000;
+			r_y__32	<= 32'b00000000000000000000000000000000;
+			r_z__32	<= 32'b00000000000000000000000000000000;
+			r_ux__32	<= 32'b00000000000000000000000000000000;
+			r_uy__32	<= 32'b00000000000000000000000000000000;
+			r_uz__32	<= 32'b00000000000000000000000000000000;
+			r_sz__32	<= 32'b00000000000000000000000000000000;
+			r_sr__32	<= 32'b00000000000000000000000000000000;
+			r_sleftz__32	<= 32'b00000000000000000000000000000000;
+			r_sleftr__32	<= 32'b00000000000000000000000000000000;
+			r_weight__32	<= 32'b00000000000000000000000000000000;
+			r_layer__32	<= 3'b000;
+			r_dead__32	<= 1'b1;
+			r_hit__32	<= 1'b0;
+			r_diff__32 <= 32'b00000000000000000000000000000000;
+			r_dl_b__32 <= 32'b00000000000000000000000000000000;
+			r_numer__32 <= 0;
+			r_z1__32 <= 32'b00000000000000000000000000000000;
+			r_z0__32 <= 32'b00000000000000000000000000000000;
+			r_mut__32 <= 32'b00000000000000000000000000000000;
+
+			r_x__31	<= 32'b00000000000000000000000000000000;
+			r_y__31	<= 32'b00000000000000000000000000000000;
+			r_z__31	<= 32'b00000000000000000000000000000000;
+			r_ux__31	<= 32'b00000000000000000000000000000000;
+			r_uy__31	<= 32'b00000000000000000000000000000000;
+			r_uz__31	<= 32'b00000000000000000000000000000000;
+			r_sz__31	<= 32'b00000000000000000000000000000000;
+			r_sr__31	<= 32'b00000000000000000000000000000000;
+			r_sleftz__31	<= 32'b00000000000000000000000000000000;
+			r_sleftr__31	<= 32'b00000000000000000000000000000000;
+			r_weight__31	<= 32'b00000000000000000000000000000000;
+			r_layer__31	<= 3'b000;
+			r_dead__31	<= 1'b1;
+			r_hit__31	<= 1'b0;
+			r_diff__31 <= 32'b00000000000000000000000000000000;
+			r_dl_b__31 <= 32'b00000000000000000000000000000000;
+			r_numer__31 <= 0;
+			r_z1__31 <= 32'b00000000000000000000000000000000;
+			r_z0__31 <= 32'b00000000000000000000000000000000;
+			r_mut__31 <= 32'b00000000000000000000000000000000;
+
+			r_x__30	<= 32'b00000000000000000000000000000000;
+			r_y__30	<= 32'b00000000000000000000000000000000;
+			r_z__30	<= 32'b00000000000000000000000000000000;
+			r_ux__30	<= 32'b00000000000000000000000000000000;
+			r_uy__30	<= 32'b00000000000000000000000000000000;
+			r_uz__30	<= 32'b00000000000000000000000000000000;
+			r_sz__30	<= 32'b00000000000000000000000000000000;
+			r_sr__30	<= 32'b00000000000000000000000000000000;
+			r_sleftz__30	<= 32'b00000000000000000000000000000000;
+			r_sleftr__30	<= 32'b00000000000000000000000000000000;
+			r_weight__30	<= 32'b00000000000000000000000000000000;
+			r_layer__30	<= 3'b000;
+			r_dead__30	<= 1'b1;
+			r_hit__30	<= 1'b0;
+			r_diff__30 <= 32'b00000000000000000000000000000000;
+			r_dl_b__30 <= 32'b00000000000000000000000000000000;
+			r_numer__30 <= 0;
+			r_z1__30 <= 32'b00000000000000000000000000000000;
+			r_z0__30 <= 32'b00000000000000000000000000000000;
+			r_mut__30 <= 32'b00000000000000000000000000000000;
+
+			r_x__29	<= 32'b00000000000000000000000000000000;
+			r_y__29	<= 32'b00000000000000000000000000000000;
+			r_z__29	<= 32'b00000000000000000000000000000000;
+			r_ux__29	<= 32'b00000000000000000000000000000000;
+			r_uy__29	<= 32'b00000000000000000000000000000000;
+			r_uz__29	<= 32'b00000000000000000000000000000000;
+			r_sz__29	<= 32'b00000000000000000000000000000000;
+			r_sr__29	<= 32'b00000000000000000000000000000000;
+			r_sleftz__29	<= 32'b00000000000000000000000000000000;
+			r_sleftr__29	<= 32'b00000000000000000000000000000000;
+			r_weight__29	<= 32'b00000000000000000000000000000000;
+			r_layer__29	<= 3'b000;
+			r_dead__29	<= 1'b1;
+			r_hit__29	<= 1'b0;
+			r_diff__29 <= 32'b00000000000000000000000000000000;
+			r_dl_b__29 <= 32'b00000000000000000000000000000000;
+			r_numer__29 <= 0;
+			r_z1__29 <= 32'b00000000000000000000000000000000;
+			r_z0__29 <= 32'b00000000000000000000000000000000;
+			r_mut__29 <= 32'b00000000000000000000000000000000;
+
+			r_x__28	<= 32'b00000000000000000000000000000000;
+			r_y__28	<= 32'b00000000000000000000000000000000;
+			r_z__28	<= 32'b00000000000000000000000000000000;
+			r_ux__28	<= 32'b00000000000000000000000000000000;
+			r_uy__28	<= 32'b00000000000000000000000000000000;
+			r_uz__28	<= 32'b00000000000000000000000000000000;
+			r_sz__28	<= 32'b00000000000000000000000000000000;
+			r_sr__28	<= 32'b00000000000000000000000000000000;
+			r_sleftz__28	<= 32'b00000000000000000000000000000000;
+			r_sleftr__28	<= 32'b00000000000000000000000000000000;
+			r_weight__28	<= 32'b00000000000000000000000000000000;
+			r_layer__28	<= 3'b000;
+			r_dead__28	<= 1'b1;
+			r_hit__28	<= 1'b0;
+			r_diff__28 <= 32'b00000000000000000000000000000000;
+			r_dl_b__28 <= 32'b00000000000000000000000000000000;
+			r_numer__28 <= 0;
+			r_z1__28 <= 32'b00000000000000000000000000000000;
+			r_z0__28 <= 32'b00000000000000000000000000000000;
+			r_mut__28 <= 32'b00000000000000000000000000000000;
+
+			r_x__27	<= 32'b00000000000000000000000000000000;
+			r_y__27	<= 32'b00000000000000000000000000000000;
+			r_z__27	<= 32'b00000000000000000000000000000000;
+			r_ux__27	<= 32'b00000000000000000000000000000000;
+			r_uy__27	<= 32'b00000000000000000000000000000000;
+			r_uz__27	<= 32'b00000000000000000000000000000000;
+			r_sz__27	<= 32'b00000000000000000000000000000000;
+			r_sr__27	<= 32'b00000000000000000000000000000000;
+			r_sleftz__27	<= 32'b00000000000000000000000000000000;
+			r_sleftr__27	<= 32'b00000000000000000000000000000000;
+			r_weight__27	<= 32'b00000000000000000000000000000000;
+			r_layer__27	<= 3'b000;
+			r_dead__27	<= 1'b1;
+			r_hit__27	<= 1'b0;
+			r_diff__27 <= 32'b00000000000000000000000000000000;
+			r_dl_b__27 <= 32'b00000000000000000000000000000000;
+			r_numer__27 <= 0;
+			r_z1__27 <= 32'b00000000000000000000000000000000;
+			r_z0__27 <= 32'b00000000000000000000000000000000;
+			r_mut__27 <= 32'b00000000000000000000000000000000;
+
+			r_x__26	<= 32'b00000000000000000000000000000000;
+			r_y__26	<= 32'b00000000000000000000000000000000;
+			r_z__26	<= 32'b00000000000000000000000000000000;
+			r_ux__26	<= 32'b00000000000000000000000000000000;
+			r_uy__26	<= 32'b00000000000000000000000000000000;
+			r_uz__26	<= 32'b00000000000000000000000000000000;
+			r_sz__26	<= 32'b00000000000000000000000000000000;
+			r_sr__26	<= 32'b00000000000000000000000000000000;
+			r_sleftz__26	<= 32'b00000000000000000000000000000000;
+			r_sleftr__26	<= 32'b00000000000000000000000000000000;
+			r_weight__26	<= 32'b00000000000000000000000000000000;
+			r_layer__26	<= 3'b000;
+			r_dead__26	<= 1'b1;
+			r_hit__26	<= 1'b0;
+			r_diff__26 <= 32'b00000000000000000000000000000000;
+			r_dl_b__26 <= 32'b00000000000000000000000000000000;
+			r_numer__26 <= 0;
+			r_z1__26 <= 32'b00000000000000000000000000000000;
+			r_z0__26 <= 32'b00000000000000000000000000000000;
+			r_mut__26 <= 32'b00000000000000000000000000000000;
+
+			r_x__25	<= 32'b00000000000000000000000000000000;
+			r_y__25	<= 32'b00000000000000000000000000000000;
+			r_z__25	<= 32'b00000000000000000000000000000000;
+			r_ux__25	<= 32'b00000000000000000000000000000000;
+			r_uy__25	<= 32'b00000000000000000000000000000000;
+			r_uz__25	<= 32'b00000000000000000000000000000000;
+			r_sz__25	<= 32'b00000000000000000000000000000000;
+			r_sr__25	<= 32'b00000000000000000000000000000000;
+			r_sleftz__25	<= 32'b00000000000000000000000000000000;
+			r_sleftr__25	<= 32'b00000000000000000000000000000000;
+			r_weight__25	<= 32'b00000000000000000000000000000000;
+			r_layer__25	<= 3'b000;
+			r_dead__25	<= 1'b1;
+			r_hit__25	<= 1'b0;
+			r_diff__25 <= 32'b00000000000000000000000000000000;
+			r_dl_b__25 <= 32'b00000000000000000000000000000000;
+			r_numer__25 <= 0;
+			r_z1__25 <= 32'b00000000000000000000000000000000;
+			r_z0__25 <= 32'b00000000000000000000000000000000;
+			r_mut__25 <= 32'b00000000000000000000000000000000;
+
+			r_x__24	<= 32'b00000000000000000000000000000000;
+			r_y__24	<= 32'b00000000000000000000000000000000;
+			r_z__24	<= 32'b00000000000000000000000000000000;
+			r_ux__24	<= 32'b00000000000000000000000000000000;
+			r_uy__24	<= 32'b00000000000000000000000000000000;
+			r_uz__24	<= 32'b00000000000000000000000000000000;
+			r_sz__24	<= 32'b00000000000000000000000000000000;
+			r_sr__24	<= 32'b00000000000000000000000000000000;
+			r_sleftz__24	<= 32'b00000000000000000000000000000000;
+			r_sleftr__24	<= 32'b00000000000000000000000000000000;
+			r_weight__24	<= 32'b00000000000000000000000000000000;
+			r_layer__24	<= 3'b000;
+			r_dead__24	<= 1'b1;
+			r_hit__24	<= 1'b0;
+			r_diff__24 <= 32'b00000000000000000000000000000000;
+			r_dl_b__24 <= 32'b00000000000000000000000000000000;
+			r_numer__24 <= 0;
+			r_z1__24 <= 32'b00000000000000000000000000000000;
+			r_z0__24 <= 32'b00000000000000000000000000000000;
+			r_mut__24 <= 32'b00000000000000000000000000000000;
+
+			r_x__23	<= 32'b00000000000000000000000000000000;
+			r_y__23	<= 32'b00000000000000000000000000000000;
+			r_z__23	<= 32'b00000000000000000000000000000000;
+			r_ux__23	<= 32'b00000000000000000000000000000000;
+			r_uy__23	<= 32'b00000000000000000000000000000000;
+			r_uz__23	<= 32'b00000000000000000000000000000000;
+			r_sz__23	<= 32'b00000000000000000000000000000000;
+			r_sr__23	<= 32'b00000000000000000000000000000000;
+			r_sleftz__23	<= 32'b00000000000000000000000000000000;
+			r_sleftr__23	<= 32'b00000000000000000000000000000000;
+			r_weight__23	<= 32'b00000000000000000000000000000000;
+			r_layer__23	<= 3'b000;
+			r_dead__23	<= 1'b1;
+			r_hit__23	<= 1'b0;
+			r_diff__23 <= 32'b00000000000000000000000000000000;
+			r_dl_b__23 <= 32'b00000000000000000000000000000000;
+			r_numer__23 <= 0;
+			r_z1__23 <= 32'b00000000000000000000000000000000;
+			r_z0__23 <= 32'b00000000000000000000000000000000;
+			r_mut__23 <= 32'b00000000000000000000000000000000;
+
+			r_x__22	<= 32'b00000000000000000000000000000000;
+			r_y__22	<= 32'b00000000000000000000000000000000;
+			r_z__22	<= 32'b00000000000000000000000000000000;
+			r_ux__22	<= 32'b00000000000000000000000000000000;
+			r_uy__22	<= 32'b00000000000000000000000000000000;
+			r_uz__22	<= 32'b00000000000000000000000000000000;
+			r_sz__22	<= 32'b00000000000000000000000000000000;
+			r_sr__22	<= 32'b00000000000000000000000000000000;
+			r_sleftz__22	<= 32'b00000000000000000000000000000000;
+			r_sleftr__22	<= 32'b00000000000000000000000000000000;
+			r_weight__22	<= 32'b00000000000000000000000000000000;
+			r_layer__22	<= 3'b000;
+			r_dead__22	<= 1'b1;
+			r_hit__22	<= 1'b0;
+			r_diff__22 <= 32'b00000000000000000000000000000000;
+			r_dl_b__22 <= 32'b00000000000000000000000000000000;
+			r_numer__22 <= 0;
+			r_z1__22 <= 32'b00000000000000000000000000000000;
+			r_z0__22 <= 32'b00000000000000000000000000000000;
+			r_mut__22 <= 32'b00000000000000000000000000000000;
+
+			r_x__21	<= 32'b00000000000000000000000000000000;
+			r_y__21	<= 32'b00000000000000000000000000000000;
+			r_z__21	<= 32'b00000000000000000000000000000000;
+			r_ux__21	<= 32'b00000000000000000000000000000000;
+			r_uy__21	<= 32'b00000000000000000000000000000000;
+			r_uz__21	<= 32'b00000000000000000000000000000000;
+			r_sz__21	<= 32'b00000000000000000000000000000000;
+			r_sr__21	<= 32'b00000000000000000000000000000000;
+			r_sleftz__21	<= 32'b00000000000000000000000000000000;
+			r_sleftr__21	<= 32'b00000000000000000000000000000000;
+			r_weight__21	<= 32'b00000000000000000000000000000000;
+			r_layer__21	<= 3'b000;
+			r_dead__21	<= 1'b1;
+			r_hit__21	<= 1'b0;
+			r_diff__21 <= 32'b00000000000000000000000000000000;
+			r_dl_b__21 <= 32'b00000000000000000000000000000000;
+			r_numer__21 <= 0;
+			r_z1__21 <= 32'b00000000000000000000000000000000;
+			r_z0__21 <= 32'b00000000000000000000000000000000;
+			r_mut__21 <= 32'b00000000000000000000000000000000;
+
+			r_x__20	<= 32'b00000000000000000000000000000000;
+			r_y__20	<= 32'b00000000000000000000000000000000;
+			r_z__20	<= 32'b00000000000000000000000000000000;
+			r_ux__20	<= 32'b00000000000000000000000000000000;
+			r_uy__20	<= 32'b00000000000000000000000000000000;
+			r_uz__20	<= 32'b00000000000000000000000000000000;
+			r_sz__20	<= 32'b00000000000000000000000000000000;
+			r_sr__20	<= 32'b00000000000000000000000000000000;
+			r_sleftz__20	<= 32'b00000000000000000000000000000000;
+			r_sleftr__20	<= 32'b00000000000000000000000000000000;
+			r_weight__20	<= 32'b00000000000000000000000000000000;
+			r_layer__20	<= 3'b000;
+			r_dead__20	<= 1'b1;
+			r_hit__20	<= 1'b0;
+			r_diff__20 <= 32'b00000000000000000000000000000000;
+			r_dl_b__20 <= 32'b00000000000000000000000000000000;
+			r_numer__20 <= 0;
+			r_z1__20 <= 32'b00000000000000000000000000000000;
+			r_z0__20 <= 32'b00000000000000000000000000000000;
+			r_mut__20 <= 32'b00000000000000000000000000000000;
+
+			r_x__19	<= 32'b00000000000000000000000000000000;
+			r_y__19	<= 32'b00000000000000000000000000000000;
+			r_z__19	<= 32'b00000000000000000000000000000000;
+			r_ux__19	<= 32'b00000000000000000000000000000000;
+			r_uy__19	<= 32'b00000000000000000000000000000000;
+			r_uz__19	<= 32'b00000000000000000000000000000000;
+			r_sz__19	<= 32'b00000000000000000000000000000000;
+			r_sr__19	<= 32'b00000000000000000000000000000000;
+			r_sleftz__19	<= 32'b00000000000000000000000000000000;
+			r_sleftr__19	<= 32'b00000000000000000000000000000000;
+			r_weight__19	<= 32'b00000000000000000000000000000000;
+			r_layer__19	<= 3'b000;
+			r_dead__19	<= 1'b1;
+			r_hit__19	<= 1'b0;
+			r_diff__19 <= 32'b00000000000000000000000000000000;
+			r_dl_b__19 <= 32'b00000000000000000000000000000000;
+			r_numer__19 <= 0;
+			r_z1__19 <= 32'b00000000000000000000000000000000;
+			r_z0__19 <= 32'b00000000000000000000000000000000;
+			r_mut__19 <= 32'b00000000000000000000000000000000;
+
+			r_x__18	<= 32'b00000000000000000000000000000000;
+			r_y__18	<= 32'b00000000000000000000000000000000;
+			r_z__18	<= 32'b00000000000000000000000000000000;
+			r_ux__18	<= 32'b00000000000000000000000000000000;
+			r_uy__18	<= 32'b00000000000000000000000000000000;
+			r_uz__18	<= 32'b00000000000000000000000000000000;
+			r_sz__18	<= 32'b00000000000000000000000000000000;
+			r_sr__18	<= 32'b00000000000000000000000000000000;
+			r_sleftz__18	<= 32'b00000000000000000000000000000000;
+			r_sleftr__18	<= 32'b00000000000000000000000000000000;
+			r_weight__18	<= 32'b00000000000000000000000000000000;
+			r_layer__18	<= 3'b000;
+			r_dead__18	<= 1'b1;
+			r_hit__18	<= 1'b0;
+			r_diff__18 <= 32'b00000000000000000000000000000000;
+			r_dl_b__18 <= 32'b00000000000000000000000000000000;
+			r_numer__18 <= 0;
+			r_z1__18 <= 32'b00000000000000000000000000000000;
+			r_z0__18 <= 32'b00000000000000000000000000000000;
+			r_mut__18 <= 32'b00000000000000000000000000000000;
+
+			r_x__17	<= 32'b00000000000000000000000000000000;
+			r_y__17	<= 32'b00000000000000000000000000000000;
+			r_z__17	<= 32'b00000000000000000000000000000000;
+			r_ux__17	<= 32'b00000000000000000000000000000000;
+			r_uy__17	<= 32'b00000000000000000000000000000000;
+			r_uz__17	<= 32'b00000000000000000000000000000000;
+			r_sz__17	<= 32'b00000000000000000000000000000000;
+			r_sr__17	<= 32'b00000000000000000000000000000000;
+			r_sleftz__17	<= 32'b00000000000000000000000000000000;
+			r_sleftr__17	<= 32'b00000000000000000000000000000000;
+			r_weight__17	<= 32'b00000000000000000000000000000000;
+			r_layer__17	<= 3'b000;
+			r_dead__17	<= 1'b1;
+			r_hit__17	<= 1'b0;
+			r_diff__17 <= 32'b00000000000000000000000000000000;
+			r_dl_b__17 <= 32'b00000000000000000000000000000000;
+			r_numer__17 <= 0;
+			r_z1__17 <= 32'b00000000000000000000000000000000;
+			r_z0__17 <= 32'b00000000000000000000000000000000;
+			r_mut__17 <= 32'b00000000000000000000000000000000;
+
+			r_x__16	<= 32'b00000000000000000000000000000000;
+			r_y__16	<= 32'b00000000000000000000000000000000;
+			r_z__16	<= 32'b00000000000000000000000000000000;
+			r_ux__16	<= 32'b00000000000000000000000000000000;
+			r_uy__16	<= 32'b00000000000000000000000000000000;
+			r_uz__16	<= 32'b00000000000000000000000000000000;
+			r_sz__16	<= 32'b00000000000000000000000000000000;
+			r_sr__16	<= 32'b00000000000000000000000000000000;
+			r_sleftz__16	<= 32'b00000000000000000000000000000000;
+			r_sleftr__16	<= 32'b00000000000000000000000000000000;
+			r_weight__16	<= 32'b00000000000000000000000000000000;
+			r_layer__16	<= 3'b000;
+			r_dead__16	<= 1'b1;
+			r_hit__16	<= 1'b0;
+			r_diff__16 <= 32'b00000000000000000000000000000000;
+			r_dl_b__16 <= 32'b00000000000000000000000000000000;
+			r_numer__16 <= 0;
+			r_z1__16 <= 32'b00000000000000000000000000000000;
+			r_z0__16 <= 32'b00000000000000000000000000000000;
+			r_mut__16 <= 32'b00000000000000000000000000000000;
+
+			r_x__15	<= 32'b00000000000000000000000000000000;
+			r_y__15	<= 32'b00000000000000000000000000000000;
+			r_z__15	<= 32'b00000000000000000000000000000000;
+			r_ux__15	<= 32'b00000000000000000000000000000000;
+			r_uy__15	<= 32'b00000000000000000000000000000000;
+			r_uz__15	<= 32'b00000000000000000000000000000000;
+			r_sz__15	<= 32'b00000000000000000000000000000000;
+			r_sr__15	<= 32'b00000000000000000000000000000000;
+			r_sleftz__15	<= 32'b00000000000000000000000000000000;
+			r_sleftr__15	<= 32'b00000000000000000000000000000000;
+			r_weight__15	<= 32'b00000000000000000000000000000000;
+			r_layer__15	<= 3'b000;
+			r_dead__15	<= 1'b1;
+			r_hit__15	<= 1'b0;
+			r_diff__15 <= 32'b00000000000000000000000000000000;
+			r_dl_b__15 <= 32'b00000000000000000000000000000000;
+			r_numer__15 <= 0;
+			r_z1__15 <= 32'b00000000000000000000000000000000;
+			r_z0__15 <= 32'b00000000000000000000000000000000;
+			r_mut__15 <= 32'b00000000000000000000000000000000;
+
+			r_x__14	<= 32'b00000000000000000000000000000000;
+			r_y__14	<= 32'b00000000000000000000000000000000;
+			r_z__14	<= 32'b00000000000000000000000000000000;
+			r_ux__14	<= 32'b00000000000000000000000000000000;
+			r_uy__14	<= 32'b00000000000000000000000000000000;
+			r_uz__14	<= 32'b00000000000000000000000000000000;
+			r_sz__14	<= 32'b00000000000000000000000000000000;
+			r_sr__14	<= 32'b00000000000000000000000000000000;
+			r_sleftz__14	<= 32'b00000000000000000000000000000000;
+			r_sleftr__14	<= 32'b00000000000000000000000000000000;
+			r_weight__14	<= 32'b00000000000000000000000000000000;
+			r_layer__14	<= 3'b000;
+			r_dead__14	<= 1'b1;
+			r_hit__14	<= 1'b0;
+			r_diff__14 <= 32'b00000000000000000000000000000000;
+			r_dl_b__14 <= 32'b00000000000000000000000000000000;
+			r_numer__14 <= 0;
+			r_z1__14 <= 32'b00000000000000000000000000000000;
+			r_z0__14 <= 32'b00000000000000000000000000000000;
+			r_mut__14 <= 32'b00000000000000000000000000000000;
+
+			r_x__13	<= 32'b00000000000000000000000000000000;
+			r_y__13	<= 32'b00000000000000000000000000000000;
+			r_z__13	<= 32'b00000000000000000000000000000000;
+			r_ux__13	<= 32'b00000000000000000000000000000000;
+			r_uy__13	<= 32'b00000000000000000000000000000000;
+			r_uz__13	<= 32'b00000000000000000000000000000000;
+			r_sz__13	<= 32'b00000000000000000000000000000000;
+			r_sr__13	<= 32'b00000000000000000000000000000000;
+			r_sleftz__13	<= 32'b00000000000000000000000000000000;
+			r_sleftr__13	<= 32'b00000000000000000000000000000000;
+			r_weight__13	<= 32'b00000000000000000000000000000000;
+			r_layer__13	<= 3'b000;
+			r_dead__13	<= 1'b1;
+			r_hit__13	<= 1'b0;
+			r_diff__13 <= 32'b00000000000000000000000000000000;
+			r_dl_b__13 <= 32'b00000000000000000000000000000000;
+			r_numer__13 <= 0;
+			r_z1__13 <= 32'b00000000000000000000000000000000;
+			r_z0__13 <= 32'b00000000000000000000000000000000;
+			r_mut__13 <= 32'b00000000000000000000000000000000;
+
+			r_x__12	<= 32'b00000000000000000000000000000000;
+			r_y__12	<= 32'b00000000000000000000000000000000;
+			r_z__12	<= 32'b00000000000000000000000000000000;
+			r_ux__12	<= 32'b00000000000000000000000000000000;
+			r_uy__12	<= 32'b00000000000000000000000000000000;
+			r_uz__12	<= 32'b00000000000000000000000000000000;
+			r_sz__12	<= 32'b00000000000000000000000000000000;
+			r_sr__12	<= 32'b00000000000000000000000000000000;
+			r_sleftz__12	<= 32'b00000000000000000000000000000000;
+			r_sleftr__12	<= 32'b00000000000000000000000000000000;
+			r_weight__12	<= 32'b00000000000000000000000000000000;
+			r_layer__12	<= 3'b000;
+			r_dead__12	<= 1'b1;
+			r_hit__12	<= 1'b0;
+			r_diff__12 <= 32'b00000000000000000000000000000000;
+			r_dl_b__12 <= 32'b00000000000000000000000000000000;
+			r_numer__12 <= 0;
+			r_z1__12 <= 32'b00000000000000000000000000000000;
+			r_z0__12 <= 32'b00000000000000000000000000000000;
+			r_mut__12 <= 32'b00000000000000000000000000000000;
+
+			r_x__11	<= 32'b00000000000000000000000000000000;
+			r_y__11	<= 32'b00000000000000000000000000000000;
+			r_z__11	<= 32'b00000000000000000000000000000000;
+			r_ux__11	<= 32'b00000000000000000000000000000000;
+			r_uy__11	<= 32'b00000000000000000000000000000000;
+			r_uz__11	<= 32'b00000000000000000000000000000000;
+			r_sz__11	<= 32'b00000000000000000000000000000000;
+			r_sr__11	<= 32'b00000000000000000000000000000000;
+			r_sleftz__11	<= 32'b00000000000000000000000000000000;
+			r_sleftr__11	<= 32'b00000000000000000000000000000000;
+			r_weight__11	<= 32'b00000000000000000000000000000000;
+			r_layer__11	<= 3'b000;
+			r_dead__11	<= 1'b1;
+			r_hit__11	<= 1'b0;
+			r_diff__11 <= 32'b00000000000000000000000000000000;
+			r_dl_b__11 <= 32'b00000000000000000000000000000000;
+			r_numer__11 <= 0;
+			r_z1__11 <= 32'b00000000000000000000000000000000;
+			r_z0__11 <= 32'b00000000000000000000000000000000;
+			r_mut__11 <= 32'b00000000000000000000000000000000;
+
+			r_x__10	<= 32'b00000000000000000000000000000000;
+			r_y__10	<= 32'b00000000000000000000000000000000;
+			r_z__10	<= 32'b00000000000000000000000000000000;
+			r_ux__10	<= 32'b00000000000000000000000000000000;
+			r_uy__10	<= 32'b00000000000000000000000000000000;
+			r_uz__10	<= 32'b00000000000000000000000000000000;
+			r_sz__10	<= 32'b00000000000000000000000000000000;
+			r_sr__10	<= 32'b00000000000000000000000000000000;
+			r_sleftz__10	<= 32'b00000000000000000000000000000000;
+			r_sleftr__10	<= 32'b00000000000000000000000000000000;
+			r_weight__10	<= 32'b00000000000000000000000000000000;
+			r_layer__10	<= 3'b000;
+			r_dead__10	<= 1'b1;
+			r_hit__10	<= 1'b0;
+			r_diff__10 <= 32'b00000000000000000000000000000000;
+			r_dl_b__10 <= 32'b00000000000000000000000000000000;
+			r_numer__10 <= 0;
+			r_z1__10 <= 32'b00000000000000000000000000000000;
+			r_z0__10 <= 32'b00000000000000000000000000000000;
+			r_mut__10 <= 32'b00000000000000000000000000000000;
+
+			r_x__9	<= 32'b00000000000000000000000000000000;
+			r_y__9	<= 32'b00000000000000000000000000000000;
+			r_z__9	<= 32'b00000000000000000000000000000000;
+			r_ux__9	<= 32'b00000000000000000000000000000000;
+			r_uy__9	<= 32'b00000000000000000000000000000000;
+			r_uz__9	<= 32'b00000000000000000000000000000000;
+			r_sz__9	<= 32'b00000000000000000000000000000000;
+			r_sr__9	<= 32'b00000000000000000000000000000000;
+			r_sleftz__9	<= 32'b00000000000000000000000000000000;
+			r_sleftr__9	<= 32'b00000000000000000000000000000000;
+			r_weight__9	<= 32'b00000000000000000000000000000000;
+			r_layer__9	<= 3'b000;
+			r_dead__9	<= 1'b1;
+			r_hit__9	<= 1'b0;
+			r_diff__9 <= 32'b00000000000000000000000000000000;
+			r_dl_b__9 <= 32'b00000000000000000000000000000000;
+			r_numer__9 <= 0;
+			r_z1__9 <= 32'b00000000000000000000000000000000;
+			r_z0__9 <= 32'b00000000000000000000000000000000;
+			r_mut__9 <= 32'b00000000000000000000000000000000;
+
+			r_x__8	<= 32'b00000000000000000000000000000000;
+			r_y__8	<= 32'b00000000000000000000000000000000;
+			r_z__8	<= 32'b00000000000000000000000000000000;
+			r_ux__8	<= 32'b00000000000000000000000000000000;
+			r_uy__8	<= 32'b00000000000000000000000000000000;
+			r_uz__8	<= 32'b00000000000000000000000000000000;
+			r_sz__8	<= 32'b00000000000000000000000000000000;
+			r_sr__8	<= 32'b00000000000000000000000000000000;
+			r_sleftz__8	<= 32'b00000000000000000000000000000000;
+			r_sleftr__8	<= 32'b00000000000000000000000000000000;
+			r_weight__8	<= 32'b00000000000000000000000000000000;
+			r_layer__8	<= 3'b000;
+			r_dead__8	<= 1'b1;
+			r_hit__8	<= 1'b0;
+			r_diff__8 <= 32'b00000000000000000000000000000000;
+			r_dl_b__8 <= 32'b00000000000000000000000000000000;
+			r_numer__8 <= 0;
+			r_z1__8 <= 32'b00000000000000000000000000000000;
+			r_z0__8 <= 32'b00000000000000000000000000000000;
+			r_mut__8 <= 32'b00000000000000000000000000000000;
+
+			r_x__7	<= 32'b00000000000000000000000000000000;
+			r_y__7	<= 32'b00000000000000000000000000000000;
+			r_z__7	<= 32'b00000000000000000000000000000000;
+			r_ux__7	<= 32'b00000000000000000000000000000000;
+			r_uy__7	<= 32'b00000000000000000000000000000000;
+			r_uz__7	<= 32'b00000000000000000000000000000000;
+			r_sz__7	<= 32'b00000000000000000000000000000000;
+			r_sr__7	<= 32'b00000000000000000000000000000000;
+			r_sleftz__7	<= 32'b00000000000000000000000000000000;
+			r_sleftr__7	<= 32'b00000000000000000000000000000000;
+			r_weight__7	<= 32'b00000000000000000000000000000000;
+			r_layer__7	<= 3'b000;
+			r_dead__7	<= 1'b1;
+			r_hit__7	<= 1'b0;
+			r_diff__7 <= 32'b00000000000000000000000000000000;
+			r_dl_b__7 <= 32'b00000000000000000000000000000000;
+			r_numer__7 <= 0;
+			r_z1__7 <= 32'b00000000000000000000000000000000;
+			r_z0__7 <= 32'b00000000000000000000000000000000;
+			r_mut__7 <= 32'b00000000000000000000000000000000;
+
+			r_x__6	<= 32'b00000000000000000000000000000000;
+			r_y__6	<= 32'b00000000000000000000000000000000;
+			r_z__6	<= 32'b00000000000000000000000000000000;
+			r_ux__6	<= 32'b00000000000000000000000000000000;
+			r_uy__6	<= 32'b00000000000000000000000000000000;
+			r_uz__6	<= 32'b00000000000000000000000000000000;
+			r_sz__6	<= 32'b00000000000000000000000000000000;
+			r_sr__6	<= 32'b00000000000000000000000000000000;
+			r_sleftz__6	<= 32'b00000000000000000000000000000000;
+			r_sleftr__6	<= 32'b00000000000000000000000000000000;
+			r_weight__6	<= 32'b00000000000000000000000000000000;
+			r_layer__6	<= 3'b000;
+			r_dead__6	<= 1'b1;
+			r_hit__6	<= 1'b0;
+			r_diff__6 <= 32'b00000000000000000000000000000000;
+			r_dl_b__6 <= 32'b00000000000000000000000000000000;
+			r_numer__6 <= 0;
+			r_z1__6 <= 32'b00000000000000000000000000000000;
+			r_z0__6 <= 32'b00000000000000000000000000000000;
+			r_mut__6 <= 32'b00000000000000000000000000000000;
+
+			r_x__5	<= 32'b00000000000000000000000000000000;
+			r_y__5	<= 32'b00000000000000000000000000000000;
+			r_z__5	<= 32'b00000000000000000000000000000000;
+			r_ux__5	<= 32'b00000000000000000000000000000000;
+			r_uy__5	<= 32'b00000000000000000000000000000000;
+			r_uz__5	<= 32'b00000000000000000000000000000000;
+			r_sz__5	<= 32'b00000000000000000000000000000000;
+			r_sr__5	<= 32'b00000000000000000000000000000000;
+			r_sleftz__5	<= 32'b00000000000000000000000000000000;
+			r_sleftr__5	<= 32'b00000000000000000000000000000000;
+			r_weight__5	<= 32'b00000000000000000000000000000000;
+			r_layer__5	<= 3'b000;
+			r_dead__5	<= 1'b1;
+			r_hit__5	<= 1'b0;
+			r_diff__5 <= 32'b00000000000000000000000000000000;
+			r_dl_b__5 <= 32'b00000000000000000000000000000000;
+			r_numer__5 <= 0;
+			r_z1__5 <= 32'b00000000000000000000000000000000;
+			r_z0__5 <= 32'b00000000000000000000000000000000;
+			r_mut__5 <= 32'b00000000000000000000000000000000;
+
+			r_x__4	<= 32'b00000000000000000000000000000000;
+			r_y__4	<= 32'b00000000000000000000000000000000;
+			r_z__4	<= 32'b00000000000000000000000000000000;
+			r_ux__4	<= 32'b00000000000000000000000000000000;
+			r_uy__4	<= 32'b00000000000000000000000000000000;
+			r_uz__4	<= 32'b00000000000000000000000000000000;
+			r_sz__4	<= 32'b00000000000000000000000000000000;
+			r_sr__4	<= 32'b00000000000000000000000000000000;
+			r_sleftz__4	<= 32'b00000000000000000000000000000000;
+			r_sleftr__4	<= 32'b00000000000000000000000000000000;
+			r_weight__4	<= 32'b00000000000000000000000000000000;
+			r_layer__4	<= 3'b000;
+			r_dead__4	<= 1'b1;
+			r_hit__4	<= 1'b0;
+			r_diff__4 <= 32'b00000000000000000000000000000000;
+			r_dl_b__4 <= 32'b00000000000000000000000000000000;
+			r_numer__4 <= 0;
+			r_z1__4 <= 32'b00000000000000000000000000000000;
+			r_z0__4 <= 32'b00000000000000000000000000000000;
+			r_mut__4 <= 32'b00000000000000000000000000000000;
+
+			r_x__3	<= 32'b00000000000000000000000000000000;
+			r_y__3	<= 32'b00000000000000000000000000000000;
+			r_z__3	<= 32'b00000000000000000000000000000000;
+			r_ux__3	<= 32'b00000000000000000000000000000000;
+			r_uy__3	<= 32'b00000000000000000000000000000000;
+			r_uz__3	<= 32'b00000000000000000000000000000000;
+			r_sz__3	<= 32'b00000000000000000000000000000000;
+			r_sr__3	<= 32'b00000000000000000000000000000000;
+			r_sleftz__3	<= 32'b00000000000000000000000000000000;
+			r_sleftr__3	<= 32'b00000000000000000000000000000000;
+			r_weight__3	<= 32'b00000000000000000000000000000000;
+			r_layer__3	<= 3'b000;
+			r_dead__3	<= 1'b1;
+			r_hit__3	<= 1'b0;
+			r_diff__3 <= 32'b00000000000000000000000000000000;
+			r_dl_b__3 <= 32'b00000000000000000000000000000000;
+			r_numer__3 <= 0;
+			r_z1__3 <= 32'b00000000000000000000000000000000;
+			r_z0__3 <= 32'b00000000000000000000000000000000;
+			r_mut__3 <= 32'b00000000000000000000000000000000;
+
+			r_x__2	<= 32'b00000000000000000000000000000000;
+			r_y__2	<= 32'b00000000000000000000000000000000;
+			r_z__2	<= 32'b00000000000000000000000000000000;
+			r_ux__2	<= 32'b00000000000000000000000000000000;
+			r_uy__2	<= 32'b00000000000000000000000000000000;
+			r_uz__2	<= 32'b00000000000000000000000000000000;
+			r_sz__2	<= 32'b00000000000000000000000000000000;
+			r_sr__2	<= 32'b00000000000000000000000000000000;
+			r_sleftz__2	<= 32'b00000000000000000000000000000000;
+			r_sleftr__2	<= 32'b00000000000000000000000000000000;
+			r_weight__2	<= 32'b00000000000000000000000000000000;
+			r_layer__2	<= 3'b000;
+			r_dead__2	<= 1'b1;
+			r_hit__2	<= 1'b0;
+			r_diff__2 <= 32'b00000000000000000000000000000000;
+			r_dl_b__2 <= 32'b00000000000000000000000000000000;
+			r_numer__2 <= 0;
+			r_z1__2 <= 32'b00000000000000000000000000000000;
+			r_z0__2 <= 32'b00000000000000000000000000000000;
+			r_mut__2 <= 32'b00000000000000000000000000000000;
+
+			r_x__1	<= 32'b00000000000000000000000000000000;
+			r_y__1	<= 32'b00000000000000000000000000000000;
+			r_z__1	<= 32'b00000000000000000000000000000000;
+			r_ux__1	<= 32'b00000000000000000000000000000000;
+			r_uy__1	<= 32'b00000000000000000000000000000000;
+			r_uz__1	<= 32'b00000000000000000000000000000000;
+			r_sz__1	<= 32'b00000000000000000000000000000000;
+			r_sr__1	<= 32'b00000000000000000000000000000000;
+			r_sleftz__1	<= 32'b00000000000000000000000000000000;
+			r_sleftr__1	<= 32'b00000000000000000000000000000000;
+			r_weight__1	<= 32'b00000000000000000000000000000000;
+			r_layer__1	<= 3'b000;
+			r_dead__1	<= 1'b1;
+			r_hit__1	<= 1'b0;
+			r_diff__1 <= 32'b00000000000000000000000000000000;
+			r_dl_b__1 <= 32'b00000000000000000000000000000000;
+			r_numer__1 <= 0;
+			r_z1__1 <= 32'b00000000000000000000000000000000;
+			r_z0__1 <= 32'b00000000000000000000000000000000;
+			r_mut__1 <= 32'b00000000000000000000000000000000;
+			
+				r_x__0	<= 32'b00000000000000000000000000000000;
+			r_y__0	<= 32'b00000000000000000000000000000000;
+			r_z__0	<= 32'b00000000000000000000000000000000;
+			r_ux__0	<= 32'b00000000000000000000000000000000;
+			r_uy__0	<= 32'b00000000000000000000000000000000;
+			r_uz__0	<= 32'b00000000000000000000000000000000;
+			r_sz__0	<= 32'b00000000000000000000000000000000;
+			r_sr__0	<= 32'b00000000000000000000000000000000;
+			r_sleftz__0	<= 32'b00000000000000000000000000000000;
+			r_sleftr__0	<= 32'b00000000000000000000000000000000;
+			r_weight__0	<= 32'b00000000000000000000000000000000;
+			r_layer__0	<= 3'b000;
+			r_dead__0	<= 1'b0;
+			r_hit__0	<= 1'b0;
+			r_diff__0 <= 32'b00000000000000000000000000000000;
+			r_dl_b__0 <= 32'b00000000000000000000000000000000;
+			r_numer__0 <= 0;
+			r_z1__0 <= 32'b00000000000000000000000000000000;
+			r_z0__0 <= 32'b00000000000000000000000000000000;
+			r_mut__0 <= 32'b00000000000000000000000000000000;
+	end
+	
+	else 
+	begin
+		if(enable)
+		begin
+		
+			//for 0
+		r_x__0	<=c_x__0;
+		r_y__0	<=c_y__0;
+		r_z__0	<=c_z__0;
+		r_ux__0	<=c_ux__0;
+		r_uy__0	<=c_uy__0;
+		r_uz__0	<=c_uz__0;
+		r_sz__0	<=c_sz__0;
+		r_sr__0	<=c_sr__0;
+		r_sleftz__0	<=c_sleftz__0;
+		r_sleftr__0	<=c_sleftr__0;
+		r_weight__0	<=c_weight__0;
+		r_layer__0	<=c_layer__0;
+		r_dead__0	<=c_dead__0;
+		r_hit__0	<=c_hit__0;
+		r_diff__0 <=c_diff__0;
+		r_dl_b__0 <=c_dl_b__0;
+		r_numer__0 <=c_numer__0;
+		r_z1__0 <=c_z1__0;
+		r_z0__0 <=c_z0__0;
+		r_mut__0 <=c_mut__0;
+		
+	//for 1
+	
+		r_x__1	<=c_x__1;
+		r_y__1	<=c_y__1;
+		r_z__1	<=c_z__1;
+		r_ux__1	<=c_ux__1;
+		r_uy__1	<=c_uy__1;
+		r_uz__1	<=c_uz__1;
+		r_sz__1	<=c_sz__1;
+		r_sr__1	<=c_sr__1;
+		r_sleftz__1	<=c_sleftz__1;
+		r_sleftr__1	<=c_sleftr__1;
+		r_weight__1	<=c_weight__1;
+		r_layer__1	<=c_layer__1;
+		r_dead__1	<=c_dead__1;
+		r_hit__1	<=c_hit__1;
+		r_diff__1 <=c_diff__1;
+		r_dl_b__1 <=c_dl_b__1;
+		r_numer__1 <=c_numer__1;
+		r_z1__1 <=c_z1__1;
+		r_z0__1 <=c_z0__1;
+		r_mut__1 <=c_mut__1;
+		
+		//for 2
+		r_x__2	<=c_x__2;
+		r_y__2	<=c_y__2;
+		r_z__2	<=c_z__2;
+		r_ux__2	<=c_ux__2;
+		r_uy__2	<=c_uy__2;
+		r_uz__2	<=c_uz__2;
+		r_sz__2	<=c_sz__2;
+		r_sr__2	<=c_sr__2;
+		r_sleftz__2	<=c_sleftz__2;
+		r_sleftr__2	<=c_sleftr__2;
+		r_weight__2	<=c_weight__2;
+		r_layer__2	<=c_layer__2;
+		r_dead__2	<=c_dead__2;
+		r_hit__2	<=c_hit__2;
+		r_diff__2 <=c_diff__2;
+		r_dl_b__2 <=c_dl_b__2;
+		r_numer__2 <=c_numer__2;
+		r_z1__2 <=c_z1__2;
+		r_z0__2 <=c_z0__2;
+		r_mut__2 <=c_mut__2;
+	
+		//for 3
+		r_x__3	<=c_x__3;
+		r_y__3	<=c_y__3;
+		r_z__3	<=c_z__3;
+		r_ux__3	<=c_ux__3;
+		r_uy__3	<=c_uy__3;
+		r_uz__3	<=c_uz__3;
+		r_sz__3	<=c_sz__3;
+		r_sr__3	<=c_sr__3;
+		r_sleftz__3	<=c_sleftz__3;
+		r_sleftr__3	<=c_sleftr__3;
+		r_weight__3	<=c_weight__3;
+		r_layer__3	<=c_layer__3;
+		r_dead__3	<=c_dead__3;
+		r_hit__3	<=c_hit__3;
+		r_diff__3 <=c_diff__3;
+		r_dl_b__3 <=c_dl_b__3;
+		r_numer__3 <=c_numer__3;
+		r_z1__3 <=c_z1__3;
+		r_z0__3 <=c_z0__3;
+		r_mut__3 <=c_mut__3;
+		
+		//for 4
+		r_x__4	<=c_x__4;
+		r_y__4	<=c_y__4;
+		r_z__4	<=c_z__4;
+		r_ux__4	<=c_ux__4;
+		r_uy__4	<=c_uy__4;
+		r_uz__4	<=c_uz__4;
+		r_sz__4	<=c_sz__4;
+		r_sr__4	<=c_sr__4;
+		r_sleftz__4	<=c_sleftz__4;
+		r_sleftr__4	<=c_sleftr__4;
+		r_weight__4	<=c_weight__4;
+		r_layer__4	<=c_layer__4;
+		r_dead__4	<=c_dead__4;
+		r_hit__4	<=c_hit__4;
+		r_diff__4 <=c_diff__4;
+		r_dl_b__4 <=c_dl_b__4;
+		r_numer__4 <=c_numer__4;
+		r_z1__4 <=c_z1__4;
+		r_z0__4 <=c_z0__4;
+		r_mut__4 <=c_mut__4;
+		
+		//for 5
+		r_x__5	<=c_x__5;
+		r_y__5	<=c_y__5;
+		r_z__5	<=c_z__5;
+		r_ux__5	<=c_ux__5;
+		r_uy__5	<=c_uy__5;
+		r_uz__5	<=c_uz__5;
+		r_sz__5	<=c_sz__5;
+		r_sr__5	<=c_sr__5;
+		r_sleftz__5	<=c_sleftz__5;
+		r_sleftr__5	<=c_sleftr__5;
+		r_weight__5	<=c_weight__5;
+		r_layer__5	<=c_layer__5;
+		r_dead__5	<=c_dead__5;
+		r_hit__5	<=c_hit__5;
+		r_diff__5 <=c_diff__5;
+		r_dl_b__5 <=c_dl_b__5;
+		r_numer__5 <=c_numer__5;
+		r_z1__5 <=c_z1__5;
+		r_z0__5 <=c_z0__5;
+		r_mut__5 <=c_mut__5;
+		
+		//for 6
+		r_x__6	<=c_x__6;
+		r_y__6	<=c_y__6;
+		r_z__6	<=c_z__6;
+		r_ux__6	<=c_ux__6;
+		r_uy__6	<=c_uy__6;
+		r_uz__6	<=c_uz__6;
+		r_sz__6	<=c_sz__6;
+		r_sr__6	<=c_sr__6;
+		r_sleftz__6	<=c_sleftz__6;
+		r_sleftr__6	<=c_sleftr__6;
+		r_weight__6	<=c_weight__6;
+		r_layer__6	<=c_layer__6;
+		r_dead__6	<=c_dead__6;
+		r_hit__6	<=c_hit__6;
+		r_diff__6 <=c_diff__6;
+		r_dl_b__6 <=c_dl_b__6;
+		r_numer__6 <=c_numer__6;
+		r_z1__6 <=c_z1__6;
+		r_z0__6 <=c_z0__6;
+		r_mut__6 <=c_mut__6;
+		
+		//for 7
+		r_x__7	<=c_x__7;
+		r_y__7	<=c_y__7;
+		r_z__7	<=c_z__7;
+		r_ux__7	<=c_ux__7;
+		r_uy__7	<=c_uy__7;
+		r_uz__7	<=c_uz__7;
+		r_sz__7	<=c_sz__7;
+		r_sr__7	<=c_sr__7;
+		r_sleftz__7	<=c_sleftz__7;
+		r_sleftr__7	<=c_sleftr__7;
+		r_weight__7	<=c_weight__7;
+		r_layer__7	<=c_layer__7;
+		r_dead__7	<=c_dead__7;
+		r_hit__7	<=c_hit__7;
+		r_diff__7 <=c_diff__7;
+		r_dl_b__7 <=c_dl_b__7;
+		r_numer__7 <=c_numer__7;
+		r_z1__7 <=c_z1__7;
+		r_z0__7 <=c_z0__7;
+		r_mut__7 <=c_mut__7;
+		
+		//for 8
+		r_x__8	<=c_x__8;
+		r_y__8	<=c_y__8;
+		r_z__8	<=c_z__8;
+		r_ux__8	<=c_ux__8;
+		r_uy__8	<=c_uy__8;
+		r_uz__8	<=c_uz__8;
+		r_sz__8	<=c_sz__8;
+		r_sr__8	<=c_sr__8;
+		r_sleftz__8	<=c_sleftz__8;
+		r_sleftr__8	<=c_sleftr__8;
+		r_weight__8	<=c_weight__8;
+		r_layer__8	<=c_layer__8;
+		r_dead__8	<=c_dead__8;
+		r_hit__8	<=c_hit__8;
+		r_diff__8 <=c_diff__8;
+		r_dl_b__8 <=c_dl_b__8;
+		r_numer__8 <=c_numer__8;
+		r_z1__8 <=c_z1__8;
+		r_z0__8 <=c_z0__8;
+		r_mut__8 <=c_mut__8;
+		
+		//for 9
+		r_x__9	<=c_x__9;
+		r_y__9	<=c_y__9;
+		r_z__9	<=c_z__9;
+		r_ux__9	<=c_ux__9;
+		r_uy__9	<=c_uy__9;
+		r_uz__9	<=c_uz__9;
+		r_sz__9	<=c_sz__9;
+		r_sr__9	<=c_sr__9;
+		r_sleftz__9	<=c_sleftz__9;
+		r_sleftr__9	<=c_sleftr__9;
+		r_weight__9	<=c_weight__9;
+		r_layer__9	<=c_layer__9;
+		r_dead__9	<=c_dead__9;
+		r_hit__9	<=c_hit__9;
+		r_diff__9 <=c_diff__9;
+		r_dl_b__9 <=c_dl_b__9;
+		r_numer__9 <=c_numer__9;
+		r_z1__9 <=c_z1__9;
+		r_z0__9 <=c_z0__9;
+		r_mut__9 <=c_mut__9;
+		
+		//for 10
+		r_x__10	<=c_x__10;
+		r_y__10	<=c_y__10;
+		r_z__10	<=c_z__10;
+		r_ux__10	<=c_ux__10;
+		r_uy__10	<=c_uy__10;
+		r_uz__10	<=c_uz__10;
+		r_sz__10	<=c_sz__10;
+		r_sr__10	<=c_sr__10;
+		r_sleftz__10	<=c_sleftz__10;
+		r_sleftr__10	<=c_sleftr__10;
+		r_weight__10	<=c_weight__10;
+		r_layer__10	<=c_layer__10;
+		r_dead__10	<=c_dead__10;
+		r_hit__10	<=c_hit__10;
+		r_diff__10 <=c_diff__10;
+		r_dl_b__10 <=c_dl_b__10;
+		r_numer__10 <=c_numer__10;
+		r_z1__10 <=c_z1__10;
+		r_z0__10 <=c_z0__10;
+		r_mut__10 <=c_mut__10;
+		
+		//for 11
+		r_x__11	<=c_x__11;
+		r_y__11	<=c_y__11;
+		r_z__11	<=c_z__11;
+		r_ux__11	<=c_ux__11;
+		r_uy__11	<=c_uy__11;
+		r_uz__11	<=c_uz__11;
+		r_sz__11	<=c_sz__11;
+		r_sr__11	<=c_sr__11;
+		r_sleftz__11	<=c_sleftz__11;
+		r_sleftr__11	<=c_sleftr__11;
+		r_weight__11	<=c_weight__11;
+		r_layer__11	<=c_layer__11;
+		r_dead__11	<=c_dead__11;
+		r_hit__11	<=c_hit__11;
+		r_diff__11 <=c_diff__11;
+		r_dl_b__11 <=c_dl_b__11;
+		r_numer__11 <=c_numer__11;
+		r_z1__11 <=c_z1__11;
+		r_z0__11 <=c_z0__11;
+		r_mut__11 <=c_mut__11;
+		
+		//for 12
+		r_x__12	<=c_x__12;
+		r_y__12	<=c_y__12;
+		r_z__12	<=c_z__12;
+		r_ux__12	<=c_ux__12;
+		r_uy__12	<=c_uy__12;
+		r_uz__12	<=c_uz__12;
+		r_sz__12	<=c_sz__12;
+		r_sr__12	<=c_sr__12;
+		r_sleftz__12	<=c_sleftz__12;
+		r_sleftr__12	<=c_sleftr__12;
+		r_weight__12	<=c_weight__12;
+		r_layer__12	<=c_layer__12;
+		r_dead__12	<=c_dead__12;
+		r_hit__12	<=c_hit__12;
+		r_diff__12 <=c_diff__12;
+		r_dl_b__12 <=c_dl_b__12;
+		r_numer__12 <=c_numer__12;
+		r_z1__12 <=c_z1__12;
+		r_z0__12 <=c_z0__12;
+		r_mut__12 <=c_mut__12;
+		
+		//for 13
+		r_x__13	<=c_x__13;
+		r_y__13	<=c_y__13;
+		r_z__13	<=c_z__13;
+		r_ux__13	<=c_ux__13;
+		r_uy__13	<=c_uy__13;
+		r_uz__13	<=c_uz__13;
+		r_sz__13	<=c_sz__13;
+		r_sr__13	<=c_sr__13;
+		r_sleftz__13	<=c_sleftz__13;
+		r_sleftr__13	<=c_sleftr__13;
+		r_weight__13	<=c_weight__13;
+		r_layer__13	<=c_layer__13;
+		r_dead__13	<=c_dead__13;
+		r_hit__13	<=c_hit__13;
+		r_diff__13 <=c_diff__13;
+		r_dl_b__13 <=c_dl_b__13;
+		r_numer__13 <=c_numer__13;
+		r_z1__13 <=c_z1__13;
+		r_z0__13 <=c_z0__13;
+		r_mut__13 <=c_mut__13;
+		
+		//for 14
+		r_x__14	<=c_x__14;
+		r_y__14	<=c_y__14;
+		r_z__14	<=c_z__14;
+		r_ux__14	<=c_ux__14;
+		r_uy__14	<=c_uy__14;
+		r_uz__14	<=c_uz__14;
+		r_sz__14	<=c_sz__14;
+		r_sr__14	<=c_sr__14;
+		r_sleftz__14	<=c_sleftz__14;
+		r_sleftr__14	<=c_sleftr__14;
+		r_weight__14	<=c_weight__14;
+		r_layer__14	<=c_layer__14;
+		r_dead__14	<=c_dead__14;
+		r_hit__14	<=c_hit__14;
+		r_diff__14 <=c_diff__14;
+		r_dl_b__14 <=c_dl_b__14;
+		r_numer__14 <=c_numer__14;
+		r_z1__14 <=c_z1__14;
+		r_z0__14 <=c_z0__14;
+		r_mut__14 <=c_mut__14;
+		
+		//for 15
+		r_x__15	<=c_x__15;
+		r_y__15	<=c_y__15;
+		r_z__15	<=c_z__15;
+		r_ux__15	<=c_ux__15;
+		r_uy__15	<=c_uy__15;
+		r_uz__15	<=c_uz__15;
+		r_sz__15	<=c_sz__15;
+		r_sr__15	<=c_sr__15;
+		r_sleftz__15	<=c_sleftz__15;
+		r_sleftr__15	<=c_sleftr__15;
+		r_weight__15	<=c_weight__15;
+		r_layer__15	<=c_layer__15;
+		r_dead__15	<=c_dead__15;
+		r_hit__15	<=c_hit__15;
+		r_diff__15 <=c_diff__15;
+		r_dl_b__15 <=c_dl_b__15;
+		r_numer__15 <=c_numer__15;
+		r_z1__15 <=c_z1__15;
+		r_z0__15 <=c_z0__15;
+		r_mut__15 <=c_mut__15;
+		
+		//for 16
+		r_x__16	<=c_x__16;
+		r_y__16	<=c_y__16;
+		r_z__16	<=c_z__16;
+		r_ux__16	<=c_ux__16;
+		r_uy__16	<=c_uy__16;
+		r_uz__16	<=c_uz__16;
+		r_sz__16	<=c_sz__16;
+		r_sr__16	<=c_sr__16;
+		r_sleftz__16	<=c_sleftz__16;
+		r_sleftr__16	<=c_sleftr__16;
+		r_weight__16	<=c_weight__16;
+		r_layer__16	<=c_layer__16;
+		r_dead__16	<=c_dead__16;
+		r_hit__16	<=c_hit__16;
+		r_diff__16 <=c_diff__16;
+		r_dl_b__16 <=c_dl_b__16;
+		r_numer__16 <=c_numer__16;
+		r_z1__16 <=c_z1__16;
+		r_z0__16 <=c_z0__16;
+		r_mut__16 <=c_mut__16;
+		
+		//for 17
+		r_x__17	<=c_x__17;
+		r_y__17	<=c_y__17;
+		r_z__17	<=c_z__17;
+		r_ux__17	<=c_ux__17;
+		r_uy__17	<=c_uy__17;
+		r_uz__17	<=c_uz__17;
+		r_sz__17	<=c_sz__17;
+		r_sr__17	<=c_sr__17;
+		r_sleftz__17	<=c_sleftz__17;
+		r_sleftr__17	<=c_sleftr__17;
+		r_weight__17	<=c_weight__17;
+		r_layer__17	<=c_layer__17;
+		r_dead__17	<=c_dead__17;
+		r_hit__17	<=c_hit__17;
+		r_diff__17 <=c_diff__17;
+		r_dl_b__17 <=c_dl_b__17;
+		r_numer__17 <=c_numer__17;
+		r_z1__17 <=c_z1__17;
+		r_z0__17 <=c_z0__17;
+		r_mut__17 <=c_mut__17;
+		
+		//for 18
+		r_x__18	<=c_x__18;
+		r_y__18	<=c_y__18;
+		r_z__18	<=c_z__18;
+		r_ux__18	<=c_ux__18;
+		r_uy__18	<=c_uy__18;
+		r_uz__18	<=c_uz__18;
+		r_sz__18	<=c_sz__18;
+		r_sr__18	<=c_sr__18;
+		r_sleftz__18	<=c_sleftz__18;
+		r_sleftr__18	<=c_sleftr__18;
+		r_weight__18	<=c_weight__18;
+		r_layer__18	<=c_layer__18;
+		r_dead__18	<=c_dead__18;
+		r_hit__18	<=c_hit__18;
+		r_diff__18 <=c_diff__18;
+		r_dl_b__18 <=c_dl_b__18;
+		r_numer__18 <=c_numer__18;
+		r_z1__18 <=c_z1__18;
+		r_z0__18 <=c_z0__18;
+		r_mut__18 <=c_mut__18;
+		
+		//for 19
+		r_x__19	<=c_x__19;
+		r_y__19	<=c_y__19;
+		r_z__19	<=c_z__19;
+		r_ux__19	<=c_ux__19;
+		r_uy__19	<=c_uy__19;
+		r_uz__19	<=c_uz__19;
+		r_sz__19	<=c_sz__19;
+		r_sr__19	<=c_sr__19;
+		r_sleftz__19	<=c_sleftz__19;
+		r_sleftr__19	<=c_sleftr__19;
+		r_weight__19	<=c_weight__19;
+		r_layer__19	<=c_layer__19;
+		r_dead__19	<=c_dead__19;
+		r_hit__19	<=c_hit__19;
+		r_diff__19 <=c_diff__19;
+		r_dl_b__19 <=c_dl_b__19;
+		r_numer__19 <=c_numer__19;
+		r_z1__19 <=c_z1__19;
+		r_z0__19 <=c_z0__19;
+		r_mut__19 <=c_mut__19;
+		
+		//for 20
+		r_x__20	<=c_x__20;
+		r_y__20	<=c_y__20;
+		r_z__20	<=c_z__20;
+		r_ux__20	<=c_ux__20;
+		r_uy__20	<=c_uy__20;
+		r_uz__20	<=c_uz__20;
+		r_sz__20	<=c_sz__20;
+		r_sr__20	<=c_sr__20;
+		r_sleftz__20	<=c_sleftz__20;
+		r_sleftr__20	<=c_sleftr__20;
+		r_weight__20	<=c_weight__20;
+		r_layer__20	<=c_layer__20;
+		r_dead__20	<=c_dead__20;
+		r_hit__20	<=c_hit__20;
+		r_diff__20 <=c_diff__20;
+		r_dl_b__20 <=c_dl_b__20;
+		r_numer__20 <=c_numer__20;
+		r_z1__20 <=c_z1__20;
+		r_z0__20 <=c_z0__20;
+		r_mut__20 <=c_mut__20;
+		
+		
+		//for 21
+		r_x__21	<=c_x__21;
+		r_y__21	<=c_y__21;
+		r_z__21	<=c_z__21;
+		r_ux__21	<=c_ux__21;
+		r_uy__21	<=c_uy__21;
+		r_uz__21	<=c_uz__21;
+		r_sz__21	<=c_sz__21;
+		r_sr__21	<=c_sr__21;
+		r_sleftz__21	<=c_sleftz__21;
+		r_sleftr__21	<=c_sleftr__21;
+		r_weight__21	<=c_weight__21;
+		r_layer__21	<=c_layer__21;
+		r_dead__21	<=c_dead__21;
+		r_hit__21	<=c_hit__21;
+		r_diff__21 <=c_diff__21;
+		r_dl_b__21 <=c_dl_b__21;
+		r_numer__21 <=c_numer__21;
+		r_z1__21 <=c_z1__21;
+		r_z0__21 <=c_z0__21;
+		r_mut__21 <=c_mut__21;
+		
+		//for 22
+		r_x__22	<=c_x__22;
+		r_y__22	<=c_y__22;
+		r_z__22	<=c_z__22;
+		r_ux__22	<=c_ux__22;
+		r_uy__22	<=c_uy__22;
+		r_uz__22	<=c_uz__22;
+		r_sz__22	<=c_sz__22;
+		r_sr__22	<=c_sr__22;
+		r_sleftz__22	<=c_sleftz__22;
+		r_sleftr__22	<=c_sleftr__22;
+		r_weight__22	<=c_weight__22;
+		r_layer__22	<=c_layer__22;
+		r_dead__22	<=c_dead__22;
+		r_hit__22	<=c_hit__22;
+		r_diff__22 <=c_diff__22;
+		r_dl_b__22 <=c_dl_b__22;
+		r_numer__22 <=c_numer__22;
+		r_z1__22 <=c_z1__22;
+		r_z0__22 <=c_z0__22;
+		r_mut__22 <=c_mut__22;
+		
+		//for 23
+		r_x__23	<=c_x__23;
+		r_y__23	<=c_y__23;
+		r_z__23	<=c_z__23;
+		r_ux__23	<=c_ux__23;
+		r_uy__23	<=c_uy__23;
+		r_uz__23	<=c_uz__23;
+		r_sz__23	<=c_sz__23;
+		r_sr__23	<=c_sr__23;
+		r_sleftz__23	<=c_sleftz__23;
+		r_sleftr__23	<=c_sleftr__23;
+		r_weight__23	<=c_weight__23;
+		r_layer__23	<=c_layer__23;
+		r_dead__23	<=c_dead__23;
+		r_hit__23	<=c_hit__23;
+		r_diff__23 <=c_diff__23;
+		r_dl_b__23 <=c_dl_b__23;
+		r_numer__23 <=c_numer__23;
+		r_z1__23 <=c_z1__23;
+		r_z0__23 <=c_z0__23;
+		r_mut__23 <=c_mut__23;
+		
+		//for 24
+		r_x__24	<=c_x__24;
+		r_y__24	<=c_y__24;
+		r_z__24	<=c_z__24;
+		r_ux__24	<=c_ux__24;
+		r_uy__24	<=c_uy__24;
+		r_uz__24	<=c_uz__24;
+		r_sz__24	<=c_sz__24;
+		r_sr__24	<=c_sr__24;
+		r_sleftz__24	<=c_sleftz__24;
+		r_sleftr__24	<=c_sleftr__24;
+		r_weight__24	<=c_weight__24;
+		r_layer__24	<=c_layer__24;
+		r_dead__24	<=c_dead__24;
+		r_hit__24	<=c_hit__24;
+		r_diff__24 <=c_diff__24;
+		r_dl_b__24 <=c_dl_b__24;
+		r_numer__24 <=c_numer__24;
+		r_z1__24 <=c_z1__24;
+		r_z0__24 <=c_z0__24;
+		r_mut__24 <=c_mut__24;
+		
+		//for 25
+		r_x__25	<=c_x__25;
+		r_y__25	<=c_y__25;
+		r_z__25	<=c_z__25;
+		r_ux__25	<=c_ux__25;
+		r_uy__25	<=c_uy__25;
+		r_uz__25	<=c_uz__25;
+		r_sz__25	<=c_sz__25;
+		r_sr__25	<=c_sr__25;
+		r_sleftz__25	<=c_sleftz__25;
+		r_sleftr__25	<=c_sleftr__25;
+		r_weight__25	<=c_weight__25;
+		r_layer__25	<=c_layer__25;
+		r_dead__25	<=c_dead__25;
+		r_hit__25	<=c_hit__25;
+		r_diff__25 <=c_diff__25;
+		r_dl_b__25 <=c_dl_b__25;
+		r_numer__25 <=c_numer__25;
+		r_z1__25 <=c_z1__25;
+		r_z0__25 <=c_z0__25;
+		r_mut__25 <=c_mut__25;
+		
+		//for 26
+		r_x__26	<=c_x__26;
+		r_y__26	<=c_y__26;
+		r_z__26	<=c_z__26;
+		r_ux__26	<=c_ux__26;
+		r_uy__26	<=c_uy__26;
+		r_uz__26	<=c_uz__26;
+		r_sz__26	<=c_sz__26;
+		r_sr__26	<=c_sr__26;
+		r_sleftz__26	<=c_sleftz__26;
+		r_sleftr__26	<=c_sleftr__26;
+		r_weight__26	<=c_weight__26;
+		r_layer__26	<=c_layer__26;
+		r_dead__26	<=c_dead__26;
+		r_hit__26	<=c_hit__26;
+		r_diff__26 <=c_diff__26;
+		r_dl_b__26 <=c_dl_b__26;
+		r_numer__26 <=c_numer__26;
+		r_z1__26 <=c_z1__26;
+		r_z0__26 <=c_z0__26;
+		r_mut__26 <=c_mut__26;
+		
+		//for 27
+		r_x__27	<=c_x__27;
+		r_y__27	<=c_y__27;
+		r_z__27	<=c_z__27;
+		r_ux__27	<=c_ux__27;
+		r_uy__27	<=c_uy__27;
+		r_uz__27	<=c_uz__27;
+		r_sz__27	<=c_sz__27;
+		r_sr__27	<=c_sr__27;
+		r_sleftz__27	<=c_sleftz__27;
+		r_sleftr__27	<=c_sleftr__27;
+		r_weight__27	<=c_weight__27;
+		r_layer__27	<=c_layer__27;
+		r_dead__27	<=c_dead__27;
+		r_hit__27	<=c_hit__27;
+		r_diff__27 <=c_diff__27;
+		r_dl_b__27 <=c_dl_b__27;
+		r_numer__27 <=c_numer__27;
+		r_z1__27 <=c_z1__27;
+		r_z0__27 <=c_z0__27;
+		r_mut__27 <=c_mut__27;
+		
+		//for 28
+		r_x__28	<=c_x__28;
+		r_y__28	<=c_y__28;
+		r_z__28	<=c_z__28;
+		r_ux__28	<=c_ux__28;
+		r_uy__28	<=c_uy__28;
+		r_uz__28	<=c_uz__28;
+		r_sz__28	<=c_sz__28;
+		r_sr__28	<=c_sr__28;
+		r_sleftz__28	<=c_sleftz__28;
+		r_sleftr__28	<=c_sleftr__28;
+		r_weight__28	<=c_weight__28;
+		r_layer__28	<=c_layer__28;
+		r_dead__28	<=c_dead__28;
+		r_hit__28	<=c_hit__28;
+		r_diff__28 <=c_diff__28;
+		r_dl_b__28 <=c_dl_b__28;
+		r_numer__28 <=c_numer__28;
+		r_z1__28 <=c_z1__28;
+		r_z0__28 <=c_z0__28;
+		r_mut__28 <=c_mut__28;
+		
+		//for 29
+		r_x__29	<=c_x__29;
+		r_y__29	<=c_y__29;
+		r_z__29	<=c_z__29;
+		r_ux__29	<=c_ux__29;
+		r_uy__29	<=c_uy__29;
+		r_uz__29	<=c_uz__29;
+		r_sz__29	<=c_sz__29;
+		r_sr__29	<=c_sr__29;
+		r_sleftz__29	<=c_sleftz__29;
+		r_sleftr__29	<=c_sleftr__29;
+		r_weight__29	<=c_weight__29;
+		r_layer__29	<=c_layer__29;
+		r_dead__29	<=c_dead__29;
+		r_hit__29	<=c_hit__29;
+		r_diff__29 <=c_diff__29;
+		r_dl_b__29 <=c_dl_b__29;
+		r_numer__29 <=c_numer__29;
+		r_z1__29 <=c_z1__29;
+		r_z0__29 <=c_z0__29;
+		r_mut__29 <=c_mut__29;
+		
+		//for 30
+		r_x__30	<=c_x__30;
+		r_y__30	<=c_y__30;
+		r_z__30	<=c_z__30;
+		r_ux__30	<=c_ux__30;
+		r_uy__30	<=c_uy__30;
+		r_uz__30	<=c_uz__30;
+		r_sz__30	<=c_sz__30;
+		r_sr__30	<=c_sr__30;
+		r_sleftz__30	<=c_sleftz__30;
+		r_sleftr__30	<=c_sleftr__30;
+		r_weight__30	<=c_weight__30;
+		r_layer__30	<=c_layer__30;
+		r_dead__30	<=c_dead__30;
+		r_hit__30	<=c_hit__30;
+		r_diff__30 <=c_diff__30;
+		r_dl_b__30 <=c_dl_b__30;
+		r_numer__30 <=c_numer__30;
+		r_z1__30 <=c_z1__30;
+		r_z0__30 <=c_z0__30;
+		r_mut__30 <=c_mut__30;
+		
+		//for 31
+		r_x__31	<=c_x__31;
+		r_y__31	<=c_y__31;
+		r_z__31	<=c_z__31;
+		r_ux__31	<=c_ux__31;
+		r_uy__31	<=c_uy__31;
+		r_uz__31	<=c_uz__31;
+		r_sz__31	<=c_sz__31;
+		r_sr__31	<=c_sr__31;
+		r_sleftz__31	<=c_sleftz__31;
+		r_sleftr__31	<=c_sleftr__31;
+		r_weight__31	<=c_weight__31;
+		r_layer__31	<=c_layer__31;
+		r_dead__31	<=c_dead__31;
+		r_hit__31	<=c_hit__31;
+		r_diff__31 <=c_diff__31;
+		r_dl_b__31 <=c_dl_b__31;
+		r_numer__31 <=c_numer__31;
+		r_z1__31 <=c_z1__31;
+		r_z0__31 <=c_z0__31;
+		r_mut__31 <=c_mut__31;
+		
+		//for 32
+		r_x__32	<=c_x__32;
+		r_y__32	<=c_y__32;
+		r_z__32	<=c_z__32;
+		r_ux__32	<=c_ux__32;
+		r_uy__32	<=c_uy__32;
+		r_uz__32	<=c_uz__32;
+		r_sz__32	<=c_sz__32;
+		r_sr__32	<=c_sr__32;
+		r_sleftz__32	<=c_sleftz__32;
+		r_sleftr__32	<=c_sleftr__32;
+		r_weight__32	<=c_weight__32;
+		r_layer__32	<=c_layer__32;
+		r_dead__32	<=c_dead__32;
+		r_hit__32	<=c_hit__32;
+		r_diff__32 <=c_diff__32;
+		r_dl_b__32 <=c_dl_b__32;
+		r_numer__32 <=c_numer__32;
+		r_z1__32 <=c_z1__32;
+		r_z0__32 <=c_z0__32;
+		r_mut__32 <=c_mut__32;
+		
+		//for 33
+		r_x__33	<=c_x__33;
+		r_y__33	<=c_y__33;
+		r_z__33	<=c_z__33;
+		r_ux__33	<=c_ux__33;
+		r_uy__33	<=c_uy__33;
+		r_uz__33	<=c_uz__33;
+		r_sz__33	<=c_sz__33;
+		r_sr__33	<=c_sr__33;
+		r_sleftz__33	<=c_sleftz__33;
+		r_sleftr__33	<=c_sleftr__33;
+		r_weight__33	<=c_weight__33;
+		r_layer__33	<=c_layer__33;
+		r_dead__33	<=c_dead__33;
+		r_hit__33	<=c_hit__33;
+		r_diff__33 <=c_diff__33;
+		r_dl_b__33 <=c_dl_b__33;
+		r_numer__33 <=c_numer__33;
+		r_z1__33 <=c_z1__33;
+		r_z0__33 <=c_z0__33;
+		r_mut__33 <=c_mut__33;
+		
+		//for 34
+		r_x__34	<=c_x__34;
+		r_y__34	<=c_y__34;
+		r_z__34	<=c_z__34;
+		r_ux__34	<=c_ux__34;
+		r_uy__34	<=c_uy__34;
+		r_uz__34	<=c_uz__34;
+		r_sz__34	<=c_sz__34;
+		r_sr__34	<=c_sr__34;
+		r_sleftz__34	<=c_sleftz__34;
+		r_sleftr__34	<=c_sleftr__34;
+		r_weight__34	<=c_weight__34;
+		r_layer__34	<=c_layer__34;
+		r_dead__34	<=c_dead__34;
+		r_hit__34	<=c_hit__34;
+		r_diff__34 <=c_diff__34;
+		r_dl_b__34 <=c_dl_b__34;
+		r_numer__34 <=c_numer__34;
+		r_z1__34 <=c_z1__34;
+		r_z0__34 <=c_z0__34;
+		r_mut__34 <=c_mut__34;
+		
+		//for 35
+		r_x__35	<=c_x__35;
+		r_y__35	<=c_y__35;
+		r_z__35	<=c_z__35;
+		r_ux__35	<=c_ux__35;
+		r_uy__35	<=c_uy__35;
+		r_uz__35	<=c_uz__35;
+		r_sz__35	<=c_sz__35;
+		r_sr__35	<=c_sr__35;
+		r_sleftz__35	<=c_sleftz__35;
+		r_sleftr__35	<=c_sleftr__35;
+		r_weight__35	<=c_weight__35;
+		r_layer__35	<=c_layer__35;
+		r_dead__35	<=c_dead__35;
+		r_hit__35	<=c_hit__35;
+		r_diff__35 <=c_diff__35;
+		r_dl_b__35 <=c_dl_b__35;
+		r_numer__35 <=c_numer__35;
+		r_z1__35 <=c_z1__35;
+		r_z0__35 <=c_z0__35;
+		r_mut__35 <=c_mut__35;
+		
+		//for 36
+		r_x__36	<=c_x__36;
+		r_y__36	<=c_y__36;
+		r_z__36	<=c_z__36;
+		r_ux__36	<=c_ux__36;
+		r_uy__36	<=c_uy__36;
+		r_uz__36	<=c_uz__36;
+		r_sz__36	<=c_sz__36;
+		r_sr__36	<=c_sr__36;
+		r_sleftz__36	<=c_sleftz__36;
+		r_sleftr__36	<=c_sleftr__36;
+		r_weight__36	<=c_weight__36;
+		r_layer__36	<=c_layer__36;
+		r_dead__36	<=c_dead__36;
+		r_hit__36	<=c_hit__36;
+		r_diff__36 <=c_diff__36;
+		r_dl_b__36 <=c_dl_b__36;
+		r_numer__36 <=c_numer__36;
+		r_z1__36 <=c_z1__36;
+		r_z0__36 <=c_z0__36;
+		r_mut__36 <=c_mut__36;
+		
+		//for 37
+		r_x__37	<=c_x__37;
+		r_y__37	<=c_y__37;
+		r_z__37	<=c_z__37;
+		r_ux__37	<=c_ux__37;
+		r_uy__37	<=c_uy__37;
+		r_uz__37	<=c_uz__37;
+		r_sz__37	<=c_sz__37;
+		r_sr__37	<=c_sr__37;
+		r_sleftz__37	<=c_sleftz__37;
+		r_sleftr__37	<=c_sleftr__37;
+		r_weight__37	<=c_weight__37;
+		r_layer__37	<=c_layer__37;
+		r_dead__37	<=c_dead__37;
+		r_hit__37	<=c_hit__37;
+		r_diff__37 <=c_diff__37;
+		r_dl_b__37 <=c_dl_b__37;
+		r_numer__37 <=c_numer__37;
+		r_z1__37 <=c_z1__37;
+		r_z0__37 <=c_z0__37;
+		r_mut__37 <=c_mut__37;
+		
+		//for 38
+		r_x__38	<=c_x__38;
+		r_y__38	<=c_y__38;
+		r_z__38	<=c_z__38;
+		r_ux__38	<=c_ux__38;
+		r_uy__38	<=c_uy__38;
+		r_uz__38	<=c_uz__38;
+		r_sz__38	<=c_sz__38;
+		r_sr__38	<=c_sr__38;
+		r_sleftz__38	<=c_sleftz__38;
+		r_sleftr__38	<=c_sleftr__38;
+		r_weight__38	<=c_weight__38;
+		r_layer__38	<=c_layer__38;
+		r_dead__38	<=c_dead__38;
+		r_hit__38	<=c_hit__38;
+		r_diff__38 <=c_diff__38;
+		r_dl_b__38 <=c_dl_b__38;
+		r_numer__38 <=c_numer__38;
+		r_z1__38 <=c_z1__38;
+		r_z0__38 <=c_z0__38;
+		r_mut__38 <=c_mut__38;
+		
+		//for 39
+		r_x__39	<=c_x__39;
+		r_y__39	<=c_y__39;
+		r_z__39	<=c_z__39;
+		r_ux__39	<=c_ux__39;
+		r_uy__39	<=c_uy__39;
+		r_uz__39	<=c_uz__39;
+		r_sz__39	<=c_sz__39;
+		r_sr__39	<=c_sr__39;
+		r_sleftz__39	<=c_sleftz__39;
+		r_sleftr__39	<=c_sleftr__39;
+		r_weight__39	<=c_weight__39;
+		r_layer__39	<=c_layer__39;
+		r_dead__39	<=c_dead__39;
+		r_hit__39	<=c_hit__39;
+		r_diff__39 <=c_diff__39;
+		r_dl_b__39 <=c_dl_b__39;
+		r_numer__39 <=c_numer__39;
+		r_z1__39 <=c_z1__39;
+		r_z0__39 <=c_z0__39;
+		r_mut__39 <=c_mut__39;
+		
+		//for 40
+		r_x__40	<=c_x__40;
+		r_y__40	<=c_y__40;
+		r_z__40	<=c_z__40;
+		r_ux__40	<=c_ux__40;
+		r_uy__40	<=c_uy__40;
+		r_uz__40	<=c_uz__40;
+		r_sz__40	<=c_sz__40;
+		r_sr__40	<=c_sr__40;
+		r_sleftz__40	<=c_sleftz__40;
+		r_sleftr__40	<=c_sleftr__40;
+		r_weight__40	<=c_weight__40;
+		r_layer__40	<=c_layer__40;
+		r_dead__40	<=c_dead__40;
+		r_hit__40	<=c_hit__40;
+		r_diff__40 <=c_diff__40;
+		r_dl_b__40 <=c_dl_b__40;
+		r_numer__40 <=c_numer__40;
+		r_z1__40 <=c_z1__40;
+		r_z0__40 <=c_z0__40;
+		r_mut__40 <=c_mut__40;
+		
+		//for 41
+		r_x__41	<=c_x__41;
+		r_y__41	<=c_y__41;
+		r_z__41	<=c_z__41;
+		r_ux__41	<=c_ux__41;
+		r_uy__41	<=c_uy__41;
+		r_uz__41	<=c_uz__41;
+		r_sz__41	<=c_sz__41;
+		r_sr__41	<=c_sr__41;
+		r_sleftz__41	<=c_sleftz__41;
+		r_sleftr__41	<=c_sleftr__41;
+		r_weight__41	<=c_weight__41;
+		r_layer__41	<=c_layer__41;
+		r_dead__41	<=c_dead__41;
+		r_hit__41	<=c_hit__41;
+		r_diff__41 <=c_diff__41;
+		r_dl_b__41 <=c_dl_b__41;
+		r_numer__41 <=c_numer__41;
+		r_z1__41 <=c_z1__41;
+		r_z0__41 <=c_z0__41;
+		r_mut__41 <=c_mut__41;
+		
+		//for 42
+		r_x__42	<=c_x__42;
+		r_y__42	<=c_y__42;
+		r_z__42	<=c_z__42;
+		r_ux__42	<=c_ux__42;
+		r_uy__42	<=c_uy__42;
+		r_uz__42	<=c_uz__42;
+		r_sz__42	<=c_sz__42;
+		r_sr__42	<=c_sr__42;
+		r_sleftz__42	<=c_sleftz__42;
+		r_sleftr__42	<=c_sleftr__42;
+		r_weight__42	<=c_weight__42;
+		r_layer__42	<=c_layer__42;
+		r_dead__42	<=c_dead__42;
+		r_hit__42	<=c_hit__42;
+		r_diff__42 <=c_diff__42;
+		r_dl_b__42 <=c_dl_b__42;
+		r_numer__42 <=c_numer__42;
+		r_z1__42 <=c_z1__42;
+		r_z0__42 <=c_z0__42;
+		r_mut__42 <=c_mut__42;
+		
+		//for 43
+		r_x__43	<=c_x__43;
+		r_y__43	<=c_y__43;
+		r_z__43	<=c_z__43;
+		r_ux__43	<=c_ux__43;
+		r_uy__43	<=c_uy__43;
+		r_uz__43	<=c_uz__43;
+		r_sz__43	<=c_sz__43;
+		r_sr__43	<=c_sr__43;
+		r_sleftz__43	<=c_sleftz__43;
+		r_sleftr__43	<=c_sleftr__43;
+		r_weight__43	<=c_weight__43;
+		r_layer__43	<=c_layer__43;
+		r_dead__43	<=c_dead__43;
+		r_hit__43	<=c_hit__43;
+		r_diff__43 <=c_diff__43;
+		r_dl_b__43 <=c_dl_b__43;
+		r_numer__43 <=c_numer__43;
+		r_z1__43 <=c_z1__43;
+		r_z0__43 <=c_z0__43;
+		r_mut__43 <=c_mut__43;
+		
+		//for 44
+		r_x__44	<=c_x__44;
+		r_y__44	<=c_y__44;
+		r_z__44	<=c_z__44;
+		r_ux__44	<=c_ux__44;
+		r_uy__44	<=c_uy__44;
+		r_uz__44	<=c_uz__44;
+		r_sz__44	<=c_sz__44;
+		r_sr__44	<=c_sr__44;
+		r_sleftz__44	<=c_sleftz__44;
+		r_sleftr__44	<=c_sleftr__44;
+		r_weight__44	<=c_weight__44;
+		r_layer__44	<=c_layer__44;
+		r_dead__44	<=c_dead__44;
+		r_hit__44	<=c_hit__44;
+		r_diff__44 <=c_diff__44;
+		r_dl_b__44 <=c_dl_b__44;
+		r_numer__44 <=c_numer__44;
+		r_z1__44 <=c_z1__44;
+		r_z0__44 <=c_z0__44;
+		r_mut__44 <=c_mut__44;
+		
+		//for 45
+		r_x__45	<=c_x__45;
+		r_y__45	<=c_y__45;
+		r_z__45	<=c_z__45;
+		r_ux__45	<=c_ux__45;
+		r_uy__45	<=c_uy__45;
+		r_uz__45	<=c_uz__45;
+		r_sz__45	<=c_sz__45;
+		r_sr__45	<=c_sr__45;
+		r_sleftz__45	<=c_sleftz__45;
+		r_sleftr__45	<=c_sleftr__45;
+		r_weight__45	<=c_weight__45;
+		r_layer__45	<=c_layer__45;
+		r_dead__45	<=c_dead__45;
+		r_hit__45	<=c_hit__45;
+		r_diff__45 <=c_diff__45;
+		r_dl_b__45 <=c_dl_b__45;
+		r_numer__45 <=c_numer__45;
+		r_z1__45 <=c_z1__45;
+		r_z0__45 <=c_z0__45;
+		r_mut__45 <=c_mut__45;
+		
+		//for 46
+		r_x__46	<=c_x__46;
+		r_y__46	<=c_y__46;
+		r_z__46	<=c_z__46;
+		r_ux__46	<=c_ux__46;
+		r_uy__46	<=c_uy__46;
+		r_uz__46	<=c_uz__46;
+		r_sz__46	<=c_sz__46;
+		r_sr__46	<=c_sr__46;
+		r_sleftz__46	<=c_sleftz__46;
+		r_sleftr__46	<=c_sleftr__46;
+		r_weight__46	<=c_weight__46;
+		r_layer__46	<=c_layer__46;
+		r_dead__46	<=c_dead__46;
+		r_hit__46	<=c_hit__46;
+		r_diff__46 <=c_diff__46;
+		r_dl_b__46 <=c_dl_b__46;
+		r_numer__46 <=c_numer__46;
+		r_z1__46 <=c_z1__46;
+		r_z0__46 <=c_z0__46;
+		r_mut__46 <=c_mut__46;
+		
+		//for 47
+		r_x__47	<=c_x__47;
+		r_y__47	<=c_y__47;
+		r_z__47	<=c_z__47;
+		r_ux__47	<=c_ux__47;
+		r_uy__47	<=c_uy__47;
+		r_uz__47	<=c_uz__47;
+		r_sz__47	<=c_sz__47;
+		r_sr__47	<=c_sr__47;
+		r_sleftz__47	<=c_sleftz__47;
+		r_sleftr__47	<=c_sleftr__47;
+		r_weight__47	<=c_weight__47;
+		r_layer__47	<=c_layer__47;
+		r_dead__47	<=c_dead__47;
+		r_hit__47	<=c_hit__47;
+		r_diff__47 <=c_diff__47;
+		r_dl_b__47 <=c_dl_b__47;
+		r_numer__47 <=c_numer__47;
+		r_z1__47 <=c_z1__47;
+		r_z0__47 <=c_z0__47;
+		r_mut__47 <=c_mut__47;
+		
+		//for 48
+		r_x__48	<=c_x__48;
+		r_y__48	<=c_y__48;
+		r_z__48	<=c_z__48;
+		r_ux__48	<=c_ux__48;
+		r_uy__48	<=c_uy__48;
+		r_uz__48	<=c_uz__48;
+		r_sz__48	<=c_sz__48;
+		r_sr__48	<=c_sr__48;
+		r_sleftz__48	<=c_sleftz__48;
+		r_sleftr__48	<=c_sleftr__48;
+		r_weight__48	<=c_weight__48;
+		r_layer__48	<=c_layer__48;
+		r_dead__48	<=c_dead__48;
+		r_hit__48	<=c_hit__48;
+		r_diff__48 <=c_diff__48;
+		r_dl_b__48 <=c_dl_b__48;
+		r_numer__48 <=c_numer__48;
+		r_z1__48 <=c_z1__48;
+		r_z0__48 <=c_z0__48;
+		r_mut__48 <=c_mut__48;
+		
+		//for 49
+		r_x__49	<=c_x__49;
+		r_y__49	<=c_y__49;
+		r_z__49	<=c_z__49;
+		r_ux__49	<=c_ux__49;
+		r_uy__49	<=c_uy__49;
+		r_uz__49	<=c_uz__49;
+		r_sz__49	<=c_sz__49;
+		r_sr__49	<=c_sr__49;
+		r_sleftz__49	<=c_sleftz__49;
+		r_sleftr__49	<=c_sleftr__49;
+		r_weight__49	<=c_weight__49;
+		r_layer__49	<=c_layer__49;
+		r_dead__49	<=c_dead__49;
+		r_hit__49	<=c_hit__49;
+		r_diff__49 <=c_diff__49;
+		r_dl_b__49 <=c_dl_b__49;
+		r_numer__49 <=c_numer__49;
+		r_z1__49 <=c_z1__49;
+		r_z0__49 <=c_z0__49;
+		r_mut__49 <=c_mut__49;
+		
+		//for 50
+		r_x__50	<=c_x__50;
+		r_y__50	<=c_y__50;
+		r_z__50	<=c_z__50;
+		r_ux__50	<=c_ux__50;
+		r_uy__50	<=c_uy__50;
+		r_uz__50	<=c_uz__50;
+		r_sz__50	<=c_sz__50;
+		r_sr__50	<=c_sr__50;
+		r_sleftz__50	<=c_sleftz__50;
+		r_sleftr__50	<=c_sleftr__50;
+		r_weight__50	<=c_weight__50;
+		r_layer__50	<=c_layer__50;
+		r_dead__50	<=c_dead__50;
+		r_hit__50	<=c_hit__50;
+		r_diff__50 <=c_diff__50;
+		r_dl_b__50 <=c_dl_b__50;
+		r_numer__50 <=c_numer__50;
+		r_z1__50 <=c_z1__50;
+		r_z0__50 <=c_z0__50;
+		r_mut__50 <=c_mut__50;
+		
+		//for 51
+		r_x__51	<=c_x__51;
+		r_y__51	<=c_y__51;
+		r_z__51	<=c_z__51;
+		r_ux__51	<=c_ux__51;
+		r_uy__51	<=c_uy__51;
+		r_uz__51	<=c_uz__51;
+		r_sz__51	<=c_sz__51;
+		r_sr__51	<=c_sr__51;
+		r_sleftz__51	<=c_sleftz__51;
+		r_sleftr__51	<=c_sleftr__51;
+		r_weight__51	<=c_weight__51;
+		r_layer__51	<=c_layer__51;
+		r_dead__51	<=c_dead__51;
+		r_hit__51	<=c_hit__51;
+		r_diff__51 <=c_diff__51;
+		r_dl_b__51 <=c_dl_b__51;
+		r_numer__51 <=c_numer__51;
+		r_z1__51 <=c_z1__51;
+		r_z0__51 <=c_z0__51;
+		r_mut__51 <=c_mut__51;
+		
+		//for 52
+		r_x__52	<=c_x__52;
+		r_y__52	<=c_y__52;
+		r_z__52	<=c_z__52;
+		r_ux__52	<=c_ux__52;
+		r_uy__52	<=c_uy__52;
+		r_uz__52	<=c_uz__52;
+		r_sz__52	<=c_sz__52;
+		r_sr__52	<=c_sr__52;
+		r_sleftz__52	<=c_sleftz__52;
+		r_sleftr__52	<=c_sleftr__52;
+		r_weight__52	<=c_weight__52;
+		r_layer__52	<=c_layer__52;
+		r_dead__52	<=c_dead__52;
+		r_hit__52	<=c_hit__52;
+		r_diff__52 <=c_diff__52;
+		r_dl_b__52 <=c_dl_b__52;
+		r_numer__52 <=c_numer__52;
+		r_z1__52 <=c_z1__52;
+		r_z0__52 <=c_z0__52;
+		r_mut__52 <=c_mut__52;
+		
+		//for 53
+		r_x__53	<=c_x__53;
+		r_y__53	<=c_y__53;
+		r_z__53	<=c_z__53;
+		r_ux__53	<=c_ux__53;
+		r_uy__53	<=c_uy__53;
+		r_uz__53	<=c_uz__53;
+		r_sz__53	<=c_sz__53;
+		r_sr__53	<=c_sr__53;
+		r_sleftz__53	<=c_sleftz__53;
+		r_sleftr__53	<=c_sleftr__53;
+		r_weight__53	<=c_weight__53;
+		r_layer__53	<=c_layer__53;
+		r_dead__53	<=c_dead__53;
+		r_hit__53	<=c_hit__53;
+		r_diff__53 <=c_diff__53;
+		r_dl_b__53 <=c_dl_b__53;
+		r_numer__53 <=c_numer__53;
+		r_z1__53 <=c_z1__53;
+		r_z0__53 <=c_z0__53;
+		r_mut__53 <=c_mut__53;
+		
+		//for 54
+		r_x__54	<=c_x__54;
+		r_y__54	<=c_y__54;
+		r_z__54	<=c_z__54;
+		r_ux__54	<=c_ux__54;
+		r_uy__54	<=c_uy__54;
+		r_uz__54	<=c_uz__54;
+		r_sz__54	<=c_sz__54;
+		r_sr__54	<=c_sr__54;
+		r_sleftz__54	<=c_sleftz__54;
+		r_sleftr__54	<=c_sleftr__54;
+		r_weight__54	<=c_weight__54;
+		r_layer__54	<=c_layer__54;
+		r_dead__54	<=c_dead__54;
+		r_hit__54	<=c_hit__54;
+		r_diff__54 <=c_diff__54;
+		r_dl_b__54 <=c_dl_b__54;
+		r_numer__54 <=c_numer__54;
+		r_z1__54 <=c_z1__54;
+		r_z0__54 <=c_z0__54;
+		r_mut__54 <=c_mut__54;
+		
+		//for 55
+		r_x__55	<=c_x__55;
+		r_y__55	<=c_y__55;
+		r_z__55	<=c_z__55;
+		r_ux__55	<=c_ux__55;
+		r_uy__55	<=c_uy__55;
+		r_uz__55	<=c_uz__55;
+		r_sz__55	<=c_sz__55;
+		r_sr__55	<=c_sr__55;
+		r_sleftz__55	<=c_sleftz__55;
+		r_sleftr__55	<=c_sleftr__55;
+		r_weight__55	<=c_weight__55;
+		r_layer__55	<=c_layer__55;
+		r_dead__55	<=c_dead__55;
+		r_hit__55	<=c_hit__55;
+		r_diff__55 <=c_diff__55;
+		r_dl_b__55 <=c_dl_b__55;
+		r_numer__55 <=c_numer__55;
+		r_z1__55 <=c_z1__55;
+		r_z0__55 <=c_z0__55;
+		r_mut__55 <=c_mut__55;
+		
+		//for 56
+		r_x__56	<=c_x__56;
+		r_y__56	<=c_y__56;
+		r_z__56	<=c_z__56;
+		r_ux__56	<=c_ux__56;
+		r_uy__56	<=c_uy__56;
+		r_uz__56	<=c_uz__56;
+		r_sz__56	<=c_sz__56;
+		r_sr__56	<=c_sr__56;
+		r_sleftz__56	<=c_sleftz__56;
+		r_sleftr__56	<=c_sleftr__56;
+		r_weight__56	<=c_weight__56;
+		r_layer__56	<=c_layer__56;
+		r_dead__56	<=c_dead__56;
+		r_hit__56	<=c_hit__56;
+		r_diff__56 <=c_diff__56;
+		r_dl_b__56 <=c_dl_b__56;
+		r_numer__56 <=c_numer__56;
+		r_z1__56 <=c_z1__56;
+		r_z0__56 <=c_z0__56;
+		r_mut__56 <=c_mut__56;
+		
+		//for 57
+		r_x__57	<=c_x__57;
+		r_y__57	<=c_y__57;
+		r_z__57	<=c_z__57;
+		r_ux__57	<=c_ux__57;
+		r_uy__57	<=c_uy__57;
+		r_uz__57	<=c_uz__57;
+		r_sz__57	<=c_sz__57;
+		r_sr__57	<=c_sr__57;
+		r_sleftz__57	<=c_sleftz__57;
+		r_sleftr__57	<=c_sleftr__57;
+		r_weight__57	<=c_weight__57;
+		r_layer__57	<=c_layer__57;
+		r_dead__57	<=c_dead__57;
+		r_hit__57	<=c_hit__57;
+		r_diff__57 <=c_diff__57;
+		r_dl_b__57 <=c_dl_b__57;
+		r_numer__57 <=c_numer__57;
+		r_z1__57 <=c_z1__57;
+		r_z0__57 <=c_z0__57;
+		r_mut__57 <=c_mut__57;
+		
+		//for 58
+		r_x__58	<=c_x__58;
+		r_y__58	<=c_y__58;
+		r_z__58	<=c_z__58;
+		r_ux__58	<=c_ux__58;
+		r_uy__58	<=c_uy__58;
+		r_uz__58	<=c_uz__58;
+		r_sz__58	<=c_sz__58;
+		r_sr__58	<=c_sr__58;
+		r_sleftz__58	<=c_sleftz__58;
+		r_sleftr__58	<=c_sleftr__58;
+		r_weight__58	<=c_weight__58;
+		r_layer__58	<=c_layer__58;
+		r_dead__58	<=c_dead__58;
+		r_hit__58	<=c_hit__58;
+		r_diff__58 <=c_diff__58;
+		r_dl_b__58 <=c_dl_b__58;
+		r_numer__58 <=c_numer__58;
+		r_z1__58 <=c_z1__58;
+		r_z0__58 <=c_z0__58;
+		r_mut__58 <=c_mut__58;
+		
+		//for 59
+		r_x__59	<=c_x__59;
+		r_y__59	<=c_y__59;
+		r_z__59	<=c_z__59;
+		r_ux__59	<=c_ux__59;
+		r_uy__59	<=c_uy__59;
+		r_uz__59	<=c_uz__59;
+		r_sz__59	<=c_sz__59;
+		r_sr__59	<=c_sr__59;
+		r_sleftz__59	<=c_sleftz__59;
+		r_sleftr__59	<=c_sleftr__59;
+		r_weight__59	<=c_weight__59;
+		r_layer__59	<=c_layer__59;
+		r_dead__59	<=c_dead__59;
+		r_hit__59	<=c_hit__59;
+		r_diff__59 <=c_diff__59;
+		r_dl_b__59 <=c_dl_b__59;
+		r_numer__59 <=c_numer__59;
+		r_z1__59 <=c_z1__59;
+		r_z0__59 <=c_z0__59;
+		r_mut__59 <=c_mut__59;
+		
+		end
+	end
+end
+
+endmodule
+
+
+/////////////////////////////////////////////////////////////
+//mult_signed_32_bc 
+/////////////////////////////////////////////////////////////
+module mult_signed_32_bc ( clock, dataa, datab, result);
+
+
+	input clock;
+	input [31:0] dataa;
+	input [31:0] datab;
+	output [63:0] result;
+	reg [63:0] result;
+	
+	wire [63:0] prelim_result;
+	
+	
+	wire [31:0] opa;
+	wire [31:0] opb;
+	wire [31:0] opa_comp;
+	wire [31:0] opb_comp;
+	
+	assign opa_comp =  ((~dataa) + 32'b00000000000000000000000000000001);
+
+	assign opb_comp =  ((~datab) + 32'b00000000000000000000000000000001);
+
+	
+	wire opa_is_neg;
+	wire opb_is_neg;
+	assign opa_is_neg = dataa[31];
+	assign opb_is_neg = datab [31];
+	assign opa = (opa_is_neg== 1'b1) ? opa_comp:dataa;
+	assign opb = (opb_is_neg == 1'b1) ? opb_comp:datab;
+	
+	
+	assign prelim_result = opa * opb ;
+	wire sign;
+	assign sign = dataa[31] ^ datab[31];
+	
+	wire [63:0] prelim_result_comp;
+	wire [63:0] prelim_result_changed;
+	wire [63:0] result_changed;
+	assign result_changed = (sign==1'b1)? prelim_result_comp :prelim_result;
+	assign prelim_result_comp =  ((~prelim_result) + 1);
+	
+	always @ (posedge clock)
+	begin
+	result <= result_changed;
+	end
+	
+	endmodule
+
+
+/////////////////////////////////////////////////////////////
+//signed_div_30 
+/////////////////////////////////////////////////////////////
+module signed_div_30 (clock , denom , numer, quotient, remain);
+
+input clock;
+
+input [31:0] denom;
+
+input [63:0] numer;
+
+output [63:0] quotient;
+
+output [31:0] remain;
+
+Div_64b div_replace (.clock(clock), .denom(denom), .numer(numer), .quotient(quotient), .remain(remain));
+
+endmodule 
+module Hop(     //INPUTS
+				 clock, reset, enable,
+				 x_boundaryChecker, y_boundaryChecker, z_boundaryChecker,
+				 ux_boundaryChecker, uy_boundaryChecker, uz_boundaryChecker,
+				 sz_boundaryChecker, sr_boundaryChecker,
+				 sleftz_boundaryChecker, sleftr_boundaryChecker,
+				 layer_boundaryChecker, weight_boundaryChecker, dead_boundaryChecker,
+				 hit_boundaryChecker,
+
+				 //OUTPUTS
+				 x_hop, y_hop, z_hop,
+				 ux_hop, uy_hop, uz_hop,
+				 sz_hop, sr_hop,
+				 sleftz_hop, sleftr_hop,
+				 layer_hop, weight_hop, dead_hop, hit_hop
+				 );
+
+//parameter BIT_WIDTH=32;
+//parameter LAYER_WIDTH=3;
+//parameter INTMAX=2147483647;
+//parameter INTMIN=-2147483648;
+
+input clock;
+input reset;
+input enable;
+
+input [`BIT_WIDTH-1:0] x_boundaryChecker;
+input [`BIT_WIDTH-1:0] y_boundaryChecker;
+input [`BIT_WIDTH-1:0] z_boundaryChecker;
+input [`BIT_WIDTH-1:0] ux_boundaryChecker;
+input [`BIT_WIDTH-1:0] uy_boundaryChecker;
+input [`BIT_WIDTH-1:0] uz_boundaryChecker;
+input [`BIT_WIDTH-1:0] sz_boundaryChecker;
+input [`BIT_WIDTH-1:0] sr_boundaryChecker;
+input [`BIT_WIDTH-1:0] sleftz_boundaryChecker;
+input [`BIT_WIDTH-1:0] sleftr_boundaryChecker;
+input [`LAYER_WIDTH-1:0] layer_boundaryChecker;
+input [`BIT_WIDTH-1:0] weight_boundaryChecker;
+input	dead_boundaryChecker;
+input	hit_boundaryChecker;
+
+output [`BIT_WIDTH-1:0] x_hop;
+output [`BIT_WIDTH-1:0] y_hop;
+output [`BIT_WIDTH-1:0] z_hop;
+output [`BIT_WIDTH-1:0] ux_hop;
+output [`BIT_WIDTH-1:0] uy_hop;
+output [`BIT_WIDTH-1:0] uz_hop;
+output [`BIT_WIDTH-1:0] sz_hop;
+output [`BIT_WIDTH-1:0] sr_hop;
+output [`BIT_WIDTH-1:0] sleftz_hop;
+output [`BIT_WIDTH-1:0] sleftr_hop;
+output [`LAYER_WIDTH-1:0]layer_hop;
+output [`BIT_WIDTH-1:0] weight_hop;
+output dead_hop;
+output hit_hop;
+
+//------------Local Variables------------------------
+reg [`BIT_WIDTH-1:0] c_x;
+reg [`BIT_WIDTH-1:0] c_y;
+reg [`BIT_WIDTH-1:0] c_z;
+reg c_dead;
+
+reg [`BIT_WIDTH:0] c_x_big;
+reg [`BIT_WIDTH:0] c_y_big;
+reg [`BIT_WIDTH:0] c_z_big;
+
+wire [2*`BIT_WIDTH-1:0] c_xmult_big;
+wire [2*`BIT_WIDTH-1:0] c_ymult_big;
+wire [2*`BIT_WIDTH-1:0] c_zmult_big;
+
+//------------REGISTERED Values------------------------
+reg [`BIT_WIDTH-1:0] x_hop;
+reg [`BIT_WIDTH-1:0] y_hop;
+reg [`BIT_WIDTH-1:0] z_hop;
+reg [`BIT_WIDTH-1:0] ux_hop;
+reg [`BIT_WIDTH-1:0] uy_hop;
+reg [`BIT_WIDTH-1:0] uz_hop;
+reg [`BIT_WIDTH-1:0] sz_hop;
+reg [`BIT_WIDTH-1:0] sr_hop;
+reg [`BIT_WIDTH-1:0] sleftz_hop;
+reg [`BIT_WIDTH-1:0] sleftr_hop;
+reg [`LAYER_WIDTH-1:0]layer_hop;
+reg [`BIT_WIDTH-1:0] weight_hop;
+reg	dead_hop;
+reg	hit_hop;
+
+mult_signed_32 u1(sr_boundaryChecker, ux_boundaryChecker, c_xmult_big);
+mult_signed_32 u2(sr_boundaryChecker, uy_boundaryChecker, c_ymult_big);
+mult_signed_32 u3(sz_boundaryChecker, uz_boundaryChecker, c_zmult_big);
+
+// Determine new (x,y,z) coordinates
+always @(c_dead or 
+		c_x_big or c_y_big or c_z_big or 
+		c_x or c_y or c_z or
+		x_boundaryChecker or y_boundaryChecker or z_boundaryChecker or
+		c_xmult_big or c_ymult_big or c_zmult_big 
+		or hit_boundaryChecker or dead_boundaryChecker)
+begin
+		
+	c_x_big = x_boundaryChecker + c_xmult_big[2*`BIT_WIDTH-2:31];
+	c_y_big = y_boundaryChecker + c_ymult_big[2*`BIT_WIDTH-2:31];
+	c_z_big = z_boundaryChecker + c_zmult_big[2*`BIT_WIDTH-2:31];
+
+
+	// Calculate x position, photon dies if outside grid
+	if(c_x_big[`BIT_WIDTH] != c_x_big[`BIT_WIDTH-1] && x_boundaryChecker[`BIT_WIDTH-1] == c_xmult_big[2*`BIT_WIDTH-2])
+	begin
+		if(c_x_big[`BIT_WIDTH] == 1'b0)
+		begin
+		//	c_dead = 1'b1;
+			c_x = `INTMAX;
+		end
+		else
+		begin
+		//	c_dead = 1'b1;
+			c_x = `INTMIN;
+		end
+	end 
+	else
+	begin
+		c_x = c_x_big[`BIT_WIDTH-1:0];
+	end
+
+	
+	// Calculate y position, photon dies if outside grid
+	if(c_y_big[`BIT_WIDTH] != c_y_big[`BIT_WIDTH-1] && y_boundaryChecker[`BIT_WIDTH-1] == c_ymult_big[2*`BIT_WIDTH-2])
+	begin
+		if(c_y_big[`BIT_WIDTH] == 1'b0)
+		begin
+		//	c_dead = 1'b1;
+			c_y = `INTMAX;
+		end
+		else
+		begin
+		//	c_dead = 1'b1;
+			c_y = `INTMIN;
+		end
+	end
+	else
+	begin
+		c_y = c_y_big[`BIT_WIDTH-1:0];
+	end
+	
+	// Calculate z position, photon dies if outside grid
+	if(hit_boundaryChecker) 
+	begin
+		c_z = z_boundaryChecker;
+	end
+	else if(c_z_big[`BIT_WIDTH] != c_z_big[`BIT_WIDTH-1] && z_boundaryChecker[`BIT_WIDTH-1] == c_zmult_big[2*`BIT_WIDTH-2])
+	begin
+	//	c_dead = 1'b1;
+		c_z = `INTMAX;
+	end
+	else if (c_z_big[`BIT_WIDTH-1] == 1'b1)
+	begin
+	//	c_dead = 1'b1;
+		c_z = 0;
+	end 
+	else
+	begin
+		c_z = c_z_big[`BIT_WIDTH-1:0];
+	end
+	
+	// Calculate c_dead (necessary because odin does not support block statements).
+	if( (c_x_big[`BIT_WIDTH] != c_x_big[`BIT_WIDTH-1] && x_boundaryChecker[`BIT_WIDTH-1] == c_xmult_big[2*`BIT_WIDTH-2])
+	   |(c_y_big[`BIT_WIDTH] != c_y_big[`BIT_WIDTH-1] && y_boundaryChecker[`BIT_WIDTH-1] == c_ymult_big[2*`BIT_WIDTH-2])
+	   |(c_z_big[`BIT_WIDTH] != c_z_big[`BIT_WIDTH-1] && z_boundaryChecker[`BIT_WIDTH-1] == c_zmult_big[2*`BIT_WIDTH-2]) )
+	begin
+		c_dead = 1'b1;
+	end
+	else
+	begin
+		c_dead = dead_boundaryChecker;
+	end
+
+end
+
+// latch values
+always @ (posedge clock)
+begin
+	if (reset)
+	begin
+		// Photon variables
+		x_hop <= 0;
+		y_hop <= 0;
+		z_hop <= 0;
+		ux_hop <= 0;
+		uy_hop <= 0;
+		uz_hop <= 0;
+		sz_hop <= 0;
+		sr_hop <= 0;
+		sleftz_hop <= 0;
+		sleftr_hop <= 0;
+		layer_hop <= 0;
+		weight_hop <= 0;
+		dead_hop <= 1'b1;
+		hit_hop <= 1'b0;
+	end
+	else
+	begin
+		if(enable)
+		begin
+			// Photon variables
+			ux_hop <= ux_boundaryChecker;
+			uy_hop <= uy_boundaryChecker;
+			uz_hop <= uz_boundaryChecker;
+			sz_hop <= sz_boundaryChecker;
+			sr_hop <= sr_boundaryChecker;
+			sleftz_hop <= sleftz_boundaryChecker;
+			sleftr_hop <= sleftr_boundaryChecker;
+			layer_hop <= layer_boundaryChecker;
+			weight_hop <= weight_boundaryChecker;
+			hit_hop <= hit_boundaryChecker;
+
+			x_hop <= c_x;
+			y_hop <= c_y;
+			z_hop <= c_z;
+			dead_hop <= c_dead;
+		end			
+	end
+end
+
+endmodule
+
+
+/////////////////////////////////////////////////////////////
+//mult_signed_32
+/////////////////////////////////////////////////////////////
+module mult_signed_32(a, b, c);
+	input [31:0]a;
+	input [31:0]b;
+	output [63:0]c;
+	reg [63:0]c;
+	
+	reg is_neg_a;
+	reg is_neg_b;
+	reg [31:0]a_tmp;
+	reg [31:0]b_tmp;
+	reg [63:0]c_tmp;
+
+
+always@(a or b or is_neg_a or is_neg_b or a_tmp or b_tmp or c)
+begin
+
+	if(a[31] == 1) begin
+		a_tmp = -a;
+		is_neg_a = 1;
+	end else
+	begin
+		a_tmp = a;
+		is_neg_a = 0;
+	end
+
+	if(b[31] == 1) begin
+		b_tmp = -b;
+		is_neg_b = 1;
+	end else
+	begin
+		b_tmp = b;
+		is_neg_b = 0;
+	end
+
+	if( is_neg_a != is_neg_b) begin
+		c_tmp = -(a_tmp * b_tmp);
+	end else
+	begin
+		c_tmp = (a_tmp * b_tmp);
+	end
+end
+
+always@(c_tmp)
+begin
+	c = c_tmp;
+end
+
+endmodule
+
+
+module Roulette ( //INPUTS
+                     clock, reset, enable, 
+                     x_RouletteMux, y_RouletteMux, z_RouletteMux,  
+                     ux_RouletteMux, uy_RouletteMux, uz_RouletteMux, 
+                     sz_RouletteMux, sr_RouletteMux, 
+                     sleftz_RouletteMux, sleftr_RouletteMux, 
+                     layer_RouletteMux, weight_absorber, dead_RouletteMux, 
+			
+		     //From Random Number Generator in Skeleton.v	
+		     randnumber,
+                     
+                     //OUTPUTS
+                     x_Roulette, y_Roulette, z_Roulette,
+                     ux_Roulette, uy_Roulette, uz_Roulette, 
+                     sz_Roulette, sr_Roulette, 
+                     sleftz_Roulette, sleftr_Roulette, 
+                     layer_Roulette, weight_Roulette, dead_Roulette
+                     ); 
+
+//parameter BIT_WIDTH=32;
+//parameter LAYER_WIDTH=3; 
+
+//parameter LEFTSHIFT=3;         // 2^3=8=1/0.125 where 0.125 = CHANCE of roulette
+//parameter INTCHANCE=536870912; //Based on 32 bit rand num generator
+//parameter MIN_WEIGHT=200; 
+
+input clock;        
+input reset;
+input enable;
+
+input [`BIT_WIDTH-1:0] x_RouletteMux;
+input [`BIT_WIDTH-1:0] y_RouletteMux;
+input [`BIT_WIDTH-1:0] z_RouletteMux;
+input [`BIT_WIDTH-1:0] ux_RouletteMux;
+input [`BIT_WIDTH-1:0] uy_RouletteMux;
+input [`BIT_WIDTH-1:0] uz_RouletteMux;
+input [`BIT_WIDTH-1:0] sz_RouletteMux;
+input [`BIT_WIDTH-1:0] sr_RouletteMux;
+input [`BIT_WIDTH-1:0] sleftz_RouletteMux;
+input [`BIT_WIDTH-1:0] sleftr_RouletteMux;
+input [`LAYER_WIDTH-1:0] layer_RouletteMux;
+input [`BIT_WIDTH-1:0] weight_absorber;
+input [`BIT_WIDTH-1:0] randnumber;
+input dead_RouletteMux;
+              
+output [`BIT_WIDTH-1:0] x_Roulette;
+output [`BIT_WIDTH-1:0] y_Roulette;
+output [`BIT_WIDTH-1:0] z_Roulette;
+output [`BIT_WIDTH-1:0] ux_Roulette;
+output [`BIT_WIDTH-1:0] uy_Roulette;
+output [`BIT_WIDTH-1:0] uz_Roulette;
+output [`BIT_WIDTH-1:0] sz_Roulette;
+output [`BIT_WIDTH-1:0] sr_Roulette;
+output [`BIT_WIDTH-1:0] sleftz_Roulette;
+output [`BIT_WIDTH-1:0] sleftr_Roulette;
+output [`LAYER_WIDTH-1:0]layer_Roulette;
+output [`BIT_WIDTH-1:0] weight_Roulette;
+output dead_Roulette;
+
+//------------Local Variables------------------------
+reg dead_roulette; 
+reg [`BIT_WIDTH-1:0] weight_roulette; 
+reg [31:0] randBits;             //Hard-coded bitwidth because rng is 32-bit
+
+//------------REGISTERED Values------------------------
+reg [`BIT_WIDTH-1:0] x_Roulette;
+reg [`BIT_WIDTH-1:0] y_Roulette;
+reg [`BIT_WIDTH-1:0] z_Roulette;
+reg [`BIT_WIDTH-1:0] ux_Roulette;
+reg [`BIT_WIDTH-1:0] uy_Roulette;
+reg [`BIT_WIDTH-1:0] uz_Roulette;
+reg [`BIT_WIDTH-1:0] sz_Roulette;
+reg [`BIT_WIDTH-1:0] sr_Roulette;
+reg [`BIT_WIDTH-1:0] sleftz_Roulette;
+reg [`BIT_WIDTH-1:0] sleftr_Roulette;
+reg [`LAYER_WIDTH-1:0]layer_Roulette;
+reg [`BIT_WIDTH-1:0] weight_Roulette;
+reg dead_Roulette;
+   
+always @ (reset or enable or weight_absorber or randBits or randnumber or dead_RouletteMux) begin 
+  	//Default case moved inside else statements for odin
+	//randBits = randnumber;   //Reading from external random num generator
+	//weight_roulette=weight_absorber;	//Avoid inferring a latch
+	//dead_roulette=dead_RouletteMux; 
+	
+	if (reset) begin 
+		//Local variables
+		weight_roulette=0; 
+		dead_roulette=0; 
+		randBits=0; 
+	end
+
+	else if (enable) begin
+		//Set default case
+		randBits = randnumber;
+		//DO ROULETTE!!!
+		if (weight_absorber < `MIN_WEIGHT && !dead_RouletteMux) begin
+			//Replicate Operator (same as 32'b000000..., except more flexible)			
+			if (weight_absorber== {`BIT_WIDTH{1'b0}}) begin
+				dead_roulette = 1;
+				weight_roulette = weight_absorber;
+			end
+				
+			else if (randBits < `INTCHANCE) begin // survived the roulette
+				dead_roulette=0;
+				weight_roulette=weight_absorber << `LEFTSHIFT; //To avoid mult
+			end
+			
+			else begin
+				dead_roulette=1;
+				weight_roulette = weight_absorber;
+			end
+		end
+		
+		//No Roulette
+		else  begin
+			weight_roulette = weight_absorber;
+			dead_roulette = 0;
+		end
+	end
+	
+	else //for insurance that this is default case
+	begin
+		randBits = randnumber;
+		weight_roulette = weight_absorber;
+		dead_roulette = dead_RouletteMux;
+	end
+end 
+
+always @ (posedge clock) begin
+	if (reset) begin
+		x_Roulette <= 0;
+		y_Roulette <= 0;
+		z_Roulette <= 0;
+		ux_Roulette <= 0;
+		uy_Roulette <= 0;
+		uz_Roulette <= 0;
+		sz_Roulette <= 0;
+		sr_Roulette <= 0;
+		sleftz_Roulette <= 0;
+		sleftr_Roulette <= 0;
+		layer_Roulette <= 0;
+		weight_Roulette <= 0;
+		dead_Roulette <= 1'b1;
+	end
+	
+	else if (enable) begin
+		//Write through values from Roulette block
+		dead_Roulette <= (dead_RouletteMux | dead_roulette);   //OR operator ???
+		weight_Roulette <= weight_roulette; //weight_absorber.read();
+
+		//Write through unchanged values
+		x_Roulette <= x_RouletteMux;
+		y_Roulette <= y_RouletteMux;
+		z_Roulette <= z_RouletteMux;
+
+		ux_Roulette <= ux_RouletteMux;
+		uy_Roulette <= uy_RouletteMux;
+		uz_Roulette <= uz_RouletteMux;
+		sz_Roulette <= sz_RouletteMux;
+		sr_Roulette <= sr_RouletteMux;
+		sleftz_Roulette <= sleftz_RouletteMux;
+		sleftr_Roulette <= sleftr_RouletteMux;
+		layer_Roulette <= layer_RouletteMux;
+	end
+end
+
+endmodule
+
+
+module rng(clk, en, resetn,loadseed_i,seed_i,number_o);
+input clk;
+input resetn;
+input en; 
+input loadseed_i;
+input [31:0] seed_i;
+output [31:0] number_o;
+
+wire [31:0] number_o;
+
+reg [31:0] c_b1, c_b2, c_b3;
+reg [31:0] c_s1, c_s2, c_s3;
+
+reg [31:0] r_s1, r_s2, r_s3;
+
+assign number_o = r_s1 ^ r_s2 ^ r_s3;
+
+always @(loadseed_i or seed_i or r_s1 or r_s2 or r_s3)
+begin
+	if(loadseed_i)
+	begin
+		c_b1 = 32'b0;
+		c_s1 = seed_i;
+		c_b2 = 32'b0;
+		c_s2 = {seed_i[5:0], seed_i[17], seed_i[18], seed_i[19], seed_i[20], seed_i[25:21], seed_i[31:26], seed_i[16:6]} ^ 32'd1493609598;
+		c_b3 = 32'b0;
+		c_s3 = {seed_i[23:16], seed_i[5], seed_i[6], seed_i[7], seed_i[15:8], seed_i[4:0], seed_i[31:24]} ^ 32'd3447127471;
+	end
+	else
+	begin
+		c_b1 = (((r_s1 << 13) ^ r_s1) >> 19);
+		c_s1 = (((r_s1 & 32'd4294967294) << 12) ^ c_b1);
+		c_b2 = (((r_s2 << 2) ^ r_s2) >> 25);
+		c_s2 = (((r_s2 & 32'd4294967288) << 4) ^ c_b2);
+		c_b3 = (((r_s3 << 3) ^ r_s3) >> 11);
+		c_s3 = (((r_s3 & 32'd4294967280) << 17) ^ c_b3);
+	end
+end
+
+
+//combinate:
+always @(posedge clk or negedge resetn)
+   begin
+   if (!resetn )
+      begin
+      r_s1 <= 32'b0;
+	  r_s2 <= 32'b0;
+	  r_s3 <= 32'b0;
+      end
+   else if (en)   //Originally else only
+      begin
+		  r_s1 <= c_s1;
+		  r_s2 <= c_s2;
+		  r_s3 <= c_s3;
+	  end
+   end
+
+endmodule
+
+
+
+module LogCalc(clock, reset, enable, in_x, log_x);
+
+//parameter BIT_WIDTH=32;
+//parameter MANTISSA_PRECISION=10;
+//parameter LOG2_BIT_WIDTH = 6;
+//parameter LOG2=93032639;
+
+input clock;
+input reset;
+input enable;
+input [`BIT_WIDTH - 1:0] in_x;
+output [`BIT_WIDTH - 1:0] log_x;
+
+
+wire [`BIT_WIDTH - 1:0] mantissa;
+
+reg [`BIT_WIDTH - 1:0] c_mantissa_val;
+
+// deleted unsigned in these
+reg [`BIT_WIDTH - 1:0] c_log_x;
+reg [`LOG2_BIT_WIDTH - 1:0] c_indexFirstOne;
+reg [`BIT_WIDTH - 1:0] c_temp_shift_x;
+reg [`MANTISSA_PRECISION - 1:0] c_shifted_x;
+
+reg [`LOG2_BIT_WIDTH - 1:0] r_indexFirstOne;
+reg [`BIT_WIDTH - 1:0] log_x;
+
+//Log_mantissa u1(c_shifted_x, clock, mantissa);
+wire [31:0]blank;
+assign blank = 32'b000000000000000000000000000000;
+(* S="true" *)
+single_port_ram #(.ADDR_WIDTH(`MANTISSA_PRECISION),.DATA_WIDTH(`BIT_WIDTH)) 
+	sram_replace0 (.clk (clock), .addr (c_shifted_x), .data (blank), .we (1'b0), .out (mantissa));
+
+// priority encoder
+//integer i;
+//always @(*)
+//begin
+//	c_indexFirstOne = 6'b0; 
+//	for(i = 0; i < `BIT_WIDTH; i = i + 1)
+//	begin
+//		if(in_x[i])
+//			c_indexFirstOne = i;
+//	end
+//end
+
+// Priority encoder, loop expanded
+always @(in_x)
+begin
+	if (in_x[31]) begin
+	c_indexFirstOne = 6'b011111;
+	end
+	else if (in_x[30]) begin
+	c_indexFirstOne = 6'b011110;
+	end
+	else if (in_x[29]) begin
+	c_indexFirstOne = 6'b011101;
+	end
+	else if (in_x[28]) begin
+	c_indexFirstOne = 6'b011100;
+	end
+	else if (in_x[27]) begin
+	c_indexFirstOne = 6'b011011;
+	end
+	else if (in_x[26]) begin
+	c_indexFirstOne = 6'b011010;
+	end
+	else if (in_x[25]) begin
+	c_indexFirstOne = 6'b011001;
+	end
+	else if (in_x[24]) begin
+	c_indexFirstOne = 6'b011000;
+	end
+	else if (in_x[23]) begin
+	c_indexFirstOne = 6'b010111;
+	end
+	else if (in_x[22]) begin
+	c_indexFirstOne = 6'b010110;
+	end
+	else if (in_x[21]) begin
+	c_indexFirstOne = 6'b010101;
+	end
+	else if (in_x[20]) begin
+	c_indexFirstOne = 6'b010100;
+	end
+	else if (in_x[19]) begin
+	c_indexFirstOne = 6'b010011;
+	end
+	else if (in_x[18]) begin
+	c_indexFirstOne = 6'b010010;
+	end
+	else if (in_x[17]) begin
+	c_indexFirstOne = 6'b010001;
+	end
+	else if (in_x[16]) begin
+	c_indexFirstOne = 6'b010000;
+	end
+	else if (in_x[15]) begin
+	c_indexFirstOne = 6'b001111;
+	end
+	else if (in_x[14]) begin
+	c_indexFirstOne = 6'b001110;
+	end
+	else if (in_x[13]) begin
+	c_indexFirstOne = 6'b001101;
+	end
+	else if (in_x[12]) begin
+	c_indexFirstOne = 6'b001100;
+	end
+	else if (in_x[11]) begin
+	c_indexFirstOne = 6'b001011;
+	end
+	else if (in_x[10]) begin
+	c_indexFirstOne = 6'b001010;
+	end
+	else if (in_x[9]) begin
+	c_indexFirstOne = 6'b001001;
+	end
+	else if (in_x[8]) begin
+	c_indexFirstOne = 6'b001000;
+	end
+	else if (in_x[7]) begin
+	c_indexFirstOne = 6'b000111;
+	end
+	else if (in_x[6]) begin
+	c_indexFirstOne = 6'b000110;
+	end
+	else if (in_x[5]) begin
+	c_indexFirstOne = 6'b000101;
+	end
+	else if (in_x[4]) begin
+	c_indexFirstOne = 6'b000100;
+	end
+	else if (in_x[3]) begin
+	c_indexFirstOne = 6'b000011;
+	end
+	else if (in_x[2]) begin
+	c_indexFirstOne = 6'b000010;
+	end
+	else if (in_x[1]) begin
+	c_indexFirstOne = 6'b000001;
+	end
+	else if (in_x[0]) begin
+	c_indexFirstOne = 6'b000000;
+	end
+	else begin
+	c_indexFirstOne = 6'b000000;
+	end
+end
+	
+// shift operation based on priority encoder results
+
+//Need constant shift
+wire [5:0]shifted;
+assign shifted = c_indexFirstOne - `MANTISSA_PRECISION + 1;
+
+always@(c_indexFirstOne or in_x or shifted)
+begin
+//	c_temp_shift_x = in_x >> (c_indexFirstOne - `MANTISSA_PRECISION + 1);
+	if(c_indexFirstOne >= `MANTISSA_PRECISION)
+	begin
+		if(shifted == 22) begin
+			c_temp_shift_x = in_x >> 22;
+		end
+		else if(shifted == 21) begin
+			c_temp_shift_x = in_x >> 21;
+		end
+		else if(shifted == 20) begin
+			c_temp_shift_x = in_x >> 20;
+		end
+		else if(shifted == 19) begin
+			c_temp_shift_x = in_x >> 19;
+		end
+		else if(shifted == 18) begin
+			c_temp_shift_x = in_x >> 18;
+		end
+		else if(shifted == 17) begin
+			c_temp_shift_x = in_x >> 17;
+		end
+		else if(shifted == 16) begin
+			c_temp_shift_x = in_x >> 16;
+		end
+		else if(shifted == 15) begin
+			c_temp_shift_x = in_x >> 15;
+		end
+		else if(shifted == 14) begin
+			c_temp_shift_x = in_x >> 14;
+		end
+		else if(shifted == 13) begin
+			c_temp_shift_x = in_x >> 13;
+		end
+		else if(shifted == 12) begin
+			c_temp_shift_x = in_x >> 12;
+		end
+		else if(shifted == 11) begin
+			c_temp_shift_x = in_x >> 11;
+		end
+		else if(shifted == 10) begin
+			c_temp_shift_x = in_x >> 10;
+		end
+		else if(shifted == 9) begin
+			c_temp_shift_x = in_x >> 9;
+		end
+		else if(shifted == 8) begin
+			c_temp_shift_x = in_x >> 8;
+		end
+		else if(shifted == 7) begin
+			c_temp_shift_x = in_x >> 7;
+		end
+		else if(shifted == 6) begin
+			c_temp_shift_x = in_x >> 6;
+		end
+		else if(shifted == 5) begin
+			c_temp_shift_x = in_x >> 5;
+		end
+		else if(shifted == 4) begin
+			c_temp_shift_x = in_x >> 4;
+		end
+		else if(shifted == 3) begin
+			c_temp_shift_x = in_x >> 3;
+		end
+		else if(shifted == 2) begin
+			c_temp_shift_x = in_x >> 2;
+		end
+		else if(shifted == 1) begin
+			c_temp_shift_x = in_x >> 1;
+		end
+		else begin
+			c_temp_shift_x = in_x >> 0;
+		end
+		//Store needed bits of shifted value
+		c_shifted_x = c_temp_shift_x[`MANTISSA_PRECISION - 1:0];
+	end
+	else begin
+		c_shifted_x = in_x[`MANTISSA_PRECISION - 1:0];
+		c_temp_shift_x = 32'b0;
+	end
+end
+
+// calculate log
+always@(r_indexFirstOne or mantissa)
+begin
+	if(r_indexFirstOne >= `MANTISSA_PRECISION)
+	begin
+		c_log_x =  mantissa - ((`MANTISSA_PRECISION - 1) * `LOG2) + (r_indexFirstOne * `LOG2);
+	end
+	else
+	begin
+		c_log_x = mantissa;
+	end
+end
+
+// latch values
+always @(posedge clock)
+begin
+	if(reset)
+		begin
+			log_x <= 0;
+			r_indexFirstOne <= 0;
+		end
+	else
+		begin
+			if(enable)
+			begin
+				r_indexFirstOne <= c_indexFirstOne;
+				log_x <= c_log_x;
+			end
+		end
+end 
+
+endmodule
+
+
+
+module DropSpinWrapper (
+	clock, reset, enable,
+
+   //From Hopper Module
+   i_x,
+	i_y,
+	i_z,
+	i_ux,
+	i_uy,
+	i_uz,
+	i_sz,
+	i_sr,
+	i_sleftz,
+	i_sleftr,
+	i_weight,
+	i_layer,
+	i_dead,
+	i_hit,
+	
+	
+	//From System Register File (5 layers)- Absorber
+	muaFraction1, muaFraction2, muaFraction3, muaFraction4, muaFraction5, 
+ 
+ 	//From System Register File - ScattererReflector 
+	down_niOverNt_1,
+	down_niOverNt_2,
+	down_niOverNt_3,
+	down_niOverNt_4,
+	down_niOverNt_5,
+	up_niOverNt_1,
+	up_niOverNt_2,
+	up_niOverNt_3,
+	up_niOverNt_4,
+	up_niOverNt_5,
+	down_niOverNt_2_1,
+	down_niOverNt_2_2,
+	down_niOverNt_2_3,
+	down_niOverNt_2_4,
+	down_niOverNt_2_5,
+	up_niOverNt_2_1,
+	up_niOverNt_2_2,
+	up_niOverNt_2_3,
+	up_niOverNt_2_4,
+	up_niOverNt_2_5,
+	downCritAngle_0,
+	downCritAngle_1,
+	downCritAngle_2,
+	downCritAngle_3,
+	downCritAngle_4,
+	upCritAngle_0,
+	upCritAngle_1,
+	upCritAngle_2,
+	upCritAngle_3,
+	upCritAngle_4,
+ 
+	
+ 	
+ 	//////////////////////////////////////////////////////////////////////////////
+   //I/O to on-chip mem
+   /////////////////////////////////////////////////////////////////////////////
+
+   data, 
+   rdaddress, wraddress,
+   wren, q,
+
+   //From Memories
+   up_rFresnel,
+   down_rFresnel,
+   sint,
+   cost,
+   rand2,
+   rand3,
+   rand5,
+   //To Memories
+   tindex,
+   fresIndex,
+
+ 	
+   //To DeadOrAlive Module
+	o_x,
+	o_y,
+	o_z,
+	o_ux,
+	o_uy,
+	o_uz,
+	o_sz,
+	o_sr,
+	o_sleftz,
+	o_sleftr,
+	o_weight,
+	o_layer,
+	o_dead,
+	o_hit
+                    
+	);
+	
+//////////////////////////////////////////////////////////////////////////////
+//PARAMETERS
+//////////////////////////////////////////////////////////////////////////////	
+//parameter BIT_WIDTH=32;
+//parameter LAYER_WIDTH=3;
+//parameter PIPE_DEPTH = 37;
+//parameter ADDR_WIDTH=16;          //TODO: TBD
+//parameter WORD_WIDTH=64;
+
+//////////////////////////////////////////////////////////////////////////////
+//INPUTS
+//////////////////////////////////////////////////////////////////////////////
+input clock, reset, enable;
+
+//From Hopper Module
+input	[`BIT_WIDTH-1:0]			i_x;
+input	[`BIT_WIDTH-1:0]			i_y;
+input	[`BIT_WIDTH-1:0]			i_z;
+input	[`BIT_WIDTH-1:0]			i_ux;
+input	[`BIT_WIDTH-1:0]			i_uy;
+input	[`BIT_WIDTH-1:0]			i_uz;
+input	[`BIT_WIDTH-1:0]			i_sz;
+input	[`BIT_WIDTH-1:0]			i_sr;
+input	[`BIT_WIDTH-1:0]			i_sleftz;
+input	[`BIT_WIDTH-1:0]			i_sleftr;
+input	[`BIT_WIDTH-1:0]			i_weight;
+input	[`LAYER_WIDTH-1:0]		i_layer;
+input					i_dead;
+input					i_hit;
+
+
+//From System Register File (5 layers)- Absorber
+input	[`BIT_WIDTH-1:0] muaFraction1, muaFraction2, muaFraction3, muaFraction4, muaFraction5; 
+
+//From System Register File - ScattererReflector 
+input	[`BIT_WIDTH-1:0]	down_niOverNt_1;
+input	[`BIT_WIDTH-1:0]	down_niOverNt_2;
+input	[`BIT_WIDTH-1:0]	down_niOverNt_3;
+input	[`BIT_WIDTH-1:0]	down_niOverNt_4;
+input	[`BIT_WIDTH-1:0]	down_niOverNt_5;
+input	[`BIT_WIDTH-1:0]	up_niOverNt_1;
+input	[`BIT_WIDTH-1:0]	up_niOverNt_2;
+input	[`BIT_WIDTH-1:0]	up_niOverNt_3;
+input	[`BIT_WIDTH-1:0]	up_niOverNt_4;
+input	[`BIT_WIDTH-1:0]	up_niOverNt_5;
+input	[`WORD_WIDTH-1:0]	down_niOverNt_2_1;
+input	[`WORD_WIDTH-1:0]	down_niOverNt_2_2;
+input	[`WORD_WIDTH-1:0]	down_niOverNt_2_3;
+input	[`WORD_WIDTH-1:0]	down_niOverNt_2_4;
+input	[`WORD_WIDTH-1:0]	down_niOverNt_2_5;
+input	[`WORD_WIDTH-1:0]	up_niOverNt_2_1;
+input	[`WORD_WIDTH-1:0]	up_niOverNt_2_2;
+input	[`WORD_WIDTH-1:0]	up_niOverNt_2_3;
+input	[`WORD_WIDTH-1:0]	up_niOverNt_2_4;
+input	[`WORD_WIDTH-1:0]	up_niOverNt_2_5;
+input	[`BIT_WIDTH-1:0]	downCritAngle_0;
+input	[`BIT_WIDTH-1:0]	downCritAngle_1;
+input	[`BIT_WIDTH-1:0]	downCritAngle_2;
+input	[`BIT_WIDTH-1:0]	downCritAngle_3;
+input	[`BIT_WIDTH-1:0]	downCritAngle_4;
+input	[`BIT_WIDTH-1:0]	upCritAngle_0;
+input	[`BIT_WIDTH-1:0]	upCritAngle_1;
+input	[`BIT_WIDTH-1:0]	upCritAngle_2;
+input	[`BIT_WIDTH-1:0]	upCritAngle_3;
+input	[`BIT_WIDTH-1:0]	upCritAngle_4;
+
+//Generated by random number generators controlled by skeleton
+output	[12:0]		tindex;
+output	[9:0]		fresIndex;
+
+
+input	[31:0]		rand2;
+input	[31:0]		rand3;
+input	[31:0]		rand5;
+input	[31:0]		sint;
+input	[31:0]		cost;
+input	[31:0]		up_rFresnel;
+input	[31:0]		down_rFresnel;
+
+ 
+
+//////////////////////////////////////////////////////////////////////////////
+//OUTPUTS
+/////////////////////////////////////////////////////////////////////////////
+//To DeadOrAlive Module
+output	[`BIT_WIDTH-1:0]			o_x;
+output	[`BIT_WIDTH-1:0]			o_y;
+output	[`BIT_WIDTH-1:0]			o_z;
+output	[`BIT_WIDTH-1:0]			o_ux;
+output	[`BIT_WIDTH-1:0]			o_uy;
+output	[`BIT_WIDTH-1:0]			o_uz;
+output	[`BIT_WIDTH-1:0]			o_sz;
+output	[`BIT_WIDTH-1:0]			o_sr;
+output	[`BIT_WIDTH-1:0]			o_sleftz;
+output	[`BIT_WIDTH-1:0]			o_sleftr;
+output	[`BIT_WIDTH-1:0]			o_weight;
+output	[`LAYER_WIDTH-1:0]		o_layer;
+output					o_dead;
+output					o_hit;
+
+wire	[`BIT_WIDTH-1:0]			o_x;
+wire	[`BIT_WIDTH-1:0]			o_y;
+wire	[`BIT_WIDTH-1:0]			o_z;
+reg	[`BIT_WIDTH-1:0]			o_ux;
+reg	[`BIT_WIDTH-1:0]			o_uy;
+reg	[`BIT_WIDTH-1:0]			o_uz;
+wire	[`BIT_WIDTH-1:0]			o_sz;
+wire	[`BIT_WIDTH-1:0]			o_sr;
+wire	[`BIT_WIDTH-1:0]			o_sleftz;
+wire	[`BIT_WIDTH-1:0]			o_sleftr;
+wire	[`BIT_WIDTH-1:0]			o_weight;
+reg	[`LAYER_WIDTH-1:0]		o_layer;
+reg					o_dead;
+wire					o_hit;
+
+
+//////////////////////////////////////////////////////////////////////////////
+//I/O to on-chip mem
+/////////////////////////////////////////////////////////////////////////////
+
+output [`WORD_WIDTH-1:0] data; 
+output [`ADDR_WIDTH-1:0] rdaddress, wraddress; 
+output wren; 
+input [`WORD_WIDTH-1:0] q;
+
+
+//////////////////////////////////////////////////////////////////////////////
+//Generate SHARED REGISTER PIPELINE 
+//////////////////////////////////////////////////////////////////////////////
+//WIRES FOR CONNECTING REGISTERS
+//wire	[`BIT_WIDTH-1:0]			x	[PIPE_DEPTH:0];
+//wire	[`BIT_WIDTH-1:0]			y	[PIPE_DEPTH:0];
+//wire	[`BIT_WIDTH-1:0]			z	[PIPE_DEPTH:0];
+//wire	[`BIT_WIDTH-1:0]			ux	[PIPE_DEPTH:0];
+//wire	[`BIT_WIDTH-1:0]			uy	[PIPE_DEPTH:0];
+//wire	[`BIT_WIDTH-1:0]			uz	[PIPE_DEPTH:0];
+//wire	[`BIT_WIDTH-1:0]			sz	[PIPE_DEPTH:0];
+//wire	[`BIT_WIDTH-1:0]			sr	[PIPE_DEPTH:0];
+//wire	[`BIT_WIDTH-1:0]			sleftz	[PIPE_DEPTH:0];
+//wire	[`BIT_WIDTH-1:0]			sleftr	[PIPE_DEPTH:0];
+//wire	[`BIT_WIDTH-1:0]			weight	[PIPE_DEPTH:0];
+//wire	[LAYER_WIDTH-1:0]		layer	[PIPE_DEPTH:0];
+//wire					dead	[PIPE_DEPTH:0];
+//wire					hit	[PIPE_DEPTH:0];
+
+//WIRES FOR CONNECTING REGISTERS
+//wire	[32-1:0]			x	[37:0];
+wire	[32-1:0]				x__0;
+wire	[32-1:0]				x__1;
+wire	[32-1:0]				x__2;
+wire	[32-1:0]				x__3;
+wire	[32-1:0]				x__4;
+wire	[32-1:0]				x__5;
+wire	[32-1:0]				x__6;
+wire	[32-1:0]				x__7;
+wire	[32-1:0]				x__8;
+wire	[32-1:0]				x__9;
+wire	[32-1:0]				x__10;
+wire	[32-1:0]				x__11;
+wire	[32-1:0]				x__12;
+wire	[32-1:0]				x__13;
+wire	[32-1:0]				x__14;
+wire	[32-1:0]				x__15;
+wire	[32-1:0]				x__16;
+wire	[32-1:0]				x__17;
+wire	[32-1:0]				x__18;
+wire	[32-1:0]				x__19;
+wire	[32-1:0]				x__20;
+wire	[32-1:0]				x__21;
+wire	[32-1:0]				x__22;
+wire	[32-1:0]				x__23;
+wire	[32-1:0]				x__24;
+wire	[32-1:0]				x__25;
+wire	[32-1:0]				x__26;
+wire	[32-1:0]				x__27;
+wire	[32-1:0]				x__28;
+wire	[32-1:0]				x__29;
+wire	[32-1:0]				x__30;
+wire	[32-1:0]				x__31;
+wire	[32-1:0]				x__32;
+wire	[32-1:0]				x__33;
+wire	[32-1:0]				x__34;
+wire	[32-1:0]				x__35;
+wire	[32-1:0]				x__36;
+wire	[32-1:0]				x__37;
+
+
+
+
+//wire	[32-1:0]			y	[37:0];
+wire	[32-1:0]				y__0;
+wire	[32-1:0]				y__1;
+wire	[32-1:0]				y__2;
+wire	[32-1:0]				y__3;
+wire	[32-1:0]				y__4;
+wire	[32-1:0]				y__5;
+wire	[32-1:0]				y__6;
+wire	[32-1:0]				y__7;
+wire	[32-1:0]				y__8;
+wire	[32-1:0]				y__9;
+wire	[32-1:0]				y__10;
+wire	[32-1:0]				y__11;
+wire	[32-1:0]				y__12;
+wire	[32-1:0]				y__13;
+wire	[32-1:0]				y__14;
+wire	[32-1:0]				y__15;
+wire	[32-1:0]				y__16;
+wire	[32-1:0]				y__17;
+wire	[32-1:0]				y__18;
+wire	[32-1:0]				y__19;
+wire	[32-1:0]				y__20;
+wire	[32-1:0]				y__21;
+wire	[32-1:0]				y__22;
+wire	[32-1:0]				y__23;
+wire	[32-1:0]				y__24;
+wire	[32-1:0]				y__25;
+wire	[32-1:0]				y__26;
+wire	[32-1:0]				y__27;
+wire	[32-1:0]				y__28;
+wire	[32-1:0]				y__29;
+wire	[32-1:0]				y__30;
+wire	[32-1:0]				y__31;
+wire	[32-1:0]				y__32;
+wire	[32-1:0]				y__33;
+wire	[32-1:0]				y__34;
+wire	[32-1:0]				y__35;
+wire	[32-1:0]				y__36;
+wire	[32-1:0]				y__37;
+
+
+
+//wire	[32-1:0]			z	[37:0];
+wire	[32-1:0]				z__0;
+wire	[32-1:0]				z__1;
+wire	[32-1:0]				z__2;
+wire	[32-1:0]				z__3;
+wire	[32-1:0]				z__4;
+wire	[32-1:0]				z__5;
+wire	[32-1:0]				z__6;
+wire	[32-1:0]				z__7;
+wire	[32-1:0]				z__8;
+wire	[32-1:0]				z__9;
+wire	[32-1:0]				z__10;
+wire	[32-1:0]				z__11;
+wire	[32-1:0]				z__12;
+wire	[32-1:0]				z__13;
+wire	[32-1:0]				z__14;
+wire	[32-1:0]				z__15;
+wire	[32-1:0]				z__16;
+wire	[32-1:0]				z__17;
+wire	[32-1:0]				z__18;
+wire	[32-1:0]				z__19;
+wire	[32-1:0]				z__20;
+wire	[32-1:0]				z__21;
+wire	[32-1:0]				z__22;
+wire	[32-1:0]				z__23;
+wire	[32-1:0]				z__24;
+wire	[32-1:0]				z__25;
+wire	[32-1:0]				z__26;
+wire	[32-1:0]				z__27;
+wire	[32-1:0]				z__28;
+wire	[32-1:0]				z__29;
+wire	[32-1:0]				z__30;
+wire	[32-1:0]				z__31;
+wire	[32-1:0]				z__32;
+wire	[32-1:0]				z__33;
+wire	[32-1:0]				z__34;
+wire	[32-1:0]				z__35;
+wire	[32-1:0]				z__36;
+wire	[32-1:0]				z__37;
+
+
+//wire	[32-1:0]			ux	[37:0];
+wire	[32-1:0]				ux__0;
+wire	[32-1:0]				ux__1;
+wire	[32-1:0]				ux__2;
+wire	[32-1:0]				ux__3;
+wire	[32-1:0]				ux__4;
+wire	[32-1:0]				ux__5;
+wire	[32-1:0]				ux__6;
+wire	[32-1:0]				ux__7;
+wire	[32-1:0]				ux__8;
+wire	[32-1:0]				ux__9;
+wire	[32-1:0]				ux__10;
+wire	[32-1:0]				ux__11;
+wire	[32-1:0]				ux__12;
+wire	[32-1:0]				ux__13;
+wire	[32-1:0]				ux__14;
+wire	[32-1:0]				ux__15;
+wire	[32-1:0]				ux__16;
+wire	[32-1:0]				ux__17;
+wire	[32-1:0]				ux__18;
+wire	[32-1:0]				ux__19;
+wire	[32-1:0]				ux__20;
+wire	[32-1:0]				ux__21;
+wire	[32-1:0]				ux__22;
+wire	[32-1:0]				ux__23;
+wire	[32-1:0]				ux__24;
+wire	[32-1:0]				ux__25;
+wire	[32-1:0]				ux__26;
+wire	[32-1:0]				ux__27;
+wire	[32-1:0]				ux__28;
+wire	[32-1:0]				ux__29;
+wire	[32-1:0]				ux__30;
+wire	[32-1:0]				ux__31;
+wire	[32-1:0]				ux__32;
+wire	[32-1:0]				ux__33;
+wire	[32-1:0]				ux__34;
+wire	[32-1:0]				ux__35;
+wire	[32-1:0]				ux__36;
+wire	[32-1:0]				ux__37;
+
+
+
+//wire	[32-1:0]			uy	[37:0];
+wire	[32-1:0]				uy__0;
+wire	[32-1:0]				uy__1;
+wire	[32-1:0]				uy__2;
+wire	[32-1:0]				uy__3;
+wire	[32-1:0]				uy__4;
+wire	[32-1:0]				uy__5;
+wire	[32-1:0]				uy__6;
+wire	[32-1:0]				uy__7;
+wire	[32-1:0]				uy__8;
+wire	[32-1:0]				uy__9;
+wire	[32-1:0]				uy__10;
+wire	[32-1:0]				uy__11;
+wire	[32-1:0]				uy__12;
+wire	[32-1:0]				uy__13;
+wire	[32-1:0]				uy__14;
+wire	[32-1:0]				uy__15;
+wire	[32-1:0]				uy__16;
+wire	[32-1:0]				uy__17;
+wire	[32-1:0]				uy__18;
+wire	[32-1:0]				uy__19;
+wire	[32-1:0]				uy__20;
+wire	[32-1:0]				uy__21;
+wire	[32-1:0]				uy__22;
+wire	[32-1:0]				uy__23;
+wire	[32-1:0]				uy__24;
+wire	[32-1:0]				uy__25;
+wire	[32-1:0]				uy__26;
+wire	[32-1:0]				uy__27;
+wire	[32-1:0]				uy__28;
+wire	[32-1:0]				uy__29;
+wire	[32-1:0]				uy__30;
+wire	[32-1:0]				uy__31;
+wire	[32-1:0]				uy__32;
+wire	[32-1:0]				uy__33;
+wire	[32-1:0]				uy__34;
+wire	[32-1:0]				uy__35;
+wire	[32-1:0]				uy__36;
+wire	[32-1:0]				uy__37;
+
+
+//wire	[32-1:0]			uz	[37:0];
+wire	[32-1:0]				uz__0;
+wire	[32-1:0]				uz__1;
+wire	[32-1:0]				uz__2;
+wire	[32-1:0]				uz__3;
+wire	[32-1:0]				uz__4;
+wire	[32-1:0]				uz__5;
+wire	[32-1:0]				uz__6;
+wire	[32-1:0]				uz__7;
+wire	[32-1:0]				uz__8;
+wire	[32-1:0]				uz__9;
+wire	[32-1:0]				uz__10;
+wire	[32-1:0]				uz__11;
+wire	[32-1:0]				uz__12;
+wire	[32-1:0]				uz__13;
+wire	[32-1:0]				uz__14;
+wire	[32-1:0]				uz__15;
+wire	[32-1:0]				uz__16;
+wire	[32-1:0]				uz__17;
+wire	[32-1:0]				uz__18;
+wire	[32-1:0]				uz__19;
+wire	[32-1:0]				uz__20;
+wire	[32-1:0]				uz__21;
+wire	[32-1:0]				uz__22;
+wire	[32-1:0]				uz__23;
+wire	[32-1:0]				uz__24;
+wire	[32-1:0]				uz__25;
+wire	[32-1:0]				uz__26;
+wire	[32-1:0]				uz__27;
+wire	[32-1:0]				uz__28;
+wire	[32-1:0]				uz__29;
+wire	[32-1:0]				uz__30;
+wire	[32-1:0]				uz__31;
+wire	[32-1:0]				uz__32;
+wire	[32-1:0]				uz__33;
+wire	[32-1:0]				uz__34;
+wire	[32-1:0]				uz__35;
+wire	[32-1:0]				uz__36;
+wire	[32-1:0]				uz__37;
+
+
+//wire	[32-1:0]			sz	[37:0];
+wire	[32-1:0]				sz__0;
+wire	[32-1:0]				sz__1;
+wire	[32-1:0]				sz__2;
+wire	[32-1:0]				sz__3;
+wire	[32-1:0]				sz__4;
+wire	[32-1:0]				sz__5;
+wire	[32-1:0]				sz__6;
+wire	[32-1:0]				sz__7;
+wire	[32-1:0]				sz__8;
+wire	[32-1:0]				sz__9;
+wire	[32-1:0]				sz__10;
+wire	[32-1:0]				sz__11;
+wire	[32-1:0]				sz__12;
+wire	[32-1:0]				sz__13;
+wire	[32-1:0]				sz__14;
+wire	[32-1:0]				sz__15;
+wire	[32-1:0]				sz__16;
+wire	[32-1:0]				sz__17;
+wire	[32-1:0]				sz__18;
+wire	[32-1:0]				sz__19;
+wire	[32-1:0]				sz__20;
+wire	[32-1:0]				sz__21;
+wire	[32-1:0]				sz__22;
+wire	[32-1:0]				sz__23;
+wire	[32-1:0]				sz__24;
+wire	[32-1:0]				sz__25;
+wire	[32-1:0]				sz__26;
+wire	[32-1:0]				sz__27;
+wire	[32-1:0]				sz__28;
+wire	[32-1:0]				sz__29;
+wire	[32-1:0]				sz__30;
+wire	[32-1:0]				sz__31;
+wire	[32-1:0]				sz__32;
+wire	[32-1:0]				sz__33;
+wire	[32-1:0]				sz__34;
+wire	[32-1:0]				sz__35;
+wire	[32-1:0]				sz__36;
+wire	[32-1:0]				sz__37;
+
+
+//wire	[32-1:0]			sr	[37:0];
+wire	[32-1:0]				sr__0;
+wire	[32-1:0]				sr__1;
+wire	[32-1:0]				sr__2;
+wire	[32-1:0]				sr__3;
+wire	[32-1:0]				sr__4;
+wire	[32-1:0]				sr__5;
+wire	[32-1:0]				sr__6;
+wire	[32-1:0]				sr__7;
+wire	[32-1:0]				sr__8;
+wire	[32-1:0]				sr__9;
+wire	[32-1:0]				sr__10;
+wire	[32-1:0]				sr__11;
+wire	[32-1:0]				sr__12;
+wire	[32-1:0]				sr__13;
+wire	[32-1:0]				sr__14;
+wire	[32-1:0]				sr__15;
+wire	[32-1:0]				sr__16;
+wire	[32-1:0]				sr__17;
+wire	[32-1:0]				sr__18;
+wire	[32-1:0]				sr__19;
+wire	[32-1:0]				sr__20;
+wire	[32-1:0]				sr__21;
+wire	[32-1:0]				sr__22;
+wire	[32-1:0]				sr__23;
+wire	[32-1:0]				sr__24;
+wire	[32-1:0]				sr__25;
+wire	[32-1:0]				sr__26;
+wire	[32-1:0]				sr__27;
+wire	[32-1:0]				sr__28;
+wire	[32-1:0]				sr__29;
+wire	[32-1:0]				sr__30;
+wire	[32-1:0]				sr__31;
+wire	[32-1:0]				sr__32;
+wire	[32-1:0]				sr__33;
+wire	[32-1:0]				sr__34;
+wire	[32-1:0]				sr__35;
+wire	[32-1:0]				sr__36;
+wire	[32-1:0]				sr__37;
+
+
+
+//wire	[32-1:0]			sleftz	[37:0];
+wire	[32-1:0]				sleftz__0;
+wire	[32-1:0]				sleftz__1;
+wire	[32-1:0]				sleftz__2;
+wire	[32-1:0]				sleftz__3;
+wire	[32-1:0]				sleftz__4;
+wire	[32-1:0]				sleftz__5;
+wire	[32-1:0]				sleftz__6;
+wire	[32-1:0]				sleftz__7;
+wire	[32-1:0]				sleftz__8;
+wire	[32-1:0]				sleftz__9;
+wire	[32-1:0]				sleftz__10;
+wire	[32-1:0]				sleftz__11;
+wire	[32-1:0]				sleftz__12;
+wire	[32-1:0]				sleftz__13;
+wire	[32-1:0]				sleftz__14;
+wire	[32-1:0]				sleftz__15;
+wire	[32-1:0]				sleftz__16;
+wire	[32-1:0]				sleftz__17;
+wire	[32-1:0]				sleftz__18;
+wire	[32-1:0]				sleftz__19;
+wire	[32-1:0]				sleftz__20;
+wire	[32-1:0]				sleftz__21;
+wire	[32-1:0]				sleftz__22;
+wire	[32-1:0]				sleftz__23;
+wire	[32-1:0]				sleftz__24;
+wire	[32-1:0]				sleftz__25;
+wire	[32-1:0]				sleftz__26;
+wire	[32-1:0]				sleftz__27;
+wire	[32-1:0]				sleftz__28;
+wire	[32-1:0]				sleftz__29;
+wire	[32-1:0]				sleftz__30;
+wire	[32-1:0]				sleftz__31;
+wire	[32-1:0]				sleftz__32;
+wire	[32-1:0]				sleftz__33;
+wire	[32-1:0]				sleftz__34;
+wire	[32-1:0]				sleftz__35;
+wire	[32-1:0]				sleftz__36;
+wire	[32-1:0]				sleftz__37;
+
+
+//wire	[32-1:0]			sleftr	[37:0];
+wire	[32-1:0]				sleftr__0;
+wire	[32-1:0]				sleftr__1;
+wire	[32-1:0]				sleftr__2;
+wire	[32-1:0]				sleftr__3;
+wire	[32-1:0]				sleftr__4;
+wire	[32-1:0]				sleftr__5;
+wire	[32-1:0]				sleftr__6;
+wire	[32-1:0]				sleftr__7;
+wire	[32-1:0]				sleftr__8;
+wire	[32-1:0]				sleftr__9;
+wire	[32-1:0]				sleftr__10;
+wire	[32-1:0]				sleftr__11;
+wire	[32-1:0]				sleftr__12;
+wire	[32-1:0]				sleftr__13;
+wire	[32-1:0]				sleftr__14;
+wire	[32-1:0]				sleftr__15;
+wire	[32-1:0]				sleftr__16;
+wire	[32-1:0]				sleftr__17;
+wire	[32-1:0]				sleftr__18;
+wire	[32-1:0]				sleftr__19;
+wire	[32-1:0]				sleftr__20;
+wire	[32-1:0]				sleftr__21;
+wire	[32-1:0]				sleftr__22;
+wire	[32-1:0]				sleftr__23;
+wire	[32-1:0]				sleftr__24;
+wire	[32-1:0]				sleftr__25;
+wire	[32-1:0]				sleftr__26;
+wire	[32-1:0]				sleftr__27;
+wire	[32-1:0]				sleftr__28;
+wire	[32-1:0]				sleftr__29;
+wire	[32-1:0]				sleftr__30;
+wire	[32-1:0]				sleftr__31;
+wire	[32-1:0]				sleftr__32;
+wire	[32-1:0]				sleftr__33;
+wire	[32-1:0]				sleftr__34;
+wire	[32-1:0]				sleftr__35;
+wire	[32-1:0]				sleftr__36;
+wire	[32-1:0]				sleftr__37;
+
+
+//wire	[32-1:0]			weight	[37:0];
+wire	[32-1:0]				weight__0;
+wire	[32-1:0]				weight__1;
+wire	[32-1:0]				weight__2;
+wire	[32-1:0]				weight__3;
+wire	[32-1:0]				weight__4;
+wire	[32-1:0]				weight__5;
+wire	[32-1:0]				weight__6;
+wire	[32-1:0]				weight__7;
+wire	[32-1:0]				weight__8;
+wire	[32-1:0]				weight__9;
+wire	[32-1:0]				weight__10;
+wire	[32-1:0]				weight__11;
+wire	[32-1:0]				weight__12;
+wire	[32-1:0]				weight__13;
+wire	[32-1:0]				weight__14;
+wire	[32-1:0]				weight__15;
+wire	[32-1:0]				weight__16;
+wire	[32-1:0]				weight__17;
+wire	[32-1:0]				weight__18;
+wire	[32-1:0]				weight__19;
+wire	[32-1:0]				weight__20;
+wire	[32-1:0]				weight__21;
+wire	[32-1:0]				weight__22;
+wire	[32-1:0]				weight__23;
+wire	[32-1:0]				weight__24;
+wire	[32-1:0]				weight__25;
+wire	[32-1:0]				weight__26;
+wire	[32-1:0]				weight__27;
+wire	[32-1:0]				weight__28;
+wire	[32-1:0]				weight__29;
+wire	[32-1:0]				weight__30;
+wire	[32-1:0]				weight__31;
+wire	[32-1:0]				weight__32;
+wire	[32-1:0]				weight__33;
+wire	[32-1:0]				weight__34;
+wire	[32-1:0]				weight__35;
+wire	[32-1:0]				weight__36;
+wire	[32-1:0]				weight__37;
+
+
+//wire	[3-1:0]		layer	[37:0];
+wire	[3-1:0]				layer__0;
+wire	[3-1:0]				layer__1;
+wire	[3-1:0]				layer__2;
+wire	[3-1:0]				layer__3;
+wire	[3-1:0]				layer__4;
+wire	[3-1:0]				layer__5;
+wire	[3-1:0]				layer__6;
+wire	[3-1:0]				layer__7;
+wire	[3-1:0]				layer__8;
+wire	[3-1:0]				layer__9;
+wire	[3-1:0]				layer__10;
+wire	[3-1:0]				layer__11;
+wire	[3-1:0]				layer__12;
+wire	[3-1:0]				layer__13;
+wire	[3-1:0]				layer__14;
+wire	[3-1:0]				layer__15;
+wire	[3-1:0]				layer__16;
+wire	[3-1:0]				layer__17;
+wire	[3-1:0]				layer__18;
+wire	[3-1:0]				layer__19;
+wire	[3-1:0]				layer__20;
+wire	[3-1:0]				layer__21;
+wire	[3-1:0]				layer__22;
+wire	[3-1:0]				layer__23;
+wire	[3-1:0]				layer__24;
+wire	[3-1:0]				layer__25;
+wire	[3-1:0]				layer__26;
+wire	[3-1:0]				layer__27;
+wire	[3-1:0]				layer__28;
+wire	[3-1:0]				layer__29;
+wire	[3-1:0]				layer__30;
+wire	[3-1:0]				layer__31;
+wire	[3-1:0]				layer__32;
+wire	[3-1:0]				layer__33;
+wire	[3-1:0]				layer__34;
+wire	[3-1:0]				layer__35;
+wire	[3-1:0]				layer__36;
+wire	[3-1:0]				layer__37;
+
+//wire		[37:0]			dead;
+wire					dead__0;
+wire					dead__1;
+wire					dead__2;
+wire					dead__3;
+wire					dead__4;
+wire					dead__5;
+wire					dead__6;
+wire					dead__7;
+wire					dead__8;
+wire					dead__9;
+wire					dead__10;
+wire					dead__11;
+wire					dead__12;
+wire					dead__13;
+wire					dead__14;
+wire					dead__15;
+wire					dead__16;
+wire					dead__17;
+wire					dead__18;
+wire					dead__19;
+wire					dead__20;
+wire					dead__21;
+wire					dead__22;
+wire					dead__23;
+wire					dead__24;
+wire					dead__25;
+wire					dead__26;
+wire					dead__27;
+wire					dead__28;
+wire					dead__29;
+wire					dead__30;
+wire					dead__31;
+wire					dead__32;
+wire					dead__33;
+wire					dead__34;
+wire					dead__35;
+wire					dead__36;
+wire					dead__37;
+
+
+//wire		[37:0]			hit	;
+
+wire					hit__0;
+wire					hit__1;
+wire					hit__2;
+wire					hit__3;
+wire					hit__4;
+wire					hit__5;
+wire					hit__6;
+wire					hit__7;
+wire					hit__8;
+wire					hit__9;
+wire					hit__10;
+wire					hit__11;
+wire					hit__12;
+wire					hit__13;
+wire					hit__14;
+wire					hit__15;
+wire					hit__16;
+wire					hit__17;
+wire					hit__18;
+wire					hit__19;
+wire					hit__20;
+wire					hit__21;
+wire					hit__22;
+wire					hit__23;
+wire					hit__24;
+wire					hit__25;
+wire					hit__26;
+wire					hit__27;
+wire					hit__28;
+wire					hit__29;
+wire					hit__30;
+wire					hit__31;
+wire					hit__32;
+wire					hit__33;
+wire					hit__34;
+wire					hit__35;
+wire					hit__36;
+wire					hit__37;
+
+
+//ASSIGNMENTS FROM INPUTS TO PIPE
+assign x__0 = i_x;
+assign y__0 = i_y;
+assign z__0 = i_z;
+assign ux__0 = i_ux;
+assign uy__0 = i_uy;
+assign uz__0 = i_uz;
+assign sz__0 = i_sz;
+assign sr__0 = i_sr;
+assign sleftz__0 = i_sleftz;
+assign sleftr__0 = i_sleftr;
+assign weight__0 = i_weight;
+assign layer__0 = i_layer;
+assign dead__0 = i_dead;
+assign hit__0 = i_hit;
+
+//ASSIGNMENTS FROM PIPE TO OUTPUT
+//TODO: Assign outputs from the correct module 
+assign o_x =x__37;
+assign o_y =y__37;
+assign o_z =z__37;
+//assign o_ux =ux[PIPE_DEPTH]; Assigned by deadOrAliveMux
+//assign o_uy =uy[PIPE_DEPTH]; Assigned by deadOrAliveMux
+//assign o_uz =uz[PIPE_DEPTH]; Assigned by deadOrAliveMux
+assign o_sz =sz__37;
+assign o_sr =sr__37;
+assign o_sleftz =sleftz__37;
+assign o_sleftr =sleftr__37;
+//assign o_weight =weight[PIPE_DEPTH]; Assigned by absorber module (below)
+//assign o_layer =layer[PIPE_DEPTH]; Assigned by deadOrAliveMux
+//assign o_dead =dead[PIPE_DEPTH]; Assigned by deadOrAliveMux
+assign o_hit =hit__37;
+
+
+//GENERATE PIPELINE
+//genvar i;
+//generate
+//	for(i=PIPE_DEPTH; i>0; i=i-1) begin: regPipe
+//		case(i)
+//		
+//		default:
+//		PhotonBlock5 photon(
+//			//Inputs
+//			.clock(clock),
+//			.reset(reset),
+//			.enable(enable),
+//			
+//			.i_x(x[i-1]),
+//			.i_y(y[i-1]),
+//			.i_z(z[i-1]),
+//			.i_ux(ux[i-1]),
+//			.i_uy(uy[i-1]),
+//			.i_uz(uz[i-1]),
+//			.i_sz(sz[i-1]),
+//			.i_sr(sr[i-1]),
+//			.i_sleftz(sleftz[i-1]),
+//			.i_sleftr(sleftr[i-1]),
+//			.i_weight(weight[i-1]),
+//			.i_layer(layer[i-1]),
+//			.i_dead(dead[i-1]),
+//			.i_hit(hit[i-1]),
+//			
+//			//Outputs			
+//			.o_x(x[i]),
+//			.o_y(y[i]),
+//			.o_z(z[i]),
+//			.o_ux(ux[i]),
+//			.o_uy(uy[i]),
+//			.o_uz(uz[i]),
+//			.o_sz(sz[i]),
+//			.o_sr(sr[i]),
+//			.o_sleftz(sleftz[i]),
+//			.o_sleftr(sleftr[i]),
+//			.o_weight(weight[i]),
+//			.o_layer(layer[i]),
+//			.o_dead(dead[i]),
+//			.o_hit(hit[i])
+//		);
+//		endcase
+//	end
+//endgenerate	
+
+PhotonBlock5 photon37(
+//Inputs
+
+.clock(clock), 
+.reset(reset),
+.enable(enable), 
+.i_x(x__36),
+.i_y(y__36),
+.i_z(z__36),
+.i_ux(ux__36),
+.i_uy(uy__36),
+.i_uz(uz__36),
+.i_sz(sz__36),
+.i_sr(sr__36),
+.i_sleftz(sleftz__36),
+.i_sleftr(sleftr__36),
+.i_weight(weight__36),
+.i_layer(layer__36),
+.i_dead(dead__36),
+.i_hit(hit__36),
+//Outputs			
+.o_x(x__37),
+.o_y(y__37),
+.o_z(z__37),
+.o_ux(ux__37),
+.o_uy(uy__37),
+.o_uz(uz__37),
+.o_sz(sz__37),
+.o_sr(sr__37),
+.o_sleftz(sleftz__37),
+.o_sleftr(sleftr__37),
+.o_weight(weight__37),
+.o_layer(layer__37),
+.o_dead(dead__37),
+.o_hit(hit__37)
+); 
+PhotonBlock5 photon36(
+//Inputs
+
+.clock(clock), 
+.reset(reset),
+.enable(enable), 
+.i_x(x__35),
+.i_y(y__35),
+.i_z(z__35),
+.i_ux(ux__35),
+.i_uy(uy__35),
+.i_uz(uz__35),
+.i_sz(sz__35),
+.i_sr(sr__35),
+.i_sleftz(sleftz__35),
+.i_sleftr(sleftr__35),
+.i_weight(weight__35),
+.i_layer(layer__35),
+.i_dead(dead__35),
+.i_hit(hit__35),
+//Outputs			
+.o_x(x__36),
+.o_y(y__36),
+.o_z(z__36),
+.o_ux(ux__36),
+.o_uy(uy__36),
+.o_uz(uz__36),
+.o_sz(sz__36),
+.o_sr(sr__36),
+.o_sleftz(sleftz__36),
+.o_sleftr(sleftr__36),
+.o_weight(weight__36),
+.o_layer(layer__36),
+.o_dead(dead__36),
+.o_hit(hit__36)
+); 
+PhotonBlock5 photon35(
+//Inputs
+
+.clock(clock), 
+.reset(reset),
+.enable(enable), 
+.i_x(x__34),
+.i_y(y__34),
+.i_z(z__34),
+.i_ux(ux__34),
+.i_uy(uy__34),
+.i_uz(uz__34),
+.i_sz(sz__34),
+.i_sr(sr__34),
+.i_sleftz(sleftz__34),
+.i_sleftr(sleftr__34),
+.i_weight(weight__34),
+.i_layer(layer__34),
+.i_dead(dead__34),
+.i_hit(hit__34),
+//Outputs			
+.o_x(x__35),
+.o_y(y__35),
+.o_z(z__35),
+.o_ux(ux__35),
+.o_uy(uy__35),
+.o_uz(uz__35),
+.o_sz(sz__35),
+.o_sr(sr__35),
+.o_sleftz(sleftz__35),
+.o_sleftr(sleftr__35),
+.o_weight(weight__35),
+.o_layer(layer__35),
+.o_dead(dead__35),
+.o_hit(hit__35)
+); 
+PhotonBlock5 photon34(
+//Inputs
+
+.clock(clock), 
+.reset(reset),
+.enable(enable), 
+.i_x(x__33),
+.i_y(y__33),
+.i_z(z__33),
+.i_ux(ux__33),
+.i_uy(uy__33),
+.i_uz(uz__33),
+.i_sz(sz__33),
+.i_sr(sr__33),
+.i_sleftz(sleftz__33),
+.i_sleftr(sleftr__33),
+.i_weight(weight__33),
+.i_layer(layer__33),
+.i_dead(dead__33),
+.i_hit(hit__33),
+//Outputs			
+.o_x(x__34),
+.o_y(y__34),
+.o_z(z__34),
+.o_ux(ux__34),
+.o_uy(uy__34),
+.o_uz(uz__34),
+.o_sz(sz__34),
+.o_sr(sr__34),
+.o_sleftz(sleftz__34),
+.o_sleftr(sleftr__34),
+.o_weight(weight__34),
+.o_layer(layer__34),
+.o_dead(dead__34),
+.o_hit(hit__34)
+); 
+PhotonBlock5 photon33(
+//Inputs
+
+.clock(clock), 
+.reset(reset),
+.enable(enable), 
+.i_x(x__32),
+.i_y(y__32),
+.i_z(z__32),
+.i_ux(ux__32),
+.i_uy(uy__32),
+.i_uz(uz__32),
+.i_sz(sz__32),
+.i_sr(sr__32),
+.i_sleftz(sleftz__32),
+.i_sleftr(sleftr__32),
+.i_weight(weight__32),
+.i_layer(layer__32),
+.i_dead(dead__32),
+.i_hit(hit__32),
+//Outputs			
+.o_x(x__33),
+.o_y(y__33),
+.o_z(z__33),
+.o_ux(ux__33),
+.o_uy(uy__33),
+.o_uz(uz__33),
+.o_sz(sz__33),
+.o_sr(sr__33),
+.o_sleftz(sleftz__33),
+.o_sleftr(sleftr__33),
+.o_weight(weight__33),
+.o_layer(layer__33),
+.o_dead(dead__33),
+.o_hit(hit__33)
+); 
+PhotonBlock5 photon32(
+//Inputs
+
+.clock(clock), 
+.reset(reset),
+.enable(enable), 
+.i_x(x__31),
+.i_y(y__31),
+.i_z(z__31),
+.i_ux(ux__31),
+.i_uy(uy__31),
+.i_uz(uz__31),
+.i_sz(sz__31),
+.i_sr(sr__31),
+.i_sleftz(sleftz__31),
+.i_sleftr(sleftr__31),
+.i_weight(weight__31),
+.i_layer(layer__31),
+.i_dead(dead__31),
+.i_hit(hit__31),
+//Outputs			
+.o_x(x__32),
+.o_y(y__32),
+.o_z(z__32),
+.o_ux(ux__32),
+.o_uy(uy__32),
+.o_uz(uz__32),
+.o_sz(sz__32),
+.o_sr(sr__32),
+.o_sleftz(sleftz__32),
+.o_sleftr(sleftr__32),
+.o_weight(weight__32),
+.o_layer(layer__32),
+.o_dead(dead__32),
+.o_hit(hit__32)
+); 
+PhotonBlock5 photon31(
+//Inputs
+
+.clock(clock), 
+.reset(reset),
+.enable(enable), 
+.i_x(x__30),
+.i_y(y__30),
+.i_z(z__30),
+.i_ux(ux__30),
+.i_uy(uy__30),
+.i_uz(uz__30),
+.i_sz(sz__30),
+.i_sr(sr__30),
+.i_sleftz(sleftz__30),
+.i_sleftr(sleftr__30),
+.i_weight(weight__30),
+.i_layer(layer__30),
+.i_dead(dead__30),
+.i_hit(hit__30),
+//Outputs			
+.o_x(x__31),
+.o_y(y__31),
+.o_z(z__31),
+.o_ux(ux__31),
+.o_uy(uy__31),
+.o_uz(uz__31),
+.o_sz(sz__31),
+.o_sr(sr__31),
+.o_sleftz(sleftz__31),
+.o_sleftr(sleftr__31),
+.o_weight(weight__31),
+.o_layer(layer__31),
+.o_dead(dead__31),
+.o_hit(hit__31)
+); 
+PhotonBlock5 photon30(
+//Inputs
+
+.clock(clock), 
+.reset(reset),
+.enable(enable), 
+.i_x(x__29),
+.i_y(y__29),
+.i_z(z__29),
+.i_ux(ux__29),
+.i_uy(uy__29),
+.i_uz(uz__29),
+.i_sz(sz__29),
+.i_sr(sr__29),
+.i_sleftz(sleftz__29),
+.i_sleftr(sleftr__29),
+.i_weight(weight__29),
+.i_layer(layer__29),
+.i_dead(dead__29),
+.i_hit(hit__29),
+//Outputs			
+.o_x(x__30),
+.o_y(y__30),
+.o_z(z__30),
+.o_ux(ux__30),
+.o_uy(uy__30),
+.o_uz(uz__30),
+.o_sz(sz__30),
+.o_sr(sr__30),
+.o_sleftz(sleftz__30),
+.o_sleftr(sleftr__30),
+.o_weight(weight__30),
+.o_layer(layer__30),
+.o_dead(dead__30),
+.o_hit(hit__30)
+); 
+PhotonBlock5 photon29(
+//Inputs
+
+.clock(clock), 
+.reset(reset),
+.enable(enable), 
+.i_x(x__28),
+.i_y(y__28),
+.i_z(z__28),
+.i_ux(ux__28),
+.i_uy(uy__28),
+.i_uz(uz__28),
+.i_sz(sz__28),
+.i_sr(sr__28),
+.i_sleftz(sleftz__28),
+.i_sleftr(sleftr__28),
+.i_weight(weight__28),
+.i_layer(layer__28),
+.i_dead(dead__28),
+.i_hit(hit__28),
+//Outputs			
+.o_x(x__29),
+.o_y(y__29),
+.o_z(z__29),
+.o_ux(ux__29),
+.o_uy(uy__29),
+.o_uz(uz__29),
+.o_sz(sz__29),
+.o_sr(sr__29),
+.o_sleftz(sleftz__29),
+.o_sleftr(sleftr__29),
+.o_weight(weight__29),
+.o_layer(layer__29),
+.o_dead(dead__29),
+.o_hit(hit__29)
+); 
+PhotonBlock5 photon28(
+//Inputs
+
+.clock(clock), 
+.reset(reset),
+.enable(enable), 
+.i_x(x__27),
+.i_y(y__27),
+.i_z(z__27),
+.i_ux(ux__27),
+.i_uy(uy__27),
+.i_uz(uz__27),
+.i_sz(sz__27),
+.i_sr(sr__27),
+.i_sleftz(sleftz__27),
+.i_sleftr(sleftr__27),
+.i_weight(weight__27),
+.i_layer(layer__27),
+.i_dead(dead__27),
+.i_hit(hit__27),
+//Outputs			
+.o_x(x__28),
+.o_y(y__28),
+.o_z(z__28),
+.o_ux(ux__28),
+.o_uy(uy__28),
+.o_uz(uz__28),
+.o_sz(sz__28),
+.o_sr(sr__28),
+.o_sleftz(sleftz__28),
+.o_sleftr(sleftr__28),
+.o_weight(weight__28),
+.o_layer(layer__28),
+.o_dead(dead__28),
+.o_hit(hit__28)
+); 
+PhotonBlock5 photon27(
+//Inputs
+
+.clock(clock), 
+.reset(reset),
+.enable(enable), 
+.i_x(x__26),
+.i_y(y__26),
+.i_z(z__26),
+.i_ux(ux__26),
+.i_uy(uy__26),
+.i_uz(uz__26),
+.i_sz(sz__26),
+.i_sr(sr__26),
+.i_sleftz(sleftz__26),
+.i_sleftr(sleftr__26),
+.i_weight(weight__26),
+.i_layer(layer__26),
+.i_dead(dead__26),
+.i_hit(hit__26),
+//Outputs			
+.o_x(x__27),
+.o_y(y__27),
+.o_z(z__27),
+.o_ux(ux__27),
+.o_uy(uy__27),
+.o_uz(uz__27),
+.o_sz(sz__27),
+.o_sr(sr__27),
+.o_sleftz(sleftz__27),
+.o_sleftr(sleftr__27),
+.o_weight(weight__27),
+.o_layer(layer__27),
+.o_dead(dead__27),
+.o_hit(hit__27)
+); 
+PhotonBlock5 photon26(
+//Inputs
+
+.clock(clock), 
+.reset(reset),
+.enable(enable), 
+.i_x(x__25),
+.i_y(y__25),
+.i_z(z__25),
+.i_ux(ux__25),
+.i_uy(uy__25),
+.i_uz(uz__25),
+.i_sz(sz__25),
+.i_sr(sr__25),
+.i_sleftz(sleftz__25),
+.i_sleftr(sleftr__25),
+.i_weight(weight__25),
+.i_layer(layer__25),
+.i_dead(dead__25),
+.i_hit(hit__25),
+//Outputs			
+.o_x(x__26),
+.o_y(y__26),
+.o_z(z__26),
+.o_ux(ux__26),
+.o_uy(uy__26),
+.o_uz(uz__26),
+.o_sz(sz__26),
+.o_sr(sr__26),
+.o_sleftz(sleftz__26),
+.o_sleftr(sleftr__26),
+.o_weight(weight__26),
+.o_layer(layer__26),
+.o_dead(dead__26),
+.o_hit(hit__26)
+); 
+PhotonBlock5 photon25(
+//Inputs
+
+.clock(clock), 
+.reset(reset),
+.enable(enable), 
+.i_x(x__24),
+.i_y(y__24),
+.i_z(z__24),
+.i_ux(ux__24),
+.i_uy(uy__24),
+.i_uz(uz__24),
+.i_sz(sz__24),
+.i_sr(sr__24),
+.i_sleftz(sleftz__24),
+.i_sleftr(sleftr__24),
+.i_weight(weight__24),
+.i_layer(layer__24),
+.i_dead(dead__24),
+.i_hit(hit__24),
+//Outputs			
+.o_x(x__25),
+.o_y(y__25),
+.o_z(z__25),
+.o_ux(ux__25),
+.o_uy(uy__25),
+.o_uz(uz__25),
+.o_sz(sz__25),
+.o_sr(sr__25),
+.o_sleftz(sleftz__25),
+.o_sleftr(sleftr__25),
+.o_weight(weight__25),
+.o_layer(layer__25),
+.o_dead(dead__25),
+.o_hit(hit__25)
+); 
+PhotonBlock5 photon24(
+//Inputs
+
+.clock(clock), 
+.reset(reset),
+.enable(enable), 
+.i_x(x__23),
+.i_y(y__23),
+.i_z(z__23),
+.i_ux(ux__23),
+.i_uy(uy__23),
+.i_uz(uz__23),
+.i_sz(sz__23),
+.i_sr(sr__23),
+.i_sleftz(sleftz__23),
+.i_sleftr(sleftr__23),
+.i_weight(weight__23),
+.i_layer(layer__23),
+.i_dead(dead__23),
+.i_hit(hit__23),
+//Outputs			
+.o_x(x__24),
+.o_y(y__24),
+.o_z(z__24),
+.o_ux(ux__24),
+.o_uy(uy__24),
+.o_uz(uz__24),
+.o_sz(sz__24),
+.o_sr(sr__24),
+.o_sleftz(sleftz__24),
+.o_sleftr(sleftr__24),
+.o_weight(weight__24),
+.o_layer(layer__24),
+.o_dead(dead__24),
+.o_hit(hit__24)
+); 
+PhotonBlock5 photon23(
+//Inputs
+
+.clock(clock), 
+.reset(reset),
+.enable(enable), 
+.i_x(x__22),
+.i_y(y__22),
+.i_z(z__22),
+.i_ux(ux__22),
+.i_uy(uy__22),
+.i_uz(uz__22),
+.i_sz(sz__22),
+.i_sr(sr__22),
+.i_sleftz(sleftz__22),
+.i_sleftr(sleftr__22),
+.i_weight(weight__22),
+.i_layer(layer__22),
+.i_dead(dead__22),
+.i_hit(hit__22),
+//Outputs			
+.o_x(x__23),
+.o_y(y__23),
+.o_z(z__23),
+.o_ux(ux__23),
+.o_uy(uy__23),
+.o_uz(uz__23),
+.o_sz(sz__23),
+.o_sr(sr__23),
+.o_sleftz(sleftz__23),
+.o_sleftr(sleftr__23),
+.o_weight(weight__23),
+.o_layer(layer__23),
+.o_dead(dead__23),
+.o_hit(hit__23)
+); 
+PhotonBlock5 photon22(
+//Inputs
+
+.clock(clock), 
+.reset(reset),
+.enable(enable), 
+.i_x(x__21),
+.i_y(y__21),
+.i_z(z__21),
+.i_ux(ux__21),
+.i_uy(uy__21),
+.i_uz(uz__21),
+.i_sz(sz__21),
+.i_sr(sr__21),
+.i_sleftz(sleftz__21),
+.i_sleftr(sleftr__21),
+.i_weight(weight__21),
+.i_layer(layer__21),
+.i_dead(dead__21),
+.i_hit(hit__21),
+//Outputs			
+.o_x(x__22),
+.o_y(y__22),
+.o_z(z__22),
+.o_ux(ux__22),
+.o_uy(uy__22),
+.o_uz(uz__22),
+.o_sz(sz__22),
+.o_sr(sr__22),
+.o_sleftz(sleftz__22),
+.o_sleftr(sleftr__22),
+.o_weight(weight__22),
+.o_layer(layer__22),
+.o_dead(dead__22),
+.o_hit(hit__22)
+); 
+PhotonBlock5 photon21(
+//Inputs
+
+.clock(clock), 
+.reset(reset),
+.enable(enable), 
+.i_x(x__20),
+.i_y(y__20),
+.i_z(z__20),
+.i_ux(ux__20),
+.i_uy(uy__20),
+.i_uz(uz__20),
+.i_sz(sz__20),
+.i_sr(sr__20),
+.i_sleftz(sleftz__20),
+.i_sleftr(sleftr__20),
+.i_weight(weight__20),
+.i_layer(layer__20),
+.i_dead(dead__20),
+.i_hit(hit__20),
+//Outputs			
+.o_x(x__21),
+.o_y(y__21),
+.o_z(z__21),
+.o_ux(ux__21),
+.o_uy(uy__21),
+.o_uz(uz__21),
+.o_sz(sz__21),
+.o_sr(sr__21),
+.o_sleftz(sleftz__21),
+.o_sleftr(sleftr__21),
+.o_weight(weight__21),
+.o_layer(layer__21),
+.o_dead(dead__21),
+.o_hit(hit__21)
+); 
+PhotonBlock5 photon20(
+//Inputs
+
+.clock(clock), 
+.reset(reset),
+.enable(enable), 
+.i_x(x__19),
+.i_y(y__19),
+.i_z(z__19),
+.i_ux(ux__19),
+.i_uy(uy__19),
+.i_uz(uz__19),
+.i_sz(sz__19),
+.i_sr(sr__19),
+.i_sleftz(sleftz__19),
+.i_sleftr(sleftr__19),
+.i_weight(weight__19),
+.i_layer(layer__19),
+.i_dead(dead__19),
+.i_hit(hit__19),
+//Outputs			
+.o_x(x__20),
+.o_y(y__20),
+.o_z(z__20),
+.o_ux(ux__20),
+.o_uy(uy__20),
+.o_uz(uz__20),
+.o_sz(sz__20),
+.o_sr(sr__20),
+.o_sleftz(sleftz__20),
+.o_sleftr(sleftr__20),
+.o_weight(weight__20),
+.o_layer(layer__20),
+.o_dead(dead__20),
+.o_hit(hit__20)
+); 
+PhotonBlock5 photon19(
+//Inputs
+
+.clock(clock), 
+.reset(reset),
+.enable(enable), 
+.i_x(x__18),
+.i_y(y__18),
+.i_z(z__18),
+.i_ux(ux__18),
+.i_uy(uy__18),
+.i_uz(uz__18),
+.i_sz(sz__18),
+.i_sr(sr__18),
+.i_sleftz(sleftz__18),
+.i_sleftr(sleftr__18),
+.i_weight(weight__18),
+.i_layer(layer__18),
+.i_dead(dead__18),
+.i_hit(hit__18),
+//Outputs			
+.o_x(x__19),
+.o_y(y__19),
+.o_z(z__19),
+.o_ux(ux__19),
+.o_uy(uy__19),
+.o_uz(uz__19),
+.o_sz(sz__19),
+.o_sr(sr__19),
+.o_sleftz(sleftz__19),
+.o_sleftr(sleftr__19),
+.o_weight(weight__19),
+.o_layer(layer__19),
+.o_dead(dead__19),
+.o_hit(hit__19)
+); 
+PhotonBlock5 photon18(
+//Inputs
+
+.clock(clock), 
+.reset(reset),
+.enable(enable), 
+.i_x(x__17),
+.i_y(y__17),
+.i_z(z__17),
+.i_ux(ux__17),
+.i_uy(uy__17),
+.i_uz(uz__17),
+.i_sz(sz__17),
+.i_sr(sr__17),
+.i_sleftz(sleftz__17),
+.i_sleftr(sleftr__17),
+.i_weight(weight__17),
+.i_layer(layer__17),
+.i_dead(dead__17),
+.i_hit(hit__17),
+//Outputs			
+.o_x(x__18),
+.o_y(y__18),
+.o_z(z__18),
+.o_ux(ux__18),
+.o_uy(uy__18),
+.o_uz(uz__18),
+.o_sz(sz__18),
+.o_sr(sr__18),
+.o_sleftz(sleftz__18),
+.o_sleftr(sleftr__18),
+.o_weight(weight__18),
+.o_layer(layer__18),
+.o_dead(dead__18),
+.o_hit(hit__18)
+); 
+PhotonBlock5 photon17(
+//Inputs
+
+.clock(clock), 
+.reset(reset),
+.enable(enable), 
+.i_x(x__16),
+.i_y(y__16),
+.i_z(z__16),
+.i_ux(ux__16),
+.i_uy(uy__16),
+.i_uz(uz__16),
+.i_sz(sz__16),
+.i_sr(sr__16),
+.i_sleftz(sleftz__16),
+.i_sleftr(sleftr__16),
+.i_weight(weight__16),
+.i_layer(layer__16),
+.i_dead(dead__16),
+.i_hit(hit__16),
+//Outputs			
+.o_x(x__17),
+.o_y(y__17),
+.o_z(z__17),
+.o_ux(ux__17),
+.o_uy(uy__17),
+.o_uz(uz__17),
+.o_sz(sz__17),
+.o_sr(sr__17),
+.o_sleftz(sleftz__17),
+.o_sleftr(sleftr__17),
+.o_weight(weight__17),
+.o_layer(layer__17),
+.o_dead(dead__17),
+.o_hit(hit__17)
+); 
+PhotonBlock5 photon16(
+//Inputs
+
+.clock(clock), 
+.reset(reset),
+.enable(enable), 
+.i_x(x__15),
+.i_y(y__15),
+.i_z(z__15),
+.i_ux(ux__15),
+.i_uy(uy__15),
+.i_uz(uz__15),
+.i_sz(sz__15),
+.i_sr(sr__15),
+.i_sleftz(sleftz__15),
+.i_sleftr(sleftr__15),
+.i_weight(weight__15),
+.i_layer(layer__15),
+.i_dead(dead__15),
+.i_hit(hit__15),
+//Outputs			
+.o_x(x__16),
+.o_y(y__16),
+.o_z(z__16),
+.o_ux(ux__16),
+.o_uy(uy__16),
+.o_uz(uz__16),
+.o_sz(sz__16),
+.o_sr(sr__16),
+.o_sleftz(sleftz__16),
+.o_sleftr(sleftr__16),
+.o_weight(weight__16),
+.o_layer(layer__16),
+.o_dead(dead__16),
+.o_hit(hit__16)
+); 
+PhotonBlock5 photon15(
+//Inputs
+
+.clock(clock), 
+.reset(reset),
+.enable(enable), 
+.i_x(x__14),
+.i_y(y__14),
+.i_z(z__14),
+.i_ux(ux__14),
+.i_uy(uy__14),
+.i_uz(uz__14),
+.i_sz(sz__14),
+.i_sr(sr__14),
+.i_sleftz(sleftz__14),
+.i_sleftr(sleftr__14),
+.i_weight(weight__14),
+.i_layer(layer__14),
+.i_dead(dead__14),
+.i_hit(hit__14),
+//Outputs			
+.o_x(x__15),
+.o_y(y__15),
+.o_z(z__15),
+.o_ux(ux__15),
+.o_uy(uy__15),
+.o_uz(uz__15),
+.o_sz(sz__15),
+.o_sr(sr__15),
+.o_sleftz(sleftz__15),
+.o_sleftr(sleftr__15),
+.o_weight(weight__15),
+.o_layer(layer__15),
+.o_dead(dead__15),
+.o_hit(hit__15)
+); 
+PhotonBlock5 photon14(
+//Inputs
+
+.clock(clock), 
+.reset(reset),
+.enable(enable), 
+.i_x(x__13),
+.i_y(y__13),
+.i_z(z__13),
+.i_ux(ux__13),
+.i_uy(uy__13),
+.i_uz(uz__13),
+.i_sz(sz__13),
+.i_sr(sr__13),
+.i_sleftz(sleftz__13),
+.i_sleftr(sleftr__13),
+.i_weight(weight__13),
+.i_layer(layer__13),
+.i_dead(dead__13),
+.i_hit(hit__13),
+//Outputs			
+.o_x(x__14),
+.o_y(y__14),
+.o_z(z__14),
+.o_ux(ux__14),
+.o_uy(uy__14),
+.o_uz(uz__14),
+.o_sz(sz__14),
+.o_sr(sr__14),
+.o_sleftz(sleftz__14),
+.o_sleftr(sleftr__14),
+.o_weight(weight__14),
+.o_layer(layer__14),
+.o_dead(dead__14),
+.o_hit(hit__14)
+); 
+PhotonBlock5 photon13(
+//Inputs
+
+.clock(clock), 
+.reset(reset),
+.enable(enable), 
+.i_x(x__12),
+.i_y(y__12),
+.i_z(z__12),
+.i_ux(ux__12),
+.i_uy(uy__12),
+.i_uz(uz__12),
+.i_sz(sz__12),
+.i_sr(sr__12),
+.i_sleftz(sleftz__12),
+.i_sleftr(sleftr__12),
+.i_weight(weight__12),
+.i_layer(layer__12),
+.i_dead(dead__12),
+.i_hit(hit__12),
+//Outputs			
+.o_x(x__13),
+.o_y(y__13),
+.o_z(z__13),
+.o_ux(ux__13),
+.o_uy(uy__13),
+.o_uz(uz__13),
+.o_sz(sz__13),
+.o_sr(sr__13),
+.o_sleftz(sleftz__13),
+.o_sleftr(sleftr__13),
+.o_weight(weight__13),
+.o_layer(layer__13),
+.o_dead(dead__13),
+.o_hit(hit__13)
+); 
+PhotonBlock5 photon12(
+//Inputs
+
+.clock(clock), 
+.reset(reset),
+.enable(enable), 
+.i_x(x__11),
+.i_y(y__11),
+.i_z(z__11),
+.i_ux(ux__11),
+.i_uy(uy__11),
+.i_uz(uz__11),
+.i_sz(sz__11),
+.i_sr(sr__11),
+.i_sleftz(sleftz__11),
+.i_sleftr(sleftr__11),
+.i_weight(weight__11),
+.i_layer(layer__11),
+.i_dead(dead__11),
+.i_hit(hit__11),
+//Outputs			
+.o_x(x__12),
+.o_y(y__12),
+.o_z(z__12),
+.o_ux(ux__12),
+.o_uy(uy__12),
+.o_uz(uz__12),
+.o_sz(sz__12),
+.o_sr(sr__12),
+.o_sleftz(sleftz__12),
+.o_sleftr(sleftr__12),
+.o_weight(weight__12),
+.o_layer(layer__12),
+.o_dead(dead__12),
+.o_hit(hit__12)
+); 
+PhotonBlock5 photon11(
+//Inputs
+
+.clock(clock), 
+.reset(reset),
+.enable(enable), 
+.i_x(x__10),
+.i_y(y__10),
+.i_z(z__10),
+.i_ux(ux__10),
+.i_uy(uy__10),
+.i_uz(uz__10),
+.i_sz(sz__10),
+.i_sr(sr__10),
+.i_sleftz(sleftz__10),
+.i_sleftr(sleftr__10),
+.i_weight(weight__10),
+.i_layer(layer__10),
+.i_dead(dead__10),
+.i_hit(hit__10),
+//Outputs			
+.o_x(x__11),
+.o_y(y__11),
+.o_z(z__11),
+.o_ux(ux__11),
+.o_uy(uy__11),
+.o_uz(uz__11),
+.o_sz(sz__11),
+.o_sr(sr__11),
+.o_sleftz(sleftz__11),
+.o_sleftr(sleftr__11),
+.o_weight(weight__11),
+.o_layer(layer__11),
+.o_dead(dead__11),
+.o_hit(hit__11)
+); 
+PhotonBlock5 photon10(
+//Inputs
+
+.clock(clock), 
+.reset(reset),
+.enable(enable), 
+.i_x(x__9),
+.i_y(y__9),
+.i_z(z__9),
+.i_ux(ux__9),
+.i_uy(uy__9),
+.i_uz(uz__9),
+.i_sz(sz__9),
+.i_sr(sr__9),
+.i_sleftz(sleftz__9),
+.i_sleftr(sleftr__9),
+.i_weight(weight__9),
+.i_layer(layer__9),
+.i_dead(dead__9),
+.i_hit(hit__9),
+//Outputs			
+.o_x(x__10),
+.o_y(y__10),
+.o_z(z__10),
+.o_ux(ux__10),
+.o_uy(uy__10),
+.o_uz(uz__10),
+.o_sz(sz__10),
+.o_sr(sr__10),
+.o_sleftz(sleftz__10),
+.o_sleftr(sleftr__10),
+.o_weight(weight__10),
+.o_layer(layer__10),
+.o_dead(dead__10),
+.o_hit(hit__10)
+); 
+PhotonBlock5 photon9(
+//Inputs
+
+.clock(clock), 
+.reset(reset),
+.enable(enable), 
+.i_x(x__8),
+.i_y(y__8),
+.i_z(z__8),
+.i_ux(ux__8),
+.i_uy(uy__8),
+.i_uz(uz__8),
+.i_sz(sz__8),
+.i_sr(sr__8),
+.i_sleftz(sleftz__8),
+.i_sleftr(sleftr__8),
+.i_weight(weight__8),
+.i_layer(layer__8),
+.i_dead(dead__8),
+.i_hit(hit__8),
+//Outputs			
+.o_x(x__9),
+.o_y(y__9),
+.o_z(z__9),
+.o_ux(ux__9),
+.o_uy(uy__9),
+.o_uz(uz__9),
+.o_sz(sz__9),
+.o_sr(sr__9),
+.o_sleftz(sleftz__9),
+.o_sleftr(sleftr__9),
+.o_weight(weight__9),
+.o_layer(layer__9),
+.o_dead(dead__9),
+.o_hit(hit__9)
+); 
+PhotonBlock5 photon8(
+//Inputs
+
+.clock(clock), 
+.reset(reset),
+.enable(enable), 
+.i_x(x__7),
+.i_y(y__7),
+.i_z(z__7),
+.i_ux(ux__7),
+.i_uy(uy__7),
+.i_uz(uz__7),
+.i_sz(sz__7),
+.i_sr(sr__7),
+.i_sleftz(sleftz__7),
+.i_sleftr(sleftr__7),
+.i_weight(weight__7),
+.i_layer(layer__7),
+.i_dead(dead__7),
+.i_hit(hit__7),
+//Outputs			
+.o_x(x__8),
+.o_y(y__8),
+.o_z(z__8),
+.o_ux(ux__8),
+.o_uy(uy__8),
+.o_uz(uz__8),
+.o_sz(sz__8),
+.o_sr(sr__8),
+.o_sleftz(sleftz__8),
+.o_sleftr(sleftr__8),
+.o_weight(weight__8),
+.o_layer(layer__8),
+.o_dead(dead__8),
+.o_hit(hit__8)
+); 
+PhotonBlock5 photon7(
+//Inputs
+
+.clock(clock), 
+.reset(reset),
+.enable(enable), 
+.i_x(x__6),
+.i_y(y__6),
+.i_z(z__6),
+.i_ux(ux__6),
+.i_uy(uy__6),
+.i_uz(uz__6),
+.i_sz(sz__6),
+.i_sr(sr__6),
+.i_sleftz(sleftz__6),
+.i_sleftr(sleftr__6),
+.i_weight(weight__6),
+.i_layer(layer__6),
+.i_dead(dead__6),
+.i_hit(hit__6),
+//Outputs			
+.o_x(x__7),
+.o_y(y__7),
+.o_z(z__7),
+.o_ux(ux__7),
+.o_uy(uy__7),
+.o_uz(uz__7),
+.o_sz(sz__7),
+.o_sr(sr__7),
+.o_sleftz(sleftz__7),
+.o_sleftr(sleftr__7),
+.o_weight(weight__7),
+.o_layer(layer__7),
+.o_dead(dead__7),
+.o_hit(hit__7)
+); 
+PhotonBlock5 photon6(
+//Inputs
+
+.clock(clock), 
+.reset(reset),
+.enable(enable), 
+.i_x(x__5),
+.i_y(y__5),
+.i_z(z__5),
+.i_ux(ux__5),
+.i_uy(uy__5),
+.i_uz(uz__5),
+.i_sz(sz__5),
+.i_sr(sr__5),
+.i_sleftz(sleftz__5),
+.i_sleftr(sleftr__5),
+.i_weight(weight__5),
+.i_layer(layer__5),
+.i_dead(dead__5),
+.i_hit(hit__5),
+//Outputs			
+.o_x(x__6),
+.o_y(y__6),
+.o_z(z__6),
+.o_ux(ux__6),
+.o_uy(uy__6),
+.o_uz(uz__6),
+.o_sz(sz__6),
+.o_sr(sr__6),
+.o_sleftz(sleftz__6),
+.o_sleftr(sleftr__6),
+.o_weight(weight__6),
+.o_layer(layer__6),
+.o_dead(dead__6),
+.o_hit(hit__6)
+); 
+PhotonBlock5 photon5(
+//Inputs
+
+.clock(clock), 
+.reset(reset),
+.enable(enable), 
+.i_x(x__4),
+.i_y(y__4),
+.i_z(z__4),
+.i_ux(ux__4),
+.i_uy(uy__4),
+.i_uz(uz__4),
+.i_sz(sz__4),
+.i_sr(sr__4),
+.i_sleftz(sleftz__4),
+.i_sleftr(sleftr__4),
+.i_weight(weight__4),
+.i_layer(layer__4),
+.i_dead(dead__4),
+.i_hit(hit__4),
+//Outputs			
+.o_x(x__5),
+.o_y(y__5),
+.o_z(z__5),
+.o_ux(ux__5),
+.o_uy(uy__5),
+.o_uz(uz__5),
+.o_sz(sz__5),
+.o_sr(sr__5),
+.o_sleftz(sleftz__5),
+.o_sleftr(sleftr__5),
+.o_weight(weight__5),
+.o_layer(layer__5),
+.o_dead(dead__5),
+.o_hit(hit__5)
+); 
+PhotonBlock5 photon4(
+//Inputs
+
+.clock(clock), 
+.reset(reset),
+.enable(enable), 
+.i_x(x__3),
+.i_y(y__3),
+.i_z(z__3),
+.i_ux(ux__3),
+.i_uy(uy__3),
+.i_uz(uz__3),
+.i_sz(sz__3),
+.i_sr(sr__3),
+.i_sleftz(sleftz__3),
+.i_sleftr(sleftr__3),
+.i_weight(weight__3),
+.i_layer(layer__3),
+.i_dead(dead__3),
+.i_hit(hit__3),
+//Outputs			
+.o_x(x__4),
+.o_y(y__4),
+.o_z(z__4),
+.o_ux(ux__4),
+.o_uy(uy__4),
+.o_uz(uz__4),
+.o_sz(sz__4),
+.o_sr(sr__4),
+.o_sleftz(sleftz__4),
+.o_sleftr(sleftr__4),
+.o_weight(weight__4),
+.o_layer(layer__4),
+.o_dead(dead__4),
+.o_hit(hit__4)
+); 
+PhotonBlock5 photon3(
+//Inputs
+
+.clock(clock), 
+.reset(reset),
+.enable(enable), 
+.i_x(x__2),
+.i_y(y__2),
+.i_z(z__2),
+.i_ux(ux__2),
+.i_uy(uy__2),
+.i_uz(uz__2),
+.i_sz(sz__2),
+.i_sr(sr__2),
+.i_sleftz(sleftz__2),
+.i_sleftr(sleftr__2),
+.i_weight(weight__2),
+.i_layer(layer__2),
+.i_dead(dead__2),
+.i_hit(hit__2),
+//Outputs			
+.o_x(x__3),
+.o_y(y__3),
+.o_z(z__3),
+.o_ux(ux__3),
+.o_uy(uy__3),
+.o_uz(uz__3),
+.o_sz(sz__3),
+.o_sr(sr__3),
+.o_sleftz(sleftz__3),
+.o_sleftr(sleftr__3),
+.o_weight(weight__3),
+.o_layer(layer__3),
+.o_dead(dead__3),
+.o_hit(hit__3)
+); 
+PhotonBlock5 photon2(
+//Inputs
+
+.clock(clock), 
+.reset(reset),
+.enable(enable), 
+.i_x(x__1),
+.i_y(y__1),
+.i_z(z__1),
+.i_ux(ux__1),
+.i_uy(uy__1),
+.i_uz(uz__1),
+.i_sz(sz__1),
+.i_sr(sr__1),
+.i_sleftz(sleftz__1),
+.i_sleftr(sleftr__1),
+.i_weight(weight__1),
+.i_layer(layer__1),
+.i_dead(dead__1),
+.i_hit(hit__1),
+//Outputs			
+.o_x(x__2),
+.o_y(y__2),
+.o_z(z__2),
+.o_ux(ux__2),
+.o_uy(uy__2),
+.o_uz(uz__2),
+.o_sz(sz__2),
+.o_sr(sr__2),
+.o_sleftz(sleftz__2),
+.o_sleftr(sleftr__2),
+.o_weight(weight__2),
+.o_layer(layer__2),
+.o_dead(dead__2),
+.o_hit(hit__2)
+); 
+PhotonBlock5 photon1(
+//Inputs
+
+.clock(clock), 
+.reset(reset),
+.enable(enable), 
+.i_x(x__0),
+.i_y(y__0),
+.i_z(z__0),
+.i_ux(ux__0),
+.i_uy(uy__0),
+.i_uz(uz__0),
+.i_sz(sz__0),
+.i_sr(sr__0),
+.i_sleftz(sleftz__0),
+.i_sleftr(sleftr__0),
+.i_weight(weight__0),
+.i_layer(layer__0),
+.i_dead(dead__0),
+.i_hit(hit__0),
+//Outputs			
+.o_x(x__1),
+.o_y(y__1),
+.o_z(z__1),
+.o_ux(ux__1),
+.o_uy(uy__1),
+.o_uz(uz__1),
+.o_sz(sz__1),
+.o_sr(sr__1),
+.o_sleftz(sleftz__1),
+.o_sleftr(sleftr__1),
+.o_weight(weight__1),
+.o_layer(layer__1),
+.o_dead(dead__1),
+.o_hit(hit__1)
+); 
+
+
+
+//////////////////////////////////////////////////////////////////////////////
+//Tapping into the Registered Pipeline
+//***NOTE: Index must be incremented by 1 compared to SystemC version 
+//////////////////////////////////////////////////////////////////////////////
+
+//>>>>>>>>>>>>> Absorber <<<<<<<<<<<<<<<<<<
+wire	[`BIT_WIDTH-1:0]			x_pipe, y_pipe,	z_pipe;
+wire	[`LAYER_WIDTH-1:0]			layer_pipe;
+assign x_pipe=x__2; 
+assign y_pipe=y__2; 
+assign z_pipe=z__14;  //TODO: Check square-root latency and modify z[14] if needed!!!!
+assign layer_pipe=layer__4;
+
+//>>>>>>>>>>>>> ScattererReflectorWrapper <<<<<<<<<<<<<<<<<<
+wire	[`BIT_WIDTH-1:0]			ux_scatterer;
+wire	[`BIT_WIDTH-1:0]			uy_scatterer;
+wire	[`BIT_WIDTH-1:0]			uz_scatterer;
+wire	[`BIT_WIDTH-1:0]			ux_reflector;
+wire	[`BIT_WIDTH-1:0]			uy_reflector;
+wire	[`BIT_WIDTH-1:0]			uz_reflector;
+wire	[`LAYER_WIDTH-1:0]			layer_reflector;
+wire					dead_reflector;
+
+
+
+
+//////////////////////////////////////////////////////////////////////////////
+//Connect up different modules
+//////////////////////////////////////////////////////////////////////////////
+
+//>>>>>>>>>>>>> Absorber <<<<<<<<<<<<<<<<<<
+
+Absorber absorb (    //INPUTS
+                     .clock(clock) , .reset(reset), .enable(enable), 
+                     
+                     //From hopper
+                     .weight_hop(i_weight), .hit_hop(i_hit), .dead_hop(i_dead),
+
+                     //From Shared Registers
+                     .x_pipe (x_pipe), .y_pipe (y_pipe), .z_pipe(z_pipe), .layer_pipe(layer_pipe),
+                     
+                     //From System Register File (5 layers)
+                     .muaFraction1(muaFraction1), .muaFraction2(muaFraction2), .muaFraction3(muaFraction3), .muaFraction4(muaFraction4), .muaFraction5(muaFraction5),  
+                     
+                     //Dual-port Mem
+                     .data(data), .rdaddress(rdaddress), .wraddress(wraddress), 
+                     .wren(wren), .q(q),
+                     
+                     //OUTPUT
+                     .weight_absorber(o_weight)
+
+                     ); 
+
+//>>>>>>>>>>>>> ScattererReflectorWrapper <<<<<<<<<<<<<<<<<<
+
+ScattererReflectorWrapper scattererReflector(
+	//Inputs
+	.clock(clock),
+	.reset(reset),
+	.enable(enable),
+		//Inputs
+		
+		//Photon values
+		.i_uz1_pipeWrapper(uz__1),
+		.i_hit2_pipeWrapper(hit__1),
+		.i_ux3_pipeWrapper(ux__3),
+		.i_uz3_pipeWrapper(uz__3),
+		.i_layer3_pipeWrapper(layer__3),
+		.i_hit4_pipeWrapper(hit__3),
+		.i_hit6_pipeWrapper(hit__5),
+		.i_hit16_pipeWrapper(hit__15), 
+		.i_layer31_pipeWrapper(layer__31),
+		.i_uy32_pipeWrapper(uy__32),
+		.i_uz32_pipeWrapper(uz__32),
+		.i_hit33_pipeWrapper(hit__32),
+		.i_ux33_pipeWrapper(ux__33),
+		.i_uy33_pipeWrapper(uy__33),
+		.i_hit34_pipeWrapper(hit__33),
+		.i_ux35_pipeWrapper(ux__35),
+		.i_uy35_pipeWrapper(uy__35),
+		.i_uz35_pipeWrapper(uz__35),
+		.i_layer35_pipeWrapper(layer__35),
+		.i_hit36_pipeWrapper(hit__35),
+		.i_ux36_pipeWrapper(ux__36),
+		.i_uy36_pipeWrapper(uy__36),
+		.i_uz36_pipeWrapper(uz__36),
+		.i_layer36_pipeWrapper(layer__36),
+		.i_dead36_pipeWrapper(dead__36),
+	
+		//Memory Interface
+			//Inputs
+		.rand2(rand2),
+		.rand3(rand3),
+		.rand5(rand5),
+		.sint(sint),
+		.cost(cost),
+		.up_rFresnel(up_rFresnel),
+		.down_rFresnel(down_rFresnel),
+			//Outputs
+		.tindex(tindex),
+		.fresIndex(fresIndex),
+		
+		//Constants
+		.down_niOverNt_1(down_niOverNt_1),
+		.down_niOverNt_2(down_niOverNt_2),
+		.down_niOverNt_3(down_niOverNt_3),
+		.down_niOverNt_4(down_niOverNt_4),
+		.down_niOverNt_5(down_niOverNt_5),
+		.up_niOverNt_1(up_niOverNt_1),
+		.up_niOverNt_2(up_niOverNt_2),
+		.up_niOverNt_3(up_niOverNt_3),
+		.up_niOverNt_4(up_niOverNt_4),
+		.up_niOverNt_5(up_niOverNt_5),
+		.down_niOverNt_2_1(down_niOverNt_2_1),
+		.down_niOverNt_2_2(down_niOverNt_2_2),
+		.down_niOverNt_2_3(down_niOverNt_2_3),
+		.down_niOverNt_2_4(down_niOverNt_2_4),
+		.down_niOverNt_2_5(down_niOverNt_2_5),
+		.up_niOverNt_2_1(up_niOverNt_2_1),
+		.up_niOverNt_2_2(up_niOverNt_2_2),
+		.up_niOverNt_2_3(up_niOverNt_2_3),
+		.up_niOverNt_2_4(up_niOverNt_2_4),
+		.up_niOverNt_2_5(up_niOverNt_2_5),
+		.downCritAngle_0(downCritAngle_0),
+		.downCritAngle_1(downCritAngle_1),
+		.downCritAngle_2(downCritAngle_2),
+		.downCritAngle_3(downCritAngle_3),
+		.downCritAngle_4(downCritAngle_4),
+		.upCritAngle_0(upCritAngle_0),
+		.upCritAngle_1(upCritAngle_1),
+		.upCritAngle_2(upCritAngle_2),
+		.upCritAngle_3(upCritAngle_3),
+		.upCritAngle_4(upCritAngle_4),
+		
+		//Outputs
+		.ux_scatterer(ux_scatterer),
+		.uy_scatterer(uy_scatterer),
+		.uz_scatterer(uz_scatterer),
+		
+		.ux_reflector(ux_reflector),
+		.uy_reflector(uy_reflector),
+		.uz_reflector(uz_reflector),
+		.layer_reflector(layer_reflector),
+		.dead_reflector(dead_reflector)
+	);
+	
+	
+//////////////////////////////////////////////////////////////////////
+////  dead or alive MUX                                           ////
+////                                                              ////
+////  Description:                                                ////
+////    Used to determine whether the output from the scatterer   ////
+////    or the reflector should be used in any clock cycle        ////
+//////////////////////////////////////////////////////////////////////
+
+always @ (hit__37 or ux_scatterer or uy_scatterer or uz_scatterer or layer__37 or dead__37 or
+			ux_reflector or uy_reflector or uz_reflector or layer_reflector or dead_reflector) begin
+   case (hit__37)   
+   0: begin
+       o_ux = ux_scatterer;
+       o_uy = uy_scatterer;
+       o_uz = uz_scatterer;
+       o_layer = layer__37;
+       o_dead = dead__37;          
+   end
+   1: begin
+      o_ux = ux_reflector;
+      o_uy = uy_reflector;
+      o_uz = uz_reflector;
+      o_layer = layer_reflector;
+      o_dead = dead_reflector;
+   end   
+   endcase 
+    
+end
+
+endmodule
+
+//Photons that make up the register pipeline
+module PhotonBlock5(
+	//Inputs
+	clock,
+	reset,
+	enable,
+	
+	i_x,
+	i_y,
+	i_z,
+	i_ux,
+	i_uy,
+	i_uz,
+	i_sz,
+	i_sr,
+	i_sleftz,
+	i_sleftr,
+	i_weight,
+	i_layer,
+	i_dead,
+	i_hit,
+	//Outputs
+	o_x,
+	o_y,
+	o_z,
+	o_ux,
+	o_uy,
+	o_uz,
+	o_sz,
+	o_sr,
+	o_sleftz,
+	o_sleftr,
+	o_weight,
+	o_layer,
+	o_dead,
+	o_hit
+	);
+
+//parameter BIT_WIDTH=32;
+//parameter LAYER_WIDTH=3;
+
+input				clock;
+input				reset;
+input				enable;
+
+input	[`BIT_WIDTH-1:0]			i_x;
+input	[`BIT_WIDTH-1:0]			i_y;
+input	[`BIT_WIDTH-1:0]			i_z;
+input	[`BIT_WIDTH-1:0]			i_ux;
+input	[`BIT_WIDTH-1:0]			i_uy;
+input	[`BIT_WIDTH-1:0]			i_uz;
+input	[`BIT_WIDTH-1:0]			i_sz;
+input	[`BIT_WIDTH-1:0]			i_sr;
+input	[`BIT_WIDTH-1:0]			i_sleftz;
+input	[`BIT_WIDTH-1:0]			i_sleftr;
+input	[`BIT_WIDTH-1:0]			i_weight;
+input	[`LAYER_WIDTH-1:0]			i_layer;
+input				i_dead;
+input				i_hit;
+
+
+output	[`BIT_WIDTH-1:0]			o_x;
+output	[`BIT_WIDTH-1:0]			o_y;
+output	[`BIT_WIDTH-1:0]			o_z;
+output	[`BIT_WIDTH-1:0]			o_ux;
+output	[`BIT_WIDTH-1:0]			o_uy;
+output	[`BIT_WIDTH-1:0]			o_uz;
+output	[`BIT_WIDTH-1:0]			o_sz;
+output	[`BIT_WIDTH-1:0]			o_sr;
+output	[`BIT_WIDTH-1:0]			o_sleftz;
+output	[`BIT_WIDTH-1:0]			o_sleftr;
+output	[`BIT_WIDTH-1:0]			o_weight;
+output	[`LAYER_WIDTH-1:0]			o_layer;
+output				o_dead;
+output				o_hit;
+
+
+wire				clock;
+wire				reset;
+wire				enable;
+
+wire	[`BIT_WIDTH-1:0]			i_x;
+wire	[`BIT_WIDTH-1:0]			i_y;
+wire	[`BIT_WIDTH-1:0]			i_z;
+wire	[`BIT_WIDTH-1:0]			i_ux;
+wire	[`BIT_WIDTH-1:0]			i_uy;
+wire	[`BIT_WIDTH-1:0]			i_uz;
+wire	[`BIT_WIDTH-1:0]			i_sz;
+wire	[`BIT_WIDTH-1:0]			i_sr;
+wire	[`BIT_WIDTH-1:0]			i_sleftz;
+wire	[`BIT_WIDTH-1:0]			i_sleftr;
+wire	[`BIT_WIDTH-1:0]			i_weight;
+wire	[`LAYER_WIDTH-1:0]			i_layer;
+wire				i_dead;
+wire				i_hit;
+
+
+reg	[`BIT_WIDTH-1:0]			o_x;
+reg	[`BIT_WIDTH-1:0]			o_y;
+reg	[`BIT_WIDTH-1:0]			o_z;
+reg	[`BIT_WIDTH-1:0]			o_ux;
+reg	[`BIT_WIDTH-1:0]			o_uy;
+reg	[`BIT_WIDTH-1:0]			o_uz;
+reg	[`BIT_WIDTH-1:0]			o_sz;
+reg	[`BIT_WIDTH-1:0]			o_sr;
+reg	[`BIT_WIDTH-1:0]			o_sleftz;
+reg	[`BIT_WIDTH-1:0]			o_sleftr;
+reg	[`BIT_WIDTH-1:0]			o_weight;
+reg	[`LAYER_WIDTH-1:0]			o_layer;
+reg				o_dead;
+reg				o_hit;
+
+
+always @ (posedge clock)
+	if(reset) begin
+		o_x		<=	{`BIT_WIDTH{1'b0}};
+		o_y		<=	{`BIT_WIDTH{1'b0}};
+		o_z		<=	{`BIT_WIDTH{1'b0}};
+		o_ux		<=	{`BIT_WIDTH{1'b0}};
+		o_uy		<=	{`BIT_WIDTH{1'b0}};
+		o_uz		<=	{`BIT_WIDTH{1'b0}};
+		o_sz		<=	{`BIT_WIDTH{1'b0}};
+		o_sr		<=	{`BIT_WIDTH{1'b0}};
+		o_sleftz	<=	{`BIT_WIDTH{1'b0}};
+		o_sleftr	<=	{`BIT_WIDTH{1'b0}};
+		o_weight	<=	{`BIT_WIDTH{1'b0}};
+		o_layer		<=	{`LAYER_WIDTH{1'b0}};
+		o_dead		<=	1'b1;
+		o_hit		<=	1'b0;
+	end else if(enable) begin
+		o_x		<=	i_x;
+		o_y		<=	i_y;
+		o_z		<=	i_z;
+		o_ux		<=	i_ux;
+		o_uy		<=	i_uy;
+		o_uz		<=	i_uz;
+		o_sz		<=	i_sz;
+		o_sr		<=	i_sr;
+		o_sleftz	<=	i_sleftz;
+		o_sleftr	<=	i_sleftr;
+		o_weight	<=	i_weight;
+		o_layer		<=	i_layer;
+		o_dead		<=	i_dead;
+		o_hit		<=	i_hit;
+	end
+endmodule
+
+
+//module FluenceUpdate (    //INPUTS
+module Absorber ( 	//INPUTS
+                     clock, reset, enable, 
+                     
+                     //From hopper
+                     weight_hop, hit_hop, dead_hop,
+
+                     //From Shared Registers
+                     x_pipe, y_pipe, z_pipe, layer_pipe,
+                     
+                     //From System Register File (5 layers)
+                     muaFraction1, muaFraction2, muaFraction3, muaFraction4, muaFraction5,  
+                     
+                     //I/O to on-chip mem -- check interface
+                     data, rdaddress, wraddress, wren, q,
+                     
+                     //OUTPUT
+                     weight_absorber
+                     
+                     ); 
+
+
+//////////////////////////////////////////////////////////////////////////////
+//PARAMETERS
+//////////////////////////////////////////////////////////////////////////////
+//parameter `NR=256;              
+//parameter `NZ=256;              
+//
+//parameter `NR_EXP=8;              //meaning `NR=2^`NR_exp or 2^8=256
+//parameter `RGRID_SCLAE_EXP=21;    //2^21 = RGRID_SCALE
+//parameter `ZGRID_SCLAE_EXP=21;    //2^21 = ZGRID_SCALE
+//
+//
+//parameter `BIT_WIDTH=32;
+//parameter `BIT_WIDTH_2=64;
+//parameter `WORD_WIDTH=64;
+//parameter `ADDR_WIDTH=16;          //256x256=2^8*2^8=2^16
+//
+//
+//parameter `LAYER_WIDTH=3; 
+//parameter `PIPE_DEPTH = 37;        
+
+
+//////////////////////////////////////////////////////////////////////////////
+//INPUTS
+//////////////////////////////////////////////////////////////////////////////
+input clock;        
+input reset;
+input enable;
+
+//From hopper
+input [`BIT_WIDTH-1:0] weight_hop; 
+input hit_hop; 
+input dead_hop; 
+
+//From Shared Reg
+//input signed [`BIT_WIDTH-1:0] x_pipe;
+//input signed [`BIT_WIDTH-1:0] y_pipe;
+input [`BIT_WIDTH-1:0] x_pipe;
+input [`BIT_WIDTH-1:0] y_pipe;
+input [`BIT_WIDTH-1:0] z_pipe;
+input [`LAYER_WIDTH-1:0] layer_pipe;
+
+//From System Reg File
+input [`BIT_WIDTH-1:0] muaFraction1, muaFraction2, muaFraction3, muaFraction4, muaFraction5;  
+
+//////////////////////////////////////////////////////////////////////////////
+//OUTPUTS
+//////////////////////////////////////////////////////////////////////////////
+output [`BIT_WIDTH-1:0] weight_absorber; 
+
+//////////////////////////////////////////////////////////////////////////////
+//I/O to on-chip mem -- check interface
+//////////////////////////////////////////////////////////////////////////////
+output [`WORD_WIDTH-1:0] data; 
+output [`ADDR_WIDTH-1:0] rdaddress, wraddress; 
+output wren;     
+reg wren; 
+input [`WORD_WIDTH-1:0] q;
+
+//////////////////////////////////////////////////////////////////////////////
+//Local AND Registered Value Variables
+//////////////////////////////////////////////////////////////////////////////
+//STAGE 1 - Do nothing
+
+//STAGE 2
+reg [`BIT_WIDTH_2-1:0] x2_temp, y2_temp;   //From mult
+reg [`BIT_WIDTH_2-1:0] x2_P, y2_P;         //Registered Value
+
+//STAGE 3
+reg [`BIT_WIDTH_2-1:0] r2_temp, r2_P;   
+wire [`BIT_WIDTH_2-1:0] r2_P_wire;  
+
+//STAGE 4
+reg [`BIT_WIDTH-1:0]		fractionScaled; 
+reg [`BIT_WIDTH-1:0]		weight_P4; 
+reg [`BIT_WIDTH-1:0]		r_P; 
+wire [`BIT_WIDTH-1:0]		r_P_wire; 
+
+reg [`BIT_WIDTH_2-1:0] product64bit; 
+reg [`BIT_WIDTH-1:0] dwa_temp; 
+
+//STAGE 14
+reg [`BIT_WIDTH-1:0]		ir_temp; 
+reg [`BIT_WIDTH-1:0]		iz_temp; 
+
+//STAGE 15
+reg [`BIT_WIDTH-1:0]		ir_P; 
+reg [`BIT_WIDTH-1:0]		iz_P; 
+reg [`BIT_WIDTH-1:0]		ir_scaled; 
+reg [`ADDR_WIDTH-1:0] rADDR_temp; 
+reg [`ADDR_WIDTH-1:0] rADDR_16; 
+
+//STAGE 16
+reg [`WORD_WIDTH-1:0] oldAbs_MEM;
+reg [`WORD_WIDTH-1:0] oldAbs_P; 
+reg [`ADDR_WIDTH-1:0] rADDR_17;
+ 
+//STAGE 17
+reg [`BIT_WIDTH-1:0] weight_P; 
+reg [`BIT_WIDTH-1:0] dwa_P; 
+reg [`BIT_WIDTH-1:0] newWeight; 
+
+reg [`WORD_WIDTH-1:0] newAbs_P; 
+reg [`WORD_WIDTH-1:0] newAbs_temp; 
+
+//reg [`ADDR_WIDTH-1:0] wADDR; 
+
+
+//////////////////////////////////////////////////////////////////////////////
+//PIPELINE weight, hit, dead
+//////////////////////////////////////////////////////////////////////////////
+//WIRES FOR CONNECTING REGISTERS
+
+//peter m made this manual
+//wire	[32-1:0]			weight	[37:0];
+
+wire	[32-1:0]				weight__0;
+wire	[32-1:0]				weight__1;
+wire	[32-1:0]				weight__2;
+wire	[32-1:0]				weight__3;
+wire	[32-1:0]				weight__4;
+wire	[32-1:0]				weight__5;
+wire	[32-1:0]				weight__6;
+wire	[32-1:0]				weight__7;
+wire	[32-1:0]				weight__8;
+wire	[32-1:0]				weight__9;
+wire	[32-1:0]				weight__10;
+wire	[32-1:0]				weight__11;
+wire	[32-1:0]				weight__12;
+wire	[32-1:0]				weight__13;
+wire	[32-1:0]				weight__14;
+wire	[32-1:0]				weight__15;
+wire	[32-1:0]				weight__16;
+wire	[32-1:0]				weight__17;
+wire	[32-1:0]				weight__18;
+wire	[32-1:0]				weight__19;
+wire	[32-1:0]				weight__20;
+wire	[32-1:0]				weight__21;
+wire	[32-1:0]				weight__22;
+wire	[32-1:0]				weight__23;
+wire	[32-1:0]				weight__24;
+wire	[32-1:0]				weight__25;
+wire	[32-1:0]				weight__26;
+wire	[32-1:0]				weight__27;
+wire	[32-1:0]				weight__28;
+wire	[32-1:0]				weight__29;
+wire	[32-1:0]				weight__30;
+wire	[32-1:0]				weight__31;
+wire	[32-1:0]				weight__32;
+wire	[32-1:0]				weight__33;
+wire	[32-1:0]				weight__34;
+wire	[32-1:0]				weight__35;
+wire	[32-1:0]				weight__36;
+wire	[32-1:0]				weight__37;
+
+
+//wire [37:0]	hit	;
+wire					hit__0;
+wire					hit__1;
+wire					hit__2;
+wire					hit__3;
+wire					hit__4;
+wire					hit__5;
+wire					hit__6;
+wire					hit__7;
+wire					hit__8;
+wire					hit__9;
+wire					hit__10;
+wire					hit__11;
+wire					hit__12;
+wire					hit__13;
+wire					hit__14;
+wire					hit__15;
+wire					hit__16;
+wire					hit__17;
+wire					hit__18;
+wire					hit__19;
+wire					hit__20;
+wire					hit__21;
+wire					hit__22;
+wire					hit__23;
+wire					hit__24;
+wire					hit__25;
+wire					hit__26;
+wire					hit__27;
+wire					hit__28;
+wire					hit__29;
+wire					hit__30;
+wire					hit__31;
+wire					hit__32;
+wire					hit__33;
+wire					hit__34;
+wire					hit__35;
+wire					hit__36;
+wire					hit__37;
+
+
+
+//wire	[37:0]  dead	;
+wire					dead__0;
+wire					dead__1;
+wire					dead__2;
+wire					dead__3;
+wire					dead__4;
+wire					dead__5;
+wire					dead__6;
+wire					dead__7;
+wire					dead__8;
+wire					dead__9;
+wire					dead__10;
+wire					dead__11;
+wire					dead__12;
+wire					dead__13;
+wire					dead__14;
+wire					dead__15;
+wire					dead__16;
+wire					dead__17;
+wire					dead__18;
+wire					dead__19;
+wire					dead__20;
+wire					dead__21;
+wire					dead__22;
+wire					dead__23;
+wire					dead__24;
+wire					dead__25;
+wire					dead__26;
+wire					dead__27;
+wire					dead__28;
+wire					dead__29;
+wire					dead__30;
+wire					dead__31;
+wire					dead__32;
+wire					dead__33;
+wire					dead__34;
+wire					dead__35;
+wire					dead__36;
+wire					dead__37;
+
+
+//ASSIGNMENTS FROM INPUTS TO PIPE
+assign weight__0 = weight_hop;
+assign hit__0 = hit_hop;
+assign dead__0 = dead_hop;
+
+//ASSIGNMENTS FROM PIPE TO OUTPUT
+assign weight_absorber = weight__37;
+
+//GENERATE PIPELINE
+//genvar i;
+//generate
+//	for(i=`PIPE_DEPTH; i>0; i=i-1) begin: weightHitDeadPipe
+//		case(i)  
+//		
+//		//REGISTER 17 on diagram!!
+//		18:   
+//		begin
+//		   
+//		PhotonBlock2 photon(
+//			//Inputs
+//			.clock(clock),
+//			.reset(reset),
+//			.enable(enable),
+//			
+//			.i_x(newWeight),
+//			.i_y(hit[17]),
+//			.i_z(dead[17]),
+//			
+//			//Outputs			
+//			.o_x(weight[18]),
+//			.o_y(hit[18]),
+//			.o_z(dead[18])
+//		);
+//		    
+//		end
+//		default:
+//		begin
+//		PhotonBlock2 photon(
+//			//Inputs
+//			.clock(clock),
+//			.reset(reset),
+//			.enable(enable),
+//			
+//			.i_x(weight[i-1]),
+//			.i_y(hit[i-1]),
+//			.i_z(dead[i-1]),
+//			
+//			//Outputs			
+//			.o_x(weight[i]),
+//			.o_y(hit[i]),
+//			.o_z(dead[i])
+//		);
+//		end
+//		endcase
+//	end
+//endgenerate	
+
+//Expand pipeline generation
+//special case i = 18 first
+PhotonBlock2 photon18(
+			//Inputs
+			.clock(clock),
+			.reset(reset),
+			.enable(enable),
+			
+			.i_x(newWeight),
+			.i_y(hit__17),
+			.i_z(dead__17),
+			
+			//Outputs			
+			.o_x(weight__18),
+			.o_y(hit__18),
+			.o_z(dead__18)
+		);
+		
+PhotonBlock2 photon37(
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(weight__36),
+.i_y(hit__36),
+.i_z(dead__36),
+//Outputs		
+	.o_x(weight__37),
+.o_y(hit__37),
+.o_z(dead__37)
+);
+
+PhotonBlock2 photon36(
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(weight__35),
+.i_y(hit__35),
+.i_z(dead__35),
+//Outputs		
+	.o_x(weight__36),
+.o_y(hit__36),
+.o_z(dead__36)
+);
+
+PhotonBlock2 photon35(
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(weight__34),
+.i_y(hit__34),
+.i_z(dead__34),
+//Outputs		
+	.o_x(weight__35),
+.o_y(hit__35),
+.o_z(dead__35)
+);
+
+PhotonBlock2 photon34(
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(weight__33),
+.i_y(hit__33),
+.i_z(dead__33),
+//Outputs		
+	.o_x(weight__34),
+.o_y(hit__34),
+.o_z(dead__34)
+);
+
+PhotonBlock2 photon33(
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(weight__32),
+.i_y(hit__32),
+.i_z(dead__32),
+//Outputs		
+	.o_x(weight__33),
+.o_y(hit__33),
+.o_z(dead__33)
+);
+
+PhotonBlock2 photon32(
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(weight__31),
+.i_y(hit__31),
+.i_z(dead__31),
+//Outputs		
+	.o_x(weight__32),
+.o_y(hit__32),
+.o_z(dead__32)
+);
+
+PhotonBlock2 photon31(
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(weight__30),
+.i_y(hit__30),
+.i_z(dead__30),
+//Outputs		
+	.o_x(weight__31),
+.o_y(hit__31),
+.o_z(dead__31)
+);
+
+PhotonBlock2 photon30(
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(weight__29),
+.i_y(hit__29),
+.i_z(dead__29),
+//Outputs		
+	.o_x(weight__30),
+.o_y(hit__30),
+.o_z(dead__30)
+);
+
+PhotonBlock2 photon29(
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(weight__28),
+.i_y(hit__28),
+.i_z(dead__28),
+//Outputs		
+	.o_x(weight__29),
+.o_y(hit__29),
+.o_z(dead__29)
+);
+
+PhotonBlock2 photon28(
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(weight__27),
+.i_y(hit__27),
+.i_z(dead__27),
+//Outputs		
+	.o_x(weight__28),
+.o_y(hit__28),
+.o_z(dead__28)
+);
+
+PhotonBlock2 photon27(
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(weight__26),
+.i_y(hit__26),
+.i_z(dead__26),
+//Outputs		
+	.o_x(weight__27),
+.o_y(hit__27),
+.o_z(dead__27)
+);
+
+PhotonBlock2 photon26(
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(weight__25),
+.i_y(hit__25),
+.i_z(dead__25),
+//Outputs		
+	.o_x(weight__26),
+.o_y(hit__26),
+.o_z(dead__26)
+);
+
+PhotonBlock2 photon25(
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(weight__24),
+.i_y(hit__24),
+.i_z(dead__24),
+//Outputs		
+	.o_x(weight__25),
+.o_y(hit__25),
+.o_z(dead__25)
+);
+
+PhotonBlock2 photon24(
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(weight__23),
+.i_y(hit__23),
+.i_z(dead__23),
+//Outputs		
+	.o_x(weight__24),
+.o_y(hit__24),
+.o_z(dead__24)
+);
+
+PhotonBlock2 photon23(
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(weight__22),
+.i_y(hit__22),
+.i_z(dead__22),
+//Outputs		
+	.o_x(weight__23),
+.o_y(hit__23),
+.o_z(dead__23)
+);
+
+PhotonBlock2 photon22(
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(weight__21),
+.i_y(hit__21),
+.i_z(dead__21),
+//Outputs		
+	.o_x(weight__22),
+.o_y(hit__22),
+.o_z(dead__22)
+);
+
+PhotonBlock2 photon21(
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(weight__20),
+.i_y(hit__20),
+.i_z(dead__20),
+//Outputs		
+	.o_x(weight__21),
+.o_y(hit__21),
+.o_z(dead__21)
+);
+
+PhotonBlock2 photon20(
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(weight__19),
+.i_y(hit__19),
+.i_z(dead__19),
+//Outputs		
+	.o_x(weight__20),
+.o_y(hit__20),
+.o_z(dead__20)
+);
+
+PhotonBlock2 photon19(
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(weight__18),
+.i_y(hit__18),
+.i_z(dead__18),
+//Outputs		
+	.o_x(weight__19),
+.o_y(hit__19),
+.o_z(dead__19)
+);
+
+
+PhotonBlock2 photon17(
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(weight__16),
+.i_y(hit__16),
+.i_z(dead__16),
+//Outputs		
+	.o_x(weight__17),
+.o_y(hit__17),
+.o_z(dead__17)
+);
+
+PhotonBlock2 photon16(
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(weight__15),
+.i_y(hit__15),
+.i_z(dead__15),
+//Outputs		
+	.o_x(weight__16),
+.o_y(hit__16),
+.o_z(dead__16)
+);
+
+PhotonBlock2 photon15(
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(weight__14),
+.i_y(hit__14),
+.i_z(dead__14),
+//Outputs		
+	.o_x(weight__15),
+.o_y(hit__15),
+.o_z(dead__15)
+);
+
+PhotonBlock2 photon14(
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(weight__13),
+.i_y(hit__13),
+.i_z(dead__13),
+//Outputs		
+	.o_x(weight__14),
+.o_y(hit__14),
+.o_z(dead__14)
+);
+
+PhotonBlock2 photon13(
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(weight__12),
+.i_y(hit__12),
+.i_z(dead__12),
+//Outputs		
+	.o_x(weight__13),
+.o_y(hit__13),
+.o_z(dead__13)
+);
+
+PhotonBlock2 photon12(
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(weight__11),
+.i_y(hit__11),
+.i_z(dead__11),
+//Outputs		
+	.o_x(weight__12),
+.o_y(hit__12),
+.o_z(dead__12)
+);
+
+PhotonBlock2 photon11(
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(weight__10),
+.i_y(hit__10),
+.i_z(dead__10),
+//Outputs		
+	.o_x(weight__11),
+.o_y(hit__11),
+.o_z(dead__11)
+);
+
+PhotonBlock2 photon10(
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(weight__9),
+.i_y(hit__9),
+.i_z(dead__9),
+//Outputs		
+	.o_x(weight__10),
+.o_y(hit__10),
+.o_z(dead__10)
+);
+
+PhotonBlock2 photon9(
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(weight__8),
+.i_y(hit__8),
+.i_z(dead__8),
+//Outputs		
+	.o_x(weight__9),
+.o_y(hit__9),
+.o_z(dead__9)
+);
+
+PhotonBlock2 photon8(
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(weight__7),
+.i_y(hit__7),
+.i_z(dead__7),
+//Outputs		
+	.o_x(weight__8),
+.o_y(hit__8),
+.o_z(dead__8)
+);
+
+PhotonBlock2 photon7(
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(weight__6),
+.i_y(hit__6),
+.i_z(dead__6),
+//Outputs		
+	.o_x(weight__7),
+.o_y(hit__7),
+.o_z(dead__7)
+);
+
+PhotonBlock2 photon6(
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(weight__5),
+.i_y(hit__5),
+.i_z(dead__5),
+//Outputs		
+	.o_x(weight__6),
+.o_y(hit__6),
+.o_z(dead__6)
+);
+
+PhotonBlock2 photon5(
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(weight__4),
+.i_y(hit__4),
+.i_z(dead__4),
+//Outputs		
+	.o_x(weight__5),
+.o_y(hit__5),
+.o_z(dead__5)
+);
+
+PhotonBlock2 photon4(
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(weight__3),
+.i_y(hit__3),
+.i_z(dead__3),
+//Outputs		
+	.o_x(weight__4),
+.o_y(hit__4),
+.o_z(dead__4)
+);
+
+PhotonBlock2 photon3(
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(weight__2),
+.i_y(hit__2),
+.i_z(dead__2),
+//Outputs		
+	.o_x(weight__3),
+.o_y(hit__3),
+.o_z(dead__3)
+);
+
+PhotonBlock2 photon2(
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(weight__1),
+.i_y(hit__1),
+.i_z(dead__1),
+//Outputs		
+	.o_x(weight__2),
+.o_y(hit__2),
+.o_z(dead__2)
+);
+
+PhotonBlock2 photon1(
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(weight__0),
+.i_y(hit__0),
+.i_z(dead__0),
+//Outputs		
+	.o_x(weight__1),
+.o_y(hit__1),
+.o_z(dead__1)
+);
+
+
+//////////////////////////////////////////////////////////////////////////////
+//PIPELINE ir,iz,dwa
+//////////////////////////////////////////////////////////////////////////////
+//WIRES FOR CONNECTING REGISTERS
+//wire	[32-1:0]			ir	[37:0];
+
+wire	[32-1:0]				ir__0;
+wire	[32-1:0]				ir__1;
+wire	[32-1:0]				ir__2;
+wire	[32-1:0]				ir__3;
+wire	[32-1:0]				ir__4;
+wire	[32-1:0]				ir__5;
+wire	[32-1:0]				ir__6;
+wire	[32-1:0]				ir__7;
+wire	[32-1:0]				ir__8;
+wire	[32-1:0]				ir__9;
+wire	[32-1:0]				ir__10;
+wire	[32-1:0]				ir__11;
+wire	[32-1:0]				ir__12;
+wire	[32-1:0]				ir__13;
+wire	[32-1:0]				ir__14;
+wire	[32-1:0]				ir__15;
+wire	[32-1:0]				ir__16;
+wire	[32-1:0]				ir__17;
+wire	[32-1:0]				ir__18;
+wire	[32-1:0]				ir__19;
+wire	[32-1:0]				ir__20;
+wire	[32-1:0]				ir__21;
+wire	[32-1:0]				ir__22;
+wire	[32-1:0]				ir__23;
+wire	[32-1:0]				ir__24;
+wire	[32-1:0]				ir__25;
+wire	[32-1:0]				ir__26;
+wire	[32-1:0]				ir__27;
+wire	[32-1:0]				ir__28;
+wire	[32-1:0]				ir__29;
+wire	[32-1:0]				ir__30;
+wire	[32-1:0]				ir__31;
+wire	[32-1:0]				ir__32;
+wire	[32-1:0]				ir__33;
+wire	[32-1:0]				ir__34;
+wire	[32-1:0]				ir__35;
+wire	[32-1:0]				ir__36;
+wire	[32-1:0]				ir__37;
+
+
+//wire	[32-1:0]			iz	[37:0];
+
+
+wire	[32-1:0]				iz__0;
+wire	[32-1:0]				iz__1;
+wire	[32-1:0]				iz__2;
+wire	[32-1:0]				iz__3;
+wire	[32-1:0]				iz__4;
+wire	[32-1:0]				iz__5;
+wire	[32-1:0]				iz__6;
+wire	[32-1:0]				iz__7;
+wire	[32-1:0]				iz__8;
+wire	[32-1:0]				iz__9;
+wire	[32-1:0]				iz__10;
+wire	[32-1:0]				iz__11;
+wire	[32-1:0]				iz__12;
+wire	[32-1:0]				iz__13;
+wire	[32-1:0]				iz__14;
+wire	[32-1:0]				iz__15;
+wire	[32-1:0]				iz__16;
+wire	[32-1:0]				iz__17;
+wire	[32-1:0]				iz__18;
+wire	[32-1:0]				iz__19;
+wire	[32-1:0]				iz__20;
+wire	[32-1:0]				iz__21;
+wire	[32-1:0]				iz__22;
+wire	[32-1:0]				iz__23;
+wire	[32-1:0]				iz__24;
+wire	[32-1:0]				iz__25;
+wire	[32-1:0]				iz__26;
+wire	[32-1:0]				iz__27;
+wire	[32-1:0]				iz__28;
+wire	[32-1:0]				iz__29;
+wire	[32-1:0]				iz__30;
+wire	[32-1:0]				iz__31;
+wire	[32-1:0]				iz__32;
+wire	[32-1:0]				iz__33;
+wire	[32-1:0]				iz__34;
+wire	[32-1:0]				iz__35;
+wire	[32-1:0]				iz__36;
+wire	[32-1:0]				iz__37;
+
+
+//wire	[32-1:0]			dwa	[37:0];
+
+
+wire	[32-1:0]				dwa__0;
+wire	[32-1:0]				dwa__1;
+wire	[32-1:0]				dwa__2;
+wire	[32-1:0]				dwa__3;
+wire	[32-1:0]				dwa__4;
+wire	[32-1:0]				dwa__5;
+wire	[32-1:0]				dwa__6;
+wire	[32-1:0]				dwa__7;
+wire	[32-1:0]				dwa__8;
+wire	[32-1:0]				dwa__9;
+wire	[32-1:0]				dwa__10;
+wire	[32-1:0]				dwa__11;
+wire	[32-1:0]				dwa__12;
+wire	[32-1:0]				dwa__13;
+wire	[32-1:0]				dwa__14;
+wire	[32-1:0]				dwa__15;
+wire	[32-1:0]				dwa__16;
+wire	[32-1:0]				dwa__17;
+wire	[32-1:0]				dwa__18;
+wire	[32-1:0]				dwa__19;
+wire	[32-1:0]				dwa__20;
+wire	[32-1:0]				dwa__21;
+wire	[32-1:0]				dwa__22;
+wire	[32-1:0]				dwa__23;
+wire	[32-1:0]				dwa__24;
+wire	[32-1:0]				dwa__25;
+wire	[32-1:0]				dwa__26;
+wire	[32-1:0]				dwa__27;
+wire	[32-1:0]				dwa__28;
+wire	[32-1:0]				dwa__29;
+wire	[32-1:0]				dwa__30;
+wire	[32-1:0]				dwa__31;
+wire	[32-1:0]				dwa__32;
+wire	[32-1:0]				dwa__33;
+wire	[32-1:0]				dwa__34;
+wire	[32-1:0]				dwa__35;
+wire	[32-1:0]				dwa__36;
+wire	[32-1:0]				dwa__37;
+
+
+//ASSIGNMENTS FROM INPUTS TO PIPE
+assign ir__0 = 32'b0;
+assign iz__0 = 32'b0;
+assign dwa__0 = 32'b0;
+
+//GENERATE PIPELINE
+//generate
+//	for(i=`PIPE_DEPTH; i>0; i=i-1) begin: IrIzDwaPipe
+//		case(i)
+//		    
+//		//NOTE: STAGE 14 --> REGISTER 14 on diagram !!   ir, iz 
+//		15:   
+//		begin
+//
+//		PhotonBlock1 photon(
+//			//Inputs
+//			.clock(clock),
+//			.reset(reset),
+//			.enable(enable),
+//			
+//			.i_x(ir_temp),
+//			.i_y(iz_temp),
+//			.i_z(dwa[14]),
+//			
+//			//Outputs			
+//			.o_x(ir[15]),
+//			.o_y(iz[15]),
+//			.o_z(dwa[15])
+//		);		
+//		
+//		end    
+//		
+//		//NOTE: STAGE 4 --> REGISTER 4 on diagram !!   dwa  
+//		5:   
+//		begin
+//		    
+//		PhotonBlock1 photon(
+//			//Inputs
+//			.clock(clock),
+//			.reset(reset),
+//			.enable(enable),
+//			
+//			.i_x(ir[4]),
+//			.i_y(iz[4]),
+//			.i_z(dwa_temp),
+//			
+//			//Outputs			
+//			.o_x(ir[5]),
+//			.o_y(iz[5]),
+//			.o_z(dwa[5])
+//		);		    
+//		
+//		end    
+//				
+//		default:
+//		begin
+//		    	    
+//		PhotonBlock1 photon(
+//			//Inputs
+//			.clock(clock),
+//			.reset(reset),
+//			.enable(enable),
+//			
+//			.i_x(ir[i-1]),
+//			.i_y(iz[i-1]),
+//			.i_z(dwa[i-1]),
+//			
+//			//Outputs			
+//			.o_x(ir[i]),
+//			.o_y(iz[i]),
+//			.o_z(dwa[i])
+//		);
+//		end
+//		endcase
+//	end
+//endgenerate	
+
+//Expanded generation
+
+
+//special cases first peter m
+
+	
+
+		PhotonBlock1 photon15q(
+			//Inputs
+			.clock(clock),
+			.reset(reset),
+			.enable(enable),
+			
+			.i_x(ir_temp),
+			.i_y(iz_temp),
+			.i_z(dwa__14),
+			
+			//Outputs			
+			.o_x(ir__15),
+			.o_y(iz__15),
+			.o_z(dwa__15)
+		);		
+		
+
+		
+		//NOTE: STAGE 4 --> REGISTER 4 on diagram !!   dwa  
+
+		    
+		PhotonBlock1 photon5q(
+			//Inputs
+			.clock(clock),
+			.reset(reset),
+			.enable(enable),
+			
+			.i_x(ir__4),
+			.i_y(iz__4),
+			.i_z(dwa_temp),
+			
+			//Outputs			
+			.o_x(ir__5),
+			.o_y(iz__5),
+			.o_z(dwa__5)
+		);		
+
+	PhotonBlock1 photon37q(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(ir__36),
+.i_y(iz__36),
+.i_z(dwa__36),
+//Outputs		
+	.o_x(ir__37),
+.o_y(iz__37),
+.o_z(dwa__37)
+);
+PhotonBlock1 photon36q(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(ir__35),
+.i_y(iz__35),
+.i_z(dwa__35),
+//Outputs		
+	.o_x(ir__36),
+.o_y(iz__36),
+.o_z(dwa__36)
+);
+PhotonBlock1 photon35q(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(ir__34),
+.i_y(iz__34),
+.i_z(dwa__34),
+//Outputs		
+	.o_x(ir__35),
+.o_y(iz__35),
+.o_z(dwa__35)
+);
+PhotonBlock1 photon34q(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(ir__33),
+.i_y(iz__33),
+.i_z(dwa__33),
+//Outputs		
+	.o_x(ir__34),
+.o_y(iz__34),
+.o_z(dwa__34)
+);
+PhotonBlock1 photon33q(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(ir__32),
+.i_y(iz__32),
+.i_z(dwa__32),
+//Outputs		
+	.o_x(ir__33),
+.o_y(iz__33),
+.o_z(dwa__33)
+);
+PhotonBlock1 photon32q(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(ir__31),
+.i_y(iz__31),
+.i_z(dwa__31),
+//Outputs		
+	.o_x(ir__32),
+.o_y(iz__32),
+.o_z(dwa__32)
+);
+PhotonBlock1 photon31q(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(ir__30),
+.i_y(iz__30),
+.i_z(dwa__30),
+//Outputs		
+	.o_x(ir__31),
+.o_y(iz__31),
+.o_z(dwa__31)
+);
+PhotonBlock1 photon30q(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(ir__29),
+.i_y(iz__29),
+.i_z(dwa__29),
+//Outputs		
+	.o_x(ir__30),
+.o_y(iz__30),
+.o_z(dwa__30)
+);
+PhotonBlock1 photon29q(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(ir__28),
+.i_y(iz__28),
+.i_z(dwa__28),
+//Outputs		
+	.o_x(ir__29),
+.o_y(iz__29),
+.o_z(dwa__29)
+);
+PhotonBlock1 photon28q(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(ir__27),
+.i_y(iz__27),
+.i_z(dwa__27),
+//Outputs		
+	.o_x(ir__28),
+.o_y(iz__28),
+.o_z(dwa__28)
+);
+PhotonBlock1 photon27q(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(ir__26),
+.i_y(iz__26),
+.i_z(dwa__26),
+//Outputs		
+	.o_x(ir__27),
+.o_y(iz__27),
+.o_z(dwa__27)
+);
+PhotonBlock1 photon26q(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(ir__25),
+.i_y(iz__25),
+.i_z(dwa__25),
+//Outputs		
+	.o_x(ir__26),
+.o_y(iz__26),
+.o_z(dwa__26)
+);
+PhotonBlock1 photon25q(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(ir__24),
+.i_y(iz__24),
+.i_z(dwa__24),
+//Outputs		
+	.o_x(ir__25),
+.o_y(iz__25),
+.o_z(dwa__25)
+);
+PhotonBlock1 photon24q(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(ir__23),
+.i_y(iz__23),
+.i_z(dwa__23),
+//Outputs		
+	.o_x(ir__24),
+.o_y(iz__24),
+.o_z(dwa__24)
+);
+PhotonBlock1 photon23q(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(ir__22),
+.i_y(iz__22),
+.i_z(dwa__22),
+//Outputs		
+	.o_x(ir__23),
+.o_y(iz__23),
+.o_z(dwa__23)
+);
+PhotonBlock1 photon22q(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(ir__21),
+.i_y(iz__21),
+.i_z(dwa__21),
+//Outputs		
+	.o_x(ir__22),
+.o_y(iz__22),
+.o_z(dwa__22)
+);
+PhotonBlock1 photon21q(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(ir__20),
+.i_y(iz__20),
+.i_z(dwa__20),
+//Outputs		
+	.o_x(ir__21),
+.o_y(iz__21),
+.o_z(dwa__21)
+);
+PhotonBlock1 photon20q(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(ir__19),
+.i_y(iz__19),
+.i_z(dwa__19),
+//Outputs		
+	.o_x(ir__20),
+.o_y(iz__20),
+.o_z(dwa__20)
+);
+PhotonBlock1 photon19q(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(ir__18),
+.i_y(iz__18),
+.i_z(dwa__18),
+//Outputs		
+	.o_x(ir__19),
+.o_y(iz__19),
+.o_z(dwa__19)
+);
+PhotonBlock1 photon18q(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(ir__17),
+.i_y(iz__17),
+.i_z(dwa__17),
+//Outputs		
+	.o_x(ir__18),
+.o_y(iz__18),
+.o_z(dwa__18)
+);
+PhotonBlock1 photon17q(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(ir__16),
+.i_y(iz__16),
+.i_z(dwa__16),
+//Outputs		
+	.o_x(ir__17),
+.o_y(iz__17),
+.o_z(dwa__17)
+);
+PhotonBlock1 photon16q(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(ir__15),
+.i_y(iz__15),
+.i_z(dwa__15),
+//Outputs		
+	.o_x(ir__16),
+.o_y(iz__16),
+.o_z(dwa__16)
+);
+
+
+
+
+PhotonBlock1 photon14q(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(ir__13),
+.i_y(iz__13),
+.i_z(dwa__13),
+//Outputs		
+	.o_x(ir__14),
+.o_y(iz__14),
+.o_z(dwa__14)
+);
+PhotonBlock1 photon13q(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(ir__12),
+.i_y(iz__12),
+.i_z(dwa__12),
+//Outputs		
+	.o_x(ir__13),
+.o_y(iz__13),
+.o_z(dwa__13)
+);
+PhotonBlock1 photon12q(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(ir__11),
+.i_y(iz__11),
+.i_z(dwa__11),
+//Outputs		
+	.o_x(ir__12),
+.o_y(iz__12),
+.o_z(dwa__12)
+);
+PhotonBlock1 photon11q(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(ir__10),
+.i_y(iz__10),
+.i_z(dwa__10),
+//Outputs		
+	.o_x(ir__11),
+.o_y(iz__11),
+.o_z(dwa__11)
+);
+PhotonBlock1 photon10q(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(ir__9),
+.i_y(iz__9),
+.i_z(dwa__9),
+//Outputs		
+	.o_x(ir__10),
+.o_y(iz__10),
+.o_z(dwa__10)
+);
+PhotonBlock1 photon9q(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(ir__8),
+.i_y(iz__8),
+.i_z(dwa__8),
+//Outputs		
+	.o_x(ir__9),
+.o_y(iz__9),
+.o_z(dwa__9)
+);
+PhotonBlock1 photon8q(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(ir__7),
+.i_y(iz__7),
+.i_z(dwa__7),
+//Outputs		
+	.o_x(ir__8),
+.o_y(iz__8),
+.o_z(dwa__8)
+);
+PhotonBlock1 photon7q(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(ir__6),
+.i_y(iz__6),
+.i_z(dwa__6),
+//Outputs		
+	.o_x(ir__7),
+.o_y(iz__7),
+.o_z(dwa__7)
+);
+PhotonBlock1 photon6q(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(ir__5),
+.i_y(iz__5),
+.i_z(dwa__5),
+//Outputs		
+	.o_x(ir__6),
+.o_y(iz__6),
+.o_z(dwa__6)
+);
+
+
+
+PhotonBlock1 photon4q(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(ir__3),
+.i_y(iz__3),
+.i_z(dwa__3),
+//Outputs		
+	.o_x(ir__4),
+.o_y(iz__4),
+.o_z(dwa__4)
+);
+PhotonBlock1 photon3q(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(ir__2),
+.i_y(iz__2),
+.i_z(dwa__2),
+//Outputs		
+	.o_x(ir__3),
+.o_y(iz__3),
+.o_z(dwa__3)
+);
+PhotonBlock1 photon2q(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(ir__1),
+.i_y(iz__1),
+.i_z(dwa__1),
+//Outputs		
+	.o_x(ir__2),
+.o_y(iz__2),
+.o_z(dwa__2)
+);
+PhotonBlock1 photon1q(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_x(ir__0),
+.i_y(iz__0),
+.i_z(dwa__0),
+//Outputs		
+	.o_x(ir__1),
+.o_y(iz__1),
+.o_z(dwa__1)
+);
+	
+
+
+//////////////////////////////////////////////////////////////////////////////
+//STAGE BY STAGE PIPELINE DESIGN
+//////////////////////////////////////////////////////////////////////////////
+
+///////////////STAGE 2 - square of x and y/////////////////////////
+always @(reset or x_pipe or y_pipe) begin
+	if (reset)	begin      
+		x2_temp=0;      
+		y2_temp=0;
+	end
+	else	begin
+	   x2_temp=x_pipe*x_pipe;     
+	   y2_temp=y_pipe*y_pipe;
+	end 
+end
+
+///////////////STAGE 3 - square of r/////////////////////////
+always @(reset or x2_P or y2_P) begin
+	if (reset)
+		r2_temp=0; 
+	else 
+		r2_temp=x2_P+y2_P; 
+end
+
+///////////////STAGE 4 - Find r and dwa/////////////////////////
+//Create MUX
+always@(layer_pipe or muaFraction1 or muaFraction2 or muaFraction3 or muaFraction4 or muaFraction5)  
+   case(layer_pipe) 
+       1: fractionScaled=muaFraction1; 
+       2: fractionScaled=muaFraction2; 
+       3: fractionScaled=muaFraction3; 
+       4: fractionScaled=muaFraction4; 
+       5: fractionScaled=muaFraction5; 
+       default: fractionScaled=0; //Sys Reset case
+   endcase
+
+
+always @(reset or weight__4 or r_P_wire or weight_P4 or fractionScaled or product64bit or dead__4 or hit__4) begin
+	if (reset) begin
+	   weight_P4=0; 
+		r_P=0;  
+      product64bit=0; 
+      dwa_temp=0; 
+   end
+	else begin
+	   weight_P4=weight__4;    
+		r_P=r_P_wire;  //Connect to sqrt block
+      product64bit=weight_P4*fractionScaled; 
+  
+      //Checking corner cases
+      if (dead__4==1)       //Dead photon
+         dwa_temp=weight_P4;//drop all its weight
+      else if (hit__4==1)   //Hit Boundary 
+         dwa_temp=0;        //Don't add to absorption array
+      else
+         dwa_temp=product64bit[63:32]; 	  
+	end	
+end
+
+assign r2_P_wire=r2_P; 
+
+Sqrt_64b	squareRoot (
+				.clk(clock),
+				.num_(r2_P_wire),
+				.res(r_P_wire)
+			);
+			
+///////////////STAGE 14 - Find ir and iz/////////////////////////
+always @(reset or r_P or z_pipe or dead__14 or hit__14 or iz_temp or ir_temp) begin
+	if (reset) begin
+		ir_temp=0; 
+		iz_temp=0;
+	end	
+
+	//Checking corner cases!!!
+	else begin
+		//ir_temp=r_P>>`RGRID_SCLAE_EXP; 
+		//iz_temp=z_pipe>>`ZGRID_SCLAE_EXP;
+		if (dead__14==1) begin 
+			ir_temp=`NR-1;    
+			iz_temp=`NZ-1; 
+		end
+		else if (hit__14==1) begin 
+			ir_temp=0;
+			iz_temp=0; 
+		end 
+		else begin
+			if ((z_pipe>>`ZGRID_SCLAE_EXP) >=`NZ ) begin
+				iz_temp=`NZ-1;
+			end 
+			else begin
+				iz_temp=z_pipe>>`ZGRID_SCLAE_EXP;
+			end
+			
+			if ((r_P>>`RGRID_SCLAE_EXP) >= `NR ) begin
+				ir_temp=`NR-1;
+			end
+			else begin
+				ir_temp=r_P>>`RGRID_SCLAE_EXP; 
+			end
+		end
+
+//		if (iz_temp>=`NZ) begin
+//			iz_temp=`NZ-1;   
+//		end
+//
+//  
+//		if (ir_temp>=`NR) begin
+//			ir_temp=`NR-1; 
+//		end
+
+         
+	end
+end
+
+///////////////STAGE 15 - Compute MEM address/////////////////////////
+always @(reset or ir__15 or iz__15 or ir_P or iz_P or ir_scaled) begin
+	if (reset) begin
+	   ir_P=0; 
+	   iz_P=0; 
+	   ir_scaled=0; 
+      rADDR_temp=0; 
+   end
+	else begin
+	   ir_P=ir__15; 
+	   iz_P=iz__15; 
+	   ir_scaled=ir_P<<`NR_EXP;  
+      rADDR_temp=ir_scaled[15:0] + iz_P[15:0]; 		
+   end
+end
+
+///////////////STAGE 16 - MEM read/////////////////////////
+always @(reset or ir__16 or ir__17 or iz__16 or iz__17 or ir__18 or iz__18 or newAbs_P or q or newAbs_temp) begin
+	if (reset) begin
+		oldAbs_MEM=0; 
+	end else begin
+	   //Check Corner cases (RAW hazards) 
+      if ((ir__16==ir__17) && (iz__16==iz__17)) begin
+         oldAbs_MEM=newAbs_temp; 
+      end else if ((ir__16==ir__18) && (iz__16==iz__18)) begin   
+         oldAbs_MEM=newAbs_P;       //RAW hazard
+      end else begin
+         oldAbs_MEM=q;   //Connect to REAL dual-port MEM 
+		end
+	end
+	
+end
+
+///////////////STAGE 17 - Update Weight/////////////////////////
+//TO BE TESTED!!!
+always @(reset or dwa__17 or weight__17 or weight_P or dwa_P or oldAbs_P) begin
+	if(reset) begin
+	   dwa_P=0;   //How to specify Base 10??? 
+		weight_P=0; 
+		newWeight = 0;
+		newAbs_temp =0; 
+   end
+	else begin
+	   dwa_P=dwa__17;
+	   weight_P=weight__17; 
+		newWeight=weight_P-dwa_P; 
+		newAbs_temp=oldAbs_P+dwa_P;   //Check bit width casting (64-bit<--64-bit+32-bit)
+   end 
+end    
+		
+//////////////////////////////////////////////////////////////////////////////
+//STAGE BY STAGE - EXTRA REGISTERS
+//////////////////////////////////////////////////////////////////////////////   
+always @ (posedge clock) 
+begin
+	if (reset) begin	    
+	  //Stage 2
+	  x2_P<=0;         
+	  y2_P<=0;
+	  
+	  //Stage 3
+	  r2_P<=0;	  
+	  
+	  //Stage 15
+     rADDR_16<=0; 
+
+	  //Stage 16 
+	  oldAbs_P<=0; 
+	  rADDR_17<=0; 
+	  
+	  //Stage 17
+	  newAbs_P<=0; 
+	 // wADDR <=0; 
+	end
+	
+	else if (enable) begin	    
+	  //Stage 2
+	  x2_P<=x2_temp;    //From comb logic above
+	  y2_P<=y2_temp;    
+      
+ 	  //Stage 3
+ 	  r2_P<=r2_temp;   
+
+	  //Stage 15
+     rADDR_16<=rADDR_temp; 
+     
+     //Stage 16 
+	  oldAbs_P<=oldAbs_MEM; 
+	  rADDR_17<=rADDR_16; 
+	  	     
+     //Stage 17
+     newAbs_P<=newAbs_temp; 
+   //  wADDR <=rADDR_17; 
+	end
+end
+
+//////////////////////////////////////////////////////////////////////////////
+//INTERFACE to on-chip MEM
+//////////////////////////////////////////////////////////////////////////////   
+always @ (posedge clock) 
+begin
+	if (reset) 
+		  wren <=0; 
+	else
+		  wren<=1;          //Memory enabled every cycle after global enable 
+end	
+	    
+assign rdaddress=rADDR_temp; 
+assign wraddress=rADDR_17; 
+
+assign data=newAbs_temp; 
+
+endmodule
+
+
+//Photons that make up the register pipeline
+module PhotonBlock1(
+	//Inputs
+	clock,
+	reset,
+	enable,
+	
+   i_x, 
+   i_y, 
+   i_z, 
+
+	//Outputs
+	o_x,
+	o_y,
+	o_z
+	);
+
+//////////////////////////////////////////////////////////////////////////////
+//PARAMETERS
+//////////////////////////////////////////////////////////////////////////////
+//parameter BIT_WIDTH=32;
+
+input				clock;
+input				reset;
+input				enable;
+
+input	[`BIT_WIDTH-1:0]			i_x;
+input	[`BIT_WIDTH-1:0]			i_y;
+input	[`BIT_WIDTH-1:0]			i_z;
+
+
+output	[`BIT_WIDTH-1:0]			o_x;
+output	[`BIT_WIDTH-1:0]			o_y;
+output	[`BIT_WIDTH-1:0]			o_z;
+
+wire				clock;
+wire				reset;
+wire				enable;
+
+wire	[`BIT_WIDTH-1:0]			i_x;
+wire	[`BIT_WIDTH-1:0]			i_y;
+wire	[`BIT_WIDTH-1:0]			i_z;
+
+reg	[`BIT_WIDTH-1:0]			o_x;
+reg	[`BIT_WIDTH-1:0]			o_y;
+reg	[`BIT_WIDTH-1:0]			o_z;
+
+always @ (posedge clock)
+	if(reset) begin
+		o_x		<=	{`BIT_WIDTH{1'b0}} ;
+		o_y		<=	{`BIT_WIDTH{1'b0}};
+		o_z		<=	{`BIT_WIDTH{1'b0}};
+	end else if(enable) begin
+		o_x		<=	i_x;
+		o_y		<=	i_y;
+		o_z		<=	i_z;
+	end
+endmodule
+
+
+//Photons that make up the register pipeline
+module PhotonBlock2(
+	//Inputs
+	clock,
+	reset,
+	enable,
+	
+   i_x, 
+   i_y, 
+   i_z, 
+
+	//Outputs
+	o_x,
+	o_y,
+	o_z
+	);
+
+//////////////////////////////////////////////////////////////////////////////
+//PARAMETERS
+//////////////////////////////////////////////////////////////////////////////
+//parameter BIT_WIDTH=32;
+
+input				clock;
+input				reset;
+input				enable;
+
+input	[`BIT_WIDTH-1:0]			i_x;
+input	i_y;
+input	i_z;
+
+
+output	[`BIT_WIDTH-1:0]			o_x;
+output	o_y;
+output	o_z;
+
+wire				clock;
+wire				reset;
+wire				enable;
+
+wire	[`BIT_WIDTH-1:0]			i_x;
+wire	i_y;
+wire	i_z;
+
+reg	[`BIT_WIDTH-1:0]			o_x;
+reg	o_y;
+reg	o_z;
+
+always @ (posedge clock)
+	if(reset) begin
+		o_x		<=	{`BIT_WIDTH{1'b0}} ;
+		o_y		<=	1'b0;
+		o_z		<=	1'b0;
+	end else if(enable) begin
+		o_x		<=	i_x;
+		o_y		<=	i_y;
+		o_z		<=	i_z;
+	end
+endmodule
+
+
+
+
+
+
+
+
+module ScattererReflectorWrapper (
+	//Inputs
+	clock,
+	reset,
+	enable,
+	//MEMORY WRAPPER
+
+		//Inputs
+		
+		//Photon values
+		i_uz1_pipeWrapper,
+		i_hit2_pipeWrapper,
+		i_ux3_pipeWrapper,
+		i_uz3_pipeWrapper,
+		i_layer3_pipeWrapper,
+		i_hit4_pipeWrapper,
+		i_hit6_pipeWrapper,
+		i_hit16_pipeWrapper,
+		i_layer31_pipeWrapper,
+		i_uy32_pipeWrapper,
+		i_uz32_pipeWrapper,
+		i_hit33_pipeWrapper,
+		i_ux33_pipeWrapper,
+		i_uy33_pipeWrapper,
+		i_hit34_pipeWrapper,
+		i_ux35_pipeWrapper,
+		i_uy35_pipeWrapper,
+		i_uz35_pipeWrapper,
+		i_layer35_pipeWrapper,
+		i_hit36_pipeWrapper,
+		i_ux36_pipeWrapper,
+		i_uy36_pipeWrapper,
+		i_uz36_pipeWrapper,
+		i_layer36_pipeWrapper,
+		i_dead36_pipeWrapper,
+
+
+		//Memory Interface
+			//Inputs
+		rand2,
+		rand3,
+		rand5,
+		sint,
+		cost,
+		up_rFresnel,
+		down_rFresnel,
+			//Outputs
+		tindex,
+		fresIndex,
+		
+		//Constants
+		down_niOverNt_1,
+		down_niOverNt_2,
+		down_niOverNt_3,
+		down_niOverNt_4,
+		down_niOverNt_5,
+		up_niOverNt_1,
+		up_niOverNt_2,
+		up_niOverNt_3,
+		up_niOverNt_4,
+		up_niOverNt_5,
+		down_niOverNt_2_1,
+		down_niOverNt_2_2,
+		down_niOverNt_2_3,
+		down_niOverNt_2_4,
+		down_niOverNt_2_5,
+		up_niOverNt_2_1,
+		up_niOverNt_2_2,
+		up_niOverNt_2_3,
+		up_niOverNt_2_4,
+		up_niOverNt_2_5,
+		downCritAngle_0,
+		downCritAngle_1,
+		downCritAngle_2,
+		downCritAngle_3,
+		downCritAngle_4,
+		upCritAngle_0,
+		upCritAngle_1,
+		upCritAngle_2,
+		upCritAngle_3,
+		upCritAngle_4,
+		
+		//Outputs
+		ux_scatterer,
+		uy_scatterer,
+		uz_scatterer,
+		
+		ux_reflector,
+		uy_reflector,
+		uz_reflector,
+		layer_reflector,
+		dead_reflector
+	);
+	
+//-------------------PARAMETER DEFINITION----------------------
+//
+//
+//
+//
+//
+//
+//Assign values to parameters used later in the program.
+	
+//parameter INTMAX_2 = 64'h3FFFFFFF00000001;
+//The above parameter is never used in the ScattererReflectorWrapper module itself
+	
+	
+//-----------------------------PIN DECLARATION----------------------
+//
+//
+//
+//
+//
+//
+//
+//
+//Assign appropriate types to pins (input or output).
+
+
+input				clock;
+input				reset;
+input				enable;
+input	[2:0]			i_layer31_pipeWrapper;
+
+
+
+input	[31:0]			i_uz1_pipeWrapper;
+input				i_hit2_pipeWrapper;
+input	[31:0]			i_ux3_pipeWrapper;
+input	[31:0]			i_uz3_pipeWrapper;
+input	[2:0]			i_layer3_pipeWrapper;
+input				i_hit4_pipeWrapper;
+input				i_hit6_pipeWrapper;
+input				i_hit16_pipeWrapper;
+input	[31:0]			i_uy32_pipeWrapper;
+input	[31:0]			i_uz32_pipeWrapper;
+input				i_hit33_pipeWrapper;
+input	[31:0]			i_ux33_pipeWrapper;
+input	[31:0]			i_uy33_pipeWrapper;
+input				i_hit34_pipeWrapper;
+input	[31:0]			i_ux35_pipeWrapper;
+input	[31:0]			i_uy35_pipeWrapper;
+input	[31:0]			i_uz35_pipeWrapper;
+input	[2:0]			i_layer35_pipeWrapper;
+input				i_hit36_pipeWrapper;
+input	[31:0]			i_ux36_pipeWrapper;
+input	[31:0]			i_uy36_pipeWrapper;
+input	[31:0]			i_uz36_pipeWrapper;
+input	[2:0]			i_layer36_pipeWrapper;
+input				i_dead36_pipeWrapper;
+
+
+//Memory Interface
+input	[31:0]			rand2;
+input	[31:0]			rand3;
+input	[31:0]			rand5;
+input	[31:0]			sint;
+input	[31:0]			cost;
+input	[31:0]			up_rFresnel;
+input	[31:0]			down_rFresnel;
+
+output	[12:0]			tindex;
+output	[9:0]			fresIndex;
+
+
+//Constants
+input	[31:0]			down_niOverNt_1;
+input	[31:0]			down_niOverNt_2;
+input	[31:0]			down_niOverNt_3;
+input	[31:0]			down_niOverNt_4;
+input	[31:0]			down_niOverNt_5;
+input	[31:0]			up_niOverNt_1;
+input	[31:0]			up_niOverNt_2;
+input	[31:0]			up_niOverNt_3;
+input	[31:0]			up_niOverNt_4;
+input	[31:0]			up_niOverNt_5;
+input	[63:0]			down_niOverNt_2_1;
+input	[63:0]			down_niOverNt_2_2;
+input	[63:0]			down_niOverNt_2_3;
+input	[63:0]			down_niOverNt_2_4;
+input	[63:0]			down_niOverNt_2_5;
+input	[63:0]			up_niOverNt_2_1;
+input	[63:0]			up_niOverNt_2_2;
+input	[63:0]			up_niOverNt_2_3;
+input	[63:0]			up_niOverNt_2_4;
+input	[63:0]			up_niOverNt_2_5;
+input	[31:0]			downCritAngle_0;
+input	[31:0]			downCritAngle_1;
+input	[31:0]			downCritAngle_2;
+input	[31:0]			downCritAngle_3;
+input	[31:0]			downCritAngle_4;
+input	[31:0]			upCritAngle_0;
+input	[31:0]			upCritAngle_1;
+input	[31:0]			upCritAngle_2;
+input	[31:0]			upCritAngle_3;
+input	[31:0]			upCritAngle_4;
+
+
+output	[31:0]			ux_scatterer;
+output	[31:0]			uy_scatterer;
+output	[31:0]			uz_scatterer;
+output	[31:0]			ux_reflector;
+output	[31:0]			uy_reflector;
+output	[31:0]			uz_reflector;
+output	[2:0]			layer_reflector;
+output				dead_reflector;
+
+
+
+
+//-----------------------------PIN TYPES-----------------------------
+//
+//
+//
+//
+//
+//
+//
+//
+//Assign pins to be wires or regs.
+wire				clock;
+wire				reset;
+wire				enable;
+
+wire	[2:0]			i_layer31_pipeWrapper;
+
+wire	[31:0]			i_uz1_pipeWrapper;
+wire				i_hit2_pipeWrapper;
+wire	[31:0]			i_ux3_pipeWrapper;
+wire	[31:0]			i_uz3_pipeWrapper;
+wire	[2:0]			i_layer3_pipeWrapper;
+wire				i_hit4_pipeWrapper;
+wire				i_hit6_pipeWrapper;
+wire				i_hit16_pipeWrapper;
+wire	[31:0]			i_uy32_pipeWrapper;
+wire	[31:0]			i_uz32_pipeWrapper;
+wire				i_hit33_pipeWrapper;
+wire	[31:0]			i_ux33_pipeWrapper;
+wire	[31:0]			i_uy33_pipeWrapper;
+wire				i_hit34_pipeWrapper;
+wire	[31:0]			i_ux35_pipeWrapper;
+wire	[31:0]			i_uy35_pipeWrapper;
+wire	[31:0]			i_uz35_pipeWrapper;
+wire	[2:0]			i_layer35_pipeWrapper;
+wire				i_hit36_pipeWrapper;
+wire	[31:0]			i_ux36_pipeWrapper;
+wire	[31:0]			i_uy36_pipeWrapper;
+wire	[31:0]			i_uz36_pipeWrapper;
+wire	[2:0]			i_layer36_pipeWrapper;
+wire				i_dead36_pipeWrapper;
+
+wire	[9:0]			pindex;
+wire	[12:0]			tindex;
+wire	[31:0]			rand2;
+wire	[31:0]			rand3;
+wire	[31:0]			rand5;
+
+
+//Constants
+wire	[31:0]			down_niOverNt_1;
+wire	[31:0]			down_niOverNt_2;
+wire	[31:0]			down_niOverNt_3;
+wire	[31:0]			down_niOverNt_4;
+wire	[31:0]			down_niOverNt_5;
+wire	[31:0]			up_niOverNt_1;
+wire	[31:0]			up_niOverNt_2;
+wire	[31:0]			up_niOverNt_3;
+wire	[31:0]			up_niOverNt_4;
+wire	[31:0]			up_niOverNt_5;
+wire	[63:0]			down_niOverNt_2_1;
+wire	[63:0]			down_niOverNt_2_2;
+wire	[63:0]			down_niOverNt_2_3;
+wire	[63:0]			down_niOverNt_2_4;
+wire	[63:0]			down_niOverNt_2_5;
+wire	[63:0]			up_niOverNt_2_1;
+wire	[63:0]			up_niOverNt_2_2;
+wire	[63:0]			up_niOverNt_2_3;
+wire	[63:0]			up_niOverNt_2_4;
+wire	[63:0]			up_niOverNt_2_5;
+wire	[31:0]			downCritAngle_0;
+wire	[31:0]			downCritAngle_1;
+wire	[31:0]			downCritAngle_2;
+wire	[31:0]			downCritAngle_3;
+wire	[31:0]			downCritAngle_4;
+wire	[31:0]			upCritAngle_0;
+wire	[31:0]			upCritAngle_1;
+wire	[31:0]			upCritAngle_2;
+wire	[31:0]			upCritAngle_3;
+wire	[31:0]			upCritAngle_4;
+
+//Scatterer, final calculated values
+wire	[31:0]			ux_scatterer;
+wire	[31:0]			uy_scatterer;
+wire	[31:0]			uz_scatterer;
+wire	[31:0]			ux_reflector;
+wire	[31:0]			uy_reflector;
+wire	[31:0]			uz_reflector;
+wire	[2:0]			layer_reflector;
+wire				dead_reflector;
+
+
+//Mathematics results signals
+wire	[63:0]			prod1_2;
+wire	[63:0]			prod1_4;
+wire	[31:0]			sqrtResult1_6;
+//wire	[32:0]			sqrtRemainder; //not necessary, not used except as dummy var in sqrt.
+wire	[63:0]			prod1_33;
+wire	[63:0]			prod2_33;
+wire	[63:0]			prod3_33;
+wire	[63:0]			prod1_34;
+wire	[63:0]			prod2_34;
+wire	[63:0]			prod3_34;
+wire	[63:0]			prod4_34;
+wire	[63:0]			quot1_16;
+wire	[31:0]			divRemainder;
+wire	[63:0]			prod1_36;
+wire	[63:0]			prod2_36;
+wire	[63:0]			prod3_36;
+wire	[63:0]			prod4_36;
+wire	[63:0]			prod5_36;
+wire	[63:0]			prod6_36;
+
+//Scatterer Operands
+wire	[31:0]			op1_2_1_scatterer;
+wire	[31:0]			op1_2_2_scatterer;
+wire	[31:0]			op1_4_1_scatterer;
+wire	[31:0]			op1_4_2_scatterer;
+wire	[63:0]			sqrtOperand1_6_scatterer;
+wire	[63:0]			divNumerator1_16_scatterer;
+wire	[31:0]			divDenominator1_16_scatterer;
+wire	[31:0]			op1_33_1_scatterer;
+wire	[31:0]			op1_33_2_scatterer;
+wire	[31:0]			op2_33_1_scatterer;
+wire	[31:0]			op2_33_2_scatterer;
+wire	[31:0]			op3_33_1_scatterer;
+wire	[31:0]			op3_33_2_scatterer;
+wire	[31:0]			op1_34_1_scatterer;
+wire	[31:0]			op1_34_2_scatterer;
+wire	[31:0]			op2_34_1_scatterer;
+wire	[31:0]			op2_34_2_scatterer;
+wire	[31:0]			op3_34_1_scatterer;
+wire	[31:0]			op3_34_2_scatterer;
+wire	[31:0]			op4_34_1_scatterer;
+wire	[31:0]			op4_34_2_scatterer;
+wire	[31:0]			op1_36_1_scatterer;
+wire	[31:0]			op1_36_2_scatterer;
+wire	[31:0]			op2_36_1_scatterer;
+wire	[31:0]			op2_36_2_scatterer;
+wire	[31:0]			op3_36_1_scatterer;
+wire	[31:0]			op3_36_2_scatterer;
+wire	[31:0]			op4_36_1_scatterer;
+wire	[31:0]			op4_36_2_scatterer;
+wire	[31:0]			op5_36_1_scatterer;
+wire	[31:0]			op5_36_2_scatterer;
+wire	[31:0]			op6_36_1_scatterer;
+wire	[31:0]			op6_36_2_scatterer;
+
+
+//Reflector Operands
+wire	[31:0]			op1_2_1_reflector;
+wire	[31:0]			op1_2_2_reflector;
+wire	[31:0]			op1_4_1_reflector;
+wire	[31:0]			op1_4_2_reflector;
+wire	[63:0]			sqrtOperand1_6_reflector;
+wire	[31:0]			op1_36_1_reflector;
+wire	[31:0]			op1_36_2_reflector;
+wire	[31:0]			op2_36_1_reflector;
+wire	[31:0]			op2_36_2_reflector;
+
+
+
+
+//Operands entering the multipliers, divider, and sqrt
+wire	[31:0]			op1_2_1;
+wire	[31:0]			op1_2_2;
+wire	[31:0]			op1_4_1;
+wire	[31:0]			op1_4_2;
+wire	[63:0]			sqrtOperand1_6;
+wire	[63:0]			divNumerator1_16;
+wire	[31:0]			divDenominator1_16;
+wire	[31:0]			op1_33_1;
+wire	[31:0]			op1_33_2;
+wire	[31:0]			op2_33_1;
+wire	[31:0]			op2_33_2;
+wire	[31:0]			op3_33_1;
+wire	[31:0]			op3_33_2;
+wire	[31:0]			op1_34_1;
+wire	[31:0]			op1_34_2;
+wire	[31:0]			op2_34_1;
+wire	[31:0]			op2_34_2;
+wire	[31:0]			op3_34_1;
+wire	[31:0]			op3_34_2;
+wire	[31:0]			op4_34_1;
+wire	[31:0]			op4_34_2;
+wire	[31:0]			op1_36_1;
+wire	[31:0]			op1_36_2;
+wire	[31:0]			op2_36_1;
+wire	[31:0]			op2_36_2;
+wire	[31:0]			op3_36_1;
+wire	[31:0]			op3_36_2;
+wire	[31:0]			op4_36_1;
+wire	[31:0]			op4_36_2;
+wire	[31:0]			op5_36_1;
+wire	[31:0]			op5_36_2;
+wire	[31:0]			op6_36_1;
+wire	[31:0]			op6_36_2;
+
+
+reg	[2:0]			layerMinusOne;
+
+wire	[31:0]			sint;
+wire	[31:0]			cost;
+wire	[31:0]			sinp;
+wire	[31:0]			cosp;
+
+wire	[31:0]			up_rFresnel;
+wire	[31:0]			down_rFresnel;
+wire	[9:0]			fresIndex;
+
+
+
+//Need this to deal with 'unused' inputs for ODIN II
+wire bigOr;
+assign bigOr = i_hit16_pipeWrapper|i_hit33_pipeWrapper|i_hit34_pipeWrapper|
+					rand2[31]|rand2[30]|rand2[29]|rand2[28]|rand2[27]|rand2[26]|
+					rand2[25]|rand2[24]|rand2[23]|rand2[22]|rand2[21]|rand2[20]|
+					rand2[19]|rand2[18]|rand2[17]|rand2[16]|rand2[15]|rand2[14]|
+					rand2[13]|rand2[12]|rand2[11]|rand2[10]|
+					rand3[31]|rand3[30]|rand3[29]|rand3[28]|rand3[27]|rand3[26]|
+					rand3[25]|rand3[24]|rand3[23]|rand3[22]|rand3[21]|rand3[20]|
+					rand3[19]|rand3[18]|rand3[17]|rand3[16]|rand3[15]|rand3[14]|
+					rand3[13]|rand3[12]|rand3[11]|rand3[10]|
+					rand5[31]|(1'b1);
+wire reset_new;
+assign reset_new = reset & bigOr;
+
+
+//MUX for sending in indices for memory.
+always @ (i_layer31_pipeWrapper) begin
+	case (i_layer31_pipeWrapper)
+		3'b001: layerMinusOne = 0;
+		3'b010: layerMinusOne = 1;
+		3'b011: layerMinusOne = 2;
+		3'b100: layerMinusOne = 3;
+		3'b101: layerMinusOne = 4;
+		default: layerMinusOne = 0;
+	endcase
+end
+
+assign tindex = {layerMinusOne, rand2[9:0]};
+assign pindex = rand3[9:0];
+
+
+//Arbitrarily decide on values of sine and cosine for now, should be memory lookups
+Memory_Wrapper	memories(
+					//INPUTS
+					.clock(clock),
+					//.reset(reset), //Unused. ODIN II complained.
+					.pindex(pindex),
+					//OUTPUTS
+					.sinp(sinp),
+					.cosp(cosp)
+				);
+
+
+Scatterer scatterer_0 (
+			.clock(clock),
+			.reset(reset_new), //so pins are used
+			.enable(enable),
+			//Photon values
+			.i_uz1(i_uz1_pipeWrapper),
+			.i_ux3(i_ux3_pipeWrapper),
+			.i_uz3(i_uz3_pipeWrapper),
+			.i_uy32(i_uy32_pipeWrapper),
+			.i_uz32(i_uz32_pipeWrapper),
+			.i_ux33(i_ux33_pipeWrapper),
+			.i_uy33(i_uy33_pipeWrapper),
+			.i_ux35(i_ux35_pipeWrapper),
+			.i_uy35(i_uy35_pipeWrapper),
+			.i_uz35(i_uz35_pipeWrapper),
+			.i_uz36(i_uz36_pipeWrapper),
+			//Mathematics Results
+			.prod1_2(prod1_2),
+			.prod1_4({prod1_4[63:63], prod1_4[61:31]}),
+			.sqrtResult1_6(sqrtResult1_6),
+			.prod1_33({prod1_33[63:63], prod1_33[61:31]}),
+			.prod2_33({prod2_33[63:63], prod2_33[61:31]}),
+			.prod3_33({prod3_33[63:63], prod3_33[61:31]}),
+			.prod1_34({prod1_34[63:63], prod1_34[61:31]}),
+			.prod2_34({prod2_34[63:63], prod2_34[61:31]}),
+			.prod3_34({prod3_34[63:63], prod3_34[61:31]}),
+			.prod4_34({prod4_34[63:63], prod4_34[61:31]}),
+			.quot1_16(quot1_16[63:0]),
+			.prod1_36(prod1_36[63:0]),
+			.prod2_36(prod2_36[63:0]),
+			.prod3_36({prod3_36[63:63], prod3_36[61:31]}),
+			.prod4_36({prod4_36[63:63], prod4_36[61:31]}),
+			.prod5_36({prod5_36[63:63], prod5_36[61:31]}),
+			.prod6_36({prod6_36[63:63], prod6_36[61:31]}),
+			//Trig from Memory
+			.sint_Mem(sint),
+			.cost_Mem(cost),
+			.sinp_Mem(sinp),
+			.cosp_Mem(cosp),
+			//Operands for mathematics
+			.op1_2_1(op1_2_1_scatterer),
+			.op1_2_2(op1_2_2_scatterer),
+			.op1_4_1(op1_4_1_scatterer),
+			.op1_4_2(op1_4_2_scatterer),
+			.sqrtOperand1_6(sqrtOperand1_6_scatterer),
+			.divNumerator1_16(divNumerator1_16_scatterer),
+			.divDenominator1_16(divDenominator1_16_scatterer),
+			.op1_33_1(op1_33_1_scatterer),
+			.op1_33_2(op1_33_2_scatterer),
+			.op2_33_1(op2_33_1_scatterer),
+			.op2_33_2(op2_33_2_scatterer),
+			.op3_33_1(op3_33_1_scatterer),
+			.op3_33_2(op3_33_2_scatterer),
+			.op1_34_1(op1_34_1_scatterer),
+			.op1_34_2(op1_34_2_scatterer),
+			.op2_34_1(op2_34_1_scatterer),
+			.op2_34_2(op2_34_2_scatterer),
+			.op3_34_1(op3_34_1_scatterer),
+			.op3_34_2(op3_34_2_scatterer),
+			.op4_34_1(op4_34_1_scatterer),
+			.op4_34_2(op4_34_2_scatterer),
+			.op1_36_1(op1_36_1_scatterer),
+			.op1_36_2(op1_36_2_scatterer),
+			.op2_36_1(op2_36_1_scatterer),
+			.op2_36_2(op2_36_2_scatterer),
+			.op3_36_1(op3_36_1_scatterer),
+			.op3_36_2(op3_36_2_scatterer),
+			.op4_36_1(op4_36_1_scatterer),
+			.op4_36_2(op4_36_2_scatterer),
+			.op5_36_1(op5_36_1_scatterer),
+			.op5_36_2(op5_36_2_scatterer),
+			.op6_36_1(op6_36_1_scatterer),
+			.op6_36_2(op6_36_2_scatterer),
+			
+			//Final calculated values
+			.ux_scatterer(ux_scatterer),
+			.uy_scatterer(uy_scatterer),
+			.uz_scatterer(uz_scatterer)
+
+		);
+		
+Reflector reflector_0 (
+
+			//INPUTS
+			.clock(clock),
+			.reset(reset),
+			.enable(enable),
+			//Photon values
+			.i_uz1(i_uz1_pipeWrapper),
+			.i_uz3(i_uz3_pipeWrapper),
+			.i_layer3(i_layer3_pipeWrapper),
+			.i_ux35(i_ux35_pipeWrapper),
+			.i_uy35(i_uy35_pipeWrapper),
+			.i_uz35(i_uz35_pipeWrapper),
+			.i_layer35(i_layer35_pipeWrapper),
+			.i_ux36(i_ux36_pipeWrapper),
+			.i_uy36(i_uy36_pipeWrapper),
+			.i_uz36(i_uz36_pipeWrapper),
+			.i_layer36(i_layer36_pipeWrapper),
+			.i_dead36(i_dead36_pipeWrapper),
+
+			//Constants
+			.down_niOverNt_1(down_niOverNt_1),
+			.down_niOverNt_2(down_niOverNt_2),
+			.down_niOverNt_3(down_niOverNt_3),
+			.down_niOverNt_4(down_niOverNt_4),
+			.down_niOverNt_5(down_niOverNt_5),
+			.up_niOverNt_1(up_niOverNt_1),
+			.up_niOverNt_2(up_niOverNt_2),
+			.up_niOverNt_3(up_niOverNt_3),
+			.up_niOverNt_4(up_niOverNt_4),
+			.up_niOverNt_5(up_niOverNt_5),
+			.down_niOverNt_2_1(down_niOverNt_2_1),
+			.down_niOverNt_2_2(down_niOverNt_2_2),
+			.down_niOverNt_2_3(down_niOverNt_2_3),
+			.down_niOverNt_2_4(down_niOverNt_2_4),
+			.down_niOverNt_2_5(down_niOverNt_2_5),
+			.up_niOverNt_2_1(up_niOverNt_2_1),
+			.up_niOverNt_2_2(up_niOverNt_2_2),
+			.up_niOverNt_2_3(up_niOverNt_2_3),
+			.up_niOverNt_2_4(up_niOverNt_2_4),
+			.up_niOverNt_2_5(up_niOverNt_2_5),
+			.downCritAngle_0(downCritAngle_0),
+			.downCritAngle_1(downCritAngle_1),
+			.downCritAngle_2(downCritAngle_2),
+			.downCritAngle_3(downCritAngle_3),
+			.downCritAngle_4(downCritAngle_4),
+			.upCritAngle_0(upCritAngle_0),
+			.upCritAngle_1(upCritAngle_1),
+			.upCritAngle_2(upCritAngle_2),
+			.upCritAngle_3(upCritAngle_3),
+			.upCritAngle_4(upCritAngle_4),
+
+			//Fresnels inputs
+			.rnd({1'b0, rand5[30:0]}),
+			.up_rFresnel(up_rFresnel),
+			.down_rFresnel(down_rFresnel),
+
+			//Mathematics Results
+			.prod1_2(prod1_2),
+			.prod1_4(prod1_4),
+			.sqrtResult1_6(sqrtResult1_6),
+			.prod1_36(prod1_36),
+			.prod2_36(prod2_36),
+
+			//OUTPUTS
+
+			//Fresnels outputs
+			.fresIndex(fresIndex),
+
+			//Mathematics Operands
+			.op1_2_1(op1_2_1_reflector),
+			.op1_2_2(op1_2_2_reflector),
+			.op1_4_1(op1_4_1_reflector),
+			.op1_4_2(op1_4_2_reflector),
+			.sqrtOperand1_6(sqrtOperand1_6_reflector),
+			.op1_36_1(op1_36_1_reflector),
+			.op1_36_2(op1_36_2_reflector),
+			.op2_36_1(op2_36_1_reflector),
+			.op2_36_2(op2_36_2_reflector),
+
+
+			//Final Calculated Results
+			.ux_reflector(ux_reflector),
+			.uy_reflector(uy_reflector),
+			.uz_reflector(uz_reflector),
+			.layer_reflector(layer_reflector),
+			.dead_reflector(dead_reflector)
+
+);
+		
+
+
+
+	
+//Multipliers, Dividers, and Sqrts for Scatterer & Reflector
+
+assign op1_2_1 = (i_hit2_pipeWrapper == 1'b1) ? op1_2_1_reflector		:		op1_2_1_scatterer;
+assign op1_2_2 = (i_hit2_pipeWrapper == 1'b1) ? op1_2_2_reflector		:		op1_2_2_scatterer;
+
+Mult_32b	multiplier1_2 (
+				.dataa(op1_2_1),
+				.datab(op1_2_2),
+				.result(prod1_2)
+			);
+			
+assign op1_4_1 = (i_hit4_pipeWrapper == 1'b1) ? op1_4_1_reflector		:		op1_4_1_scatterer;
+assign op1_4_2 = (i_hit4_pipeWrapper == 1'b1) ? op1_4_2_reflector		:		op1_4_2_scatterer;
+
+Mult_32b	multiplier1_4 (
+				.dataa(op1_4_1),
+				.datab(op1_4_2),
+				.result(prod1_4)
+			);
+			
+
+
+Mult_32b	multiplier1_33 (
+				.dataa(op1_33_1_scatterer),
+				.datab(op1_33_2_scatterer),
+				.result(prod1_33)
+			);
+
+Mult_32b	multiplier2_33 (
+				.dataa(op2_33_1_scatterer),
+				.datab(op2_33_2_scatterer),
+				.result(prod2_33)
+			);
+
+Mult_32b	multiplier3_33 (
+				.dataa(op3_33_1_scatterer),
+				.datab(op3_33_2_scatterer),
+				.result(prod3_33)
+			);
+
+
+Mult_32b	multiplier1_34 (
+				.dataa(op1_34_1_scatterer),
+				.datab(op1_34_2_scatterer),
+				.result(prod1_34)
+			);
+
+
+Mult_32b	multiplier2_34 (
+				.dataa(op2_34_1_scatterer),
+				.datab(op2_34_2_scatterer),
+				.result(prod2_34)
+			);
+
+
+Mult_32b	multiplier3_34 (
+				.dataa(op3_34_1_scatterer),
+				.datab(op3_34_2_scatterer),
+				.result(prod3_34)
+			);
+
+Mult_32b	multiplier4_34 (
+				.dataa(op4_34_1_scatterer),
+				.datab(op4_34_2_scatterer),
+				.result(prod4_34)
+			);
+
+assign op1_36_1 = (i_hit36_pipeWrapper == 1'b1) ? op1_36_1_reflector	:		op1_36_1_scatterer;
+assign op1_36_2 = (i_hit36_pipeWrapper == 1'b1) ? op1_36_2_reflector	:		op1_36_2_scatterer;
+
+Mult_32b	multiplier1_36 (
+				.dataa(op1_36_1),
+				.datab(op1_36_2),
+				.result(prod1_36)
+			);
+
+assign op2_36_1 = (i_hit36_pipeWrapper == 1'b1) ? op2_36_1_reflector	:		op2_36_1_scatterer;
+assign op2_36_2 = (i_hit36_pipeWrapper == 1'b1) ? op2_36_2_reflector	:		op2_36_2_scatterer;
+
+Mult_32b	multiplier2_36 (
+				.dataa(op2_36_1),
+				.datab(op2_36_2),
+				.result(prod2_36)
+			);
+			
+Mult_32b	multiplier3_36 (
+				.dataa(op3_36_1_scatterer),
+				.datab(op3_36_2_scatterer),
+				.result(prod3_36)
+			);
+
+
+Mult_32b	multiplier4_36 (
+				.dataa(op4_36_1_scatterer),
+				.datab(op4_36_2_scatterer),
+				.result(prod4_36)
+			);
+			
+
+Mult_32b	multiplier5_36 (
+				.dataa(op5_36_1_scatterer),
+				.datab(op5_36_2_scatterer),
+				.result(prod5_36)
+			);
+
+
+Mult_32b	multiplier6_36 (
+				.dataa(op6_36_1_scatterer),
+				.datab(op6_36_2_scatterer),
+				.result(prod6_36)
+			);
+			
+assign sqrtOperand1_6 = (i_hit6_pipeWrapper == 1'b1) ? sqrtOperand1_6_reflector	:		sqrtOperand1_6_scatterer;
+
+Sqrt_64b	squareRoot1_6 (
+				.clk(clock),
+				.num_(sqrtOperand1_6),
+				.res(sqrtResult1_6)
+			);
+
+
+
+Div_64b		divide1_16 (
+				.clock(clock),
+				.denom(divDenominator1_16_scatterer),
+				.numer(divNumerator1_16_scatterer),
+				.quotient(quot1_16),
+				.remain(divRemainder)
+			);
+				
+
+endmodule
+			
+
+
+
+module InternalsBlock_Reflector(
+	//Inputs
+	clock,
+	reset,
+	enable,
+
+	i_uz_2,			//uz^2
+	i_uz2,			//new uz, should the photon transmit to new layer
+	i_oneMinusUz_2, 	//(1-uz)^2
+	i_sa2_2,		//(sine of angle 2)^2 (uz2 = cosine of angle 2).
+	i_uz2_2,		//(uz2)^2, new uz squared.
+	i_ux_transmitted,	//new value for ux, if the photon transmits to the next layer
+	i_uy_transmitted,	//new value for uy, if the photon transmits to the next layer
+	
+	//Outputs
+	o_uz_2,
+	o_uz2,
+	o_oneMinusUz_2,
+	o_sa2_2,
+	o_uz2_2,
+	o_ux_transmitted,
+	o_uy_transmitted
+	);
+
+input					clock;
+input					reset;
+input					enable;
+
+input		[63:0]		i_uz_2;
+input		[31:0]		i_uz2;
+input		[63:0]		i_oneMinusUz_2;
+input		[63:0]		i_sa2_2;
+input		[63:0]		i_uz2_2;
+input		[31:0]		i_ux_transmitted;
+input		[31:0]		i_uy_transmitted;
+
+output		[63:0]		o_uz_2;
+output		[31:0]		o_uz2;
+output		[63:0]		o_oneMinusUz_2;
+output		[63:0]		o_sa2_2;
+output		[63:0]		o_uz2_2;
+output		[31:0]		o_ux_transmitted;
+output		[31:0]		o_uy_transmitted;
+
+
+wire					clock;
+wire					reset;
+wire					enable;
+
+wire		[63:0]		i_uz_2;
+wire		[31:0]		i_uz2;
+wire		[63:0]		i_oneMinusUz_2;
+wire		[63:0]		i_sa2_2;
+wire		[63:0]		i_uz2_2;
+wire		[31:0]		i_ux_transmitted;
+wire		[31:0]		i_uy_transmitted;
+
+
+reg		[63:0]		o_uz_2;
+reg		[31:0]		o_uz2;
+reg		[63:0]		o_oneMinusUz_2;
+reg		[63:0]		o_sa2_2;
+reg		[63:0]		o_uz2_2;
+reg		[31:0]		o_ux_transmitted;
+reg		[31:0]		o_uy_transmitted;
+
+
+
+always @ (posedge clock)
+	if(reset) begin
+		o_uz_2					<= 64'h3FFFFFFFFFFFFFFF;
+		o_uz2					<= 32'h7FFFFFFF;
+		o_oneMinusUz_2				<= 64'h0000000000000000;
+		o_sa2_2					<= 64'h0000000000000000;
+		o_uz2_2					<= 64'h3FFFFFFFFFFFFFFF;
+		o_ux_transmitted			<= 32'h00000000;
+		o_uy_transmitted			<= 32'h00000000;
+	end else if(enable) begin
+		o_uz_2					<= i_uz_2;
+		o_uz2					<= i_uz2;
+		o_oneMinusUz_2				<= i_oneMinusUz_2;
+		o_sa2_2					<= i_sa2_2;
+		o_uz2_2					<= i_uz2_2;
+		o_ux_transmitted			<= i_ux_transmitted;
+		o_uy_transmitted			<= i_uy_transmitted;
+	end
+endmodule
+
+
+module Reflector (
+	
+	//INPUTS
+	clock,
+	reset,
+	enable,
+	//Values from Photon Pipeline
+	i_uz1,
+	i_uz3,
+	i_layer3,
+	i_ux35,
+	i_uy35,
+	i_uz35,
+	i_layer35,
+	i_ux36,
+	i_uy36,
+	i_uz36,
+	i_layer36,
+	i_dead36,
+	
+	//Constants
+	down_niOverNt_1,
+	down_niOverNt_2,
+	down_niOverNt_3,
+	down_niOverNt_4,
+	down_niOverNt_5,
+	up_niOverNt_1,
+	up_niOverNt_2,
+	up_niOverNt_3,
+	up_niOverNt_4,
+	up_niOverNt_5,
+	down_niOverNt_2_1,
+	down_niOverNt_2_2,
+	down_niOverNt_2_3,
+	down_niOverNt_2_4,
+	down_niOverNt_2_5,
+	up_niOverNt_2_1,
+	up_niOverNt_2_2,
+	up_niOverNt_2_3,
+	up_niOverNt_2_4,
+	up_niOverNt_2_5,
+	downCritAngle_0,
+	downCritAngle_1,
+	downCritAngle_2,
+	downCritAngle_3,
+	downCritAngle_4,
+	upCritAngle_0,
+	upCritAngle_1,
+	upCritAngle_2,
+	upCritAngle_3,
+	upCritAngle_4,
+	
+	//Fresnels inputs
+	rnd,
+	up_rFresnel,
+	down_rFresnel,
+	
+	//Mathematics Results
+	prod1_2,
+	prod1_4,
+	sqrtResult1_6,
+	prod1_36,
+	prod2_36,
+	
+	
+	//OUTPUTS
+	
+	//Fresnels outputs
+	fresIndex,
+	
+	//Mathematics Operands
+	op1_2_1,
+	op1_2_2,
+	op1_4_1,
+	op1_4_2,
+	sqrtOperand1_6,
+	op1_36_1,
+	op1_36_2,
+	op2_36_1,
+	op2_36_2,
+
+	
+	//Final Calcu`LATed Results
+	ux_reflector,
+	uy_reflector,
+	uz_reflector,
+	layer_reflector,
+	dead_reflector
+);
+
+//-------------------PARAMETER DEFINITION----------------------
+//
+//
+//
+//
+//
+//
+//Assign values to parameters used `LATer in the program.
+	
+//parameter `DIV = 20;
+//parameter `SQRT = 10;
+//parameter `LAT = `DIV + `SQRT + 7;
+//parameter `INTMAX_2 = 64'h3FFFFFFFFFFFFFFF;
+//parameter `INTMAX = 2147483647;
+//parameter `INTMIN = -2147483647;
+
+
+//-----------------------------PIN DECLARATION----------------------
+//
+//
+//
+//
+//
+//
+//
+//
+//Assign appropriate types to pins (input or output).
+input					clock;
+input					reset;
+input					enable;
+
+//Values from Photon Pipeline
+input		[31:0]			i_uz1;
+input		[31:0]			i_uz3;
+input		[2:0]			i_layer3;
+input		[31:0]			i_ux35;
+input		[31:0]			i_uy35;
+input		[31:0]			i_uz35;
+input		[2:0]			i_layer35;
+input		[31:0]			i_ux36;
+input		[31:0]			i_uy36;
+input		[31:0]			i_uz36;
+input		[2:0]			i_layer36;
+input					i_dead36;
+
+//Constants
+input		[31:0]			down_niOverNt_1;
+input		[31:0]			down_niOverNt_2;
+input		[31:0]			down_niOverNt_3;
+input		[31:0]			down_niOverNt_4;
+input		[31:0]			down_niOverNt_5;
+input		[31:0]			up_niOverNt_1;
+input		[31:0]			up_niOverNt_2;
+input		[31:0]			up_niOverNt_3;
+input		[31:0]			up_niOverNt_4;
+input		[31:0]			up_niOverNt_5;
+input		[63:0]			down_niOverNt_2_1; 
+input		[63:0]			down_niOverNt_2_2; 
+input		[63:0]			down_niOverNt_2_3; 
+input		[63:0]			down_niOverNt_2_4; 
+input		[63:0]			down_niOverNt_2_5; 
+input		[63:0]			up_niOverNt_2_1; 
+input		[63:0]			up_niOverNt_2_2; 
+input		[63:0]			up_niOverNt_2_3; 
+input		[63:0]			up_niOverNt_2_4; 
+input		[63:0]			up_niOverNt_2_5; 
+input		[31:0]			downCritAngle_0;
+input		[31:0]			downCritAngle_1;
+input		[31:0]			downCritAngle_2;
+input		[31:0]			downCritAngle_3;
+input		[31:0]			downCritAngle_4;
+input		[31:0]			upCritAngle_0;
+input		[31:0]			upCritAngle_1;
+input		[31:0]			upCritAngle_2;
+input		[31:0]			upCritAngle_3;
+input		[31:0]			upCritAngle_4;
+
+//Fresnels inputs
+input		[31:0]			rnd;
+input		[31:0]			up_rFresnel;
+input		[31:0]			down_rFresnel;
+
+//Mathematics Results
+input		[63:0]			prod1_2;
+input		[63:0]			prod1_4;
+input		[31:0]			sqrtResult1_6;
+input		[63:0]			prod1_36;
+input		[63:0]			prod2_36;
+
+//OUTPUTS
+
+//Fresnels outputs
+output		[9:0]			fresIndex;
+
+//Mathematics operands
+output		[31:0]			op1_2_1;
+output		[31:0]			op1_2_2;
+output		[31:0]			op1_4_1;
+output		[31:0]			op1_4_2;
+output		[63:0]			sqrtOperand1_6;
+output		[31:0]			op1_36_1;
+output		[31:0]			op1_36_2;
+output		[31:0]			op2_36_1;
+output		[31:0]			op2_36_2;
+
+
+//Final Calcu`LATed Results
+output		[31:0]			ux_reflector;
+output		[31:0]			uy_reflector;
+output		[31:0]			uz_reflector;
+output		[2:0]			layer_reflector;
+output					dead_reflector;
+
+
+//-----------------------------PIN TYPES-----------------------------
+//
+//
+//
+//
+//
+//
+//
+//
+//Assign pins to be wires or regs.
+
+wire					clock;
+wire					reset;
+wire					enable;
+//Values from Photon Pipeline
+wire		[31:0]			i_uz1;
+wire		[31:0]			i_uz3; 
+wire		[2:0]			i_layer3;
+wire		[31:0]			i_ux35;
+wire		[31:0]			i_uy35;
+wire		[31:0]			i_uz35;
+wire		[2:0]			i_layer35;
+wire		[31:0]			i_ux36;
+wire		[31:0]			i_uy36;
+wire		[31:0]			i_uz36;
+wire		[2:0]			i_layer36;
+wire					i_dead36;
+
+//Constants
+wire		[31:0]			down_niOverNt_1;
+wire		[31:0]			down_niOverNt_2;
+wire		[31:0]			down_niOverNt_3;
+wire		[31:0]			down_niOverNt_4;
+wire		[31:0]			down_niOverNt_5;
+wire		[31:0]			up_niOverNt_1;
+wire		[31:0]			up_niOverNt_2;
+wire		[31:0]			up_niOverNt_3;
+wire		[31:0]			up_niOverNt_4;
+wire		[31:0]			up_niOverNt_5;
+wire		[63:0]			down_niOverNt_2_1;  
+wire		[63:0]			down_niOverNt_2_2;  
+wire		[63:0]			down_niOverNt_2_3;  
+wire		[63:0]			down_niOverNt_2_4;  
+wire		[63:0]			down_niOverNt_2_5;  
+wire		[63:0]			up_niOverNt_2_1;  
+wire		[63:0]			up_niOverNt_2_2;  
+wire		[63:0]			up_niOverNt_2_3;  
+wire		[63:0]			up_niOverNt_2_4;  
+wire		[63:0]			up_niOverNt_2_5;  
+wire		[31:0]			downCritAngle_0;
+wire		[31:0]			downCritAngle_1;
+wire		[31:0]			downCritAngle_2;
+wire		[31:0]			downCritAngle_3;
+wire		[31:0]			downCritAngle_4;
+wire		[31:0]			upCritAngle_0;
+wire		[31:0]			upCritAngle_1;
+wire		[31:0]			upCritAngle_2;
+wire		[31:0]			upCritAngle_3;
+wire		[31:0]			upCritAngle_4;
+
+//Fresnels inputs
+wire		[31:0]			rnd;
+wire		[31:0]			up_rFresnel;
+wire		[31:0]			down_rFresnel;
+
+//Mathematics Results
+wire		[63:0]			prod1_2;
+wire		[63:0]			prod1_4;
+wire		[31:0]			sqrtResult1_6;
+wire		[63:0]			prod1_36;
+wire		[63:0]			prod2_36;
+
+//OUTPUTS
+
+
+//Fresnels outputs
+reg		[9:0]			fresIndex;
+
+//Operands for shared resources
+wire		[31:0]			op1_2_1;
+wire		[31:0]			op1_2_2;
+reg		[31:0]			op1_4_1;
+wire		[31:0]			op1_4_2;
+wire		[63:0]			sqrtOperand1_6;
+wire		[31:0]			op1_36_1;
+reg		[31:0]			op1_36_2;
+wire		[31:0]			op2_36_1;
+reg		[31:0]			op2_36_2;
+
+//Final Calcu`LATed Results
+reg		[31:0]			ux_reflector;
+reg		[31:0]			uy_reflector;
+reg		[31:0]			uz_reflector;
+reg		[2:0]			layer_reflector;
+reg					dead_reflector;
+
+
+//Need this to deal with 'unused' inputs for ODIN II
+wire [63:0]bigOr;
+assign bigOr = i_uz3|down_niOverNt_2_1|down_niOverNt_2_2|down_niOverNt_2_3|down_niOverNt_2_3|down_niOverNt_2_4|down_niOverNt_2_5|up_niOverNt_2_1|up_niOverNt_2_2|up_niOverNt_2_3|up_niOverNt_2_3|up_niOverNt_2_4|up_niOverNt_2_5|prod1_36|prod2_36|({32'hFFFFFFFF,32'hFFFFFFFF});
+wire reset_new;
+assign reset_new = reset & bigOr[63] & bigOr[62] & bigOr[61] & bigOr[60] & bigOr[59] & bigOr[58] & bigOr[57] & bigOr[56] & bigOr[55] & bigOr[54] & bigOr[53] & bigOr[52] & bigOr[51] & bigOr[50] & bigOr[49] & bigOr[48] & bigOr[47] & bigOr[46] & bigOr[45] & bigOr[44] & bigOr[43] & bigOr[42] & bigOr[41] & bigOr[40] & bigOr[39] & bigOr[38] & bigOr[37] & bigOr[36] & bigOr[35] & bigOr[34] & bigOr[33] & bigOr[32] & bigOr[31] & bigOr[30] & bigOr[29] & bigOr[28] & bigOr[27] & bigOr[26] & bigOr[25] & bigOr[24] & bigOr[23] & bigOr[22] & bigOr[21] & bigOr[20] & bigOr[19] & bigOr[18] & bigOr[17] & bigOr[16] & bigOr[15] & bigOr[14] & bigOr[13] & bigOr[12] & bigOr[11] & bigOr[10] & bigOr[9] & bigOr[8] & bigOr[7] & bigOr[6] & bigOr[5] & bigOr[4] & bigOr[3] & bigOr[2] & bigOr[1] & bigOr[0];
+
+
+
+//-----------------------------END Pin Types-------------------------
+
+//Overflow Wiring
+wire					overflow1_4;
+wire					toAnd1_36_1;
+wire					toAnd1_36_2;
+wire					overflow1_36;
+wire					negOverflow1_36;
+wire					toAnd2_36_1;
+wire					toAnd2_36_2;
+wire					overflow2_36;
+wire					negOverflow2_36;
+	
+//Wiring for calcu`LATing final Results
+reg		[31:0]			new_ux;
+reg		[31:0]			new_uy;
+reg		[31:0]			new_uz;
+reg		[2:0]			new_layer;
+reg					new_dead;
+reg		[31:0]			downCritAngle;
+reg		[31:0]			upCritAngle;
+reg		[31:0]			negUz;
+
+
+
+//Wires to Connect to Internal Registers
+//wire		[63:0]			uz_2[`LAT:0];
+//wire		[31:0]			uz2[`LAT:0];
+//wire		[63:0]			oneMinusUz_2[`LAT:0];
+//wire		[63:0]			sa2_2[`LAT:0];
+//wire		[63:0]			uz2_2[`LAT:0];
+//wire		[31:0]			ux_transmitted[`LAT:0];
+//wire		[31:0]			uy_transmitted[`LAT:0];
+
+wire	[63:0]				uz_2__0;
+wire	[63:0]				uz_2__1;
+wire	[63:0]				uz_2__2;
+wire	[63:0]				uz_2__3;
+wire	[63:0]				uz_2__4;
+wire	[63:0]				uz_2__5;
+wire	[63:0]				uz_2__6;
+wire	[63:0]				uz_2__7;
+wire	[63:0]				uz_2__8;
+wire	[63:0]				uz_2__9;
+wire	[63:0]				uz_2__10;
+wire	[63:0]				uz_2__11;
+wire	[63:0]				uz_2__12;
+wire	[63:0]				uz_2__13;
+wire	[63:0]				uz_2__14;
+wire	[63:0]				uz_2__15;
+wire	[63:0]				uz_2__16;
+wire	[63:0]				uz_2__17;
+wire	[63:0]				uz_2__18;
+wire	[63:0]				uz_2__19;
+wire	[63:0]				uz_2__20;
+wire	[63:0]				uz_2__21;
+wire	[63:0]				uz_2__22;
+wire	[63:0]				uz_2__23;
+wire	[63:0]				uz_2__24;
+wire	[63:0]				uz_2__25;
+wire	[63:0]				uz_2__26;
+wire	[63:0]				uz_2__27;
+wire	[63:0]				uz_2__28;
+wire	[63:0]				uz_2__29;
+wire	[63:0]				uz_2__30;
+wire	[63:0]				uz_2__31;
+wire	[63:0]				uz_2__32;
+wire	[63:0]				uz_2__33;
+wire	[63:0]				uz_2__34;
+wire	[63:0]				uz_2__35;
+wire	[63:0]				uz_2__36;
+wire	[63:0]				uz_2__37;
+
+
+
+//wire		[31:0]			uz2[37:0];
+wire	[32-1:0]				uz2__0;
+wire	[32-1:0]				uz2__1;
+wire	[32-1:0]				uz2__2;
+wire	[32-1:0]				uz2__3;
+wire	[32-1:0]				uz2__4;
+wire	[32-1:0]				uz2__5;
+wire	[32-1:0]				uz2__6;
+wire	[32-1:0]				uz2__7;
+wire	[32-1:0]				uz2__8;
+wire	[32-1:0]				uz2__9;
+wire	[32-1:0]				uz2__10;
+wire	[32-1:0]				uz2__11;
+wire	[32-1:0]				uz2__12;
+wire	[32-1:0]				uz2__13;
+wire	[32-1:0]				uz2__14;
+wire	[32-1:0]				uz2__15;
+wire	[32-1:0]				uz2__16;
+wire	[32-1:0]				uz2__17;
+wire	[32-1:0]				uz2__18;
+wire	[32-1:0]				uz2__19;
+wire	[32-1:0]				uz2__20;
+wire	[32-1:0]				uz2__21;
+wire	[32-1:0]				uz2__22;
+wire	[32-1:0]				uz2__23;
+wire	[32-1:0]				uz2__24;
+wire	[32-1:0]				uz2__25;
+wire	[32-1:0]				uz2__26;
+wire	[32-1:0]				uz2__27;
+wire	[32-1:0]				uz2__28;
+wire	[32-1:0]				uz2__29;
+wire	[32-1:0]				uz2__30;
+wire	[32-1:0]				uz2__31;
+wire	[32-1:0]				uz2__32;
+wire	[32-1:0]				uz2__33;
+wire	[32-1:0]				uz2__34;
+wire	[32-1:0]				uz2__35;
+wire	[32-1:0]				uz2__36;
+wire	[32-1:0]				uz2__37;
+
+
+//wire		[63:0]			oneMinusUz_2[37:0];
+
+wire	[63:0]				oneMinusUz_2__0;
+wire	[63:0]				oneMinusUz_2__1;
+wire	[63:0]				oneMinusUz_2__2;
+wire	[63:0]				oneMinusUz_2__3;
+wire	[63:0]				oneMinusUz_2__4;
+wire	[63:0]				oneMinusUz_2__5;
+wire	[63:0]				oneMinusUz_2__6;
+wire	[63:0]				oneMinusUz_2__7;
+wire	[63:0]				oneMinusUz_2__8;
+wire	[63:0]				oneMinusUz_2__9;
+wire	[63:0]				oneMinusUz_2__10;
+wire	[63:0]				oneMinusUz_2__11;
+wire	[63:0]				oneMinusUz_2__12;
+wire	[63:0]				oneMinusUz_2__13;
+wire	[63:0]				oneMinusUz_2__14;
+wire	[63:0]				oneMinusUz_2__15;
+wire	[63:0]				oneMinusUz_2__16;
+wire	[63:0]				oneMinusUz_2__17;
+wire	[63:0]				oneMinusUz_2__18;
+wire	[63:0]				oneMinusUz_2__19;
+wire	[63:0]				oneMinusUz_2__20;
+wire	[63:0]				oneMinusUz_2__21;
+wire	[63:0]				oneMinusUz_2__22;
+wire	[63:0]				oneMinusUz_2__23;
+wire	[63:0]				oneMinusUz_2__24;
+wire	[63:0]				oneMinusUz_2__25;
+wire	[63:0]				oneMinusUz_2__26;
+wire	[63:0]				oneMinusUz_2__27;
+wire	[63:0]				oneMinusUz_2__28;
+wire	[63:0]				oneMinusUz_2__29;
+wire	[63:0]				oneMinusUz_2__30;
+wire	[63:0]				oneMinusUz_2__31;
+wire	[63:0]				oneMinusUz_2__32;
+wire	[63:0]				oneMinusUz_2__33;
+wire	[63:0]				oneMinusUz_2__34;
+wire	[63:0]				oneMinusUz_2__35;
+wire	[63:0]				oneMinusUz_2__36;
+wire	[63:0]				oneMinusUz_2__37;
+
+
+//wire		[63:0]			sa2_2[37:0];
+wire	[63:0]				sa2_2__0;
+wire	[63:0]				sa2_2__1;
+wire	[63:0]				sa2_2__2;
+wire	[63:0]				sa2_2__3;
+wire	[63:0]				sa2_2__4;
+wire	[63:0]				sa2_2__5;
+wire	[63:0]				sa2_2__6;
+wire	[63:0]				sa2_2__7;
+wire	[63:0]				sa2_2__8;
+wire	[63:0]				sa2_2__9;
+wire	[63:0]				sa2_2__10;
+wire	[63:0]				sa2_2__11;
+wire	[63:0]				sa2_2__12;
+wire	[63:0]				sa2_2__13;
+wire	[63:0]				sa2_2__14;
+wire	[63:0]				sa2_2__15;
+wire	[63:0]				sa2_2__16;
+wire	[63:0]				sa2_2__17;
+wire	[63:0]				sa2_2__18;
+wire	[63:0]				sa2_2__19;
+wire	[63:0]				sa2_2__20;
+wire	[63:0]				sa2_2__21;
+wire	[63:0]				sa2_2__22;
+wire	[63:0]				sa2_2__23;
+wire	[63:0]				sa2_2__24;
+wire	[63:0]				sa2_2__25;
+wire	[63:0]				sa2_2__26;
+wire	[63:0]				sa2_2__27;
+wire	[63:0]				sa2_2__28;
+wire	[63:0]				sa2_2__29;
+wire	[63:0]				sa2_2__30;
+wire	[63:0]				sa2_2__31;
+wire	[63:0]				sa2_2__32;
+wire	[63:0]				sa2_2__33;
+wire	[63:0]				sa2_2__34;
+wire	[63:0]				sa2_2__35;
+wire	[63:0]				sa2_2__36;
+wire	[63:0]				sa2_2__37;
+
+
+//wire		[63:0]			uz2_2[37:0];
+
+wire	[63:0]				uz2_2__0;
+wire	[63:0]				uz2_2__1;
+wire	[63:0]				uz2_2__2;
+wire	[63:0]				uz2_2__3;
+wire	[63:0]				uz2_2__4;
+wire	[63:0]				uz2_2__5;
+wire	[63:0]				uz2_2__6;
+wire	[63:0]				uz2_2__7;
+wire	[63:0]				uz2_2__8;
+wire	[63:0]				uz2_2__9;
+wire	[63:0]				uz2_2__10;
+wire	[63:0]				uz2_2__11;
+wire	[63:0]				uz2_2__12;
+wire	[63:0]				uz2_2__13;
+wire	[63:0]				uz2_2__14;
+wire	[63:0]				uz2_2__15;
+wire	[63:0]				uz2_2__16;
+wire	[63:0]				uz2_2__17;
+wire	[63:0]				uz2_2__18;
+wire	[63:0]				uz2_2__19;
+wire	[63:0]				uz2_2__20;
+wire	[63:0]				uz2_2__21;
+wire	[63:0]				uz2_2__22;
+wire	[63:0]				uz2_2__23;
+wire	[63:0]				uz2_2__24;
+wire	[63:0]				uz2_2__25;
+wire	[63:0]				uz2_2__26;
+wire	[63:0]				uz2_2__27;
+wire	[63:0]				uz2_2__28;
+wire	[63:0]				uz2_2__29;
+wire	[63:0]				uz2_2__30;
+wire	[63:0]				uz2_2__31;
+wire	[63:0]				uz2_2__32;
+wire	[63:0]				uz2_2__33;
+wire	[63:0]				uz2_2__34;
+wire	[63:0]				uz2_2__35;
+wire	[63:0]				uz2_2__36;
+wire	[63:0]				uz2_2__37;
+
+//wire		[31:0]			ux_transmitted[37:0];
+
+wire	[32-1:0]				ux_transmitted__0;
+wire	[32-1:0]				ux_transmitted__1;
+wire	[32-1:0]				ux_transmitted__2;
+wire	[32-1:0]				ux_transmitted__3;
+wire	[32-1:0]				ux_transmitted__4;
+wire	[32-1:0]				ux_transmitted__5;
+wire	[32-1:0]				ux_transmitted__6;
+wire	[32-1:0]				ux_transmitted__7;
+wire	[32-1:0]				ux_transmitted__8;
+wire	[32-1:0]				ux_transmitted__9;
+wire	[32-1:0]				ux_transmitted__10;
+wire	[32-1:0]				ux_transmitted__11;
+wire	[32-1:0]				ux_transmitted__12;
+wire	[32-1:0]				ux_transmitted__13;
+wire	[32-1:0]				ux_transmitted__14;
+wire	[32-1:0]				ux_transmitted__15;
+wire	[32-1:0]				ux_transmitted__16;
+wire	[32-1:0]				ux_transmitted__17;
+wire	[32-1:0]				ux_transmitted__18;
+wire	[32-1:0]				ux_transmitted__19;
+wire	[32-1:0]				ux_transmitted__20;
+wire	[32-1:0]				ux_transmitted__21;
+wire	[32-1:0]				ux_transmitted__22;
+wire	[32-1:0]				ux_transmitted__23;
+wire	[32-1:0]				ux_transmitted__24;
+wire	[32-1:0]				ux_transmitted__25;
+wire	[32-1:0]				ux_transmitted__26;
+wire	[32-1:0]				ux_transmitted__27;
+wire	[32-1:0]				ux_transmitted__28;
+wire	[32-1:0]				ux_transmitted__29;
+wire	[32-1:0]				ux_transmitted__30;
+wire	[32-1:0]				ux_transmitted__31;
+wire	[32-1:0]				ux_transmitted__32;
+wire	[32-1:0]				ux_transmitted__33;
+wire	[32-1:0]				ux_transmitted__34;
+wire	[32-1:0]				ux_transmitted__35;
+wire	[32-1:0]				ux_transmitted__36;
+wire	[32-1:0]				ux_transmitted__37;
+
+//wire		[31:0]			uy_transmitted[37:0];
+
+wire	[32-1:0]				uy_transmitted__0;
+wire	[32-1:0]				uy_transmitted__1;
+wire	[32-1:0]				uy_transmitted__2;
+wire	[32-1:0]				uy_transmitted__3;
+wire	[32-1:0]				uy_transmitted__4;
+wire	[32-1:0]				uy_transmitted__5;
+wire	[32-1:0]				uy_transmitted__6;
+wire	[32-1:0]				uy_transmitted__7;
+wire	[32-1:0]				uy_transmitted__8;
+wire	[32-1:0]				uy_transmitted__9;
+wire	[32-1:0]				uy_transmitted__10;
+wire	[32-1:0]				uy_transmitted__11;
+wire	[32-1:0]				uy_transmitted__12;
+wire	[32-1:0]				uy_transmitted__13;
+wire	[32-1:0]				uy_transmitted__14;
+wire	[32-1:0]				uy_transmitted__15;
+wire	[32-1:0]				uy_transmitted__16;
+wire	[32-1:0]				uy_transmitted__17;
+wire	[32-1:0]				uy_transmitted__18;
+wire	[32-1:0]				uy_transmitted__19;
+wire	[32-1:0]				uy_transmitted__20;
+wire	[32-1:0]				uy_transmitted__21;
+wire	[32-1:0]				uy_transmitted__22;
+wire	[32-1:0]				uy_transmitted__23;
+wire	[32-1:0]				uy_transmitted__24;
+wire	[32-1:0]				uy_transmitted__25;
+wire	[32-1:0]				uy_transmitted__26;
+wire	[32-1:0]				uy_transmitted__27;
+wire	[32-1:0]				uy_transmitted__28;
+wire	[32-1:0]				uy_transmitted__29;
+wire	[32-1:0]				uy_transmitted__30;
+wire	[32-1:0]				uy_transmitted__31;
+wire	[32-1:0]				uy_transmitted__32;
+wire	[32-1:0]				uy_transmitted__33;
+wire	[32-1:0]				uy_transmitted__34;
+wire	[32-1:0]				uy_transmitted__35;
+wire	[32-1:0]				uy_transmitted__36;
+wire	[32-1:0]				uy_transmitted__37;
+
+wire		[63:0]			new_uz_2;
+wire		[31:0]			new_uz2;
+wire		[63:0]			new_oneMinusUz_2;
+wire		[63:0]			new_sa2_2;
+wire		[63:0]			new_uz2_2;
+reg		[31:0]			new_ux_transmitted;
+reg		[31:0]			new_uy_transmitted;
+
+
+
+//------------------Register Pipeline-----------------
+//Generation Methodology: Standard block, called InternalsBlock_Reflector,
+//is repeated multiple times, based on the `LATency of the reflector and
+//scatterer.  This block contains the list of all internal variables
+//that need to be registered and passed along in the pipeline.
+//
+//Previous values in the pipeline are passed to the next register on each
+//clock tick.  The exception comes when an internal variable gets
+//calcu`LATed.  Each time a new internal variable is calcu`LATed, a new
+//case is added to the case statement, and instead of hooking previous
+//values of that variable to next, the new, calcu`LATed values are hooked up.
+//
+//This method will generate many more registers than what are required, but
+//it is expected that the synthesis tool will synthesize these away.
+//
+//
+//Commenting Convention: Whenever a new value is injected into the pipe, the
+//comment //Changed Value is added directly above the variable in question.
+//When multiple values are calcu`LATed in a single clock cycle, multiple such
+//comments are placed.  Wires connected to "Changed Values" always start with
+//the prefix new_.
+//
+//GENERATE PIPELINE
+
+//genvar i;
+//generate
+//	for(i=`LAT; i>0; i=i-1) begin: internalPipe_Reflector
+//		case(i)
+//		
+//		2:
+//		InternalsBlock_Reflector pipeReg(
+//			Inputs
+//			.clock(clock),
+//			.reset(reset),
+//			.enable(enable),
+//			
+//			Changed Value
+//			.i_uz_2(new_uz_2),			//uz^2
+//			.i_uz2(uz2[i-1]),			//new uz, should the photon transmit to new layer
+//			.i_oneMinusUz_2(oneMinusUz_2[i-1]), 	//(1-uz)^2
+//			.i_sa2_2(sa2_2[i-1]),			//(sine of angle 2)^2 (uz2 = cosine of angle 2).
+//			.i_uz2_2(uz2_2[i-1]),			//(uz2)^2, new uz squared.
+//			.i_ux_transmitted(ux_transmitted[i-1]), //New value for ux, if photon moves to next layer
+//			.i_uy_transmitted(uy_transmitted[i-1]),	//New value for uy, if photon moves to next layer
+//
+//			Outputs
+//			.o_uz_2(uz_2[i]),
+//			.o_uz2(uz2[i]),
+//			.o_oneMinusUz_2(oneMinusUz_2[i]),
+//			.o_sa2_2(sa2_2[i]),
+//			.o_uz2_2(uz2_2[i]),
+//			.o_ux_transmitted(ux_transmitted[i]),
+//			.o_uy_transmitted(uy_transmitted[i])
+//		);
+//		
+//		3:
+//		InternalsBlock_Reflector pipeReg(
+//			Inputs
+//			.clock(clock),
+//			.reset(reset),
+//			.enable(enable),
+//
+//			.i_uz_2(uz_2[i-1]),			//uz^2
+//			.i_uz2(uz2[i-1]),			//new uz, should the photon transmit to new layer
+//		//	Changed Value
+//			.i_oneMinusUz_2(new_oneMinusUz_2), 	//(1-uz)^2
+//			.i_sa2_2(sa2_2[i-1]),			//(sine of angle 2)^2 (uz2 = cosine of angle 2).
+//			.i_uz2_2(uz2_2[i-1]),			//(uz2)^2, new uz squared.
+//			.i_ux_transmitted(ux_transmitted[i-1]), //New value for ux, if photon moves to next layer
+//			.i_uy_transmitted(uy_transmitted[i-1]),	//New value for uy, if photon moves to next layer
+//
+//			Outputs
+//			.o_uz_2(uz_2[i]),
+//			.o_uz2(uz2[i]),
+//			.o_oneMinusUz_2(oneMinusUz_2[i]),
+//			.o_sa2_2(sa2_2[i]),
+//			.o_uz2_2(uz2_2[i]),
+//			.o_ux_transmitted(ux_transmitted[i]),
+//			.o_uy_transmitted(uy_transmitted[i])
+//		);
+//		4:
+//		InternalsBlock_Reflector pipeReg(
+//			Inputs
+//			.clock(clock),
+//			.reset(reset),
+//			.enable(enable),
+//
+//			.i_uz_2(uz_2[i-1]),			//uz^2
+//			.i_uz2(uz2[i-1]),			//new uz, should the photon transmit to new layer
+//			.i_oneMinusUz_2(oneMinusUz_2[i-1]), 	//(1-uz)^2
+//			Changed Value
+//			.i_sa2_2(new_sa2_2),			//(sine of angle 2)^2 (uz2 = cosine of angle 2).
+//			.i_uz2_2(uz2_2[i-1]),			//(uz2)^2, new uz squared.
+//			.i_ux_transmitted(ux_transmitted[i-1]), //New value for ux, if photon moves to next layer
+//			.i_uy_transmitted(uy_transmitted[i-1]),	//New value for uy, if photon moves to next layer
+//
+//			Outputs
+//			.o_uz_2(uz_2[i]),
+//			.o_uz2(uz2[i]),
+//			.o_oneMinusUz_2(oneMinusUz_2[i]),
+//			.o_sa2_2(sa2_2[i]),
+//			.o_uz2_2(uz2_2[i]),
+//			.o_ux_transmitted(ux_transmitted[i]),
+//			.o_uy_transmitted(uy_transmitted[i])
+//		);
+//		
+//		5:
+//		InternalsBlock_Reflector pipeReg(
+//			Inputs
+//			.clock(clock),
+//			.reset(reset),
+//			.enable(enable),
+//
+//			.i_uz_2(uz_2[i-1]),			//uz^2
+//			.i_uz2(uz2[i-1]),			//new uz, should the photon transmit to new layer
+//			.i_oneMinusUz_2(oneMinusUz_2[i-1]), 	//(1-uz)^2
+//			.i_sa2_2(sa2_2[i-1]),			//(sine of angle 2)^2 (uz2 = cosine of angle 2).
+//			Changed Value
+//			.i_uz2_2(new_uz2_2),			//(uz2)^2, new uz squared.
+//			.i_ux_transmitted(ux_transmitted[i-1]), //New value for ux, if photon moves to next layer
+//			.i_uy_transmitted(uy_transmitted[i-1]),	//New value for uy, if photon moves to next layer
+//
+//			Outputs
+//			.o_uz_2(uz_2[i]),
+//			.o_uz2(uz2[i]),
+//			.o_oneMinusUz_2(oneMinusUz_2[i]),
+//			.o_sa2_2(sa2_2[i]),
+//			.o_uz2_2(uz2_2[i]),
+//			.o_ux_transmitted(ux_transmitted[i]),
+//			.o_uy_transmitted(uy_transmitted[i])
+//		);
+//		
+//		(`SQRT+6):
+//		InternalsBlock_Reflector pipeReg(
+//			Inputs
+//			.clock(clock),
+//			.reset(reset),
+//			.enable(enable),
+//
+//			.i_uz_2(uz_2[i-1]),			//uz^2
+//			Changed Value
+//			.i_uz2(new_uz2),			//new uz, should the photon transmit to new layer
+//			.i_oneMinusUz_2(oneMinusUz_2[i-1]), 	//(1-uz)^2
+//			.i_sa2_2(sa2_2[i-1]),			//(sine of angle 2)^2 (uz2 = cosine of angle 2).
+//			.i_uz2_2(uz2_2[i-1]),			//(uz2)^2, new uz squared.
+//			.i_ux_transmitted(ux_transmitted[i-1]), //New value for ux, if photon moves to next layer
+//			.i_uy_transmitted(uy_transmitted[i-1]),	//New value for uy, if photon moves to next layer
+//
+//			Outputs
+//			.o_uz_2(uz_2[i]),
+//			.o_uz2(uz2[i]),
+//			.o_oneMinusUz_2(oneMinusUz_2[i]),
+//			.o_sa2_2(sa2_2[i]),
+//			.o_uz2_2(uz2_2[i]),
+//			.o_ux_transmitted(ux_transmitted[i]),
+//			.o_uy_transmitted(uy_transmitted[i])
+//		);
+//		
+//		(`SQRT+`DIV+6):
+//		InternalsBlock_Reflector pipeReg(
+//			Inputs
+//			.clock(clock),
+//			.reset(reset),
+//			.enable(enable),
+//
+//			.i_uz_2(uz_2[i-1]),			//uz^2
+//			.i_uz2(uz2[i-1]),			//new uz, should the photon transmit to new layer
+//			.i_oneMinusUz_2(oneMinusUz_2[i-1]), 	//(1-uz)^2
+//			.i_sa2_2(sa2_2[i-1]),			//(sine of angle 2)^2 (uz2 = cosine of angle 2).
+//			.i_uz2_2(uz2_2[i-1]),			//(uz2)^2, new uz squared.
+//			Changed Value
+//			.i_ux_transmitted(new_ux_transmitted),	//New value for ux, if photon moves to next layer
+//			Changed Value
+//			.i_uy_transmitted(new_uy_transmitted),	//New value for uy, if photon moves to next layer
+//
+//			Outputs
+//			.o_uz_2(uz_2[i]),
+//			.o_uz2(uz2[i]),
+//			.o_oneMinusUz_2(oneMinusUz_2[i]),
+//			.o_sa2_2(sa2_2[i]),
+//			.o_uz2_2(uz2_2[i]),
+//			.o_ux_transmitted(ux_transmitted[i]),
+//			.o_uy_transmitted(uy_transmitted[i])
+//		);
+//		default:
+//		InternalsBlock_Reflector pipeReg(
+//			Inputs
+//			.clock(clock),
+//			.reset(reset),
+//			.enable(enable),
+//		
+//			.i_uz_2(uz_2[i-1]),			//uz^2
+//			.i_uz2(uz2[i-1]),			//new uz, should the photon transmit to new layer
+//			.i_oneMinusUz_2(oneMinusUz_2[i-1]), 	//(1-uz)^2
+//			.i_sa2_2(sa2_2[i-1]),			//(sine of angle 2)^2 (uz2 = cosine of angle 2).
+//			.i_uz2_2(uz2_2[i-1]),			//(uz2)^2, new uz squared.
+//			.i_ux_transmitted(ux_transmitted[i-1]), //New value for ux, if photon moves to next layer
+//			.i_uy_transmitted(uy_transmitted[i-1]),	//New value for uy, if photon moves to next layer
+//			
+//			Outputs
+//			.o_uz_2(uz_2[i]),
+//			.o_uz2(uz2[i]),
+//			.o_oneMinusUz_2(oneMinusUz_2[i]),
+//			.o_sa2_2(sa2_2[i]),
+//			.o_uz2_2(uz2_2[i]),
+//			.o_ux_transmitted(ux_transmitted[i]),
+//			.o_uy_transmitted(uy_transmitted[i])
+//		);
+//		endcase
+//	end
+//endgenerate	
+
+
+
+// special cases first
+	
+	//	forloop2
+		InternalsBlock_Reflector pipeReg2(
+			//Inputs
+			.clock(clock),
+			.reset(reset),
+			.enable(enable),
+			
+			//Changed Value
+			.i_uz_2(new_uz_2),			//uz^2
+			.i_uz2(uz2__1),			//new uz, should the photon transmit to new layer
+			.i_oneMinusUz_2(oneMinusUz_2__1), 	//(1-uz)^2
+			.i_sa2_2(sa2_2__1),			//(sine of angle 2)^2 (uz2 = cosine of angle 2).
+			.i_uz2_2(uz2_2__1),			//(uz2)^2, new uz squared.
+			.i_ux_transmitted(ux_transmitted__1), //New value for ux, if photon moves to next layer
+			.i_uy_transmitted(uy_transmitted__1),	//New value for uy, if photon moves to next layer
+
+			//Outputs
+			.o_uz_2(uz_2__2),
+			.o_uz2(uz2__2),
+			.o_oneMinusUz_2(oneMinusUz_2__2),
+			.o_sa2_2(sa2_2__2),
+			.o_uz2_2(uz2_2__2),
+			.o_ux_transmitted(ux_transmitted__2),
+			.o_uy_transmitted(uy_transmitted__2)
+		);
+		
+		// for loop3:
+		InternalsBlock_Reflector pipeReg3(
+			//Inputs
+			.clock(clock),
+			.reset(reset),
+			.enable(enable),
+
+			.i_uz_2(uz_2__2),			//uz^2
+			.i_uz2(uz2__2),			//new uz, should the photon transmit to new layer
+			//Changed Value
+			.i_oneMinusUz_2(new_oneMinusUz_2), 	//(1-uz)^2
+			.i_sa2_2(sa2_2__2),			//(sine of angle 2)^2 (uz2 = cosine of angle 2).
+			.i_uz2_2(uz2_2__2),			//(uz2)^2, new uz squared.
+			.i_ux_transmitted(ux_transmitted__2), //New value for ux, if photon moves to next layer
+			.i_uy_transmitted(uy_transmitted__2),	//New value for uy, if photon moves to next layer
+
+			//Outputs
+			.o_uz_2(uz_2__3),
+			.o_uz2(uz2__3),
+			.o_oneMinusUz_2(oneMinusUz_2__3),
+			.o_sa2_2(sa2_2__3),
+			.o_uz2_2(uz2_2__3),
+			.o_ux_transmitted(ux_transmitted__3),
+			.o_uy_transmitted(uy_transmitted__3)
+		);
+		
+		// for loop4
+		InternalsBlock_Reflector pipeReg4(
+			//Inputs
+			.clock(clock),
+			.reset(reset),
+			.enable(enable),
+
+			.i_uz_2(uz_2__3),			//uz^2
+			.i_uz2(uz2__3),			//new uz, should the photon transmit to new layer
+			.i_oneMinusUz_2(oneMinusUz_2__3), 	//(1-uz)^2
+			//Changed Value
+			.i_sa2_2(new_sa2_2),			//(sine of angle 2)^2 (uz2 = cosine of angle 2).
+			.i_uz2_2(uz2_2__3),			//(uz2)^2, new uz squared.
+			.i_ux_transmitted(ux_transmitted__3), //New value for ux, if photon moves to next layer
+			.i_uy_transmitted(uy_transmitted__3),	//New value for uy, if photon moves to next layer
+
+			//Outputs
+			.o_uz_2(uz_2__4),
+			.o_uz2(uz2__4),
+			.o_oneMinusUz_2(oneMinusUz_2__4),
+			.o_sa2_2(sa2_2__4),
+			.o_uz2_2(uz2_2__4),
+			.o_ux_transmitted(ux_transmitted__4),
+			.o_uy_transmitted(uy_transmitted__4)
+		);
+		
+		//for loop5
+		InternalsBlock_Reflector pipeReg5(
+			//Inputs
+			.clock(clock),
+			.reset(reset),
+			.enable(enable),
+
+			.i_uz_2(uz_2__4),			//uz^2
+			.i_uz2(uz2__4),			//new uz, should the photon transmit to new layer
+			.i_oneMinusUz_2(oneMinusUz_2__4), 	//(1-uz)^2
+			.i_sa2_2(sa2_2__4),			//(sine of angle 2)^2 (uz2 = cosine of angle 2).
+			//Changed Value
+			.i_uz2_2(new_uz2_2),			//(uz2)^2, new uz squared.
+			.i_ux_transmitted(ux_transmitted__4), //New value for ux, if photon moves to next layer
+			.i_uy_transmitted(uy_transmitted__4),	//New value for uy, if photon moves to next layer
+
+			//Outputs
+			.o_uz_2(uz_2__5),
+			.o_uz2(uz2__5),
+			.o_oneMinusUz_2(oneMinusUz_2__5),
+			.o_sa2_2(sa2_2__5),
+			.o_uz2_2(uz2_2__5),
+			.o_ux_transmitted(ux_transmitted__5),
+			.o_uy_transmitted(uy_transmitted__5)
+		);
+		
+		//for loop(10+6):
+		InternalsBlock_Reflector pipeReg16(
+			//Inputs
+			.clock(clock),
+			.reset(reset),
+			.enable(enable),
+
+			.i_uz_2(uz_2__15),			//uz^2
+			//Changed Value
+			.i_uz2(new_uz2),			//new uz, should the photon transmit to new layer
+			.i_oneMinusUz_2(oneMinusUz_2__15), 	//(1-uz)^2
+			.i_sa2_2(sa2_2__15),			//(sine of angle 2)^2 (uz2 = cosine of angle 2).
+			.i_uz2_2(uz2_2__15),			//(uz2)^2, new uz squared.
+			.i_ux_transmitted(ux_transmitted__15), //New value for ux, if photon moves to next layer
+			.i_uy_transmitted(uy_transmitted__15),	//New value for uy, if photon moves to next layer
+
+			//Outputs
+			.o_uz_2(uz_2__16),
+			.o_uz2(uz2__16),
+			.o_oneMinusUz_2(oneMinusUz_2__16),
+			.o_sa2_2(sa2_2__16),
+			.o_uz2_2(uz2_2__16),
+			.o_ux_transmitted(ux_transmitted__16),
+			.o_uy_transmitted(uy_transmitted__16)
+		);
+		
+		//for loop (10+20+6):
+		InternalsBlock_Reflector pipeReg36(
+			//Inputs
+			.clock(clock),
+			.reset(reset),
+			.enable(enable),
+
+			.i_uz_2(uz_2__35),			//uz^2
+			.i_uz2(uz2__35),			//new uz, should the photon transmit to new layer
+			.i_oneMinusUz_2(oneMinusUz_2__35), 	//(1-uz)^2
+			.i_sa2_2(sa2_2__35),			//(sine of angle 2)^2 (uz2 = cosine of angle 2).
+			.i_uz2_2(uz2_2__35),			//(uz2)^2, new uz squared.
+			//Changed Value
+			.i_ux_transmitted(new_ux_transmitted),	//New value for ux, if photon moves to next layer
+			//Changed Value
+			.i_uy_transmitted(new_uy_transmitted),	//New value for uy, if photon moves to next layer
+
+			//Outputs
+			.o_uz_2(uz_2__36),
+			.o_uz2(uz2__36),
+			.o_oneMinusUz_2(oneMinusUz_2__36),
+			.o_sa2_2(sa2_2__36),
+			.o_uz2_2(uz2_2__36),
+			.o_ux_transmitted(ux_transmitted__36),
+			.o_uy_transmitted(uy_transmitted__36)
+		);
+
+		
+		//rest of loop
+		
+InternalsBlock_Reflector pipeReg37(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_uz_2(uz_2__36),
+.i_uz2(uz2__36),
+.i_oneMinusUz_2(oneMinusUz_2__36),
+.i_sa2_2(sa2_2__36),
+.i_uz2_2(uz2_2__36),
+.i_ux_transmitted(ux_transmitted__36),
+.i_uy_transmitted(uy_transmitted__36),
+
+ //outputs
+
+.o_uz_2(uz_2__37),
+.o_uz2(uz2__37),
+.o_oneMinusUz_2(oneMinusUz_2__37),
+.o_sa2_2(sa2_2__37),
+.o_uz2_2(uz2_2__37),
+.o_ux_transmitted(ux_transmitted__37),
+.o_uy_transmitted(uy_transmitted__37)
+);
+
+//removed 36
+InternalsBlock_Reflector pipeReg35(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_uz_2(uz_2__34),
+.i_uz2(uz2__34),
+.i_oneMinusUz_2(oneMinusUz_2__34),
+.i_sa2_2(sa2_2__34),
+.i_uz2_2(uz2_2__34),
+.i_ux_transmitted(ux_transmitted__34),
+.i_uy_transmitted(uy_transmitted__34),
+
+ //outputs
+
+.o_uz_2(uz_2__35),
+.o_uz2(uz2__35),
+.o_oneMinusUz_2(oneMinusUz_2__35),
+.o_sa2_2(sa2_2__35),
+.o_uz2_2(uz2_2__35),
+.o_ux_transmitted(ux_transmitted__35),
+.o_uy_transmitted(uy_transmitted__35)
+);
+
+InternalsBlock_Reflector pipeReg34(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_uz_2(uz_2__33),
+.i_uz2(uz2__33),
+.i_oneMinusUz_2(oneMinusUz_2__33),
+.i_sa2_2(sa2_2__33),
+.i_uz2_2(uz2_2__33),
+.i_ux_transmitted(ux_transmitted__33),
+.i_uy_transmitted(uy_transmitted__33),
+
+ //outputs
+
+.o_uz_2(uz_2__34),
+.o_uz2(uz2__34),
+.o_oneMinusUz_2(oneMinusUz_2__34),
+.o_sa2_2(sa2_2__34),
+.o_uz2_2(uz2_2__34),
+.o_ux_transmitted(ux_transmitted__34),
+.o_uy_transmitted(uy_transmitted__34)
+);
+
+InternalsBlock_Reflector pipeReg33(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_uz_2(uz_2__32),
+.i_uz2(uz2__32),
+.i_oneMinusUz_2(oneMinusUz_2__32),
+.i_sa2_2(sa2_2__32),
+.i_uz2_2(uz2_2__32),
+.i_ux_transmitted(ux_transmitted__32),
+.i_uy_transmitted(uy_transmitted__32),
+
+ //outputs
+
+.o_uz_2(uz_2__33),
+.o_uz2(uz2__33),
+.o_oneMinusUz_2(oneMinusUz_2__33),
+.o_sa2_2(sa2_2__33),
+.o_uz2_2(uz2_2__33),
+.o_ux_transmitted(ux_transmitted__33),
+.o_uy_transmitted(uy_transmitted__33)
+);
+
+InternalsBlock_Reflector pipeReg32(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_uz_2(uz_2__31),
+.i_uz2(uz2__31),
+.i_oneMinusUz_2(oneMinusUz_2__31),
+.i_sa2_2(sa2_2__31),
+.i_uz2_2(uz2_2__31),
+.i_ux_transmitted(ux_transmitted__31),
+.i_uy_transmitted(uy_transmitted__31),
+
+ //outputs
+
+.o_uz_2(uz_2__32),
+.o_uz2(uz2__32),
+.o_oneMinusUz_2(oneMinusUz_2__32),
+.o_sa2_2(sa2_2__32),
+.o_uz2_2(uz2_2__32),
+.o_ux_transmitted(ux_transmitted__32),
+.o_uy_transmitted(uy_transmitted__32)
+);
+
+InternalsBlock_Reflector pipeReg31(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_uz_2(uz_2__30),
+.i_uz2(uz2__30),
+.i_oneMinusUz_2(oneMinusUz_2__30),
+.i_sa2_2(sa2_2__30),
+.i_uz2_2(uz2_2__30),
+.i_ux_transmitted(ux_transmitted__30),
+.i_uy_transmitted(uy_transmitted__30),
+
+ //outputs
+
+.o_uz_2(uz_2__31),
+.o_uz2(uz2__31),
+.o_oneMinusUz_2(oneMinusUz_2__31),
+.o_sa2_2(sa2_2__31),
+.o_uz2_2(uz2_2__31),
+.o_ux_transmitted(ux_transmitted__31),
+.o_uy_transmitted(uy_transmitted__31)
+);
+
+InternalsBlock_Reflector pipeReg30(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_uz_2(uz_2__29),
+.i_uz2(uz2__29),
+.i_oneMinusUz_2(oneMinusUz_2__29),
+.i_sa2_2(sa2_2__29),
+.i_uz2_2(uz2_2__29),
+.i_ux_transmitted(ux_transmitted__29),
+.i_uy_transmitted(uy_transmitted__29),
+
+ //outputs
+
+.o_uz_2(uz_2__30),
+.o_uz2(uz2__30),
+.o_oneMinusUz_2(oneMinusUz_2__30),
+.o_sa2_2(sa2_2__30),
+.o_uz2_2(uz2_2__30),
+.o_ux_transmitted(ux_transmitted__30),
+.o_uy_transmitted(uy_transmitted__30)
+);
+
+InternalsBlock_Reflector pipeReg29(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_uz_2(uz_2__28),
+.i_uz2(uz2__28),
+.i_oneMinusUz_2(oneMinusUz_2__28),
+.i_sa2_2(sa2_2__28),
+.i_uz2_2(uz2_2__28),
+.i_ux_transmitted(ux_transmitted__28),
+.i_uy_transmitted(uy_transmitted__28),
+
+ //outputs
+
+.o_uz_2(uz_2__29),
+.o_uz2(uz2__29),
+.o_oneMinusUz_2(oneMinusUz_2__29),
+.o_sa2_2(sa2_2__29),
+.o_uz2_2(uz2_2__29),
+.o_ux_transmitted(ux_transmitted__29),
+.o_uy_transmitted(uy_transmitted__29)
+);
+
+InternalsBlock_Reflector pipeReg28(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_uz_2(uz_2__27),
+.i_uz2(uz2__27),
+.i_oneMinusUz_2(oneMinusUz_2__27),
+.i_sa2_2(sa2_2__27),
+.i_uz2_2(uz2_2__27),
+.i_ux_transmitted(ux_transmitted__27),
+.i_uy_transmitted(uy_transmitted__27),
+
+ //outputs
+
+.o_uz_2(uz_2__28),
+.o_uz2(uz2__28),
+.o_oneMinusUz_2(oneMinusUz_2__28),
+.o_sa2_2(sa2_2__28),
+.o_uz2_2(uz2_2__28),
+.o_ux_transmitted(ux_transmitted__28),
+.o_uy_transmitted(uy_transmitted__28)
+);
+
+InternalsBlock_Reflector pipeReg27(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_uz_2(uz_2__26),
+.i_uz2(uz2__26),
+.i_oneMinusUz_2(oneMinusUz_2__26),
+.i_sa2_2(sa2_2__26),
+.i_uz2_2(uz2_2__26),
+.i_ux_transmitted(ux_transmitted__26),
+.i_uy_transmitted(uy_transmitted__26),
+
+ //outputs
+
+.o_uz_2(uz_2__27),
+.o_uz2(uz2__27),
+.o_oneMinusUz_2(oneMinusUz_2__27),
+.o_sa2_2(sa2_2__27),
+.o_uz2_2(uz2_2__27),
+.o_ux_transmitted(ux_transmitted__27),
+.o_uy_transmitted(uy_transmitted__27)
+);
+
+InternalsBlock_Reflector pipeReg26(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_uz_2(uz_2__25),
+.i_uz2(uz2__25),
+.i_oneMinusUz_2(oneMinusUz_2__25),
+.i_sa2_2(sa2_2__25),
+.i_uz2_2(uz2_2__25),
+.i_ux_transmitted(ux_transmitted__25),
+.i_uy_transmitted(uy_transmitted__25),
+
+ //outputs
+
+.o_uz_2(uz_2__26),
+.o_uz2(uz2__26),
+.o_oneMinusUz_2(oneMinusUz_2__26),
+.o_sa2_2(sa2_2__26),
+.o_uz2_2(uz2_2__26),
+.o_ux_transmitted(ux_transmitted__26),
+.o_uy_transmitted(uy_transmitted__26)
+);
+
+InternalsBlock_Reflector pipeReg25(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_uz_2(uz_2__24),
+.i_uz2(uz2__24),
+.i_oneMinusUz_2(oneMinusUz_2__24),
+.i_sa2_2(sa2_2__24),
+.i_uz2_2(uz2_2__24),
+.i_ux_transmitted(ux_transmitted__24),
+.i_uy_transmitted(uy_transmitted__24),
+
+ //outputs
+
+.o_uz_2(uz_2__25),
+.o_uz2(uz2__25),
+.o_oneMinusUz_2(oneMinusUz_2__25),
+.o_sa2_2(sa2_2__25),
+.o_uz2_2(uz2_2__25),
+.o_ux_transmitted(ux_transmitted__25),
+.o_uy_transmitted(uy_transmitted__25)
+);
+
+InternalsBlock_Reflector pipeReg24(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_uz_2(uz_2__23),
+.i_uz2(uz2__23),
+.i_oneMinusUz_2(oneMinusUz_2__23),
+.i_sa2_2(sa2_2__23),
+.i_uz2_2(uz2_2__23),
+.i_ux_transmitted(ux_transmitted__23),
+.i_uy_transmitted(uy_transmitted__23),
+
+ //outputs
+
+.o_uz_2(uz_2__24),
+.o_uz2(uz2__24),
+.o_oneMinusUz_2(oneMinusUz_2__24),
+.o_sa2_2(sa2_2__24),
+.o_uz2_2(uz2_2__24),
+.o_ux_transmitted(ux_transmitted__24),
+.o_uy_transmitted(uy_transmitted__24)
+);
+
+InternalsBlock_Reflector pipeReg23(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_uz_2(uz_2__22),
+.i_uz2(uz2__22),
+.i_oneMinusUz_2(oneMinusUz_2__22),
+.i_sa2_2(sa2_2__22),
+.i_uz2_2(uz2_2__22),
+.i_ux_transmitted(ux_transmitted__22),
+.i_uy_transmitted(uy_transmitted__22),
+
+ //outputs
+
+.o_uz_2(uz_2__23),
+.o_uz2(uz2__23),
+.o_oneMinusUz_2(oneMinusUz_2__23),
+.o_sa2_2(sa2_2__23),
+.o_uz2_2(uz2_2__23),
+.o_ux_transmitted(ux_transmitted__23),
+.o_uy_transmitted(uy_transmitted__23)
+);
+
+InternalsBlock_Reflector pipeReg22(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_uz_2(uz_2__21),
+.i_uz2(uz2__21),
+.i_oneMinusUz_2(oneMinusUz_2__21),
+.i_sa2_2(sa2_2__21),
+.i_uz2_2(uz2_2__21),
+.i_ux_transmitted(ux_transmitted__21),
+.i_uy_transmitted(uy_transmitted__21),
+
+ //outputs
+
+.o_uz_2(uz_2__22),
+.o_uz2(uz2__22),
+.o_oneMinusUz_2(oneMinusUz_2__22),
+.o_sa2_2(sa2_2__22),
+.o_uz2_2(uz2_2__22),
+.o_ux_transmitted(ux_transmitted__22),
+.o_uy_transmitted(uy_transmitted__22)
+);
+
+InternalsBlock_Reflector pipeReg21(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_uz_2(uz_2__20),
+.i_uz2(uz2__20),
+.i_oneMinusUz_2(oneMinusUz_2__20),
+.i_sa2_2(sa2_2__20),
+.i_uz2_2(uz2_2__20),
+.i_ux_transmitted(ux_transmitted__20),
+.i_uy_transmitted(uy_transmitted__20),
+
+ //outputs
+
+.o_uz_2(uz_2__21),
+.o_uz2(uz2__21),
+.o_oneMinusUz_2(oneMinusUz_2__21),
+.o_sa2_2(sa2_2__21),
+.o_uz2_2(uz2_2__21),
+.o_ux_transmitted(ux_transmitted__21),
+.o_uy_transmitted(uy_transmitted__21)
+);
+
+InternalsBlock_Reflector pipeReg20(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_uz_2(uz_2__19),
+.i_uz2(uz2__19),
+.i_oneMinusUz_2(oneMinusUz_2__19),
+.i_sa2_2(sa2_2__19),
+.i_uz2_2(uz2_2__19),
+.i_ux_transmitted(ux_transmitted__19),
+.i_uy_transmitted(uy_transmitted__19),
+
+ //outputs
+
+.o_uz_2(uz_2__20),
+.o_uz2(uz2__20),
+.o_oneMinusUz_2(oneMinusUz_2__20),
+.o_sa2_2(sa2_2__20),
+.o_uz2_2(uz2_2__20),
+.o_ux_transmitted(ux_transmitted__20),
+.o_uy_transmitted(uy_transmitted__20)
+);
+
+InternalsBlock_Reflector pipeReg19(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_uz_2(uz_2__18),
+.i_uz2(uz2__18),
+.i_oneMinusUz_2(oneMinusUz_2__18),
+.i_sa2_2(sa2_2__18),
+.i_uz2_2(uz2_2__18),
+.i_ux_transmitted(ux_transmitted__18),
+.i_uy_transmitted(uy_transmitted__18),
+
+ //outputs
+
+.o_uz_2(uz_2__19),
+.o_uz2(uz2__19),
+.o_oneMinusUz_2(oneMinusUz_2__19),
+.o_sa2_2(sa2_2__19),
+.o_uz2_2(uz2_2__19),
+.o_ux_transmitted(ux_transmitted__19),
+.o_uy_transmitted(uy_transmitted__19)
+);
+
+InternalsBlock_Reflector pipeReg18(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_uz_2(uz_2__17),
+.i_uz2(uz2__17),
+.i_oneMinusUz_2(oneMinusUz_2__17),
+.i_sa2_2(sa2_2__17),
+.i_uz2_2(uz2_2__17),
+.i_ux_transmitted(ux_transmitted__17),
+.i_uy_transmitted(uy_transmitted__17),
+
+ //outputs
+
+.o_uz_2(uz_2__18),
+.o_uz2(uz2__18),
+.o_oneMinusUz_2(oneMinusUz_2__18),
+.o_sa2_2(sa2_2__18),
+.o_uz2_2(uz2_2__18),
+.o_ux_transmitted(ux_transmitted__18),
+.o_uy_transmitted(uy_transmitted__18)
+);
+
+InternalsBlock_Reflector pipeReg17(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_uz_2(uz_2__16),
+.i_uz2(uz2__16),
+.i_oneMinusUz_2(oneMinusUz_2__16),
+.i_sa2_2(sa2_2__16),
+.i_uz2_2(uz2_2__16),
+.i_ux_transmitted(ux_transmitted__16),
+.i_uy_transmitted(uy_transmitted__16),
+
+ //outputs
+
+.o_uz_2(uz_2__17),
+.o_uz2(uz2__17),
+.o_oneMinusUz_2(oneMinusUz_2__17),
+.o_sa2_2(sa2_2__17),
+.o_uz2_2(uz2_2__17),
+.o_ux_transmitted(ux_transmitted__17),
+.o_uy_transmitted(uy_transmitted__17)
+);
+//removed 16
+
+InternalsBlock_Reflector pipeReg15(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_uz_2(uz_2__14),
+.i_uz2(uz2__14),
+.i_oneMinusUz_2(oneMinusUz_2__14),
+.i_sa2_2(sa2_2__14),
+.i_uz2_2(uz2_2__14),
+.i_ux_transmitted(ux_transmitted__14),
+.i_uy_transmitted(uy_transmitted__14),
+
+ //outputs
+
+.o_uz_2(uz_2__15),
+.o_uz2(uz2__15),
+.o_oneMinusUz_2(oneMinusUz_2__15),
+.o_sa2_2(sa2_2__15),
+.o_uz2_2(uz2_2__15),
+.o_ux_transmitted(ux_transmitted__15),
+.o_uy_transmitted(uy_transmitted__15)
+);
+
+InternalsBlock_Reflector pipeReg14(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_uz_2(uz_2__13),
+.i_uz2(uz2__13),
+.i_oneMinusUz_2(oneMinusUz_2__13),
+.i_sa2_2(sa2_2__13),
+.i_uz2_2(uz2_2__13),
+.i_ux_transmitted(ux_transmitted__13),
+.i_uy_transmitted(uy_transmitted__13),
+
+ //outputs
+
+.o_uz_2(uz_2__14),
+.o_uz2(uz2__14),
+.o_oneMinusUz_2(oneMinusUz_2__14),
+.o_sa2_2(sa2_2__14),
+.o_uz2_2(uz2_2__14),
+.o_ux_transmitted(ux_transmitted__14),
+.o_uy_transmitted(uy_transmitted__14)
+);
+
+InternalsBlock_Reflector pipeReg13(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_uz_2(uz_2__12),
+.i_uz2(uz2__12),
+.i_oneMinusUz_2(oneMinusUz_2__12),
+.i_sa2_2(sa2_2__12),
+.i_uz2_2(uz2_2__12),
+.i_ux_transmitted(ux_transmitted__12),
+.i_uy_transmitted(uy_transmitted__12),
+
+ //outputs
+
+.o_uz_2(uz_2__13),
+.o_uz2(uz2__13),
+.o_oneMinusUz_2(oneMinusUz_2__13),
+.o_sa2_2(sa2_2__13),
+.o_uz2_2(uz2_2__13),
+.o_ux_transmitted(ux_transmitted__13),
+.o_uy_transmitted(uy_transmitted__13)
+);
+
+InternalsBlock_Reflector pipeReg12(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_uz_2(uz_2__11),
+.i_uz2(uz2__11),
+.i_oneMinusUz_2(oneMinusUz_2__11),
+.i_sa2_2(sa2_2__11),
+.i_uz2_2(uz2_2__11),
+.i_ux_transmitted(ux_transmitted__11),
+.i_uy_transmitted(uy_transmitted__11),
+
+ //outputs
+
+.o_uz_2(uz_2__12),
+.o_uz2(uz2__12),
+.o_oneMinusUz_2(oneMinusUz_2__12),
+.o_sa2_2(sa2_2__12),
+.o_uz2_2(uz2_2__12),
+.o_ux_transmitted(ux_transmitted__12),
+.o_uy_transmitted(uy_transmitted__12)
+);
+
+InternalsBlock_Reflector pipeReg11(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_uz_2(uz_2__10),
+.i_uz2(uz2__10),
+.i_oneMinusUz_2(oneMinusUz_2__10),
+.i_sa2_2(sa2_2__10),
+.i_uz2_2(uz2_2__10),
+.i_ux_transmitted(ux_transmitted__10),
+.i_uy_transmitted(uy_transmitted__10),
+
+ //outputs
+
+.o_uz_2(uz_2__11),
+.o_uz2(uz2__11),
+.o_oneMinusUz_2(oneMinusUz_2__11),
+.o_sa2_2(sa2_2__11),
+.o_uz2_2(uz2_2__11),
+.o_ux_transmitted(ux_transmitted__11),
+.o_uy_transmitted(uy_transmitted__11)
+);
+
+InternalsBlock_Reflector pipeReg10(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_uz_2(uz_2__9),
+.i_uz2(uz2__9),
+.i_oneMinusUz_2(oneMinusUz_2__9),
+.i_sa2_2(sa2_2__9),
+.i_uz2_2(uz2_2__9),
+.i_ux_transmitted(ux_transmitted__9),
+.i_uy_transmitted(uy_transmitted__9),
+
+ //outputs
+
+.o_uz_2(uz_2__10),
+.o_uz2(uz2__10),
+.o_oneMinusUz_2(oneMinusUz_2__10),
+.o_sa2_2(sa2_2__10),
+.o_uz2_2(uz2_2__10),
+.o_ux_transmitted(ux_transmitted__10),
+.o_uy_transmitted(uy_transmitted__10)
+);
+
+InternalsBlock_Reflector pipeReg9(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_uz_2(uz_2__8),
+.i_uz2(uz2__8),
+.i_oneMinusUz_2(oneMinusUz_2__8),
+.i_sa2_2(sa2_2__8),
+.i_uz2_2(uz2_2__8),
+.i_ux_transmitted(ux_transmitted__8),
+.i_uy_transmitted(uy_transmitted__8),
+
+ //outputs
+
+.o_uz_2(uz_2__9),
+.o_uz2(uz2__9),
+.o_oneMinusUz_2(oneMinusUz_2__9),
+.o_sa2_2(sa2_2__9),
+.o_uz2_2(uz2_2__9),
+.o_ux_transmitted(ux_transmitted__9),
+.o_uy_transmitted(uy_transmitted__9)
+);
+
+InternalsBlock_Reflector pipeReg8(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_uz_2(uz_2__7),
+.i_uz2(uz2__7),
+.i_oneMinusUz_2(oneMinusUz_2__7),
+.i_sa2_2(sa2_2__7),
+.i_uz2_2(uz2_2__7),
+.i_ux_transmitted(ux_transmitted__7),
+.i_uy_transmitted(uy_transmitted__7),
+
+ //outputs
+
+.o_uz_2(uz_2__8),
+.o_uz2(uz2__8),
+.o_oneMinusUz_2(oneMinusUz_2__8),
+.o_sa2_2(sa2_2__8),
+.o_uz2_2(uz2_2__8),
+.o_ux_transmitted(ux_transmitted__8),
+.o_uy_transmitted(uy_transmitted__8)
+);
+
+InternalsBlock_Reflector pipeReg7(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_uz_2(uz_2__6),
+.i_uz2(uz2__6),
+.i_oneMinusUz_2(oneMinusUz_2__6),
+.i_sa2_2(sa2_2__6),
+.i_uz2_2(uz2_2__6),
+.i_ux_transmitted(ux_transmitted__6),
+.i_uy_transmitted(uy_transmitted__6),
+
+ //outputs
+
+.o_uz_2(uz_2__7),
+.o_uz2(uz2__7),
+.o_oneMinusUz_2(oneMinusUz_2__7),
+.o_sa2_2(sa2_2__7),
+.o_uz2_2(uz2_2__7),
+.o_ux_transmitted(ux_transmitted__7),
+.o_uy_transmitted(uy_transmitted__7)
+);
+
+InternalsBlock_Reflector pipeReg6(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_uz_2(uz_2__5),
+.i_uz2(uz2__5),
+.i_oneMinusUz_2(oneMinusUz_2__5),
+.i_sa2_2(sa2_2__5),
+.i_uz2_2(uz2_2__5),
+.i_ux_transmitted(ux_transmitted__5),
+.i_uy_transmitted(uy_transmitted__5),
+
+ //outputs
+
+.o_uz_2(uz_2__6),
+.o_uz2(uz2__6),
+.o_oneMinusUz_2(oneMinusUz_2__6),
+.o_sa2_2(sa2_2__6),
+.o_uz2_2(uz2_2__6),
+.o_ux_transmitted(ux_transmitted__6),
+.o_uy_transmitted(uy_transmitted__6)
+);
+
+
+//removed 2,3,4,5
+
+
+//peter m
+//  no driver
+assign uz_2__0 = 64'b0;
+assign uz2__0 = 32'b0;
+assign oneMinusUz_2__0 = 0;
+assign sa2_2__0 = 0;
+assign uz2_2__0 = 64'b0;
+assign ux_transmitted__0 = 32'b00000000000000000000000000000000;
+assign uy_transmitted__0 = 32'b00000000000000000000000000000000;
+
+
+InternalsBlock_Reflector pipeReg1(
+//Inputs
+
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_uz_2(uz_2__0),
+.i_uz2(uz2__0),
+.i_oneMinusUz_2(oneMinusUz_2__0),
+.i_sa2_2(sa2_2__0),
+.i_uz2_2(uz2_2__0),
+.i_ux_transmitted(ux_transmitted__0),
+.i_uy_transmitted(uy_transmitted__0),
+
+ //outputs
+
+.o_uz_2(uz_2__1),
+.o_uz2(uz2__1),
+.o_oneMinusUz_2(oneMinusUz_2__1),
+.o_sa2_2(sa2_2__1),
+.o_uz2_2(uz2_2__1),
+.o_ux_transmitted(ux_transmitted__1),
+.o_uy_transmitted(uy_transmitted__1)
+);
+
+
+
+
+//-------------SYNCHRONOUS LOGIC----------------------
+//
+//
+//
+//
+//
+//
+//
+//
+//
+//
+//
+//
+//This is the end of the generate statement, and the beginning of the
+//synchronous logic.  On the clock event, the outputs calcu`LATed from
+//this block are put on the output pins for reading (registered
+//outputs, as per the convention).
+
+//Assign outputs from block on positive clock edge.
+always @ (posedge clock) begin
+	if(reset_new) begin
+		//Reset internal non-pipelined registers here.
+		ux_reflector	<= 32'h00000000;
+		uy_reflector	<= 32'h00000000;
+		uz_reflector	<= 32'h7FFFFFFF;
+		layer_reflector	<= 3'b001;
+		dead_reflector	<= 1'b1;
+	end else if (enable) begin
+		ux_reflector	<= new_ux;
+		uy_reflector	<= new_uy;
+		uz_reflector	<= new_uz;
+		layer_reflector <= new_layer;
+		dead_reflector	<= new_dead;
+	end	
+end
+
+
+//-------------ASYNCHRONOUS LOGIC----------------------
+//
+//
+//
+//
+//
+//
+//
+//
+//
+//
+//
+//
+//This is where the asynchronous logic takes place.  Things that
+//occur here include setting up wiring to send to the multipliers,
+//and square root unit.  Also, products brought in from the wrapper 
+//are placed on the appropriate wires for placement in the pipeline.
+
+//-------------MUXES for SYNCHRONOUS LOGIC--------
+always @ (i_layer36 or downCritAngle_0 or upCritAngle_0 or
+						downCritAngle_1 or upCritAngle_1 or
+						downCritAngle_2 or upCritAngle_2 or
+						downCritAngle_3 or upCritAngle_3 or
+						downCritAngle_4 or upCritAngle_4) begin
+	case (i_layer36)
+	1:begin
+		downCritAngle		=	downCritAngle_0;
+		upCritAngle		=	upCritAngle_0;
+	end
+	2:begin
+		downCritAngle		=	downCritAngle_1;
+		upCritAngle		=	upCritAngle_1;
+	end
+	3:begin
+		downCritAngle		=	downCritAngle_2;
+		upCritAngle		=	upCritAngle_2;
+	end
+	4:begin
+		downCritAngle		=	downCritAngle_3;
+		upCritAngle		=	upCritAngle_3;
+	end
+	5:begin
+		downCritAngle		=	downCritAngle_4;
+		upCritAngle		=	upCritAngle_4;
+	end
+	//Should never occur
+	default:begin
+		downCritAngle		=	downCritAngle_0;
+		upCritAngle		=	upCritAngle_0;
+	end
+	endcase
+end
+
+always @ (i_uz35 or i_layer35) begin
+	negUz = -i_uz35;
+	case (i_uz35[31])
+	0: begin
+		case (i_layer35)
+			1:	fresIndex		=	{3'b000, i_uz35[30:24]};
+			2:	fresIndex		=	{3'b001, i_uz35[30:24]};
+			3:	fresIndex		=	{3'b010, i_uz35[30:24]};
+			4:	fresIndex		=	{3'b011, i_uz35[30:24]};
+			5:	fresIndex		=	{3'b100, i_uz35[30:24]};
+			//Should never occur
+			default: fresIndex		=	{3'b000, i_uz35[30:24]};
+		endcase
+	end
+	1: begin
+		case (i_layer35)
+			1:	fresIndex		=	{3'b000, negUz[30:24]};
+			2:	fresIndex		=	{3'b001, negUz[30:24]};
+			3:	fresIndex		=	{3'b010, negUz[30:24]};
+			4:	fresIndex		=	{3'b011, negUz[30:24]};
+			5:	fresIndex		=	{3'b100, negUz[30:24]};
+			//Should never occur
+			default: fresIndex		=	{3'b000, negUz[30:24]};
+		endcase
+	end
+	endcase
+		
+end
+
+
+//-------------OPERAND SETUP----------------------
+
+
+//NAMING CONVENTION:
+//opX_Y_Z, op stands for operand, X stands for the multiplication number for
+//that clock cycle, Y stands for the clock cycle, Z is either 1 or 2 for the
+//first or second operand for this multiply
+//
+//COMMENTING CONVENTIONS:
+//CC X means that the values being calcu`LATed will be ready for the Xth register
+//location, where 0 is the register prior to any calcu`LATions being done, 1 is
+//after the 1st clock cycle of calcu`LATion, etc.
+
+//CC 2
+assign	op1_2_1						=	i_uz1;
+assign	op1_2_2						=	i_uz1;
+
+//CC 3
+//SUBTRACTION, see math results
+
+//CC 4
+always @ (i_uz3 or i_layer3 or down_niOverNt_2_1 or up_niOverNt_2_1 or
+								down_niOverNt_2_2 or up_niOverNt_2_2 or
+								down_niOverNt_2_3 or up_niOverNt_2_3 or
+								down_niOverNt_2_4 or up_niOverNt_2_4 or
+								down_niOverNt_2_5 or up_niOverNt_2_5) begin
+	case (i_uz3[31])
+	//uz >= 0
+	0:begin
+		case (i_layer3)
+			1: op1_4_1			=	{down_niOverNt_2_1[63], down_niOverNt_2_1[61:31]};
+			2: op1_4_1			=	{down_niOverNt_2_2[63], down_niOverNt_2_2[61:31]};
+			3: op1_4_1			=	{down_niOverNt_2_3[63], down_niOverNt_2_3[61:31]};
+			4: op1_4_1			=	{down_niOverNt_2_4[63], down_niOverNt_2_4[61:31]};
+			5: op1_4_1			=	{down_niOverNt_2_5[63], down_niOverNt_2_5[61:31]};
+			default: op1_4_1		=	{down_niOverNt_2_1[63], down_niOverNt_2_1[61:31]};
+		endcase
+	end
+	//uz < 0
+	1:begin
+		case (i_layer3)
+			1: op1_4_1			=	{up_niOverNt_2_1[63], up_niOverNt_2_1[61:31]};
+			2: op1_4_1			=	{up_niOverNt_2_2[63], up_niOverNt_2_2[61:31]};
+			3: op1_4_1			=	{up_niOverNt_2_3[63], up_niOverNt_2_3[61:31]};
+			4: op1_4_1			=	{up_niOverNt_2_4[63], up_niOverNt_2_4[61:31]};
+			5: op1_4_1			=	{up_niOverNt_2_5[63], up_niOverNt_2_5[61:31]};
+			default: op1_4_1		=	{up_niOverNt_2_1[63], up_niOverNt_2_1[61:31]};
+		endcase
+	end
+	endcase
+end
+
+assign	op1_4_2						=	{oneMinusUz_2__3[63], oneMinusUz_2__3[61:31]};
+
+//CC 5
+//SUBTRACTION, see math results
+
+//CC `SQRT+5 -- Started in CC 6
+assign	sqrtOperand1_6					=	uz2_2__5;
+
+//CC `SQRT+`DIV+6 -- Line up with Scatterer.
+assign	op1_36_1					=	i_ux35;
+
+always @ (i_uz35 or i_layer35 or down_niOverNt_1 or up_niOverNt_1 or
+								down_niOverNt_2 or up_niOverNt_2 or
+								down_niOverNt_3 or up_niOverNt_3 or
+								down_niOverNt_4 or up_niOverNt_4 or
+								down_niOverNt_5 or up_niOverNt_5) begin
+	case (i_uz35[31])
+	0: begin//uz >= 0
+		case (i_layer35)
+			1:begin	
+				op1_36_2		=	down_niOverNt_1;
+				op2_36_2		=	down_niOverNt_1;
+			end
+			2:begin	
+				op1_36_2		=	down_niOverNt_2;
+				op2_36_2		=	down_niOverNt_2;
+			end
+			3:begin	
+				op1_36_2		=	down_niOverNt_3;
+				op2_36_2		=	down_niOverNt_3;
+			end
+			4:begin	
+				op1_36_2		=	down_niOverNt_4;
+				op2_36_2		=	down_niOverNt_4;
+			end
+			5:begin	
+				op1_36_2		=	down_niOverNt_5;
+				op2_36_2		=	down_niOverNt_5;
+			end
+			default:begin
+				op1_36_2		=	down_niOverNt_1;
+				op2_36_2		=	down_niOverNt_1;
+			end
+		endcase
+	end
+	1: begin//uz < 0
+		case (i_layer35)
+			1:begin
+				op1_36_2		=	up_niOverNt_1;
+				op2_36_2		=	up_niOverNt_1;
+			end
+			2:begin
+				op1_36_2		=	up_niOverNt_2;
+				op2_36_2		=	up_niOverNt_2;
+			end
+			3:begin
+				op1_36_2		=	up_niOverNt_3;
+				op2_36_2		=	up_niOverNt_3;
+			end
+			4:begin
+				op1_36_2		=	up_niOverNt_4;
+				op2_36_2		=	up_niOverNt_4;
+			end
+			5:begin
+				op1_36_2		=	up_niOverNt_5;
+				op2_36_2		=	up_niOverNt_5;
+			end
+			default:begin
+				op1_36_2		=	up_niOverNt_1;
+				op2_36_2		=	up_niOverNt_1;
+			end
+		endcase
+	end
+	endcase
+end
+
+assign	op2_36_1					=	i_uy35;
+
+
+
+
+
+//-------------MATH RESULTS----------------------
+
+
+//NAMING CONVENTION:
+//new_VAR means that the variable named VAR will be stored into the register
+//pipeline at the clock cycle indicated by the comments above it.
+//
+//prod stands for product, quot stands for quotient, `SQRT stands for square root
+//prodX_Y means the Xth product which started calcu`LATion at the Yth clock cycle
+//Similarly for quot and `SQRTResult.
+//
+//
+//COMMENTING CONVENTIONS:
+//CC X means that the values being calcu`LATed will be ready for the Xth register
+//location, where 0 is the register prior to any calcu`LATions being done, 1 is
+//after the 1st clock cycle of calcu`LATion, etc.
+
+
+//CC 2
+assign new_uz_2						=	prod1_2;
+
+//CC 3
+sub_64b		oneMinusUz2_sub(
+			.dataa(`INTMAX_2_ref),
+			.datab(uz_2__2),
+			.result(new_oneMinusUz_2)
+		);
+
+//CC 4
+//Used to determine whether or not the multiply operation overflowed.
+//or U1(overflow1_4, prod1_4[62], prod1_4[61], prod1_4[60], prod1_4[59], prod1_4[58]);
+assign overflow1_4 = prod1_4[62]|prod1_4[61]|prod1_4[60]|prod1_4[59]|prod1_4[58];
+
+//Cannot take `SQRT of negative number, that is why prod1_4[58] must be 0.
+
+													//sign		//data		//padding
+assign	new_sa2_2					=	(overflow1_4 == 1)? `INTMAX_2_ref	:	{prod1_4[63], prod1_4[58:0], 4'h0};
+
+//5th CC
+sub_64b		uz2_2_sub(
+			.dataa(`INTMAX_2_ref),
+			.datab(sa2_2__4),
+			.result(new_uz2_2)
+		);
+
+//CC `SQRT+5
+assign new_uz2						= sqrtResult1_6;
+
+//CC `SQRT+`DIV+6 -- Line up with Scatterer.
+
+
+//Used to determine whether or not the multiply operation overflowed.
+//or U2(toAnd1_36_1, prod1_36[62], prod1_36[61], prod1_36[60]);
+assign toAnd1_36_1 = prod1_36[62]|prod1_36[61]|prod1_36[60];
+//Used to determine whether or not the multiply operation overflowed in the negative direction.
+//or U3(toAnd1_36_2, ~prod1_36[62], ~prod1_36[61], ~prod1_36[60]);
+assign toAnd1_36_2 = ~prod1_36[62]|~prod1_36[61]|~prod1_36[60];
+
+//and U4(overflow1_36, ~prod1_36[63], toAnd1_36_1);
+assign overflow1_36 = ~prod1_36[63] & toAnd1_36_1;
+//and U5(negOverflow1_36, prod1_36[63], toAnd1_36_2);
+assign negOverflow1_36 = prod1_36[63] & toAnd1_36_2;
+
+
+//Used to determine whether or not the multiply operation overflowed.
+//or U6(toAnd2_36_1, prod2_36[62], prod2_36[61], prod2_36[60]);
+assign toAnd2_36_1 = prod2_36[62]|prod2_36[61]|prod2_36[60];
+//Used to determine whether or not the multiply operation overflowed in the negative direction.
+//or U7(toAnd2_36_2, ~prod2_36[62], ~prod2_36[61], ~prod2_36[60]);
+assign toAnd2_36_2 = ~prod2_36[62]|~prod2_36[61]|~prod2_36[60];
+
+
+//and U8(overflow2_36, ~prod2_36[63], toAnd2_36_1);
+assign overflow2_36 = ~prod2_36[63] & toAnd2_36_1;
+//and U9(negOverflow2_36, prod2_36[63], toAnd2_36_2);
+assign negOverflow2_36 = prod2_36[63] & toAnd2_36_2;
+
+always @ (overflow1_36 or negOverflow1_36 or prod1_36 or
+		  overflow2_36 or negOverflow2_36 or prod2_36) begin
+	case ({overflow1_36, negOverflow1_36})
+	0:	new_ux_transmitted = {prod1_36[63:63], prod1_36[59:29]};
+	1:	new_ux_transmitted = `INTMIN;
+	2:	new_ux_transmitted = `INTMAX;
+	//Should never occur
+	3:	new_ux_transmitted = {prod1_36[63:63], prod1_36[59:29]};
+	endcase
+	
+	case ({overflow2_36, negOverflow2_36})
+	
+	0:	new_uy_transmitted = {prod2_36[63:63], prod2_36[59:29]};
+	1:	new_uy_transmitted = `INTMIN;
+	2:	new_uy_transmitted = `INTMAX;
+	//Should never occur
+	3:	new_uy_transmitted = {prod2_36[63:63], prod2_36[59:29]};
+	endcase
+end
+
+
+//-------------FINAL CALCU`LATED VALUES----------------------
+//
+//
+//
+//
+//
+//
+//
+//
+//
+//
+//
+//
+//
+//
+always @ (i_uz36 or downCritAngle or upCritAngle or down_rFresnel or i_ux36 or
+			i_uy36 or i_layer36 or i_dead36 or rnd or up_rFresnel or ux_transmitted__37 or 
+			uy_transmitted__37 or uz2__37) begin
+	//REFLECTED -- Due to total internal reflection while moving down
+	if (~i_uz36[31] && i_uz36 <= downCritAngle) begin
+		new_ux		= i_ux36;
+		new_uy		= i_uy36;
+		new_uz		= -i_uz36;
+		new_layer	= i_layer36;
+		new_dead	= i_dead36;
+	//REFLECTED -- Due to total internal reflection while moving up
+	end else if (i_uz36[31] && -i_uz36 <= upCritAngle) begin
+		new_ux		= i_ux36;
+		new_uy		= i_uy36;
+		new_uz		= -i_uz36;
+		new_layer	= i_layer36;
+		new_dead	= i_dead36;
+	//REFLECTED -- Due to random number being too small while moving down
+	end else if (~i_uz36[31] && rnd <= down_rFresnel) begin
+		new_ux		= i_ux36;
+		new_uy		= i_uy36;
+		new_uz		= -i_uz36;
+		new_layer	= i_layer36;
+		new_dead	= i_dead36;
+	//REFLECTED -- Due to random number being too small while moving up
+	end else if (i_uz36[31] && rnd <= up_rFresnel) begin
+		new_ux		= i_ux36;
+		new_uy		= i_uy36;
+		new_uz		= -i_uz36;
+		new_layer	= i_layer36;
+		new_dead	= i_dead36;
+	//TRANSMITTED
+	end else begin
+		new_ux		= ux_transmitted__37;
+		new_uy		= uy_transmitted__37;
+		case (i_uz36[31])
+		0:begin//uz >= 0
+			if (i_layer36 == 5) begin
+				new_layer	= 3'h5;
+				new_dead	= 1'b1;
+			end else begin
+				new_layer	= i_layer36+3'h1;
+				new_dead	= i_dead36;
+			end
+			new_uz			= uz2__37;
+		end
+		1:begin//uz < 0
+			if (i_layer36 == 1) begin
+				new_layer	= 3'h1;
+				new_dead	= 1'b1;
+			end else begin
+				new_layer	= i_layer36-3'h1;
+				new_dead	= i_dead36;
+			end
+			new_uz			= -uz2__37;
+		end
+		endcase
+	
+	end
+end
+
+endmodule
+
+
+module Memory_Wrapper (
+	//Inputs
+	clock,
+//	reset, //This is unused in the module. ODIN II complains.
+	pindex,
+	//Outputs
+	sinp,
+	cosp
+	);
+
+
+input					clock;
+//input					reset;
+input	[9:0]			pindex;
+
+
+output	[31:0]			sinp;
+output	[31:0]			cosp;
+
+//sinp_ROM sinp_MEM (.address(pindex), .clock(clock), .q(sinp));
+//cosp_ROM cosp_MEM (.address(pindex), .clock(clock), .q(cosp));
+
+//Instantiate a single port ram for odin
+wire [31:0]blank;
+assign blank = 32'b000000000000000000000000000000;
+(* S="true" *)
+single_port_ram #(.ADDR_WIDTH(10),.DATA_WIDTH(32)) sinp_replace(.clk (clock), .addr (pindex), .data (blank), .we (1'b0), .out (sinp));
+(* S="true" *)
+single_port_ram #(.ADDR_WIDTH(10),.DATA_WIDTH(32)) cosp_replace(.clk (clock), .addr (pindex), .data (blank), .we (1'b0), .out (cosp));
+
+			
+endmodule
+
+
+module InternalsBlock(
+	//Inputs
+	clock,
+	reset,
+	enable,
+	
+	i_sint,
+	i_cost,
+	i_sinp,
+	i_cosp,
+	i_sintCosp,
+	i_sintSinp,
+	i_uz2,
+	i_uxUz,
+	i_uyUz,
+	i_uySintSinp,
+	i_oneMinusUz2,
+	i_uyUzSintCosp,
+	i_uxUzSintCosp,
+	i_uxSintSinp,
+	i_sqrtOneMinusUz2,
+	i_sintCospSqrtOneMinusUz2,
+	i_uxCost,
+	i_uzCost,
+	i_sqrtOneMinusUz2_inv,
+	i_uxNumerator,
+	i_uyNumerator,
+	i_uyCost,
+	i_uxQuotient,
+	i_uyQuotient,
+	//Outputs
+	o_sint,
+	o_cost,
+	o_sinp,
+	o_cosp,
+	o_sintCosp,
+	o_sintSinp,
+	o_uz2,
+	o_uxUz,
+	o_uyUz,
+	o_uySintSinp,
+	o_oneMinusUz2,
+	o_uyUzSintCosp,
+	o_uxUzSintCosp,
+	o_uxSintSinp,
+	o_sqrtOneMinusUz2,
+	o_sintCospSqrtOneMinusUz2,
+	o_uxCost,
+	o_uzCost,
+	o_sqrtOneMinusUz2_inv,
+	o_uxNumerator,
+	o_uyNumerator,
+	o_uyCost,
+	o_uxQuotient,
+	o_uyQuotient
+	);
+
+input					clock;
+input					reset;
+input					enable;
+
+input		[31:0]		i_sint;
+input		[31:0]		i_cost;
+input		[31:0]		i_sinp;
+input		[31:0]		i_cosp;
+input		[31:0]		i_sintCosp;
+input		[31:0]		i_sintSinp;
+input		[63:0]		i_uz2;
+input		[31:0]		i_uxUz;
+input		[31:0]		i_uyUz;
+input		[31:0]		i_uySintSinp;
+input		[63:0]		i_oneMinusUz2;
+input		[31:0]		i_uyUzSintCosp;
+input		[31:0]		i_uxUzSintCosp;
+input		[31:0]		i_uxSintSinp;
+input		[31:0]		i_sqrtOneMinusUz2;
+input		[31:0]		i_sintCospSqrtOneMinusUz2;
+input		[31:0]		i_uxCost;
+input		[31:0]		i_uzCost;
+input		[31:0]		i_sqrtOneMinusUz2_inv;
+input		[31:0]		i_uxNumerator;
+input		[31:0]		i_uyNumerator;
+input		[31:0]		i_uyCost;
+input		[31:0]		i_uxQuotient;
+input		[31:0]		i_uyQuotient;
+
+
+output		[31:0]		o_sint;
+output		[31:0]		o_cost;
+output		[31:0]		o_sinp;
+output		[31:0]		o_cosp;
+output		[31:0]		o_sintCosp;
+output		[31:0]		o_sintSinp;
+output		[63:0]		o_uz2;
+output		[31:0]		o_uxUz;
+output		[31:0]		o_uyUz;
+output		[31:0]		o_uySintSinp;
+output		[63:0]		o_oneMinusUz2;
+output		[31:0]		o_uyUzSintCosp;
+output		[31:0]		o_uxUzSintCosp;
+output		[31:0]		o_uxSintSinp;
+output		[31:0]		o_sqrtOneMinusUz2;
+output		[31:0]		o_sintCospSqrtOneMinusUz2;
+output		[31:0]		o_uxCost;
+output		[31:0]		o_uzCost;
+output		[31:0]		o_sqrtOneMinusUz2_inv;
+output		[31:0]		o_uxNumerator;
+output		[31:0]		o_uyNumerator;
+output		[31:0]		o_uyCost;
+output		[31:0]		o_uxQuotient;
+output		[31:0]		o_uyQuotient;
+
+
+wire					clock;
+wire					reset;
+wire					enable;
+
+wire		[31:0]		i_sint;
+wire		[31:0]		i_cost;
+wire		[31:0]		i_sinp;
+wire		[31:0]		i_cosp;
+wire		[31:0]		i_sintCosp;
+wire		[31:0]		i_sintSinp;
+wire		[63:0]		i_uz2;
+wire		[31:0]		i_uxUz;
+wire		[31:0]		i_uyUz;
+wire		[31:0]		i_uySintSinp;
+wire		[63:0]		i_oneMinusUz2;
+wire		[31:0]		i_uyUzSintCosp;
+wire		[31:0]		i_uxUzSintCosp;
+wire		[31:0]		i_uxSintSinp;
+wire		[31:0]		i_sqrtOneMinusUz2;
+wire		[31:0]		i_sintCospSqrtOneMinusUz2;
+wire		[31:0]		i_uxCost;
+wire		[31:0]		i_uzCost;
+wire		[31:0]		i_sqrtOneMinusUz2_inv;
+wire		[31:0]		i_uxNumerator;
+wire		[31:0]		i_uyNumerator;
+wire		[31:0]		i_uyCost;
+wire		[31:0]		i_uxQuotient;
+wire		[31:0]		i_uyQuotient;
+
+
+reg			[31:0]		o_sint;
+reg			[31:0]		o_cost;
+reg			[31:0]		o_sinp;
+reg			[31:0]		o_cosp;
+reg			[31:0]		o_sintCosp;
+reg			[31:0]		o_sintSinp;
+reg			[63:0]		o_uz2;
+reg			[31:0]		o_uxUz;
+reg			[31:0]		o_uyUz;
+reg			[31:0]		o_uySintSinp;
+reg			[63:0]		o_oneMinusUz2;
+reg			[31:0]		o_uyUzSintCosp;
+reg			[31:0]		o_uxUzSintCosp;
+reg			[31:0]		o_uxSintSinp;
+reg			[31:0]		o_sqrtOneMinusUz2;
+reg			[31:0]		o_sintCospSqrtOneMinusUz2;
+reg			[31:0]		o_uxCost;
+reg			[31:0]		o_uzCost;
+reg			[31:0]		o_sqrtOneMinusUz2_inv;
+reg			[31:0]		o_uxNumerator;
+reg			[31:0]		o_uyNumerator;
+reg			[31:0]		o_uyCost;
+reg			[31:0]		o_uxQuotient;
+reg			[31:0]		o_uyQuotient;
+
+
+
+
+always @ (posedge clock)
+	if(reset) begin
+		o_sint						<= 32'h00000000;
+		o_cost						<= 32'h00000000;
+		o_sinp						<= 32'h00000000;
+		o_cosp						<= 32'h00000000;
+		o_sintCosp					<= 32'h00000000;
+		o_sintSinp					<= 32'h00000000;
+		o_uz2						<= 64'h0000000000000000;
+		o_uxUz						<= 32'h00000000;
+		o_uyUz						<= 32'h00000000;
+		o_uySintSinp				<= 32'h00000000;
+		o_oneMinusUz2				<= 64'h0000000000000000;
+		o_uyUzSintCosp				<= 32'h00000000;
+		o_uxUzSintCosp				<= 32'h00000000;
+		o_uxSintSinp				<= 32'h00000000;
+		o_sqrtOneMinusUz2			<= 32'h00000000;
+		o_sintCospSqrtOneMinusUz2	<= 32'h00000000;
+		o_uxCost					<= 32'h00000000;
+		o_uzCost					<= 32'h00000000;
+		o_sqrtOneMinusUz2_inv		<= 32'h00000000;
+		o_uxNumerator				<= 32'h00000000;
+		o_uyNumerator				<= 32'h00000000;
+		o_uyCost					<= 32'h00000000;
+		o_uxQuotient				<= 32'h00000000;
+		o_uyQuotient				<= 32'h00000000;
+	end else if(enable) begin
+		o_sint						<= i_sint;
+		o_cost						<= i_cost;
+		o_sinp						<= i_sinp;
+		o_cosp						<= i_cosp;
+		o_sintCosp					<= i_sintCosp;
+		o_sintSinp					<= i_sintSinp;
+		o_uz2						<= i_uz2;
+		o_uxUz						<= i_uxUz;
+		o_uyUz						<= i_uyUz;
+		o_uySintSinp				<= i_uySintSinp;
+		o_oneMinusUz2				<= i_oneMinusUz2;
+		o_uyUzSintCosp				<= i_uyUzSintCosp;
+		o_uxUzSintCosp				<= i_uxUzSintCosp;
+		o_uxSintSinp				<= i_uxSintSinp;
+		o_sqrtOneMinusUz2			<= i_sqrtOneMinusUz2;
+		o_sintCospSqrtOneMinusUz2	<= i_sintCospSqrtOneMinusUz2;
+		o_uxCost					<= i_uxCost;
+		o_uzCost					<= i_uzCost;
+		o_sqrtOneMinusUz2_inv		<= i_sqrtOneMinusUz2_inv;
+		o_uxNumerator				<= i_uxNumerator;
+		o_uyNumerator				<= i_uyNumerator;
+		o_uyCost					<= i_uyCost;
+		o_uxQuotient				<= i_uxQuotient;
+		o_uyQuotient				<= i_uyQuotient;
+	end
+endmodule
+
+
+module Scatterer (
+	//INPUTS
+	clock,
+	reset,
+	enable,
+	//Values from Photon Pipeline
+	i_uz1,
+	i_ux3,
+	i_uz3,
+	i_uy32,
+	i_uz32,
+	i_ux33,
+	i_uy33,
+	i_ux35,
+	i_uy35,
+	i_uz35,
+	i_uz36,
+
+	//Mathematics Results
+	prod1_2,
+	prod1_4,
+	sqrtResult1_6,
+	prod1_33,
+	prod2_33,
+	prod3_33,
+	prod1_34,
+	prod2_34,
+	prod3_34,
+	prod4_34,
+	quot1_16,
+	prod1_36,
+	prod2_36,
+	prod3_36,
+	prod4_36,
+	prod5_36,
+	prod6_36,
+
+	//Trig from Memory
+	sint_Mem,
+	cost_Mem,
+	sinp_Mem,
+	cosp_Mem,
+	
+	//OUTPUTS
+	op1_2_1,
+	op1_2_2,
+	op1_4_1,
+	op1_4_2,
+	sqrtOperand1_6,
+	divNumerator1_16,
+	divDenominator1_16,
+	op1_33_1,
+	op1_33_2,
+	op2_33_1,
+	op2_33_2,
+	op3_33_1,
+	op3_33_2,
+	op1_34_1,
+	op1_34_2,
+	op2_34_1,
+	op2_34_2,
+	op3_34_1,
+	op3_34_2,
+	op4_34_1,
+	op4_34_2,
+	op1_36_1,
+	op1_36_2,
+	op2_36_1,
+	op2_36_2,
+	op3_36_1,
+	op3_36_2,
+	op4_36_1,
+	op4_36_2,
+	op5_36_1,
+	op5_36_2,
+	op6_36_1,
+	op6_36_2,
+	
+	//Final calculated values
+	ux_scatterer,
+	uy_scatterer,
+	uz_scatterer
+	
+	
+	);
+	
+//-------------------PARAMETER DEFINITION----------------------
+//
+//
+//
+//
+//
+//
+//Assign values to parameters used later in the program.
+	
+//parameter DIV = 20;
+//parameter SQRT = 10;
+//parameter LAT = DIV + SQRT + 7;
+//parameter `INTMAX_2 = 64'h3FFFFFFF00000001;
+//parameter `INTMAX = 2147483647;
+//parameter `INTMIN = -2147483647;
+//parameter `INTMAXMinus3 = 2147483644;
+//parameter neg`INTMAXPlus3 = -2147483644;
+
+
+
+//-----------------------------PIN DECLARATION----------------------
+//
+//
+//
+//
+//
+//
+//
+//
+//Assign appropriate types to pins (input or output).
+
+input				clock;
+input				reset;
+input				enable;
+//Values from Photon Pipeline
+input	[31:0]		i_uz1;
+input	[31:0]		i_ux3;
+input	[31:0]		i_uz3;
+input	[31:0]		i_uy32;
+input	[31:0]		i_uz32;
+input	[31:0]		i_ux33;
+input	[31:0]		i_uy33;
+input	[31:0]		i_ux35;
+input	[31:0]		i_uy35;
+input	[31:0]		i_uz35;
+input	[31:0]		i_uz36;
+
+//Multiplication Results
+input	[63:0]		prod1_2;
+input	[31:0]		prod1_4;
+input	[31:0]		sqrtResult1_6;
+input	[31:0]		prod1_33;
+input	[31:0]		prod2_33;
+input	[31:0]		prod3_33;
+input	[31:0]		prod1_34;
+input	[31:0]		prod2_34;
+input	[31:0]		prod3_34;
+input	[31:0]		prod4_34;
+input	[63:0]		quot1_16;
+//Need all 64-bits for these two to detect overflows
+input	[63:0]		prod1_36;
+input	[63:0]		prod2_36;
+input	[31:0]		prod3_36;
+input	[31:0]		prod4_36;
+input	[31:0]		prod5_36;
+input	[31:0]		prod6_36;
+
+
+//Trig Values from Memory
+input	[31:0]		sint_Mem;
+input	[31:0]		cost_Mem;
+input	[31:0]		sinp_Mem;
+input	[31:0]		cosp_Mem;
+
+output	[31:0]		op1_2_1;
+output	[31:0]		op1_2_2;
+output	[31:0]		op1_4_1;
+output	[31:0]		op1_4_2;
+output	[63:0]		sqrtOperand1_6;
+output	[63:0]		divNumerator1_16;
+output	[31:0]		divDenominator1_16;
+output	[31:0]		op1_33_1;
+output	[31:0]		op1_33_2;
+output	[31:0]		op2_33_1;
+output	[31:0]		op2_33_2;
+output	[31:0]		op3_33_1;
+output	[31:0]		op3_33_2;
+output	[31:0]		op1_34_1;
+output	[31:0]		op1_34_2;
+output	[31:0]		op2_34_1;
+output	[31:0]		op2_34_2;
+output	[31:0]		op3_34_1;
+output	[31:0]		op3_34_2;
+output	[31:0]		op4_34_1;
+output	[31:0]		op4_34_2;
+output	[31:0]		op1_36_1;
+output	[31:0]		op1_36_2;
+output	[31:0]		op2_36_1;
+output	[31:0]		op2_36_2;
+output	[31:0]		op3_36_1;
+output	[31:0]		op3_36_2;
+output	[31:0]		op4_36_1;
+output	[31:0]		op4_36_2;
+output	[31:0]		op5_36_1;
+output	[31:0]		op5_36_2;
+output	[31:0]		op6_36_1;
+output	[31:0]		op6_36_2;
+
+//Final Calculated Results
+output	[31:0]		ux_scatterer;
+output	[31:0]		uy_scatterer;
+output	[31:0]		uz_scatterer;
+
+
+//-----------------------------PIN TYPES-----------------------------
+//
+//
+//
+//
+//
+//
+//
+//
+//Assign pins to be wires or regs.
+
+
+wire				clock;
+wire				reset;
+wire				enable;
+//Values from Photon Pipeline
+wire	[31:0]		i_uz1;
+wire	[31:0]		i_ux3;
+wire	[31:0]		i_uz3;
+wire	[31:0]		i_uy32;
+wire	[31:0]		i_uz32;
+wire	[31:0]		i_ux33;
+wire	[31:0]		i_uy33;
+wire	[31:0]		i_ux35;
+wire	[31:0]		i_uy35;
+wire	[31:0]		i_uz35;
+wire	[31:0]		i_uz36;
+
+//Multiplication Results
+wire	[63:0]		prod1_2;
+wire	[31:0]		prod1_4;
+wire	[31:0]		sqrtResult1_6;
+wire	[31:0]		prod1_33;
+wire	[31:0]		prod2_33;
+wire	[31:0]		prod3_33;
+wire	[31:0]		prod1_34;
+wire	[31:0]		prod2_34;
+wire	[31:0]		prod3_34;
+wire	[31:0]		prod4_34;
+wire	[63:0]		quot1_16;
+wire	[63:0]		prod1_36;
+wire	[63:0]		prod2_36;
+wire	[31:0]		prod3_36;
+wire	[31:0]		prod4_36;
+wire	[31:0]		prod5_36;
+wire	[31:0]		prod6_36;
+
+
+//Trig Values from Memory
+wire	[31:0]		sint_Mem;
+wire	[31:0]		cost_Mem;
+wire	[31:0]		sinp_Mem;
+wire	[31:0]		cosp_Mem;
+
+//Operands for shared resources
+wire	[31:0]		op1_2_1;
+wire	[31:0]		op1_2_2;
+wire	[31:0]		op1_4_1;
+wire	[31:0]		op1_4_2;
+wire	[63:0]		sqrtOperand1_6;
+wire	[63:0]		divNumerator1_16;
+wire	[31:0]		divDenominator1_16;
+wire	[31:0]		op1_33_1;
+wire	[31:0]		op1_33_2;
+wire	[31:0]		op2_33_1;
+wire	[31:0]		op2_33_2;
+wire	[31:0]		op3_33_1;
+wire	[31:0]		op3_33_2;
+wire	[31:0]		op1_34_1;
+wire	[31:0]		op1_34_2;
+wire	[31:0]		op2_34_1;
+wire	[31:0]		op2_34_2;
+wire	[31:0]		op3_34_1;
+wire	[31:0]		op3_34_2;
+wire	[31:0]		op4_34_1;
+wire	[31:0]		op4_34_2;
+wire	[31:0]		op1_36_1;
+wire	[31:0]		op1_36_2;
+wire	[31:0]		op2_36_1;
+wire	[31:0]		op2_36_2;
+wire	[31:0]		op3_36_1;
+wire	[31:0]		op3_36_2;
+wire	[31:0]		op4_36_1;
+wire	[31:0]		op4_36_2;
+wire	[31:0]		op5_36_1;
+wire	[31:0]		op5_36_2;
+wire	[31:0]		op6_36_1;
+wire	[31:0]		op6_36_2;
+
+//Final outputs
+reg		[31:0]		ux_scatterer;
+reg		[31:0]		uy_scatterer;
+reg		[31:0]		uz_scatterer;
+
+
+//Need this to deal with 'unused' inputs for ODIN II
+wire [63:0]bigOr;
+assign bigOr = quot1_16|prod1_36|prod2_36|({32'hFFFFFFFF,32'hFFFFFFFF});
+wire reset_new;
+assign reset_new = reset & bigOr[63] & bigOr[62] & bigOr[61] & bigOr[60] & bigOr[59] & bigOr[58] & bigOr[57] & bigOr[56] & bigOr[55] & bigOr[54] & bigOr[53] & bigOr[52] & bigOr[51] & bigOr[50] & bigOr[49] & bigOr[48] & bigOr[47] & bigOr[46] & bigOr[45] & bigOr[44] & bigOr[43] & bigOr[42] & bigOr[41] & bigOr[40] & bigOr[39] & bigOr[38] & bigOr[37] & bigOr[36] & bigOr[35] & bigOr[34] & bigOr[33] & bigOr[32] & bigOr[31] & bigOr[30] & bigOr[29] & bigOr[28] & bigOr[27] & bigOr[26] & bigOr[25] & bigOr[24] & bigOr[23] & bigOr[22] & bigOr[21] & bigOr[20] & bigOr[19] & bigOr[18] & bigOr[17] & bigOr[16] & bigOr[15] & bigOr[14] & bigOr[13] & bigOr[12] & bigOr[11] & bigOr[10] & bigOr[9] & bigOr[8] & bigOr[7] & bigOr[6] & bigOr[5] & bigOr[4] & bigOr[3] & bigOr[2] & bigOr[1] & bigOr[0];
+ 
+
+//-----------------------------END Pin Types-------------------------
+
+
+
+//Wires to Connect to Internal Registers
+//wire		[31:0]		sint[`LAT:0];
+//wire		[31:0]		cost[`LAT:0];
+//wire		[31:0]		sinp[`LAT:0];
+//wire		[31:0]		cosp[`LAT:0];
+//wire		[31:0]		sintCosp[`LAT:0];
+//wire		[31:0]		sintSinp[`LAT:0];
+//wire		[63:0]		uz2[`LAT:0];
+//wire		[31:0]		uxUz[`LAT:0];
+//wire		[31:0]		uyUz[`LAT:0];
+//wire		[31:0]		uySintSinp[`LAT:0];
+//wire		[63:0]		oneMinusUz2[`LAT:0];
+//wire		[31:0]		uyUzSintCosp[`LAT:0];
+//wire		[31:0]		uxUzSintCosp[`LAT:0];
+//wire		[31:0]		uxSintSinp[`LAT:0];
+//wire		[31:0]		sqrtOneMinusUz2[`LAT:0];
+//wire		[31:0]		sintCospSqrtOneMinusUz2[`LAT:0];
+//wire		[31:0]		uxCost[`LAT:0];
+//wire		[31:0]		uzCost[`LAT:0];
+//wire		[31:0]		sqrtOneMinusUz2_inv[`LAT:0];
+//wire		[31:0]		uxNumerator[`LAT:0];
+//wire		[31:0]		uyNumerator[`LAT:0];
+//wire		[31:0]		uyCost[`LAT:0];
+//wire		[31:0]		uxQuotient[`LAT:0];
+//wire		[31:0]		uyQuotient[`LAT:0];
+//wire		[31:0]		sint[37:0];
+wire	[32-1:0]				sint__0;
+wire	[32-1:0]				sint__1;
+wire	[32-1:0]				sint__2;
+wire	[32-1:0]				sint__3;
+wire	[32-1:0]				sint__4;
+wire	[32-1:0]				sint__5;
+wire	[32-1:0]				sint__6;
+wire	[32-1:0]				sint__7;
+wire	[32-1:0]				sint__8;
+wire	[32-1:0]				sint__9;
+wire	[32-1:0]				sint__10;
+wire	[32-1:0]				sint__11;
+wire	[32-1:0]				sint__12;
+wire	[32-1:0]				sint__13;
+wire	[32-1:0]				sint__14;
+wire	[32-1:0]				sint__15;
+wire	[32-1:0]				sint__16;
+wire	[32-1:0]				sint__17;
+wire	[32-1:0]				sint__18;
+wire	[32-1:0]				sint__19;
+wire	[32-1:0]				sint__20;
+wire	[32-1:0]				sint__21;
+wire	[32-1:0]				sint__22;
+wire	[32-1:0]				sint__23;
+wire	[32-1:0]				sint__24;
+wire	[32-1:0]				sint__25;
+wire	[32-1:0]				sint__26;
+wire	[32-1:0]				sint__27;
+wire	[32-1:0]				sint__28;
+wire	[32-1:0]				sint__29;
+wire	[32-1:0]				sint__30;
+wire	[32-1:0]				sint__31;
+wire	[32-1:0]				sint__32;
+wire	[32-1:0]				sint__33;
+wire	[32-1:0]				sint__34;
+wire	[32-1:0]				sint__35;
+wire	[32-1:0]				sint__36;
+wire	[32-1:0]				sint__37;
+
+
+
+
+
+//wire		[31:0]		cost[37:0];
+
+
+wire	[32-1:0]				cost__0;
+wire	[32-1:0]				cost__1;
+wire	[32-1:0]				cost__2;
+wire	[32-1:0]				cost__3;
+wire	[32-1:0]				cost__4;
+wire	[32-1:0]				cost__5;
+wire	[32-1:0]				cost__6;
+wire	[32-1:0]				cost__7;
+wire	[32-1:0]				cost__8;
+wire	[32-1:0]				cost__9;
+wire	[32-1:0]				cost__10;
+wire	[32-1:0]				cost__11;
+wire	[32-1:0]				cost__12;
+wire	[32-1:0]				cost__13;
+wire	[32-1:0]				cost__14;
+wire	[32-1:0]				cost__15;
+wire	[32-1:0]				cost__16;
+wire	[32-1:0]				cost__17;
+wire	[32-1:0]				cost__18;
+wire	[32-1:0]				cost__19;
+wire	[32-1:0]				cost__20;
+wire	[32-1:0]				cost__21;
+wire	[32-1:0]				cost__22;
+wire	[32-1:0]				cost__23;
+wire	[32-1:0]				cost__24;
+wire	[32-1:0]				cost__25;
+wire	[32-1:0]				cost__26;
+wire	[32-1:0]				cost__27;
+wire	[32-1:0]				cost__28;
+wire	[32-1:0]				cost__29;
+wire	[32-1:0]				cost__30;
+wire	[32-1:0]				cost__31;
+wire	[32-1:0]				cost__32;
+wire	[32-1:0]				cost__33;
+wire	[32-1:0]				cost__34;
+wire	[32-1:0]				cost__35;
+wire	[32-1:0]				cost__36;
+wire	[32-1:0]				cost__37;
+
+
+//wire		[31:0]		sinp[37:0];
+
+
+wire	[32-1:0]				sinp__0;
+wire	[32-1:0]				sinp__1;
+wire	[32-1:0]				sinp__2;
+wire	[32-1:0]				sinp__3;
+wire	[32-1:0]				sinp__4;
+wire	[32-1:0]				sinp__5;
+wire	[32-1:0]				sinp__6;
+wire	[32-1:0]				sinp__7;
+wire	[32-1:0]				sinp__8;
+wire	[32-1:0]				sinp__9;
+wire	[32-1:0]				sinp__10;
+wire	[32-1:0]				sinp__11;
+wire	[32-1:0]				sinp__12;
+wire	[32-1:0]				sinp__13;
+wire	[32-1:0]				sinp__14;
+wire	[32-1:0]				sinp__15;
+wire	[32-1:0]				sinp__16;
+wire	[32-1:0]				sinp__17;
+wire	[32-1:0]				sinp__18;
+wire	[32-1:0]				sinp__19;
+wire	[32-1:0]				sinp__20;
+wire	[32-1:0]				sinp__21;
+wire	[32-1:0]				sinp__22;
+wire	[32-1:0]				sinp__23;
+wire	[32-1:0]				sinp__24;
+wire	[32-1:0]				sinp__25;
+wire	[32-1:0]				sinp__26;
+wire	[32-1:0]				sinp__27;
+wire	[32-1:0]				sinp__28;
+wire	[32-1:0]				sinp__29;
+wire	[32-1:0]				sinp__30;
+wire	[32-1:0]				sinp__31;
+wire	[32-1:0]				sinp__32;
+wire	[32-1:0]				sinp__33;
+wire	[32-1:0]				sinp__34;
+wire	[32-1:0]				sinp__35;
+wire	[32-1:0]				sinp__36;
+wire	[32-1:0]				sinp__37;
+
+
+//wire		[31:0]		cosp[37:0];
+
+
+wire	[32-1:0]				cosp__0;
+wire	[32-1:0]				cosp__1;
+wire	[32-1:0]				cosp__2;
+wire	[32-1:0]				cosp__3;
+wire	[32-1:0]				cosp__4;
+wire	[32-1:0]				cosp__5;
+wire	[32-1:0]				cosp__6;
+wire	[32-1:0]				cosp__7;
+wire	[32-1:0]				cosp__8;
+wire	[32-1:0]				cosp__9;
+wire	[32-1:0]				cosp__10;
+wire	[32-1:0]				cosp__11;
+wire	[32-1:0]				cosp__12;
+wire	[32-1:0]				cosp__13;
+wire	[32-1:0]				cosp__14;
+wire	[32-1:0]				cosp__15;
+wire	[32-1:0]				cosp__16;
+wire	[32-1:0]				cosp__17;
+wire	[32-1:0]				cosp__18;
+wire	[32-1:0]				cosp__19;
+wire	[32-1:0]				cosp__20;
+wire	[32-1:0]				cosp__21;
+wire	[32-1:0]				cosp__22;
+wire	[32-1:0]				cosp__23;
+wire	[32-1:0]				cosp__24;
+wire	[32-1:0]				cosp__25;
+wire	[32-1:0]				cosp__26;
+wire	[32-1:0]				cosp__27;
+wire	[32-1:0]				cosp__28;
+wire	[32-1:0]				cosp__29;
+wire	[32-1:0]				cosp__30;
+wire	[32-1:0]				cosp__31;
+wire	[32-1:0]				cosp__32;
+wire	[32-1:0]				cosp__33;
+wire	[32-1:0]				cosp__34;
+wire	[32-1:0]				cosp__35;
+wire	[32-1:0]				cosp__36;
+wire	[32-1:0]				cosp__37;
+
+
+//wire		[31:0]		sintCosp[37:0];
+
+wire	[32-1:0]				sintCosp__0;
+wire	[32-1:0]				sintCosp__1;
+wire	[32-1:0]				sintCosp__2;
+wire	[32-1:0]				sintCosp__3;
+wire	[32-1:0]				sintCosp__4;
+wire	[32-1:0]				sintCosp__5;
+wire	[32-1:0]				sintCosp__6;
+wire	[32-1:0]				sintCosp__7;
+wire	[32-1:0]				sintCosp__8;
+wire	[32-1:0]				sintCosp__9;
+wire	[32-1:0]				sintCosp__10;
+wire	[32-1:0]				sintCosp__11;
+wire	[32-1:0]				sintCosp__12;
+wire	[32-1:0]				sintCosp__13;
+wire	[32-1:0]				sintCosp__14;
+wire	[32-1:0]				sintCosp__15;
+wire	[32-1:0]				sintCosp__16;
+wire	[32-1:0]				sintCosp__17;
+wire	[32-1:0]				sintCosp__18;
+wire	[32-1:0]				sintCosp__19;
+wire	[32-1:0]				sintCosp__20;
+wire	[32-1:0]				sintCosp__21;
+wire	[32-1:0]				sintCosp__22;
+wire	[32-1:0]				sintCosp__23;
+wire	[32-1:0]				sintCosp__24;
+wire	[32-1:0]				sintCosp__25;
+wire	[32-1:0]				sintCosp__26;
+wire	[32-1:0]				sintCosp__27;
+wire	[32-1:0]				sintCosp__28;
+wire	[32-1:0]				sintCosp__29;
+wire	[32-1:0]				sintCosp__30;
+wire	[32-1:0]				sintCosp__31;
+wire	[32-1:0]				sintCosp__32;
+wire	[32-1:0]				sintCosp__33;
+wire	[32-1:0]				sintCosp__34;
+wire	[32-1:0]				sintCosp__35;
+wire	[32-1:0]				sintCosp__36;
+wire	[32-1:0]				sintCosp__37;
+
+
+//wire		[31:0]		sintSinp[37:0];
+
+
+wire	[32-1:0]				sintSinp__0;
+wire	[32-1:0]				sintSinp__1;
+wire	[32-1:0]				sintSinp__2;
+wire	[32-1:0]				sintSinp__3;
+wire	[32-1:0]				sintSinp__4;
+wire	[32-1:0]				sintSinp__5;
+wire	[32-1:0]				sintSinp__6;
+wire	[32-1:0]				sintSinp__7;
+wire	[32-1:0]				sintSinp__8;
+wire	[32-1:0]				sintSinp__9;
+wire	[32-1:0]				sintSinp__10;
+wire	[32-1:0]				sintSinp__11;
+wire	[32-1:0]				sintSinp__12;
+wire	[32-1:0]				sintSinp__13;
+wire	[32-1:0]				sintSinp__14;
+wire	[32-1:0]				sintSinp__15;
+wire	[32-1:0]				sintSinp__16;
+wire	[32-1:0]				sintSinp__17;
+wire	[32-1:0]				sintSinp__18;
+wire	[32-1:0]				sintSinp__19;
+wire	[32-1:0]				sintSinp__20;
+wire	[32-1:0]				sintSinp__21;
+wire	[32-1:0]				sintSinp__22;
+wire	[32-1:0]				sintSinp__23;
+wire	[32-1:0]				sintSinp__24;
+wire	[32-1:0]				sintSinp__25;
+wire	[32-1:0]				sintSinp__26;
+wire	[32-1:0]				sintSinp__27;
+wire	[32-1:0]				sintSinp__28;
+wire	[32-1:0]				sintSinp__29;
+wire	[32-1:0]				sintSinp__30;
+wire	[32-1:0]				sintSinp__31;
+wire	[32-1:0]				sintSinp__32;
+wire	[32-1:0]				sintSinp__33;
+wire	[32-1:0]				sintSinp__34;
+wire	[32-1:0]				sintSinp__35;
+wire	[32-1:0]				sintSinp__36;
+wire	[32-1:0]				sintSinp__37;
+
+
+//wire		[63:0]		uz2[37:0];
+
+
+wire	[63:0]				uz2__0;
+wire	[63:0]				uz2__1;
+wire	[63:0]				uz2__2;
+wire	[63:0]				uz2__3;
+wire	[63:0]				uz2__4;
+wire	[63:0]				uz2__5;
+wire	[63:0]				uz2__6;
+wire	[63:0]				uz2__7;
+wire	[63:0]				uz2__8;
+wire	[63:0]				uz2__9;
+wire	[63:0]				uz2__10;
+wire	[63:0]				uz2__11;
+wire	[63:0]				uz2__12;
+wire	[63:0]				uz2__13;
+wire	[63:0]				uz2__14;
+wire	[63:0]				uz2__15;
+wire	[63:0]				uz2__16;
+wire	[63:0]				uz2__17;
+wire	[63:0]				uz2__18;
+wire	[63:0]				uz2__19;
+wire	[63:0]				uz2__20;
+wire	[63:0]				uz2__21;
+wire	[63:0]				uz2__22;
+wire	[63:0]				uz2__23;
+wire	[63:0]				uz2__24;
+wire	[63:0]				uz2__25;
+wire	[63:0]				uz2__26;
+wire	[63:0]				uz2__27;
+wire	[63:0]				uz2__28;
+wire	[63:0]				uz2__29;
+wire	[63:0]				uz2__30;
+wire	[63:0]				uz2__31;
+wire	[63:0]				uz2__32;
+wire	[63:0]				uz2__33;
+wire	[63:0]				uz2__34;
+wire	[63:0]				uz2__35;
+wire	[63:0]				uz2__36;
+wire	[63:0]				uz2__37;
+
+
+//wire		[31:0]		uxUz[37:0];
+
+wire	[32-1:0]				uxUz__0;
+wire	[32-1:0]				uxUz__1;
+wire	[32-1:0]				uxUz__2;
+wire	[32-1:0]				uxUz__3;
+wire	[32-1:0]				uxUz__4;
+wire	[32-1:0]				uxUz__5;
+wire	[32-1:0]				uxUz__6;
+wire	[32-1:0]				uxUz__7;
+wire	[32-1:0]				uxUz__8;
+wire	[32-1:0]				uxUz__9;
+wire	[32-1:0]				uxUz__10;
+wire	[32-1:0]				uxUz__11;
+wire	[32-1:0]				uxUz__12;
+wire	[32-1:0]				uxUz__13;
+wire	[32-1:0]				uxUz__14;
+wire	[32-1:0]				uxUz__15;
+wire	[32-1:0]				uxUz__16;
+wire	[32-1:0]				uxUz__17;
+wire	[32-1:0]				uxUz__18;
+wire	[32-1:0]				uxUz__19;
+wire	[32-1:0]				uxUz__20;
+wire	[32-1:0]				uxUz__21;
+wire	[32-1:0]				uxUz__22;
+wire	[32-1:0]				uxUz__23;
+wire	[32-1:0]				uxUz__24;
+wire	[32-1:0]				uxUz__25;
+wire	[32-1:0]				uxUz__26;
+wire	[32-1:0]				uxUz__27;
+wire	[32-1:0]				uxUz__28;
+wire	[32-1:0]				uxUz__29;
+wire	[32-1:0]				uxUz__30;
+wire	[32-1:0]				uxUz__31;
+wire	[32-1:0]				uxUz__32;
+wire	[32-1:0]				uxUz__33;
+wire	[32-1:0]				uxUz__34;
+wire	[32-1:0]				uxUz__35;
+wire	[32-1:0]				uxUz__36;
+wire	[32-1:0]				uxUz__37;
+
+
+//wire		[31:0]		uyUz[37:0];
+
+
+wire	[32-1:0]				uyUz__0;
+wire	[32-1:0]				uyUz__1;
+wire	[32-1:0]				uyUz__2;
+wire	[32-1:0]				uyUz__3;
+wire	[32-1:0]				uyUz__4;
+wire	[32-1:0]				uyUz__5;
+wire	[32-1:0]				uyUz__6;
+wire	[32-1:0]				uyUz__7;
+wire	[32-1:0]				uyUz__8;
+wire	[32-1:0]				uyUz__9;
+wire	[32-1:0]				uyUz__10;
+wire	[32-1:0]				uyUz__11;
+wire	[32-1:0]				uyUz__12;
+wire	[32-1:0]				uyUz__13;
+wire	[32-1:0]				uyUz__14;
+wire	[32-1:0]				uyUz__15;
+wire	[32-1:0]				uyUz__16;
+wire	[32-1:0]				uyUz__17;
+wire	[32-1:0]				uyUz__18;
+wire	[32-1:0]				uyUz__19;
+wire	[32-1:0]				uyUz__20;
+wire	[32-1:0]				uyUz__21;
+wire	[32-1:0]				uyUz__22;
+wire	[32-1:0]				uyUz__23;
+wire	[32-1:0]				uyUz__24;
+wire	[32-1:0]				uyUz__25;
+wire	[32-1:0]				uyUz__26;
+wire	[32-1:0]				uyUz__27;
+wire	[32-1:0]				uyUz__28;
+wire	[32-1:0]				uyUz__29;
+wire	[32-1:0]				uyUz__30;
+wire	[32-1:0]				uyUz__31;
+wire	[32-1:0]				uyUz__32;
+wire	[32-1:0]				uyUz__33;
+wire	[32-1:0]				uyUz__34;
+wire	[32-1:0]				uyUz__35;
+wire	[32-1:0]				uyUz__36;
+wire	[32-1:0]				uyUz__37;
+
+//wire		[31:0]		uySintSinp[37:0];
+
+
+wire	[32-1:0]				uySintSinp__0;
+wire	[32-1:0]				uySintSinp__1;
+wire	[32-1:0]				uySintSinp__2;
+wire	[32-1:0]				uySintSinp__3;
+wire	[32-1:0]				uySintSinp__4;
+wire	[32-1:0]				uySintSinp__5;
+wire	[32-1:0]				uySintSinp__6;
+wire	[32-1:0]				uySintSinp__7;
+wire	[32-1:0]				uySintSinp__8;
+wire	[32-1:0]				uySintSinp__9;
+wire	[32-1:0]				uySintSinp__10;
+wire	[32-1:0]				uySintSinp__11;
+wire	[32-1:0]				uySintSinp__12;
+wire	[32-1:0]				uySintSinp__13;
+wire	[32-1:0]				uySintSinp__14;
+wire	[32-1:0]				uySintSinp__15;
+wire	[32-1:0]				uySintSinp__16;
+wire	[32-1:0]				uySintSinp__17;
+wire	[32-1:0]				uySintSinp__18;
+wire	[32-1:0]				uySintSinp__19;
+wire	[32-1:0]				uySintSinp__20;
+wire	[32-1:0]				uySintSinp__21;
+wire	[32-1:0]				uySintSinp__22;
+wire	[32-1:0]				uySintSinp__23;
+wire	[32-1:0]				uySintSinp__24;
+wire	[32-1:0]				uySintSinp__25;
+wire	[32-1:0]				uySintSinp__26;
+wire	[32-1:0]				uySintSinp__27;
+wire	[32-1:0]				uySintSinp__28;
+wire	[32-1:0]				uySintSinp__29;
+wire	[32-1:0]				uySintSinp__30;
+wire	[32-1:0]				uySintSinp__31;
+wire	[32-1:0]				uySintSinp__32;
+wire	[32-1:0]				uySintSinp__33;
+wire	[32-1:0]				uySintSinp__34;
+wire	[32-1:0]				uySintSinp__35;
+wire	[32-1:0]				uySintSinp__36;
+wire	[32-1:0]				uySintSinp__37;
+
+
+//wire		[63:0]		oneMinusUz2[37:0];
+
+
+wire	[63:0]				oneMinusUz2__0;
+wire	[63:0]				oneMinusUz2__1;
+wire	[63:0]				oneMinusUz2__2;
+wire	[63:0]				oneMinusUz2__3;
+wire	[63:0]				oneMinusUz2__4;
+wire	[63:0]				oneMinusUz2__5;
+wire	[63:0]				oneMinusUz2__6;
+wire	[63:0]				oneMinusUz2__7;
+wire	[63:0]				oneMinusUz2__8;
+wire	[63:0]				oneMinusUz2__9;
+wire	[63:0]				oneMinusUz2__10;
+wire	[63:0]				oneMinusUz2__11;
+wire	[63:0]				oneMinusUz2__12;
+wire	[63:0]				oneMinusUz2__13;
+wire	[63:0]				oneMinusUz2__14;
+wire	[63:0]				oneMinusUz2__15;
+wire	[63:0]				oneMinusUz2__16;
+wire	[63:0]				oneMinusUz2__17;
+wire	[63:0]				oneMinusUz2__18;
+wire	[63:0]				oneMinusUz2__19;
+wire	[63:0]				oneMinusUz2__20;
+wire	[63:0]				oneMinusUz2__21;
+wire	[63:0]				oneMinusUz2__22;
+wire	[63:0]				oneMinusUz2__23;
+wire	[63:0]				oneMinusUz2__24;
+wire	[63:0]				oneMinusUz2__25;
+wire	[63:0]				oneMinusUz2__26;
+wire	[63:0]				oneMinusUz2__27;
+wire	[63:0]				oneMinusUz2__28;
+wire	[63:0]				oneMinusUz2__29;
+wire	[63:0]				oneMinusUz2__30;
+wire	[63:0]				oneMinusUz2__31;
+wire	[63:0]				oneMinusUz2__32;
+wire	[63:0]				oneMinusUz2__33;
+wire	[63:0]				oneMinusUz2__34;
+wire	[63:0]				oneMinusUz2__35;
+wire	[63:0]				oneMinusUz2__36;
+wire	[63:0]				oneMinusUz2__37;
+
+
+//wire		[31:0]		uyUzSintCosp[37:0];
+
+
+wire	[32-1:0]				uyUzSintCosp__0;
+wire	[32-1:0]				uyUzSintCosp__1;
+wire	[32-1:0]				uyUzSintCosp__2;
+wire	[32-1:0]				uyUzSintCosp__3;
+wire	[32-1:0]				uyUzSintCosp__4;
+wire	[32-1:0]				uyUzSintCosp__5;
+wire	[32-1:0]				uyUzSintCosp__6;
+wire	[32-1:0]				uyUzSintCosp__7;
+wire	[32-1:0]				uyUzSintCosp__8;
+wire	[32-1:0]				uyUzSintCosp__9;
+wire	[32-1:0]				uyUzSintCosp__10;
+wire	[32-1:0]				uyUzSintCosp__11;
+wire	[32-1:0]				uyUzSintCosp__12;
+wire	[32-1:0]				uyUzSintCosp__13;
+wire	[32-1:0]				uyUzSintCosp__14;
+wire	[32-1:0]				uyUzSintCosp__15;
+wire	[32-1:0]				uyUzSintCosp__16;
+wire	[32-1:0]				uyUzSintCosp__17;
+wire	[32-1:0]				uyUzSintCosp__18;
+wire	[32-1:0]				uyUzSintCosp__19;
+wire	[32-1:0]				uyUzSintCosp__20;
+wire	[32-1:0]				uyUzSintCosp__21;
+wire	[32-1:0]				uyUzSintCosp__22;
+wire	[32-1:0]				uyUzSintCosp__23;
+wire	[32-1:0]				uyUzSintCosp__24;
+wire	[32-1:0]				uyUzSintCosp__25;
+wire	[32-1:0]				uyUzSintCosp__26;
+wire	[32-1:0]				uyUzSintCosp__27;
+wire	[32-1:0]				uyUzSintCosp__28;
+wire	[32-1:0]				uyUzSintCosp__29;
+wire	[32-1:0]				uyUzSintCosp__30;
+wire	[32-1:0]				uyUzSintCosp__31;
+wire	[32-1:0]				uyUzSintCosp__32;
+wire	[32-1:0]				uyUzSintCosp__33;
+wire	[32-1:0]				uyUzSintCosp__34;
+wire	[32-1:0]				uyUzSintCosp__35;
+wire	[32-1:0]				uyUzSintCosp__36;
+wire	[32-1:0]				uyUzSintCosp__37;
+
+
+//wire		[31:0]		uxUzSintCosp[37:0];
+
+
+wire	[32-1:0]				uxUzSintCosp__0;
+wire	[32-1:0]				uxUzSintCosp__1;
+wire	[32-1:0]				uxUzSintCosp__2;
+wire	[32-1:0]				uxUzSintCosp__3;
+wire	[32-1:0]				uxUzSintCosp__4;
+wire	[32-1:0]				uxUzSintCosp__5;
+wire	[32-1:0]				uxUzSintCosp__6;
+wire	[32-1:0]				uxUzSintCosp__7;
+wire	[32-1:0]				uxUzSintCosp__8;
+wire	[32-1:0]				uxUzSintCosp__9;
+wire	[32-1:0]				uxUzSintCosp__10;
+wire	[32-1:0]				uxUzSintCosp__11;
+wire	[32-1:0]				uxUzSintCosp__12;
+wire	[32-1:0]				uxUzSintCosp__13;
+wire	[32-1:0]				uxUzSintCosp__14;
+wire	[32-1:0]				uxUzSintCosp__15;
+wire	[32-1:0]				uxUzSintCosp__16;
+wire	[32-1:0]				uxUzSintCosp__17;
+wire	[32-1:0]				uxUzSintCosp__18;
+wire	[32-1:0]				uxUzSintCosp__19;
+wire	[32-1:0]				uxUzSintCosp__20;
+wire	[32-1:0]				uxUzSintCosp__21;
+wire	[32-1:0]				uxUzSintCosp__22;
+wire	[32-1:0]				uxUzSintCosp__23;
+wire	[32-1:0]				uxUzSintCosp__24;
+wire	[32-1:0]				uxUzSintCosp__25;
+wire	[32-1:0]				uxUzSintCosp__26;
+wire	[32-1:0]				uxUzSintCosp__27;
+wire	[32-1:0]				uxUzSintCosp__28;
+wire	[32-1:0]				uxUzSintCosp__29;
+wire	[32-1:0]				uxUzSintCosp__30;
+wire	[32-1:0]				uxUzSintCosp__31;
+wire	[32-1:0]				uxUzSintCosp__32;
+wire	[32-1:0]				uxUzSintCosp__33;
+wire	[32-1:0]				uxUzSintCosp__34;
+wire	[32-1:0]				uxUzSintCosp__35;
+wire	[32-1:0]				uxUzSintCosp__36;
+wire	[32-1:0]				uxUzSintCosp__37;
+
+
+//wire		[31:0]		uxSintSinp[37:0];
+
+wire	[32-1:0]				uxSintSinp__0;
+wire	[32-1:0]				uxSintSinp__1;
+wire	[32-1:0]				uxSintSinp__2;
+wire	[32-1:0]				uxSintSinp__3;
+wire	[32-1:0]				uxSintSinp__4;
+wire	[32-1:0]				uxSintSinp__5;
+wire	[32-1:0]				uxSintSinp__6;
+wire	[32-1:0]				uxSintSinp__7;
+wire	[32-1:0]				uxSintSinp__8;
+wire	[32-1:0]				uxSintSinp__9;
+wire	[32-1:0]				uxSintSinp__10;
+wire	[32-1:0]				uxSintSinp__11;
+wire	[32-1:0]				uxSintSinp__12;
+wire	[32-1:0]				uxSintSinp__13;
+wire	[32-1:0]				uxSintSinp__14;
+wire	[32-1:0]				uxSintSinp__15;
+wire	[32-1:0]				uxSintSinp__16;
+wire	[32-1:0]				uxSintSinp__17;
+wire	[32-1:0]				uxSintSinp__18;
+wire	[32-1:0]				uxSintSinp__19;
+wire	[32-1:0]				uxSintSinp__20;
+wire	[32-1:0]				uxSintSinp__21;
+wire	[32-1:0]				uxSintSinp__22;
+wire	[32-1:0]				uxSintSinp__23;
+wire	[32-1:0]				uxSintSinp__24;
+wire	[32-1:0]				uxSintSinp__25;
+wire	[32-1:0]				uxSintSinp__26;
+wire	[32-1:0]				uxSintSinp__27;
+wire	[32-1:0]				uxSintSinp__28;
+wire	[32-1:0]				uxSintSinp__29;
+wire	[32-1:0]				uxSintSinp__30;
+wire	[32-1:0]				uxSintSinp__31;
+wire	[32-1:0]				uxSintSinp__32;
+wire	[32-1:0]				uxSintSinp__33;
+wire	[32-1:0]				uxSintSinp__34;
+wire	[32-1:0]				uxSintSinp__35;
+wire	[32-1:0]				uxSintSinp__36;
+wire	[32-1:0]				uxSintSinp__37;
+
+
+//wire		[31:0]		sqrtOneMinusUz2[37:0];
+
+wire	[32-1:0]				sqrtOneMinusUz2__0;
+wire	[32-1:0]				sqrtOneMinusUz2__1;
+wire	[32-1:0]				sqrtOneMinusUz2__2;
+wire	[32-1:0]				sqrtOneMinusUz2__3;
+wire	[32-1:0]				sqrtOneMinusUz2__4;
+wire	[32-1:0]				sqrtOneMinusUz2__5;
+wire	[32-1:0]				sqrtOneMinusUz2__6;
+wire	[32-1:0]				sqrtOneMinusUz2__7;
+wire	[32-1:0]				sqrtOneMinusUz2__8;
+wire	[32-1:0]				sqrtOneMinusUz2__9;
+wire	[32-1:0]				sqrtOneMinusUz2__10;
+wire	[32-1:0]				sqrtOneMinusUz2__11;
+wire	[32-1:0]				sqrtOneMinusUz2__12;
+wire	[32-1:0]				sqrtOneMinusUz2__13;
+wire	[32-1:0]				sqrtOneMinusUz2__14;
+wire	[32-1:0]				sqrtOneMinusUz2__15;
+wire	[32-1:0]				sqrtOneMinusUz2__16;
+wire	[32-1:0]				sqrtOneMinusUz2__17;
+wire	[32-1:0]				sqrtOneMinusUz2__18;
+wire	[32-1:0]				sqrtOneMinusUz2__19;
+wire	[32-1:0]				sqrtOneMinusUz2__20;
+wire	[32-1:0]				sqrtOneMinusUz2__21;
+wire	[32-1:0]				sqrtOneMinusUz2__22;
+wire	[32-1:0]				sqrtOneMinusUz2__23;
+wire	[32-1:0]				sqrtOneMinusUz2__24;
+wire	[32-1:0]				sqrtOneMinusUz2__25;
+wire	[32-1:0]				sqrtOneMinusUz2__26;
+wire	[32-1:0]				sqrtOneMinusUz2__27;
+wire	[32-1:0]				sqrtOneMinusUz2__28;
+wire	[32-1:0]				sqrtOneMinusUz2__29;
+wire	[32-1:0]				sqrtOneMinusUz2__30;
+wire	[32-1:0]				sqrtOneMinusUz2__31;
+wire	[32-1:0]				sqrtOneMinusUz2__32;
+wire	[32-1:0]				sqrtOneMinusUz2__33;
+wire	[32-1:0]				sqrtOneMinusUz2__34;
+wire	[32-1:0]				sqrtOneMinusUz2__35;
+wire	[32-1:0]				sqrtOneMinusUz2__36;
+wire	[32-1:0]				sqrtOneMinusUz2__37;
+
+//wire		[31:0]		sintCospSqrtOneMinusUz2[37:0];
+
+
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__0;
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__1;
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__2;
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__3;
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__4;
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__5;
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__6;
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__7;
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__8;
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__9;
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__10;
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__11;
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__12;
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__13;
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__14;
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__15;
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__16;
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__17;
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__18;
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__19;
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__20;
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__21;
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__22;
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__23;
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__24;
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__25;
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__26;
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__27;
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__28;
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__29;
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__30;
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__31;
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__32;
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__33;
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__34;
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__35;
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__36;
+wire	[32-1:0]				sintCospSqrtOneMinusUz2__37;
+
+//wire		[31:0]		uxCost[37:0];
+
+
+wire	[32-1:0]				uxCost__0;
+wire	[32-1:0]				uxCost__1;
+wire	[32-1:0]				uxCost__2;
+wire	[32-1:0]				uxCost__3;
+wire	[32-1:0]				uxCost__4;
+wire	[32-1:0]				uxCost__5;
+wire	[32-1:0]				uxCost__6;
+wire	[32-1:0]				uxCost__7;
+wire	[32-1:0]				uxCost__8;
+wire	[32-1:0]				uxCost__9;
+wire	[32-1:0]				uxCost__10;
+wire	[32-1:0]				uxCost__11;
+wire	[32-1:0]				uxCost__12;
+wire	[32-1:0]				uxCost__13;
+wire	[32-1:0]				uxCost__14;
+wire	[32-1:0]				uxCost__15;
+wire	[32-1:0]				uxCost__16;
+wire	[32-1:0]				uxCost__17;
+wire	[32-1:0]				uxCost__18;
+wire	[32-1:0]				uxCost__19;
+wire	[32-1:0]				uxCost__20;
+wire	[32-1:0]				uxCost__21;
+wire	[32-1:0]				uxCost__22;
+wire	[32-1:0]				uxCost__23;
+wire	[32-1:0]				uxCost__24;
+wire	[32-1:0]				uxCost__25;
+wire	[32-1:0]				uxCost__26;
+wire	[32-1:0]				uxCost__27;
+wire	[32-1:0]				uxCost__28;
+wire	[32-1:0]				uxCost__29;
+wire	[32-1:0]				uxCost__30;
+wire	[32-1:0]				uxCost__31;
+wire	[32-1:0]				uxCost__32;
+wire	[32-1:0]				uxCost__33;
+wire	[32-1:0]				uxCost__34;
+wire	[32-1:0]				uxCost__35;
+wire	[32-1:0]				uxCost__36;
+wire	[32-1:0]				uxCost__37;
+
+//wire		[31:0]		uzCost[37:0];
+
+
+wire	[32-1:0]				uzCost__0;
+wire	[32-1:0]				uzCost__1;
+wire	[32-1:0]				uzCost__2;
+wire	[32-1:0]				uzCost__3;
+wire	[32-1:0]				uzCost__4;
+wire	[32-1:0]				uzCost__5;
+wire	[32-1:0]				uzCost__6;
+wire	[32-1:0]				uzCost__7;
+wire	[32-1:0]				uzCost__8;
+wire	[32-1:0]				uzCost__9;
+wire	[32-1:0]				uzCost__10;
+wire	[32-1:0]				uzCost__11;
+wire	[32-1:0]				uzCost__12;
+wire	[32-1:0]				uzCost__13;
+wire	[32-1:0]				uzCost__14;
+wire	[32-1:0]				uzCost__15;
+wire	[32-1:0]				uzCost__16;
+wire	[32-1:0]				uzCost__17;
+wire	[32-1:0]				uzCost__18;
+wire	[32-1:0]				uzCost__19;
+wire	[32-1:0]				uzCost__20;
+wire	[32-1:0]				uzCost__21;
+wire	[32-1:0]				uzCost__22;
+wire	[32-1:0]				uzCost__23;
+wire	[32-1:0]				uzCost__24;
+wire	[32-1:0]				uzCost__25;
+wire	[32-1:0]				uzCost__26;
+wire	[32-1:0]				uzCost__27;
+wire	[32-1:0]				uzCost__28;
+wire	[32-1:0]				uzCost__29;
+wire	[32-1:0]				uzCost__30;
+wire	[32-1:0]				uzCost__31;
+wire	[32-1:0]				uzCost__32;
+wire	[32-1:0]				uzCost__33;
+wire	[32-1:0]				uzCost__34;
+wire	[32-1:0]				uzCost__35;
+wire	[32-1:0]				uzCost__36;
+wire	[32-1:0]				uzCost__37;
+
+
+//wire		[31:0]		sqrtOneMinusUz2_inv[37:0];
+
+
+wire	[32-1:0]				sqrtOneMinusUz2_inv__0;
+wire	[32-1:0]				sqrtOneMinusUz2_inv__1;
+wire	[32-1:0]				sqrtOneMinusUz2_inv__2;
+wire	[32-1:0]				sqrtOneMinusUz2_inv__3;
+wire	[32-1:0]				sqrtOneMinusUz2_inv__4;
+wire	[32-1:0]				sqrtOneMinusUz2_inv__5;
+wire	[32-1:0]				sqrtOneMinusUz2_inv__6;
+wire	[32-1:0]				sqrtOneMinusUz2_inv__7;
+wire	[32-1:0]				sqrtOneMinusUz2_inv__8;
+wire	[32-1:0]				sqrtOneMinusUz2_inv__9;
+wire	[32-1:0]				sqrtOneMinusUz2_inv__10;
+wire	[32-1:0]				sqrtOneMinusUz2_inv__11;
+wire	[32-1:0]				sqrtOneMinusUz2_inv__12;
+wire	[32-1:0]				sqrtOneMinusUz2_inv__13;
+wire	[32-1:0]				sqrtOneMinusUz2_inv__14;
+wire	[32-1:0]				sqrtOneMinusUz2_inv__15;
+wire	[32-1:0]				sqrtOneMinusUz2_inv__16;
+wire	[32-1:0]				sqrtOneMinusUz2_inv__17;
+wire	[32-1:0]				sqrtOneMinusUz2_inv__18;
+wire	[32-1:0]				sqrtOneMinusUz2_inv__19;
+wire	[32-1:0]				sqrtOneMinusUz2_inv__20;
+wire	[32-1:0]				sqrtOneMinusUz2_inv__21;
+wire	[32-1:0]				sqrtOneMinusUz2_inv__22;
+wire	[32-1:0]				sqrtOneMinusUz2_inv__23;
+wire	[32-1:0]				sqrtOneMinusUz2_inv__24;
+wire	[32-1:0]				sqrtOneMinusUz2_inv__25;
+wire	[32-1:0]				sqrtOneMinusUz2_inv__26;
+wire	[32-1:0]				sqrtOneMinusUz2_inv__27;
+wire	[32-1:0]				sqrtOneMinusUz2_inv__28;
+wire	[32-1:0]				sqrtOneMinusUz2_inv__29;
+wire	[32-1:0]				sqrtOneMinusUz2_inv__30;
+wire	[32-1:0]				sqrtOneMinusUz2_inv__31;
+wire	[32-1:0]				sqrtOneMinusUz2_inv__32;
+wire	[32-1:0]				sqrtOneMinusUz2_inv__33;
+wire	[32-1:0]				sqrtOneMinusUz2_inv__34;
+wire	[32-1:0]				sqrtOneMinusUz2_inv__35;
+wire	[32-1:0]				sqrtOneMinusUz2_inv__36;
+wire	[32-1:0]				sqrtOneMinusUz2_inv__37;
+
+//wire		[31:0]		uxNumerator[37:0];
+
+
+wire	[32-1:0]				uxNumerator__0;
+wire	[32-1:0]				uxNumerator__1;
+wire	[32-1:0]				uxNumerator__2;
+wire	[32-1:0]				uxNumerator__3;
+wire	[32-1:0]				uxNumerator__4;
+wire	[32-1:0]				uxNumerator__5;
+wire	[32-1:0]				uxNumerator__6;
+wire	[32-1:0]				uxNumerator__7;
+wire	[32-1:0]				uxNumerator__8;
+wire	[32-1:0]				uxNumerator__9;
+wire	[32-1:0]				uxNumerator__10;
+wire	[32-1:0]				uxNumerator__11;
+wire	[32-1:0]				uxNumerator__12;
+wire	[32-1:0]				uxNumerator__13;
+wire	[32-1:0]				uxNumerator__14;
+wire	[32-1:0]				uxNumerator__15;
+wire	[32-1:0]				uxNumerator__16;
+wire	[32-1:0]				uxNumerator__17;
+wire	[32-1:0]				uxNumerator__18;
+wire	[32-1:0]				uxNumerator__19;
+wire	[32-1:0]				uxNumerator__20;
+wire	[32-1:0]				uxNumerator__21;
+wire	[32-1:0]				uxNumerator__22;
+wire	[32-1:0]				uxNumerator__23;
+wire	[32-1:0]				uxNumerator__24;
+wire	[32-1:0]				uxNumerator__25;
+wire	[32-1:0]				uxNumerator__26;
+wire	[32-1:0]				uxNumerator__27;
+wire	[32-1:0]				uxNumerator__28;
+wire	[32-1:0]				uxNumerator__29;
+wire	[32-1:0]				uxNumerator__30;
+wire	[32-1:0]				uxNumerator__31;
+wire	[32-1:0]				uxNumerator__32;
+wire	[32-1:0]				uxNumerator__33;
+wire	[32-1:0]				uxNumerator__34;
+wire	[32-1:0]				uxNumerator__35;
+wire	[32-1:0]				uxNumerator__36;
+wire	[32-1:0]				uxNumerator__37;
+
+//wire		[31:0]		uyNumerator[37:0];
+
+
+wire	[32-1:0]				uyNumerator__0;
+wire	[32-1:0]				uyNumerator__1;
+wire	[32-1:0]				uyNumerator__2;
+wire	[32-1:0]				uyNumerator__3;
+wire	[32-1:0]				uyNumerator__4;
+wire	[32-1:0]				uyNumerator__5;
+wire	[32-1:0]				uyNumerator__6;
+wire	[32-1:0]				uyNumerator__7;
+wire	[32-1:0]				uyNumerator__8;
+wire	[32-1:0]				uyNumerator__9;
+wire	[32-1:0]				uyNumerator__10;
+wire	[32-1:0]				uyNumerator__11;
+wire	[32-1:0]				uyNumerator__12;
+wire	[32-1:0]				uyNumerator__13;
+wire	[32-1:0]				uyNumerator__14;
+wire	[32-1:0]				uyNumerator__15;
+wire	[32-1:0]				uyNumerator__16;
+wire	[32-1:0]				uyNumerator__17;
+wire	[32-1:0]				uyNumerator__18;
+wire	[32-1:0]				uyNumerator__19;
+wire	[32-1:0]				uyNumerator__20;
+wire	[32-1:0]				uyNumerator__21;
+wire	[32-1:0]				uyNumerator__22;
+wire	[32-1:0]				uyNumerator__23;
+wire	[32-1:0]				uyNumerator__24;
+wire	[32-1:0]				uyNumerator__25;
+wire	[32-1:0]				uyNumerator__26;
+wire	[32-1:0]				uyNumerator__27;
+wire	[32-1:0]				uyNumerator__28;
+wire	[32-1:0]				uyNumerator__29;
+wire	[32-1:0]				uyNumerator__30;
+wire	[32-1:0]				uyNumerator__31;
+wire	[32-1:0]				uyNumerator__32;
+wire	[32-1:0]				uyNumerator__33;
+wire	[32-1:0]				uyNumerator__34;
+wire	[32-1:0]				uyNumerator__35;
+wire	[32-1:0]				uyNumerator__36;
+wire	[32-1:0]				uyNumerator__37;
+
+//wire		[31:0]		uyCost[37:0];
+
+
+wire	[32-1:0]				uyCost__0;
+wire	[32-1:0]				uyCost__1;
+wire	[32-1:0]				uyCost__2;
+wire	[32-1:0]				uyCost__3;
+wire	[32-1:0]				uyCost__4;
+wire	[32-1:0]				uyCost__5;
+wire	[32-1:0]				uyCost__6;
+wire	[32-1:0]				uyCost__7;
+wire	[32-1:0]				uyCost__8;
+wire	[32-1:0]				uyCost__9;
+wire	[32-1:0]				uyCost__10;
+wire	[32-1:0]				uyCost__11;
+wire	[32-1:0]				uyCost__12;
+wire	[32-1:0]				uyCost__13;
+wire	[32-1:0]				uyCost__14;
+wire	[32-1:0]				uyCost__15;
+wire	[32-1:0]				uyCost__16;
+wire	[32-1:0]				uyCost__17;
+wire	[32-1:0]				uyCost__18;
+wire	[32-1:0]				uyCost__19;
+wire	[32-1:0]				uyCost__20;
+wire	[32-1:0]				uyCost__21;
+wire	[32-1:0]				uyCost__22;
+wire	[32-1:0]				uyCost__23;
+wire	[32-1:0]				uyCost__24;
+wire	[32-1:0]				uyCost__25;
+wire	[32-1:0]				uyCost__26;
+wire	[32-1:0]				uyCost__27;
+wire	[32-1:0]				uyCost__28;
+wire	[32-1:0]				uyCost__29;
+wire	[32-1:0]				uyCost__30;
+wire	[32-1:0]				uyCost__31;
+wire	[32-1:0]				uyCost__32;
+wire	[32-1:0]				uyCost__33;
+wire	[32-1:0]				uyCost__34;
+wire	[32-1:0]				uyCost__35;
+wire	[32-1:0]				uyCost__36;
+wire	[32-1:0]				uyCost__37;
+
+//wire		[31:0]		uxQuotient[37:0];
+
+
+wire	[32-1:0]				uxQuotient__0;
+wire	[32-1:0]				uxQuotient__1;
+wire	[32-1:0]				uxQuotient__2;
+wire	[32-1:0]				uxQuotient__3;
+wire	[32-1:0]				uxQuotient__4;
+wire	[32-1:0]				uxQuotient__5;
+wire	[32-1:0]				uxQuotient__6;
+wire	[32-1:0]				uxQuotient__7;
+wire	[32-1:0]				uxQuotient__8;
+wire	[32-1:0]				uxQuotient__9;
+wire	[32-1:0]				uxQuotient__10;
+wire	[32-1:0]				uxQuotient__11;
+wire	[32-1:0]				uxQuotient__12;
+wire	[32-1:0]				uxQuotient__13;
+wire	[32-1:0]				uxQuotient__14;
+wire	[32-1:0]				uxQuotient__15;
+wire	[32-1:0]				uxQuotient__16;
+wire	[32-1:0]				uxQuotient__17;
+wire	[32-1:0]				uxQuotient__18;
+wire	[32-1:0]				uxQuotient__19;
+wire	[32-1:0]				uxQuotient__20;
+wire	[32-1:0]				uxQuotient__21;
+wire	[32-1:0]				uxQuotient__22;
+wire	[32-1:0]				uxQuotient__23;
+wire	[32-1:0]				uxQuotient__24;
+wire	[32-1:0]				uxQuotient__25;
+wire	[32-1:0]				uxQuotient__26;
+wire	[32-1:0]				uxQuotient__27;
+wire	[32-1:0]				uxQuotient__28;
+wire	[32-1:0]				uxQuotient__29;
+wire	[32-1:0]				uxQuotient__30;
+wire	[32-1:0]				uxQuotient__31;
+wire	[32-1:0]				uxQuotient__32;
+wire	[32-1:0]				uxQuotient__33;
+wire	[32-1:0]				uxQuotient__34;
+wire	[32-1:0]				uxQuotient__35;
+wire	[32-1:0]				uxQuotient__36;
+wire	[32-1:0]				uxQuotient__37;
+
+//wire		[31:0]		uyQuotient[37:0];
+
+
+wire	[32-1:0]				uyQuotient__0;
+wire	[32-1:0]				uyQuotient__1;
+wire	[32-1:0]				uyQuotient__2;
+wire	[32-1:0]				uyQuotient__3;
+wire	[32-1:0]				uyQuotient__4;
+wire	[32-1:0]				uyQuotient__5;
+wire	[32-1:0]				uyQuotient__6;
+wire	[32-1:0]				uyQuotient__7;
+wire	[32-1:0]				uyQuotient__8;
+wire	[32-1:0]				uyQuotient__9;
+wire	[32-1:0]				uyQuotient__10;
+wire	[32-1:0]				uyQuotient__11;
+wire	[32-1:0]				uyQuotient__12;
+wire	[32-1:0]				uyQuotient__13;
+wire	[32-1:0]				uyQuotient__14;
+wire	[32-1:0]				uyQuotient__15;
+wire	[32-1:0]				uyQuotient__16;
+wire	[32-1:0]				uyQuotient__17;
+wire	[32-1:0]				uyQuotient__18;
+wire	[32-1:0]				uyQuotient__19;
+wire	[32-1:0]				uyQuotient__20;
+wire	[32-1:0]				uyQuotient__21;
+wire	[32-1:0]				uyQuotient__22;
+wire	[32-1:0]				uyQuotient__23;
+wire	[32-1:0]				uyQuotient__24;
+wire	[32-1:0]				uyQuotient__25;
+wire	[32-1:0]				uyQuotient__26;
+wire	[32-1:0]				uyQuotient__27;
+wire	[32-1:0]				uyQuotient__28;
+wire	[32-1:0]				uyQuotient__29;
+wire	[32-1:0]				uyQuotient__30;
+wire	[32-1:0]				uyQuotient__31;
+wire	[32-1:0]				uyQuotient__32;
+wire	[32-1:0]				uyQuotient__33;
+wire	[32-1:0]				uyQuotient__34;
+wire	[32-1:0]				uyQuotient__35;
+wire	[32-1:0]				uyQuotient__36;
+wire	[32-1:0]				uyQuotient__37;
+
+wire		[31:0]		new_sint;
+wire		[31:0]		new_cost;
+wire		[31:0]		new_sinp;
+wire		[31:0]		new_cosp;
+wire		[31:0]		new_sintCosp;
+wire		[31:0]		new_sintSinp;
+wire		[63:0]		new_uz2;
+wire		[31:0]		new_uxUz;
+wire		[31:0]		new_uyUz;
+wire		[31:0]		new_uySintSinp;
+wire		[63:0]		new_oneMinusUz2;
+wire		[31:0]		new_uyUzSintCosp;
+wire		[31:0]		new_uxUzSintCosp;
+wire		[31:0]		new_uxSintSinp;
+wire		[31:0]		new_sqrtOneMinusUz2;
+wire		[31:0]		new_sintCospSqrtOneMinusUz2;
+wire		[31:0]		new_uxCost;
+wire		[31:0]		new_uzCost;
+wire		[31:0]		new_sqrtOneMinusUz2_inv;
+wire		[31:0]		new_uxNumerator;
+wire		[31:0]		new_uyNumerator;
+wire		[31:0]		new_uyCost;
+reg		[31:0]		new_uxQuotient;
+reg		[31:0]		new_uyQuotient;
+
+
+//Wiring for calculating final values
+wire				uxNumerOverflow;
+wire				uyNumerOverflow;
+reg					normalIncident;
+wire		[31:0]		ux_add_1;
+wire		[31:0]		ux_add_2;
+wire					uxOverflow;
+wire		[31:0]		uy_add_1;
+wire		[31:0]		uy_add_2;
+wire					uyOverflow;
+wire		[31:0]		normalUz;
+wire		[31:0]		uz_sub_1;
+wire		[31:0]		uz_sub_2;
+wire					uzOverflow;
+	
+wire		[31:0]		new_ux;
+wire		[31:0]		new_uy;
+wire		[31:0]		new_uz;
+
+wire				div_overflow;
+wire				toAnd1_36_1;
+wire				toAnd1_36_2;
+wire				overflow1_36;
+wire				negOverflow1_36;
+wire				toAnd2_36_1;
+wire				toAnd2_36_2;
+wire				overflow2_36;
+wire				negOverflow2_36;
+
+
+
+//------------------Register Pipeline-----------------
+//Generation Methodology: Standard block, called InternalsBlock, is
+//repeated multiple times, based on the latency of the reflector and
+//scatterer.  This block contains the list of all internal variables
+//that need to be registered and passed along in the pipeline.
+//
+//Previous values in the pipeline are passed to the next register on each
+//clock tick.  The exception comes when an internal variable gets
+//calculated.  Each time a new internal variable is calculated, a new
+//case is added to the case statement, and instead of hooking previous
+//values of that variable to next, the new, calculated values are hooked up.
+//
+//This method will generate many more registers than what are required, but
+//it is expected that the synthesis tool will synthesize these away.
+//
+//
+//Commenting Convention: Whenever a new value is injected into the pipe, the
+//comment //Changed Value is added directly above the variable in question.
+//When multiple values are calculated in a single clock cycle, multiple such
+//comments are placed.  Wires connected to "Changed Values" always start with
+//the prefix new_.
+//
+//GENERATE PIPELINE
+//genvar i;
+//generate
+//	for(i=`LAT; i>0; i=i-1) begin: internalPipe
+//		case(i)
+//		
+//		2:
+//		InternalsBlock pipeReg(
+//			//Inputs
+//			.clock(clock),
+//			.reset(reset),
+//			.enable(enable),
+//			
+//			.i_sint(sint[i-1]),
+//			.i_cost(cost[i-1]),
+//			.i_sinp(sinp[i-1]),
+//			.i_cosp(cosp[i-1]),
+//			.i_sintCosp(sintCosp[i-1]),
+//			.i_sintSinp(sintSinp[i-1]),
+//			//Changed Value
+//			.i_uz2(new_uz2),
+//			.i_uxUz(uxUz[i-1]),
+//			.i_uyUz(uyUz[i-1]),
+//			.i_uySintSinp(uySintSinp[i-1]),
+//			.i_oneMinusUz2(oneMinusUz2[i-1]),
+//			.i_uyUzSintCosp(uyUzSintCosp[i-1]),
+//			.i_uxUzSintCosp(uxUzSintCosp[i-1]),
+//			.i_uxSintSinp(uxSintSinp[i-1]),
+//			.i_sqrtOneMinusUz2(sqrtOneMinusUz2[i-1]),
+//			.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2[i-1]),
+//			.i_uxCost(uxCost[i-1]),
+//			.i_uzCost(uzCost[i-1]),
+//			.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv[i-1]),
+//			.i_uxNumerator(uxNumerator[i-1]),
+//			.i_uyNumerator(uyNumerator[i-1]),
+//			.i_uyCost(uyCost[i-1]),
+//			.i_uxQuotient(uxQuotient[i-1]),
+//			.i_uyQuotient(uyQuotient[i-1]),
+//			
+//			//Outputs			
+//			.o_sint(sint[i]),
+//			.o_cost(cost[i]),
+//			.o_sinp(sinp[i]),
+//			.o_cosp(cosp[i]),
+//			.o_sintCosp(sintCosp[i]),
+//			.o_sintSinp(sintSinp[i]),
+//			.o_uz2(uz2[i]),
+//			.o_uxUz(uxUz[i]),
+//			.o_uyUz(uyUz[i]),
+//			.o_uySintSinp(uySintSinp[i]),
+//			.o_oneMinusUz2(oneMinusUz2[i]),
+//			.o_uyUzSintCosp(uyUzSintCosp[i]),
+//			.o_uxUzSintCosp(uxUzSintCosp[i]),
+//			.o_uxSintSinp(uxSintSinp[i]),
+//			.o_sqrtOneMinusUz2(sqrtOneMinusUz2[i]),
+//			.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2[i]),
+//			.o_uxCost(uxCost[i]),
+//			.o_uzCost(uzCost[i]),
+//			.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv[i]),
+//			.o_uxNumerator(uxNumerator[i]),
+//			.o_uyNumerator(uyNumerator[i]),
+//			.o_uyCost(uyCost[i]),
+//			.o_uxQuotient(uxQuotient[i]),
+//			.o_uyQuotient(uyQuotient[i])
+//		);
+//		3:
+//		InternalsBlock pipeReg(
+//			//Inputs
+//			.clock(clock),
+//			.reset(reset),
+//			.enable(enable),
+//			
+//			.i_sint(sint[i-1]),
+//			.i_cost(cost[i-1]),
+//			.i_sinp(sinp[i-1]),
+//			.i_cosp(cosp[i-1]),
+//			.i_sintCosp(sintCosp[i-1]),
+//			.i_sintSinp(sintSinp[i-1]),
+//			.i_uz2(uz2[i-1]),
+//			.i_uxUz(uxUz[i-1]),
+//			.i_uyUz(uyUz[i-1]),
+//			.i_uySintSinp(uySintSinp[i-1]),
+//			//Changed Value
+//			.i_oneMinusUz2(new_oneMinusUz2),
+//			.i_uyUzSintCosp(uyUzSintCosp[i-1]),
+//			.i_uxUzSintCosp(uxUzSintCosp[i-1]),
+//			.i_uxSintSinp(uxSintSinp[i-1]),
+//			.i_sqrtOneMinusUz2(sqrtOneMinusUz2[i-1]),
+//			.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2[i-1]),
+//			.i_uxCost(uxCost[i-1]),
+//			.i_uzCost(uzCost[i-1]),
+//			.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv[i-1]),
+//			.i_uxNumerator(uxNumerator[i-1]),
+//			.i_uyNumerator(uyNumerator[i-1]),
+//			.i_uyCost(uyCost[i-1]),
+//			.i_uxQuotient(uxQuotient[i-1]),
+//			.i_uyQuotient(uyQuotient[i-1]),
+//			
+//			//Outputs			
+//			.o_sint(sint[i]),
+//			.o_cost(cost[i]),
+//			.o_sinp(sinp[i]),
+//			.o_cosp(cosp[i]),
+//			.o_sintCosp(sintCosp[i]),
+//			.o_sintSinp(sintSinp[i]),
+//			.o_uz2(uz2[i]),
+//			.o_uxUz(uxUz[i]),
+//			.o_uyUz(uyUz[i]),
+//			.o_uySintSinp(uySintSinp[i]),
+//			.o_oneMinusUz2(oneMinusUz2[i]),
+//			.o_uyUzSintCosp(uyUzSintCosp[i]),
+//			.o_uxUzSintCosp(uxUzSintCosp[i]),
+//			.o_uxSintSinp(uxSintSinp[i]),
+//			.o_sqrtOneMinusUz2(sqrtOneMinusUz2[i]),
+//			.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2[i]),
+//			.o_uxCost(uxCost[i]),
+//			.o_uzCost(uzCost[i]),
+//			.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv[i]),
+//			.o_uxNumerator(uxNumerator[i]),
+//			.o_uyNumerator(uyNumerator[i]),
+//			.o_uyCost(uyCost[i]),
+//			.o_uxQuotient(uxQuotient[i]),
+//			.o_uyQuotient(uyQuotient[i])
+//		);
+//		4:
+//		InternalsBlock pipeReg(
+//			//Inputs
+//			.clock(clock),
+//			.reset(reset),
+//			.enable(enable),
+//			
+//			.i_sint(sint[i-1]),
+//			.i_cost(cost[i-1]),
+//			.i_sinp(sinp[i-1]),
+//			.i_cosp(cosp[i-1]),
+//			.i_sintCosp(sintCosp[i-1]),
+//			.i_sintSinp(sintSinp[i-1]),
+//			.i_uz2(uz2[i-1]),
+//			//Changed Value
+//			.i_uxUz(new_uxUz),
+//			.i_uyUz(uyUz[i-1]),
+//			.i_uySintSinp(uySintSinp[i-1]),
+//			.i_oneMinusUz2(oneMinusUz2[i-1]),
+//			.i_uyUzSintCosp(uyUzSintCosp[i-1]),
+//			.i_uxUzSintCosp(uxUzSintCosp[i-1]),
+//			.i_uxSintSinp(uxSintSinp[i-1]),
+//			.i_sqrtOneMinusUz2(sqrtOneMinusUz2[i-1]),
+//			.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2[i-1]),
+//			.i_uxCost(uxCost[i-1]),
+//			.i_uzCost(uzCost[i-1]),
+//			.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv[i-1]),
+//			.i_uxNumerator(uxNumerator[i-1]),
+//			.i_uyNumerator(uyNumerator[i-1]),
+//			.i_uyCost(uyCost[i-1]),
+//			.i_uxQuotient(uxQuotient[i-1]),
+//			.i_uyQuotient(uyQuotient[i-1]),
+//			
+//			//Outputs			
+//			.o_sint(sint[i]),
+//			.o_cost(cost[i]),
+//			.o_sinp(sinp[i]),
+//			.o_cosp(cosp[i]),
+//			.o_sintCosp(sintCosp[i]),
+//			.o_sintSinp(sintSinp[i]),
+//			.o_uz2(uz2[i]),
+//			.o_uxUz(uxUz[i]),
+//			.o_uyUz(uyUz[i]),
+//			.o_uySintSinp(uySintSinp[i]),
+//			.o_oneMinusUz2(oneMinusUz2[i]),
+//			.o_uyUzSintCosp(uyUzSintCosp[i]),
+//			.o_uxUzSintCosp(uxUzSintCosp[i]),
+//			.o_uxSintSinp(uxSintSinp[i]),
+//			.o_sqrtOneMinusUz2(sqrtOneMinusUz2[i]),
+//			.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2[i]),
+//			.o_uxCost(uxCost[i]),
+//			.o_uzCost(uzCost[i]),
+//			.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv[i]),
+//			.o_uxNumerator(uxNumerator[i]),
+//			.o_uyNumerator(uyNumerator[i]),
+//			.o_uyCost(uyCost[i]),
+//			.o_uxQuotient(uxQuotient[i]),
+//			.o_uyQuotient(uyQuotient[i])
+//		);
+//		(`SQRT+6):
+//		InternalsBlock pipeReg(
+//			//Inputs
+//			.clock(clock),
+//			.reset(reset),
+//			.enable(enable),
+//			
+//			.i_sint(sint[i-1]),
+//			.i_cost(cost[i-1]),
+//			.i_sinp(sinp[i-1]),
+//			.i_cosp(cosp[i-1]),
+//			.i_sintCosp(sintCosp[i-1]),
+//			.i_sintSinp(sintSinp[i-1]),
+//			.i_uz2(uz2[i-1]),
+//			.i_uxUz(uxUz[i-1]),
+//			.i_uyUz(uyUz[i-1]),
+//			.i_uySintSinp(uySintSinp[i-1]),
+//			.i_oneMinusUz2(oneMinusUz2[i-1]),
+//			.i_uyUzSintCosp(uyUzSintCosp[i-1]),
+//			.i_uxUzSintCosp(uxUzSintCosp[i-1]),
+//			.i_uxSintSinp(uxSintSinp[i-1]),
+//			//Changed Value
+//			.i_sqrtOneMinusUz2(new_sqrtOneMinusUz2),
+//			.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2[i-1]),
+//			.i_uxCost(uxCost[i-1]),
+//			.i_uzCost(uzCost[i-1]),
+//			.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv[i-1]),
+//			.i_uxNumerator(uxNumerator[i-1]),
+//			.i_uyNumerator(uyNumerator[i-1]),
+//			.i_uyCost(uyCost[i-1]),
+//			.i_uxQuotient(uxQuotient[i-1]),
+//			.i_uyQuotient(uyQuotient[i-1]),
+//			
+//			//Outputs			
+//			.o_sint(sint[i]),
+//			.o_cost(cost[i]),
+//			.o_sinp(sinp[i]),
+//			.o_cosp(cosp[i]),
+//			.o_sintCosp(sintCosp[i]),
+//			.o_sintSinp(sintSinp[i]),
+//			.o_uz2(uz2[i]),
+//			.o_uxUz(uxUz[i]),
+//			.o_uyUz(uyUz[i]),
+//			.o_uySintSinp(uySintSinp[i]),
+//			.o_oneMinusUz2(oneMinusUz2[i]),
+//			.o_uyUzSintCosp(uyUzSintCosp[i]),
+//			.o_uxUzSintCosp(uxUzSintCosp[i]),
+//			.o_uxSintSinp(uxSintSinp[i]),
+//			.o_sqrtOneMinusUz2(sqrtOneMinusUz2[i]),
+//			.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2[i]),
+//			.o_uxCost(uxCost[i]),
+//			.o_uzCost(uzCost[i]),
+//			.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv[i]),
+//			.o_uxNumerator(uxNumerator[i]),
+//			.o_uyNumerator(uyNumerator[i]),
+//			.o_uyCost(uyCost[i]),
+//			.o_uxQuotient(uxQuotient[i]),
+//			.o_uyQuotient(uyQuotient[i])
+//		);
+//		
+//		(`SQRT+`DIV+3):
+//		InternalsBlock pipeReg(
+//			//Inputs
+//			.clock(clock),
+//			.reset(reset),
+//			.enable(enable),
+//			
+//			//Changed Value
+//			.i_sint(new_sint),
+//			//Changed Value
+//			.i_cost(new_cost),
+//			//Changed Value
+//			.i_sinp(new_sinp),
+//			//Changed Value
+//			.i_cosp(new_cosp),
+//			//Changed Value
+//			.i_sintCosp(new_sintCosp),
+//			//Changed Value
+//			.i_sintSinp(new_sintSinp),
+//			.i_uz2(uz2[i-1]),
+//			.i_uxUz(uxUz[i-1]),
+//			//Changed Value
+//			.i_uyUz(new_uyUz),
+//			.i_uySintSinp(uySintSinp[i-1]),
+//			.i_oneMinusUz2(oneMinusUz2[i-1]),
+//			.i_uyUzSintCosp(uyUzSintCosp[i-1]),
+//			.i_uxUzSintCosp(uxUzSintCosp[i-1]),
+//			.i_uxSintSinp(uxSintSinp[i-1]),
+//			.i_sqrtOneMinusUz2(sqrtOneMinusUz2[i-1]),
+//			.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2[i-1]),
+//			.i_uxCost(uxCost[i-1]),
+//			.i_uzCost(uzCost[i-1]),
+//			.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv[i-1]),
+//			.i_uxNumerator(uxNumerator[i-1]),
+//			.i_uyNumerator(uyNumerator[i-1]),
+//			.i_uyCost(uyCost[i-1]),
+//			.i_uxQuotient(uxQuotient[i-1]),
+//			.i_uyQuotient(uyQuotient[i-1]),
+//			
+//			//Outputs			
+//			.o_sint(sint[i]),
+//			.o_cost(cost[i]),
+//			.o_sinp(sinp[i]),
+//			.o_cosp(cosp[i]),
+//			.o_sintCosp(sintCosp[i]),
+//			.o_sintSinp(sintSinp[i]),
+//			.o_uz2(uz2[i]),
+//			.o_uxUz(uxUz[i]),
+//			.o_uyUz(uyUz[i]),
+//			.o_uySintSinp(uySintSinp[i]),
+//			.o_oneMinusUz2(oneMinusUz2[i]),
+//			.o_uyUzSintCosp(uyUzSintCosp[i]),
+//			.o_uxUzSintCosp(uxUzSintCosp[i]),
+//			.o_uxSintSinp(uxSintSinp[i]),
+//			.o_sqrtOneMinusUz2(sqrtOneMinusUz2[i]),
+//			.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2[i]),
+//			.o_uxCost(uxCost[i]),
+//			.o_uzCost(uzCost[i]),
+//			.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv[i]),
+//			.o_uxNumerator(uxNumerator[i]),
+//			.o_uyNumerator(uyNumerator[i]),
+//			.o_uyCost(uyCost[i]),
+//			.o_uxQuotient(uxQuotient[i]),
+//			.o_uyQuotient(uyQuotient[i])
+//		);
+//		
+//		(`SQRT+`DIV+4):
+//		InternalsBlock pipeReg(
+//			//Inputs
+//			.clock(clock),
+//			.reset(reset),
+//			.enable(enable),
+//			
+//			.i_sint(sint[i-1]),
+//			.i_cost(cost[i-1]),
+//			.i_sinp(sinp[i-1]),
+//			.i_cosp(cosp[i-1]),
+//			.i_sintCosp(sintCosp[i-1]),
+//			.i_sintSinp(sintSinp[i-1]),
+//			.i_uz2(uz2[i-1]),
+//			.i_uxUz(uxUz[i-1]),
+//			.i_uyUz(uyUz[i-1]),
+//			//Changed Value
+//			.i_uySintSinp(new_uySintSinp),
+//			.i_oneMinusUz2(oneMinusUz2[i-1]),
+//			//Changed Value
+//			.i_uyUzSintCosp(new_uyUzSintCosp),
+//			//Changed Value
+//			.i_uxUzSintCosp(new_uxUzSintCosp),
+//			//Changed Value
+//			.i_uxSintSinp(new_uxSintSinp),
+//			.i_sqrtOneMinusUz2(sqrtOneMinusUz2[i-1]),
+//			.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2[i-1]),
+//			.i_uxCost(uxCost[i-1]),
+//			.i_uzCost(uzCost[i-1]),
+//			.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv[i-1]),
+//			.i_uxNumerator(uxNumerator[i-1]),
+//			.i_uyNumerator(uyNumerator[i-1]),
+//			.i_uyCost(uyCost[i-1]),
+//			.i_uxQuotient(uxQuotient[i-1]),
+//			.i_uyQuotient(uyQuotient[i-1]),
+//			
+//			//Outputs			
+//			.o_sint(sint[i]),
+//			.o_cost(cost[i]),
+//			.o_sinp(sinp[i]),
+//			.o_cosp(cosp[i]),
+//			.o_sintCosp(sintCosp[i]),
+//			.o_sintSinp(sintSinp[i]),
+//			.o_uz2(uz2[i]),
+//			.o_uxUz(uxUz[i]),
+//			.o_uyUz(uyUz[i]),
+//			.o_uySintSinp(uySintSinp[i]),
+//			.o_oneMinusUz2(oneMinusUz2[i]),
+//			.o_uyUzSintCosp(uyUzSintCosp[i]),
+//			.o_uxUzSintCosp(uxUzSintCosp[i]),
+//			.o_uxSintSinp(uxSintSinp[i]),
+//			.o_sqrtOneMinusUz2(sqrtOneMinusUz2[i]),
+//			.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2[i]),
+//			.o_uxCost(uxCost[i]),
+//			.o_uzCost(uzCost[i]),
+//			.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv[i]),
+//			.o_uxNumerator(uxNumerator[i]),
+//			.o_uyNumerator(uyNumerator[i]),
+//			.o_uyCost(uyCost[i]),
+//			.o_uxQuotient(uxQuotient[i]),
+//			.o_uyQuotient(uyQuotient[i])
+//		);
+//		
+//		(`SQRT+`DIV+5):
+//		InternalsBlock pipeReg(
+//			//Inputs
+//			.clock(clock),
+//			.reset(reset),
+//			.enable(enable),
+//			
+//			.i_sint(sint[i-1]),
+//			.i_cost(cost[i-1]),
+//			.i_sinp(sinp[i-1]),
+//			.i_cosp(cosp[i-1]),
+//			.i_sintCosp(sintCosp[i-1]),
+//			.i_sintSinp(sintSinp[i-1]),
+//			.i_uz2(uz2[i-1]),
+//			.i_uxUz(uxUz[i-1]),
+//			.i_uyUz(uyUz[i-1]),
+//			.i_uySintSinp(uySintSinp[i-1]),
+//			.i_oneMinusUz2(oneMinusUz2[i-1]),
+//			.i_uyUzSintCosp(uyUzSintCosp[i-1]),
+//			.i_uxUzSintCosp(uxUzSintCosp[i-1]),
+//			.i_uxSintSinp(uxSintSinp[i-1]),
+//			.i_sqrtOneMinusUz2(sqrtOneMinusUz2[i-1]),
+//			.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2[i-1]),
+//			.i_uxCost(uxCost[i-1]),
+//			.i_uzCost(uzCost[i-1]),
+//			//Changed Value
+//			.i_sqrtOneMinusUz2_inv(new_sqrtOneMinusUz2_inv),
+//			//Changed Value
+//			.i_uxNumerator(new_uxNumerator),
+//			//Changed Value
+//			.i_uyNumerator(new_uyNumerator),
+//			.i_uyCost(uyCost[i-1]),
+//			.i_uxQuotient(uxQuotient[i-1]),
+//			.i_uyQuotient(uyQuotient[i-1]),
+//			
+//			//Outputs			
+//			.o_sint(sint[i]),
+//			.o_cost(cost[i]),
+//			.o_sinp(sinp[i]),
+//			.o_cosp(cosp[i]),
+//			.o_sintCosp(sintCosp[i]),
+//			.o_sintSinp(sintSinp[i]),
+//			.o_uz2(uz2[i]),
+//			.o_uxUz(uxUz[i]),
+//			.o_uyUz(uyUz[i]),
+//			.o_uySintSinp(uySintSinp[i]),
+//			.o_oneMinusUz2(oneMinusUz2[i]),
+//			.o_uyUzSintCosp(uyUzSintCosp[i]),
+//			.o_uxUzSintCosp(uxUzSintCosp[i]),
+//			.o_uxSintSinp(uxSintSinp[i]),
+//			.o_sqrtOneMinusUz2(sqrtOneMinusUz2[i]),
+//			.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2[i]),
+//			.o_uxCost(uxCost[i]),
+//			.o_uzCost(uzCost[i]),
+//			.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv[i]),
+//			.o_uxNumerator(uxNumerator[i]),
+//			.o_uyNumerator(uyNumerator[i]),
+//			.o_uyCost(uyCost[i]),
+//			.o_uxQuotient(uxQuotient[i]),
+//			.o_uyQuotient(uyQuotient[i])
+//		);
+//		
+//		(`SQRT+`DIV+6):
+//		InternalsBlock pipeReg(
+//			//Inputs
+//			.clock(clock),
+//			.reset(reset),
+//			.enable(enable),
+//
+//			.i_sint(sint[i-1]),
+//			.i_cost(cost[i-1]),
+//			.i_sinp(sinp[i-1]),
+//			.i_cosp(cosp[i-1]),
+//			.i_sintCosp(sintCosp[i-1]),
+//			.i_sintSinp(sintSinp[i-1]),
+//			.i_uz2(uz2[i-1]),
+//			.i_uxUz(uxUz[i-1]),
+//			.i_uyUz(uyUz[i-1]),
+//			.i_uySintSinp(uySintSinp[i-1]),
+//			.i_oneMinusUz2(oneMinusUz2[i-1]),
+//			.i_uyUzSintCosp(uyUzSintCosp[i-1]),
+//			.i_uxUzSintCosp(uxUzSintCosp[i-1]),
+//			.i_uxSintSinp(uxSintSinp[i-1]),
+//			.i_sqrtOneMinusUz2(sqrtOneMinusUz2[i-1]),
+//			//Changed Value
+//			.i_sintCospSqrtOneMinusUz2(new_sintCospSqrtOneMinusUz2),
+//			//Changed Value
+//			.i_uxCost(new_uxCost),
+//			//Changed Value
+//			.i_uzCost(new_uzCost),
+//			.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv[i-1]),
+//			.i_uxNumerator(uxNumerator[i-1]),
+//			.i_uyNumerator(uyNumerator[i-1]),
+//			//Changed Value
+//			.i_uyCost(new_uyCost),
+//			//Changed Value
+//			.i_uxQuotient(new_uxQuotient),
+//			//Changed Value
+//			.i_uyQuotient(new_uyQuotient),
+//			
+//			//Outputs			
+//			.o_sint(sint[i]),
+//			.o_cost(cost[i]),
+//			.o_sinp(sinp[i]),
+//			.o_cosp(cosp[i]),
+//			.o_sintCosp(sintCosp[i]),
+//			.o_sintSinp(sintSinp[i]),
+//			.o_uz2(uz2[i]),
+//			.o_uxUz(uxUz[i]),
+//			.o_uyUz(uyUz[i]),
+//			.o_uySintSinp(uySintSinp[i]),
+//			.o_oneMinusUz2(oneMinusUz2[i]),
+//			.o_uyUzSintCosp(uyUzSintCosp[i]),
+//			.o_uxUzSintCosp(uxUzSintCosp[i]),
+//			.o_uxSintSinp(uxSintSinp[i]),
+//			.o_sqrtOneMinusUz2(sqrtOneMinusUz2[i]),
+//			.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2[i]),
+//			.o_uxCost(uxCost[i]),
+//			.o_uzCost(uzCost[i]),
+//			.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv[i]),
+//			.o_uxNumerator(uxNumerator[i]),
+//			.o_uyNumerator(uyNumerator[i]),
+//			.o_uyCost(uyCost[i]),
+//			.o_uxQuotient(uxQuotient[i]),
+//			.o_uyQuotient(uyQuotient[i])
+//		);
+//		
+//		default:
+//		InternalsBlock pipeReg(
+//			//Inputs
+//			.clock(clock),
+//			.reset(reset),
+//			.enable(enable),
+//			
+//			.i_sint(sint[i-1]),
+//			.i_cost(cost[i-1]),
+//			.i_sinp(sinp[i-1]),
+//			.i_cosp(cosp[i-1]),
+//			.i_sintCosp(sintCosp[i-1]),
+//			.i_sintSinp(sintSinp[i-1]),
+//			.i_uz2(uz2[i-1]),
+//			.i_uxUz(uxUz[i-1]),
+//			.i_uyUz(uyUz[i-1]),
+//			.i_uySintSinp(uySintSinp[i-1]),
+//			.i_oneMinusUz2(oneMinusUz2[i-1]),
+//			.i_uyUzSintCosp(uyUzSintCosp[i-1]),
+//			.i_uxUzSintCosp(uxUzSintCosp[i-1]),
+//			.i_uxSintSinp(uxSintSinp[i-1]),
+//			.i_sqrtOneMinusUz2(sqrtOneMinusUz2[i-1]),
+//			.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2[i-1]),
+//			.i_uxCost(uxCost[i-1]),
+//			.i_uzCost(uzCost[i-1]),
+//			.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv[i-1]),
+//			.i_uxNumerator(uxNumerator[i-1]),
+//			.i_uyNumerator(uyNumerator[i-1]),
+//			.i_uyCost(uyCost[i-1]),
+//			.i_uxQuotient(uxQuotient[i-1]),
+//			.i_uyQuotient(uyQuotient[i-1]),
+//			
+//			//Outputs			
+//			.o_sint(sint[i]),
+//			.o_cost(cost[i]),
+//			.o_sinp(sinp[i]),
+//			.o_cosp(cosp[i]),
+//			.o_sintCosp(sintCosp[i]),
+//			.o_sintSinp(sintSinp[i]),
+//			.o_uz2(uz2[i]),
+//			.o_uxUz(uxUz[i]),
+//			.o_uyUz(uyUz[i]),
+//			.o_uySintSinp(uySintSinp[i]),
+//			.o_oneMinusUz2(oneMinusUz2[i]),
+//			.o_uyUzSintCosp(uyUzSintCosp[i]),
+//			.o_uxUzSintCosp(uxUzSintCosp[i]),
+//			.o_uxSintSinp(uxSintSinp[i]),
+//			.o_sqrtOneMinusUz2(sqrtOneMinusUz2[i]),
+//			.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2[i]),
+//			.o_uxCost(uxCost[i]),
+//			.o_uzCost(uzCost[i]),
+//			.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv[i]),
+//			.o_uxNumerator(uxNumerator[i]),
+//			.o_uyNumerator(uyNumerator[i]),
+//			.o_uyCost(uyCost[i]),
+//			.o_uxQuotient(uxQuotient[i]),
+//			.o_uyQuotient(uyQuotient[i])
+//		);
+//		endcase
+//	end
+//endgenerate	
+
+//Expanded generate loop:
+//special cases first
+		//forloop2
+		InternalsBlock pipeReg2(
+			//Inputs
+			.clock(clock),
+			.reset(reset),
+			.enable(enable),
+			
+			.i_sint(sint__1),
+			.i_cost(cost__1),
+			.i_sinp(sinp__1),
+			.i_cosp(cosp__1),
+			.i_sintCosp(sintCosp__1),
+			.i_sintSinp(sintSinp__1),
+			//Changed Value
+			.i_uz2(new_uz2),
+			.i_uxUz(uxUz__1),
+			.i_uyUz(uyUz__1),
+			.i_uySintSinp(uySintSinp__1),
+			.i_oneMinusUz2(oneMinusUz2__1),
+			.i_uyUzSintCosp(uyUzSintCosp__1),
+			.i_uxUzSintCosp(uxUzSintCosp__1),
+			.i_uxSintSinp(uxSintSinp__1),
+			.i_sqrtOneMinusUz2(sqrtOneMinusUz2__1),
+			.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__1),
+			.i_uxCost(uxCost__1),
+			.i_uzCost(uzCost__1),
+			.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__1),
+			.i_uxNumerator(uxNumerator__1),
+			.i_uyNumerator(uyNumerator__1),
+			.i_uyCost(uyCost__1),
+			.i_uxQuotient(uxQuotient__1),
+			.i_uyQuotient(uyQuotient__1),
+			
+			//Outputs			
+			.o_sint(sint__2),
+			.o_cost(cost__2),
+			.o_sinp(sinp__2),
+			.o_cosp(cosp__2),
+			.o_sintCosp(sintCosp__2),
+			.o_sintSinp(sintSinp__2),
+			.o_uz2(uz2__2),
+			.o_uxUz(uxUz__2),
+			.o_uyUz(uyUz__2),
+			.o_uySintSinp(uySintSinp__2),
+			.o_oneMinusUz2(oneMinusUz2__2),
+			.o_uyUzSintCosp(uyUzSintCosp__2),
+			.o_uxUzSintCosp(uxUzSintCosp__2),
+			.o_uxSintSinp(uxSintSinp__2),
+			.o_sqrtOneMinusUz2(sqrtOneMinusUz2__2),
+			.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__2),
+			.o_uxCost(uxCost__2),
+			.o_uzCost(uzCost__2),
+			.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__2),
+			.o_uxNumerator(uxNumerator__2),
+			.o_uyNumerator(uyNumerator__2),
+			.o_uyCost(uyCost__2),
+			.o_uxQuotient(uxQuotient__2),
+			.o_uyQuotient(uyQuotient__2)
+		);
+		
+		
+	//	forloop3
+		InternalsBlock pipeReg3(
+//Inputs
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_sint(sint__2),
+.i_cost(cost__2),
+.i_sinp(sinp__2),
+.i_cosp(cosp__2),
+.i_sintCosp(sintCosp__2),
+.i_sintSinp(sintSinp__2),
+.i_uz2(uz2__2),
+.i_uxUz(uxUz__2),
+.i_uyUz(uyUz__2),
+.i_uySintSinp(uySintSinp__2),
+//changed
+.i_oneMinusUz2(new_oneMinusUz2),
+.i_uyUzSintCosp(uyUzSintCosp__2),
+.i_uxUzSintCosp(uxUzSintCosp__2),
+.i_uxSintSinp(uxSintSinp__2),
+.i_sqrtOneMinusUz2(sqrtOneMinusUz2__2),
+.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__2),
+.i_uxCost(uxCost__2),
+.i_uzCost(uzCost__2),
+.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__2),
+.i_uxNumerator(uxNumerator__2),
+.i_uyNumerator(uyNumerator__2),
+.i_uyCost(uyCost__2),
+.i_uxQuotient(uxQuotient__2),
+.i_uyQuotient(uyQuotient__2),
+//Outputs			 
+.o_sint(sint__3),
+.o_cost(cost__3),
+.o_sinp(sinp__3),
+.o_cosp(cosp__3),
+.o_sintCosp(sintCosp__3),
+.o_sintSinp(sintSinp__3),
+.o_uz2(uz2__3),
+.o_uxUz(uxUz__3),
+.o_uyUz(uyUz__3),
+.o_uySintSinp(uySintSinp__3),
+.o_oneMinusUz2(oneMinusUz2__3),
+.o_uyUzSintCosp(uyUzSintCosp__3),
+.o_uxUzSintCosp(uxUzSintCosp__3),
+.o_uxSintSinp(uxSintSinp__3),
+.o_sqrtOneMinusUz2(sqrtOneMinusUz2__3),
+.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__3),
+.o_uxCost(uxCost__3),
+.o_uzCost(uzCost__3),
+.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__3),
+.o_uxNumerator(uxNumerator__3),
+.o_uyNumerator(uyNumerator__3),
+.o_uyCost(uyCost__3),
+.o_uxQuotient(uxQuotient__3),
+.o_uyQuotient(uyQuotient__3)
+);  
+
+		//forloop4:
+		InternalsBlock pipeReg4(
+//Inputs
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_sint(sint__3),
+.i_cost(cost__3),
+.i_sinp(sinp__3),
+.i_cosp(cosp__3),
+.i_sintCosp(sintCosp__3),
+.i_sintSinp(sintSinp__3),
+.i_uz2(uz2__3),
+//changed
+.i_uxUz(new_uxUz),
+.i_uyUz(uyUz__3),
+.i_uySintSinp(uySintSinp__3),
+.i_oneMinusUz2(oneMinusUz2__3),
+.i_uyUzSintCosp(uyUzSintCosp__3),
+.i_uxUzSintCosp(uxUzSintCosp__3),
+.i_uxSintSinp(uxSintSinp__3),
+.i_sqrtOneMinusUz2(sqrtOneMinusUz2__3),
+.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__3),
+.i_uxCost(uxCost__3),
+.i_uzCost(uzCost__3),
+.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__3),
+.i_uxNumerator(uxNumerator__3),
+.i_uyNumerator(uyNumerator__3),
+.i_uyCost(uyCost__3),
+.i_uxQuotient(uxQuotient__3),
+.i_uyQuotient(uyQuotient__3),
+//Outputs			 
+.o_sint(sint__4),
+.o_cost(cost__4),
+.o_sinp(sinp__4),
+.o_cosp(cosp__4),
+.o_sintCosp(sintCosp__4),
+.o_sintSinp(sintSinp__4),
+.o_uz2(uz2__4),
+.o_uxUz(uxUz__4),
+.o_uyUz(uyUz__4),
+.o_uySintSinp(uySintSinp__4),
+.o_oneMinusUz2(oneMinusUz2__4),
+.o_uyUzSintCosp(uyUzSintCosp__4),
+.o_uxUzSintCosp(uxUzSintCosp__4),
+.o_uxSintSinp(uxSintSinp__4),
+.o_sqrtOneMinusUz2(sqrtOneMinusUz2__4),
+.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__4),
+.o_uxCost(uxCost__4),
+.o_uzCost(uzCost__4),
+.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__4),
+.o_uxNumerator(uxNumerator__4),
+.o_uyNumerator(uyNumerator__4),
+.o_uyCost(uyCost__4),
+.o_uxQuotient(uxQuotient__4),
+.o_uyQuotient(uyQuotient__4)
+);  
+		
+InternalsBlock pipeReg16(
+//Inputs
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_sint(sint__15),
+.i_cost(cost__15),
+.i_sinp(sinp__15),
+.i_cosp(cosp__15),
+.i_sintCosp(sintCosp__15),
+.i_sintSinp(sintSinp__15),
+.i_uz2(uz2__15),
+.i_uxUz(uxUz__15),
+.i_uyUz(uyUz__15),
+.i_uySintSinp(uySintSinp__15),
+.i_oneMinusUz2(oneMinusUz2__15),
+.i_uyUzSintCosp(uyUzSintCosp__15),
+.i_uxUzSintCosp(uxUzSintCosp__15),
+.i_uxSintSinp(uxSintSinp__15),
+//changed
+.i_sqrtOneMinusUz2(new_sqrtOneMinusUz2),
+.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__15),
+.i_uxCost(uxCost__15),
+.i_uzCost(uzCost__15),
+.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__15),
+.i_uxNumerator(uxNumerator__15),
+.i_uyNumerator(uyNumerator__15),
+.i_uyCost(uyCost__15),
+.i_uxQuotient(uxQuotient__15),
+.i_uyQuotient(uyQuotient__15),
+//Outputs			 
+.o_sint(sint__16),
+.o_cost(cost__16),
+.o_sinp(sinp__16),
+.o_cosp(cosp__16),
+.o_sintCosp(sintCosp__16),
+.o_sintSinp(sintSinp__16),
+.o_uz2(uz2__16),
+.o_uxUz(uxUz__16),
+.o_uyUz(uyUz__16),
+.o_uySintSinp(uySintSinp__16),
+.o_oneMinusUz2(oneMinusUz2__16),
+.o_uyUzSintCosp(uyUzSintCosp__16),
+.o_uxUzSintCosp(uxUzSintCosp__16),
+.o_uxSintSinp(uxSintSinp__16),
+.o_sqrtOneMinusUz2(sqrtOneMinusUz2__16),
+.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__16),
+.o_uxCost(uxCost__16),
+.o_uzCost(uzCost__16),
+.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__16),
+.o_uxNumerator(uxNumerator__16),
+.o_uyNumerator(uyNumerator__16),
+.o_uyCost(uyCost__16),
+.o_uxQuotient(uxQuotient__16),
+.o_uyQuotient(uyQuotient__16)
+);  
+		
+		//forloop 33 (10+20+3):
+		
+InternalsBlock pipeReg33(
+//Inputs
+.clock(clock),
+.reset(reset),
+.enable(enable),
+//changed
+.i_sint(new_sint),
+//changed
+.i_cost(new_cost),
+//changed
+.i_sinp(new_sinp),
+//changed
+.i_cosp(new_cosp),
+//changed
+.i_sintCosp(new_sintCosp),
+//changed
+.i_sintSinp(new_sintSinp),
+.i_uz2(uz2__32),
+.i_uxUz(uxUz__32),
+//changed
+.i_uyUz(new_uyUz),
+.i_uySintSinp(uySintSinp__32),
+.i_oneMinusUz2(oneMinusUz2__32),
+.i_uyUzSintCosp(uyUzSintCosp__32),
+.i_uxUzSintCosp(uxUzSintCosp__32),
+.i_uxSintSinp(uxSintSinp__32),
+.i_sqrtOneMinusUz2(sqrtOneMinusUz2__32),
+.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__32),
+.i_uxCost(uxCost__32),
+.i_uzCost(uzCost__32),
+.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__32),
+.i_uxNumerator(uxNumerator__32),
+.i_uyNumerator(uyNumerator__32),
+.i_uyCost(uyCost__32),
+.i_uxQuotient(uxQuotient__32),
+.i_uyQuotient(uyQuotient__32),
+//Outputs			 
+.o_sint(sint__33),
+.o_cost(cost__33),
+.o_sinp(sinp__33),
+.o_cosp(cosp__33),
+.o_sintCosp(sintCosp__33),
+.o_sintSinp(sintSinp__33),
+.o_uz2(uz2__33),
+.o_uxUz(uxUz__33),
+.o_uyUz(uyUz__33),
+.o_uySintSinp(uySintSinp__33),
+.o_oneMinusUz2(oneMinusUz2__33),
+.o_uyUzSintCosp(uyUzSintCosp__33),
+.o_uxUzSintCosp(uxUzSintCosp__33),
+.o_uxSintSinp(uxSintSinp__33),
+.o_sqrtOneMinusUz2(sqrtOneMinusUz2__33),
+.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__33),
+.o_uxCost(uxCost__33),
+.o_uzCost(uzCost__33),
+.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__33),
+.o_uxNumerator(uxNumerator__33),
+.o_uyNumerator(uyNumerator__33),
+.o_uyCost(uyCost__33),
+.o_uxQuotient(uxQuotient__33),
+.o_uyQuotient(uyQuotient__33)
+);  
+		
+		//forloop34 (10+20+4):
+		
+InternalsBlock pipeReg34(
+//Inputs
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_sint(sint__33),
+.i_cost(cost__33),
+.i_sinp(sinp__33),
+.i_cosp(cosp__33),
+.i_sintCosp(sintCosp__33),
+.i_sintSinp(sintSinp__33),
+.i_uz2(uz2__33),
+.i_uxUz(uxUz__33),
+.i_uyUz(uyUz__33),
+//changed
+.i_uySintSinp(new_uySintSinp),
+.i_oneMinusUz2(oneMinusUz2__33),
+//changed
+.i_uyUzSintCosp(new_uyUzSintCosp),
+//changed
+.i_uxUzSintCosp(new_uxUzSintCosp),
+//changed
+.i_uxSintSinp(new_uxSintSinp),
+.i_sqrtOneMinusUz2(sqrtOneMinusUz2__33),
+.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__33),
+.i_uxCost(uxCost__33),
+.i_uzCost(uzCost__33),
+.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__33),
+.i_uxNumerator(uxNumerator__33),
+.i_uyNumerator(uyNumerator__33),
+.i_uyCost(uyCost__33),
+.i_uxQuotient(uxQuotient__33),
+.i_uyQuotient(uyQuotient__33),
+//Outputs			 
+.o_sint(sint__34),
+.o_cost(cost__34),
+.o_sinp(sinp__34),
+.o_cosp(cosp__34),
+.o_sintCosp(sintCosp__34),
+.o_sintSinp(sintSinp__34),
+.o_uz2(uz2__34),
+.o_uxUz(uxUz__34),
+.o_uyUz(uyUz__34),
+.o_uySintSinp(uySintSinp__34),
+.o_oneMinusUz2(oneMinusUz2__34),
+.o_uyUzSintCosp(uyUzSintCosp__34),
+.o_uxUzSintCosp(uxUzSintCosp__34),
+.o_uxSintSinp(uxSintSinp__34),
+.o_sqrtOneMinusUz2(sqrtOneMinusUz2__34),
+.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__34),
+.o_uxCost(uxCost__34),
+.o_uzCost(uzCost__34),
+.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__34),
+.o_uxNumerator(uxNumerator__34),
+.o_uyNumerator(uyNumerator__34),
+.o_uyCost(uyCost__34),
+.o_uxQuotient(uxQuotient__34),
+.o_uyQuotient(uyQuotient__34)
+);  
+		
+		//forloop35(10+20+5):
+		InternalsBlock pipeReg35(
+//Inputs
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_sint(sint__34),
+.i_cost(cost__34),
+.i_sinp(sinp__34),
+.i_cosp(cosp__34),
+.i_sintCosp(sintCosp__34),
+.i_sintSinp(sintSinp__34),
+.i_uz2(uz2__34),
+.i_uxUz(uxUz__34),
+.i_uyUz(uyUz__34),
+.i_uySintSinp(uySintSinp__34),
+.i_oneMinusUz2(oneMinusUz2__34),
+.i_uyUzSintCosp(uyUzSintCosp__34),
+.i_uxUzSintCosp(uxUzSintCosp__34),
+.i_uxSintSinp(uxSintSinp__34),
+.i_sqrtOneMinusUz2(sqrtOneMinusUz2__34),
+.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__34),
+.i_uxCost(uxCost__34),
+.i_uzCost(uzCost__34),
+//changedval
+.i_sqrtOneMinusUz2_inv(new_sqrtOneMinusUz2_inv),
+//changed
+.i_uxNumerator(new_uxNumerator),
+//changed
+.i_uyNumerator(new_uyNumerator),
+.i_uyCost(uyCost__34),
+.i_uxQuotient(uxQuotient__34),
+.i_uyQuotient(uyQuotient__34),
+//Outputs			 
+.o_sint(sint__35),
+.o_cost(cost__35),
+.o_sinp(sinp__35),
+.o_cosp(cosp__35),
+.o_sintCosp(sintCosp__35),
+.o_sintSinp(sintSinp__35),
+.o_uz2(uz2__35),
+.o_uxUz(uxUz__35),
+.o_uyUz(uyUz__35),
+.o_uySintSinp(uySintSinp__35),
+.o_oneMinusUz2(oneMinusUz2__35),
+.o_uyUzSintCosp(uyUzSintCosp__35),
+.o_uxUzSintCosp(uxUzSintCosp__35),
+.o_uxSintSinp(uxSintSinp__35),
+.o_sqrtOneMinusUz2(sqrtOneMinusUz2__35),
+.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__35),
+.o_uxCost(uxCost__35),
+.o_uzCost(uzCost__35),
+.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__35),
+.o_uxNumerator(uxNumerator__35),
+.o_uyNumerator(uyNumerator__35),
+.o_uyCost(uyCost__35),
+.o_uxQuotient(uxQuotient__35),
+.o_uyQuotient(uyQuotient__35)
+);  
+
+		
+	//forloop36	(10+20+6):
+		
+InternalsBlock pipeReg36(
+//Inputs
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_sint(sint__35),
+.i_cost(cost__35),
+.i_sinp(sinp__35),
+.i_cosp(cosp__35),
+.i_sintCosp(sintCosp__35),
+.i_sintSinp(sintSinp__35),
+.i_uz2(uz2__35),
+.i_uxUz(uxUz__35),
+.i_uyUz(uyUz__35),
+.i_uySintSinp(uySintSinp__35),
+.i_oneMinusUz2(oneMinusUz2__35),
+.i_uyUzSintCosp(uyUzSintCosp__35),
+.i_uxUzSintCosp(uxUzSintCosp__35),
+.i_uxSintSinp(uxSintSinp__35),
+.i_sqrtOneMinusUz2(sqrtOneMinusUz2__35),
+//changed
+.i_sintCospSqrtOneMinusUz2(new_sintCospSqrtOneMinusUz2),
+//changed
+.i_uxCost(new_uxCost),
+//changed
+.i_uzCost(new_uzCost),
+.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__35),
+.i_uxNumerator(uxNumerator__35),
+.i_uyNumerator(uyNumerator__35),
+//changed
+.i_uyCost(new_uyCost),
+//changed),
+.i_uxQuotient(new_uxQuotient),
+//cahgned
+.i_uyQuotient(new_uyQuotient),
+//Outputs			 
+.o_sint(sint__36),
+.o_cost(cost__36),
+.o_sinp(sinp__36),
+.o_cosp(cosp__36),
+.o_sintCosp(sintCosp__36),
+.o_sintSinp(sintSinp__36),
+.o_uz2(uz2__36),
+.o_uxUz(uxUz__36),
+.o_uyUz(uyUz__36),
+.o_uySintSinp(uySintSinp__36),
+.o_oneMinusUz2(oneMinusUz2__36),
+.o_uyUzSintCosp(uyUzSintCosp__36),
+.o_uxUzSintCosp(uxUzSintCosp__36),
+.o_uxSintSinp(uxSintSinp__36),
+.o_sqrtOneMinusUz2(sqrtOneMinusUz2__36),
+.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__36),
+.o_uxCost(uxCost__36),
+.o_uzCost(uzCost__36),
+.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__36),
+.o_uxNumerator(uxNumerator__36),
+.o_uyNumerator(uyNumerator__36),
+.o_uyCost(uyCost__36),
+.o_uxQuotient(uxQuotient__36),
+.o_uyQuotient(uyQuotient__36)
+);  
+
+InternalsBlock pipeReg37(
+//Inputs
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_sint(sint__36),
+.i_cost(cost__36),
+.i_sinp(sinp__36),
+.i_cosp(cosp__36),
+.i_sintCosp(sintCosp__36),
+.i_sintSinp(sintSinp__36),
+.i_uz2(uz2__36),
+.i_uxUz(uxUz__36),
+.i_uyUz(uyUz__36),
+.i_uySintSinp(uySintSinp__36),
+.i_oneMinusUz2(oneMinusUz2__36),
+.i_uyUzSintCosp(uyUzSintCosp__36),
+.i_uxUzSintCosp(uxUzSintCosp__36),
+.i_uxSintSinp(uxSintSinp__36),
+.i_sqrtOneMinusUz2(sqrtOneMinusUz2__36),
+.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__36),
+.i_uxCost(uxCost__36),
+.i_uzCost(uzCost__36),
+.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__36),
+.i_uxNumerator(uxNumerator__36),
+.i_uyNumerator(uyNumerator__36),
+.i_uyCost(uyCost__36),
+.i_uxQuotient(uxQuotient__36),
+.i_uyQuotient(uyQuotient__36),
+//Outputs			 
+.o_sint(sint__37),
+.o_cost(cost__37),
+.o_sinp(sinp__37),
+.o_cosp(cosp__37),
+.o_sintCosp(sintCosp__37),
+.o_sintSinp(sintSinp__37),
+.o_uz2(uz2__37),
+.o_uxUz(uxUz__37),
+.o_uyUz(uyUz__37),
+.o_uySintSinp(uySintSinp__37),
+.o_oneMinusUz2(oneMinusUz2__37),
+.o_uyUzSintCosp(uyUzSintCosp__37),
+.o_uxUzSintCosp(uxUzSintCosp__37),
+.o_uxSintSinp(uxSintSinp__37),
+.o_sqrtOneMinusUz2(sqrtOneMinusUz2__37),
+.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__37),
+.o_uxCost(uxCost__37),
+.o_uzCost(uzCost__37),
+.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__37),
+.o_uxNumerator(uxNumerator__37),
+.o_uyNumerator(uyNumerator__37),
+.o_uyCost(uyCost__37),
+.o_uxQuotient(uxQuotient__37),
+.o_uyQuotient(uyQuotient__37)
+);  
+
+
+
+InternalsBlock pipeReg32(
+//Inputs
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_sint(sint__31),
+.i_cost(cost__31),
+.i_sinp(sinp__31),
+.i_cosp(cosp__31),
+.i_sintCosp(sintCosp__31),
+.i_sintSinp(sintSinp__31),
+.i_uz2(uz2__31),
+.i_uxUz(uxUz__31),
+.i_uyUz(uyUz__31),
+.i_uySintSinp(uySintSinp__31),
+.i_oneMinusUz2(oneMinusUz2__31),
+.i_uyUzSintCosp(uyUzSintCosp__31),
+.i_uxUzSintCosp(uxUzSintCosp__31),
+.i_uxSintSinp(uxSintSinp__31),
+.i_sqrtOneMinusUz2(sqrtOneMinusUz2__31),
+.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__31),
+.i_uxCost(uxCost__31),
+.i_uzCost(uzCost__31),
+.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__31),
+.i_uxNumerator(uxNumerator__31),
+.i_uyNumerator(uyNumerator__31),
+.i_uyCost(uyCost__31),
+.i_uxQuotient(uxQuotient__31),
+.i_uyQuotient(uyQuotient__31),
+//Outputs			 
+.o_sint(sint__32),
+.o_cost(cost__32),
+.o_sinp(sinp__32),
+.o_cosp(cosp__32),
+.o_sintCosp(sintCosp__32),
+.o_sintSinp(sintSinp__32),
+.o_uz2(uz2__32),
+.o_uxUz(uxUz__32),
+.o_uyUz(uyUz__32),
+.o_uySintSinp(uySintSinp__32),
+.o_oneMinusUz2(oneMinusUz2__32),
+.o_uyUzSintCosp(uyUzSintCosp__32),
+.o_uxUzSintCosp(uxUzSintCosp__32),
+.o_uxSintSinp(uxSintSinp__32),
+.o_sqrtOneMinusUz2(sqrtOneMinusUz2__32),
+.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__32),
+.o_uxCost(uxCost__32),
+.o_uzCost(uzCost__32),
+.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__32),
+.o_uxNumerator(uxNumerator__32),
+.o_uyNumerator(uyNumerator__32),
+.o_uyCost(uyCost__32),
+.o_uxQuotient(uxQuotient__32),
+.o_uyQuotient(uyQuotient__32)
+);  
+
+InternalsBlock pipeReg31(
+//Inputs
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_sint(sint__30),
+.i_cost(cost__30),
+.i_sinp(sinp__30),
+.i_cosp(cosp__30),
+.i_sintCosp(sintCosp__30),
+.i_sintSinp(sintSinp__30),
+.i_uz2(uz2__30),
+.i_uxUz(uxUz__30),
+.i_uyUz(uyUz__30),
+.i_uySintSinp(uySintSinp__30),
+.i_oneMinusUz2(oneMinusUz2__30),
+.i_uyUzSintCosp(uyUzSintCosp__30),
+.i_uxUzSintCosp(uxUzSintCosp__30),
+.i_uxSintSinp(uxSintSinp__30),
+.i_sqrtOneMinusUz2(sqrtOneMinusUz2__30),
+.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__30),
+.i_uxCost(uxCost__30),
+.i_uzCost(uzCost__30),
+.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__30),
+.i_uxNumerator(uxNumerator__30),
+.i_uyNumerator(uyNumerator__30),
+.i_uyCost(uyCost__30),
+.i_uxQuotient(uxQuotient__30),
+.i_uyQuotient(uyQuotient__30),
+//Outputs			 
+.o_sint(sint__31),
+.o_cost(cost__31),
+.o_sinp(sinp__31),
+.o_cosp(cosp__31),
+.o_sintCosp(sintCosp__31),
+.o_sintSinp(sintSinp__31),
+.o_uz2(uz2__31),
+.o_uxUz(uxUz__31),
+.o_uyUz(uyUz__31),
+.o_uySintSinp(uySintSinp__31),
+.o_oneMinusUz2(oneMinusUz2__31),
+.o_uyUzSintCosp(uyUzSintCosp__31),
+.o_uxUzSintCosp(uxUzSintCosp__31),
+.o_uxSintSinp(uxSintSinp__31),
+.o_sqrtOneMinusUz2(sqrtOneMinusUz2__31),
+.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__31),
+.o_uxCost(uxCost__31),
+.o_uzCost(uzCost__31),
+.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__31),
+.o_uxNumerator(uxNumerator__31),
+.o_uyNumerator(uyNumerator__31),
+.o_uyCost(uyCost__31),
+.o_uxQuotient(uxQuotient__31),
+.o_uyQuotient(uyQuotient__31)
+);  
+
+InternalsBlock pipeReg30(
+//Inputs
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_sint(sint__29),
+.i_cost(cost__29),
+.i_sinp(sinp__29),
+.i_cosp(cosp__29),
+.i_sintCosp(sintCosp__29),
+.i_sintSinp(sintSinp__29),
+.i_uz2(uz2__29),
+.i_uxUz(uxUz__29),
+.i_uyUz(uyUz__29),
+.i_uySintSinp(uySintSinp__29),
+.i_oneMinusUz2(oneMinusUz2__29),
+.i_uyUzSintCosp(uyUzSintCosp__29),
+.i_uxUzSintCosp(uxUzSintCosp__29),
+.i_uxSintSinp(uxSintSinp__29),
+.i_sqrtOneMinusUz2(sqrtOneMinusUz2__29),
+.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__29),
+.i_uxCost(uxCost__29),
+.i_uzCost(uzCost__29),
+.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__29),
+.i_uxNumerator(uxNumerator__29),
+.i_uyNumerator(uyNumerator__29),
+.i_uyCost(uyCost__29),
+.i_uxQuotient(uxQuotient__29),
+.i_uyQuotient(uyQuotient__29),
+//Outputs			 
+.o_sint(sint__30),
+.o_cost(cost__30),
+.o_sinp(sinp__30),
+.o_cosp(cosp__30),
+.o_sintCosp(sintCosp__30),
+.o_sintSinp(sintSinp__30),
+.o_uz2(uz2__30),
+.o_uxUz(uxUz__30),
+.o_uyUz(uyUz__30),
+.o_uySintSinp(uySintSinp__30),
+.o_oneMinusUz2(oneMinusUz2__30),
+.o_uyUzSintCosp(uyUzSintCosp__30),
+.o_uxUzSintCosp(uxUzSintCosp__30),
+.o_uxSintSinp(uxSintSinp__30),
+.o_sqrtOneMinusUz2(sqrtOneMinusUz2__30),
+.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__30),
+.o_uxCost(uxCost__30),
+.o_uzCost(uzCost__30),
+.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__30),
+.o_uxNumerator(uxNumerator__30),
+.o_uyNumerator(uyNumerator__30),
+.o_uyCost(uyCost__30),
+.o_uxQuotient(uxQuotient__30),
+.o_uyQuotient(uyQuotient__30)
+);  
+
+InternalsBlock pipeReg29(
+//Inputs
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_sint(sint__28),
+.i_cost(cost__28),
+.i_sinp(sinp__28),
+.i_cosp(cosp__28),
+.i_sintCosp(sintCosp__28),
+.i_sintSinp(sintSinp__28),
+.i_uz2(uz2__28),
+.i_uxUz(uxUz__28),
+.i_uyUz(uyUz__28),
+.i_uySintSinp(uySintSinp__28),
+.i_oneMinusUz2(oneMinusUz2__28),
+.i_uyUzSintCosp(uyUzSintCosp__28),
+.i_uxUzSintCosp(uxUzSintCosp__28),
+.i_uxSintSinp(uxSintSinp__28),
+.i_sqrtOneMinusUz2(sqrtOneMinusUz2__28),
+.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__28),
+.i_uxCost(uxCost__28),
+.i_uzCost(uzCost__28),
+.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__28),
+.i_uxNumerator(uxNumerator__28),
+.i_uyNumerator(uyNumerator__28),
+.i_uyCost(uyCost__28),
+.i_uxQuotient(uxQuotient__28),
+.i_uyQuotient(uyQuotient__28),
+//Outputs			 
+.o_sint(sint__29),
+.o_cost(cost__29),
+.o_sinp(sinp__29),
+.o_cosp(cosp__29),
+.o_sintCosp(sintCosp__29),
+.o_sintSinp(sintSinp__29),
+.o_uz2(uz2__29),
+.o_uxUz(uxUz__29),
+.o_uyUz(uyUz__29),
+.o_uySintSinp(uySintSinp__29),
+.o_oneMinusUz2(oneMinusUz2__29),
+.o_uyUzSintCosp(uyUzSintCosp__29),
+.o_uxUzSintCosp(uxUzSintCosp__29),
+.o_uxSintSinp(uxSintSinp__29),
+.o_sqrtOneMinusUz2(sqrtOneMinusUz2__29),
+.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__29),
+.o_uxCost(uxCost__29),
+.o_uzCost(uzCost__29),
+.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__29),
+.o_uxNumerator(uxNumerator__29),
+.o_uyNumerator(uyNumerator__29),
+.o_uyCost(uyCost__29),
+.o_uxQuotient(uxQuotient__29),
+.o_uyQuotient(uyQuotient__29)
+);  
+
+InternalsBlock pipeReg28(
+//Inputs
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_sint(sint__27),
+.i_cost(cost__27),
+.i_sinp(sinp__27),
+.i_cosp(cosp__27),
+.i_sintCosp(sintCosp__27),
+.i_sintSinp(sintSinp__27),
+.i_uz2(uz2__27),
+.i_uxUz(uxUz__27),
+.i_uyUz(uyUz__27),
+.i_uySintSinp(uySintSinp__27),
+.i_oneMinusUz2(oneMinusUz2__27),
+.i_uyUzSintCosp(uyUzSintCosp__27),
+.i_uxUzSintCosp(uxUzSintCosp__27),
+.i_uxSintSinp(uxSintSinp__27),
+.i_sqrtOneMinusUz2(sqrtOneMinusUz2__27),
+.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__27),
+.i_uxCost(uxCost__27),
+.i_uzCost(uzCost__27),
+.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__27),
+.i_uxNumerator(uxNumerator__27),
+.i_uyNumerator(uyNumerator__27),
+.i_uyCost(uyCost__27),
+.i_uxQuotient(uxQuotient__27),
+.i_uyQuotient(uyQuotient__27),
+//Outputs			 
+.o_sint(sint__28),
+.o_cost(cost__28),
+.o_sinp(sinp__28),
+.o_cosp(cosp__28),
+.o_sintCosp(sintCosp__28),
+.o_sintSinp(sintSinp__28),
+.o_uz2(uz2__28),
+.o_uxUz(uxUz__28),
+.o_uyUz(uyUz__28),
+.o_uySintSinp(uySintSinp__28),
+.o_oneMinusUz2(oneMinusUz2__28),
+.o_uyUzSintCosp(uyUzSintCosp__28),
+.o_uxUzSintCosp(uxUzSintCosp__28),
+.o_uxSintSinp(uxSintSinp__28),
+.o_sqrtOneMinusUz2(sqrtOneMinusUz2__28),
+.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__28),
+.o_uxCost(uxCost__28),
+.o_uzCost(uzCost__28),
+.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__28),
+.o_uxNumerator(uxNumerator__28),
+.o_uyNumerator(uyNumerator__28),
+.o_uyCost(uyCost__28),
+.o_uxQuotient(uxQuotient__28),
+.o_uyQuotient(uyQuotient__28)
+);  
+
+InternalsBlock pipeReg27(
+//Inputs
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_sint(sint__26),
+.i_cost(cost__26),
+.i_sinp(sinp__26),
+.i_cosp(cosp__26),
+.i_sintCosp(sintCosp__26),
+.i_sintSinp(sintSinp__26),
+.i_uz2(uz2__26),
+.i_uxUz(uxUz__26),
+.i_uyUz(uyUz__26),
+.i_uySintSinp(uySintSinp__26),
+.i_oneMinusUz2(oneMinusUz2__26),
+.i_uyUzSintCosp(uyUzSintCosp__26),
+.i_uxUzSintCosp(uxUzSintCosp__26),
+.i_uxSintSinp(uxSintSinp__26),
+.i_sqrtOneMinusUz2(sqrtOneMinusUz2__26),
+.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__26),
+.i_uxCost(uxCost__26),
+.i_uzCost(uzCost__26),
+.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__26),
+.i_uxNumerator(uxNumerator__26),
+.i_uyNumerator(uyNumerator__26),
+.i_uyCost(uyCost__26),
+.i_uxQuotient(uxQuotient__26),
+.i_uyQuotient(uyQuotient__26),
+//Outputs			 
+.o_sint(sint__27),
+.o_cost(cost__27),
+.o_sinp(sinp__27),
+.o_cosp(cosp__27),
+.o_sintCosp(sintCosp__27),
+.o_sintSinp(sintSinp__27),
+.o_uz2(uz2__27),
+.o_uxUz(uxUz__27),
+.o_uyUz(uyUz__27),
+.o_uySintSinp(uySintSinp__27),
+.o_oneMinusUz2(oneMinusUz2__27),
+.o_uyUzSintCosp(uyUzSintCosp__27),
+.o_uxUzSintCosp(uxUzSintCosp__27),
+.o_uxSintSinp(uxSintSinp__27),
+.o_sqrtOneMinusUz2(sqrtOneMinusUz2__27),
+.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__27),
+.o_uxCost(uxCost__27),
+.o_uzCost(uzCost__27),
+.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__27),
+.o_uxNumerator(uxNumerator__27),
+.o_uyNumerator(uyNumerator__27),
+.o_uyCost(uyCost__27),
+.o_uxQuotient(uxQuotient__27),
+.o_uyQuotient(uyQuotient__27)
+);  
+
+InternalsBlock pipeReg26(
+//Inputs
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_sint(sint__25),
+.i_cost(cost__25),
+.i_sinp(sinp__25),
+.i_cosp(cosp__25),
+.i_sintCosp(sintCosp__25),
+.i_sintSinp(sintSinp__25),
+.i_uz2(uz2__25),
+.i_uxUz(uxUz__25),
+.i_uyUz(uyUz__25),
+.i_uySintSinp(uySintSinp__25),
+.i_oneMinusUz2(oneMinusUz2__25),
+.i_uyUzSintCosp(uyUzSintCosp__25),
+.i_uxUzSintCosp(uxUzSintCosp__25),
+.i_uxSintSinp(uxSintSinp__25),
+.i_sqrtOneMinusUz2(sqrtOneMinusUz2__25),
+.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__25),
+.i_uxCost(uxCost__25),
+.i_uzCost(uzCost__25),
+.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__25),
+.i_uxNumerator(uxNumerator__25),
+.i_uyNumerator(uyNumerator__25),
+.i_uyCost(uyCost__25),
+.i_uxQuotient(uxQuotient__25),
+.i_uyQuotient(uyQuotient__25),
+//Outputs			 
+.o_sint(sint__26),
+.o_cost(cost__26),
+.o_sinp(sinp__26),
+.o_cosp(cosp__26),
+.o_sintCosp(sintCosp__26),
+.o_sintSinp(sintSinp__26),
+.o_uz2(uz2__26),
+.o_uxUz(uxUz__26),
+.o_uyUz(uyUz__26),
+.o_uySintSinp(uySintSinp__26),
+.o_oneMinusUz2(oneMinusUz2__26),
+.o_uyUzSintCosp(uyUzSintCosp__26),
+.o_uxUzSintCosp(uxUzSintCosp__26),
+.o_uxSintSinp(uxSintSinp__26),
+.o_sqrtOneMinusUz2(sqrtOneMinusUz2__26),
+.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__26),
+.o_uxCost(uxCost__26),
+.o_uzCost(uzCost__26),
+.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__26),
+.o_uxNumerator(uxNumerator__26),
+.o_uyNumerator(uyNumerator__26),
+.o_uyCost(uyCost__26),
+.o_uxQuotient(uxQuotient__26),
+.o_uyQuotient(uyQuotient__26)
+);  
+
+InternalsBlock pipeReg25(
+//Inputs
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_sint(sint__24),
+.i_cost(cost__24),
+.i_sinp(sinp__24),
+.i_cosp(cosp__24),
+.i_sintCosp(sintCosp__24),
+.i_sintSinp(sintSinp__24),
+.i_uz2(uz2__24),
+.i_uxUz(uxUz__24),
+.i_uyUz(uyUz__24),
+.i_uySintSinp(uySintSinp__24),
+.i_oneMinusUz2(oneMinusUz2__24),
+.i_uyUzSintCosp(uyUzSintCosp__24),
+.i_uxUzSintCosp(uxUzSintCosp__24),
+.i_uxSintSinp(uxSintSinp__24),
+.i_sqrtOneMinusUz2(sqrtOneMinusUz2__24),
+.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__24),
+.i_uxCost(uxCost__24),
+.i_uzCost(uzCost__24),
+.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__24),
+.i_uxNumerator(uxNumerator__24),
+.i_uyNumerator(uyNumerator__24),
+.i_uyCost(uyCost__24),
+.i_uxQuotient(uxQuotient__24),
+.i_uyQuotient(uyQuotient__24),
+//Outputs			 
+.o_sint(sint__25),
+.o_cost(cost__25),
+.o_sinp(sinp__25),
+.o_cosp(cosp__25),
+.o_sintCosp(sintCosp__25),
+.o_sintSinp(sintSinp__25),
+.o_uz2(uz2__25),
+.o_uxUz(uxUz__25),
+.o_uyUz(uyUz__25),
+.o_uySintSinp(uySintSinp__25),
+.o_oneMinusUz2(oneMinusUz2__25),
+.o_uyUzSintCosp(uyUzSintCosp__25),
+.o_uxUzSintCosp(uxUzSintCosp__25),
+.o_uxSintSinp(uxSintSinp__25),
+.o_sqrtOneMinusUz2(sqrtOneMinusUz2__25),
+.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__25),
+.o_uxCost(uxCost__25),
+.o_uzCost(uzCost__25),
+.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__25),
+.o_uxNumerator(uxNumerator__25),
+.o_uyNumerator(uyNumerator__25),
+.o_uyCost(uyCost__25),
+.o_uxQuotient(uxQuotient__25),
+.o_uyQuotient(uyQuotient__25)
+);  
+
+InternalsBlock pipeReg24(
+//Inputs
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_sint(sint__23),
+.i_cost(cost__23),
+.i_sinp(sinp__23),
+.i_cosp(cosp__23),
+.i_sintCosp(sintCosp__23),
+.i_sintSinp(sintSinp__23),
+.i_uz2(uz2__23),
+.i_uxUz(uxUz__23),
+.i_uyUz(uyUz__23),
+.i_uySintSinp(uySintSinp__23),
+.i_oneMinusUz2(oneMinusUz2__23),
+.i_uyUzSintCosp(uyUzSintCosp__23),
+.i_uxUzSintCosp(uxUzSintCosp__23),
+.i_uxSintSinp(uxSintSinp__23),
+.i_sqrtOneMinusUz2(sqrtOneMinusUz2__23),
+.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__23),
+.i_uxCost(uxCost__23),
+.i_uzCost(uzCost__23),
+.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__23),
+.i_uxNumerator(uxNumerator__23),
+.i_uyNumerator(uyNumerator__23),
+.i_uyCost(uyCost__23),
+.i_uxQuotient(uxQuotient__23),
+.i_uyQuotient(uyQuotient__23),
+//Outputs			 
+.o_sint(sint__24),
+.o_cost(cost__24),
+.o_sinp(sinp__24),
+.o_cosp(cosp__24),
+.o_sintCosp(sintCosp__24),
+.o_sintSinp(sintSinp__24),
+.o_uz2(uz2__24),
+.o_uxUz(uxUz__24),
+.o_uyUz(uyUz__24),
+.o_uySintSinp(uySintSinp__24),
+.o_oneMinusUz2(oneMinusUz2__24),
+.o_uyUzSintCosp(uyUzSintCosp__24),
+.o_uxUzSintCosp(uxUzSintCosp__24),
+.o_uxSintSinp(uxSintSinp__24),
+.o_sqrtOneMinusUz2(sqrtOneMinusUz2__24),
+.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__24),
+.o_uxCost(uxCost__24),
+.o_uzCost(uzCost__24),
+.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__24),
+.o_uxNumerator(uxNumerator__24),
+.o_uyNumerator(uyNumerator__24),
+.o_uyCost(uyCost__24),
+.o_uxQuotient(uxQuotient__24),
+.o_uyQuotient(uyQuotient__24)
+);  
+
+InternalsBlock pipeReg23(
+//Inputs
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_sint(sint__22),
+.i_cost(cost__22),
+.i_sinp(sinp__22),
+.i_cosp(cosp__22),
+.i_sintCosp(sintCosp__22),
+.i_sintSinp(sintSinp__22),
+.i_uz2(uz2__22),
+.i_uxUz(uxUz__22),
+.i_uyUz(uyUz__22),
+.i_uySintSinp(uySintSinp__22),
+.i_oneMinusUz2(oneMinusUz2__22),
+.i_uyUzSintCosp(uyUzSintCosp__22),
+.i_uxUzSintCosp(uxUzSintCosp__22),
+.i_uxSintSinp(uxSintSinp__22),
+.i_sqrtOneMinusUz2(sqrtOneMinusUz2__22),
+.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__22),
+.i_uxCost(uxCost__22),
+.i_uzCost(uzCost__22),
+.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__22),
+.i_uxNumerator(uxNumerator__22),
+.i_uyNumerator(uyNumerator__22),
+.i_uyCost(uyCost__22),
+.i_uxQuotient(uxQuotient__22),
+.i_uyQuotient(uyQuotient__22),
+//Outputs			 
+.o_sint(sint__23),
+.o_cost(cost__23),
+.o_sinp(sinp__23),
+.o_cosp(cosp__23),
+.o_sintCosp(sintCosp__23),
+.o_sintSinp(sintSinp__23),
+.o_uz2(uz2__23),
+.o_uxUz(uxUz__23),
+.o_uyUz(uyUz__23),
+.o_uySintSinp(uySintSinp__23),
+.o_oneMinusUz2(oneMinusUz2__23),
+.o_uyUzSintCosp(uyUzSintCosp__23),
+.o_uxUzSintCosp(uxUzSintCosp__23),
+.o_uxSintSinp(uxSintSinp__23),
+.o_sqrtOneMinusUz2(sqrtOneMinusUz2__23),
+.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__23),
+.o_uxCost(uxCost__23),
+.o_uzCost(uzCost__23),
+.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__23),
+.o_uxNumerator(uxNumerator__23),
+.o_uyNumerator(uyNumerator__23),
+.o_uyCost(uyCost__23),
+.o_uxQuotient(uxQuotient__23),
+.o_uyQuotient(uyQuotient__23)
+);  
+
+InternalsBlock pipeReg22(
+//Inputs
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_sint(sint__21),
+.i_cost(cost__21),
+.i_sinp(sinp__21),
+.i_cosp(cosp__21),
+.i_sintCosp(sintCosp__21),
+.i_sintSinp(sintSinp__21),
+.i_uz2(uz2__21),
+.i_uxUz(uxUz__21),
+.i_uyUz(uyUz__21),
+.i_uySintSinp(uySintSinp__21),
+.i_oneMinusUz2(oneMinusUz2__21),
+.i_uyUzSintCosp(uyUzSintCosp__21),
+.i_uxUzSintCosp(uxUzSintCosp__21),
+.i_uxSintSinp(uxSintSinp__21),
+.i_sqrtOneMinusUz2(sqrtOneMinusUz2__21),
+.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__21),
+.i_uxCost(uxCost__21),
+.i_uzCost(uzCost__21),
+.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__21),
+.i_uxNumerator(uxNumerator__21),
+.i_uyNumerator(uyNumerator__21),
+.i_uyCost(uyCost__21),
+.i_uxQuotient(uxQuotient__21),
+.i_uyQuotient(uyQuotient__21),
+//Outputs			 
+.o_sint(sint__22),
+.o_cost(cost__22),
+.o_sinp(sinp__22),
+.o_cosp(cosp__22),
+.o_sintCosp(sintCosp__22),
+.o_sintSinp(sintSinp__22),
+.o_uz2(uz2__22),
+.o_uxUz(uxUz__22),
+.o_uyUz(uyUz__22),
+.o_uySintSinp(uySintSinp__22),
+.o_oneMinusUz2(oneMinusUz2__22),
+.o_uyUzSintCosp(uyUzSintCosp__22),
+.o_uxUzSintCosp(uxUzSintCosp__22),
+.o_uxSintSinp(uxSintSinp__22),
+.o_sqrtOneMinusUz2(sqrtOneMinusUz2__22),
+.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__22),
+.o_uxCost(uxCost__22),
+.o_uzCost(uzCost__22),
+.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__22),
+.o_uxNumerator(uxNumerator__22),
+.o_uyNumerator(uyNumerator__22),
+.o_uyCost(uyCost__22),
+.o_uxQuotient(uxQuotient__22),
+.o_uyQuotient(uyQuotient__22)
+);  
+
+InternalsBlock pipeReg21(
+//Inputs
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_sint(sint__20),
+.i_cost(cost__20),
+.i_sinp(sinp__20),
+.i_cosp(cosp__20),
+.i_sintCosp(sintCosp__20),
+.i_sintSinp(sintSinp__20),
+.i_uz2(uz2__20),
+.i_uxUz(uxUz__20),
+.i_uyUz(uyUz__20),
+.i_uySintSinp(uySintSinp__20),
+.i_oneMinusUz2(oneMinusUz2__20),
+.i_uyUzSintCosp(uyUzSintCosp__20),
+.i_uxUzSintCosp(uxUzSintCosp__20),
+.i_uxSintSinp(uxSintSinp__20),
+.i_sqrtOneMinusUz2(sqrtOneMinusUz2__20),
+.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__20),
+.i_uxCost(uxCost__20),
+.i_uzCost(uzCost__20),
+.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__20),
+.i_uxNumerator(uxNumerator__20),
+.i_uyNumerator(uyNumerator__20),
+.i_uyCost(uyCost__20),
+.i_uxQuotient(uxQuotient__20),
+.i_uyQuotient(uyQuotient__20),
+//Outputs			 
+.o_sint(sint__21),
+.o_cost(cost__21),
+.o_sinp(sinp__21),
+.o_cosp(cosp__21),
+.o_sintCosp(sintCosp__21),
+.o_sintSinp(sintSinp__21),
+.o_uz2(uz2__21),
+.o_uxUz(uxUz__21),
+.o_uyUz(uyUz__21),
+.o_uySintSinp(uySintSinp__21),
+.o_oneMinusUz2(oneMinusUz2__21),
+.o_uyUzSintCosp(uyUzSintCosp__21),
+.o_uxUzSintCosp(uxUzSintCosp__21),
+.o_uxSintSinp(uxSintSinp__21),
+.o_sqrtOneMinusUz2(sqrtOneMinusUz2__21),
+.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__21),
+.o_uxCost(uxCost__21),
+.o_uzCost(uzCost__21),
+.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__21),
+.o_uxNumerator(uxNumerator__21),
+.o_uyNumerator(uyNumerator__21),
+.o_uyCost(uyCost__21),
+.o_uxQuotient(uxQuotient__21),
+.o_uyQuotient(uyQuotient__21)
+);  
+
+InternalsBlock pipeReg20(
+//Inputs
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_sint(sint__19),
+.i_cost(cost__19),
+.i_sinp(sinp__19),
+.i_cosp(cosp__19),
+.i_sintCosp(sintCosp__19),
+.i_sintSinp(sintSinp__19),
+.i_uz2(uz2__19),
+.i_uxUz(uxUz__19),
+.i_uyUz(uyUz__19),
+.i_uySintSinp(uySintSinp__19),
+.i_oneMinusUz2(oneMinusUz2__19),
+.i_uyUzSintCosp(uyUzSintCosp__19),
+.i_uxUzSintCosp(uxUzSintCosp__19),
+.i_uxSintSinp(uxSintSinp__19),
+.i_sqrtOneMinusUz2(sqrtOneMinusUz2__19),
+.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__19),
+.i_uxCost(uxCost__19),
+.i_uzCost(uzCost__19),
+.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__19),
+.i_uxNumerator(uxNumerator__19),
+.i_uyNumerator(uyNumerator__19),
+.i_uyCost(uyCost__19),
+.i_uxQuotient(uxQuotient__19),
+.i_uyQuotient(uyQuotient__19),
+//Outputs			 
+.o_sint(sint__20),
+.o_cost(cost__20),
+.o_sinp(sinp__20),
+.o_cosp(cosp__20),
+.o_sintCosp(sintCosp__20),
+.o_sintSinp(sintSinp__20),
+.o_uz2(uz2__20),
+.o_uxUz(uxUz__20),
+.o_uyUz(uyUz__20),
+.o_uySintSinp(uySintSinp__20),
+.o_oneMinusUz2(oneMinusUz2__20),
+.o_uyUzSintCosp(uyUzSintCosp__20),
+.o_uxUzSintCosp(uxUzSintCosp__20),
+.o_uxSintSinp(uxSintSinp__20),
+.o_sqrtOneMinusUz2(sqrtOneMinusUz2__20),
+.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__20),
+.o_uxCost(uxCost__20),
+.o_uzCost(uzCost__20),
+.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__20),
+.o_uxNumerator(uxNumerator__20),
+.o_uyNumerator(uyNumerator__20),
+.o_uyCost(uyCost__20),
+.o_uxQuotient(uxQuotient__20),
+.o_uyQuotient(uyQuotient__20)
+);  
+
+InternalsBlock pipeReg19(
+//Inputs
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_sint(sint__18),
+.i_cost(cost__18),
+.i_sinp(sinp__18),
+.i_cosp(cosp__18),
+.i_sintCosp(sintCosp__18),
+.i_sintSinp(sintSinp__18),
+.i_uz2(uz2__18),
+.i_uxUz(uxUz__18),
+.i_uyUz(uyUz__18),
+.i_uySintSinp(uySintSinp__18),
+.i_oneMinusUz2(oneMinusUz2__18),
+.i_uyUzSintCosp(uyUzSintCosp__18),
+.i_uxUzSintCosp(uxUzSintCosp__18),
+.i_uxSintSinp(uxSintSinp__18),
+.i_sqrtOneMinusUz2(sqrtOneMinusUz2__18),
+.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__18),
+.i_uxCost(uxCost__18),
+.i_uzCost(uzCost__18),
+.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__18),
+.i_uxNumerator(uxNumerator__18),
+.i_uyNumerator(uyNumerator__18),
+.i_uyCost(uyCost__18),
+.i_uxQuotient(uxQuotient__18),
+.i_uyQuotient(uyQuotient__18),
+//Outputs			 
+.o_sint(sint__19),
+.o_cost(cost__19),
+.o_sinp(sinp__19),
+.o_cosp(cosp__19),
+.o_sintCosp(sintCosp__19),
+.o_sintSinp(sintSinp__19),
+.o_uz2(uz2__19),
+.o_uxUz(uxUz__19),
+.o_uyUz(uyUz__19),
+.o_uySintSinp(uySintSinp__19),
+.o_oneMinusUz2(oneMinusUz2__19),
+.o_uyUzSintCosp(uyUzSintCosp__19),
+.o_uxUzSintCosp(uxUzSintCosp__19),
+.o_uxSintSinp(uxSintSinp__19),
+.o_sqrtOneMinusUz2(sqrtOneMinusUz2__19),
+.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__19),
+.o_uxCost(uxCost__19),
+.o_uzCost(uzCost__19),
+.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__19),
+.o_uxNumerator(uxNumerator__19),
+.o_uyNumerator(uyNumerator__19),
+.o_uyCost(uyCost__19),
+.o_uxQuotient(uxQuotient__19),
+.o_uyQuotient(uyQuotient__19)
+);  
+
+InternalsBlock pipeReg18(
+//Inputs
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_sint(sint__17),
+.i_cost(cost__17),
+.i_sinp(sinp__17),
+.i_cosp(cosp__17),
+.i_sintCosp(sintCosp__17),
+.i_sintSinp(sintSinp__17),
+.i_uz2(uz2__17),
+.i_uxUz(uxUz__17),
+.i_uyUz(uyUz__17),
+.i_uySintSinp(uySintSinp__17),
+.i_oneMinusUz2(oneMinusUz2__17),
+.i_uyUzSintCosp(uyUzSintCosp__17),
+.i_uxUzSintCosp(uxUzSintCosp__17),
+.i_uxSintSinp(uxSintSinp__17),
+.i_sqrtOneMinusUz2(sqrtOneMinusUz2__17),
+.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__17),
+.i_uxCost(uxCost__17),
+.i_uzCost(uzCost__17),
+.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__17),
+.i_uxNumerator(uxNumerator__17),
+.i_uyNumerator(uyNumerator__17),
+.i_uyCost(uyCost__17),
+.i_uxQuotient(uxQuotient__17),
+.i_uyQuotient(uyQuotient__17),
+//Outputs			 
+.o_sint(sint__18),
+.o_cost(cost__18),
+.o_sinp(sinp__18),
+.o_cosp(cosp__18),
+.o_sintCosp(sintCosp__18),
+.o_sintSinp(sintSinp__18),
+.o_uz2(uz2__18),
+.o_uxUz(uxUz__18),
+.o_uyUz(uyUz__18),
+.o_uySintSinp(uySintSinp__18),
+.o_oneMinusUz2(oneMinusUz2__18),
+.o_uyUzSintCosp(uyUzSintCosp__18),
+.o_uxUzSintCosp(uxUzSintCosp__18),
+.o_uxSintSinp(uxSintSinp__18),
+.o_sqrtOneMinusUz2(sqrtOneMinusUz2__18),
+.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__18),
+.o_uxCost(uxCost__18),
+.o_uzCost(uzCost__18),
+.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__18),
+.o_uxNumerator(uxNumerator__18),
+.o_uyNumerator(uyNumerator__18),
+.o_uyCost(uyCost__18),
+.o_uxQuotient(uxQuotient__18),
+.o_uyQuotient(uyQuotient__18)
+);  
+
+InternalsBlock pipeReg17(
+//Inputs
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_sint(sint__16),
+.i_cost(cost__16),
+.i_sinp(sinp__16),
+.i_cosp(cosp__16),
+.i_sintCosp(sintCosp__16),
+.i_sintSinp(sintSinp__16),
+.i_uz2(uz2__16),
+.i_uxUz(uxUz__16),
+.i_uyUz(uyUz__16),
+.i_uySintSinp(uySintSinp__16),
+.i_oneMinusUz2(oneMinusUz2__16),
+.i_uyUzSintCosp(uyUzSintCosp__16),
+.i_uxUzSintCosp(uxUzSintCosp__16),
+.i_uxSintSinp(uxSintSinp__16),
+.i_sqrtOneMinusUz2(sqrtOneMinusUz2__16),
+.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__16),
+.i_uxCost(uxCost__16),
+.i_uzCost(uzCost__16),
+.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__16),
+.i_uxNumerator(uxNumerator__16),
+.i_uyNumerator(uyNumerator__16),
+.i_uyCost(uyCost__16),
+.i_uxQuotient(uxQuotient__16),
+.i_uyQuotient(uyQuotient__16),
+//Outputs			 
+.o_sint(sint__17),
+.o_cost(cost__17),
+.o_sinp(sinp__17),
+.o_cosp(cosp__17),
+.o_sintCosp(sintCosp__17),
+.o_sintSinp(sintSinp__17),
+.o_uz2(uz2__17),
+.o_uxUz(uxUz__17),
+.o_uyUz(uyUz__17),
+.o_uySintSinp(uySintSinp__17),
+.o_oneMinusUz2(oneMinusUz2__17),
+.o_uyUzSintCosp(uyUzSintCosp__17),
+.o_uxUzSintCosp(uxUzSintCosp__17),
+.o_uxSintSinp(uxSintSinp__17),
+.o_sqrtOneMinusUz2(sqrtOneMinusUz2__17),
+.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__17),
+.o_uxCost(uxCost__17),
+.o_uzCost(uzCost__17),
+.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__17),
+.o_uxNumerator(uxNumerator__17),
+.o_uyNumerator(uyNumerator__17),
+.o_uyCost(uyCost__17),
+.o_uxQuotient(uxQuotient__17),
+.o_uyQuotient(uyQuotient__17)
+);  
+
+
+InternalsBlock pipeReg15(
+//Inputs
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_sint(sint__14),
+.i_cost(cost__14),
+.i_sinp(sinp__14),
+.i_cosp(cosp__14),
+.i_sintCosp(sintCosp__14),
+.i_sintSinp(sintSinp__14),
+.i_uz2(uz2__14),
+.i_uxUz(uxUz__14),
+.i_uyUz(uyUz__14),
+.i_uySintSinp(uySintSinp__14),
+.i_oneMinusUz2(oneMinusUz2__14),
+.i_uyUzSintCosp(uyUzSintCosp__14),
+.i_uxUzSintCosp(uxUzSintCosp__14),
+.i_uxSintSinp(uxSintSinp__14),
+.i_sqrtOneMinusUz2(sqrtOneMinusUz2__14),
+.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__14),
+.i_uxCost(uxCost__14),
+.i_uzCost(uzCost__14),
+.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__14),
+.i_uxNumerator(uxNumerator__14),
+.i_uyNumerator(uyNumerator__14),
+.i_uyCost(uyCost__14),
+.i_uxQuotient(uxQuotient__14),
+.i_uyQuotient(uyQuotient__14),
+//Outputs			 
+.o_sint(sint__15),
+.o_cost(cost__15),
+.o_sinp(sinp__15),
+.o_cosp(cosp__15),
+.o_sintCosp(sintCosp__15),
+.o_sintSinp(sintSinp__15),
+.o_uz2(uz2__15),
+.o_uxUz(uxUz__15),
+.o_uyUz(uyUz__15),
+.o_uySintSinp(uySintSinp__15),
+.o_oneMinusUz2(oneMinusUz2__15),
+.o_uyUzSintCosp(uyUzSintCosp__15),
+.o_uxUzSintCosp(uxUzSintCosp__15),
+.o_uxSintSinp(uxSintSinp__15),
+.o_sqrtOneMinusUz2(sqrtOneMinusUz2__15),
+.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__15),
+.o_uxCost(uxCost__15),
+.o_uzCost(uzCost__15),
+.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__15),
+.o_uxNumerator(uxNumerator__15),
+.o_uyNumerator(uyNumerator__15),
+.o_uyCost(uyCost__15),
+.o_uxQuotient(uxQuotient__15),
+.o_uyQuotient(uyQuotient__15)
+);  
+
+InternalsBlock pipeReg14(
+//Inputs
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_sint(sint__13),
+.i_cost(cost__13),
+.i_sinp(sinp__13),
+.i_cosp(cosp__13),
+.i_sintCosp(sintCosp__13),
+.i_sintSinp(sintSinp__13),
+.i_uz2(uz2__13),
+.i_uxUz(uxUz__13),
+.i_uyUz(uyUz__13),
+.i_uySintSinp(uySintSinp__13),
+.i_oneMinusUz2(oneMinusUz2__13),
+.i_uyUzSintCosp(uyUzSintCosp__13),
+.i_uxUzSintCosp(uxUzSintCosp__13),
+.i_uxSintSinp(uxSintSinp__13),
+.i_sqrtOneMinusUz2(sqrtOneMinusUz2__13),
+.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__13),
+.i_uxCost(uxCost__13),
+.i_uzCost(uzCost__13),
+.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__13),
+.i_uxNumerator(uxNumerator__13),
+.i_uyNumerator(uyNumerator__13),
+.i_uyCost(uyCost__13),
+.i_uxQuotient(uxQuotient__13),
+.i_uyQuotient(uyQuotient__13),
+//Outputs			 
+.o_sint(sint__14),
+.o_cost(cost__14),
+.o_sinp(sinp__14),
+.o_cosp(cosp__14),
+.o_sintCosp(sintCosp__14),
+.o_sintSinp(sintSinp__14),
+.o_uz2(uz2__14),
+.o_uxUz(uxUz__14),
+.o_uyUz(uyUz__14),
+.o_uySintSinp(uySintSinp__14),
+.o_oneMinusUz2(oneMinusUz2__14),
+.o_uyUzSintCosp(uyUzSintCosp__14),
+.o_uxUzSintCosp(uxUzSintCosp__14),
+.o_uxSintSinp(uxSintSinp__14),
+.o_sqrtOneMinusUz2(sqrtOneMinusUz2__14),
+.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__14),
+.o_uxCost(uxCost__14),
+.o_uzCost(uzCost__14),
+.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__14),
+.o_uxNumerator(uxNumerator__14),
+.o_uyNumerator(uyNumerator__14),
+.o_uyCost(uyCost__14),
+.o_uxQuotient(uxQuotient__14),
+.o_uyQuotient(uyQuotient__14)
+);  
+
+InternalsBlock pipeReg13(
+//Inputs
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_sint(sint__12),
+.i_cost(cost__12),
+.i_sinp(sinp__12),
+.i_cosp(cosp__12),
+.i_sintCosp(sintCosp__12),
+.i_sintSinp(sintSinp__12),
+.i_uz2(uz2__12),
+.i_uxUz(uxUz__12),
+.i_uyUz(uyUz__12),
+.i_uySintSinp(uySintSinp__12),
+.i_oneMinusUz2(oneMinusUz2__12),
+.i_uyUzSintCosp(uyUzSintCosp__12),
+.i_uxUzSintCosp(uxUzSintCosp__12),
+.i_uxSintSinp(uxSintSinp__12),
+.i_sqrtOneMinusUz2(sqrtOneMinusUz2__12),
+.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__12),
+.i_uxCost(uxCost__12),
+.i_uzCost(uzCost__12),
+.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__12),
+.i_uxNumerator(uxNumerator__12),
+.i_uyNumerator(uyNumerator__12),
+.i_uyCost(uyCost__12),
+.i_uxQuotient(uxQuotient__12),
+.i_uyQuotient(uyQuotient__12),
+//Outputs			 
+.o_sint(sint__13),
+.o_cost(cost__13),
+.o_sinp(sinp__13),
+.o_cosp(cosp__13),
+.o_sintCosp(sintCosp__13),
+.o_sintSinp(sintSinp__13),
+.o_uz2(uz2__13),
+.o_uxUz(uxUz__13),
+.o_uyUz(uyUz__13),
+.o_uySintSinp(uySintSinp__13),
+.o_oneMinusUz2(oneMinusUz2__13),
+.o_uyUzSintCosp(uyUzSintCosp__13),
+.o_uxUzSintCosp(uxUzSintCosp__13),
+.o_uxSintSinp(uxSintSinp__13),
+.o_sqrtOneMinusUz2(sqrtOneMinusUz2__13),
+.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__13),
+.o_uxCost(uxCost__13),
+.o_uzCost(uzCost__13),
+.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__13),
+.o_uxNumerator(uxNumerator__13),
+.o_uyNumerator(uyNumerator__13),
+.o_uyCost(uyCost__13),
+.o_uxQuotient(uxQuotient__13),
+.o_uyQuotient(uyQuotient__13)
+);  
+
+InternalsBlock pipeReg12(
+//Inputs
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_sint(sint__11),
+.i_cost(cost__11),
+.i_sinp(sinp__11),
+.i_cosp(cosp__11),
+.i_sintCosp(sintCosp__11),
+.i_sintSinp(sintSinp__11),
+.i_uz2(uz2__11),
+.i_uxUz(uxUz__11),
+.i_uyUz(uyUz__11),
+.i_uySintSinp(uySintSinp__11),
+.i_oneMinusUz2(oneMinusUz2__11),
+.i_uyUzSintCosp(uyUzSintCosp__11),
+.i_uxUzSintCosp(uxUzSintCosp__11),
+.i_uxSintSinp(uxSintSinp__11),
+.i_sqrtOneMinusUz2(sqrtOneMinusUz2__11),
+.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__11),
+.i_uxCost(uxCost__11),
+.i_uzCost(uzCost__11),
+.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__11),
+.i_uxNumerator(uxNumerator__11),
+.i_uyNumerator(uyNumerator__11),
+.i_uyCost(uyCost__11),
+.i_uxQuotient(uxQuotient__11),
+.i_uyQuotient(uyQuotient__11),
+//Outputs			 
+.o_sint(sint__12),
+.o_cost(cost__12),
+.o_sinp(sinp__12),
+.o_cosp(cosp__12),
+.o_sintCosp(sintCosp__12),
+.o_sintSinp(sintSinp__12),
+.o_uz2(uz2__12),
+.o_uxUz(uxUz__12),
+.o_uyUz(uyUz__12),
+.o_uySintSinp(uySintSinp__12),
+.o_oneMinusUz2(oneMinusUz2__12),
+.o_uyUzSintCosp(uyUzSintCosp__12),
+.o_uxUzSintCosp(uxUzSintCosp__12),
+.o_uxSintSinp(uxSintSinp__12),
+.o_sqrtOneMinusUz2(sqrtOneMinusUz2__12),
+.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__12),
+.o_uxCost(uxCost__12),
+.o_uzCost(uzCost__12),
+.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__12),
+.o_uxNumerator(uxNumerator__12),
+.o_uyNumerator(uyNumerator__12),
+.o_uyCost(uyCost__12),
+.o_uxQuotient(uxQuotient__12),
+.o_uyQuotient(uyQuotient__12)
+);  
+
+InternalsBlock pipeReg11(
+//Inputs
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_sint(sint__10),
+.i_cost(cost__10),
+.i_sinp(sinp__10),
+.i_cosp(cosp__10),
+.i_sintCosp(sintCosp__10),
+.i_sintSinp(sintSinp__10),
+.i_uz2(uz2__10),
+.i_uxUz(uxUz__10),
+.i_uyUz(uyUz__10),
+.i_uySintSinp(uySintSinp__10),
+.i_oneMinusUz2(oneMinusUz2__10),
+.i_uyUzSintCosp(uyUzSintCosp__10),
+.i_uxUzSintCosp(uxUzSintCosp__10),
+.i_uxSintSinp(uxSintSinp__10),
+.i_sqrtOneMinusUz2(sqrtOneMinusUz2__10),
+.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__10),
+.i_uxCost(uxCost__10),
+.i_uzCost(uzCost__10),
+.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__10),
+.i_uxNumerator(uxNumerator__10),
+.i_uyNumerator(uyNumerator__10),
+.i_uyCost(uyCost__10),
+.i_uxQuotient(uxQuotient__10),
+.i_uyQuotient(uyQuotient__10),
+//Outputs			 
+.o_sint(sint__11),
+.o_cost(cost__11),
+.o_sinp(sinp__11),
+.o_cosp(cosp__11),
+.o_sintCosp(sintCosp__11),
+.o_sintSinp(sintSinp__11),
+.o_uz2(uz2__11),
+.o_uxUz(uxUz__11),
+.o_uyUz(uyUz__11),
+.o_uySintSinp(uySintSinp__11),
+.o_oneMinusUz2(oneMinusUz2__11),
+.o_uyUzSintCosp(uyUzSintCosp__11),
+.o_uxUzSintCosp(uxUzSintCosp__11),
+.o_uxSintSinp(uxSintSinp__11),
+.o_sqrtOneMinusUz2(sqrtOneMinusUz2__11),
+.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__11),
+.o_uxCost(uxCost__11),
+.o_uzCost(uzCost__11),
+.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__11),
+.o_uxNumerator(uxNumerator__11),
+.o_uyNumerator(uyNumerator__11),
+.o_uyCost(uyCost__11),
+.o_uxQuotient(uxQuotient__11),
+.o_uyQuotient(uyQuotient__11)
+);  
+
+InternalsBlock pipeReg10(
+//Inputs
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_sint(sint__9),
+.i_cost(cost__9),
+.i_sinp(sinp__9),
+.i_cosp(cosp__9),
+.i_sintCosp(sintCosp__9),
+.i_sintSinp(sintSinp__9),
+.i_uz2(uz2__9),
+.i_uxUz(uxUz__9),
+.i_uyUz(uyUz__9),
+.i_uySintSinp(uySintSinp__9),
+.i_oneMinusUz2(oneMinusUz2__9),
+.i_uyUzSintCosp(uyUzSintCosp__9),
+.i_uxUzSintCosp(uxUzSintCosp__9),
+.i_uxSintSinp(uxSintSinp__9),
+.i_sqrtOneMinusUz2(sqrtOneMinusUz2__9),
+.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__9),
+.i_uxCost(uxCost__9),
+.i_uzCost(uzCost__9),
+.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__9),
+.i_uxNumerator(uxNumerator__9),
+.i_uyNumerator(uyNumerator__9),
+.i_uyCost(uyCost__9),
+.i_uxQuotient(uxQuotient__9),
+.i_uyQuotient(uyQuotient__9),
+//Outputs			 
+.o_sint(sint__10),
+.o_cost(cost__10),
+.o_sinp(sinp__10),
+.o_cosp(cosp__10),
+.o_sintCosp(sintCosp__10),
+.o_sintSinp(sintSinp__10),
+.o_uz2(uz2__10),
+.o_uxUz(uxUz__10),
+.o_uyUz(uyUz__10),
+.o_uySintSinp(uySintSinp__10),
+.o_oneMinusUz2(oneMinusUz2__10),
+.o_uyUzSintCosp(uyUzSintCosp__10),
+.o_uxUzSintCosp(uxUzSintCosp__10),
+.o_uxSintSinp(uxSintSinp__10),
+.o_sqrtOneMinusUz2(sqrtOneMinusUz2__10),
+.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__10),
+.o_uxCost(uxCost__10),
+.o_uzCost(uzCost__10),
+.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__10),
+.o_uxNumerator(uxNumerator__10),
+.o_uyNumerator(uyNumerator__10),
+.o_uyCost(uyCost__10),
+.o_uxQuotient(uxQuotient__10),
+.o_uyQuotient(uyQuotient__10)
+);  
+
+InternalsBlock pipeReg9(
+//Inputs
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_sint(sint__8),
+.i_cost(cost__8),
+.i_sinp(sinp__8),
+.i_cosp(cosp__8),
+.i_sintCosp(sintCosp__8),
+.i_sintSinp(sintSinp__8),
+.i_uz2(uz2__8),
+.i_uxUz(uxUz__8),
+.i_uyUz(uyUz__8),
+.i_uySintSinp(uySintSinp__8),
+.i_oneMinusUz2(oneMinusUz2__8),
+.i_uyUzSintCosp(uyUzSintCosp__8),
+.i_uxUzSintCosp(uxUzSintCosp__8),
+.i_uxSintSinp(uxSintSinp__8),
+.i_sqrtOneMinusUz2(sqrtOneMinusUz2__8),
+.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__8),
+.i_uxCost(uxCost__8),
+.i_uzCost(uzCost__8),
+.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__8),
+.i_uxNumerator(uxNumerator__8),
+.i_uyNumerator(uyNumerator__8),
+.i_uyCost(uyCost__8),
+.i_uxQuotient(uxQuotient__8),
+.i_uyQuotient(uyQuotient__8),
+//Outputs			 
+.o_sint(sint__9),
+.o_cost(cost__9),
+.o_sinp(sinp__9),
+.o_cosp(cosp__9),
+.o_sintCosp(sintCosp__9),
+.o_sintSinp(sintSinp__9),
+.o_uz2(uz2__9),
+.o_uxUz(uxUz__9),
+.o_uyUz(uyUz__9),
+.o_uySintSinp(uySintSinp__9),
+.o_oneMinusUz2(oneMinusUz2__9),
+.o_uyUzSintCosp(uyUzSintCosp__9),
+.o_uxUzSintCosp(uxUzSintCosp__9),
+.o_uxSintSinp(uxSintSinp__9),
+.o_sqrtOneMinusUz2(sqrtOneMinusUz2__9),
+.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__9),
+.o_uxCost(uxCost__9),
+.o_uzCost(uzCost__9),
+.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__9),
+.o_uxNumerator(uxNumerator__9),
+.o_uyNumerator(uyNumerator__9),
+.o_uyCost(uyCost__9),
+.o_uxQuotient(uxQuotient__9),
+.o_uyQuotient(uyQuotient__9)
+);  
+
+InternalsBlock pipeReg8(
+//Inputs
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_sint(sint__7),
+.i_cost(cost__7),
+.i_sinp(sinp__7),
+.i_cosp(cosp__7),
+.i_sintCosp(sintCosp__7),
+.i_sintSinp(sintSinp__7),
+.i_uz2(uz2__7),
+.i_uxUz(uxUz__7),
+.i_uyUz(uyUz__7),
+.i_uySintSinp(uySintSinp__7),
+.i_oneMinusUz2(oneMinusUz2__7),
+.i_uyUzSintCosp(uyUzSintCosp__7),
+.i_uxUzSintCosp(uxUzSintCosp__7),
+.i_uxSintSinp(uxSintSinp__7),
+.i_sqrtOneMinusUz2(sqrtOneMinusUz2__7),
+.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__7),
+.i_uxCost(uxCost__7),
+.i_uzCost(uzCost__7),
+.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__7),
+.i_uxNumerator(uxNumerator__7),
+.i_uyNumerator(uyNumerator__7),
+.i_uyCost(uyCost__7),
+.i_uxQuotient(uxQuotient__7),
+.i_uyQuotient(uyQuotient__7),
+//Outputs			 
+.o_sint(sint__8),
+.o_cost(cost__8),
+.o_sinp(sinp__8),
+.o_cosp(cosp__8),
+.o_sintCosp(sintCosp__8),
+.o_sintSinp(sintSinp__8),
+.o_uz2(uz2__8),
+.o_uxUz(uxUz__8),
+.o_uyUz(uyUz__8),
+.o_uySintSinp(uySintSinp__8),
+.o_oneMinusUz2(oneMinusUz2__8),
+.o_uyUzSintCosp(uyUzSintCosp__8),
+.o_uxUzSintCosp(uxUzSintCosp__8),
+.o_uxSintSinp(uxSintSinp__8),
+.o_sqrtOneMinusUz2(sqrtOneMinusUz2__8),
+.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__8),
+.o_uxCost(uxCost__8),
+.o_uzCost(uzCost__8),
+.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__8),
+.o_uxNumerator(uxNumerator__8),
+.o_uyNumerator(uyNumerator__8),
+.o_uyCost(uyCost__8),
+.o_uxQuotient(uxQuotient__8),
+.o_uyQuotient(uyQuotient__8)
+);  
+
+InternalsBlock pipeReg7(
+//Inputs
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_sint(sint__6),
+.i_cost(cost__6),
+.i_sinp(sinp__6),
+.i_cosp(cosp__6),
+.i_sintCosp(sintCosp__6),
+.i_sintSinp(sintSinp__6),
+.i_uz2(uz2__6),
+.i_uxUz(uxUz__6),
+.i_uyUz(uyUz__6),
+.i_uySintSinp(uySintSinp__6),
+.i_oneMinusUz2(oneMinusUz2__6),
+.i_uyUzSintCosp(uyUzSintCosp__6),
+.i_uxUzSintCosp(uxUzSintCosp__6),
+.i_uxSintSinp(uxSintSinp__6),
+.i_sqrtOneMinusUz2(sqrtOneMinusUz2__6),
+.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__6),
+.i_uxCost(uxCost__6),
+.i_uzCost(uzCost__6),
+.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__6),
+.i_uxNumerator(uxNumerator__6),
+.i_uyNumerator(uyNumerator__6),
+.i_uyCost(uyCost__6),
+.i_uxQuotient(uxQuotient__6),
+.i_uyQuotient(uyQuotient__6),
+//Outputs			 
+.o_sint(sint__7),
+.o_cost(cost__7),
+.o_sinp(sinp__7),
+.o_cosp(cosp__7),
+.o_sintCosp(sintCosp__7),
+.o_sintSinp(sintSinp__7),
+.o_uz2(uz2__7),
+.o_uxUz(uxUz__7),
+.o_uyUz(uyUz__7),
+.o_uySintSinp(uySintSinp__7),
+.o_oneMinusUz2(oneMinusUz2__7),
+.o_uyUzSintCosp(uyUzSintCosp__7),
+.o_uxUzSintCosp(uxUzSintCosp__7),
+.o_uxSintSinp(uxSintSinp__7),
+.o_sqrtOneMinusUz2(sqrtOneMinusUz2__7),
+.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__7),
+.o_uxCost(uxCost__7),
+.o_uzCost(uzCost__7),
+.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__7),
+.o_uxNumerator(uxNumerator__7),
+.o_uyNumerator(uyNumerator__7),
+.o_uyCost(uyCost__7),
+.o_uxQuotient(uxQuotient__7),
+.o_uyQuotient(uyQuotient__7)
+);  
+
+InternalsBlock pipeReg6(
+//Inputs
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_sint(sint__5),
+.i_cost(cost__5),
+.i_sinp(sinp__5),
+.i_cosp(cosp__5),
+.i_sintCosp(sintCosp__5),
+.i_sintSinp(sintSinp__5),
+.i_uz2(uz2__5),
+.i_uxUz(uxUz__5),
+.i_uyUz(uyUz__5),
+.i_uySintSinp(uySintSinp__5),
+.i_oneMinusUz2(oneMinusUz2__5),
+.i_uyUzSintCosp(uyUzSintCosp__5),
+.i_uxUzSintCosp(uxUzSintCosp__5),
+.i_uxSintSinp(uxSintSinp__5),
+.i_sqrtOneMinusUz2(sqrtOneMinusUz2__5),
+.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__5),
+.i_uxCost(uxCost__5),
+.i_uzCost(uzCost__5),
+.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__5),
+.i_uxNumerator(uxNumerator__5),
+.i_uyNumerator(uyNumerator__5),
+.i_uyCost(uyCost__5),
+.i_uxQuotient(uxQuotient__5),
+.i_uyQuotient(uyQuotient__5),
+//Outputs			 
+.o_sint(sint__6),
+.o_cost(cost__6),
+.o_sinp(sinp__6),
+.o_cosp(cosp__6),
+.o_sintCosp(sintCosp__6),
+.o_sintSinp(sintSinp__6),
+.o_uz2(uz2__6),
+.o_uxUz(uxUz__6),
+.o_uyUz(uyUz__6),
+.o_uySintSinp(uySintSinp__6),
+.o_oneMinusUz2(oneMinusUz2__6),
+.o_uyUzSintCosp(uyUzSintCosp__6),
+.o_uxUzSintCosp(uxUzSintCosp__6),
+.o_uxSintSinp(uxSintSinp__6),
+.o_sqrtOneMinusUz2(sqrtOneMinusUz2__6),
+.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__6),
+.o_uxCost(uxCost__6),
+.o_uzCost(uzCost__6),
+.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__6),
+.o_uxNumerator(uxNumerator__6),
+.o_uyNumerator(uyNumerator__6),
+.o_uyCost(uyCost__6),
+.o_uxQuotient(uxQuotient__6),
+.o_uyQuotient(uyQuotient__6)
+);  
+
+InternalsBlock pipeReg5(
+//Inputs
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_sint(sint__4),
+.i_cost(cost__4),
+.i_sinp(sinp__4),
+.i_cosp(cosp__4),
+.i_sintCosp(sintCosp__4),
+.i_sintSinp(sintSinp__4),
+.i_uz2(uz2__4),
+.i_uxUz(uxUz__4),
+.i_uyUz(uyUz__4),
+.i_uySintSinp(uySintSinp__4),
+.i_oneMinusUz2(oneMinusUz2__4),
+.i_uyUzSintCosp(uyUzSintCosp__4),
+.i_uxUzSintCosp(uxUzSintCosp__4),
+.i_uxSintSinp(uxSintSinp__4),
+.i_sqrtOneMinusUz2(sqrtOneMinusUz2__4),
+.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__4),
+.i_uxCost(uxCost__4),
+.i_uzCost(uzCost__4),
+.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__4),
+.i_uxNumerator(uxNumerator__4),
+.i_uyNumerator(uyNumerator__4),
+.i_uyCost(uyCost__4),
+.i_uxQuotient(uxQuotient__4),
+.i_uyQuotient(uyQuotient__4),
+//Outputs			 
+.o_sint(sint__5),
+.o_cost(cost__5),
+.o_sinp(sinp__5),
+.o_cosp(cosp__5),
+.o_sintCosp(sintCosp__5),
+.o_sintSinp(sintSinp__5),
+.o_uz2(uz2__5),
+.o_uxUz(uxUz__5),
+.o_uyUz(uyUz__5),
+.o_uySintSinp(uySintSinp__5),
+.o_oneMinusUz2(oneMinusUz2__5),
+.o_uyUzSintCosp(uyUzSintCosp__5),
+.o_uxUzSintCosp(uxUzSintCosp__5),
+.o_uxSintSinp(uxSintSinp__5),
+.o_sqrtOneMinusUz2(sqrtOneMinusUz2__5),
+.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__5),
+.o_uxCost(uxCost__5),
+.o_uzCost(uzCost__5),
+.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__5),
+.o_uxNumerator(uxNumerator__5),
+.o_uyNumerator(uyNumerator__5),
+.o_uyCost(uyCost__5),
+.o_uxQuotient(uxQuotient__5),
+.o_uyQuotient(uyQuotient__5)
+);  
+
+
+//since these will be replaced later
+
+
+ assign 	sint__0						= 32'b00000000000000000000000000000000;
+ assign		cost__0						= 32'b00000000000000000000000000000000;
+ assign		sinp__0						= 32'b00000000000000000000000000000000;
+ assign		cosp__0						= 32'b00000000000000000000000000000000;
+ assign		sintCosp__0					= 32'b00000000000000000000000000000000;
+ assign		sintSinp__0					= 32'b00000000000000000000000000000000;
+ assign		uz2__0						= 0;
+ assign		uxUz__0						= 32'b00000000000000000000000000000000;
+ assign		uyUz__0						= 32'b00000000000000000000000000000000;
+ assign		uySintSinp__0				= 32'b00000000000000000000000000000000;
+ assign		oneMinusUz2__0				= 0;
+ assign		uyUzSintCosp__0				= 32'b00000000000000000000000000000000;
+ assign		uxUzSintCosp__0				= 32'b00000000000000000000000000000000;
+ assign		uxSintSinp__0				= 32'b00000000000000000000000000000000;
+ assign		sqrtOneMinusUz2__0			= 32'b00000000000000000000000000000000;
+ assign		sintCospSqrtOneMinusUz2__0	= 32'b00000000000000000000000000000000;
+ assign		uxCost__0					= 32'b00000000000000000000000000000000;
+ assign		uzCost__0					= 32'b00000000000000000000000000000000;
+ assign		sqrtOneMinusUz2_inv__0		= 32'b00000000000000000000000000000000;
+ assign		uxNumerator__0				= 32'b00000000000000000000000000000000;
+ assign		uyNumerator__0				= 32'b00000000000000000000000000000000;
+ assign		uyCost__0					= 32'b00000000000000000000000000000000;
+ assign		uxQuotient__0				= 32'b00000000000000000000000000000000;
+ assign		uyQuotient__0				= 32'b00000000000000000000000000000000;
+
+InternalsBlock pipeReg1(
+//Inputs
+.clock(clock),
+.reset(reset),
+.enable(enable),
+.i_sint(sint__0),
+.i_cost(cost__0),
+.i_sinp(sinp__0),
+.i_cosp(cosp__0),
+.i_sintCosp(sintCosp__0),
+.i_sintSinp(sintSinp__0),
+.i_uz2(uz2__0),
+.i_uxUz(uxUz__0),
+.i_uyUz(uyUz__0),
+.i_uySintSinp(uySintSinp__0),
+.i_oneMinusUz2(oneMinusUz2__0),
+.i_uyUzSintCosp(uyUzSintCosp__0),
+.i_uxUzSintCosp(uxUzSintCosp__0),
+.i_uxSintSinp(uxSintSinp__0),
+.i_sqrtOneMinusUz2(sqrtOneMinusUz2__0),
+.i_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__0),
+.i_uxCost(uxCost__0),
+.i_uzCost(uzCost__0),
+.i_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__0),
+.i_uxNumerator(uxNumerator__0),
+.i_uyNumerator(uyNumerator__0),
+.i_uyCost(uyCost__0),
+.i_uxQuotient(uxQuotient__0),
+.i_uyQuotient(uyQuotient__0),
+//Outputs			 
+.o_sint(sint__1),
+.o_cost(cost__1),
+.o_sinp(sinp__1),
+.o_cosp(cosp__1),
+.o_sintCosp(sintCosp__1),
+.o_sintSinp(sintSinp__1),
+.o_uz2(uz2__1),
+.o_uxUz(uxUz__1),
+.o_uyUz(uyUz__1),
+.o_uySintSinp(uySintSinp__1),
+.o_oneMinusUz2(oneMinusUz2__1),
+.o_uyUzSintCosp(uyUzSintCosp__1),
+.o_uxUzSintCosp(uxUzSintCosp__1),
+.o_uxSintSinp(uxSintSinp__1),
+.o_sqrtOneMinusUz2(sqrtOneMinusUz2__1),
+.o_sintCospSqrtOneMinusUz2(sintCospSqrtOneMinusUz2__1),
+.o_uxCost(uxCost__1),
+.o_uzCost(uzCost__1),
+.o_sqrtOneMinusUz2_inv(sqrtOneMinusUz2_inv__1),
+.o_uxNumerator(uxNumerator__1),
+.o_uyNumerator(uyNumerator__1),
+.o_uyCost(uyCost__1),
+.o_uxQuotient(uxQuotient__1),
+.o_uyQuotient(uyQuotient__1)
+);
+
+//-------------SYNCHRONOUS LOGIC----------------------
+//
+//
+//
+//
+//
+//
+//
+//
+//
+//
+//
+//
+//This is the end of the generate statement, and the beginning of the
+//synchronous logic.  On the clock event, the outputs calculated from
+//this block are put on the output pins for reading (registered
+//outputs, as per the convention).
+
+
+
+
+//Assign outputs from block on positive clock edge.
+always @ (posedge clock) begin
+	if(reset_new) begin
+		//Reset internal non-pipelined registers here.
+		ux_scatterer	<= 32'h00000000;
+		uy_scatterer	<= 32'h00000000;
+		uz_scatterer	<= 32'h7FFFFFFF;
+	end else if (enable) begin
+		ux_scatterer <= new_ux;
+		uy_scatterer <= new_uy;
+		uz_scatterer <= new_uz;
+	end
+end
+
+//-------------ASYNCHRONOUS LOGIC----------------------
+//
+//
+//
+//
+//
+//
+//
+//
+//
+//
+//
+//
+//This is where the asynchronous logic takes place.  Things that
+//occur here include setting up wiring to send to the multipliers,
+//divide unit, and square root unit.  Also, products brought in
+//from the wrapper are placed on the appropriate wires for placement
+//in the pipeline.
+
+
+
+
+//-------------OPERAND SETUP----------------------
+
+
+//NAMING CONVENTION:
+//opX_Y_Z, op stands for operand, X stands for the multiplication number for
+//that clock cycle, Y stands for the clock cycle, Z is either 1 or 2 for the
+//first or second operand for this multiply
+//
+//COMMENTING CONVENTIONS:
+//CC X means that the values being calculated will be ready for the Xth register
+//location, where 0 is the register prior to any calculations being done, 1 is
+//after the 1st clock cycle of calculation, etc.
+
+//CC 2
+assign	op1_2_1						=	i_uz1;
+assign	op1_2_2						=	i_uz1;
+	
+//CC 3
+//SUBTRACTION, see math results
+	
+//CC 4
+assign	op1_4_1						=	i_ux3;
+assign	op1_4_2						=	i_uz3;
+
+//CC 5 -- NOOP, line up with reflector
+	
+//CC `SQRT+5 -- Started in CC 6
+assign	sqrtOperand1_6				=	oneMinusUz2__5;
+
+//CC `SQRT+`DIV+6 -- Started in CC `SQRT+5
+assign	divNumerator1_16			=	`INTMAX_2;
+//assign	divDenominator1_16			=	sqrtOneMinusUz2[`SQRT+5];
+assign	divDenominator1_16			=	new_sqrtOneMinusUz2;
+
+//CC `SQRT+`DIV+3
+assign op1_33_1						=	sint_Mem;
+assign op1_33_2						=	cosp_Mem;
+
+assign op2_33_1						=	sint_Mem;
+assign op2_33_2						=	sinp_Mem;
+
+assign op3_33_1						=	i_uy32;
+assign op3_33_2						=	i_uz32;
+
+//CC `SQRT+`DIV+4
+assign op1_34_1						=	i_ux33;
+assign op1_34_2						=	sintSinp__33;
+
+assign op2_34_1						=	i_uy33;
+assign op2_34_2						=	sintSinp__33;
+
+assign op3_34_1						=	uxUz__33;
+assign op3_34_2						=	sintCosp__33;
+
+assign op4_34_1						=	uyUz__33;
+assign op4_34_2						=	sintCosp__33;
+
+//CC `SQRT+`DIV+5
+//2 SUBS (see math results)
+//`DIVISION COMPLETE (see math results)
+
+//CC `SQRT+`DIV+6 -- Division is now complete and can be read.
+assign op1_36_1						=	uxNumerator__35;
+assign op1_36_2						=	new_sqrtOneMinusUz2_inv;
+
+
+assign op2_36_1						=	uyNumerator__35;
+assign op2_36_2						=	new_sqrtOneMinusUz2_inv;
+
+assign op3_36_1						=	sintCosp__35;
+assign op3_36_2						=	sqrtOneMinusUz2__35;
+
+assign op4_36_1						=	i_ux35;
+assign op4_36_2						=	cost__35;
+
+assign op5_36_1						=	i_uy35;
+assign op5_36_2						=	cost__35;
+
+assign op6_36_1						=	i_uz35;
+assign op6_36_2						=	cost__35;
+
+
+//-------------MATH RESULTS----------------------
+
+
+//NAMING CONVENTION:
+//new_VAR means that the variable named VAR will be stored into the register
+//pipeline at the clock cycle indicated by the comments above it.
+//
+//prod stands for product, quot stands for quotient, sqrt stands for square root
+//prodX_Y means the Xth product which started calculation at the Yth clock cycle
+//Similarly for quot and sqrtResult.
+//
+//
+//COMMENTING CONVENTIONS:
+//CC X means that the values being calculated will be ready for the Xth register
+//location, where 0 is the register prior to any calculations being done, 1 is
+//after the 1st clock cycle of calculation, etc.
+
+
+//Used to determine whether or not the divide operation overflowed.
+//or U1(div_overflow, quot1_16[62], quot1_16[61], quot1_16[60], quot1_16[59], quot1_16[58], quot1_16[57], quot1_16[56], quot1_16[55], quot1_16[54], quot1_16[53], quot1_16[52], quot1_16[51], quot1_16[50], quot1_16[49], quot1_16[48], quot1_16[47]);
+assign div_overflow = quot1_16[62]| quot1_16[61]| quot1_16[60]| quot1_16[59]| quot1_16[58]| quot1_16[57]| quot1_16[56]| quot1_16[55]| quot1_16[54]| quot1_16[53]| quot1_16[52]| quot1_16[51]| quot1_16[50]| quot1_16[49]| quot1_16[48]| quot1_16[47];
+
+//Used to determine whether or not the multiply operation overflowed.
+//or U2(toAnd1_36_1, prod1_36[62], prod1_36[61], prod1_36[60], prod1_36[59], prod1_36[58], prod1_36[57], prod1_36[56], prod1_36[55], prod1_36[54], prod1_36[53], prod1_36[52], prod1_36[51], prod1_36[50], prod1_36[49], prod1_36[48], prod1_36[47], prod1_36[46]);
+assign toAnd1_36_1 = prod1_36[62]| prod1_36[61]| prod1_36[60]| prod1_36[59]| prod1_36[58]| prod1_36[57]| prod1_36[56]| prod1_36[55]| prod1_36[54]| prod1_36[53]| prod1_36[52]| prod1_36[51]| prod1_36[50]| prod1_36[49]| prod1_36[48]| prod1_36[47]| prod1_36[46];
+//Used to determine whether or not the multiply operation overflowed in the negative direction.
+//or U3(toAnd1_36_2, ~prod1_36[62], ~prod1_36[61], ~prod1_36[60], ~prod1_36[59], ~prod1_36[58], ~prod1_36[57], ~prod1_36[56], ~prod1_36[55], ~prod1_36[54], ~prod1_36[53], ~prod1_36[52], ~prod1_36[51], ~prod1_36[50], ~prod1_36[49], ~prod1_36[48], ~prod1_36[47], ~prod1_36[46]);
+assign toAnd1_36_2 = ~prod1_36[62]| ~prod1_36[61]| ~prod1_36[60]| ~prod1_36[59]| ~prod1_36[58]| ~prod1_36[57]| ~prod1_36[56]| ~prod1_36[55]| ~prod1_36[54]| ~prod1_36[53]| ~prod1_36[52]| ~prod1_36[51]| ~prod1_36[50]| ~prod1_36[49]| ~prod1_36[48]| ~prod1_36[47]| ~prod1_36[46];
+
+//and U4(overflow1_36, ~prod1_36[63], toAnd1_36_1);
+assign overflow1_36 = ~prod1_36[63]| toAnd1_36_1;
+//and U5(negOverflow1_36, prod1_36[63], toAnd1_36_2);
+assign negOverflow1_36 = prod1_36[63]| toAnd1_36_2;
+
+
+//Used to determine whether or not the multiply operation overflowed.
+//or U6(toAnd2_36_1, prod2_36[62], prod2_36[61], prod2_36[60], prod2_36[59], prod2_36[58], prod2_36[57], prod2_36[56], prod2_36[55], prod2_36[54], prod2_36[53], prod2_36[52], prod2_36[51], prod2_36[50], prod2_36[49], prod2_36[48], prod2_36[47], prod2_36[46]);
+assign toAnd2_36_1 = prod2_36[62]| prod2_36[61]| prod2_36[60]| prod2_36[59]| prod2_36[58]| prod2_36[57]| prod2_36[56]| prod2_36[55]| prod2_36[54]| prod2_36[53]| prod2_36[52]| prod2_36[51]| prod2_36[50]| prod2_36[49]| prod2_36[48]| prod2_36[47]| prod2_36[46];
+//Used to determine whether or not the multiply operation overflowed in the negative direction.
+//or U7(toAnd2_36_2, ~prod2_36[62], ~prod2_36[61], ~prod2_36[60], ~prod2_36[59], ~prod2_36[58], ~prod2_36[57], ~prod2_36[56], ~prod2_36[55], ~prod2_36[54], ~prod2_36[53], ~prod2_36[52], ~prod2_36[51], ~prod2_36[50], ~prod2_36[49], ~prod2_36[48], ~prod2_36[47], ~prod2_36[46]);
+assign toAnd2_36_2 = ~prod2_36[62]| ~prod2_36[61]| ~prod2_36[60]| ~prod2_36[59]| ~prod2_36[58]| ~prod2_36[57]| ~prod2_36[56]| ~prod2_36[55]| ~prod2_36[54]| ~prod2_36[53]| ~prod2_36[52]| ~prod2_36[51]| ~prod2_36[50]| ~prod2_36[49]| ~prod2_36[48]| ~prod2_36[47]| ~prod2_36[46];
+
+//and U8(overflow2_36, ~prod2_36[63], toAnd2_36_1);
+assign overflow2_36 = ~prod2_36[63]|toAnd2_36_1;
+//and U9(negOverflow2_36, prod2_36[63], toAnd2_36_2);
+assign negOverflow2_36 = prod2_36[63]|toAnd2_36_2;
+
+
+
+//CC 2
+assign new_uz2						= prod1_2;
+//CC 3
+sub_64b		oneMinusUz2_sub(
+				.dataa(`INTMAX_2),
+				.datab(uz2__2),
+				.result(new_oneMinusUz2)
+		);
+
+//CC 4
+assign new_uxUz						= prod1_4;
+//CC `SQRT+5
+assign new_sqrtOneMinusUz2			= sqrtResult1_6;
+//CC `SQRT+`DIV+3
+assign new_sintCosp					= prod1_33;
+assign new_sintSinp					= prod2_33;
+assign new_uyUz						= prod3_33;
+//CC `SQRT+`DIV+4
+assign new_sint						= sint_Mem;
+assign new_cost						= cost_Mem;
+assign new_sinp						= sinp_Mem;
+assign new_cosp						= cosp_Mem;
+assign new_uxSintSinp				= prod1_34;
+assign new_uySintSinp				= prod2_34;
+assign new_uxUzSintCosp				= prod3_34;
+assign new_uyUzSintCosp				= prod4_34;
+//CC `SQRT+`DIV+5
+sub_32b		uxNumer_sub(
+				.dataa(uxUzSintCosp__34),
+				.datab(uySintSinp__34),
+				.overflow(uxNumerOverflow),
+				.result(new_uxNumerator)
+			);
+
+add_32b		uyNumer_add(
+				.dataa(uyUzSintCosp__34),
+				.datab(uxSintSinp__34),
+				.overflow(uyNumerOverflow),
+				.result(new_uyNumerator)
+			);
+
+
+//Possibility for division overflow (whereby the inverse is too large).  Data storage for this
+//value is 15 bits left of the decimal, and 16 bits to the right.
+assign new_sqrtOneMinusUz2_inv			=  (div_overflow) ? `INTMAX		:	{quot1_16[63:63], quot1_16[46:16]};
+
+//CC `SQRT+`DIV+6
+always @ (overflow1_36 or negOverflow1_36 or prod1_36 or overflow2_36 or negOverflow2_36 or prod2_36) begin
+	case ({overflow1_36, negOverflow1_36})
+	0:	new_uxQuotient = {prod1_36[63:63], prod1_36[45:15]};
+	1:	new_uxQuotient = `INTMIN;
+	2:	new_uxQuotient = `INTMAX;
+	//Should never occur
+	3:	new_uxQuotient = {prod1_36[63:63], prod1_36[45:15]};
+	endcase
+	
+	case ({overflow2_36, negOverflow2_36})
+	
+	0:	new_uyQuotient = {prod2_36[63:63], prod2_36[45:15]};
+	1:	new_uyQuotient = `INTMIN;
+	2:	new_uyQuotient = `INTMAX;
+		//Should never occur
+	3:	new_uyQuotient = {prod2_36[63:63], prod2_36[45:15]};
+	endcase
+end
+
+//always @ (*) begin
+//	new_uxQuotient = {prod1_36[63:63], prod1_36[47:16]};
+//	new_uyQuotient = {prod2_36[63:63], prod2_36[47:16]};
+//end
+
+assign new_sintCospSqrtOneMinusUz2	= prod3_36;
+assign new_uxCost					= prod4_36;
+assign new_uyCost					= prod5_36;
+assign new_uzCost					= prod6_36;
+
+
+
+//-----------------------FINAL RESULT CALCULATIONS--------------
+//
+//
+//
+//
+//
+//
+//
+//At this point, all calculations have been completed, save the
+//final results.  This part of the code decides whether or not the
+//current calculation involved a normal (orthogonal) incident or not,
+//and uses this information to determine how to calculate the
+//final results.  Final results are put on wires new_ux, new_uy, and
+//new_uz, where they are output to registers ux_scatterer,
+//uy_scatterer, and uz_scatterer on the clock event for synchronization
+//(registered outputs, as per the convention).
+
+
+
+//Determine whether or not the photon calculation was done on a photon that
+//was normal (orthogonal) to the plane of interest.  This is to avoid divide
+//by zero errors
+always @ (i_uz36) begin
+	//If uz >= `INTMAX-3 || uz <= -`INTMAX+3, normal incident
+	if(i_uz36 == 32'h7FFFFFFF || i_uz36 == 32'h7FFFFFFE || i_uz36 == 32'h7FFFFFFD || i_uz36 == 32'h7FFFFFFC || i_uz36 == 32'h80000000 || i_uz36 == 32'h80000001 || i_uz36 == 32'h80000002 || i_uz36 == 32'h80000003 || i_uz36 == 32'h80000004) begin
+		normalIncident = 1'b1;
+	end else begin
+		normalIncident = 1'b0;
+	end
+end
+
+
+
+//Assign calculation values for final ux result
+assign ux_add_1 = (normalIncident) ? sintCosp__36	:	uxQuotient__36;
+assign ux_add_2 = (normalIncident) ? 32'b0		:	uxCost__36;
+
+add_32b		ux_add(
+				.dataa(ux_add_1),
+				.datab(ux_add_2),
+				.overflow(uxOverflow),
+				.result(new_ux)
+			);
+
+//Assign calculation values for final uy result
+assign uy_add_1 = (normalIncident)	? sintSinp__36	:	uyQuotient__36;
+assign uy_add_2 = (normalIncident)	? 32'b0		:	uyCost__36;
+
+add_32b		uy_add(
+				.dataa(uy_add_1),
+				.datab(uy_add_2),
+				.overflow(uyOverflow),
+				.result(new_uy)
+			);
+
+
+
+
+//Assign calculation values for final uz result.
+//First MUX implements SIGN(uz) function.
+assign normalUz = (i_uz36 >=0)		? cost__36		:	-cost__36;
+assign uz_sub_1 = (normalIncident)	? normalUz			:	uzCost__36;
+assign uz_sub_2 = (normalIncident)	? 32'b0		:	sintCospSqrtOneMinusUz2__36;
+
+sub_32b		uz_sub(
+				.dataa(uz_sub_1),
+				.datab(uz_sub_2),
+				.overflow(uzOverflow),
+				.result(new_uz)
+			);
+			
+				
+
+endmodule
+
+
+//***********************************
+//Mathematical modules
+//***********************************
+
+module sub_64b (dataa, datab, result);
+
+	input [63:0] dataa;
+	input [63:0] datab;
+	output [63:0] result;
+
+	assign result = dataa - datab;
+
+endmodule
+
+module add_32b (dataa, datab, overflow, result);
+
+	input [31:0] dataa;
+	input [31:0] datab;
+	output overflow;
+	output [31:0] result;
+
+	wire [32:0]computation; //one extra bit to account for overflow
+	
+	assign computation = dataa + datab;
+	assign overflow = computation[32];
+	assign result = computation[31:0];
+
+endmodule 
+
+module sub_32b (dataa, datab, overflow, result); 
+
+	input [31:0] dataa;
+	input [31:0] datab;
+	output overflow;
+	output [31:0] result;
+
+	wire [32:0]computation; //one extra bit to account for overflow
+	
+	assign computation = dataa - datab;
+	assign overflow = computation[32];
+	assign result = computation[31:0];
+
+endmodule 
+
+module Mult_32b (dataa, datab, result); //now signed version!
+
+	input [31:0]dataa;
+	input [31:0]datab;
+	output [63:0]result;
+	
+	// assign result = dataa * datab; 
+	
+	wire [31:0]a;
+	wire [31:0]b;
+  assign a = dataa;
+  assign b = datab;
+
+	reg [63:0]c;
+	assign result = c;
+	
+	reg is_neg_a;
+	reg is_neg_b;
+	reg [31:0]a_tmp;
+	reg [31:0]b_tmp;
+	reg [63:0]mult_tmp;
+	reg [63:0]c_tmp;
+
+always@(a or b or is_neg_a or is_neg_b or a_tmp or b_tmp or c)
+begin
+	if(a[31] == 1) begin
+		a_tmp = -a;
+		is_neg_a = 1;
+	end else
+	begin
+		a_tmp = a;
+		is_neg_a = 0;
+	end
+
+	if(b[31] == 1) begin
+		b_tmp = -b;
+		is_neg_b = 1;
+	end else
+	begin
+		b_tmp = b;
+		is_neg_b = 0;
+	end
+
+	mult_tmp = a_tmp * b_tmp;
+
+	if( is_neg_a != is_neg_b) begin
+		c_tmp = -mult_tmp;
+	end else
+	begin
+		c_tmp = mult_tmp;
+	end
+end
+
+always@(c_tmp)
+begin
+	c = c_tmp;
+end
+
+endmodule
+
+
+
+module Div_64b (clock, denom, numer, quotient, remain);
+	input clock;
+	input [63:0]numer;
+	input [31:0]denom;
+	output [63:0]quotient;
+	reg [63:0]quotient;
+	output [31:0]remain;
+	reg [31:0]remain;
+	
+	wire [63:0]quotient_temp;
+	wire [31:0]remain_temp;
+	Div_64b_unsigned div_temp(.clock(clock), .denom_(denom), .numer_(numer), .quotient(quotient_temp), .remain(remain_temp));
+	
+	always @ (numer or denom or quotient_temp or remain_temp) begin
+		if ( numer[63]^denom[31] ) begin // only one is negative
+			quotient = -quotient_temp;
+			remain = -remain_temp;
+		end else begin
+			quotient = quotient_temp;
+			remain = remain_temp;
+		end
+	end 
+	
+endmodule
+
+
+/*module Div_64b (clock, denom, numer, quotient, remain);
+	input clock;
+	input [63:0]numer;
+	input [31:0]denom;
+	output [63:0]quotient;
+	reg [63:0]quotient;
+	output [31:0]remain;
+	reg [31:0]remain; */
+	
+module Div_64b_unsigned (clock, denom_, numer_, quotient, remain);
+	input clock;
+	input [63:0]numer_;
+	input [31:0]denom_;
+	output [63:0]quotient;
+	output [31:0]remain;
+
+	reg [63:0]numer;
+	reg [31:0]denom0;
+	
+	always @ (posedge clock) 
+	begin
+		numer <= numer_;
+		denom0 <= denom_;
+	end
+
+///////////////////////////////////////////////////Unchanged starts here	
+	reg [94:0]numer_temp_63; //need to add bits
+	reg [94:0]numer_temp_62;
+	reg [94:0]numer_temp_61;
+	reg [94:0]numer_temp_60_d, numer_temp_60_q;
+	reg [94:0]numer_temp_59;
+	reg [94:0]numer_temp_58;
+	reg [94:0]numer_temp_57_d, numer_temp_57_q;
+	reg [94:0]numer_temp_56;
+	reg [94:0]numer_temp_55;
+	reg [94:0]numer_temp_54_d, numer_temp_54_q;
+	reg [94:0]numer_temp_53;
+	reg [94:0]numer_temp_52;
+	reg [94:0]numer_temp_51_d, numer_temp_51_q;
+	reg [94:0]numer_temp_50;
+	reg [94:0]numer_temp_49;
+	reg [94:0]numer_temp_48_d, numer_temp_48_q;
+	reg [94:0]numer_temp_47;
+	reg [94:0]numer_temp_46;
+	reg [94:0]numer_temp_45_d, numer_temp_45_q;
+	reg [94:0]numer_temp_44;
+	reg [94:0]numer_temp_43;
+	reg [94:0]numer_temp_42_d, numer_temp_42_q;
+	reg [94:0]numer_temp_41;
+	reg [94:0]numer_temp_40;
+	reg [94:0]numer_temp_39_d, numer_temp_39_q;
+	reg [94:0]numer_temp_38;
+	reg [94:0]numer_temp_37;
+	reg [94:0]numer_temp_36_d, numer_temp_36_q;
+	reg [94:0]numer_temp_35;
+	reg [94:0]numer_temp_34;
+	reg [94:0]numer_temp_33_d, numer_temp_33_q;
+	reg [94:0]numer_temp_32;
+	reg [94:0]numer_temp_31;
+	reg [94:0]numer_temp_30_d, numer_temp_30_q;
+	reg [94:0]numer_temp_29;
+	reg [94:0]numer_temp_28;
+	reg [94:0]numer_temp_27_d, numer_temp_27_q;
+	reg [94:0]numer_temp_26;
+	reg [94:0]numer_temp_25;
+	reg [94:0]numer_temp_24;
+	reg [94:0]numer_temp_23_d, numer_temp_23_q;
+	reg [94:0]numer_temp_22;
+	reg [94:0]numer_temp_21;
+	reg [94:0]numer_temp_20;
+	reg [94:0]numer_temp_19_d, numer_temp_19_q;
+	reg [94:0]numer_temp_18;
+	reg [94:0]numer_temp_17;
+	reg [94:0]numer_temp_16;
+	reg [94:0]numer_temp_15_d, numer_temp_15_q;
+	reg [94:0]numer_temp_14;
+	reg [94:0]numer_temp_13;
+	reg [94:0]numer_temp_12;
+	reg [94:0]numer_temp_11_d, numer_temp_11_q;
+	reg [94:0]numer_temp_10;
+	reg [94:0]numer_temp_9;
+	reg [94:0]numer_temp_8;
+	reg [94:0]numer_temp_7_d, numer_temp_7_q;
+	reg [94:0]numer_temp_6;
+	reg [94:0]numer_temp_5;
+	reg [94:0]numer_temp_4;
+	reg [94:0]numer_temp_3_d, numer_temp_3_q;
+	reg [94:0]numer_temp_2;
+	reg [94:0]numer_temp_1_d, numer_temp_1_q;
+	reg [94:0]numer_temp_0;
+	reg [94:0]numer_temp;
+
+		//The dummy pipeline (20 clock cycles)
+	reg [63:0]quo0_d;
+	reg [63:0]quo1_d;
+	reg [63:0]quo2_d;
+	reg [63:0]quo3_d;
+	reg [63:0]quo4_d;
+	reg [63:0]quo5_d;
+	reg [63:0]quo6_d;
+	reg [63:0]quo7_d;
+	reg [63:0]quo8_d;
+	reg [63:0]quo9_d;
+	reg [63:0]quo10_d;
+	reg [63:0]quo11_d;
+	reg [63:0]quo12_d;
+	reg [63:0]quo13_d;
+	reg [63:0]quo14_d;
+	reg [63:0]quo15_d;
+	reg [63:0]quo16_d;
+	reg [63:0]quo17_d;
+	reg [63:0]quo18_d;
+	reg [63:0]quo19_d;
+	
+	reg [63:0]quo0_q;
+	reg [63:0]quo1_q;
+	reg [63:0]quo2_q;
+	reg [63:0]quo3_q;
+	reg [63:0]quo4_q;
+	reg [63:0]quo5_q;
+	reg [63:0]quo6_q;
+	reg [63:0]quo7_q;
+	reg [63:0]quo8_q;
+	reg [63:0]quo9_q;
+	reg [63:0]quo10_q;
+	reg [63:0]quo11_q;
+	reg [63:0]quo12_q;
+	reg [63:0]quo13_q;
+	reg [63:0]quo14_q;
+	reg [63:0]quo15_q;
+	reg [63:0]quo16_q;
+	reg [63:0]quo17_q;
+	reg [63:0]quo18_q;
+	
+	reg [31:0]denom1;
+	reg [31:0]denom2;
+	reg [31:0]denom3;	
+	reg [31:0]denom4;
+	reg [31:0]denom5;	
+	reg [31:0]denom6;
+	reg [31:0]denom7;	
+	reg [31:0]denom8;
+	reg [31:0]denom9;	
+	reg [31:0]denom10;
+	reg [31:0]denom11;	
+	reg [31:0]denom12;
+	reg [31:0]denom13;	
+	reg [31:0]denom14;
+	reg [31:0]denom15;	
+	reg [31:0]denom16;
+	reg [31:0]denom17;	
+	reg [31:0]denom18;
+	reg [31:0]denom19;
+	
+	
+	always @(numer or denom0) begin
+		numer_temp_63 = {31'b0, numer};
+		
+		//quo0[63]
+		if (numer_temp_63[94:63] >= denom0 ) begin
+			quo0_d[63] = 1'b1;
+			numer_temp_62 = {numer_temp_63[94:63] - denom0, numer_temp_63[62:0]};
+		end else begin
+			quo0_d[63] = 1'b0;
+			numer_temp_62 = numer_temp_63;
+		end
+		
+		//quo0[62]
+		if (numer_temp_62[94:62] >= denom0 ) begin
+			quo0_d[62] = 1'b1;
+			numer_temp_61 = {numer_temp_62[94:62] - denom0, numer_temp_62[61:0]};
+		end else begin
+			quo0_d[62] = 1'b0;
+           numer_temp_61 = numer_temp_62;
+		end
+		//quo0[61]
+		if (numer_temp_61[94:61] >= denom0 ) begin
+			quo0_d[61] = 1'b1;
+			numer_temp_60_d = {numer_temp_61[94:61] - denom0, numer_temp_61[60:0]};
+		end else begin
+			quo0_d[61] = 1'b0;
+           numer_temp_60_d = numer_temp_61;
+		end
+		quo0_d[60:0] = 61'b0;
+	end
+	
+	always @ (posedge clock) begin
+		quo0_q <= quo0_d;
+		numer_temp_60_q <= numer_temp_60_d;
+		denom1 <= denom0;
+	end
+		
+	always @(numer_temp_60_q or denom1 or quo0_q) begin
+		quo1_d[63:61] = quo0_q[63:61];
+	
+		//quo1_d[60]
+		if (numer_temp_60_q[94:60] >= denom1 ) begin
+			quo1_d[60] = 1'b1;
+			numer_temp_59 = {numer_temp_60_q[94:60] - denom1, numer_temp_60_q[59:0]};
+		end else begin
+			quo1_d[60] = 1'b0;
+           numer_temp_59 = numer_temp_60_q;
+		end
+		//quo1_d[59]
+		if (numer_temp_59[94:59] >= denom1 ) begin
+			quo1_d[59] = 1'b1;
+			numer_temp_58 = {numer_temp_59[94:59] - denom1, numer_temp_59[58:0]};
+		end else begin
+			quo1_d[59] = 1'b0;
+           numer_temp_58 = numer_temp_59;
+		end
+		//quo1_d[58]
+		if (numer_temp_58[94:58] >= denom1 ) begin
+			quo1_d[58] = 1'b1;
+			numer_temp_57_d = {numer_temp_58[94:58] - denom1, numer_temp_58[57:0]};
+		end else begin
+			quo1_d[58] = 1'b0;
+           numer_temp_57_d = numer_temp_58;
+		end
+		quo1_d[57:0] = 58'b0;
+	end
+
+	always @ (posedge clock) begin
+		quo1_q <= quo1_d;
+		numer_temp_57_q <= numer_temp_57_d;
+		denom2 <= denom1;
+	end
+		
+	always @ (numer_temp_57_q or denom2 or quo1_q) begin
+		quo2_d[63:58] = quo1_q[63:58];
+	
+		//quo2_d[57]
+		if (numer_temp_57_q[94:57] >= denom2 ) begin
+			quo2_d[57] = 1'b1;
+			numer_temp_56 = {numer_temp_57_q[94:57] - denom2, numer_temp_57_q[56:0]};
+		end else begin
+			quo2_d[57] = 1'b0;
+           numer_temp_56 = numer_temp_57_q;
+		end
+		//quo2_d[56]
+		if (numer_temp_56[94:56] >= denom2 ) begin
+			quo2_d[56] = 1'b1;
+			numer_temp_55 = {numer_temp_56[94:56] - denom2, numer_temp_56[55:0]};
+		end else begin
+			quo2_d[56] = 1'b0;
+           numer_temp_55 = numer_temp_56;
+		end
+		//quo2_d[55]
+		if (numer_temp_55[94:55] >= denom2 ) begin
+			quo2_d[55] = 1'b1;
+			numer_temp_54_d = {numer_temp_55[94:55] - denom2, numer_temp_55[54:0]};
+		end else begin
+			quo2_d[55] = 1'b0;
+           numer_temp_54_d = numer_temp_55;
+		end
+		quo2_d[54:0] = 55'b0;
+	end
+	
+	
+	always @ (posedge clock) begin
+		quo2_q <= quo2_d;
+		numer_temp_54_q <= numer_temp_54_d;
+		denom3 <= denom2;
+	end
+	
+	always @ (numer_temp_54_q or denom3 or quo2_q) begin
+		quo3_d[63:55] = quo2_q[63:55];
+	
+		//quo3_d[54]
+		if (numer_temp_54_q[94:54] >= denom3 ) begin
+			quo3_d[54] = 1'b1;
+			numer_temp_53 = {numer_temp_54_q[94:54] - denom3, numer_temp_54_q[53:0]};
+		end else begin
+			quo3_d[54] = 1'b0;
+           numer_temp_53 = numer_temp_54_q;
+		end
+		//quo3_d[53]
+		if (numer_temp_53[94:53] >= denom3 ) begin
+			quo3_d[53] = 1'b1;
+			numer_temp_52 = {numer_temp_53[94:53] - denom3, numer_temp_53[52:0]};
+		end else begin
+			quo3_d[53] = 1'b0;
+           numer_temp_52 = numer_temp_53;
+		end
+		//quo3_d[52]
+		if (numer_temp_52[94:52] >= denom3 ) begin
+			quo3_d[52] = 1'b1;
+			numer_temp_51_d = {numer_temp_52[94:52] - denom3, numer_temp_52[51:0]};
+		end else begin
+			quo3_d[52] = 1'b0;
+           numer_temp_51_d = numer_temp_52;
+		end
+		quo3_d[51:0] = 52'b0;
+	end
+		
+	always @ (posedge clock) begin
+		quo3_q <= quo3_d;
+		numer_temp_51_q <= numer_temp_51_d;
+		denom4 <= denom3;
+	end
+		
+	always @ (numer_temp_51_q or denom4 or quo3_q) begin
+		quo4_d[63:52] = quo3_q[63:52];
+	
+		//quo4[51]
+		if (numer_temp_51_q[94:51] >= denom4 ) begin
+			quo4_d[51] = 1'b1;
+			numer_temp_50 = {numer_temp_51_q[94:51] - denom4, numer_temp_51_q[50:0]};
+		end else begin
+			quo4_d[51] = 1'b0;
+           numer_temp_50 = numer_temp_51_q;
+		end
+		//quo4_d[50]
+		if (numer_temp_50[94:50] >= denom4 ) begin
+			quo4_d[50] = 1'b1;
+			numer_temp_49 = {numer_temp_50[94:50] - denom4, numer_temp_50[49:0]};
+		end else begin
+			quo4_d[50] = 1'b0;
+           numer_temp_49 = numer_temp_50;
+		end
+		//quo4_d[49]
+		if (numer_temp_49[94:49] >= denom4 ) begin
+			quo4_d[49] = 1'b1;
+			numer_temp_48_d = {numer_temp_49[94:49] - denom4, numer_temp_49[48:0]};
+		end else begin
+			quo4_d[49] = 1'b0;
+           numer_temp_48_d = numer_temp_49;
+		end
+		quo4_d[48:0] = 49'b0;
+	end
+		
+	always @ (posedge clock) begin
+		quo4_q <= quo4_d;
+		numer_temp_48_q <= numer_temp_48_d;
+		denom5 <= denom4;
+	end
+		
+	always @ (numer_temp_48_q or denom5 or quo4_q) begin
+		quo5_d[63:49] = quo4_q[63:49];
+
+	//quo5_d[48]
+		if (numer_temp_48_q[94:48] >= denom5 ) begin
+			quo5_d[48] = 1'b1;
+			numer_temp_47 = {numer_temp_48_q[94:48] - denom5, numer_temp_48_q[47:0]};
+		end else begin
+			quo5_d[48] = 1'b0;
+           numer_temp_47 = numer_temp_48_q;
+		end
+		//quo5_d[47]
+		if (numer_temp_47[94:47] >= denom5 ) begin
+			quo5_d[47] = 1'b1;
+			numer_temp_46 = {numer_temp_47[94:47] - denom5, numer_temp_47[46:0]};
+		end else begin
+			quo5_d[47] = 1'b0;
+           numer_temp_46 = numer_temp_47;
+		end
+		//quo5_d[46]
+		if (numer_temp_46[94:46] >= denom5 ) begin
+			quo5_d[46] = 1'b1;
+			numer_temp_45_d = {numer_temp_46[94:46] - denom5, numer_temp_46[45:0]};
+		end else begin
+			quo5_d[46] = 1'b0;
+           numer_temp_45_d = numer_temp_46;
+		end
+		quo5_d[45:0] = 46'b0;
+	end
+		
+	always @ (posedge clock) begin
+		quo5_q <= quo5_d;
+		numer_temp_45_q <= numer_temp_45_d;
+		denom6 <= denom5;
+	end
+		
+	always @ (numer_temp_45_q or denom6 or quo5_q) begin
+		quo6_d[63:46] = quo5_q[63:46];
+	
+		//quo6_d[45]
+		if (numer_temp_45_q[94:45] >= denom6 ) begin
+			quo6_d[45] = 1'b1;
+			numer_temp_44 = {numer_temp_45_q[94:45] - denom6, numer_temp_45_q[44:0]};
+		end else begin
+			quo6_d[45] = 1'b0;
+           numer_temp_44 = numer_temp_45_q;
+		end
+		//quo6_d[44]
+		if (numer_temp_44[94:44] >= denom6 ) begin
+			quo6_d[44] = 1'b1;
+			numer_temp_43 = {numer_temp_44[94:44] - denom6, numer_temp_44[43:0]};
+		end else begin
+			quo6_d[44] = 1'b0;
+           numer_temp_43 = numer_temp_44;
+		end
+		//quo6_d[43]
+		if (numer_temp_43[94:43] >= denom6 ) begin
+			quo6_d[43] = 1'b1;
+			numer_temp_42_d = {numer_temp_43[94:43] - denom6, numer_temp_43[42:0]};
+		end else begin
+			quo6_d[43] = 1'b0;
+           numer_temp_42_d = numer_temp_43;
+		end
+		quo6_d[42:0] = 43'b0;
+	end
+	
+	always @ (posedge clock) begin
+		quo6_q<= quo6_d;
+		numer_temp_42_q <= numer_temp_42_d;
+		denom7 <= denom6;
+	end
+	
+	always @ (numer_temp_42_q or denom7 or quo6_q) begin
+		quo7_d[63:43] = quo6_q[63:43];
+	
+		//quo7_d[42]
+		if (numer_temp_42_q[94:42] >= denom7 ) begin
+			quo7_d[42] = 1'b1;
+			numer_temp_41 = {numer_temp_42_q[94:42] - denom7, numer_temp_42_q[41:0]};
+		end else begin
+			quo7_d[42] = 1'b0;
+           numer_temp_41 = numer_temp_42_q;
+		end
+		//quo7_d[41]
+		if (numer_temp_41[94:41] >= denom7 ) begin
+			quo7_d[41] = 1'b1;
+			numer_temp_40 = {numer_temp_41[94:41] - denom7, numer_temp_41[40:0]};
+		end else begin
+			quo7_d[41] = 1'b0;
+           numer_temp_40 = numer_temp_41;
+		end
+		//quo7_d[40]
+		if (numer_temp_40[94:40] >= denom7 ) begin
+			quo7_d[40] = 1'b1;
+			numer_temp_39_d = {numer_temp_40[94:40] - denom7, numer_temp_40[39:0]};
+		end else begin
+			quo7_d[40] = 1'b0;
+           numer_temp_39_d = numer_temp_40;
+		end
+		quo7_d[39:0] = 40'b0;
+	end
+		
+	always @ (posedge clock) begin
+		quo7_q <= quo7_d;
+		numer_temp_39_q <= numer_temp_39_d;
+		denom8 <= denom7;
+	end
+		
+	always @ (numer_temp_39_q or denom8 or quo7_q) begin
+		quo8_d[63:40] = quo7_q[63:40];
+	
+		//quo8[39]
+		if (numer_temp_39_q[94:39] >= denom8 ) begin
+			quo8_d[39] = 1'b1;
+			numer_temp_38 = {numer_temp_39_q[94:39] - denom8, numer_temp_39_q[38:0]};
+		end else begin
+			quo8_d[39] = 1'b0;
+           numer_temp_38 = numer_temp_39_q;
+		end
+		//quo8_d[38]
+		if (numer_temp_38[94:38] >= denom8 ) begin
+			quo8_d[38] = 1'b1;
+			numer_temp_37 = {numer_temp_38[94:38] - denom8, numer_temp_38[37:0]};
+		end else begin
+			quo8_d[38] = 1'b0;
+           numer_temp_37 = numer_temp_38;
+		end
+		//quo8_d[37]
+		if (numer_temp_37[94:37] >= denom8 ) begin
+			quo8_d[37] = 1'b1;
+			numer_temp_36_d = {numer_temp_37[94:37] - denom8, numer_temp_37[36:0]};
+		end else begin
+			quo8_d[37] = 1'b0;
+           numer_temp_36_d = numer_temp_37;
+		end
+		quo8_d[36:0] = 37'b0;
+	end
+		
+	always @ (posedge clock) begin
+		quo8_q <= quo8_d;
+		numer_temp_36_q <= numer_temp_36_d;
+		denom9 <= denom8;
+	end
+		
+	always @ (numer_temp_36_q or denom9 or quo8_q) begin
+		quo9_d[63:37] = quo8_q[63:37];
+	
+		//quo9[36]
+		if (numer_temp_36_q[94:36] >= denom9 ) begin
+			quo9_d[36] = 1'b1;
+			numer_temp_35 = {numer_temp_36_q[94:36] - denom9, numer_temp_36_q[35:0]};
+		end else begin
+			quo9_d[36] = 1'b0;
+           numer_temp_35 = numer_temp_36_q;
+		end
+		//quo9_d[35]
+		if (numer_temp_35[94:35] >= denom9 ) begin
+			quo9_d[35] = 1'b1;
+			numer_temp_34 = {numer_temp_35[94:35] - denom9, numer_temp_35[34:0]};
+		end else begin
+			quo9_d[35] = 1'b0;
+           numer_temp_34 = numer_temp_35;
+		end
+		//quo9_d[34]
+		if (numer_temp_34[94:34] >= denom9 ) begin
+			quo9_d[34] = 1'b1;
+			numer_temp_33_d = {numer_temp_34[94:34] - denom9, numer_temp_34[33:0]};
+		end else begin
+			quo9_d[34] = 1'b0;
+           numer_temp_33_d = numer_temp_34;
+		end
+		quo9_d[33:0] = 34'b0;
+	end
+		
+	always @ (posedge clock) begin
+		quo9_q <= quo9_d;
+		numer_temp_33_q <= numer_temp_33_d;
+		denom10 <= denom9;
+	end
+		
+	always @ (numer_temp_33_q or denom10 or quo9_q) begin
+		quo10_d[63:34] = quo9_q[63:34];
+	
+		//quo10_d[33]
+		if (numer_temp_33_q[94:33] >= denom10 ) begin
+			quo10_d[33] = 1'b1;
+			numer_temp_32 = {numer_temp_33_q[94:33] - denom10, numer_temp_33_q[32:0]};
+		end else begin
+			quo10_d[33] = 1'b0;
+           numer_temp_32 = numer_temp_33_q;
+		end
+		//quo10_d[32]
+		if (numer_temp_32[94:32] >= denom10 ) begin
+			quo10_d[32] = 1'b1;
+			numer_temp_31 = {numer_temp_32[94:32] - denom10, numer_temp_32[31:0]};
+		end else begin
+			quo10_d[32] = 1'b0;
+           numer_temp_31 = numer_temp_32;
+		end
+		//quo10_d[31]
+		if (numer_temp_31[94:31] >= denom10 ) begin
+			quo10_d[31] = 1'b1;
+			numer_temp_30_d = {numer_temp_31[94:31] - denom10, numer_temp_31[30:0]};
+		end else begin
+			quo10_d[31] = 1'b0;
+           numer_temp_30_d = numer_temp_31;
+		end
+		quo10_d[30:0] = 31'b0;
+	end
+	
+	always @ (posedge clock) begin
+		quo10_q <= quo10_d;
+		numer_temp_30_q <= numer_temp_30_d;
+		denom11 <= denom10;
+	end
+		
+	always @ (numer_temp_30_q or denom11 or quo10_q) begin 
+		quo11_d[63:31] = quo10_q[63:31];
+	
+		//quo11[30]
+		if (numer_temp_30_q[94:30] >= denom11 ) begin
+			quo11_d[30] = 1'b1;
+			numer_temp_29 = {numer_temp_30_q[94:30] - denom11, numer_temp_30_q[29:0]};
+		end else begin
+			quo11_d[30] = 1'b0;
+           numer_temp_29 = numer_temp_30_q;
+		end
+		//quo11_d[29]
+		if (numer_temp_29[94:29] >= denom11 ) begin
+			quo11_d[29] = 1'b1;
+			numer_temp_28 = {numer_temp_29[94:29] - denom11, numer_temp_29[28:0]};
+		end else begin
+			quo11_d[29] = 1'b0;
+           numer_temp_28 = numer_temp_29;
+		end
+		//quo11_d[28]
+		if (numer_temp_28[94:28] >= denom11 ) begin
+			quo11_d[28] = 1'b1;
+			numer_temp_27_d = {numer_temp_28[94:28] - denom11, numer_temp_28[27:0]};
+		end else begin
+			quo11_d[28] = 1'b0;
+           numer_temp_27_d = numer_temp_28;
+		end
+		quo11_d[27:0] = 28'b0;
+	end
+		
+	always @ (posedge clock) begin
+		quo11_q <= quo11_d;
+		numer_temp_27_q <= numer_temp_27_d;
+		denom12 <= denom11;
+	end
+	
+	always @ (numer_temp_27_q or denom12 or quo11_q) begin
+		quo12_d[63:28] = quo11_q[63:28];
+	
+		//quo12[27]
+		if (numer_temp_27_q[94:27] >= denom12 ) begin
+			quo12_d[27] = 1'b1;
+			numer_temp_26 = {numer_temp_27_q[94:27] - denom12, numer_temp_27_q[26:0]};
+		end else begin
+			quo12_d[27] = 1'b0;
+           numer_temp_26 = numer_temp_27_q;
+		end
+		//quo12_d[26]
+		if (numer_temp_26[94:26] >= denom12 ) begin
+			quo12_d[26] = 1'b1;
+			numer_temp_25 = {numer_temp_26[94:26] - denom12, numer_temp_26[25:0]};
+		end else begin
+			quo12_d[26] = 1'b0;
+           numer_temp_25 = numer_temp_26;
+		end
+		//quo12_d[25]
+		if (numer_temp_25[94:25] >= denom12 ) begin
+			quo12_d[25] = 1'b1;
+			numer_temp_24 = {numer_temp_25[94:25] - denom12, numer_temp_25[24:0]};
+		end else begin
+			quo12_d[25] = 1'b0;
+           numer_temp_24 = numer_temp_25;
+		end
+		//quo12_d[24]
+		if (numer_temp_24[94:24] >= denom12 ) begin
+			quo12_d[24] = 1'b1;
+			numer_temp_23_d = {numer_temp_24[94:24] - denom12, numer_temp_24[23:0]};
+		end else begin
+			quo12_d[24] = 1'b0;
+           numer_temp_23_d = numer_temp_24;
+		end
+		quo12_d[23:0] = 24'b0;
+	end
+		
+	always @ (posedge clock) begin
+		quo12_q <= quo12_d;
+		numer_temp_23_q <= numer_temp_23_d;
+		denom13 <= denom12;
+	end
+	
+	always @ (numer_temp_23_q or denom13 or quo12_q) begin
+		quo13_d[63:24] = quo12_q[63:24];
+	
+		//quo13_d[23]
+		if (numer_temp_23_q[94:23] >= denom13 ) begin
+			quo13_d[23] = 1'b1;
+			numer_temp_22 = {numer_temp_23_q[94:23] - denom13, numer_temp_23_q[22:0]};
+		end else begin
+			quo13_d[23] = 1'b0;
+           numer_temp_22 = numer_temp_23_q;
+		end
+		//quo13_d[22]
+		if (numer_temp_22[94:22] >= denom13 ) begin
+			quo13_d[22] = 1'b1;
+			numer_temp_21 = {numer_temp_22[94:22] - denom13, numer_temp_22[21:0]};
+		end else begin
+			quo13_d[22] = 1'b0;
+           numer_temp_21 = numer_temp_22;
+		end
+		//quo13_d[21]
+		if (numer_temp_21[94:21] >= denom13 ) begin
+			quo13_d[21] = 1'b1;
+			numer_temp_20 = {numer_temp_21[94:21] - denom13, numer_temp_21[20:0]};
+		end else begin
+			quo13_d[21] = 1'b0;
+           numer_temp_20 = numer_temp_21;
+		end
+		//quo13_d[20]
+		if (numer_temp_20[94:20] >= denom13 ) begin
+			quo13_d[20] = 1'b1;
+			numer_temp_19_d = {numer_temp_20[94:20] - denom13, numer_temp_20[19:0]};
+		end else begin
+			quo13_d[20] = 1'b0;
+           numer_temp_19_d = numer_temp_20;
+		end
+		quo13_d[19:0] = 20'b0;
+	end
+	
+	always @ (posedge clock) begin
+		quo13_q <= quo13_d;
+		numer_temp_19_q <= numer_temp_19_d;
+		denom14 <= denom13;
+	end
+		
+	always @ (numer_temp_19_q or denom14 or quo13_q) begin
+		quo14_d[63:20] = quo13_q[63:20];
+	
+		//quo14_d[19]
+		if (numer_temp_19_q[94:19] >= denom14 ) begin
+			quo14_d[19] = 1'b1;
+			numer_temp_18 = {numer_temp_19_q[94:19] - denom14, numer_temp_19_q[18:0]};
+		end else begin
+			quo14_d[19] = 1'b0;
+           numer_temp_18 = numer_temp_19_q;
+		end
+		//quo14_d[18]
+		if (numer_temp_18[94:18] >= denom14 ) begin
+			quo14_d[18] = 1'b1;
+			numer_temp_17 = {numer_temp_18[94:18] - denom14, numer_temp_18[17:0]};
+		end else begin
+			quo14_d[18] = 1'b0;
+           numer_temp_17 = numer_temp_18;
+		end
+		//quo14_d[17]
+		if (numer_temp_17[94:17] >= denom14 ) begin
+			quo14_d[17] = 1'b1;
+			numer_temp_16 = {numer_temp_17[94:17] - denom14, numer_temp_17[16:0]};
+		end else begin
+			quo14_d[17] = 1'b0;
+           numer_temp_16 = numer_temp_17;
+		end
+		//quo14_d[16]
+		if (numer_temp_16[94:16] >= denom14 ) begin
+			quo14_d[16] = 1'b1;
+			numer_temp_15_d = {numer_temp_16[94:16] - denom14, numer_temp_16[15:0]};
+		end else begin
+			quo14_d[16] = 1'b0;
+           numer_temp_15_d = numer_temp_16;
+		end
+		quo14_d[15:0] = 16'b0;
+	end
+		
+	always @ (posedge clock) begin
+		quo14_q <= quo14_d;
+		numer_temp_15_q <= numer_temp_15_d;
+		denom15 <= denom14;
+	end
+		
+	always @ (numer_temp_15_q or denom15 or quo14_q) begin
+		quo15_d[63:16] = quo14_q[63:16];
+	
+		//quo15_d[15]
+		if (numer_temp_15_q[94:15] >= denom15 ) begin
+			quo15_d[15] = 1'b1;
+			numer_temp_14 = {numer_temp_15_q[94:15] - denom15, numer_temp_15_q[14:0]};
+		end else begin
+			quo15_d[15] = 1'b0;
+           numer_temp_14 = numer_temp_15_q;
+		end
+		//quo15_d[14]
+		if (numer_temp_14[94:14] >= denom15 ) begin
+			quo15_d[14] = 1'b1;
+			numer_temp_13 = {numer_temp_14[94:14] - denom15, numer_temp_14[13:0]};
+		end else begin
+			quo15_d[14] = 1'b0;
+           numer_temp_13 = numer_temp_14;
+		end
+		//quo15_d[13]
+		if (numer_temp_13[94:13] >= denom15 ) begin
+			quo15_d[13] = 1'b1;
+			numer_temp_12 = {numer_temp_13[94:13] - denom15, numer_temp_13[12:0]};
+		end else begin
+			quo15_d[13] = 1'b0;
+           numer_temp_12 = numer_temp_13;
+		end
+		//quo15_d[12]
+		if (numer_temp_12[94:12] >= denom15 ) begin
+			quo15_d[12] = 1'b1;
+			numer_temp_11_d = {numer_temp_12[94:12] - denom15, numer_temp_12[11:0]};
+		end else begin
+			quo15_d[12] = 1'b0;
+           numer_temp_11_d = numer_temp_12;
+		end
+		quo15_d[11:0] = 12'b0;
+	end
+		
+	always @ (posedge clock) begin
+		quo15_q <= quo15_d;
+		numer_temp_11_q <= numer_temp_11_d;
+		denom16 <= denom15;
+	end
+		
+	always @ (numer_temp_11_q or denom16 or quo15_q) begin
+		quo16_d[63:12] = quo15_q[63:12];
+	
+		//quo16_d[11]
+		if (numer_temp_11_q[94:11] >= denom16 ) begin
+			quo16_d[11] = 1'b1;
+			numer_temp_10 = {numer_temp_11_q[94:11] - denom16, numer_temp_11_q[10:0]};
+		end else begin
+			quo16_d[11] = 1'b0;
+           numer_temp_10 = numer_temp_11_q;
+		end
+		//quo16_d[10]
+		if (numer_temp_10[94:10] >= denom16 ) begin
+			quo16_d[10] = 1'b1;
+			numer_temp_9 = {numer_temp_10[94:10] - denom16, numer_temp_10[9:0]};
+		end else begin
+			quo16_d[10] = 1'b0;
+           numer_temp_9 = numer_temp_10;
+		end
+		//quo16_d[9]
+		if (numer_temp_9[94:9] >= denom16 ) begin
+			quo16_d[9] = 1'b1;
+			numer_temp_8 = {numer_temp_9[94:9] - denom16, numer_temp_9[8:0]};
+		end else begin
+			quo16_d[9] = 1'b0;
+           numer_temp_8 = numer_temp_9;
+		end
+		//quo16_d[8]
+		if (numer_temp_8[94:8] >= denom16 ) begin
+			quo16_d[8] = 1'b1;
+			numer_temp_7_d = {numer_temp_8[94:8] - denom16, numer_temp_8[7:0]};
+		end else begin
+			quo16_d[8] = 1'b0;
+           numer_temp_7_d = numer_temp_8;
+		end
+		quo16_d[7:0] = 8'b0;
+	end
+	
+	always @ (posedge clock) begin
+		quo16_q <= quo16_d;
+		numer_temp_7_q <= numer_temp_7_d;
+		denom17 <= denom16;
+	end
+		
+	always @ (numer_temp_7_q or denom17 or quo16_q) begin
+		quo17_d[63:8] = quo16_q[63:8];
+	
+		//quo17_d[7]
+		if (numer_temp_7_q[94:7] >= denom17 ) begin
+			quo17_d[7] = 1'b1;
+			numer_temp_6 = {numer_temp_7_q[94:7] - denom17, numer_temp_7_q[6:0]};
+		end else begin
+			quo17_d[7] = 1'b0;
+           numer_temp_6 = numer_temp_7_q;
+		end
+		//quo17_d[6]
+		if (numer_temp_6[94:6] >= denom17 ) begin
+			quo17_d[6] = 1'b1;
+			numer_temp_5 = {numer_temp_6[94:6] - denom17, numer_temp_6[5:0]};
+		end else begin
+			quo17_d[6] = 1'b0;
+           numer_temp_5 = numer_temp_6;
+		end
+		//quo17_d[5]
+		if (numer_temp_5[94:5] >= denom17 ) begin
+			quo17_d[5] = 1'b1;
+			numer_temp_4 = {numer_temp_5[94:5] - denom17, numer_temp_5[4:0]};
+		end else begin
+			quo17_d[5] = 1'b0;
+           numer_temp_4 = numer_temp_5;
+		end
+		//quo17_d[4]
+		if (numer_temp_4[94:4] >= denom17 ) begin
+			quo17_d[4] = 1'b1;
+			numer_temp_3_d = {numer_temp_4[94:4] - denom17, numer_temp_4[3:0]};
+		end else begin
+			quo17_d[4] = 1'b0;
+           numer_temp_3_d = numer_temp_4;
+		end
+		quo17_d[3:0] = 4'b0;
+	end
+	
+	always @ (posedge clock) begin
+		quo17_q <= quo17_d;
+		numer_temp_3_q <= numer_temp_3_d;
+		denom18 <= denom17;
+	end
+		
+	always @ (numer_temp_3_q or denom18 or quo17_q) begin
+		quo18_d[63:4] = quo17_q[63:4];
+		
+		//quo18_d[3]
+		if (numer_temp_3_q[94:3] >= denom18 ) begin
+			quo18_d[3] = 1'b1;
+			numer_temp_2 = {numer_temp_3_q[94:3] - denom18, numer_temp_3_q[2:0]};
+		end else begin
+			quo18_d[3] = 1'b0;
+           numer_temp_2 = numer_temp_3_q;
+		end
+		//quo18_d[2]
+		if (numer_temp_2[94:2] >= denom18 ) begin
+			quo18_d[2] = 1'b1;
+			numer_temp_1_d = {numer_temp_2[94:2] - denom18, numer_temp_2[1:0]};
+		end else begin
+			quo18_d[2] = 1'b0;
+           numer_temp_1_d = numer_temp_2;
+		end
+		quo18_d[1:0] = 2'b0;
+	end
+		
+	always @ (posedge clock) begin 
+		quo18_q <= quo18_d;
+		numer_temp_1_q <= numer_temp_1_d;
+		denom19 <= denom18;
+	end
+		
+	always @ (numer_temp_1_q or denom19 or quo18_q) begin
+		quo19_d[63:2] = quo18_q[63:2];
+		//quo19_d[1]
+		if (numer_temp_1_q[94:1] >= denom19 ) begin
+			quo19_d[1] = 1'b1;
+			numer_temp_0 = {numer_temp_1_q[94:1] - denom19, numer_temp_1_q[0:0]};
+		end else begin
+			quo19_d[1] = 1'b0;
+           numer_temp_0 = numer_temp_1_q;
+	
+		end
+		//quo19_d[0]
+		if (numer_temp_0[94:0] >= denom19 ) begin
+			quo19_d[0] = 1'b1;
+			numer_temp = numer_temp_0[94:0] - denom19;
+		end else begin
+			quo19_d[0] = 1'b0;
+           numer_temp = numer_temp_0;
+		end	
+	end
+	
+	assign quotient = quo19_d;
+	assign remain = numer_temp[31:0];
+
+	
+	
+endmodule 
+
+/*module sqrt_64b (clk, num, res);
+	input clk;
+	input [63:0]num;
+	output [31:0]res;
+	reg [31:0]res;*/
+	
+//`timescale 1 ns / 1 ps
+
+module Sqrt_64b (clk, num_, res);
+	input clk;
+	input [63:0]num_;
+	output [31:0]res;
+	reg [31:0]res;
+	
+	reg [63:0]num;
+	
+	always @ (posedge clk)
+	begin
+		num <= num_;
+	end
+	
+///////////////////////////////////////////////////Unchanged starts here
+	
+//	reg [63:0] one_[32:0];
+//	reg [63:0] res_[32:0];
+//	reg [63:0] op_[32:0];
+
+	wire [63:0]one__0;
+    reg  [63:0]one__1;
+    reg  [63:0]one__2;
+    reg  [63:0]one__3_d, one__3_q;
+    reg  [63:0]one__4;
+    reg  [63:0]one__5;
+    reg  [63:0]one__6;
+    reg  [63:0]one__7_d, one__7_q;
+    reg  [63:0]one__8;
+    reg  [63:0]one__9;
+    reg  [63:0]one__10;
+    reg  [63:0]one__11_d, one__11_q;
+    reg  [63:0]one__12;
+    reg  [63:0]one__13;
+    reg  [63:0]one__14;
+    reg  [63:0]one__15_d, one__15_q;
+    reg  [63:0]one__16;
+    reg  [63:0]one__17;
+    reg  [63:0]one__18_d, one__18_q;
+    reg  [63:0]one__19;
+    reg  [63:0]one__20;
+    reg  [63:0]one__21_d, one__21_q;
+    reg  [63:0]one__22;
+    reg  [63:0]one__23;
+    reg  [63:0]one__24_d, one__24_q;
+    reg  [63:0]one__25;
+    reg  [63:0]one__26;
+    reg  [63:0]one__27_d, one__27_q;
+    reg  [63:0]one__28;
+    reg  [63:0]one__29;
+    reg  [63:0]one__30_d, one__30_q;
+    reg  [63:0]one__31;
+	reg  [63:0]one__32;
+
+	wire [63:0]res__0;
+    reg  [63:0]res__1;
+    reg  [63:0]res__2;
+    reg  [63:0]res__3_d, res__3_q;
+    reg  [63:0]res__4;
+    reg  [63:0]res__5;
+    reg  [63:0]res__6;
+    reg  [63:0]res__7_d, res__7_q;
+    reg  [63:0]res__8;
+    reg  [63:0]res__9;
+    reg  [63:0]res__10;
+    reg  [63:0]res__11_d, res__11_q;
+    reg  [63:0]res__12;
+    reg  [63:0]res__13;
+    reg  [63:0]res__14;
+    reg  [63:0]res__15_d, res__15_q;
+    reg  [63:0]res__16;
+    reg  [63:0]res__17;
+    reg  [63:0]res__18_d, res__18_q;
+    reg  [63:0]res__19;
+    reg  [63:0]res__20;
+    reg  [63:0]res__21_d, res__21_q;
+    reg  [63:0]res__22;
+    reg  [63:0]res__23;
+    reg  [63:0]res__24_d, res__24_q;
+    reg  [63:0]res__25;
+    reg  [63:0]res__26;
+    reg  [63:0]res__27_d, res__27_q;
+    reg  [63:0]res__28;
+    reg  [63:0]res__29;
+    reg  [63:0]res__30_d, res__30_q;
+    reg  [63:0]res__31;
+	reg  [63:0]res__32;
+    
+	wire [63:0]op__0;
+	reg  [63:0]op__1;
+    reg  [63:0]op__2;
+    reg  [63:0]op__3_d, op__3_q;
+    reg  [63:0]op__4;
+    reg  [63:0]op__5;
+    reg  [63:0]op__6;
+    reg  [63:0]op__7_d, op__7_q;
+    reg  [63:0]op__8;
+    reg  [63:0]op__9;
+    reg  [63:0]op__10;
+    reg  [63:0]op__11_d, op__11_q;
+    reg  [63:0]op__12;
+    reg  [63:0]op__13;
+    reg  [63:0]op__14;
+    reg  [63:0]op__15_d, op__15_q;
+    reg  [63:0]op__16;
+    reg  [63:0]op__17;
+    reg  [63:0]op__18_d, op__18_q;
+    reg  [63:0]op__19;
+    reg  [63:0]op__20;
+    reg  [63:0]op__21_d, op__21_q;
+    reg  [63:0]op__22;
+    reg  [63:0]op__23;
+    reg  [63:0]op__24_d, op__24_q;
+    reg  [63:0]op__25;
+    reg  [63:0]op__26;
+    reg  [63:0]op__27_d, op__27_q;
+    reg  [63:0]op__28;
+    reg  [63:0]op__29;
+    reg  [63:0]op__30_d, op__30_q;
+    reg  [63:0]op__31;
+	reg  [63:0]op__32;
+
+	
+	reg [63:0]one; //This is the one that is selected in first expanded loop
+	reg [31:0]one_tmp;
+	
+	always @ (num) begin
+		
+		//The first for-loop:
+		//all of these will be zero no matter how 'one' is selected.
+		one[1] = 0;
+		one[3] = 0;
+		one[5] = 0;
+		one[7] = 0;
+		one[9] = 0;
+		one[11] = 0;
+		one[13] = 0;
+		one[15] = 0;
+		one[17] = 0;
+		one[19] = 0;
+		one[21] = 0;
+		one[23] = 0;
+		one[25] = 0;
+		one[27] = 0;
+		one[29] = 0;
+		one[31] = 0;
+		one[33] = 0;
+		one[35] = 0;
+		one[37] = 0;
+		one[39] = 0;
+		one[41] = 0;
+		one[43] = 0;
+		one[45] = 0;
+		one[47] = 0;
+		one[49] = 0;
+		one[51] = 0;
+		one[53] = 0;
+		one[55] = 0;
+		one[57] = 0;
+		one[59] = 0;
+		one[61] = 0;
+		one[63] = 0;
+		
+		one_tmp[0] = num[0]|num[1];
+		one_tmp[1] = num[2]|num[3];
+		one_tmp[2] = num[4]|num[5];
+		one_tmp[3] = num[6]|num[7];
+		one_tmp[4] = num[8]|num[9];
+		one_tmp[5] = num[10]|num[11];
+		one_tmp[6] = num[12]|num[13];
+		one_tmp[7] = num[14]|num[15];
+		one_tmp[8] = num[16]|num[17];
+		one_tmp[9] = num[18]|num[19];
+		one_tmp[10] = num[20]|num[21];
+		one_tmp[11] = num[22]|num[23];
+		one_tmp[12] = num[24]|num[25];
+		one_tmp[13] = num[26]|num[27];
+		one_tmp[14] = num[28]|num[29];
+		one_tmp[15] = num[30]|num[31];
+		one_tmp[16] = num[32]|num[33];
+		one_tmp[17] = num[34]|num[35];
+		one_tmp[18] = num[36]|num[37];
+		one_tmp[19] = num[38]|num[39];
+		one_tmp[20] = num[40]|num[41];
+		one_tmp[21] = num[42]|num[43];
+		one_tmp[22] = num[44]|num[45];
+		one_tmp[23] = num[46]|num[47];
+		one_tmp[24] = num[48]|num[49];
+		one_tmp[25] = num[50]|num[51];
+		one_tmp[26] = num[52]|num[53];
+		one_tmp[27] = num[54]|num[55];
+		one_tmp[28] = num[56]|num[57];
+		one_tmp[29] = num[58]|num[59];
+		one_tmp[30] = num[60]|num[61];
+		one_tmp[31] = num[62]|num[63];
+		
+		one[0] = ~one_tmp[31]&~one_tmp[30]&~one_tmp[29]&~one_tmp[28]&~one_tmp[27]&~one_tmp[26]&~one_tmp[25]&~one_tmp[24]&~one_tmp[23]&~one_tmp[22]&~one_tmp[21]&~one_tmp[20]&~one_tmp[19]&~one_tmp[18]&~one_tmp[17]&~one_tmp[16]&~one_tmp[15]&~one_tmp[14]&~one_tmp[13]&~one_tmp[12]&~one_tmp[11]&~one_tmp[10]&~one_tmp[9]&~one_tmp[8]&~one_tmp[7]&~one_tmp[6]&~one_tmp[5]&~one_tmp[4]&~one_tmp[3]&~one_tmp[2]&~one_tmp[1]&one_tmp[0];
+		one[2] = ~one_tmp[31]&~one_tmp[30]&~one_tmp[29]&~one_tmp[28]&~one_tmp[27]&~one_tmp[26]&~one_tmp[25]&~one_tmp[24]&~one_tmp[23]&~one_tmp[22]&~one_tmp[21]&~one_tmp[20]&~one_tmp[19]&~one_tmp[18]&~one_tmp[17]&~one_tmp[16]&~one_tmp[15]&~one_tmp[14]&~one_tmp[13]&~one_tmp[12]&~one_tmp[11]&~one_tmp[10]&~one_tmp[9]&~one_tmp[8]&~one_tmp[7]&~one_tmp[6]&~one_tmp[5]&~one_tmp[4]&~one_tmp[3]&~one_tmp[2]&one_tmp[1];
+		one[4] = ~one_tmp[31]&~one_tmp[30]&~one_tmp[29]&~one_tmp[28]&~one_tmp[27]&~one_tmp[26]&~one_tmp[25]&~one_tmp[24]&~one_tmp[23]&~one_tmp[22]&~one_tmp[21]&~one_tmp[20]&~one_tmp[19]&~one_tmp[18]&~one_tmp[17]&~one_tmp[16]&~one_tmp[15]&~one_tmp[14]&~one_tmp[13]&~one_tmp[12]&~one_tmp[11]&~one_tmp[10]&~one_tmp[9]&~one_tmp[8]&~one_tmp[7]&~one_tmp[6]&~one_tmp[5]&~one_tmp[4]&~one_tmp[3]&one_tmp[2];
+		one[6] = ~one_tmp[31]&~one_tmp[30]&~one_tmp[29]&~one_tmp[28]&~one_tmp[27]&~one_tmp[26]&~one_tmp[25]&~one_tmp[24]&~one_tmp[23]&~one_tmp[22]&~one_tmp[21]&~one_tmp[20]&~one_tmp[19]&~one_tmp[18]&~one_tmp[17]&~one_tmp[16]&~one_tmp[15]&~one_tmp[14]&~one_tmp[13]&~one_tmp[12]&~one_tmp[11]&~one_tmp[10]&~one_tmp[9]&~one_tmp[8]&~one_tmp[7]&~one_tmp[6]&~one_tmp[5]&~one_tmp[4]&one_tmp[3];
+		one[8] = ~one_tmp[31]&~one_tmp[30]&~one_tmp[29]&~one_tmp[28]&~one_tmp[27]&~one_tmp[26]&~one_tmp[25]&~one_tmp[24]&~one_tmp[23]&~one_tmp[22]&~one_tmp[21]&~one_tmp[20]&~one_tmp[19]&~one_tmp[18]&~one_tmp[17]&~one_tmp[16]&~one_tmp[15]&~one_tmp[14]&~one_tmp[13]&~one_tmp[12]&~one_tmp[11]&~one_tmp[10]&~one_tmp[9]&~one_tmp[8]&~one_tmp[7]&~one_tmp[6]&~one_tmp[5]&one_tmp[4];
+		one[10] = ~one_tmp[31]&~one_tmp[30]&~one_tmp[29]&~one_tmp[28]&~one_tmp[27]&~one_tmp[26]&~one_tmp[25]&~one_tmp[24]&~one_tmp[23]&~one_tmp[22]&~one_tmp[21]&~one_tmp[20]&~one_tmp[19]&~one_tmp[18]&~one_tmp[17]&~one_tmp[16]&~one_tmp[15]&~one_tmp[14]&~one_tmp[13]&~one_tmp[12]&~one_tmp[11]&~one_tmp[10]&~one_tmp[9]&~one_tmp[8]&~one_tmp[7]&~one_tmp[6]&one_tmp[5];
+		one[12] = ~one_tmp[31]&~one_tmp[30]&~one_tmp[29]&~one_tmp[28]&~one_tmp[27]&~one_tmp[26]&~one_tmp[25]&~one_tmp[24]&~one_tmp[23]&~one_tmp[22]&~one_tmp[21]&~one_tmp[20]&~one_tmp[19]&~one_tmp[18]&~one_tmp[17]&~one_tmp[16]&~one_tmp[15]&~one_tmp[14]&~one_tmp[13]&~one_tmp[12]&~one_tmp[11]&~one_tmp[10]&~one_tmp[9]&~one_tmp[8]&~one_tmp[7]&one_tmp[6];
+		one[14] = ~one_tmp[31]&~one_tmp[30]&~one_tmp[29]&~one_tmp[28]&~one_tmp[27]&~one_tmp[26]&~one_tmp[25]&~one_tmp[24]&~one_tmp[23]&~one_tmp[22]&~one_tmp[21]&~one_tmp[20]&~one_tmp[19]&~one_tmp[18]&~one_tmp[17]&~one_tmp[16]&~one_tmp[15]&~one_tmp[14]&~one_tmp[13]&~one_tmp[12]&~one_tmp[11]&~one_tmp[10]&~one_tmp[9]&~one_tmp[8]&one_tmp[7];
+		one[16] = ~one_tmp[31]&~one_tmp[30]&~one_tmp[29]&~one_tmp[28]&~one_tmp[27]&~one_tmp[26]&~one_tmp[25]&~one_tmp[24]&~one_tmp[23]&~one_tmp[22]&~one_tmp[21]&~one_tmp[20]&~one_tmp[19]&~one_tmp[18]&~one_tmp[17]&~one_tmp[16]&~one_tmp[15]&~one_tmp[14]&~one_tmp[13]&~one_tmp[12]&~one_tmp[11]&~one_tmp[10]&~one_tmp[9]&one_tmp[8];
+		one[18] = ~one_tmp[31]&~one_tmp[30]&~one_tmp[29]&~one_tmp[28]&~one_tmp[27]&~one_tmp[26]&~one_tmp[25]&~one_tmp[24]&~one_tmp[23]&~one_tmp[22]&~one_tmp[21]&~one_tmp[20]&~one_tmp[19]&~one_tmp[18]&~one_tmp[17]&~one_tmp[16]&~one_tmp[15]&~one_tmp[14]&~one_tmp[13]&~one_tmp[12]&~one_tmp[11]&~one_tmp[10]&one_tmp[9];
+		one[20] = ~one_tmp[31]&~one_tmp[30]&~one_tmp[29]&~one_tmp[28]&~one_tmp[27]&~one_tmp[26]&~one_tmp[25]&~one_tmp[24]&~one_tmp[23]&~one_tmp[22]&~one_tmp[21]&~one_tmp[20]&~one_tmp[19]&~one_tmp[18]&~one_tmp[17]&~one_tmp[16]&~one_tmp[15]&~one_tmp[14]&~one_tmp[13]&~one_tmp[12]&~one_tmp[11]&one_tmp[10];
+		one[22] = ~one_tmp[31]&~one_tmp[30]&~one_tmp[29]&~one_tmp[28]&~one_tmp[27]&~one_tmp[26]&~one_tmp[25]&~one_tmp[24]&~one_tmp[23]&~one_tmp[22]&~one_tmp[21]&~one_tmp[20]&~one_tmp[19]&~one_tmp[18]&~one_tmp[17]&~one_tmp[16]&~one_tmp[15]&~one_tmp[14]&~one_tmp[13]&~one_tmp[12]&one_tmp[11];
+		one[24] = ~one_tmp[31]&~one_tmp[30]&~one_tmp[29]&~one_tmp[28]&~one_tmp[27]&~one_tmp[26]&~one_tmp[25]&~one_tmp[24]&~one_tmp[23]&~one_tmp[22]&~one_tmp[21]&~one_tmp[20]&~one_tmp[19]&~one_tmp[18]&~one_tmp[17]&~one_tmp[16]&~one_tmp[15]&~one_tmp[14]&~one_tmp[13]&one_tmp[12];
+		one[26] = ~one_tmp[31]&~one_tmp[30]&~one_tmp[29]&~one_tmp[28]&~one_tmp[27]&~one_tmp[26]&~one_tmp[25]&~one_tmp[24]&~one_tmp[23]&~one_tmp[22]&~one_tmp[21]&~one_tmp[20]&~one_tmp[19]&~one_tmp[18]&~one_tmp[17]&~one_tmp[16]&~one_tmp[15]&~one_tmp[14]&one_tmp[13];
+		one[28] = ~one_tmp[31]&~one_tmp[30]&~one_tmp[29]&~one_tmp[28]&~one_tmp[27]&~one_tmp[26]&~one_tmp[25]&~one_tmp[24]&~one_tmp[23]&~one_tmp[22]&~one_tmp[21]&~one_tmp[20]&~one_tmp[19]&~one_tmp[18]&~one_tmp[17]&~one_tmp[16]&~one_tmp[15]&one_tmp[14];
+		one[30] = ~one_tmp[31]&~one_tmp[30]&~one_tmp[29]&~one_tmp[28]&~one_tmp[27]&~one_tmp[26]&~one_tmp[25]&~one_tmp[24]&~one_tmp[23]&~one_tmp[22]&~one_tmp[21]&~one_tmp[20]&~one_tmp[19]&~one_tmp[18]&~one_tmp[17]&~one_tmp[16]&one_tmp[15];
+		one[32] = ~one_tmp[31]&~one_tmp[30]&~one_tmp[29]&~one_tmp[28]&~one_tmp[27]&~one_tmp[26]&~one_tmp[25]&~one_tmp[24]&~one_tmp[23]&~one_tmp[22]&~one_tmp[21]&~one_tmp[20]&~one_tmp[19]&~one_tmp[18]&~one_tmp[17]&one_tmp[16];
+		one[34] = ~one_tmp[31]&~one_tmp[30]&~one_tmp[29]&~one_tmp[28]&~one_tmp[27]&~one_tmp[26]&~one_tmp[25]&~one_tmp[24]&~one_tmp[23]&~one_tmp[22]&~one_tmp[21]&~one_tmp[20]&~one_tmp[19]&~one_tmp[18]&one_tmp[17];
+		one[36] = ~one_tmp[31]&~one_tmp[30]&~one_tmp[29]&~one_tmp[28]&~one_tmp[27]&~one_tmp[26]&~one_tmp[25]&~one_tmp[24]&~one_tmp[23]&~one_tmp[22]&~one_tmp[21]&~one_tmp[20]&~one_tmp[19]&one_tmp[18];
+		one[38] = ~one_tmp[31]&~one_tmp[30]&~one_tmp[29]&~one_tmp[28]&~one_tmp[27]&~one_tmp[26]&~one_tmp[25]&~one_tmp[24]&~one_tmp[23]&~one_tmp[22]&~one_tmp[21]&~one_tmp[20]&one_tmp[19];
+		one[40] = ~one_tmp[31]&~one_tmp[30]&~one_tmp[29]&~one_tmp[28]&~one_tmp[27]&~one_tmp[26]&~one_tmp[25]&~one_tmp[24]&~one_tmp[23]&~one_tmp[22]&~one_tmp[21]&one_tmp[20];
+		one[42] = ~one_tmp[31]&~one_tmp[30]&~one_tmp[29]&~one_tmp[28]&~one_tmp[27]&~one_tmp[26]&~one_tmp[25]&~one_tmp[24]&~one_tmp[23]&~one_tmp[22]&one_tmp[21];
+		one[44] = ~one_tmp[31]&~one_tmp[30]&~one_tmp[29]&~one_tmp[28]&~one_tmp[27]&~one_tmp[26]&~one_tmp[25]&~one_tmp[24]&~one_tmp[23]&one_tmp[22];
+		one[46] = ~one_tmp[31]&~one_tmp[30]&~one_tmp[29]&~one_tmp[28]&~one_tmp[27]&~one_tmp[26]&~one_tmp[25]&~one_tmp[24]&one_tmp[23];
+		one[48] = ~one_tmp[31]&~one_tmp[30]&~one_tmp[29]&~one_tmp[28]&~one_tmp[27]&~one_tmp[26]&~one_tmp[25]&one_tmp[24];
+		one[50] = ~one_tmp[31]&~one_tmp[30]&~one_tmp[29]&~one_tmp[28]&~one_tmp[27]&~one_tmp[26]&one_tmp[25];
+		one[52] = ~one_tmp[31]&~one_tmp[30]&~one_tmp[29]&~one_tmp[28]&~one_tmp[27]&one_tmp[26];
+		one[54] = ~one_tmp[31]&~one_tmp[30]&~one_tmp[29]&~one_tmp[28]&one_tmp[27];
+		one[56] = ~one_tmp[31]&~one_tmp[30]&~one_tmp[29]&one_tmp[28];
+		one[58] = ~one_tmp[31]&~one_tmp[30]&one_tmp[29];
+		one[60] = ~one_tmp[31]&one_tmp[30];
+		one[62] = one_tmp[31];
+	end
+	
+//	//2nd for-loop:
+//	integer i;
+//	always @ (*) begin
+//		op_[0] = num;
+//		one_[0] = one;
+//		res_[0] = 64'b0;
+//		res = 63'b0;
+//		res_assigned = 1'b0;
+//	
+//		for (i = 0; i <= 31; i=i+1) begin
+//			if ((one_[i] == 0) & ~res_assigned) begin
+//				res = res_[i];
+//				res_assigned = 1'b1;
+//			end
+//			
+//			//Define the next stage:
+//			if (op_[i] >= res_[i] + one_[i]) begin
+//				op_[i+1] = op_[i] - res_[i] - one_[i];
+//				res_[i+1] = (res_[i]>>1) + one_[i];
+//			end else begin
+//				op_[i+1] = op_[i]; //this line had to be added for the verilog version.
+//				res_[i+1] = (res_[i]>>1);
+//			end
+//			one_[i+1] = (one_[i] >> 2);
+//		end
+//	
+//		//Add the part for really big numbers later:
+//		if (~res_assigned) begin
+//			res = res_[32];
+//		end
+//	end
+
+	//If-statement about defining the next stage:
+	assign op__0 = num;
+	assign res__0 = 64'b0;
+	assign one__0 = one;
+	
+	always @ (res__0 or op__0 or one__0) begin
+
+       //i = 0
+       if (op__0 >= res__0 + one__0) begin
+           op__1 = op__0 - res__0 - one__0;
+           res__1 = (res__0>>1) + one__0;
+       end else begin
+           op__1 = op__0;
+           res__1 = (res__0>>1);
+       end
+       one__1 = (one__0 >> 2);
+
+       //i = 1
+       if (op__1 >= res__1 + one__1) begin
+           op__2 = op__1 - res__1 - one__1;
+           res__2 = (res__1>>1) + one__1;
+       end else begin
+           op__2 = op__1;
+           res__2 = (res__1>>1);
+       end
+       one__2 = (one__1 >> 2);
+
+       //i = 2
+       if (op__2 >= res__2 + one__2) begin
+           op__3_d = op__2 - res__2 - one__2;
+           res__3_d = (res__2>>1) + one__2;
+       end else begin
+           op__3_d = op__2;
+           res__3_d = (res__2>>1);
+       end
+       one__3_d = (one__2 >> 2);
+	end
+	
+	always @ (posedge clk) begin
+		op__3_q <= op__3_d;
+		res__3_q <= res__3_d;
+		one__3_q <= one__3_d;
+	end
+	
+	always @ (op__3_q or res__3_q or one__3_q) begin
+       //i = 3
+       if (op__3_q >= res__3_q + one__3_q) begin
+           op__4 = op__3_q - res__3_q - one__3_q;
+           res__4 = (res__3_q>>1) + one__3_q;
+       end else begin
+           op__4 = op__3_q;
+           res__4 = (res__3_q>>1);
+       end
+       one__4 = (one__3_q >> 2);
+
+       //i = 4
+       if (op__4 >= res__4 + one__4) begin
+           op__5 = op__4 - res__4 - one__4;
+           res__5 = (res__4>>1) + one__4;
+       end else begin
+           op__5 = op__4;
+           res__5 = (res__4>>1);
+       end
+       one__5 = (one__4 >> 2);
+
+       //i = 5
+       if (op__5 >= res__5 + one__5) begin
+           op__6 = op__5 - res__5 - one__5;
+           res__6 = (res__5>>1) + one__5;
+       end else begin
+           op__6 = op__5;
+           res__6 = (res__5>>1);
+       end
+       one__6 = (one__5 >> 2);
+
+       //i = 6
+       if (op__6 >= res__6 + one__6) begin
+           op__7_d = op__6 - res__6 - one__6;
+           res__7_d = (res__6>>1) + one__6;
+       end else begin
+           op__7_d = op__6;
+           res__7_d = (res__6>>1);
+       end
+       one__7_d = (one__6 >> 2);
+	end
+		 
+	always @ (posedge clk) begin
+		op__7_q <= op__7_d;
+		one__7_q <= one__7_d;
+		res__7_q <= res__7_d;
+	end
+	
+	always @ (op__7_q or res__7_q or one__7_q) begin
+       //i = 7
+       if (op__7_q >= res__7_q + one__7_q) begin
+           op__8 = op__7_q - res__7_q - one__7_q;
+           res__8 = (res__7_q>>1) + one__7_q;
+       end else begin
+           op__8 = op__7_q;
+           res__8 = (res__7_q>>1);
+       end
+       one__8 = (one__7_q >> 2);
+
+       //i = 8
+       if (op__8 >= res__8 + one__8) begin
+           op__9 = op__8 - res__8 - one__8;
+           res__9 = (res__8>>1) + one__8;
+       end else begin
+           op__9 = op__8;
+           res__9 = (res__8>>1);
+       end
+       one__9 = (one__8 >> 2);
+
+       //i = 9
+       if (op__9 >= res__9 + one__9) begin
+           op__10 = op__9 - res__9 - one__9;
+           res__10 = (res__9>>1) + one__9;
+       end else begin
+           op__10 = op__9;
+           res__10 = (res__9>>1);
+       end
+       one__10 = (one__9 >> 2);
+
+       //i = 10
+       if (op__10 >= res__10 + one__10) begin
+           op__11_d = op__10 - res__10 - one__10;
+           res__11_d = (res__10>>1) + one__10;
+       end else begin
+           op__11_d = op__10;
+           res__11_d = (res__10>>1);
+       end
+       one__11_d = (one__10 >> 2);
+	end
+		 
+	always @ (posedge clk) begin
+		op__11_q <= op__11_d;
+		one__11_q <= one__11_d;
+		res__11_q <= res__11_d;
+	end
+	
+	always @ (op__11_q or res__11_q or one__11_q) begin	 
+       //i = 11
+       if (op__11_q >= res__11_q + one__11_q) begin
+           op__12 = op__11_q - res__11_q - one__11_q;
+           res__12 = (res__11_q>>1) + one__11_q;
+       end else begin
+           op__12 = op__11_q;
+           res__12 = (res__11_q>>1);
+       end
+       one__12 = (one__11_q >> 2);
+
+       //i = 12
+       if (op__12 >= res__12 + one__12) begin
+           op__13 = op__12 - res__12 - one__12;
+           res__13 = (res__12>>1) + one__12;
+       end else begin
+           op__13 = op__12;
+           res__13 = (res__12>>1);
+       end
+       one__13 = (one__12 >> 2);
+
+       //i = 13
+       if (op__13 >= res__13 + one__13) begin
+           op__14 = op__13 - res__13 - one__13;
+           res__14 = (res__13>>1) + one__13;
+       end else begin
+           op__14 = op__13;
+           res__14 = (res__13>>1);
+       end
+       one__14 = (one__13 >> 2);
+
+       //i = 14
+       if (op__14 >= res__14 + one__14) begin
+           op__15_d = op__14 - res__14 - one__14;
+           res__15_d = (res__14>>1) + one__14;
+       end else begin
+           op__15_d = op__14;
+           res__15_d = (res__14>>1);
+       end
+       one__15_d = (one__14 >> 2);
+	end
+	
+	always @ (posedge clk) begin
+		op__15_q <= op__15_d;
+		one__15_q <= one__15_d;
+		res__15_q <= res__15_d;
+	end
+	
+	always @ (op__15_q or res__15_q or one__15_q) begin
+       //i = 15
+       if (op__15_q >= res__15_q + one__15_q) begin
+           op__16 = op__15_q - res__15_q - one__15_q;
+           res__16 = (res__15_q>>1) + one__15_q;
+       end else begin
+           op__16 = op__15_q;
+           res__16 = (res__15_q>>1);
+       end
+       one__16 = (one__15_q >> 2);
+
+       //i = 16
+       if (op__16 >= res__16 + one__16) begin
+           op__17 = op__16 - res__16 - one__16;
+           res__17 = (res__16>>1) + one__16;
+       end else begin
+           op__17 = op__16;
+           res__17 = (res__16>>1);
+       end
+       one__17 = (one__16 >> 2);
+
+       //i = 17
+       if (op__17 >= res__17 + one__17) begin
+           op__18_d = op__17 - res__17 - one__17;
+           res__18_d = (res__17>>1) + one__17;
+       end else begin
+           op__18_d = op__17;
+           res__18_d = (res__17>>1);
+       end
+       one__18_d = (one__17 >> 2);
+	end
+	
+	always @ (posedge clk) begin
+		op__18_q <= op__18_d;
+		one__18_q <= one__18_d;
+		res__18_q <= res__18_d;
+	end
+	
+	always @ (op__18_q or res__18_q or one__18_q) begin
+       //i = 18
+       if (op__18_q >= res__18_q + one__18_q) begin
+           op__19 = op__18_q - res__18_q - one__18_q;
+           res__19 = (res__18_q>>1) + one__18_q;
+       end else begin
+           op__19 = op__18_q;
+           res__19 = (res__18_q>>1);
+       end
+       one__19 = (one__18_q >> 2);
+
+       //i = 19
+       if (op__19 >= res__19 + one__19) begin
+           op__20 = op__19 - res__19 - one__19;
+           res__20 = (res__19>>1) + one__19;
+       end else begin
+           op__20 = op__19;
+           res__20 = (res__19>>1);
+       end
+       one__20 = (one__19 >> 2);
+
+       //i = 20
+       if (op__20 >= res__20 + one__20) begin
+           op__21_d = op__20 - res__20 - one__20;
+           res__21_d = (res__20>>1) + one__20;
+       end else begin
+           op__21_d = op__20;
+           res__21_d = (res__20>>1);
+       end
+       one__21_d = (one__20 >> 2);
+	end
+	
+	always @ (posedge clk) begin
+		op__21_q <= op__21_d;
+		one__21_q <= one__21_d;
+		res__21_q <= res__21_d;
+	end
+		 
+	always @ (op__21_q or res__21_q or one__21_q) begin 
+       //i = 21
+       if (op__21_q >= res__21_q + one__21_q) begin
+           op__22 = op__21_q - res__21_q - one__21_q;
+           res__22 = (res__21_q>>1) + one__21_q;
+       end else begin
+           op__22 = op__21_q;
+           res__22 = (res__21_q>>1);
+       end
+       one__22 = (one__21_q >> 2);
+
+       //i = 22
+       if (op__22 >= res__22 + one__22) begin
+           op__23 = op__22 - res__22 - one__22;
+           res__23 = (res__22>>1) + one__22;
+       end else begin
+           op__23 = op__22;
+           res__23 = (res__22>>1);
+       end
+       one__23 = (one__22 >> 2);
+
+       //i = 23
+       if (op__23 >= res__23 + one__23) begin
+           op__24_d = op__23 - res__23 - one__23;
+           res__24_d = (res__23>>1) + one__23;
+       end else begin
+           op__24_d = op__23;
+           res__24_d = (res__23>>1);
+       end
+       one__24_d = (one__23 >> 2);
+	end
+		 
+	always @ (posedge clk) begin
+		op__24_q <= op__24_d;
+		one__24_q <= one__24_d;
+		res__24_q <= res__24_d;
+	end
+		  
+	always @ (op__24_q or res__24_q or one__24_q) begin
+       //i = 24
+       if (op__24_q >= res__24_q + one__24_q) begin
+           op__25 = op__24_q - res__24_q - one__24_q;
+           res__25 = (res__24_q>>1) + one__24_q;
+       end else begin
+           op__25 = op__24_q;
+           res__25 = (res__24_q>>1);
+       end
+       one__25 = (one__24_q >> 2);
+
+       //i = 25
+       if (op__25 >= res__25 + one__25) begin
+           op__26 = op__25 - res__25 - one__25;
+           res__26 = (res__25>>1) + one__25;
+       end else begin
+           op__26 = op__25;
+           res__26 = (res__25>>1);
+       end
+       one__26 = (one__25 >> 2);
+
+       //i = 26
+       if (op__26 >= res__26 + one__26) begin
+           op__27_d = op__26 - res__26 - one__26;
+           res__27_d = (res__26>>1) + one__26;
+       end else begin
+           op__27_d = op__26;
+           res__27_d = (res__26>>1);
+       end
+       one__27_d = (one__26 >> 2);
+	end
+
+	always @ (posedge clk) begin
+		op__27_q <= op__27_d;
+		one__27_q <= one__27_d;
+		res__27_q <= res__27_d;
+	end
+	
+	always @ (op__27_q or res__27_q or one__27_q) begin
+       //i = 27
+       if (op__27_q >= res__27_q + one__27_q) begin
+           op__28 = op__27_q - res__27_q - one__27_q;
+           res__28 = (res__27_q>>1) + one__27_q;
+       end else begin
+           op__28 = op__27_q;
+           res__28 = (res__27_q>>1);
+       end
+       one__28 = (one__27_q >> 2);
+
+       //i = 28
+       if (op__28 >= res__28 + one__28) begin
+           op__29 = op__28 - res__28 - one__28;
+           res__29 = (res__28>>1) + one__28;
+       end else begin
+           op__29 = op__28;
+           res__29 = (res__28>>1);
+       end
+       one__29 = (one__28 >> 2);
+
+       //i = 29
+       if (op__29 >= res__29 + one__29) begin
+           op__30_d = op__29 - res__29 - one__29;
+           res__30_d = (res__29>>1) + one__29;
+       end else begin
+           op__30_d = op__29;
+           res__30_d = (res__29>>1);
+       end
+       one__30_d = (one__29 >> 2);
+	end
+	
+	always @ (posedge clk) begin
+		op__30_q <= op__30_d;
+		one__30_q <= one__30_d;
+		res__30_q <= res__30_d;
+	end
+	
+	always @ (*) begin
+       //i = 30
+       if (op__30_q >= res__30_q + one__30_q) begin
+           op__31 = op__30_q - res__30_q - one__30_q;
+           res__31 = (res__30_q>>1) + one__30_q;
+       end else begin
+           op__31 = op__30_q;
+           res__31 = (res__30_q>>1);
+       end
+       one__31 = (one__30_q >> 2);
+
+       //i = 31
+       if (op__31 >= res__31 + one__31) begin
+           op__32 = op__31 - res__31 - one__31;
+           res__32 = (res__31>>1) + one__31;
+       end else begin
+           op__32 = op__31;
+           res__32 = (res__31>>1);
+       end
+       one__32 = (one__31 >> 2);
+	end
+
+
+	//If-statement about assigning res:
+	always @ (*) begin
+		if(one__0 == 0) begin
+			res = res__0[31:0];
+         end else if (one__1 == 0) begin
+             res = res__1[31:0];
+         end else if (one__2 == 0) begin
+             res = res__2[31:0];
+         end else if (one__3_q == 0) begin
+             res = res__3_q[31:0];
+         end else if (one__4 == 0) begin
+             res = res__4[31:0];
+         end else if (one__5 == 0) begin
+             res = res__5[31:0];
+         end else if (one__6 == 0) begin
+             res = res__6[31:0];
+         end else if (one__7_q == 0) begin
+             res = res__7_q[31:0];
+         end else if (one__8 == 0) begin
+             res = res__8[31:0];
+         end else if (one__9 == 0) begin
+             res = res__9[31:0];
+         end else if (one__10 == 0) begin
+             res = res__10[31:0];
+         end else if (one__11_q == 0) begin
+             res = res__11_q[31:0];
+         end else if (one__12 == 0) begin
+             res = res__12[31:0];
+         end else if (one__13 == 0) begin
+             res = res__13[31:0];
+         end else if (one__14 == 0) begin
+             res = res__14[31:0];
+         end else if (one__15_q == 0) begin
+             res = res__15_q[31:0];
+         end else if (one__16 == 0) begin
+             res = res__16[31:0];
+         end else if (one__17 == 0) begin
+             res = res__17[31:0];
+         end else if (one__18_q == 0) begin
+             res = res__18_q[31:0];
+         end else if (one__19 == 0) begin
+             res = res__19[31:0];
+         end else if (one__20 == 0) begin
+             res = res__20[31:0];
+         end else if (one__21_q == 0) begin
+             res = res__21_q[31:0];
+         end else if (one__22 == 0) begin
+             res = res__22[31:0];
+         end else if (one__23 == 0) begin
+             res = res__23[31:0];
+         end else if (one__24_q == 0) begin
+             res = res__24_q[31:0];
+         end else if (one__25 == 0) begin
+             res = res__25[31:0];
+         end else if (one__26 == 0) begin
+             res = res__26[31:0];
+         end else if (one__27_q == 0) begin
+             res = res__27_q[31:0];
+         end else if (one__28 == 0) begin
+             res = res__28[31:0];
+         end else if (one__29 == 0) begin
+             res = res__29[31:0];
+         end else if (one__30_q == 0) begin
+             res = res__30_q[31:0];
+         end else if (one__31 == 0) begin
+             res = res__31[31:0];
+		end else begin
+			 res = res__32[31:0];
+		end
+		
+	end
+
+	
+endmodule 	
+
+
diff --git vtr_flow/benchmarks/verilog/mkPktMerge_yosys.v vtr_flow/benchmarks/verilog/mkPktMerge_yosys.v
new file mode 100755
index 0000000..9022ed2
--- /dev/null
+++ vtr_flow/benchmarks/verilog/mkPktMerge_yosys.v
@@ -0,0 +1,1500 @@
+//
+// Generated by Bluespec Compiler, version 2009.11.beta2 (build 18693, 2009-11-24)
+//
+// On Tue Jun  8 18:41:53 EDT 2010
+//
+//
+// Ports:
+// Name                         I/O  size props
+// RDY_iport0_put                 O     1
+// RDY_iport1_put                 O     1
+// oport_get                      O   153
+// RDY_oport_get                  O     1
+// CLK                            I     1 clock
+// RST_N                          I     1 reset
+// iport0_put                     I   153
+// iport1_put                     I   153
+// EN_iport0_put                  I     1
+// EN_iport1_put                  I     1
+// EN_oport_get                   I     1
+//
+// No combinational paths from inputs to outputs
+//
+//
+
+
+(* top *)
+module mkPktMerge(CLK_IBUF,
+		  RST_N,
+
+		  iport0_put,
+		  EN_iport0_put,
+		  RDY_iport0_put,
+
+		  iport1_put,
+		  EN_iport1_put,
+		  RDY_iport1_put,
+
+		  EN_oport_get,
+		  oport_get,
+		  RDY_oport_get);
+
+  input  CLK_IBUF;
+  wire CLK;
+  bufgctrl b(.i({1'bx, CLK_IBUF}), .s(2'bxx), .ce(2'bxx), .ignore(2'bxx), .o(CLK));
+  input  RST_N;
+
+  // action method iport0_put
+  input  [152 : 0] iport0_put;
+  input  EN_iport0_put;
+  output RDY_iport0_put;
+
+  // action method iport1_put
+  input  [152 : 0] iport1_put;
+  input  EN_iport1_put;
+  output RDY_iport1_put;
+
+  // actionvalue method oport_get
+  input  EN_oport_get;
+  output [152 : 0] oport_get;
+  output RDY_oport_get;
+
+  // signals for module outputs
+  wire [152 : 0] oport_get;
+  wire RDY_iport0_put, RDY_iport1_put, RDY_oport_get;
+
+  // register fi0Active
+  reg fi0Active;
+  wire fi0Active__D_IN;
+	wire fi0Active__EN;
+
+  // register fi0HasPrio
+  reg fi0HasPrio;
+  reg fi0HasPrio__D_IN;
+  wire fi0HasPrio__EN;
+
+  // register fi1Active
+  reg fi1Active;
+  wire fi1Active__D_IN, fi1Active__EN;
+
+  // ports of submodule fi0
+  wire [152 : 0] fi0__D_IN, fi0__D_OUT;
+  wire fi0__CLR, fi0__DEQ, fi0__EMPTY_N, fi0__ENQ, fi0__FULL_N;
+
+  // ports of submodule fi1
+  wire [152 : 0] fi1__D_IN, fi1__D_OUT;
+  wire fi1__CLR, fi1__DEQ, fi1__EMPTY_N, fi1__ENQ, fi1__FULL_N;
+
+  // ports of submodule fo
+  reg [152 : 0] fo__D_IN;
+  wire [152 : 0] fo__D_OUT;
+  wire fo__CLR, fo__DEQ, fo__EMPTY_N, fo__ENQ, fo__FULL_N;
+
+  // rule scheduling signals
+  wire CAN_FIRE_RL_arbitrate,
+       CAN_FIRE_RL_fi0_advance,
+       CAN_FIRE_RL_fi1_advance,
+       CAN_FIRE_iport0_put,
+       CAN_FIRE_iport1_put,
+       CAN_FIRE_oport_get,
+       WILL_FIRE_RL_arbitrate,
+       WILL_FIRE_RL_fi0_advance,
+       WILL_FIRE_RL_fi1_advance,
+       WILL_FIRE_iport0_put,
+       WILL_FIRE_iport1_put,
+       WILL_FIRE_oport_get;
+
+  // inputs to muxes for submodule ports
+  wire [152 : 0] MUX_fo__enq_1__VAL_1;
+  wire MUX_fi0Active__write_1__SEL_1,
+       MUX_fi0Active__write_1__VAL_1,
+       MUX_fi1Active__write_1__SEL_1;
+
+  // remaining internal signals
+  reg [63 : 0] v__h679;
+  wire fo_RDY_enq_AND_IF_fi0HasPrio_THEN_fi0_RDY_firs_ETC___d10;
+
+  // action method iport0_put
+  assign RDY_iport0_put = fi0__FULL_N ;
+  assign CAN_FIRE_iport0_put = fi0__FULL_N ;
+  assign WILL_FIRE_iport0_put = EN_iport0_put ;
+
+  // action method iport1_put
+  assign RDY_iport1_put = fi1__FULL_N ;
+  assign CAN_FIRE_iport1_put = fi1__FULL_N ;
+  assign WILL_FIRE_iport1_put = EN_iport1_put ;
+
+  // actionvalue method oport_get
+  assign oport_get = fo__D_OUT ;
+  assign RDY_oport_get = fo__EMPTY_N ;
+  assign CAN_FIRE_oport_get = fo__EMPTY_N ;
+  assign WILL_FIRE_oport_get = EN_oport_get ;
+
+  // submodule fi0
+  arSRLFIFO_a fi0						(.CLK(CLK),
+								    .RST_N(RST_N),
+								    .D_IN(fi0__D_IN),
+								    .ENQ(fi0__ENQ),
+								    .DEQ(fi0__DEQ),
+								    .CLR(fi0__CLR),
+								    .D_OUT(fi0__D_OUT),
+								    .EMPTY_N(fi0__EMPTY_N),
+								    .FULL_N(fi0__FULL_N));
+
+  // submodule fi1
+  arSRLFIFO_b fi1
+									(.CLK(CLK),
+								    .RST_N(RST_N),
+								    .D_IN(fi1__D_IN),
+								    .ENQ(fi1__ENQ),
+								    .DEQ(fi1__DEQ),
+								    .CLR(fi1__CLR),
+								    .D_OUT(fi1__D_OUT),
+								    .EMPTY_N(fi1__EMPTY_N),
+								    .FULL_N(fi1__FULL_N));
+
+  // submodule fo
+  arSRLFIFO_c fo
+									(.CLK(CLK),
+								   .RST_N(RST_N),
+								   .D_IN(fo__D_IN),
+								   .ENQ(fo__ENQ),
+								   .DEQ(fo__DEQ),
+								   .CLR(fo__CLR),
+								   .D_OUT(fo__D_OUT),
+								   .EMPTY_N(fo__EMPTY_N),
+								   .FULL_N(fo__FULL_N));
+
+  // rule RL_arbitrate
+  assign CAN_FIRE_RL_arbitrate =
+	     fo_RDY_enq_AND_IF_fi0HasPrio_THEN_fi0_RDY_firs_ETC___d10 &&
+	     fi0__EMPTY_N &&
+	     fi1__EMPTY_N &&
+	     !fi0Active &&
+	     !fi1Active ;
+  assign WILL_FIRE_RL_arbitrate = CAN_FIRE_RL_arbitrate ;
+
+  // rule RL_fi0_advance
+  assign CAN_FIRE_RL_fi0_advance = fi0__EMPTY_N && fo__FULL_N && !fi1Active ;
+  assign WILL_FIRE_RL_fi0_advance =
+	     CAN_FIRE_RL_fi0_advance && !WILL_FIRE_RL_arbitrate ;
+
+  // rule RL_fi1_advance
+  assign CAN_FIRE_RL_fi1_advance = fi1__EMPTY_N && fo__FULL_N && !fi0Active ;
+  assign WILL_FIRE_RL_fi1_advance =
+	     CAN_FIRE_RL_fi1_advance && !WILL_FIRE_RL_fi0_advance &&
+	     !WILL_FIRE_RL_arbitrate ;
+
+  // inputs to muxes for submodule ports
+  assign MUX_fi0Active__write_1__SEL_1 = WILL_FIRE_RL_arbitrate && fi0HasPrio ;
+  assign MUX_fi1Active__write_1__SEL_1 =
+	     WILL_FIRE_RL_arbitrate && !fi0HasPrio ;
+  assign MUX_fi0Active__write_1__VAL_1 =
+	     fi0HasPrio ? !fi0__D_OUT[151] : !fi1__D_OUT[151] ;
+  assign MUX_fo__enq_1__VAL_1 = fi0HasPrio ? fi0__D_OUT : fi1__D_OUT ;
+
+  // register fi0Active
+  assign fi0Active__D_IN =
+	     MUX_fi0Active__write_1__SEL_1 ?
+	       MUX_fi0Active__write_1__VAL_1 :
+	       !fi0__D_OUT[151] ;
+  assign fi0Active__EN =
+	     WILL_FIRE_RL_arbitrate && fi0HasPrio ||
+	     WILL_FIRE_RL_fi0_advance ;
+
+  // register fi0HasPrio
+  always@(WILL_FIRE_RL_arbitrate or
+	  fi0HasPrio or WILL_FIRE_RL_fi0_advance or WILL_FIRE_RL_fi1_advance)
+  begin
+   // case (1'b1) // synopsys parallel_case
+     // WILL_FIRE_RL_arbitrate: fi0HasPrio__D_IN = !fi0HasPrio;
+    //  WILL_FIRE_RL_fi0_advance: fi0HasPrio__D_IN = 1'd0;
+    //  WILL_FIRE_RL_fi1_advance: fi0HasPrio__D_IN = 1'd1;
+    //case (1'b1) // synopsys parallel_case
+    //  WILL_FIRE_RL_arbitrate: fi0HasPrio__D_IN = !fi0HasPrio;
+	 fi0HasPrio__D_IN = !fi0HasPrio;
+   //   WILL_FIRE_RL_fi0_advance: fi0HasPrio__D_IN = 1'd0;
+    //  WILL_FIRE_RL_fi1_advance: fi0HasPrio__D_IN = 1'd1;
+
+//    endcase
+    //endcase
+  end
+  assign fi0HasPrio__EN =
+	     WILL_FIRE_RL_arbitrate || WILL_FIRE_RL_fi0_advance ||
+	     WILL_FIRE_RL_fi1_advance ;
+
+  // register fi1Active
+  assign fi1Active__D_IN =
+	     MUX_fi1Active__write_1__SEL_1 ?
+	       MUX_fi0Active__write_1__VAL_1 :
+	       !fi1__D_OUT[151] ;
+  assign fi1Active__EN =
+	     WILL_FIRE_RL_arbitrate && !fi0HasPrio ||
+	     WILL_FIRE_RL_fi1_advance ;
+
+  // submodule fi0
+  assign fi0__D_IN = iport0_put ;
+  assign fi0__DEQ =
+	     WILL_FIRE_RL_arbitrate && fi0HasPrio ||
+	     WILL_FIRE_RL_fi0_advance ;
+  assign fi0__ENQ = EN_iport0_put ;
+  assign fi0__CLR = 1'b0 ;
+
+  // submodule fi1
+  assign fi1__D_IN = iport1_put ;
+  assign fi1__DEQ =
+	     WILL_FIRE_RL_arbitrate && !fi0HasPrio ||
+	     WILL_FIRE_RL_fi1_advance ;
+  assign fi1__ENQ = EN_iport1_put ;
+  assign fi1__CLR = 1'b0 ;
+
+  // submodule fo
+  always@(WILL_FIRE_RL_arbitrate or
+	  MUX_fo__enq_1__VAL_1 or
+	  WILL_FIRE_RL_fi0_advance or
+	  fi0__D_OUT or WILL_FIRE_RL_fi1_advance or fi1__D_OUT)
+  begin
+   // case (1'b1) // synopsys parallel_case
+      //WILL_FIRE_RL_arbitrate: fo__D_IN = MUX_fo__enq_1__VAL_1;
+	  fo__D_IN = MUX_fo__enq_1__VAL_1;
+    //  WILL_FIRE_RL_fi0_advance: fo__D_IN = fi0__D_OUT;
+    //  WILL_FIRE_RL_fi1_advance: fo__D_IN = fi1__D_OUT;
+     
+   // endcase
+  end
+  assign fo__DEQ = EN_oport_get ;
+  assign fo__ENQ =
+	     WILL_FIRE_RL_arbitrate || WILL_FIRE_RL_fi0_advance ||
+	     WILL_FIRE_RL_fi1_advance ;
+  assign fo__CLR = 1'b0 ;
+
+  // remaining internal signals
+  assign fo_RDY_enq_AND_IF_fi0HasPrio_THEN_fi0_RDY_firs_ETC___d10 =
+	     fo__FULL_N && (fi0HasPrio ? fi0__EMPTY_N : fi1__EMPTY_N) ;
+
+  // handling of inlined registers
+
+  always@(posedge CLK)
+  begin
+    if (!RST_N)
+      begin
+        fi0Active <= 1'd0;
+	fi0HasPrio <=  1'd1;
+	fi1Active <=  1'd0;
+      end
+    else
+      begin
+        if (fi0Active__EN) fi0Active <= fi0Active__D_IN;
+	if (fi0HasPrio__EN)
+	  fi0HasPrio <=  fi0HasPrio__D_IN;
+	if (fi1Active__EN) fi1Active <=  fi1Active__D_IN;
+      end
+  end
+
+
+  // handling of system tasks
+
+ 
+endmodule  // mkPktMerge
+
+
+
+
+module arSRLFIFO_a (CLK, RST_N, D_IN,ENQ,DEQ,CLR,D_OUT,EMPTY_N,FULL_N);
+
+input CLK;
+input RST_N;
+input [152:0] D_IN;
+input ENQ;
+input DEQ;
+input CLR;
+output [152:0] D_OUT;
+output EMPTY_N;
+output FULL_N;
+
+
+
+wire fulln;
+wire emptyn;
+
+wire always_one;
+wire always_zero;
+
+assign always_one = 1'b1;
+assign always_zero = 1'b0;
+
+generic_fifo_sc_a fifo_1
+(.clk(CLK),
+ .rst(RST_N),
+ .clr (CLR),
+ .din (D_IN),
+ .we (ENQ),
+ .dout (D_OUT),
+ .re (DEQ),
+ .full_r (FULL_N),
+ .empty_r(EMPTY_N),
+ .full_n_r (fulln),
+ .empty_n_r (emptyn)
+ );
+ 
+
+
+
+
+
+
+
+endmodule
+
+
+
+
+
+
+
+
+/////////////////////////////////////////////////////////////////////
+////                                                             ////
+////  Universal FIFO Single Clock                                ////
+////                                                             ////
+////                                                             ////
+////  Author: Rudolf Usselmann                                   ////
+////          rudi@asics.ws                                      ////
+////                                                             ////
+////                                                             ////
+////  D/L from: http://www.opencores.org/cores/generic_fifos/    ////
+////                                                             ////
+/////////////////////////////////////////////////////////////////////
+////                                                             ////
+//// Copyright (C) 2000-2002 Rudolf Usselmann                    ////
+////                         www.asics.ws                        ////
+////                         rudi@asics.ws                       ////
+////                                                             ////
+//// This source file may be used and distributed without        ////
+//// restriction provided that this copyright statement is not   ////
+//// removed from the file and that any derivative work contains ////
+//// the original copyright notice and the associated disclaimer.////
+////                                                             ////
+////     THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY     ////
+//// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED   ////
+//// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS   ////
+//// FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL THE AUTHOR      ////
+//// OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,         ////
+//// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES    ////
+//// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE   ////
+//// GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR        ////
+//// BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  ////
+//// LIABILITY, WHETHER IN  CONTRACT, STRICT LIABILITY, OR TORT  ////
+//// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  ////
+//// OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE         ////
+//// POSSIBILITY OF SUCH DAMAGE.                                 ////
+////                                                             ////
+/////////////////////////////////////////////////////////////////////
+ 
+//  CVS Log
+//
+//  __Id: generic_fifo_sc_a.v,v 1.1.1.1 2002-09-25 05:42:06 rudi Exp __
+//
+//  __Date: 2002-09-25 05:42:06 __
+//  __Revision: 1.1.1.1 __
+//  __Author: rudi __
+//  __Locker:  __
+//  __State: Exp __
+//
+// Change History:
+//               __Log: not supported by cvs2svn __
+//
+//
+//
+//
+//
+//
+//
+//
+//
+//
+ 
+ 
+/*
+ 
+Description
+===========
+ 
+I/Os
+----
+rst	low active, either sync. or async. master reset (see below how to select)
+clr	synchronous clear (just like reset but always synchronous), high active
+re	read enable, synchronous, high active
+we	read enable, synchronous, high active
+din	Data Input
+dout	Data Output
+ 
+full	Indicates the FIFO is full (combinatorial output)
+full_r	same as above, but registered output (see note below)
+empty	Indicates the FIFO is empty
+empty_r	same as above, but registered output (see note below)
+ 
+full_n		Indicates if the FIFO has space for N entries (combinatorial output)
+full_n_r	same as above, but registered output (see note below)
+empty_n		Indicates the FIFO has at least N entries (combinatorial output)
+empty_n_r	same as above, but registered output (see note below)
+ 
+level		indicates the FIFO level:
+		2'b00	0-25%	 full
+		2'b01	25-50%	 full
+		2'b10	50-75%	 full
+		2'b11	%75-100% full
+ 
+combinatorial vs. registered status outputs
+-------------------------------------------
+Both the combinatorial and registered status outputs have exactly the same
+synchronous timing. Meaning they are being asserted immediately at the clock
+edge after the last read or write. The combinatorial outputs however, pass
+through several levels of logic before they are output. The registered status
+outputs are direct outputs of a flip-flop. The reason both are provided, is
+that the registered outputs require quite a bit of additional logic inside
+the FIFO. If you can meet timing of your device with the combinatorial
+outputs, use them ! The FIFO will be smaller. If the status signals are
+in the critical pass, use the registered outputs, they have a much smaller
+output delay (actually only Tcq).
+ 
+Parameters
+----------
+The FIFO takes 3 parameters:
+dw	Data bus width
+aw	Address bus width (Determines the FIFO size by evaluating 2^aw)
+n	N is a second status threshold constant for full_n and empty_n
+	If you have no need for the second status threshold, do not
+	connect the outputs and the logic should be removed by your
+	synthesis tool.
+ 
+Synthesis Results
+-----------------
+In a Spartan 2e a 8 bit wide, 8 entries deep FIFO, takes 85 LUTs and runs
+at about 116 MHz (IO insertion disabled). The registered status outputs
+are valid after 2.1NS, the combinatorial once take out to 6.5 NS to be
+available.
+ 
+ 
+Misc
+----
+This design assumes you will do appropriate status checking externally.
+ 
+IMPORTANT ! writing while the FIFO is full or reading while the FIFO is
+empty will place the FIFO in an undefined state.
+ 
+*/
+ 
+ 
+// Selecting Sync. or Async Reset
+// ------------------------------
+// Uncomment one of the two lines below. The first line for
+// synchronous reset, the second for asynchronous reset
+ 
+//`define SC_FIFO_ASYNC_RESET				// Uncomment for Syncr. reset
+//`define SC_FIFO_ASYNC_RESET	or negedge rst		// Uncomment for Async. reset
+`define dw 153
+`define  aw 4
+`define  n 32
+`define max_size 30
+
+/*
+parameter dw=8;
+parameter aw=8;
+parameter n=32;
+parameter max_size = 1<<aw;
+ */
+ 
+module generic_fifo_sc_a(clk, rst, clr, din, we, dout, re,
+			 full_r, empty_r,
+			 full_n_r, empty_n_r);
+ /*
+parameter dw=8;
+parameter aw=8;
+parameter n=32;
+parameter max_size = 1<<aw;
+ */
+input			clk, rst, clr;
+input	[`dw-1:0]	din;
+input			we;
+output	[`dw-1:0]	dout;
+input			re;
+output			full_r;
+output			empty_r;
+output			full_n_r;
+output			empty_n_r;
+wire	[1:0]		level;
+wire 			full, empty;
+ 
+////////////////////////////////////////////////////////////////////
+//
+// Local Wires
+//
+ 
+reg	[`aw-1:0]	wp;
+wire	[`aw-1:0]	wp_pl1;
+wire	[`aw-1:0]	wp_pl2;
+reg	[`aw-1:0]	rp;
+wire	[`aw-1:0]	rp_pl1;
+reg			full_r;
+reg			empty_r;
+reg			gb;
+reg			gb2;
+reg	[`aw:0]		cnt;
+wire			full_n, empty_n;
+reg			full_n_r, empty_n_r;
+ 
+////////////////////////////////////////////////////////////////////
+//
+// Memory Block
+//
+ wire always_zero;
+ assign always_zero = 1'b0;
+ wire [`dw-1:0] junk_out;
+ 
+ wire [`dw-1:0] junk_in;
+ 
+ // manually assign
+ assign junk_in = 0;
+ 
+dual_port_ram #(.ADDR_WIDTH(`aw),.DATA_WIDTH(`dw))  ram1(
+	.clk(		clk		),
+	.addr1(		rp		),
+	.addr2(		wp		),
+	.we1(		we		),
+	.we2(		always_zero		),
+	.out1(		doutz		),
+	.out2(		junk_out		),
+	.data1(		din		),
+	.data2 (	junk_in)
+	);
+ 
+ wire [`dw-1:0] doutz;
+assign dout = (1'b1) ? doutz: junk_out;
+
+////////////////////////////////////////////////////////////////////
+//
+// Misc Logic
+//
+ 
+always @(posedge clk )
+begin
+	if(!rst)	wp <=  {4'b0000};
+	else
+	if(clr)		wp <=  {4'b0000};
+	else
+	if(we)		wp <=  wp_pl1;
+ end
+assign wp_pl1 = wp + { {3'b000}, 1'b1};
+assign wp_pl2 = wp + { {2'b00}, 2'b10};
+ 
+always @(posedge clk )
+begin
+	if(!rst)	rp <=  {4'b0000};
+	else
+	if(clr)		rp <=  {4'b0000};
+	else
+	if(re)		rp <=  rp_pl1;
+ end
+assign rp_pl1 = rp + { {3'b000}, 1'b1};
+ 
+////////////////////////////////////////////////////////////////////
+//
+// Combinatorial Full & Empty Flags
+//
+ 
+assign empty = ((wp == rp) && !gb);
+assign full  = ((wp == rp) &&  gb);
+ 
+// Guard Bit ...
+always @(posedge clk )
+begin
+	if(!rst)			gb <=  1'b0;
+	else
+	if(clr)				gb <=  1'b0;
+	else
+	if((wp_pl1 == rp) && we)		gb <=  1'b1;
+	else
+	if(re)				gb <=  1'b0;
+ end
+////////////////////////////////////////////////////////////////////
+//
+// Registered Full & Empty Flags
+//
+ 
+// Guard Bit ...
+always @(posedge clk )
+begin
+	if(!rst)			gb2 <=  1'b0;
+	else
+	if(clr)				gb2 <=  1'b0;
+	else
+	if((wp_pl2 == rp) && we)		gb2 <=  1'b1;
+	else
+	if((wp != rp) && re)		gb2 <=  1'b0;
+ end
+always @(posedge clk )
+begin
+	if(!rst)				full_r <=  1'b0;
+	else
+	if(clr)					full_r <=  1'b0;
+	else
+	if(we && ((wp_pl1 == rp) && gb2) && !re)	full_r <=  1'b1;
+	else
+	if(re && ((wp_pl1 != rp) | !gb2) && !we)	full_r <=  1'b0;
+ end
+always @(posedge clk )
+begin
+	if(!rst)				empty_r <=  1'b1;
+	else
+	if(clr)					empty_r <=  1'b1;
+	else
+	if(we && ((wp != rp_pl1) | gb2) && !re)	empty_r <=  1'b0;
+	else
+	if(re && ((wp == rp_pl1) && !gb2) && !we)	empty_r <=  1'b1;
+ end
+////////////////////////////////////////////////////////////////////
+//
+// Combinatorial Full_n && Empty_n Flags
+//
+ 
+assign empty_n = cnt < `n;
+assign full_n  = !(cnt < (`max_size-`n+1));
+assign level = {{cnt[`aw]}, {cnt[`aw]}} | cnt[`aw-1:`aw-2];
+ 
+// N entries status
+always @(posedge clk )
+begin
+	if(!rst)	cnt <=  {4'b0000};
+	else
+	if(clr)		cnt <=  {4'b0000};
+	else
+	if( re && !we)	cnt <=  cnt + { 5'b11111};
+	else
+	if(!re &&  we)	cnt <=  cnt + { {4'b0000}, 1'b1};
+ end
+////////////////////////////////////////////////////////////////////
+//
+// Registered Full_n && Empty_n Flags
+//
+ 
+always @(posedge clk )
+begin
+	if(!rst)				empty_n_r <=  1'b1;
+	else
+	if(clr)					empty_n_r <=  1'b1;
+	else
+	if(we && (cnt >= (`n-1) ) && !re)		empty_n_r <=  1'b0;
+	else
+	if(re && (cnt <= `n ) && !we)		empty_n_r <=  1'b1;
+ end
+always @(posedge clk )
+begin
+	if(!rst)				full_n_r <=  1'b0;
+	else
+	if(clr)					full_n_r <=  1'b0;
+	else
+	if(we && (cnt >= (`max_size-`n) ) && !re)	full_n_r <=  1'b1;
+	else
+	if(re && (cnt <= (`max_size-`n+1)) && !we)	full_n_r <=  1'b0;
+end
+endmodule
+ 
+
+module arSRLFIFO_b (CLK, RST_N, D_IN,ENQ,DEQ,CLR,D_OUT,EMPTY_N,FULL_N);
+
+input CLK;
+input RST_N;
+input [152:0] D_IN;
+input ENQ;
+input DEQ;
+input CLR;
+output [152:0] D_OUT;
+output EMPTY_N;
+output FULL_N;
+
+
+
+wire fulln;
+wire emptyn;
+
+wire always_one;
+wire always_zero;
+
+assign always_one = 1'b1;
+assign always_zero = 1'b0;
+
+generic_fifo_sc_b fifo_1
+(.clk(CLK),
+ .rst(RST_N),
+ .clr (CLR),
+ .din (D_IN),
+ .we (ENQ),
+ .dout (D_OUT),
+ .re (DEQ),
+ .full_r (FULL_N),
+ .empty_r(EMPTY_N),
+ .full_n_r (fulln),
+ .empty_n_r (emptyn)
+ );
+ 
+
+
+
+
+
+
+
+endmodule
+
+
+
+
+
+
+
+
+/////////////////////////////////////////////////////////////////////
+////                                                             ////
+////  Universal FIFO Single Clock                                ////
+////                                                             ////
+////                                                             ////
+////  Author: Rudolf Usselmann                                   ////
+////          rudi@asics.ws                                      ////
+////                                                             ////
+////                                                             ////
+////  D/L from: http://www.opencores.org/cores/generic_fifos/    ////
+////                                                             ////
+/////////////////////////////////////////////////////////////////////
+////                                                             ////
+//// Copyright (C) 2000-2002 Rudolf Usselmann                    ////
+////                         www.asics.ws                        ////
+////                         rudi@asics.ws                       ////
+////                                                             ////
+//// This source file may be used and distributed without        ////
+//// restriction provided that this copyright statement is not   ////
+//// removed from the file and that any derivative work contains ////
+//// the original copyright notice and the associated disclaimer.////
+////                                                             ////
+////     THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY     ////
+//// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED   ////
+//// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS   ////
+//// FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL THE AUTHOR      ////
+//// OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,         ////
+//// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES    ////
+//// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE   ////
+//// GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR        ////
+//// BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  ////
+//// LIABILITY, WHETHER IN  CONTRACT, STRICT LIABILITY, OR TORT  ////
+//// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  ////
+//// OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE         ////
+//// POSSIBILITY OF SUCH DAMAGE.                                 ////
+////                                                             ////
+/////////////////////////////////////////////////////////////////////
+ 
+//  CVS Log
+//
+//  __Id: generic_fifo_sc_a.v,v 1.1.1.1 2002-09-25 05:42:06 rudi Exp __
+//
+//  __Date: 2002-09-25 05:42:06 __
+//  __Revision: 1.1.1.1 __
+//  __Author: rudi __
+//  __Locker:  __
+//  __State: Exp __
+//
+// Change History:
+//               __Log: not supported by cvs2svn __
+//
+//
+//
+//
+//
+//
+//
+//
+//
+//
+ 
+ 
+/*
+ 
+Description
+===========
+ 
+I/Os
+----
+rst	low active, either sync. or async. master reset (see below how to select)
+clr	synchronous clear (just like reset but always synchronous), high active
+re	read enable, synchronous, high active
+we	read enable, synchronous, high active
+din	Data Input
+dout	Data Output
+ 
+full	Indicates the FIFO is full (combinatorial output)
+full_r	same as above, but registered output (see note below)
+empty	Indicates the FIFO is empty
+empty_r	same as above, but registered output (see note below)
+ 
+full_n		Indicates if the FIFO has space for N entries (combinatorial output)
+full_n_r	same as above, but registered output (see note below)
+empty_n		Indicates the FIFO has at least N entries (combinatorial output)
+empty_n_r	same as above, but registered output (see note below)
+ 
+level		indicates the FIFO level:
+		2'b00	0-25%	 full
+		2'b01	25-50%	 full
+		2'b10	50-75%	 full
+		2'b11	%75-100% full
+ 
+combinatorial vs. registered status outputs
+-------------------------------------------
+Both the combinatorial and registered status outputs have exactly the same
+synchronous timing. Meaning they are being asserted immediately at the clock
+edge after the last read or write. The combinatorial outputs however, pass
+through several levels of logic before they are output. The registered status
+outputs are direct outputs of a flip-flop. The reason both are provided, is
+that the registered outputs require quite a bit of additional logic inside
+the FIFO. If you can meet timing of your device with the combinatorial
+outputs, use them ! The FIFO will be smaller. If the status signals are
+in the critical pass, use the registered outputs, they have a much smaller
+output delay (actually only Tcq).
+ 
+Parameters
+----------
+The FIFO takes 3 parameters:
+dw	Data bus width
+aw	Address bus width (Determines the FIFO size by evaluating 2^aw)
+n	N is a second status threshold constant for full_n and empty_n
+	If you have no need for the second status threshold, do not
+	connect the outputs and the logic should be removed by your
+	synthesis tool.
+ 
+Synthesis Results
+-----------------
+In a Spartan 2e a 8 bit wide, 8 entries deep FIFO, takes 85 LUTs and runs
+at about 116 MHz (IO insertion disabled). The registered status outputs
+are valid after 2.1NS, the combinatorial once take out to 6.5 NS to be
+available.
+ 
+ 
+Misc
+----
+This design assumes you will do appropriate status checking externally.
+ 
+IMPORTANT ! writing while the FIFO is full or reading while the FIFO is
+empty will place the FIFO in an undefined state.
+ 
+*/
+ 
+ 
+// Selecting Sync. or Async Reset
+// ------------------------------
+// Uncomment one of the two lines below. The first line for
+// synchronous reset, the second for asynchronous reset
+ 
+//`define SC_FIFO_ASYNC_RESET				// Uncomment for Syncr. reset
+//`define SC_FIFO_ASYNC_RESET	or negedge rst		// Uncomment for Async. reset
+
+
+/*
+parameter dw=8;
+parameter aw=8;
+parameter n=32;
+parameter max_size = 1<<aw;
+ */
+ 
+module generic_fifo_sc_b(clk, rst, clr, din, we, dout, re,
+			 full_r, empty_r,
+			 full_n_r, empty_n_r);
+ /*
+parameter dw=8;
+parameter aw=8;
+parameter n=32;
+parameter max_size = 1<<aw;
+ */
+input			clk, rst, clr;
+input	[`dw-1:0]	din;
+input			we;
+output	[`dw-1:0]	dout;
+input			re;
+output			full_r;
+output			empty_r;
+output			full_n_r;
+output			empty_n_r;
+wire	[1:0]		level;
+wire 			full, empty;
+
+////////////////////////////////////////////////////////////////////
+//
+// Local Wires
+//
+ 
+reg	[`aw-1:0]	wp;
+wire	[`aw-1:0]	wp_pl1;
+wire	[`aw-1:0]	wp_pl2;
+reg	[`aw-1:0]	rp;
+wire	[`aw-1:0]	rp_pl1;
+reg			full_r;
+reg			empty_r;
+reg			gb;
+reg			gb2;
+reg	[`aw:0]		cnt;
+wire			full_n, empty_n;
+reg			full_n_r, empty_n_r;
+ 
+////////////////////////////////////////////////////////////////////
+//
+// Memory Block
+//
+ wire always_zero;
+ assign always_zero = 1'b0;
+ wire [`dw-1:0] junk_out;
+ 
+ wire [`dw-1:0] junk_in;
+ 
+ // manually assign
+ assign junk_in = 0;
+ 
+dual_port_ram #(.ADDR_WIDTH(`aw),.DATA_WIDTH(`dw))  ram1(
+	.clk(		clk		),
+	.addr1(		rp		),
+	.addr2(		wp		),
+	.we1(		we		),
+	.we2(		always_zero		),
+	.out1(		doutz		),
+	.out2(		junk_out		),
+	.data1(		din		),
+	.data2 (	junk_in)
+	);
+ 
+wire [`dw-1:0] doutz;
+assign dout = (1'b1) ? doutz: junk_out;
+
+////////////////////////////////////////////////////////////////////
+//
+// Misc Logic
+//
+ 
+always @(posedge clk )
+begin
+	if(!rst)	wp <=  {4'b0000};
+	else
+	if(clr)		wp <=  {4'b0000};
+	else
+	if(we)		wp <=  wp_pl1;
+ end
+assign wp_pl1 = wp + { {3'b000}, 1'b1};
+assign wp_pl2 = wp + { {2'b00}, 2'b10};
+ 
+always @(posedge clk )
+begin
+	if(!rst)	rp <=  {4'b0000};
+	else
+	if(clr)		rp <=  {4'b0000};
+	else
+	if(re)		rp <=  rp_pl1;
+ end
+assign rp_pl1 = rp + { {3'b000}, 1'b1};
+ 
+////////////////////////////////////////////////////////////////////
+//
+// Combinatorial Full & Empty Flags
+//
+ 
+assign empty = ((wp == rp) && !gb);
+assign full  = ((wp == rp) &&  gb);
+ 
+// Guard Bit ...
+always @(posedge clk )
+begin
+	if(!rst)			gb <=  1'b0;
+	else
+	if(clr)				gb <=  1'b0;
+	else
+	if((wp_pl1 == rp) && we)		gb <=  1'b1;
+	else
+	if(re)				gb <=  1'b0;
+ end
+////////////////////////////////////////////////////////////////////
+//
+// Registered Full & Empty Flags
+//
+ 
+// Guard Bit ...
+always @(posedge clk )
+begin
+	if(!rst)			gb2 <=  1'b0;
+	else
+	if(clr)				gb2 <=  1'b0;
+	else
+	if((wp_pl2 == rp) && we)		gb2 <=  1'b1;
+	else
+	if((wp != rp) && re)		gb2 <=  1'b0;
+ end
+always @(posedge clk )
+begin
+	if(!rst)				full_r <=  1'b0;
+	else
+	if(clr)					full_r <=  1'b0;
+	else
+	if(we && ((wp_pl1 == rp) && gb2) && !re)	full_r <=  1'b1;
+	else
+	if(re && ((wp_pl1 != rp) | !gb2) && !we)	full_r <=  1'b0;
+ end
+always @(posedge clk )
+begin
+	if(!rst)				empty_r <=  1'b1;
+	else
+	if(clr)					empty_r <=  1'b1;
+	else
+	if(we && ((wp != rp_pl1) | gb2) && !re)	empty_r <=  1'b0;
+	else
+	if(re && ((wp == rp_pl1) && !gb2) && !we)	empty_r <=  1'b1;
+ end
+////////////////////////////////////////////////////////////////////
+//
+// Combinatorial Full_n && Empty_n Flags
+//
+ 
+assign empty_n = cnt < `n;
+assign full_n  = !(cnt < (`max_size-`n+1));
+assign level = {{cnt[`aw]}, {cnt[`aw]}} | cnt[`aw-1:`aw-2];
+ 
+// N entries status
+always @(posedge clk )
+begin
+	if(!rst)	cnt <=  {4'b0000};
+	else
+	if(clr)		cnt <=  {4'b0000};
+	else
+	if( re && !we)	cnt <=  cnt + { 5'b11111};
+	else
+	if(!re &&  we)	cnt <=  cnt + { {4'b0000}, 1'b1};
+ end
+////////////////////////////////////////////////////////////////////
+//
+// Registered Full_n && Empty_n Flags
+//
+ 
+always @(posedge clk )
+begin
+	if(!rst)				empty_n_r <=  1'b1;
+	else
+	if(clr)					empty_n_r <=  1'b1;
+	else
+	if(we && (cnt >= (`n-1) ) && !re)		empty_n_r <=  1'b0;
+	else
+	if(re && (cnt <= `n ) && !we)		empty_n_r <=  1'b1;
+ end
+always @(posedge clk )
+begin
+	if(!rst)				full_n_r <=  1'b0;
+	else
+	if(clr)					full_n_r <=  1'b0;
+	else
+	if(we && (cnt >= (`max_size-`n) ) && !re)	full_n_r <=  1'b1;
+	else
+	if(re && (cnt <= (`max_size-`n+1)) && !we)	full_n_r <=  1'b0;
+end
+endmodule
+ 
+ 
+
+ 
+module arSRLFIFO_c (CLK, RST_N, D_IN,ENQ,DEQ,CLR,D_OUT,EMPTY_N,FULL_N);
+
+input CLK;
+input RST_N;
+input [152:0] D_IN;
+input ENQ;
+input DEQ;
+input CLR;
+output [152:0] D_OUT;
+output EMPTY_N;
+output FULL_N;
+
+
+
+wire fulln;
+wire emptyn;
+
+wire always_one;
+wire always_zero;
+
+assign always_one = 1'b1;
+assign always_zero = 1'b0;
+
+generic_fifo_sc_c fifo_1
+(.clk(CLK),
+ .rst(RST_N),
+ .clr (CLR),
+ .din (D_IN),
+ .we (ENQ),
+ .dout (D_OUT),
+ .re (DEQ),
+ .full_r (FULL_N),
+ .empty_r(EMPTY_N),
+ .full_n_r (fulln),
+ .empty_n_r (emptyn)
+ );
+ 
+
+
+
+
+
+
+
+endmodule
+
+
+
+
+
+
+
+
+/////////////////////////////////////////////////////////////////////
+////                                                             ////
+////  Universal FIFO Single Clock                                ////
+////                                                             ////
+////                                                             ////
+////  Author: Rudolf Usselmann                                   ////
+////          rudi@asics.ws                                      ////
+////                                                             ////
+////                                                             ////
+////  D/L from: http://www.opencores.org/cores/generic_fifos/    ////
+////                                                             ////
+/////////////////////////////////////////////////////////////////////
+////                                                             ////
+//// Copyright (C) 2000-2002 Rudolf Usselmann                    ////
+////                         www.asics.ws                        ////
+////                         rudi@asics.ws                       ////
+////                                                             ////
+//// This source file may be used and distributed without        ////
+//// restriction provided that this copyright statement is not   ////
+//// removed from the file and that any derivative work contains ////
+//// the original copyright notice and the associated disclaimer.////
+////                                                             ////
+////     THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY     ////
+//// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED   ////
+//// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS   ////
+//// FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL THE AUTHOR      ////
+//// OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,         ////
+//// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES    ////
+//// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE   ////
+//// GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR        ////
+//// BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  ////
+//// LIABILITY, WHETHER IN  CONTRACT, STRICT LIABILITY, OR TORT  ////
+//// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  ////
+//// OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE         ////
+//// POSSIBILITY OF SUCH DAMAGE.                                 ////
+////                                                             ////
+/////////////////////////////////////////////////////////////////////
+ 
+//  CVS Log
+//
+//  __Id: generic_fifo_sc_a.v,v 1.1.1.1 2002-09-25 05:42:06 rudi Exp __
+//
+//  __Date: 2002-09-25 05:42:06 __
+//  __Revision: 1.1.1.1 __
+//  __Author: rudi __
+//  __Locker:  __
+//  __State: Exp __
+//
+// Change History:
+//               __Log: not supported by cvs2svn __
+//
+//
+//
+//
+//
+//
+//
+//
+//
+//
+ 
+ 
+/*
+ 
+Description
+===========
+ 
+I/Os
+----
+rst	low active, either sync. or async. master reset (see below how to select)
+clr	synchronous clear (just like reset but always synchronous), high active
+re	read enable, synchronous, high active
+we	read enable, synchronous, high active
+din	Data Input
+dout	Data Output
+ 
+full	Indicates the FIFO is full (combinatorial output)
+full_r	same as above, but registered output (see note below)
+empty	Indicates the FIFO is empty
+empty_r	same as above, but registered output (see note below)
+ 
+full_n		Indicates if the FIFO has space for N entries (combinatorial output)
+full_n_r	same as above, but registered output (see note below)
+empty_n		Indicates the FIFO has at least N entries (combinatorial output)
+empty_n_r	same as above, but registered output (see note below)
+ 
+level		indicates the FIFO level:
+		2'b00	0-25%	 full
+		2'b01	25-50%	 full
+		2'b10	50-75%	 full
+		2'b11	%75-100% full
+ 
+combinatorial vs. registered status outputs
+-------------------------------------------
+Both the combinatorial and registered status outputs have exactly the same
+synchronous timing. Meaning they are being asserted immediately at the clock
+edge after the last read or write. The combinatorial outputs however, pass
+through several levels of logic before they are output. The registered status
+outputs are direct outputs of a flip-flop. The reason both are provided, is
+that the registered outputs require quite a bit of additional logic inside
+the FIFO. If you can meet timing of your device with the combinatorial
+outputs, use them ! The FIFO will be smaller. If the status signals are
+in the critical pass, use the registered outputs, they have a much smaller
+output delay (actually only Tcq).
+ 
+Parameters
+----------
+The FIFO takes 3 parameters:
+dw	Data bus width
+aw	Address bus width (Determines the FIFO size by evaluating 2^aw)
+n	N is a second status threshold constant for full_n and empty_n
+	If you have no need for the second status threshold, do not
+	connect the outputs and the logic should be removed by your
+	synthesis tool.
+ 
+Synthesis Results
+-----------------
+In a Spartan 2e a 8 bit wide, 8 entries deep FIFO, takes 85 LUTs and runs
+at about 116 MHz (IO insertion disabled). The registered status outputs
+are valid after 2.1NS, the combinatorial once take out to 6.5 NS to be
+available.
+ 
+ 
+Misc
+----
+This design assumes you will do appropriate status checking externally.
+ 
+IMPORTANT ! writing while the FIFO is full or reading while the FIFO is
+empty will place the FIFO in an undefined state.
+ 
+*/
+ 
+ 
+// Selecting Sync. or Async Reset
+// ------------------------------
+// Uncomment one of the two lines below. The first line for
+// synchronous reset, the second for asynchronous reset
+ 
+//`define SC_FIFO_ASYNC_RESET				// Uncomment for Syncr. reset
+//`define SC_FIFO_ASYNC_RESET	or negedge rst		// Uncomment for Async. reset
+
+/*
+parameter dw=8;
+parameter aw=8;
+parameter n=32;
+parameter max_size = 1<<aw;
+ */
+ 
+module generic_fifo_sc_c(clk, rst, clr, din, we, dout, re,
+			 full_r, empty_r,
+			 full_n_r, empty_n_r);
+ /*
+parameter dw=8;
+parameter aw=8;
+parameter n=32;
+parameter max_size = 1<<aw;
+ */
+input			clk, rst, clr;
+input	[`dw-1:0]	din;
+input			we;
+output	[`dw-1:0]	dout;
+input			re;
+output			full_r;
+output			empty_r;
+output			full_n_r;
+output			empty_n_r;
+wire	[1:0]		level;
+wire			full, empty;
+ 
+////////////////////////////////////////////////////////////////////
+//
+// Local Wires
+//
+ 
+reg	[`aw-1:0]	wp;
+wire	[`aw-1:0]	wp_pl1;
+wire	[`aw-1:0]	wp_pl2;
+reg	[`aw-1:0]	rp;
+wire	[`aw-1:0]	rp_pl1;
+reg			full_r;
+reg			empty_r;
+reg			gb;
+reg			gb2;
+reg	[`aw:0]		cnt;
+wire			full_n, empty_n;
+reg			full_n_r, empty_n_r;
+ 
+////////////////////////////////////////////////////////////////////
+//
+// Memory Block
+//
+ wire always_zero;
+ assign always_zero = 1'b0;
+ wire [`dw-1:0] junk_out;
+ 
+ wire [`dw-1:0] junk_in;
+ 
+ // manually assign
+ assign junk_in = 0;
+ 
+dual_port_ram #(.ADDR_WIDTH(`aw),.DATA_WIDTH(`dw))  ram1(
+	.clk(		clk		),
+	.addr1(		rp		),
+	.addr2(		wp		),
+	.we1(		we		),
+	.we2(		always_zero		),
+	.out1(		doutz		),
+	.out2(		junk_out		),
+	.data1(		din		),
+	.data2 (	junk_in)
+	);
+ 
+ wire [`dw-1:0] doutz;
+assign dout = (1'b1) ? doutz: junk_out;
+
+////////////////////////////////////////////////////////////////////
+//
+// Misc Logic
+//
+ 
+always @(posedge clk )
+begin
+	if(!rst)	wp <=  {4'b0000};
+	else
+	if(clr)		wp <=  {4'b0000};
+	else
+	if(we)		wp <=  wp_pl1;
+ end
+assign wp_pl1 = wp + { {3'b000}, 1'b1};
+assign wp_pl2 = wp + { {2'b00}, 2'b10};
+ 
+always @(posedge clk )
+begin
+	if(!rst)	rp <=  {4'b0000};
+	else
+	if(clr)		rp <=  {4'b0000};
+	else
+	if(re)		rp <=  rp_pl1;
+ end
+assign rp_pl1 = rp + { {3'b000}, 1'b1};
+ 
+////////////////////////////////////////////////////////////////////
+//
+// Combinatorial Full & Empty Flags
+//
+ 
+assign empty = ((wp == rp) && !gb);
+assign full  = ((wp == rp) &&  gb);
+ 
+// Guard Bit ...
+always @(posedge clk )
+begin
+	if(!rst)			gb <=  1'b0;
+	else
+	if(clr)				gb <=  1'b0;
+	else
+	if((wp_pl1 == rp) && we)		gb <=  1'b1;
+	else
+	if(re)				gb <=  1'b0;
+ end
+////////////////////////////////////////////////////////////////////
+//
+// Registered Full & Empty Flags
+//
+ 
+// Guard Bit ...
+always @(posedge clk )
+begin
+	if(!rst)			gb2 <=  1'b0;
+	else
+	if(clr)				gb2 <=  1'b0;
+	else
+	if((wp_pl2 == rp) && we)		gb2 <=  1'b1;
+	else
+	if((wp != rp) && re)		gb2 <=  1'b0;
+ end
+always @(posedge clk )
+begin
+	if(!rst)				full_r <=  1'b0;
+	else
+	if(clr)					full_r <=  1'b0;
+	else
+	if(we && ((wp_pl1 == rp) && gb2) && !re)	full_r <=  1'b1;
+	else
+	if(re && ((wp_pl1 != rp) | !gb2) && !we)	full_r <=  1'b0;
+ end
+always @(posedge clk )
+begin
+	if(!rst)				empty_r <=  1'b1;
+	else
+	if(clr)					empty_r <=  1'b1;
+	else
+	if(we && ((wp != rp_pl1) | gb2) && !re)	empty_r <=  1'b0;
+	else
+	if(re && ((wp == rp_pl1) && !gb2) && !we)	empty_r <=  1'b1;
+ end
+////////////////////////////////////////////////////////////////////
+//
+// Combinatorial Full_n && Empty_n Flags
+//
+ 
+assign empty_n = cnt < `n;
+assign full_n  = !(cnt < (`max_size-`n+1));
+assign level = {{cnt[`aw]}, {cnt[`aw]}} | cnt[`aw-1:`aw-2];
+ 
+// N entries status
+always @(posedge clk )
+begin
+	if(!rst)	cnt <=  {4'b0000};
+	else
+	if(clr)		cnt <=  {4'b0000};
+	else
+	if( re && !we)	cnt <=  cnt + { 5'b11111};
+	else
+	if(!re &&  we)	cnt <=  cnt + { {4'b0000}, 1'b1};
+ end
+////////////////////////////////////////////////////////////////////
+//
+// Registered Full_n && Empty_n Flags
+//
+ 
+always @(posedge clk )
+begin
+	if(!rst)				empty_n_r <=  1'b1;
+	else
+	if(clr)					empty_n_r <=  1'b1;
+	else
+	if(we && (cnt >= (`n-1) ) && !re)		empty_n_r <=  1'b0;
+	else
+	if(re && (cnt <= `n ) && !we)		empty_n_r <=  1'b1;
+ end
+always @(posedge clk )
+begin
+	if(!rst)				full_n_r <=  1'b0;
+	else
+	if(clr)					full_n_r <=  1'b0;
+	else
+	if(we && (cnt >= (`max_size-`n) ) && !re)	full_n_r <=  1'b1;
+	else
+	if(re && (cnt <= (`max_size-`n+1)) && !we)	full_n_r <=  1'b0;
+end
+endmodule
+
+ 
diff --git vtr_flow/benchmarks/verilog/stereovision2_yosys.v vtr_flow/benchmarks/verilog/stereovision2_yosys.v
new file mode 100755
index 0000000..a267490
--- /dev/null
+++ vtr_flow/benchmarks/verilog/stereovision2_yosys.v
@@ -0,0 +1,1849 @@
+(* top *)
+module sv_chip2_hierarchy_no_mem (reset, tm3_clk_v0_IBUF,  vidin_new_data, vidin_rgb_reg, vidin_addr_reg, svid_comp_switch, counter_out_2to1, bus_word_3_2to1, bus_word_4_2to1, bus_word_5_2to1, bus_word_6_2to1, vidin_new_data_fifo, vidin_rgb_reg_fifo_left, vidin_rgb_reg_fifo_right, vidin_addr_reg_2to0, v_nd_s1_left_2to0, v_nd_s2_left_2to0 , v_nd_s4_left_2to0 , v_d_reg_s1_left_2to0 , v_d_reg_s2_left_2to0 , v_d_reg_s4_left_2to0 , v_nd_s1_right_2to0, v_nd_s2_right_2to0 , v_nd_s4_right_2to0 , v_d_reg_s1_right_2to0 , v_d_reg_s2_right_2to0 , v_d_reg_s4_right_2to0,offchip_sram_data_in,offchip_sram_addr,offchip_sram_data_out,offchip_sram_we,offchip_sram_oe,tm3_sram_adsp);
+		
+   input [63:0]offchip_sram_data_in;
+   output [18:0]offchip_sram_addr;
+   output [63:0]offchip_sram_data_out;
+   output [7:0]offchip_sram_we;
+   output [1:0]offchip_sram_oe;
+
+	input reset;
+   input tm3_clk_v0_IBUF; 
+   wire tm3_clk_v0; 
+   bufgctrl b(.i({1'bx, tm3_clk_v0_IBUF}), .s(2'bxx), .ce(2'bxx), .ignore(2'bxx), .o(tm3_clk_v0));
+
+   wire[63:0] tm3_sram_data_in;
+
+   wire[63:0] tm3_sram_data_out;
+   reg[63:0] tm3_sram_data_xhdl0;
+
+   reg[18:0] tm3_sram_addr;
+
+   reg[7:0] tm3_sram_we;
+
+   reg[1:0] tm3_sram_oe;
+   output tm3_sram_adsp; 
+   reg tm3_sram_adsp;
+   input vidin_new_data; 
+   input[7:0] vidin_rgb_reg; 
+   input[18:0] vidin_addr_reg; 
+   input svid_comp_switch; 
+   output[2:0] counter_out_2to1; 
+   wire[2:0] counter_out_2to1;
+   output[15:0] bus_word_3_2to1; 
+   wire[15:0] bus_word_3_2to1;
+   output[15:0] bus_word_4_2to1; 
+   wire[15:0] bus_word_4_2to1;
+   output[15:0] bus_word_5_2to1; 
+   wire[15:0] bus_word_5_2to1;
+   output[15:0] bus_word_6_2to1; 
+   wire[15:0] bus_word_6_2to1;
+   output vidin_new_data_fifo; 
+   reg vidin_new_data_fifo;
+   output[7:0] vidin_rgb_reg_fifo_left; 
+   reg[7:0] vidin_rgb_reg_fifo_left;
+   output[7:0] vidin_rgb_reg_fifo_right; 
+   reg[7:0] vidin_rgb_reg_fifo_right;
+   output[3:0] vidin_addr_reg_2to0; 
+   reg[3:0] vidin_addr_reg_2to0;
+   input v_nd_s1_left_2to0; 
+   input v_nd_s2_left_2to0; 
+   input v_nd_s4_left_2to0; 
+   input[7:0] v_d_reg_s1_left_2to0; 
+   input[7:0] v_d_reg_s2_left_2to0; 
+   input[7:0] v_d_reg_s4_left_2to0; 
+   input v_nd_s1_right_2to0; 
+   input v_nd_s2_right_2to0; 
+   input v_nd_s4_right_2to0; 
+   input[7:0] v_d_reg_s1_right_2to0; 
+   input[7:0] v_d_reg_s2_right_2to0; 
+   input[7:0] v_d_reg_s4_right_2to0; 
+
+   wire v_nd_s1; 
+   wire vidin_new_data_v_fltr; 
+   reg[9:0] horiz; 
+   reg[9:0] vert; 
+   reg[63:0] vidin_data_buf_sc_1; 
+   reg[55:0] vidin_data_buf_2_sc_1; 
+   reg[18:0] vidin_addr_buf_sc_1; 
+   reg[13:0] vidin_addr_buf_sc_1_fifo; 
+   wire[18:0] vidin_addr_reg_scld; 
+   reg video_state; 
+   wire[7:0] vidin_gray_scld_1; 
+   reg[63:0] vidout_buf_fifo_1_left; 
+   reg[63:0] vidout_buf_fifo_1_right; 
+   reg[7:0] vidin_rgb_reg_tmp; 
+   reg[7:0] vidin_data_buf_fifo_sc_1_l; 
+   reg[7:0] vidin_data_buf_fifo_sc_1_r; 
+   reg[63:0] vidout_buf_fifo_2_1_left; 
+   reg[63:0] vidout_buf_fifo_2_1_right; 
+   wire vidin_new_data_tmp; 
+   reg[18:0] vidin_addr_reg_reg; 
+   reg v_nd_s1_left; 
+   reg v_nd_s1_right; 
+   reg v_nd_s2_left; 
+   reg v_nd_s2_right; 
+   reg v_nd_s4_left; 
+   reg v_nd_s4_right; 
+   reg[7:0] v_d_reg_s1_left; 
+   reg[7:0] v_d_reg_s1_right; 
+   reg[7:0] v_d_reg_s2_left; 
+   reg[7:0] v_d_reg_s2_right; 
+   reg[7:0] v_d_reg_s4_left; 
+   reg[7:0] v_d_reg_s4_right; 
+   wire[15:0] vidin_v_out_1_f1_left; 
+   wire[15:0] vidin_v_out_1_f2_left; 
+   wire[15:0] vidin_v_out_1_f3_left; 
+   wire[15:0] vidin_v_out_1_h1_left; 
+   wire[15:0] vidin_v_out_1_h2_left; 
+   wire[15:0] vidin_v_out_1_h3_left; 
+   wire[15:0] vidin_v_out_1_h4_left; 
+   wire[15:0] vidin_v_out_2_f1_left; 
+   wire[15:0] vidin_v_out_2_f2_left; 
+   wire[15:0] vidin_v_out_2_f3_left; 
+   wire[15:0] vidin_v_out_2_h1_left; 
+   wire[15:0] vidin_v_out_2_h2_left; 
+   wire[15:0] vidin_v_out_2_h3_left; 
+   wire[15:0] vidin_v_out_2_h4_left; 
+   wire[15:0] vidin_v_out_4_f1_left; 
+   wire[15:0] vidin_v_out_4_f2_left; 
+   wire[15:0] vidin_v_out_4_f3_left; 
+   wire[15:0] vidin_v_out_4_h1_left; 
+   wire[15:0] vidin_v_out_4_h2_left; 
+   wire[15:0] vidin_v_out_4_h3_left; 
+   wire[15:0] vidin_v_out_4_h4_left; 
+   wire[15:0] vidin_v_out_1_f1_right; 
+   wire[15:0] vidin_v_out_1_f2_right; 
+   wire[15:0] vidin_v_out_1_f3_right; 
+   wire[15:0] vidin_v_out_1_h1_right; 
+   wire[15:0] vidin_v_out_1_h2_right; 
+   wire[15:0] vidin_v_out_1_h3_right; 
+   wire[15:0] vidin_v_out_1_h4_right; 
+   wire[15:0] vidin_v_out_2_f1_right; 
+   wire[15:0] vidin_v_out_2_f2_right; 
+   wire[15:0] vidin_v_out_2_f3_right; 
+   wire[15:0] vidin_v_out_2_h1_right; 
+   wire[15:0] vidin_v_out_2_h2_right; 
+   wire[15:0] vidin_v_out_2_h3_right; 
+   wire[15:0] vidin_v_out_2_h4_right; 
+   wire[15:0] vidin_v_out_4_f1_right; 
+   wire[15:0] vidin_v_out_4_f2_right; 
+   wire[15:0] vidin_v_out_4_f3_right; 
+   wire[15:0] vidin_v_out_4_h1_right; 
+   wire[15:0] vidin_v_out_4_h2_right; 
+   wire[15:0] vidin_v_out_4_h3_right; 
+   wire[15:0] vidin_v_out_4_h4_right; 
+   wire[7:0] v_d_reg_s1_2to3_left; 
+   wire[7:0] v_d_reg_s2_2to3_left; 
+   wire[7:0] v_d_reg_s4_2to3_left; 
+   wire[7:0] v_d_reg_s1_2to3_right; 
+   wire[7:0] v_d_reg_s2_2to3_right; 
+   wire[7:0] v_d_reg_s4_2to3_right; 
+   reg[18:0] vidin_addr_reg_2to3; 
+   reg svid_comp_switch_2to3; 
+   wire[15:0] real_z_4_left; 
+   wire[15:0] imag_z_4_left; 
+   wire[15:0] real_p_4_left; 
+   wire[15:0] imag_p_4_left; 
+   wire[15:0] real_n_4_left; 
+   wire[15:0] imag_n_4_left; 
+   wire[15:0] real_z_4_right; 
+   wire[15:0] imag_z_4_right; 
+   wire[15:0] real_p_4_right; 
+   wire[15:0] imag_p_4_right; 
+   wire[15:0] real_n_4_right; 
+   wire[15:0] imag_n_4_right; 
+   wire[15:0] real_z_2_left; 
+   wire[15:0] imag_z_2_left; 
+   wire[15:0] real_p_2_left; 
+   wire[15:0] imag_p_2_left; 
+   wire[15:0] real_n_2_left; 
+   wire[15:0] imag_n_2_left; 
+   wire[15:0] real_z_2_right; 
+   wire[15:0] imag_z_2_right; 
+   wire[15:0] real_p_2_right; 
+   wire[15:0] imag_p_2_right; 
+   wire[15:0] real_n_2_right; 
+   wire[15:0] imag_n_2_right; 
+   wire[15:0] real_z_1_left; 
+   wire[15:0] imag_z_1_left; 
+   wire[15:0] real_p_1_left; 
+   wire[15:0] imag_p_1_left; 
+   wire[15:0] real_n_1_left; 
+   wire[15:0] imag_n_1_left; 
+   wire[15:0] real_z_1_right; 
+   wire[15:0] imag_z_1_right; 
+   wire[15:0] real_p_1_right; 
+   wire[15:0] imag_p_1_right; 
+   wire[15:0] real_n_1_right; 
+   wire[15:0] imag_n_1_right; 
+
+   assign tm3_sram_data_in = offchip_sram_data_in;
+   assign offchip_sram_addr = tm3_sram_addr;
+   assign offchip_sram_data_out = tm3_sram_data_out;
+   assign offchip_sram_we = tm3_sram_we;
+   assign offchip_sram_oe = tm3_sram_oe;
+   assign tm3_sram_data_out = tm3_sram_data_xhdl0;
+
+   v_fltr_496x7  v_fltr_1_left(tm3_clk_v0, v_nd_s1_left, v_d_reg_s1_left, vidin_v_out_1_f1_left, vidin_v_out_1_f2_left, vidin_v_out_1_f3_left, vidin_v_out_1_h1_left, vidin_v_out_1_h2_left, vidin_v_out_1_h3_left, vidin_v_out_1_h4_left); 
+   v_fltr_316x7  v_fltr_2_left(tm3_clk_v0, v_nd_s2_left, v_d_reg_s2_left, vidin_v_out_2_f1_left, vidin_v_out_2_f2_left, vidin_v_out_2_f3_left, vidin_v_out_2_h1_left, vidin_v_out_2_h2_left, vidin_v_out_2_h3_left, vidin_v_out_2_h4_left); 
+   v_fltr_226x7  v_fltr_4_left(tm3_clk_v0, v_nd_s4_left, v_d_reg_s4_left, vidin_v_out_4_f1_left, vidin_v_out_4_f2_left, vidin_v_out_4_f3_left, vidin_v_out_4_h1_left, vidin_v_out_4_h2_left, vidin_v_out_4_h3_left, vidin_v_out_4_h4_left); 
+   h_fltr h_fltr_1_left (tm3_clk_v0, v_nd_s1_left, vidin_v_out_1_f1_left, vidin_v_out_1_f2_left, vidin_v_out_1_f3_left, vidin_v_out_1_h1_left, vidin_v_out_1_h2_left, vidin_v_out_1_h3_left, vidin_v_out_1_h4_left, real_z_1_left, imag_z_1_left, real_p_1_left, imag_p_1_left, real_n_1_left, imag_n_1_left);
+   h_fltr h_fltr_2_left (tm3_clk_v0, v_nd_s2_left, vidin_v_out_2_f1_left, vidin_v_out_2_f2_left, vidin_v_out_2_f3_left, vidin_v_out_2_h1_left, vidin_v_out_2_h2_left, vidin_v_out_2_h3_left, vidin_v_out_2_h4_left, real_z_2_left, imag_z_2_left, real_p_2_left, imag_p_2_left, real_n_2_left, imag_n_2_left); 
+   h_fltr h_fltr_4_left (tm3_clk_v0, v_nd_s4_left, vidin_v_out_4_f1_left, vidin_v_out_4_f2_left, vidin_v_out_4_f3_left, vidin_v_out_4_h1_left, vidin_v_out_4_h2_left, vidin_v_out_4_h3_left, vidin_v_out_4_h4_left, real_z_4_left, imag_z_4_left, real_p_4_left, imag_p_4_left, real_n_4_left, imag_n_4_left);
+
+   v_fltr_496x7  v_fltr_1_right(tm3_clk_v0, v_nd_s1_right, v_d_reg_s1_right, vidin_v_out_1_f1_right, vidin_v_out_1_f2_right, vidin_v_out_1_f3_right, vidin_v_out_1_h1_right, vidin_v_out_1_h2_right, vidin_v_out_1_h3_right, vidin_v_out_1_h4_right); 
+   v_fltr_316x7  v_fltr_2_right(tm3_clk_v0, v_nd_s2_right, v_d_reg_s2_right, vidin_v_out_2_f1_right, vidin_v_out_2_f2_right, vidin_v_out_2_f3_right, vidin_v_out_2_h1_right, vidin_v_out_2_h2_right, vidin_v_out_2_h3_right, vidin_v_out_2_h4_right); 
+   v_fltr_226x7  v_fltr_4_right(tm3_clk_v0, v_nd_s4_right, v_d_reg_s4_right, vidin_v_out_4_f1_right, vidin_v_out_4_f2_right, vidin_v_out_4_f3_right, vidin_v_out_4_h1_right, vidin_v_out_4_h2_right, vidin_v_out_4_h3_right, vidin_v_out_4_h4_right); 
+   h_fltr h_fltr_1_right (tm3_clk_v0, v_nd_s1_right, vidin_v_out_1_f1_right, vidin_v_out_1_f2_right, vidin_v_out_1_f3_right, vidin_v_out_1_h1_right, vidin_v_out_1_h2_right, vidin_v_out_1_h3_right, vidin_v_out_1_h4_right, real_z_1_right, imag_z_1_right, real_p_1_right, imag_p_1_right, real_n_1_right, imag_n_1_right);
+   h_fltr h_fltr_2_right (tm3_clk_v0, v_nd_s2_right, vidin_v_out_2_f1_right, vidin_v_out_2_f2_right, vidin_v_out_2_f3_right, vidin_v_out_2_h1_right, vidin_v_out_2_h2_right, vidin_v_out_2_h3_right, vidin_v_out_2_h4_right, real_z_2_right, imag_z_2_right, real_p_2_right, imag_p_2_right, real_n_2_right, imag_n_2_right);
+   h_fltr h_fltr_4_right (tm3_clk_v0, v_nd_s4_right, vidin_v_out_4_f1_right, vidin_v_out_4_f2_right, vidin_v_out_4_f3_right, vidin_v_out_4_h1_right, vidin_v_out_4_h2_right, vidin_v_out_4_h3_right, vidin_v_out_4_h4_right, real_z_4_right, imag_z_4_right, real_p_4_right, imag_p_4_right, real_n_4_right, imag_n_4_right); 
+
+   port_bus_2to1 port_bus_2to1_inst (tm3_clk_v0, vidin_addr_reg_2to3, svid_comp_switch_2to3, v_nd_s1_left, real_p_1_left, imag_p_1_left, real_n_1_left, imag_n_1_left, real_p_2_left, imag_p_2_left, real_n_2_left, imag_n_2_left, real_p_4_left, imag_p_4_left, real_n_4_left, imag_n_4_left, real_p_1_right, imag_p_1_right, real_n_1_right, imag_n_1_right, real_p_2_right, imag_p_2_right, real_n_2_right, imag_n_2_right, real_p_4_right, imag_p_4_right, real_n_4_right, imag_n_4_right, bus_word_3_2to1, bus_word_4_2to1, bus_word_5_2to1, bus_word_6_2to1, counter_out_2to1); 
+
+   always @(posedge tm3_clk_v0)
+   begin
+	if (reset == 1'b0)
+	begin
+		video_state <= 1'b0;
+		tm3_sram_adsp <= 1'b0 ; 
+		horiz <= 10'b0000000000; 
+		vert <= 10'b0000000000 ;
+	end
+	else
+	begin
+		video_state <= ~(video_state) ; 
+		if (video_state == 1'b0)
+		begin
+			tm3_sram_data_xhdl0 <= 64'b0; 
+
+			if (horiz == 800)
+			begin
+				horiz <= 10'b0000000000 ; 
+				if (vert == 525)
+				begin
+					vert <= 10'b0000000000 ; 
+				end
+				else
+				begin
+					vert <= vert + 1 ; 
+				end 
+			end
+			else
+			begin
+				horiz <= horiz + 1 ; 
+			end 
+			tm3_sram_adsp <= 1'b1; 
+			tm3_sram_we <= 8'b11111111; 
+			
+			case (horiz[2:0])
+			3'b000 :
+				begin
+				   tm3_sram_oe <= 2'b10 ; 
+				end
+			3'b001 :
+				begin
+				   tm3_sram_oe <= 2'b11 ; 
+				end
+			3'b010 :
+				begin
+				   tm3_sram_oe <= 2'b10 ; 
+				end
+			3'b011 :
+				begin
+				   tm3_sram_oe <= 2'b11 ; 
+				end
+			3'b100 :
+				begin
+				   tm3_sram_oe <= 2'b11 ; 
+				end
+			3'b101 :
+				begin
+				   tm3_sram_oe <= 2'b11 ; 
+				end
+			3'b110 :
+				begin
+				   tm3_sram_oe <= 2'b11 ; 
+				end
+			3'b111 :
+				begin
+				   tm3_sram_oe <= 2'b11 ; 
+				end
+			endcase 
+		end
+		else
+		begin
+			tm3_sram_adsp <= 1'b0 ; 
+			case (horiz[2:0])
+			3'b000 :
+				begin
+				   tm3_sram_addr <= {5'b00000, vidin_addr_buf_sc_1_fifo} ; 
+				   tm3_sram_we <= 8'b11111111 ; 
+				   tm3_sram_oe <= 2'b11 ; 
+				   tm3_sram_data_xhdl0 <= 0; 
+				end
+			3'b001 :
+				begin
+				   vidout_buf_fifo_1_left <= tm3_sram_data_in ; 
+				   tm3_sram_addr <= vidin_addr_buf_sc_1 ; 
+				   tm3_sram_we <= 8'b11111111 ; 
+				   tm3_sram_oe <= 2'b11 ; 
+				   tm3_sram_data_xhdl0 <= vidin_data_buf_sc_1 ; 
+				end
+			3'b010 :
+				begin
+				   tm3_sram_addr <= {5'b00001, vidin_addr_buf_sc_1_fifo} ; 
+				   tm3_sram_we <= 8'b11111111 ; 
+				   tm3_sram_oe <= 2'b11 ; 
+				   tm3_sram_data_xhdl0 <= 0; 
+				end
+			3'b011 :
+				begin
+				   vidout_buf_fifo_1_right <= tm3_sram_data_in ; 
+				   tm3_sram_addr <= vidin_addr_buf_sc_1 ; 
+				   tm3_sram_we <= 8'b11111111 ; 
+				   tm3_sram_oe <= 2'b11 ; 
+				   tm3_sram_data_xhdl0 <= vidin_data_buf_sc_1 ; 
+				end
+			3'b100 :
+				begin
+				   tm3_sram_addr <= {5'b00000, vidin_addr_buf_sc_1_fifo} ; 
+				   tm3_sram_we <= 8'b11111111 ; 
+				   tm3_sram_oe <= 2'b11 ; 
+				   tm3_sram_data_xhdl0 <= 0; 
+				end
+			3'b101 :
+				begin
+				   tm3_sram_addr <= vidin_addr_buf_sc_1 ; 
+				   tm3_sram_we <= 8'b11111111 ; 
+				   tm3_sram_oe <= 2'b11 ; 
+				   tm3_sram_data_xhdl0 <= vidin_data_buf_sc_1 ; 
+				end
+			3'b110 :
+				begin
+				   if ((vert[8]) == 1'b0)
+				   begin
+				      tm3_sram_addr <= {5'b00000, vert[7:0], horiz[8:3]} ; 
+				      tm3_sram_we <= 8'b11111111 ; 
+				      tm3_sram_oe <= 2'b11 ; 
+				   		tm3_sram_data_xhdl0 <= 0; 
+				    end
+				   else
+				   begin
+				      tm3_sram_addr <= {5'b00001, vert[7:0], horiz[8:3]} ; 
+				      tm3_sram_we <= 8'b11111111 ; 
+				      tm3_sram_oe <= 2'b11 ; 
+				   		tm3_sram_data_xhdl0 <= 0; 
+				   end 
+				end
+			3'b111 :
+				begin
+				   tm3_sram_addr <= vidin_addr_buf_sc_1 ; 
+				   tm3_sram_we <= 8'b11111111 ; 
+				   tm3_sram_oe <= 2'b11 ; 
+				   tm3_sram_data_xhdl0 <= vidin_data_buf_sc_1 ; 
+				end
+			endcase 
+		end 
+		if (vidin_new_data_fifo == 1'b1)
+		begin
+			case (vidin_addr_reg_reg[2:0])
+			3'b000 :
+				begin
+				   vidin_data_buf_2_sc_1[7:0] <= vidin_rgb_reg_tmp ; 
+				   vidin_data_buf_fifo_sc_1_l <= vidout_buf_fifo_2_1_left[7:0] ; 
+				   vidin_data_buf_fifo_sc_1_r <= vidout_buf_fifo_2_1_right[7:0] ; 
+				end
+			3'b001 :
+				begin
+				   vidin_data_buf_2_sc_1[15:8] <= vidin_rgb_reg_tmp ; 
+				   vidin_data_buf_fifo_sc_1_l <= vidout_buf_fifo_2_1_left[15:8] ; 
+				   vidin_data_buf_fifo_sc_1_r <= vidout_buf_fifo_2_1_right[15:8] ; 
+				end
+			3'b010 :
+				begin
+				   vidin_data_buf_2_sc_1[23:16] <= vidin_rgb_reg_tmp ; 
+				   vidin_data_buf_fifo_sc_1_l <= vidout_buf_fifo_2_1_left[23:16] ; 
+				   vidin_data_buf_fifo_sc_1_r <= vidout_buf_fifo_2_1_right[23:16] ; 
+				end
+			3'b011 :
+				begin
+				   vidin_data_buf_2_sc_1[31:24] <= vidin_rgb_reg_tmp ; 
+				   vidin_data_buf_fifo_sc_1_l <= vidout_buf_fifo_2_1_left[31:24] ; 
+				   vidin_data_buf_fifo_sc_1_r <= vidout_buf_fifo_2_1_right[31:24] ; 
+				end
+			3'b100 :
+				begin
+				   vidin_data_buf_2_sc_1[39:32] <= vidin_rgb_reg_tmp ; 
+				   vidin_data_buf_fifo_sc_1_l <= vidout_buf_fifo_2_1_left[39:32] ; 
+				   vidin_data_buf_fifo_sc_1_r <= vidout_buf_fifo_2_1_right[39:32] ; 
+				end
+			3'b101 :
+				begin
+				   vidin_data_buf_2_sc_1[47:40] <= vidin_rgb_reg_tmp ; 
+				   vidin_data_buf_fifo_sc_1_l <= vidout_buf_fifo_2_1_left[47:40] ; 
+				   vidin_data_buf_fifo_sc_1_r <= vidout_buf_fifo_2_1_right[47:40] ; 
+				end
+			3'b110 :
+				begin
+				   vidin_data_buf_2_sc_1[55:48] <= vidin_rgb_reg_tmp ; 
+				   vidin_data_buf_fifo_sc_1_l <= vidout_buf_fifo_2_1_left[55:48] ; 
+				   vidin_data_buf_fifo_sc_1_r <= vidout_buf_fifo_2_1_right[55:48] ; 
+				end
+			3'b111 :
+				begin
+				   vidin_data_buf_sc_1 <= {vidin_rgb_reg_tmp, vidin_data_buf_2_sc_1[55:0]} ; 
+				   vidout_buf_fifo_2_1_left <= vidout_buf_fifo_1_left ; 
+				   vidout_buf_fifo_2_1_right <= vidout_buf_fifo_1_right ; 
+
+				 vidin_data_buf_fifo_sc_1_l <= vidout_buf_fifo_2_1_left[63:56] ; 
+				   vidin_data_buf_fifo_sc_1_r <= vidout_buf_fifo_2_1_right[63:56] ; 
+				   vidin_addr_buf_sc_1 <= {4'b0000, svid_comp_switch, vidin_addr_reg_reg[16:3]} ; 
+				   if (vidin_addr_reg_reg[8:3] == 43)
+				   begin
+				      vidin_addr_buf_sc_1_fifo <= {(vidin_addr_reg_reg[16:9] + 8'b00000001), 6'b000000} ; 
+				   end
+				   else
+				   begin
+				      if (vidin_addr_reg_reg[8:3] == 44)
+				      begin
+					 vidin_addr_buf_sc_1_fifo <= {(vidin_addr_reg_reg[16:9] + 8'b00000001), 6'b000001} ; 
+				      end
+				      else
+				      begin
+					 vidin_addr_buf_sc_1_fifo <= (vidin_addr_reg_reg[16:3]) + 2 ; 
+				      end 
+				   end 
+				end
+			endcase 
+		end 
+	end
+end 
+
+always @(posedge tm3_clk_v0)
+   begin
+         vidin_rgb_reg_tmp <= vidin_rgb_reg ; 
+         vidin_addr_reg_2to3 <= vidin_addr_reg ; 
+         vidin_addr_reg_reg <= vidin_addr_reg ; 
+         vidin_addr_reg_2to0 <= {vidin_addr_reg[1:0], vidin_addr_reg[10:9]} ; 
+         vidin_new_data_fifo <= vidin_new_data ; 
+         svid_comp_switch_2to3 <= svid_comp_switch ; 
+         vidin_rgb_reg_fifo_left <= vidin_data_buf_fifo_sc_1_l ; 
+         vidin_rgb_reg_fifo_right <= vidin_data_buf_fifo_sc_1_r ; 
+         v_nd_s1_left <= v_nd_s1_left_2to0 ; 
+         v_nd_s2_left <= v_nd_s2_left_2to0 ; 
+         v_nd_s4_left <= v_nd_s4_left_2to0 ; 
+         v_d_reg_s1_left <= v_d_reg_s1_left_2to0 ; 
+         v_d_reg_s2_left <= v_d_reg_s2_left_2to0 ; 
+         v_d_reg_s4_left <= v_d_reg_s4_left_2to0 ; 
+         v_nd_s1_right <= v_nd_s1_right_2to0 ; 
+         v_nd_s2_right <= v_nd_s2_right_2to0 ; 
+         v_nd_s4_right <= v_nd_s4_right_2to0 ; 
+         v_d_reg_s1_right <= v_d_reg_s1_right_2to0 ; 
+         v_d_reg_s2_right <= v_d_reg_s2_right_2to0 ; 
+         v_d_reg_s4_right <= v_d_reg_s4_right_2to0 ; 
+   end 
+endmodule
+
+
+
+// Discription: this block creates a long fifo
+// of  lengh of one line and then applies the
+// the first and last byte of the fifo into a 
+// that finally creates horizontal edge detection
+// filter. 
+// note: it uses fifo component to implement the fifo
+// date: Oct.7 ,2001
+// By:  Ahmad darabiha
+module h_fltr (tm3_clk_v0, vidin_new_data, vidin_in_f1, vidin_in_f2, vidin_in_f3, vidin_in_h1, vidin_in_h2, vidin_in_h3, vidin_in_h4, real_z_reg, imag_z_reg, real_p_reg, imag_p_reg, real_n_reg, imag_n_reg);
+
+   input tm3_clk_v0; 
+   input vidin_new_data; 
+   input[15:0] vidin_in_f1; 
+   input[15:0] vidin_in_f2; 
+   input[15:0] vidin_in_f3; 
+   input[15:0] vidin_in_h1; 
+   input[15:0] vidin_in_h2; 
+   input[15:0] vidin_in_h3; 
+   input[15:0] vidin_in_h4; 
+   output[15:0] real_z_reg; 
+   reg[15:0] real_z_reg;
+   output[15:0] imag_z_reg; 
+   reg[15:0] imag_z_reg;
+   output[15:0] real_p_reg; 
+   reg[15:0] real_p_reg;
+   output[15:0] imag_p_reg; 
+   reg[15:0] imag_p_reg;
+   output[15:0] real_n_reg; 
+   reg[15:0] real_n_reg;
+   output[15:0] imag_n_reg; 
+   reg[15:0] imag_n_reg;
+
+   wire[27:0] vidin_out_temp_f1; 
+   reg[27:0] vidin_out_reg_f1; 
+   wire my_fir_rdy_f1; 
+   wire[27:0] vidin_out_temp_f2; 
+   reg[27:0] vidin_out_reg_f2; 
+   wire my_fir_rdy_f2; 
+   wire[27:0] vidin_out_temp_f3; 
+   reg[27:0] vidin_out_reg_f3; 
+   wire my_fir_rdy_f3; 
+   wire[27:0] vidin_out_temp_h1; 
+   reg[27:0] vidin_out_reg_h1; 
+   wire my_fir_rdy_h1; 
+   wire[27:0] vidin_out_temp_h2; 
+   reg[27:0] vidin_out_reg_h2; 
+   wire my_fir_rdy_h2; 
+   wire[27:0] vidin_out_temp_h3; 
+   reg[27:0] vidin_out_reg_h3; 
+   wire my_fir_rdy_h3; 
+   wire[27:0] vidin_out_temp_h4; 
+   reg[27:0] vidin_out_reg_h4; 
+   wire my_fir_rdy_h4; 
+   wire[28:0] sum_tmp_1; 
+   wire[28:0] sum_tmp_2; 
+
+   wire[28:0] sum_tmp_3; 
+   wire[28:0] sum_tmp_4; 
+   wire[30:0] sum_tmp_5; 
+   wire[15:0] real_p; 
+   wire[15:0] imag_p; 
+   wire[15:0] real_z; 
+   wire[15:0] imag_z; 
+   wire[15:0] real_n; 
+   wire[15:0] imag_n; 
+   wire[16:0] tmp; 
+
+   my_fir_f1 your_instance_name_f1 (tm3_clk_v0, vidin_new_data, my_fir_rdy_f1, vidin_in_f2, vidin_out_temp_f1); 
+   my_fir_f2 your_instance_name_f2 (tm3_clk_v0, vidin_new_data, my_fir_rdy_f2, vidin_in_f1, vidin_out_temp_f2); 
+   my_fir_f3 your_instance_name_f3 (tm3_clk_v0, vidin_new_data, my_fir_rdy_f3, vidin_in_f3, vidin_out_temp_f3); 
+   my_fir_h1 your_instance_name_h1 (tm3_clk_v0, vidin_new_data, my_fir_rdy_h1, vidin_in_h2, vidin_out_temp_h1); 
+   my_fir_h2 your_instance_name_h2 (tm3_clk_v0, vidin_new_data, my_fir_rdy_h2, vidin_in_h1, vidin_out_temp_h2); 
+   my_fir_h3 your_instance_name_h3 (tm3_clk_v0, vidin_new_data, my_fir_rdy_h3, vidin_in_h4, vidin_out_temp_h3); 
+   my_fir_h4 your_instance_name_h4 (tm3_clk_v0, vidin_new_data, my_fir_rdy_h4, vidin_in_h3, vidin_out_temp_h4); 
+   steer_fltr my_steer_fltr_inst (tm3_clk_v0, vidin_new_data, vidin_out_reg_f1, vidin_out_reg_f2, vidin_out_reg_f3, vidin_out_reg_h1, vidin_out_reg_h2, vidin_out_reg_h3, vidin_out_reg_h4, real_z, imag_z, real_p, imag_p, real_n, imag_n); 
+
+   always @(posedge tm3_clk_v0)
+   begin
+         if (my_fir_rdy_f1 == 1'b1)
+         begin
+            vidin_out_reg_f1 <= vidin_out_temp_f1 ; 
+         end 
+         if (my_fir_rdy_f2 == 1'b1)
+         begin
+            vidin_out_reg_f2 <= vidin_out_temp_f2 ; 
+         end 
+         if (my_fir_rdy_f3 == 1'b1)
+         begin
+            vidin_out_reg_f3 <= vidin_out_temp_f3 ; 
+         end 
+         if (my_fir_rdy_h1 == 1'b1)
+         begin
+            vidin_out_reg_h1 <= vidin_out_temp_h1 ; 
+         end 
+         if (my_fir_rdy_h2 == 1'b1)
+         begin
+            vidin_out_reg_h2 <= vidin_out_temp_h2 ; 
+         end 
+         if (my_fir_rdy_h3 == 1'b1)
+         begin
+            vidin_out_reg_h3 <= vidin_out_temp_h3 ; 
+
+         end 
+         if (my_fir_rdy_h4 == 1'b1)
+         begin
+            vidin_out_reg_h4 <= vidin_out_temp_h4 ; 
+         end 
+   end 
+
+   always @(posedge tm3_clk_v0)
+   begin
+         real_z_reg <= real_z ; 
+         imag_z_reg <= imag_z ; 
+         real_p_reg <= real_p ; 
+         imag_p_reg <= imag_p ; 
+         real_n_reg <= real_n ; 
+         imag_n_reg <= imag_n ; 
+   end 
+endmodule
+module steer_fltr (clk, new_data, f1, f2, f3, h1, h2, h3, h4, re_z, im_z, re_p, im_p, re_n, im_n);
+
+   input clk; 
+   input new_data; 
+   input[27:0] f1; 
+   input[27:0] f2; 
+   input[27:0] f3; 
+   input[27:0] h1; 
+   input[27:0] h2; 
+   input[27:0] h3; 
+   input[27:0] h4; 
+   output[15:0] re_z; 
+   reg[15:0] re_z;
+   output[15:0] im_z; 
+   reg[15:0] im_z;
+   output[15:0] re_p; 
+   reg[15:0] re_p;
+   output[15:0] im_p; 
+   reg[15:0] im_p;
+   output[15:0] re_n; 
+   reg[15:0] re_n;
+   output[15:0] im_n; 
+   reg[15:0] im_n;
+
+   reg[27:0] f1_reg; 
+   reg[27:0] f2_reg; 
+   reg[27:0] f3_reg; 
+   reg[27:0] h1_reg; 
+   reg[27:0] h2_reg; 
+   reg[27:0] h3_reg; 
+   reg[27:0] h4_reg; 
+   reg[28:0] re_z_tmp_1; 
+   reg[28:0] im_z_tmp_1; 
+   reg[28:0] re_p_tmp_1; 
+   reg[28:0] re_p_tmp_2; 
+   reg[28:0] re_p_tmp_3; 
+   reg[28:0] im_p_tmp_1; 
+   reg[28:0] im_p_tmp_2; 
+   reg[28:0] im_p_tmp_3; 
+   reg[28:0] im_p_tmp_4; 
+   reg[30:0] re_z_tmp; 
+   reg[30:0] im_z_tmp; 
+   reg[30:0] re_p_tmp; 
+   reg[30:0] im_p_tmp; 
+   reg[30:0] re_n_tmp; 
+   reg[30:0] im_n_tmp; 
+
+   always @(posedge clk)
+   begin
+         if (new_data == 1'b1)
+         begin
+            f1_reg <= f1 ; 
+            f2_reg <= f2 ; 
+            f3_reg <= f3 ; 
+            h1_reg <= h1 ; 
+            h2_reg <= h2 ; 
+            h3_reg <= h3 ; 
+            h4_reg <= h4 ; 
+         end 
+   end 
+
+   always @(posedge clk)
+   begin
+         re_z_tmp_1 <= {f1_reg[27], f1_reg} ; 
+         im_z_tmp_1 <= {h1_reg[27], h1_reg} ; 
+         re_p_tmp_1 <= {f1_reg[27], f1_reg[27], f1_reg[27:1]} ; 
+         re_p_tmp_2 <= {f3_reg[27], f3_reg[27:0]} ; 
+         re_p_tmp_3 <= {f2_reg[27], f2_reg[27], f2_reg[27:1]} ; 
+         im_p_tmp_1 <= ({h1_reg[27], h1_reg[27], h1_reg[27], h1_reg[27:2]}) + ({h1_reg[27], h1_reg[27], h1_reg[27], h1_reg[27], h1_reg[27:3]}) ; 
+         im_p_tmp_2 <= ({h4_reg[27], h4_reg}) + ({h4_reg[27], h4_reg[27], h4_reg[27], h4_reg[27], h4_reg[27], h4_reg[27:4]}) ; 
+         im_p_tmp_3 <= ({h3_reg[27], h3_reg}) + ({h3_reg[27], h3_reg[27], h3_reg[27], h3_reg[27], h3_reg[27], h3_reg[27:4]}) ; 
+         im_p_tmp_4 <= ({h2_reg[27], h2_reg[27], h2_reg[27], h2_reg[27:2]}) + ({h2_reg[27], h2_reg[27], h2_reg[27], h2_reg[27], h2_reg[27:3]}) ; 
+         re_z_tmp <= {re_z_tmp_1[28], re_z_tmp_1[28], re_z_tmp_1} ; 
+         im_z_tmp <= {im_z_tmp_1[28], im_z_tmp_1[28], im_z_tmp_1} ; 
+         re_p_tmp <= ({re_p_tmp_1[28], re_p_tmp_1[28], re_p_tmp_1}) - ({re_p_tmp_2[28], re_p_tmp_2[28], re_p_tmp_2}) + ({re_p_tmp_3[28], re_p_tmp_3[28], re_p_tmp_3}) ; 
+         im_p_tmp <= ({im_p_tmp_1[28], im_p_tmp_1[28], im_p_tmp_1}) - ({im_p_tmp_2[28], im_p_tmp_2[28], im_p_tmp_2}) + ({im_p_tmp_3[28], im_p_tmp_3[28], im_p_tmp_3}) - ({im_p_tmp_4[28], im_p_tmp_4[28], im_p_tmp_4}) ; 
+         re_n_tmp <= ({re_p_tmp_1[28], re_p_tmp_1[28], re_p_tmp_1}) + ({re_p_tmp_2[28], re_p_tmp_2[28], re_p_tmp_2}) + ({re_p_tmp_3[28], re_p_tmp_3[28], re_p_tmp_3}) ; 
+         im_n_tmp <= ({im_p_tmp_1[28], im_p_tmp_1[28], im_p_tmp_1}) + ({im_p_tmp_2[28], im_p_tmp_2[28], im_p_tmp_2}) + ({im_p_tmp_3[28], im_p_tmp_3[28], im_p_tmp_3}) + ({im_p_tmp_4[28], im_p_tmp_4[28], im_p_tmp_4}) ; 
+         re_z <= re_z_tmp[30:15] ; 
+         im_z <= im_z_tmp[30:15] ; 
+         re_p <= re_p_tmp[30:15] ; 
+         im_p <= im_p_tmp[30:15] ; 
+         re_n <= re_n_tmp[30:15] ; 
+         im_n <= im_n_tmp[30:15] ; 
+   end 
+endmodule
+
+
+
+
+// Discription: this block creates a long fifo
+// of  lengh of one line and then applies the
+// the first and last byte of the fifo into a 
+// that finally creates horizontal edge detection
+// filter. 
+// note: it uses fifo component to implement the fifo
+// date: Oct.22 ,2001
+// By:  Ahmad darabiha
+module v_fltr_496x7 (tm3_clk_v0, vidin_new_data, vidin_in, vidin_out_f1, vidin_out_f2, vidin_out_f3, vidin_out_h1, vidin_out_h2, vidin_out_h3, vidin_out_h4); // PAJ var never used, vidin_out_or);
+
+   parameter horiz_length  = 9'b111110000;
+   parameter vert_length  = 3'b111; // PAJ constant for all
+
+   input tm3_clk_v0; 
+   input vidin_new_data; 
+   input[7:0] vidin_in; 
+   output[15:0] vidin_out_f1; 
+   wire[15:0] vidin_out_f1;
+   output[15:0] vidin_out_f2; 
+   wire[15:0] vidin_out_f2;
+   output[15:0] vidin_out_f3; 
+   wire[15:0] vidin_out_f3;
+   output[15:0] vidin_out_h1; 
+   wire[15:0] vidin_out_h1;
+   output[15:0] vidin_out_h2; 
+   wire[15:0] vidin_out_h2;
+   output[15:0] vidin_out_h3; 
+   wire[15:0] vidin_out_h3;
+   output[15:0] vidin_out_h4; 
+   wire[15:0] vidin_out_h4;
+//   output[7:0] vidin_out_or; 
+//   reg[7:0] vidin_out_or;
+
+   wire[7:0] buff_out0; 
+   wire[7:0] buff_out1; 
+   wire[7:0] buff_out2; 
+   wire[7:0] buff_out3; 
+   wire[7:0] buff_out4; 
+   wire[7:0] buff_out5; 
+   wire[7:0] buff_out6; 
+   wire[7:0] buff_out7; 
+
+ 	fifo496 fifo0(tm3_clk_v0, vidin_new_data, buff_out0, buff_out1);
+ 	fifo496 fifo1(tm3_clk_v0, vidin_new_data, buff_out1, buff_out2);
+ 	fifo496 fifo2(tm3_clk_v0, vidin_new_data, buff_out2, buff_out3);
+ 	fifo496 fifo3(tm3_clk_v0, vidin_new_data, buff_out3, buff_out4);
+ 	fifo496 fifo4(tm3_clk_v0, vidin_new_data, buff_out4, buff_out5);
+ 	fifo496 fifo5(tm3_clk_v0, vidin_new_data, buff_out5, buff_out6);
+ 	fifo496 fifo6(tm3_clk_v0, vidin_new_data, buff_out6, buff_out7);
+
+   fltr_compute_f1 inst_fltr_compute_f1 (tm3_clk_v0, {buff_out1, buff_out2, buff_out3, buff_out4, buff_out5, buff_out6, buff_out7}, vidin_out_f1);	
+   fltr_compute_f2 inst_fltr_compute_f2 (tm3_clk_v0, {buff_out1, buff_out2, buff_out3, buff_out4, buff_out5, buff_out6, buff_out7}, vidin_out_f2);	
+   fltr_compute_f3 inst_fltr_compute_f3 (tm3_clk_v0, {buff_out1, buff_out2, buff_out3, buff_out4, buff_out5, buff_out6, buff_out7}, vidin_out_f3);	
+   fltr_compute_h1 inst_fltr_compute_h1 (tm3_clk_v0, {buff_out1, buff_out2, buff_out3, buff_out4, buff_out5, buff_out6, buff_out7}, vidin_out_h1);	
+   fltr_compute_h2 inst_fltr_compute_h2 (tm3_clk_v0, {buff_out1, buff_out2, buff_out3, buff_out4, buff_out5, buff_out6, buff_out7}, vidin_out_h2);	
+   fltr_compute_h3 inst_fltr_compute_h3 (tm3_clk_v0, {buff_out1, buff_out2, buff_out3, buff_out4, buff_out5, buff_out6, buff_out7}, vidin_out_h3);	
+   fltr_compute_h4 inst_fltr_compute_h4 (tm3_clk_v0, {buff_out1, buff_out2, buff_out3, buff_out4, buff_out5, buff_out6, buff_out7}, vidin_out_h4);	
+
+         assign buff_out0 = vidin_in ; 
+/*
+   always @(posedge tm3_clk_v0)
+   begin
+         buff_out0 <= vidin_in ; 
+         //vidin_out_or <= buff_out6; 
+   end 
+*/
+endmodule
+module v_fltr_316x7 (tm3_clk_v0, vidin_new_data, vidin_in, vidin_out_f1, vidin_out_f2, vidin_out_f3, vidin_out_h1, vidin_out_h2, vidin_out_h3, vidin_out_h4); // PAJ var never used, vidin_out_or);
+
+   parameter horiz_length  = 9'b100111100;
+   parameter vert_length  = 3'b111; // PAJ constant for all
+
+   input tm3_clk_v0; 
+   input vidin_new_data; 
+   input[7:0] vidin_in; 
+   output[15:0] vidin_out_f1; 
+   wire[15:0] vidin_out_f1;
+   output[15:0] vidin_out_f2; 
+   wire[15:0] vidin_out_f2;
+   output[15:0] vidin_out_f3; 
+   wire[15:0] vidin_out_f3;
+   output[15:0] vidin_out_h1; 
+   wire[15:0] vidin_out_h1;
+   output[15:0] vidin_out_h2; 
+   wire[15:0] vidin_out_h2;
+   output[15:0] vidin_out_h3; 
+   wire[15:0] vidin_out_h3;
+   output[15:0] vidin_out_h4; 
+   wire[15:0] vidin_out_h4;
+//   output[7:0] vidin_out_or; 
+//   reg[7:0] vidin_out_or;
+
+   wire[7:0] buff_out0; 
+   wire[7:0] buff_out1; 
+   wire[7:0] buff_out2; 
+   wire[7:0] buff_out3; 
+   wire[7:0] buff_out4; 
+   wire[7:0] buff_out5; 
+   wire[7:0] buff_out6; 
+   wire[7:0] buff_out7; 
+
+ 	fifo316 fifo0(tm3_clk_v0, vidin_new_data, buff_out0, buff_out1);
+ 	fifo316 fifo1(tm3_clk_v0, vidin_new_data, buff_out1, buff_out2);
+ 	fifo316 fifo2(tm3_clk_v0, vidin_new_data, buff_out2, buff_out3);
+ 	fifo316 fifo3(tm3_clk_v0, vidin_new_data, buff_out3, buff_out4);
+ 	fifo316 fifo4(tm3_clk_v0, vidin_new_data, buff_out4, buff_out5);
+ 	fifo316 fifo5(tm3_clk_v0, vidin_new_data, buff_out5, buff_out6);
+ 	fifo316 fifo6(tm3_clk_v0, vidin_new_data, buff_out6, buff_out7);
+
+   fltr_compute_f1 inst_fltr_compute_f1 (tm3_clk_v0, {buff_out1, buff_out2, buff_out3, buff_out4, buff_out5, buff_out6, buff_out7}, vidin_out_f1);	
+   fltr_compute_f2 inst_fltr_compute_f2 (tm3_clk_v0, {buff_out1, buff_out2, buff_out3, buff_out4, buff_out5, buff_out6, buff_out7}, vidin_out_f2);	
+   fltr_compute_f3 inst_fltr_compute_f3 (tm3_clk_v0, {buff_out1, buff_out2, buff_out3, buff_out4, buff_out5, buff_out6, buff_out7}, vidin_out_f3);	
+   fltr_compute_h1 inst_fltr_compute_h1 (tm3_clk_v0, {buff_out1, buff_out2, buff_out3, buff_out4, buff_out5, buff_out6, buff_out7}, vidin_out_h1);	
+   fltr_compute_h2 inst_fltr_compute_h2 (tm3_clk_v0, {buff_out1, buff_out2, buff_out3, buff_out4, buff_out5, buff_out6, buff_out7}, vidin_out_h2);	
+   fltr_compute_h3 inst_fltr_compute_h3 (tm3_clk_v0, {buff_out1, buff_out2, buff_out3, buff_out4, buff_out5, buff_out6, buff_out7}, vidin_out_h3);	
+   fltr_compute_h4 inst_fltr_compute_h4 (tm3_clk_v0, {buff_out1, buff_out2, buff_out3, buff_out4, buff_out5, buff_out6, buff_out7}, vidin_out_h4);	
+
+         assign buff_out0 = vidin_in ; 
+/*
+   always @(posedge tm3_clk_v0)
+   begin
+         buff_out0 <= vidin_in ; 
+         //vidin_out_or <= buff_out6; 
+   end 
+*/
+endmodule
+module v_fltr_226x7 (tm3_clk_v0, vidin_new_data, vidin_in, vidin_out_f1, vidin_out_f2, vidin_out_f3, vidin_out_h1, vidin_out_h2, vidin_out_h3, vidin_out_h4); // PAJ var never used, vidin_out_or);
+
+   parameter horiz_length  = 8'b11100010;
+   parameter vert_length  = 3'b111; // PAJ constant for all
+
+   input tm3_clk_v0; 
+   input vidin_new_data; 
+   input[7:0] vidin_in; 
+   output[15:0] vidin_out_f1; 
+   wire[15:0] vidin_out_f1;
+   output[15:0] vidin_out_f2; 
+   wire[15:0] vidin_out_f2;
+   output[15:0] vidin_out_f3; 
+   wire[15:0] vidin_out_f3;
+   output[15:0] vidin_out_h1; 
+   wire[15:0] vidin_out_h1;
+   output[15:0] vidin_out_h2; 
+   wire[15:0] vidin_out_h2;
+   output[15:0] vidin_out_h3; 
+   wire[15:0] vidin_out_h3;
+   output[15:0] vidin_out_h4; 
+   wire[15:0] vidin_out_h4;
+//   output[7:0] vidin_out_or; 
+//   reg[7:0] vidin_out_or;
+
+   wire[7:0] buff_out0; 
+   wire[7:0] buff_out1; 
+   wire[7:0] buff_out2; 
+   wire[7:0] buff_out3; 
+   wire[7:0] buff_out4; 
+   wire[7:0] buff_out5; 
+   wire[7:0] buff_out6; 
+   wire[7:0] buff_out7; 
+
+ 	fifo226 fifo0(tm3_clk_v0, vidin_new_data, buff_out0, buff_out1);
+ 	fifo226 fifo1(tm3_clk_v0, vidin_new_data, buff_out1, buff_out2);
+ 	fifo226 fifo2(tm3_clk_v0, vidin_new_data, buff_out2, buff_out3);
+ 	fifo226 fifo3(tm3_clk_v0, vidin_new_data, buff_out3, buff_out4);
+ 	fifo226 fifo4(tm3_clk_v0, vidin_new_data, buff_out4, buff_out5);
+ 	fifo226 fifo5(tm3_clk_v0, vidin_new_data, buff_out5, buff_out6);
+ 	fifo226 fifo6(tm3_clk_v0, vidin_new_data, buff_out6, buff_out7);
+
+   fltr_compute_f1 inst_fltr_compute_f1 (tm3_clk_v0, {buff_out1, buff_out2, buff_out3, buff_out4, buff_out5, buff_out6, buff_out7}, vidin_out_f1);	
+   fltr_compute_f2 inst_fltr_compute_f2 (tm3_clk_v0, {buff_out1, buff_out2, buff_out3, buff_out4, buff_out5, buff_out6, buff_out7}, vidin_out_f2);	
+   fltr_compute_f3 inst_fltr_compute_f3 (tm3_clk_v0, {buff_out1, buff_out2, buff_out3, buff_out4, buff_out5, buff_out6, buff_out7}, vidin_out_f3);	
+   fltr_compute_h1 inst_fltr_compute_h1 (tm3_clk_v0, {buff_out1, buff_out2, buff_out3, buff_out4, buff_out5, buff_out6, buff_out7}, vidin_out_h1);	
+   fltr_compute_h2 inst_fltr_compute_h2 (tm3_clk_v0, {buff_out1, buff_out2, buff_out3, buff_out4, buff_out5, buff_out6, buff_out7}, vidin_out_h2);	
+   fltr_compute_h3 inst_fltr_compute_h3 (tm3_clk_v0, {buff_out1, buff_out2, buff_out3, buff_out4, buff_out5, buff_out6, buff_out7}, vidin_out_h3);	
+   fltr_compute_h4 inst_fltr_compute_h4 (tm3_clk_v0, {buff_out1, buff_out2, buff_out3, buff_out4, buff_out5, buff_out6, buff_out7}, vidin_out_h4);	
+
+         assign buff_out0 = vidin_in ; 
+/*
+   always @(posedge tm3_clk_v0)
+   begin
+         buff_out0 <= vidin_in ; 
+         //vidin_out_or <= buff_out6; 
+   end 
+*/
+endmodule
+module fltr_compute_f1 (clk, din, dout);
+
+    input clk; 
+    input[55:0] din; 
+    output[15:0] dout; 
+    reg[15:0] dout;
+    reg[16:0] q1; 
+    reg[16:0] q2; 
+    reg[16:0] q3; 
+    reg[16:0] q4; 
+    reg[16:0] q5; 
+    reg[16:0] q6; 
+    reg[16:0] q7; 
+    reg[19:0] d_out_tmp; 
+
+    always @(posedge clk)
+    begin
+			// PAJ - grabbed these from the mult_const declarations
+			q1 <= din[55:48] * 5'b11101;
+			q2 <= din[47:40] * 7'b1100101;
+			q3 <= din[39:32] * 5'b10001;
+			q4 <= din[31:24] * 9'b100010101;
+			q5 <= din[23:16] * 5'b10001;
+			q6 <= din[15:8] * 7'b1100101;
+			q7 <= din[7:0] * 5'b11101;
+
+          d_out_tmp <= ({q1[16], q1[16], q1[16], q1}) + ({q2[16], q2[16], q2[16], q2}) + ({q3[16], q3[16], q3[16], q3}) + ({q4[16], q4[16], q4[16], q4}) + ({q5[16], q5[16], q5[16], q5}) + ({q6[16], q6[16], q6[16], q6}) + ({q7[16], q7[16], q7[16], q7});
+          dout <= d_out_tmp[18:3] ; 
+    end 
+ endmodule
+module fltr_compute_f2 (clk, din, dout);
+
+    input clk; 
+    input[55:0] din; 
+    output[15:0] dout; 
+    reg[15:0] dout;
+    reg[16:0] q1; 
+    reg[16:0] q2; 
+    reg[16:0] q3; 
+    reg[16:0] q4; 
+    reg[16:0] q5; 
+    reg[16:0] q6; 
+    reg[16:0] q7; 
+    reg[19:0] d_out_tmp; 
+
+    always @(posedge clk)
+    begin
+			// PAJ - grabbed these from the mult_const declarations
+			q1 <= din[55:48] * 3'b100;
+			q2 <= din[47:40] * 6'b101010;
+			q3 <= din[39:32] * 8'b10100011;
+			q4 <= din[31:24] * 8'b11111111;
+			q5 <= din[23:16] * 8'b10100011;
+			q6 <= din[15:8] * 6'b101010;
+			q7 <= din[7:0] * 3'b100;
+
+          d_out_tmp <= ({q1[16], q1[16], q1[16], q1}) + ({q2[16], q2[16], q2[16], q2}) + ({q3[16], q3[16], q3[16], q3}) + ({q4[16], q4[16], q4[16], q4}) + ({q5[16], q5[16], q5[16], q5}) + ({q6[16], q6[16], q6[16], q6}) + ({q7[16], q7[16], q7[16], q7});
+          dout <= d_out_tmp[18:3] ; 
+    end 
+ endmodule
+
+
+
+
+
+
+
+
+
+module fltr_compute_f3 (clk, din, dout);
+
+    input clk; 
+    input[55:0] din; 
+    output[15:0] dout; 
+    reg[15:0] dout;
+    reg[16:0] q1; 
+    reg[16:0] q2; 
+    reg[16:0] q3; 
+    reg[16:0] q4; 
+    reg[16:0] q5; 
+    reg[16:0] q6; 
+    reg[16:0] q7; 
+    reg[19:0] d_out_tmp; 
+
+    always @(posedge clk)
+    begin
+			// PAJ - grabbed these from the mult_const declarations
+			q1 <= din[55:48] * 5'b10100;
+			q2 <= din[47:40] * 8'b10110011;
+			q3 <= din[39:32] * 9'b101101100;
+			q4 <= din[31:24] * 16'b0000000000000000;
+			q5 <= din[23:16] * 9'b101101100;
+			q6 <= din[15:8] * 8'b10110011;
+			q7 <= din[7:0] * 5'b10100;
+
+          d_out_tmp <= ({q1[16], q1[16], q1[16], q1}) + ({q2[16], q2[16], q2[16], q2}) + ({q3[16], q3[16], q3[16], q3}) + ({q4[16], q4[16], q4[16], q4}) + ({q5[16], q5[16], q5[16], q5}) + ({q6[16], q6[16], q6[16], q6}) + ({q7[16], q7[16], q7[16], q7});
+          dout <= d_out_tmp[18:3] ; 
+    end 
+
+ endmodule
+module fltr_compute_h1 (clk, din, dout);
+
+    input clk; 
+    input[55:0] din; 
+    output[15:0] dout; 
+    reg[15:0] dout;
+    reg[16:0] q1; 
+    reg[16:0] q2; 
+    reg[16:0] q3; 
+    reg[16:0] q4; 
+    reg[16:0] q5; 
+    reg[16:0] q6; 
+    reg[16:0] q7; 
+    reg[19:0] d_out_tmp; 
+
+    always @(posedge clk)
+    begin
+			// PAJ - grabbed these from the mult_const declarations
+			q1 <= din[55:48] * 5'b10001;
+			q2 <= din[47:40] * 5'b11001;
+			q3 <= din[39:32] * 8'b11000001;
+			q4 <= din[31:24] * 16'b0000000000000000;
+			q5 <= din[23:16] * 8'b11000001;
+			q6 <= din[15:8] * 5'b11001;
+			q7 <= din[7:0] * 5'b10001;
+
+          d_out_tmp <= ({q1[16], q1[16], q1[16], q1}) + ({q2[16], q2[16], q2[16], q2}) + ({q3[16], q3[16], q3[16], q3}) + ({q4[16], q4[16], q4[16], q4}) + ({q5[16], q5[16], q5[16], q5}) + ({q6[16], q6[16], q6[16], q6}) + ({q7[16], q7[16], q7[16], q7});
+          dout <= d_out_tmp[18:3] ; 
+    end 
+ endmodule
+
+
+module fltr_compute_h2 (clk, din, dout);
+
+   input clk; 
+   input[55:0] din; 
+   output[15:0] dout; 
+   reg[15:0] dout;
+
+   reg[16:0] q1; 
+   reg[16:0] q2; 
+   reg[16:0] q3; 
+   reg[16:0] q4; 
+   reg[16:0] q5; 
+   reg[16:0] q6; 
+   reg[16:0] q7; 
+   reg[19:0] d_out_tmp; 
+
+   always @(posedge clk)
+   begin
+			// PAJ - grabbed these from the mult_const declarations
+			q1 <= din[55:48] * 3'b100;
+			q2 <= din[47:40] * 6'b101010;
+			q3 <= din[39:32] * 8'b10100011;
+			q4 <= din[31:24] * 8'b11111111;
+			q5 <= din[23:16] * 8'b10100011;
+			q6 <= din[15:8] * 6'b101010;
+			q7 <= din[7:0] * 3'b100;
+
+          d_out_tmp <= ({q1[16], q1[16], q1[16], q1}) + ({q2[16], q2[16], q2[16], q2}) + ({q3[16], q3[16], q3[16], q3}) + ({q4[16], q4[16], q4[16], q4}) + ({q5[16], q5[16], q5[16], q5}) + ({q6[16], q6[16], q6[16], q6}) + ({q7[16], q7[16], q7[16], q7});
+         dout <= d_out_tmp[18:3] ; 
+   end 
+endmodule
+
+
+
+
+
+
+
+module fltr_compute_h3 (clk, din, dout);
+
+   input clk; 
+   input[55:0] din; 
+   output[15:0] dout; 
+   reg[15:0] dout;
+
+   reg[16:0] q1; 
+   reg[16:0] q2; 
+   reg[16:0] q3; 
+   reg[16:0] q4; 
+   reg[16:0] q5; 
+   reg[16:0] q6; 
+   reg[16:0] q7; 
+   reg[19:0] d_out_tmp; 
+
+   always @(posedge clk)
+   begin
+			// PAJ - grabbed these from the mult_const declarations
+			q1 <= din[55:48] * 5'b10111;
+			q2 <= din[47:40] * 7'b1001000;
+			q3 <= din[39:32] * 8'b10010011;
+			q4 <= din[31:24] * 16'b0000000000000000;
+			q5 <= din[23:16] * 8'b10010011;
+			q6 <= din[15:8] * 7'b1001000;
+			q7 <= din[7:0] * 5'b10111;
+
+          d_out_tmp <= ({q1[16], q1[16], q1[16], q1}) + ({q2[16], q2[16], q2[16], q2}) + ({q3[16], q3[16], q3[16], q3}) + ({q4[16], q4[16], q4[16], q4}) + ({q5[16], q5[16], q5[16], q5}) + ({q6[16], q6[16], q6[16], q6}) + ({q7[16], q7[16], q7[16], q7});
+         dout <= d_out_tmp[18:3] ; 
+   end 
+endmodule
+
+
+
+
+module fltr_compute_h4 (clk, din, dout);
+
+   input clk; 
+   input[55:0] din; 
+   output[15:0] dout; 
+   reg[15:0] dout;
+
+   reg[16:0] q1; 
+   reg[16:0] q2; 
+   reg[16:0] q3; 
+   reg[16:0] q4; 
+   reg[16:0] q5; 
+   reg[16:0] q6; 
+   reg[16:0] q7; 
+   reg[19:0] d_out_tmp; 
+
+   always @(posedge clk)
+   begin
+			// PAJ - grabbed these from the mult_const declarations
+			q1 <= din[55:48] * 4'b1110;
+			q2 <= din[47:40] * 6'b101011;
+			q3 <= din[39:32] * 7'b1010000;
+			q4 <= din[31:24] * 9'b101000100;
+			q5 <= din[23:16] * 7'b1010000;
+			q6 <= din[15:8] * 6'b101011;
+			q7 <= din[7:0] * 4'b1110;
+
+          d_out_tmp <= ({q1[16], q1[16], q1[16], q1}) + ({q2[16], q2[16], q2[16], q2}) + ({q3[16], q3[16], q3[16], q3}) + ({q4[16], q4[16], q4[16], q4}) + ({q5[16], q5[16], q5[16], q5}) + ({q6[16], q6[16], q6[16], q6}) + ({q7[16], q7[16], q7[16], q7});
+         dout <= d_out_tmp[18:3] ; 
+   end 
+endmodule
+
+
+
+
+
+
+// Discription: this block creates a long fifo
+
+ // of  lengh of the specified length as an input 
+ // parameter and with a specified width
+
+ // date: Oct.7 ,2001
+ // By:  Ahmad darabiha
+
+	`define WIDTH_4B 4'b1000
+ 
+ 
+module fifo496 (clk, wen, din, dout);
+
+//	parameter WIDTH = 4'b1000;
+
+	input clk; 
+	input wen; 
+	input[`WIDTH_4B - 1:0] din; 
+   
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+   output[`WIDTH_4B - 1:0] dout; 
+    reg[`WIDTH_4B - 1:0] dout;
+
+    reg[`WIDTH_4B-1:0]buff1; 
+    reg[`WIDTH_4B-1:0]buff2; 
+
+    always @(posedge clk)
+    begin
+		if (wen == 1'b1)
+		begin
+			buff1 <= din;
+			buff2 <= buff1;
+			dout <= buff2;
+		end
+	end
+endmodule
+
+module fifo316 (clk, wen, din, dout);
+
+//	parameter `WIDTH = 4'b1000;
+
+    input clk; 
+    input wen; 
+    input[`WIDTH_4B - 1:0] din; 
+    output[`WIDTH_4B - 1:0] dout; 
+    reg[`WIDTH_4B - 1:0] dout;
+
+    reg[`WIDTH_4B-1:0]buff1; 
+    reg[`WIDTH_4B-1:0]buff2; 
+
+    always @(posedge clk)
+    begin
+		if (wen == 1'b1)
+		begin
+			buff1 <= din;
+			buff2 <= buff1;
+			dout <= buff2;
+		end
+	end
+endmodule
+
+module fifo226 (clk, wen, din, dout);
+
+//	parameter `WIDTH = 4'b1000;
+
+    input clk; 
+    input wen; 
+    input[`WIDTH_4B - 1:0] din; 
+    output[`WIDTH_4B - 1:0] dout; 
+    reg[`WIDTH_4B - 1:0] dout;
+
+    reg[`WIDTH_4B-1:0]buff1; 
+    reg[`WIDTH_4B-1:0]buff2; 
+
+    always @(posedge clk)
+    begin
+		if (wen == 1'b1)
+		begin
+			buff1 <= din;
+			buff2 <= buff1;
+			dout <= buff2;
+		end
+	end
+endmodule
+
+module port_bus_2to1 (clk, vidin_addr_reg, svid_comp_switch, vidin_new_data_scld_1_2to3_left, 
+					vidin_data_reg_scld_1_2to3_left_rp, vidin_data_reg_scld_1_2to3_left_ip, 
+					vidin_data_reg_scld_1_2to3_left_rn, vidin_data_reg_scld_1_2to3_left_in, 
+					vidin_data_reg_scld_2_2to3_left_rp, vidin_data_reg_scld_2_2to3_left_ip, 
+					vidin_data_reg_scld_2_2to3_left_rn, vidin_data_reg_scld_2_2to3_left_in, 
+					vidin_data_reg_scld_4_2to3_left_rp, vidin_data_reg_scld_4_2to3_left_ip, 
+					vidin_data_reg_scld_4_2to3_left_rn, vidin_data_reg_scld_4_2to3_left_in, 
+					vidin_data_reg_scld_1_2to3_right_rp, vidin_data_reg_scld_1_2to3_right_ip, 
+					vidin_data_reg_scld_1_2to3_right_rn, vidin_data_reg_scld_1_2to3_right_in, 
+					vidin_data_reg_scld_2_2to3_right_rp, vidin_data_reg_scld_2_2to3_right_ip, 
+					vidin_data_reg_scld_2_2to3_right_rn, vidin_data_reg_scld_2_2to3_right_in, 
+					vidin_data_reg_scld_4_2to3_right_rp, vidin_data_reg_scld_4_2to3_right_ip, 
+					vidin_data_reg_scld_4_2to3_right_rn, vidin_data_reg_scld_4_2to3_right_in, 
+					bus_word_3, bus_word_4, bus_word_5, bus_word_6, counter_out); 
+   input clk; 
+   input[18:0] vidin_addr_reg; 
+   input svid_comp_switch; 
+   input vidin_new_data_scld_1_2to3_left; 
+   input[15:0] vidin_data_reg_scld_1_2to3_left_rp; 
+   input[15:0] vidin_data_reg_scld_1_2to3_left_ip; 
+   input[15:0] vidin_data_reg_scld_1_2to3_left_rn; 
+   input[15:0] vidin_data_reg_scld_1_2to3_left_in; 
+   input[15:0] vidin_data_reg_scld_2_2to3_left_rp; 
+   input[15:0] vidin_data_reg_scld_2_2to3_left_ip; 
+   input[15:0] vidin_data_reg_scld_2_2to3_left_rn; 
+   input[15:0] vidin_data_reg_scld_2_2to3_left_in; 
+   input[15:0] vidin_data_reg_scld_4_2to3_left_rp; 
+   input[15:0] vidin_data_reg_scld_4_2to3_left_ip; 
+   input[15:0] vidin_data_reg_scld_4_2to3_left_rn; 
+   input[15:0] vidin_data_reg_scld_4_2to3_left_in; 
+   input[15:0] vidin_data_reg_scld_1_2to3_right_rp; 
+   input[15:0] vidin_data_reg_scld_1_2to3_right_ip; 
+   input[15:0] vidin_data_reg_scld_1_2to3_right_rn; 
+   input[15:0] vidin_data_reg_scld_1_2to3_right_in; 
+   input[15:0] vidin_data_reg_scld_2_2to3_right_rp; 
+   input[15:0] vidin_data_reg_scld_2_2to3_right_ip; 
+   input[15:0] vidin_data_reg_scld_2_2to3_right_rn; 
+   input[15:0] vidin_data_reg_scld_2_2to3_right_in; 
+   input[15:0] vidin_data_reg_scld_4_2to3_right_rp; 
+   input[15:0] vidin_data_reg_scld_4_2to3_right_ip; 
+   input[15:0] vidin_data_reg_scld_4_2to3_right_rn; 
+   input[15:0] vidin_data_reg_scld_4_2to3_right_in; 
+   output[15:0] bus_word_3; 
+   reg[15:0] bus_word_3;
+   output[15:0] bus_word_4; 
+   reg[15:0] bus_word_4;
+   output[15:0] bus_word_5; 
+   reg[15:0] bus_word_5;
+   output[15:0] bus_word_6; 
+   reg[15:0] bus_word_6;
+   output[2:0] counter_out; 
+   reg[2:0] counter_out;
+
+   reg[15:0] bus_word_3_tmp; 
+   reg[15:0] bus_word_4_tmp; 
+   reg[15:0] bus_word_5_tmp; 
+   reg[15:0] bus_word_6_tmp; 
+   reg[18:0] vidin_addr_reg_tmp; 
+   reg svid_comp_switch_tmp; 
+   wire vidin_new_data_scld_1_2to3_left_tmp; 
+   wire vidin_new_data_scld_2_2to3_left_tmp; 
+   wire vidin_new_data_scld_4_2to3_left_tmp; 
+   wire vidin_new_data_scld_1_2to3_right_tmp; 
+   wire vidin_new_data_scld_2_2to3_right_tmp; 
+   wire vidin_new_data_scld_4_2to3_right_tmp; 
+   reg[3:0] counter; 
+   reg[2:0] counter_out_tmp; 
+
+   reg[15:0] vidin_data_reg_scld_1_2to3_left_rp_tmp; 
+   reg[15:0] vidin_data_reg_scld_2_2to3_left_rp_tmp; 
+   reg[15:0] vidin_data_reg_scld_4_2to3_left_rp_tmp; 
+   reg[15:0] vidin_data_reg_scld_1_2to3_right_rp_tmp; 
+   reg[15:0] vidin_data_reg_scld_2_2to3_right_rp_tmp; 
+   reg[15:0] vidin_data_reg_scld_4_2to3_right_rp_tmp; 
+   reg[15:0] vidin_data_reg_scld_1_2to3_left_ip_tmp; 
+   reg[15:0] vidin_data_reg_scld_2_2to3_left_ip_tmp; 
+   reg[15:0] vidin_data_reg_scld_4_2to3_left_ip_tmp; 
+   reg[15:0] vidin_data_reg_scld_1_2to3_right_ip_tmp; 
+   reg[15:0] vidin_data_reg_scld_2_2to3_right_ip_tmp; 
+   reg[15:0] vidin_data_reg_scld_4_2to3_right_ip_tmp; 
+   reg[15:0] vidin_data_reg_scld_1_2to3_left_rn_tmp; 
+   reg[15:0] vidin_data_reg_scld_2_2to3_left_rn_tmp; 
+   reg[15:0] vidin_data_reg_scld_4_2to3_left_rn_tmp; 
+   reg[15:0] vidin_data_reg_scld_1_2to3_right_rn_tmp; 
+   reg[15:0] vidin_data_reg_scld_2_2to3_right_rn_tmp; 
+   reg[15:0] vidin_data_reg_scld_4_2to3_right_rn_tmp; 
+   reg[15:0] vidin_data_reg_scld_1_2to3_left_in_tmp; 
+   reg[15:0] vidin_data_reg_scld_2_2to3_left_in_tmp; 
+   reg[15:0] vidin_data_reg_scld_4_2to3_left_in_tmp; 
+   reg[15:0] vidin_data_reg_scld_1_2to3_right_in_tmp; 
+   reg[15:0] vidin_data_reg_scld_2_2to3_right_in_tmp; 
+   reg[15:0] vidin_data_reg_scld_4_2to3_right_in_tmp; 
+
+   always @(posedge clk)
+   begin
+         if (vidin_new_data_scld_1_2to3_left == 1'b1)
+         begin
+            counter <= 4'b0001 ; 
+         end
+         else
+         begin
+            case (counter)
+               4'b0000 :
+                        begin
+                           counter <= 4'b1000 ; 
+                        end
+               4'b0001 :
+                        begin
+                           counter <= 4'b0010 ; 
+                        end
+               4'b0010 :
+                        begin
+                           counter <= 4'b0011 ; 
+                        end
+               4'b0011 :
+                        begin
+                           counter <= 4'b0100 ; 
+                        end
+               4'b0100 :
+                        begin
+                           counter <= 4'b0101 ; 
+                        end
+               4'b0101 :
+                        begin
+                           counter <= 4'b0110 ; 
+                        end
+               4'b0110 :
+                        begin
+                           counter <= 4'b0111 ; 
+                        end
+               4'b0111 :
+                        begin
+                           counter <= 4'b1000 ; 
+                        end
+               4'b1000 :
+                        begin
+                           counter <= 4'b1000 ; 
+                        end
+               default :
+                        begin
+                           counter <= 4'b1000 ; 
+                        end
+            endcase 
+         end 
+   end 
+
+   always @(posedge clk)
+   begin
+         case (counter[2:0])
+            3'b000 :
+                     begin
+                        counter_out_tmp <= 3'b000 ; 
+                        bus_word_3_tmp <= 16'b0000000000000000 ; 
+                        bus_word_4_tmp <= 16'b0000000000000000 ; 
+                        bus_word_5_tmp <= 16'b0000000000000000 ; 
+                        bus_word_6_tmp <= 16'b0000000000000000 ; 
+                     end
+            3'b001 :
+                     begin
+                        counter_out_tmp <= 3'b001 ; 
+                        bus_word_3_tmp <= vidin_addr_reg_tmp[15:0] ; 
+                        bus_word_4_tmp <= {vidin_addr_reg_tmp[18:16], svid_comp_switch_tmp, 12'b000000000000} ; 
+                        bus_word_5_tmp <= 16'b0000000000000000 ; 
+                        bus_word_6_tmp <= 16'b0000000000000000 ; 
+                     end
+            3'b010 :
+                     begin
+                        counter_out_tmp <= 3'b010 ; 
+                        bus_word_3_tmp <= vidin_data_reg_scld_1_2to3_left_rp_tmp ; 
+                        bus_word_4_tmp <= vidin_data_reg_scld_1_2to3_left_ip_tmp ; 
+                        bus_word_5_tmp <= vidin_data_reg_scld_1_2to3_left_rn_tmp ; 
+                        bus_word_6_tmp <= vidin_data_reg_scld_1_2to3_left_in_tmp ; 
+                     end
+            3'b011 :
+                     begin
+                        counter_out_tmp <= 3'b011 ; 
+                        bus_word_3_tmp <= vidin_data_reg_scld_1_2to3_right_rp_tmp ; 
+                        bus_word_4_tmp <= vidin_data_reg_scld_1_2to3_right_ip_tmp ; 
+                        bus_word_5_tmp <= vidin_data_reg_scld_1_2to3_right_rn_tmp ; 
+                        bus_word_6_tmp <= vidin_data_reg_scld_1_2to3_right_in_tmp ; 
+                     end
+            3'b100 :
+                     begin
+                        counter_out_tmp <= 3'b100 ; 
+                        bus_word_3_tmp <= vidin_data_reg_scld_2_2to3_left_rp_tmp ; 
+                        bus_word_4_tmp <= vidin_data_reg_scld_2_2to3_left_ip_tmp ; 
+                        bus_word_5_tmp <= vidin_data_reg_scld_2_2to3_left_rn_tmp ; 
+                        bus_word_6_tmp <= vidin_data_reg_scld_2_2to3_left_in_tmp ; 
+                     end
+            3'b101 :
+                     begin
+                        counter_out_tmp <= 3'b101 ; 
+                        bus_word_3_tmp <= vidin_data_reg_scld_2_2to3_right_rp_tmp ; 
+                        bus_word_4_tmp <= vidin_data_reg_scld_2_2to3_right_ip_tmp ; 
+                        bus_word_5_tmp <= vidin_data_reg_scld_2_2to3_right_rn_tmp ; 
+                        bus_word_6_tmp <= vidin_data_reg_scld_2_2to3_right_in_tmp ; 
+                     end
+
+            3'b110 :
+                     begin
+                        counter_out_tmp <= 3'b110 ; 
+                        bus_word_3_tmp <= vidin_data_reg_scld_4_2to3_left_rp_tmp ; 
+                        bus_word_4_tmp <= vidin_data_reg_scld_4_2to3_left_ip_tmp ; 
+                        bus_word_5_tmp <= vidin_data_reg_scld_4_2to3_left_rn_tmp ; 
+                        bus_word_6_tmp <= vidin_data_reg_scld_4_2to3_left_in_tmp ; 
+                     end
+            3'b111 :
+                     begin
+                        counter_out_tmp <= 3'b111 ; 
+                        bus_word_3_tmp <= vidin_data_reg_scld_4_2to3_right_rp_tmp ; 
+                        bus_word_4_tmp <= vidin_data_reg_scld_4_2to3_right_ip_tmp ; 
+                        bus_word_5_tmp <= vidin_data_reg_scld_4_2to3_right_rn_tmp ; 
+                        bus_word_6_tmp <= vidin_data_reg_scld_4_2to3_right_in_tmp ; 
+                     end
+         endcase 
+   end 
+
+   always @(posedge clk)
+   begin
+         counter_out <= counter_out_tmp ; 
+         bus_word_3 <= bus_word_3_tmp ; 
+         bus_word_4 <= bus_word_4_tmp ; 
+         bus_word_5 <= bus_word_5_tmp ; 
+         bus_word_6 <= bus_word_6_tmp ; 
+         if (vidin_new_data_scld_1_2to3_left == 1'b1)
+         begin
+            vidin_addr_reg_tmp <= vidin_addr_reg ; 
+            svid_comp_switch_tmp <= svid_comp_switch ; 
+            vidin_data_reg_scld_1_2to3_left_rp_tmp <= vidin_data_reg_scld_1_2to3_left_rp ; 
+            vidin_data_reg_scld_2_2to3_left_rp_tmp <= vidin_data_reg_scld_2_2to3_left_rp ; 
+            vidin_data_reg_scld_4_2to3_left_rp_tmp <= vidin_data_reg_scld_4_2to3_left_rp ; 
+            vidin_data_reg_scld_1_2to3_right_rp_tmp <= vidin_data_reg_scld_1_2to3_right_rp ; 
+            vidin_data_reg_scld_2_2to3_right_rp_tmp <= vidin_data_reg_scld_2_2to3_right_rp ; 
+            vidin_data_reg_scld_4_2to3_right_rp_tmp <= vidin_data_reg_scld_4_2to3_right_rp ; 
+            vidin_data_reg_scld_1_2to3_left_ip_tmp <= vidin_data_reg_scld_1_2to3_left_ip ; 
+            vidin_data_reg_scld_2_2to3_left_ip_tmp <= vidin_data_reg_scld_2_2to3_left_ip ; 
+            vidin_data_reg_scld_4_2to3_left_ip_tmp <= vidin_data_reg_scld_4_2to3_left_ip ; 
+            vidin_data_reg_scld_1_2to3_right_ip_tmp <= vidin_data_reg_scld_1_2to3_right_ip ; 
+            vidin_data_reg_scld_2_2to3_right_ip_tmp <= vidin_data_reg_scld_2_2to3_right_ip ; 
+            vidin_data_reg_scld_4_2to3_right_ip_tmp <= vidin_data_reg_scld_4_2to3_right_ip ; 
+            vidin_data_reg_scld_1_2to3_left_rn_tmp <= vidin_data_reg_scld_1_2to3_left_rn ; 
+            vidin_data_reg_scld_2_2to3_left_rn_tmp <= vidin_data_reg_scld_2_2to3_left_rn ; 
+            vidin_data_reg_scld_4_2to3_left_rn_tmp <= vidin_data_reg_scld_4_2to3_left_rn ; 
+            vidin_data_reg_scld_1_2to3_right_rn_tmp <= vidin_data_reg_scld_1_2to3_right_rn ; 
+            vidin_data_reg_scld_2_2to3_right_rn_tmp <= vidin_data_reg_scld_2_2to3_right_rn ; 
+            vidin_data_reg_scld_4_2to3_right_rn_tmp <= vidin_data_reg_scld_4_2to3_right_rn ; 
+            vidin_data_reg_scld_1_2to3_left_in_tmp <= vidin_data_reg_scld_1_2to3_left_in ; 
+            vidin_data_reg_scld_2_2to3_left_in_tmp <= vidin_data_reg_scld_2_2to3_left_in ; 
+            vidin_data_reg_scld_4_2to3_left_in_tmp <= vidin_data_reg_scld_4_2to3_left_in ; 
+            vidin_data_reg_scld_1_2to3_right_in_tmp <= vidin_data_reg_scld_1_2to3_right_in ; 
+            vidin_data_reg_scld_2_2to3_right_in_tmp <= vidin_data_reg_scld_2_2to3_right_in ; 
+            vidin_data_reg_scld_4_2to3_right_in_tmp <= vidin_data_reg_scld_4_2to3_right_in ; 
+         end 
+   end 
+endmodule
+
+
+`define COEF0_b  29
+	`define COEF1_b  101
+//	`define COEF2_b  -15
+//	`define COEF3_b  -235
+//	`define COEF4_b  -15
+	`define COEF2_b  15
+	`define COEF3_b  235
+	`define COEF4_b  15
+	`define COEF5_b  101
+	`define COEF6_b  29
+
+	`define WIDTH_5B 5'b10000
+	
+module my_fir_f1 (clk, new_data_rdy, output_data_ready, din, dout);
+
+//coefdata=29,101,-15,-235,-15,101,29;
+
+	//parameter `WIDTH = 5'b10000;
+
+    input clk; 
+    input[`WIDTH_5B - 1:0] din; 
+    output[28 - 1:0] dout; 
+    reg[28 - 1:0] dout;
+	input new_data_rdy;
+	output output_data_ready;
+	reg output_data_ready;
+
+    reg[`WIDTH_5B - 1:0]n_delay_reg1;
+    reg[`WIDTH_5B - 1:0]n_delay_reg2;
+    reg[`WIDTH_5B - 1:0]n_delay_reg3;
+    reg[`WIDTH_5B - 1:0]n_delay_reg4;
+    reg[`WIDTH_5B - 1:0]n_delay_reg5;
+    reg[`WIDTH_5B - 1:0]n_delay_reg6;
+
+    always @(posedge clk)
+    begin
+		if (new_data_rdy == 1'b1)
+		begin
+			n_delay_reg1 <= din;
+			n_delay_reg2 <= n_delay_reg1;
+			n_delay_reg3 <= n_delay_reg2;
+			n_delay_reg4 <= n_delay_reg3;
+			n_delay_reg5 <= n_delay_reg4;
+			n_delay_reg6 <= n_delay_reg5;
+		
+			output_data_ready <= 1'b1;
+			dout <= (din * `COEF0_b) + 
+				(n_delay_reg1 * `COEF1_b) + 
+				(n_delay_reg2 * `COEF2_b) + 
+				(n_delay_reg3 * `COEF3_b) + 
+				(n_delay_reg4 * `COEF4_b) + 
+				(n_delay_reg5 * `COEF5_b) + 
+				(n_delay_reg6 * `COEF6_b);
+		end
+		else
+		begin
+			output_data_ready <= 1'b0;
+		end
+	end
+endmodule
+	`define COEF0_c  4
+	`define COEF1_c  42
+	`define COEF2_c  163
+	`define COEF3_c  255
+	`define COEF4_c  163
+	`define COEF5_c  42
+	`define COEF6_c  4
+	
+module my_fir_f2 (clk, new_data_rdy, output_data_ready, din, dout);
+
+//coefdata=4,42,163,255,163,42,4;
+
+
+//	parameter WIDTH = 5'b10000;
+
+    input clk; 
+    input[`WIDTH_5B - 1:0] din; 
+    output[28 - 1:0] dout; 
+    reg[28 - 1:0] dout;
+	input new_data_rdy;
+	output output_data_ready;
+	reg output_data_ready;
+
+    reg[`WIDTH_5B - 1:0]n_delay_reg1;
+    reg[`WIDTH_5B - 1:0]n_delay_reg2;
+    reg[`WIDTH_5B - 1:0]n_delay_reg3;
+    reg[`WIDTH_5B - 1:0]n_delay_reg4;
+    reg[`WIDTH_5B - 1:0]n_delay_reg5;
+    reg[`WIDTH_5B - 1:0]n_delay_reg6;
+
+    always @(posedge clk)
+    begin
+		if (new_data_rdy == 1'b1)
+		begin
+			n_delay_reg1 <= din;
+			n_delay_reg2 <= n_delay_reg1;
+			n_delay_reg3 <= n_delay_reg2;
+			n_delay_reg4 <= n_delay_reg3;
+			n_delay_reg5 <= n_delay_reg4;
+			n_delay_reg6 <= n_delay_reg5;
+		
+			output_data_ready <= 1'b1;
+			dout <= (din * `COEF0_c) + 
+				(n_delay_reg1 * `COEF1_c) + 
+				(n_delay_reg2 * `COEF2_c) + 
+				(n_delay_reg3 * `COEF3_c) + 
+				(n_delay_reg4 * `COEF4_c) + 
+				(n_delay_reg5 * `COEF5_c) + 
+				(n_delay_reg6 * `COEF6_c);
+
+		end
+		else
+		begin
+			output_data_ready <= 1'b0;
+		end
+	end
+endmodule
+
+//	`define COEF0_d  -12
+//	`define COEF1_d  -77
+//	`define COEF2_d  -148
+	`define COEF0_d  12
+	`define COEF1_d  77
+	`define COEF2_d  148
+	`define COEF3_d  0
+	`define COEF4_d  148
+	`define COEF5_d  77
+	`define COEF6_d  12
+	
+module my_fir_f3 (clk, new_data_rdy, output_data_ready, din, dout);
+
+//coefdata=-12,-77,-148,0,148,77,12;
+
+//	parameter `WIDTH = 5'b10000;
+
+    input clk; 
+    input[`WIDTH_5B - 1:0] din; 
+    output[28 - 1:0] dout; 
+    reg[28 - 1:0] dout;
+	input new_data_rdy;
+	output output_data_ready;
+	reg output_data_ready;
+
+    reg[`WIDTH_5B - 1:0]n_delay_reg1;
+    reg[`WIDTH_5B - 1:0]n_delay_reg2;
+    reg[`WIDTH_5B - 1:0]n_delay_reg3;
+    reg[`WIDTH_5B - 1:0]n_delay_reg4;
+    reg[`WIDTH_5B - 1:0]n_delay_reg5;
+    reg[`WIDTH_5B - 1:0]n_delay_reg6;
+
+    always @(posedge clk)
+    begin
+		if (new_data_rdy == 1'b1)
+		begin
+			n_delay_reg1 <= din;
+			n_delay_reg2 <= n_delay_reg1;
+			n_delay_reg3 <= n_delay_reg2;
+			n_delay_reg4 <= n_delay_reg3;
+			n_delay_reg5 <= n_delay_reg4;
+			n_delay_reg6 <= n_delay_reg5;
+		
+			output_data_ready <= 1'b1;
+			dout <= (din * `COEF0_d) + 
+				(n_delay_reg1 * `COEF1_d) + 
+				(n_delay_reg2 * `COEF2_d) + 
+				(n_delay_reg4 * `COEF4_d) + 
+				(n_delay_reg5 * `COEF5_d) + 
+				(n_delay_reg6 * `COEF6_d);
+		end
+		else
+		begin
+			output_data_ready <= 1'b0;
+		end
+	end
+endmodule
+
+	`define COEF0_1  15
+//`define COEF0_1  -15
+	`define COEF1_1  25
+	`define COEF2_1  193
+	`define COEF3_1  0
+//	`define COEF4_1  -193
+//	`define COEF5_1  -25
+	`define COEF4_1  193
+	`define COEF5_1  25
+	`define COEF6_1  15
+	
+module my_fir_h1 (clk, new_data_rdy, output_data_ready, din, dout);
+
+//coefdata=-15,25,193,0,-193,-25,15;
+
+
+//	parameter `WIDTH = 5'b10000;
+
+    input clk; 
+    input[`WIDTH_5B - 1:0] din; 
+    output[28 - 1:0] dout; 
+    reg[28 - 1:0] dout;
+	input new_data_rdy;
+	output output_data_ready;
+	reg output_data_ready;
+
+    reg[`WIDTH_5B - 1:0]n_delay_reg1;
+    reg[`WIDTH_5B - 1:0]n_delay_reg2;
+    reg[`WIDTH_5B - 1:0]n_delay_reg3;
+    reg[`WIDTH_5B - 1:0]n_delay_reg4;
+    reg[`WIDTH_5B - 1:0]n_delay_reg5;
+    reg[`WIDTH_5B - 1:0]n_delay_reg6;
+
+    always @(posedge clk)
+    begin
+		if (new_data_rdy == 1'b1)
+		begin
+			n_delay_reg1 <= din;
+			n_delay_reg2 <= n_delay_reg1;
+			n_delay_reg3 <= n_delay_reg2;
+			n_delay_reg4 <= n_delay_reg3;
+			n_delay_reg5 <= n_delay_reg4;
+			n_delay_reg6 <= n_delay_reg5;
+		
+			output_data_ready <= 1'b1;
+			dout <= (din * `COEF0_1) + 
+				(n_delay_reg1 * `COEF1_1) + 
+				(n_delay_reg2 * `COEF2_1) + 
+				(n_delay_reg4 * `COEF4_1) + 
+				(n_delay_reg5 * `COEF5_1) + 
+				(n_delay_reg6 * `COEF6_1);
+		end
+		else
+		begin
+			output_data_ready <= 1'b0;
+		end
+	end
+endmodule
+
+	`define COEF0_2  4
+	`define COEF1_2  42
+	`define COEF2_2  163
+	`define COEF3_2  255
+	`define COEF4_2  163
+	`define COEF5_2  42
+	`define COEF6_2  4
+	
+module my_fir_h2 (clk, new_data_rdy, output_data_ready, din, dout);
+
+//coefdata=4,42,163,255,163,42,4;
+
+//	parameter `WIDTH = 5'b10000;
+
+    input clk; 
+    input[`WIDTH_5B - 1:0] din; 
+    output[28 - 1:0] dout; 
+    reg[28 - 1:0] dout;
+	input new_data_rdy;
+	output output_data_ready;
+	reg output_data_ready;
+
+    reg[`WIDTH_5B - 1:0]n_delay_reg1;
+    reg[`WIDTH_5B - 1:0]n_delay_reg2;
+    reg[`WIDTH_5B - 1:0]n_delay_reg3;
+    reg[`WIDTH_5B - 1:0]n_delay_reg4;
+    reg[`WIDTH_5B - 1:0]n_delay_reg5;
+    reg[`WIDTH_5B - 1:0]n_delay_reg6;
+
+    always @(posedge clk)
+    begin
+		if (new_data_rdy == 1'b1)
+		begin
+			n_delay_reg1 <= din;
+			n_delay_reg2 <= n_delay_reg1;
+			n_delay_reg3 <= n_delay_reg2;
+			n_delay_reg4 <= n_delay_reg3;
+			n_delay_reg5 <= n_delay_reg4;
+			n_delay_reg6 <= n_delay_reg5;
+		
+			output_data_ready <= 1'b1;
+			dout <= (din * `COEF0_2) + 
+				(n_delay_reg1 * `COEF1_2) + 
+				(n_delay_reg2 * `COEF2_2) + 
+				(n_delay_reg3 * `COEF3_2) + 
+				(n_delay_reg4 * `COEF4_2) + 
+				(n_delay_reg5 * `COEF5_2) + 
+				(n_delay_reg6 * `COEF6_2);
+		end
+		else
+		begin
+			output_data_ready <= 1'b0;
+		end
+	end
+endmodule
+
+//	`define COEF0_3  -9
+//	`define COEF1_3  -56
+//	`define COEF2_3  -109
+	`define COEF0_3  9
+	`define COEF1_3  56
+	`define COEF2_3  109
+	`define COEF3_3  0
+	`define COEF4_3  109
+	`define COEF5_3  56
+	`define COEF6_3  9
+
+
+module my_fir_h3 (clk, new_data_rdy, output_data_ready, din, dout);
+
+//coefdata=-9,-56,-109,0,109,56,9;
+//	parameter WIDTH = 5'b10000;
+
+    input clk; 
+    input[`WIDTH_5B - 1:0] din; 
+    output[28 - 1:0] dout; 
+    reg[28 - 1:0] dout;
+	input new_data_rdy;
+	output output_data_ready;
+	reg output_data_ready;
+
+    reg[`WIDTH_5B - 1:0]n_delay_reg1;
+    reg[`WIDTH_5B - 1:0]n_delay_reg2;
+    reg[`WIDTH_5B - 1:0]n_delay_reg3;
+    reg[`WIDTH_5B - 1:0]n_delay_reg4;
+    reg[`WIDTH_5B - 1:0]n_delay_reg5;
+    reg[`WIDTH_5B - 1:0]n_delay_reg6;
+
+    always @(posedge clk)
+    begin
+		if (new_data_rdy == 1'b1)
+		begin
+			n_delay_reg1 <= din;
+			n_delay_reg2 <= n_delay_reg1;
+			n_delay_reg3 <= n_delay_reg2;
+			n_delay_reg4 <= n_delay_reg3;
+			n_delay_reg5 <= n_delay_reg4;
+			n_delay_reg6 <= n_delay_reg5;
+		
+			output_data_ready <= 1'b1;
+			dout <= (din * `COEF0_3) + 
+				(n_delay_reg1 * `COEF1_3) + 
+				(n_delay_reg2 * `COEF2_3) + 
+				(n_delay_reg4 * `COEF4_3) + 
+				(n_delay_reg5 * `COEF5_3) + 
+				(n_delay_reg6 * `COEF6_3);
+		end
+		else
+		begin
+			output_data_ready <= 1'b0;
+		end
+	end
+endmodule
+
+//	`define COEF0_4  -9
+//	`define COEF1_4  -56
+//	`define COEF2_4  -109
+	`define COEF0_4  9
+	`define COEF1_4  56
+	`define COEF2_4  109
+	`define COEF3_4  0
+	`define COEF4_4  109
+	`define COEF5_4  56
+	`define COEF6_4  9
+
+
+module my_fir_h4 (clk, new_data_rdy, output_data_ready, din, dout);
+
+//coefdata=-9,-56,-109,0,109,56,9;
+	//	parameter WIDTH = 5'b10000;
+
+    input clk; 
+    input[`WIDTH_5B - 1:0] din; 
+    output[28 - 1:0] dout; 
+    reg[28 - 1:0] dout;
+	input new_data_rdy;
+	output output_data_ready;
+	reg output_data_ready;
+
+    reg[`WIDTH_5B - 1:0]n_delay_reg1;
+    reg[`WIDTH_5B - 1:0]n_delay_reg2;
+    reg[`WIDTH_5B - 1:0]n_delay_reg3;
+    reg[`WIDTH_5B - 1:0]n_delay_reg4;
+    reg[`WIDTH_5B - 1:0]n_delay_reg5;
+    reg[`WIDTH_5B - 1:0]n_delay_reg6;
+
+    always @(posedge clk)
+    begin
+		if (new_data_rdy == 1'b1)
+		begin
+			n_delay_reg1 <= din;
+			n_delay_reg2 <= n_delay_reg1;
+			n_delay_reg3 <= n_delay_reg2;
+			n_delay_reg4 <= n_delay_reg3;
+			n_delay_reg5 <= n_delay_reg4;
+			n_delay_reg6 <= n_delay_reg5;
+		
+			output_data_ready <= 1'b1;
+			dout <= (din * `COEF0_4) + 
+				(n_delay_reg1 * `COEF1_4) + 
+				(n_delay_reg2 * `COEF2_4) + 
+				(n_delay_reg4 * `COEF4_4) + 
+				(n_delay_reg5 * `COEF5_4) + 
+				(n_delay_reg6 * `COEF6_4);
+		end
+		else
+		begin
+			output_data_ready <= 1'b0;
+		end
+	end
+endmodule
+
diff --git vtr_flow/misc/abc_lut6.lut vtr_flow/misc/abc_lut6.lut
new file mode 100644
index 0000000..382d32b
--- /dev/null
+++ vtr_flow/misc/abc_lut6.lut
@@ -0,0 +1,7 @@
+# The area/delay of k-variable LUTs:
+1	1	1
+2	1	1
+3	1	1
+4	1	1
+5	1	1
+6	1	1
diff --git vtr_flow/misc/abc_vtr.rc vtr_flow/misc/abc_vtr.rc
new file mode 100644
index 0000000..9a12b2b
--- /dev/null
+++ vtr_flow/misc/abc_vtr.rc
@@ -0,0 +1,8 @@
+read_lut ABCLUT;
+source abc.rc;
+print_lut;
+resyn;
+resyn2;
+if;
+print_stats;
+time;
diff --git vtr_flow/misc/adder.v vtr_flow/misc/adder.v
new file mode 100644
index 0000000..84c450c
--- /dev/null
+++ vtr_flow/misc/adder.v
@@ -0,0 +1,8 @@
+(* blackbox *)
+module adder(a, b, cin, cout, sumout);
+input a, b, cin;
+output cout, sumout;
+/*
+assign {cout,sumout} = a + b + cin;
+*/
+endmodule
diff --git vtr_flow/misc/adder2xadder.v vtr_flow/misc/adder2xadder.v
new file mode 100644
index 0000000..9dced1e
--- /dev/null
+++ vtr_flow/misc/adder2xadder.v
@@ -0,0 +1,5 @@
+module adder(a, b, cin, cout, sumout);
+input a, b, cin;
+output cout, sumout;
+xadder _TECHMAP_REPLACE_ (.a_xor_b(a^b), .a_and_b(a&b), .cin(cin), .cout(cout), .sumout(sumout));
+endmodule
diff --git vtr_flow/misc/bufgctrl.v vtr_flow/misc/bufgctrl.v
new file mode 100644
index 0000000..da3f370
--- /dev/null
+++ vtr_flow/misc/bufgctrl.v
@@ -0,0 +1,9 @@
+(* blackbox *)
+module bufgctrl(i, s, ce, ignore, o);
+input [1:0] i;
+input [1:0] s;
+input [1:0] ce;
+input [1:0] ignore;
+output o;
+endmodule
+
diff --git vtr_flow/misc/dual_port_ram.v vtr_flow/misc/dual_port_ram.v
new file mode 100644
index 0000000..1e9dc18
--- /dev/null
+++ vtr_flow/misc/dual_port_ram.v
@@ -0,0 +1,19 @@
+module dual_port_ram(clk, we1, we2, addr1, addr2, data1, data2, out1, out2);
+parameter ADDR_WIDTH = 15;
+parameter DATA_WIDTH = 1;
+input clk;
+input we1, we2;
+input [ADDR_WIDTH-1:0] addr1, addr2;
+input [DATA_WIDTH-1:0] data1, data2;
+output reg [DATA_WIDTH-1:0] out1, out2;
+reg [DATA_WIDTH-1:0] RAM [(1<<ADDR_WIDTH)-1:0];
+always @(posedge clk)
+begin
+    if (we1)
+            RAM[addr1] <= data1;
+    if (we2)
+            RAM[addr2] <= data2;
+    out1 <= RAM[addr1];
+    out2 <= RAM[addr2];
+end
+endmodule
diff --git vtr_flow/misc/lut7.v vtr_flow/misc/lut7.v
new file mode 100644
index 0000000..b7ff4a2
--- /dev/null
+++ vtr_flow/misc/lut7.v
@@ -0,0 +1,6 @@
+module lut7(A6_1, B6_1, AX, F7);
+input [5:0] A6_1;
+input [5:0] B6_1;
+input AX;
+output F7;
+endmodule
diff --git vtr_flow/misc/lut8.v vtr_flow/misc/lut8.v
new file mode 100644
index 0000000..632bf7e
--- /dev/null
+++ vtr_flow/misc/lut8.v
@@ -0,0 +1,10 @@
+module lut8(A6_1, B6_1, C6_1, D6_1, AX, BX, CX, F8);
+input [5:0] A6_1;
+input [5:0] B6_1;
+input [5:0] C6_1;
+input [5:0] D6_1;
+input AX, BX, CX;
+output F8;
+endmodule
+
+
diff --git vtr_flow/misc/multiply.v vtr_flow/misc/multiply.v
new file mode 100644
index 0000000..6e7acc6
--- /dev/null
+++ vtr_flow/misc/multiply.v
@@ -0,0 +1,14 @@
+(* blackbox *)
+module multiply(a, b, p);
+parameter A_WIDTH = 25;
+parameter B_WIDTH = 18;
+parameter Y_WIDTH = A_WIDTH+B_WIDTH;
+input [A_WIDTH-1:0] a;
+input [B_WIDTH-1:0] b;
+output [Y_WIDTH-1:0] p;
+
+/*
+assign out = a * b;
+*/
+
+endmodule
diff --git vtr_flow/misc/muxf7.v vtr_flow/misc/muxf7.v
new file mode 100644
index 0000000..5ab45e1
--- /dev/null
+++ vtr_flow/misc/muxf7.v
@@ -0,0 +1,6 @@
+module muxf7(i, s, o);
+input [1:0] i;
+input s;
+output o;
+assign o = s ? i[1] : i[0];
+endmodule
diff --git vtr_flow/misc/muxf8.v vtr_flow/misc/muxf8.v
new file mode 100644
index 0000000..73f757e
--- /dev/null
+++ vtr_flow/misc/muxf8.v
@@ -0,0 +1,6 @@
+module muxf8(i, s, o);
+input [1:0] i;
+input s;
+output o;
+assign o = s ? i[1] : i[0];
+endmodule
diff --git vtr_flow/misc/single_port_ram.v vtr_flow/misc/single_port_ram.v
new file mode 100644
index 0000000..478541e
--- /dev/null
+++ vtr_flow/misc/single_port_ram.v
@@ -0,0 +1,17 @@
+module single_port_ram(clk, we, addr, data, out);
+parameter ADDR_WIDTH = 15;
+parameter DATA_WIDTH = 1;
+input clk;
+input we;
+input [ADDR_WIDTH-1:0] addr;
+input [DATA_WIDTH-1:0] data;
+output reg [DATA_WIDTH-1:0] out;
+reg [DATA_WIDTH-1:0] RAM [(1<<ADDR_WIDTH)-1:0];
+always @(posedge clk)
+begin
+    if (we)
+            RAM[addr] <= data;
+    out <= RAM[addr];
+end
+endmodule
+
diff --git vtr_flow/misc/xadder.v vtr_flow/misc/xadder.v
new file mode 100644
index 0000000..733eac9
--- /dev/null
+++ vtr_flow/misc/xadder.v
@@ -0,0 +1,5 @@
+(* blackbox *)
+module xadder(a_xor_b, a_and_b, cin, cout, sumout);
+input a_xor_b, a_and_b, cin;
+output cout, sumout;
+endmodule
diff --git vtr_flow/misc/xilinx_models.v vtr_flow/misc/xilinx_models.v
new file mode 100644
index 0000000..a0bdec5
--- /dev/null
+++ vtr_flow/misc/xilinx_models.v
@@ -0,0 +1,446 @@
+`define MEM_MINWIDTH 1
+`define MEM_MAXADDR PPP
+`define MEM_MAXDATA 36
+`define MAX(a,b) (a > b ? a : b)
+`define MIN(a,b) (a < b ? a : b)
+
+module \$mem (RD_CLK, RD_ADDR, RD_DATA, WR_CLK, WR_EN, WR_ADDR, WR_DATA);
+	parameter MEMID = "";
+	parameter SIZE = 256;
+	parameter OFFSET = 0;
+	parameter ABITS = 8;
+	parameter WIDTH = 8;
+	
+	parameter RD_PORTS = 1;
+	parameter RD_CLK_ENABLE = 1'b1;
+	parameter RD_CLK_POLARITY = 1'b1;
+	parameter RD_TRANSPARENT = 1'b1;
+	
+	parameter WR_PORTS = 1;
+	parameter WR_CLK_ENABLE = 1'b1;
+	parameter WR_CLK_POLARITY = 1'b1;
+	
+	input [RD_PORTS-1:0] RD_CLK;
+	input [RD_PORTS*ABITS-1:0] RD_ADDR;
+	output reg [RD_PORTS*WIDTH-1:0] RD_DATA;
+	
+	input [WR_PORTS-1:0] WR_CLK;
+	input [WR_PORTS*ABITS-1:0] WR_ADDR;
+	input [WR_PORTS*WIDTH-1:0] WR_DATA, WR_EN;
+	
+	wire [1023:0] _TECHMAP_DO_ = "proc; clean";
+	
+	parameter _TECHMAP_CONNMAP_RD_CLK_ = 0;
+	parameter _TECHMAP_CONNMAP_WR_CLK_ = 0;
+	parameter _TECHMAP_CONNMAP_RD_ADDR_ = 0;
+	parameter _TECHMAP_CONNMAP_WR_ADDR_ = 0;
+	parameter _TECHMAP_CONNMAP_WR_EN_ = 0;
+	parameter _TECHMAP_BITS_CONNMAP_ = 0;
+	//parameter _TECHMAP_CONNMAP_RD_PORTS_ = 0;
+	//parameter _TECHMAP_CONNMAP_WR_PORTS_ = 0;
+	
+	reg _TECHMAP_FAIL_;
+	initial begin
+		_TECHMAP_FAIL_ <= 0;
+	
+		// only map cells with only one read and one write port
+		if (RD_PORTS > 2 || WR_PORTS > 2)
+			_TECHMAP_FAIL_ <= 1;
+	
+		// we expect positive read clock and non-transparent reads
+		if (RD_TRANSPARENT || !RD_CLK_ENABLE || !RD_CLK_POLARITY)
+			_TECHMAP_FAIL_ <= 1;
+	
+		// we expect positive write clock
+		if (!WR_CLK_ENABLE || !WR_CLK_POLARITY)
+			_TECHMAP_FAIL_ <= 1;
+	
+		// read and write must be in same clock domain
+		if (_TECHMAP_CONNMAP_RD_CLK_ != _TECHMAP_CONNMAP_WR_CLK_)
+			_TECHMAP_FAIL_ <= 1;
+	
+		// we don't do small memories or memories with offsets
+		if (OFFSET != 0 || ABITS < `MEM_MINWIDTH || SIZE < 2**`MEM_MINWIDTH)
+			_TECHMAP_FAIL_ <= 1;
+	
+	end
+
+	genvar i;
+	for (i = 0; i < `MAX(RD_PORTS, WR_PORTS); i = i+1) begin
+		initial begin
+			// check each pair of read and write port are the same
+			if (RD_PORTS >= i && WR_PORTS >= i) begin
+				if (_TECHMAP_CONNMAP_RD_ADDR_[ABITS*_TECHMAP_BITS_CONNMAP_*(i+1)-1:ABITS*_TECHMAP_BITS_CONNMAP_*i] != _TECHMAP_CONNMAP_WR_ADDR_[ABITS*_TECHMAP_BITS_CONNMAP_*(i+1)-1:ABITS*_TECHMAP_BITS_CONNMAP_*i])
+					_TECHMAP_FAIL_ <= 1;
+			end
+		end
+		// check all bits of write enable are the same
+		if (i < WR_PORTS) begin
+			genvar j;
+			for (j = 1; j < WIDTH; j = j+1) begin
+				initial begin
+					if (_TECHMAP_CONNMAP_WR_EN_[(WIDTH*i+j+1)*_TECHMAP_BITS_CONNMAP_-1:(WIDTH*i+j)*_TECHMAP_BITS_CONNMAP_] != _TECHMAP_CONNMAP_WR_EN_[(WIDTH*i+1)*_TECHMAP_BITS_CONNMAP_-1:(WIDTH*i)*_TECHMAP_BITS_CONNMAP_])
+						_TECHMAP_FAIL_ <= 1;
+				end
+			end
+		end
+	end
+
+	
+	\$__mem_gen #(
+		.MEMID(MEMID), .SIZE(SIZE), .OFFSET(OFFSET), .ABITS(ABITS), .WIDTH(WIDTH),
+		.RD_PORTS(RD_PORTS), .RD_CLK_ENABLE(RD_CLK_ENABLE), .RD_CLK_POLARITY(RD_CLK_POLARITY), .RD_TRANSPARENT(RD_TRANSPARENT),
+		.WR_PORTS(WR_PORTS), .WR_CLK_ENABLE(WR_CLK_ENABLE), .WR_CLK_POLARITY(WR_CLK_POLARITY)
+	) _TECHMAP_REPLACE_ (
+		.RD_CLK(RD_CLK),
+		.RD_ADDR(RD_ADDR),
+		.RD_DATA(RD_DATA),
+		.WR_CLK(WR_CLK),
+		.WR_EN(WR_EN),
+		.WR_ADDR(WR_ADDR),
+		.WR_DATA(WR_DATA)
+	);
+endmodule
+
+module \$__mem_gen (RD_CLK, RD_ADDR, RD_DATA, WR_CLK, WR_EN, WR_ADDR, WR_DATA);
+	parameter MEMID = "";
+	parameter SIZE = 256;
+	parameter OFFSET = 0;
+	parameter ABITS = 8;
+	parameter WIDTH = 8;
+	
+	parameter RD_PORTS = 1;
+	parameter RD_CLK_ENABLE = 1'b1;
+	parameter RD_CLK_POLARITY = 1'b1;
+	parameter RD_TRANSPARENT = 1'b1;
+	
+	parameter WR_PORTS = 1;
+	parameter WR_CLK_ENABLE = 1'b1;
+	parameter WR_CLK_POLARITY = 1'b1;
+	
+	input [RD_PORTS-1:0] RD_CLK;
+	input [RD_PORTS*ABITS-1:0] RD_ADDR;
+	output reg [RD_PORTS*WIDTH-1:0] RD_DATA;
+	
+	input [WR_PORTS-1:0] WR_CLK;
+	input [WR_PORTS*ABITS-1:0] WR_ADDR;
+	input [WR_PORTS*WIDTH-1:0] WR_DATA, WR_EN;
+
+	wire [1023:0] _TECHMAP_DO_ = "proc; clean";
+
+	genvar i;
+	generate
+		if (ABITS > `MEM_MAXADDR) begin
+			wire [WIDTH-1:0] rd_data_hi, rd_data_lo;
+			wire [(ABITS-1)*RD_PORTS-1:0] rd_addr_new;
+			for (i = 0; i < RD_PORTS; i = i+1) begin
+				assign rd_addr_new[(ABITS-1)*(i+1):(ABITS-1)*i] = RD_ADDR[ABITS*(i+1)-2:ABITS*i];
+			end
+			wire [(ABITS-1)*WR_PORTS-1:0] wr_addr_new;
+			wire [WR_PORTS-1:0] wr_en_new;
+			for (i = 0; i < WR_PORTS; i = i+1) begin
+				assign wr_addr_new[(ABITS-1)*(i+1):(ABITS-1)*i] = WR_ADDR[ABITS*(i+1)-2:ABITS*i];
+				assign wr_en_new[i] = WR_EN[i] & WR_ADDR[ABITS*(i+1)-1];
+			end
+
+			if (SIZE > 2**(ABITS-1)) begin
+				\$__mem_gen #(
+					.MEMID(MEMID), .SIZE(SIZE - 2**(ABITS-1)), .OFFSET(OFFSET), .ABITS(ABITS-1), .WIDTH(WIDTH),
+					.RD_PORTS(RD_PORTS), .RD_CLK_ENABLE(RD_CLK_ENABLE), .RD_CLK_POLARITY(RD_CLK_POLARITY), .RD_TRANSPARENT(RD_TRANSPARENT),
+					.WR_PORTS(WR_PORTS), .WR_CLK_ENABLE(WR_CLK_ENABLE), .WR_CLK_POLARITY(WR_CLK_POLARITY)
+				) mem_hi (
+					.RD_CLK(RD_CLK),
+					.RD_ADDR(rd_addr_new),
+					.RD_DATA(rd_data_hi),
+					.WR_CLK(WR_CLK),
+					.WR_EN(wr_en_new),
+					.WR_ADDR(wr_addr_new),
+					.WR_DATA(WR_DATA)
+				);
+			end 
+			else begin
+				assign rd_data_hi = {{WIDTH}{1'bx}};
+			end
+
+			\$__mem_gen #(
+				.MEMID(MEMID), .SIZE(SIZE > 2**(ABITS-1) ? 2**(ABITS-1) : SIZE), .OFFSET(OFFSET), .ABITS(ABITS-1), .WIDTH(WIDTH),
+				.RD_PORTS(RD_PORTS), .RD_CLK_ENABLE(RD_CLK_ENABLE), .RD_CLK_POLARITY(RD_CLK_POLARITY), .RD_TRANSPARENT(RD_TRANSPARENT),
+				.WR_PORTS(WR_PORTS), .WR_CLK_ENABLE(WR_CLK_ENABLE), .WR_CLK_POLARITY(WR_CLK_POLARITY)
+			) mem_lo (
+				.RD_CLK(RD_CLK),
+				.RD_ADDR(rd_addr_new),
+				.RD_DATA(rd_data_lo),
+				.WR_CLK(WR_CLK),
+				.WR_EN(wr_en_new),
+				.WR_ADDR(wr_addr_new),
+				.WR_DATA(WR_DATA)
+			);
+
+			reg [RD_PORTS-1:0] delayed_abit;
+			for (i = 0; i < RD_PORTS; i = i+1) begin
+				always @(posedge RD_CLK[i])
+					delayed_abit[i] <= RD_ADDR[ABITS*(i+1)-1];
+				assign RD_DATA[WIDTH*(i+1)-1:WIDTH*i] = delayed_abit[i] ? rd_data_hi : rd_data_lo;
+			end
+		end 
+		else begin
+			localparam step = (	ABITS == 15 ? 1 :
+						ABITS == 14 ? 2 :
+						ABITS == 13 ? 4 :
+						ABITS == 12 ? 9 :
+						ABITS == 11 ? 18 :
+						ABITS == 10 ? 36 :
+						/*ABITS == 9 ?*/ 
+						RD_PORTS < 2 && WR_PORTS < 2 ? 72 : 36);
+			for (i = 0; i < WIDTH; i = i+step) begin:slice
+				wire [`MEM_MAXDATA-1:0] in1, in2;
+				wire [`MEM_MAXDATA-1:0] out1, out2;
+				wire [ABITS-1:0] addr2;
+				wire [7:0] we2;
+
+				assign in1 = `MEM_MAXDATA'bx;
+				assign in2 = `MEM_MAXDATA'bx;
+				case (step)
+					/* Twiddle data so that it still works
+					* even if we drop to RAMB18 */
+					9: assign {in1[8-1:8/2], in1[32], in1[8/2-1:0]} = WR_DATA[`MIN(i+step,WIDTH)-1:i];
+					18: assign {in1[33], in1[16-1:16/2], in1[32], in1[16/2-1:0]} = WR_DATA[`MIN(i+step,WIDTH)-1:i];
+					36: assign {in1[35:34], in1[32-1:32/2], in1[33:32], in1[32/2-1:0]} = WR_DATA[`MIN(i+step,WIDTH)-1:i];
+					72: assign {in2[35:34], in1[35:34], in2[64/2-1:64/4], in1[64/2-1:64/4], 
+						    in2[33:32], in1[33:32], in2[64/4-1:0], in1[64/4-1:0]} = WR_DATA[`MIN(i+step,WIDTH)-1:i];
+					default: assign in1[step-1:0] = WR_DATA[`MIN(i+step,WIDTH)-1:i];
+				endcase
+				if (WR_PORTS > 1) begin
+					case (step)
+						9: assign {in2[8-1:8/2], in2[32], in2[8/2-1:0]} = WR_DATA[WIDTH+`MIN(i+step,WIDTH)-1:WIDTH+i];
+						18: assign {in2[33], in2[16-1:16/2], in2[32], in2[16/2-1:0]} = WR_DATA[WIDTH+`MIN(i+step,WIDTH)-1:WIDTH+i];
+						36: assign {in2[35:34], in2[32-1:32/2], in2[33:32], in2[32/2-1:0]} = WR_DATA[WIDTH+`MIN(i+step,WIDTH)-1:WIDTH+i];
+						default:  assign in2[step-1:0] = WR_DATA[WIDTH+`MIN(i+step,WIDTH)-1:WIDTH+i];
+					endcase
+				end
+
+				case (step)
+					9: assign RD_DATA[`MIN(i+step,WIDTH)-1:i] = { out1[8-1:8/2], out1[32], out1[8/2-1:0] };
+					18: assign RD_DATA[`MIN(i+step,WIDTH)-1:i] = { out1[33], out1[16-1:16/2], out1[32], out1[16/2-1:0] };
+					36: assign RD_DATA[`MIN(i+step,WIDTH)-1:i] = { out1[35:34], out1[32-1:32/2], out1[33:32], out1[32/2-1:0] };
+					72: assign RD_DATA[`MIN(i+step,WIDTH)-1:i] = { 
+						out2[35:34], out1[35:34], out2[64/2-1:64/4], out1[64/2-1:64/4], 
+						out2[33:32], out1[33:32], out2[64/4-1:0], out1[64/4-1:0] };
+					default: assign RD_DATA[`MIN(i+step,WIDTH)-1:i] = out1[step-1:0];
+				endcase
+				if (RD_PORTS > 1) begin
+					case (step)
+						9: assign RD_DATA[WIDTH+`MIN(i+step,WIDTH)-1:WIDTH+i] = { out2[8-1:8/2], out2[32], out2[8/2-1:0] };
+						18: assign RD_DATA[WIDTH+`MIN(i+step,WIDTH)-1:WIDTH+i] = { out2[33], out2[16-1:16/2], out2[32], out2[16/2-1:0] };
+						36: assign RD_DATA[WIDTH+`MIN(i+step,WIDTH)-1:WIDTH+i] = { out2[35:34], out2[32-1:32/2], out2[33:32], out2[32/2-1:0] };
+						default: assign RD_DATA[WIDTH+`MIN(i+step,WIDTH)-1:WIDTH+i] = out2[step-1:0];
+					endcase
+				end
+
+				if (step < 72) begin
+					if (RD_PORTS > 1 || WR_PORTS > 1) begin
+						assign addr2 = RD_ADDR[2*ABITS-1:ABITS];
+						assign we2 = {{8}{WR_EN[WIDTH]}};
+					end
+					else begin
+						assign addr2 = `MEM_MAXADDR'bx;
+						assign we2[7:0] = 8'b0;
+					end
+				end
+				else begin
+					assign addr2 = RD_ADDR;
+					assign we2[7:0] = {{8}{WR_EN[0]}};
+				end
+
+				if (WIDTH <= i + step/2) begin
+					RAMB18E1 #(
+						// For single port, step >= 36, use `MEM_MAXDATA and both ports
+						.READ_WIDTH_A(`MIN(step, `MEM_MAXDATA)/2),
+						.READ_WIDTH_B(`MIN(step, `MEM_MAXDATA)/2),
+						.WRITE_WIDTH_A(`MIN(step, `MEM_MAXDATA)/2),
+						.WRITE_WIDTH_B(`MIN(step, `MEM_MAXDATA)/2)
+					) m (
+						.CLKARDCLK(RD_CLK[0]),
+						.ADDRARDADDR0(RD_ADDR[0]), .ADDRARDADDR1(RD_ADDR[1]), .ADDRARDADDR2(RD_ADDR[2]), .ADDRARDADDR3(RD_ADDR[3]), .ADDRARDADDR4(RD_ADDR[4]), 
+						.ADDRARDADDR5(RD_ADDR[5]), .ADDRARDADDR6(RD_ADDR[6]), .ADDRARDADDR7(RD_ADDR[7]), .ADDRARDADDR8(RD_ADDR[8]),  .ADDRARDADDR9(RD_ADDR[9]),
+						.ADDRARDADDR10(RD_ADDR[10]), .ADDRARDADDR11(RD_ADDR[11]), .ADDRARDADDR12(RD_ADDR[12]), .ADDRARDADDR13(RD_ADDR[13]),
+						.DOADO0(out1[0]), .DOADO1(out1[1]), .DOADO2(out1[2]), .DOADO3(out1[3]), .DOADO4(out1[4]), .DOADO5(out1[5]), .DOADO6(out1[6]), .DOADO7(out1[7]), .DOADO8(out1[8]), .DOADO9(out1[9]),
+						.DOADO10(out1[10]), .DOADO11(out1[11]), .DOADO12(out1[12]), .DOADO13(out1[13]), .DOADO14(out1[14]), .DOADO15(out1[15]),
+						.DOPADOP0(out1[32]),  .DOPADOP1(out1[33]),
+						.DIADI0(in1[0]), .DIADI1(in1[1]), .DIADI2(in1[2]), .DIADI3(in1[3]), .DIADI4(in1[4]), .DIADI5(in1[5]), .DIADI6(in1[6]),  .DIADI7(in1[7]), .DIADI8(in1[8]), .DIADI9(in1[9]),
+						.DIADI10(in1[10]), .DIADI11(in1[11]), .DIADI12(in1[12]), .DIADI13(in1[13]), .DIADI14(in1[14]), .DIADI15(in1[15]),
+						.DIPADIP0(in1[32]), .DIPADIP1(in1[33]),
+						.WEA0(WR_EN[0]), .WEA1(WR_EN[0]),
+						.CLKBWRCLK(RD_CLK[1]),
+						.ADDRBWRADDR0(addr2[0]), .ADDRBWRADDR1(addr2[1]), .ADDRBWRADDR2(addr2[2]), .ADDRBWRADDR3(addr2[3]), .ADDRBWRADDR4(addr2[4]),
+						.ADDRBWRADDR5(addr2[5]), .ADDRBWRADDR6(addr2[6]), .ADDRBWRADDR7(addr2[7]), .ADDRBWRADDR8(addr2[8]), .ADDRBWRADDR9(addr2[9]),
+						.ADDRBWRADDR10(addr2[10]), .ADDRBWRADDR11(addr2[11]), .ADDRBWRADDR12(addr2[12]), .ADDRBWRADDR13(addr2[13]),
+						.DOBDO0(out2[0]), .DOBDO1(out2[1]), .DOBDO2(out2[2]), .DOBDO3(out2[3]), .DOBDO4(out2[4]), .DOBDO5(out2[5]), .DOBDO6(out2[6]), .DOBDO7(out2[7]), .DOBDO8(out2[8]), .DOBDO9(out2[9]),
+						.DOBDO10(out2[10]), .DOBDO11(out2[11]), .DOBDO12(out2[12]), .DOBDO13(out2[13]), .DOBDO14(out2[14]), .DOBDO15(out2[15]),
+						.DOPBDOP0(out2[32]),  .DOPBDOP1(out2[33]),
+						.DIBDI0(in2[0]), .DIBDI1(in2[1]), .DIBDI2(in2[2]), .DIBDI3(in2[3]), .DIBDI4(in2[4]), .DIBDI5(in2[5]), .DIBDI6(in2[6]),  .DIBDI7(in2[7]), .DIBDI8(in2[8]), .DIBDI9(in2[9]),
+						.DIBDI10(in2[10]), .DIBDI11(in2[11]), .DIBDI12(in2[12]), .DIBDI13(in2[13]), .DIBDI14(in2[14]), .DIBDI15(in2[15]),
+						.DIPBDIP0(in2[32]), .DIPBDIP1(in2[33]),
+						.WEBWE0(we2[0]), .WEBWE1(we2[1]), .WEBWE2(we2[2]), .WEBWE3(we2[3])
+					);
+				end
+				else begin
+					RAMB36E1 #(
+						.step(step),
+						.rd_ports(RD_PORTS),
+						// For single port, step >= 72, use `MEM_MAXDATA and both ports
+						.READ_WIDTH_A(`MIN(step, `MEM_MAXDATA)),
+						.READ_WIDTH_B(`MIN(step, `MEM_MAXDATA)),
+						.WRITE_WIDTH_A(`MIN(step, `MEM_MAXDATA)),
+						.WRITE_WIDTH_B(`MIN(step, `MEM_MAXDATA))
+					) m (
+						.CLKARDCLK(RD_CLK[0]),
+						.ADDRARDADDR0(RD_ADDR[0]), .ADDRARDADDR1(RD_ADDR[1]), .ADDRARDADDR2(RD_ADDR[2]), .ADDRARDADDR3(RD_ADDR[3]), .ADDRARDADDR4(RD_ADDR[4]), 
+						.ADDRARDADDR5(RD_ADDR[5]), .ADDRARDADDR6(RD_ADDR[6]), .ADDRARDADDR7(RD_ADDR[7]), .ADDRARDADDR8(RD_ADDR[8]),  .ADDRARDADDR9(RD_ADDR[9]),
+						.ADDRARDADDR10(RD_ADDR[10]), .ADDRARDADDR11(RD_ADDR[11]), .ADDRARDADDR12(RD_ADDR[12]), .ADDRARDADDR13(RD_ADDR[13]), .ADDRARDADDR14(RD_ADDR[14]),
+						.DOADO0(out1[0]), .DOADO1(out1[1]), .DOADO2(out1[2]), .DOADO3(out1[3]), .DOADO4(out1[4]), .DOADO5(out1[5]), .DOADO6(out1[6]), .DOADO7(out1[7]), .DOADO8(out1[8]), .DOADO9(out1[9]),
+						.DOADO10(out1[10]), .DOADO11(out1[11]), .DOADO12(out1[12]), .DOADO13(out1[13]), .DOADO14(out1[14]), .DOADO15(out1[15]), .DOADO16(out1[16]), .DOADO17(out1[17]), .DOADO18(out1[18]), .DOADO19(out1[19]),
+						.DOADO20(out1[20]), .DOADO21(out1[21]), .DOADO22(out1[22]), .DOADO23(out1[23]), .DOADO24(out1[24]), .DOADO25(out1[25]), .DOADO26(out1[26]), .DOADO27(out1[27]), .DOADO28(out1[28]), .DOADO29(out1[29]),
+						.DOADO30(out1[30]), .DOADO31(out1[31]),
+						.DOPADOP0(out1[32]),  .DOPADOP1(out1[33]), .DOPADOP2(out1[34]), .DOPADOP3(out1[35]),
+						.DIADI0(in1[0]), .DIADI1(in1[1]), .DIADI2(in1[2]), .DIADI3(in1[3]), .DIADI4(in1[4]), .DIADI5(in1[5]), .DIADI6(in1[6]),  .DIADI7(in1[7]), .DIADI8(in1[8]), .DIADI9(in1[9]),
+						.DIADI10(in1[10]), .DIADI11(in1[11]), .DIADI12(in1[12]), .DIADI13(in1[13]), .DIADI14(in1[14]), .DIADI15(in1[15]), .DIADI16(in1[16]),  .DIADI17(in1[17]), .DIADI18(in1[18]), .DIADI19(in1[19]),
+						.DIADI20(in1[20]), .DIADI21(in1[21]), .DIADI22(in1[22]), .DIADI23(in1[23]), .DIADI24(in1[24]), .DIADI25(in1[25]), .DIADI26(in1[26]),  .DIADI27(in1[27]), .DIADI28(in1[28]), .DIADI29(in1[29]),
+						.DIADI30(in1[30]), .DIADI31(in1[31]), 
+						.DIPADIP0(in1[32]), .DIPADIP1(in1[33]), .DIPADIP2(in1[34]), .DIPADIP3(in1[35]),
+						.WEA0(WR_EN[0]), .WEA1(WR_EN[0]), .WEA2(WR_EN[0]),.WEA3(WR_EN[0]),
+						.CLKBWRCLK(RD_CLK[1]),
+						.ADDRBWRADDR0(addr2[0]), .ADDRBWRADDR1(addr2[1]), .ADDRBWRADDR2(addr2[2]), .ADDRBWRADDR3(addr2[3]), .ADDRBWRADDR4(addr2[4]),
+						.ADDRBWRADDR5(addr2[5]), .ADDRBWRADDR6(addr2[6]), .ADDRBWRADDR7(addr2[7]), .ADDRBWRADDR8(addr2[8]), .ADDRBWRADDR9(addr2[9]),
+						.ADDRBWRADDR10(addr2[10]), .ADDRBWRADDR11(addr2[11]), .ADDRBWRADDR12(addr2[12]), .ADDRBWRADDR13(addr2[13]), .ADDRBWRADDR14(addr2[14]),
+						.DOBDO0(out2[0]), .DOBDO1(out2[1]), .DOBDO2(out2[2]), .DOBDO3(out2[3]), .DOBDO4(out2[4]), .DOBDO5(out2[5]), .DOBDO6(out2[6]), .DOBDO7(out2[7]), .DOBDO8(out2[8]), .DOBDO9(out2[9]),
+						.DOBDO10(out2[10]), .DOBDO11(out2[11]), .DOBDO12(out2[12]), .DOBDO13(out2[13]), .DOBDO14(out2[14]), .DOBDO15(out2[15]), .DOBDO16(out2[16]), .DOBDO17(out2[17]), .DOBDO18(out2[18]), .DOBDO19(out2[19]),
+						.DOBDO20(out2[20]), .DOBDO21(out2[21]), .DOBDO22(out2[22]), .DOBDO23(out2[23]), .DOBDO24(out2[24]), .DOBDO25(out2[25]), .DOBDO26(out2[26]), .DOBDO27(out2[27]), .DOBDO28(out2[28]), .DOBDO29(out2[29]),
+						.DOBDO30(out2[30]), .DOBDO31(out2[31]),
+						.DOPBDOP0(out2[32]),  .DOPBDOP1(out2[33]), .DOPBDOP2(out2[34]), .DOPBDOP3(out2[35]),
+						.DIBDI0(in2[0]), .DIBDI1(in2[1]), .DIBDI2(in2[2]), .DIBDI3(in2[3]), .DIBDI4(in2[4]), .DIBDI5(in2[5]), .DIBDI6(in2[6]),  .DIBDI7(in2[7]), .DIBDI8(in2[8]), .DIBDI9(in2[9]),
+						.DIBDI10(in2[10]), .DIBDI11(in2[11]), .DIBDI12(in2[12]), .DIBDI13(in2[13]), .DIBDI14(in2[14]), .DIBDI15(in2[15]), .DIBDI16(in2[16]),  .DIBDI17(in2[17]), .DIBDI18(in2[18]), .DIBDI19(in2[19]),
+						.DIBDI20(in2[20]), .DIBDI21(in2[21]), .DIBDI22(in2[22]), .DIBDI23(in2[23]), .DIBDI24(in2[24]), .DIBDI25(in2[25]), .DIBDI26(in2[26]),  .DIBDI27(in2[27]), .DIBDI28(in2[28]), .DIBDI29(in2[29]),
+						.DIBDI30(in2[30]), .DIBDI31(in2[31]), 
+						.DIPBDIP0(in2[32]), .DIPBDIP1(in2[33]), .DIPBDIP2(in2[34]), .DIPBDIP3(in2[35]),
+						.WEBWE0(we2[0]), .WEBWE1(we2[1]), .WEBWE2(we2[2]), .WEBWE3(we2[3]), .WEBWE4(we2[4]), .WEBWE5(we2[5]), .WEBWE6(we2[6]), .WEBWE7(we2[7]) 
+					);
+				end
+			end
+		end
+	endgenerate
+endmodule
+
+module multiply(a, b, p);
+parameter A_WIDTH = 25;
+parameter B_WIDTH = 18;
+parameter Y_WIDTH = A_WIDTH+B_WIDTH;
+input [A_WIDTH-1:0] a;
+input [B_WIDTH-1:0] b;
+output [Y_WIDTH-1:0] p;
+
+DSP48E1 #(
+	.AREG(0), 
+	.BREG(0), 
+	.PREG(0),
+	.MREG(0),
+	.DREG(0),
+	.ADREG(0),
+	.ACASCREG(0),
+	.BCASCREG(0),
+	.USE_DPORT("FALSE"),
+	.USE_MULT("MULTIPLY")
+) 
+_TECHMAP_REPLACE_ 
+(
+	.CEA1(1'b0), .CEA2(1'b0), .CEB1(1'b0), .CEB2(1'b0), .CEM(1'b0), .CEP(1'b0),
+	// {X,Y} muxes from M
+	.OPMODE0 (1'b1), .OPMODE2 (1'b1),
+	.A0(a[ 0]), .A1(a[ 1]), .A2(a[ 2]), .A3(a[ 3]), .A4(a[ 4]), .A5(a[ 5]), .A6(a[ 6]), .A7(a[ 7]), .A8(a[ 8]), .A9(a[ 9]),
+	.A10(a[10]), .A11(a[11]), .A12(a[12]), .A13(a[13]), .A14(a[14]), .A15(a[15]), .A16(a[16]), .A17(a[17]), .A18(a[18]), .A19(a[19]), .A20(a[20]),
+	.A21(a[21]), .A22(a[22]), .A23(a[23]), .A24(a[24]),
+	.B0(b[ 0]), .B1(b[ 1]), .B2(b[ 2]), .B3(b[ 3]), .B4(b[ 4]), .B5(b[ 5]), .B6(b[ 6]), .B7(b[ 7]), .B8(b[ 8]), .B9(b[ 9]),
+	.B10(b[10]), .B11(b[11]), .B12(b[12]), .B13(b[13]), .B14(b[14]), .B15(b[15]),.B16(b[16]), .B17(b[17]),
+	.P0(p[ 0]), .P1(p[ 1]), .P2(p[ 2]), .P3(p[ 3]), .P4(p[ 4]), .P5(p[ 5]), .P6(p[ 6]), .P7(p[ 7]), .P8(p[ 8]), .P9(p[ 9]),
+	.P10(p[10]), .P11(p[11]), .P12(p[12]), .P13(p[13]), .P14(p[14]), .P15(p[15]), .P16(p[16]), .P17(p[17]), .P18(p[18]), .P19(p[19]),
+	.P20(p[20]), .P21(p[21]), .P22(p[22]), .P23(p[23]), .P24(p[24]), .P25(p[25]), .P26(p[26]), .P27(p[27]), .P28(p[28]), .P29(p[29]),
+	.P30(p[30]), .P31(p[31]), .P32(p[32]), .P33(p[33]), .P34(p[34]), .P35(p[35]), .P36(p[36]), .P37(p[37]), .P38(p[38]), .P39(p[39]),
+	.P40(p[40]), .P41(p[41]), .P42(p[42])
+);
+
+endmodule
+
+module xadder(a_xor_b, a_and_b, cin, cout, sumout);
+parameter _TECHMAP_CONSTMSK_cin_ = 0;
+parameter _TECHMAP_CONSTVAL_cin_ = 0;
+
+input a_xor_b, a_and_b, cin;
+output cout, sumout;
+
+wire [1023:0] _TECHMAP_DO_ = "proc; clean";
+// If cin is constant at 1'bx, then set it to 1'b0
+// (map errors out otherwise)
+wire cin0 = _TECHMAP_CONSTMSK_cin_ === 1'b1 && _TECHMAP_CONSTVAL_cin_ === 1'bx ? 1'b0 : cin;
+
+MUXCY _cy (.S(a_xor_b), .DI(a_and_b), .CI(cin0), .O(cout));
+XORCY _xor (.LI(a_xor_b), .CI(cin0), .O(sumout));
+
+endmodule
+
+module \$lut (A, Y);
+
+  parameter WIDTH = 0;
+  parameter LUT = 0;
+
+  input [WIDTH-1:0] A;
+  output Y;
+
+  generate
+    if (WIDTH == 8) begin:lut8
+      wire [6-1:0] _y;
+      (* U_SET="_TECHMAP_REPLACE_", RLOC="X0Y0", BEL="D6LUT" *)
+      LUT6 #(.INIT(LUT[1*(2**(WIDTH-2))-1:0*(2**(WIDTH-2))])) fpga_lut_lo_lo (.I0(A[0]), .I1(A[1]), .I2(A[2]), .I3(A[3]), .I4(A[4]), .I5(A[5]), .O(_y[0]));
+      (* U_SET="_TECHMAP_REPLACE_", RLOC="X0Y0", BEL="C6LUT" *)
+      LUT6 #(.INIT(LUT[2*(2**(WIDTH-2))-1:1*(2**(WIDTH-2))])) fpga_lut_lo_hi (.I0(A[0]), .I1(A[1]), .I2(A[2]), .I3(A[3]), .I4(A[4]), .I5(A[5]), .O(_y[1]));
+      (* U_SET="_TECHMAP_REPLACE_", RLOC="X0Y0", BEL="F7BMUX" *)
+      MUXF7 fpga_lut_muxf7_lo (.O(_y[4]), .I0(_y[0]), .I1(_y[1]), .S(A[WIDTH-2]));
+
+      (* U_SET="_TECHMAP_REPLACE_", RLOC="X0Y0", BEL="B6LUT" *)
+      LUT6 #(.INIT(LUT[3*(2**(WIDTH-2))-1:2*(2**(WIDTH-2))])) fpga_lut_hi_lo (.I0(A[0]), .I1(A[1]), .I2(A[2]), .I3(A[3]), .I4(A[4]), .I5(A[5]), .O(_y[2]));
+      (* U_SET="_TECHMAP_REPLACE_", RLOC="X0Y0", BEL="A6LUT" *)
+      LUT6 #(.INIT(LUT[4*(2**(WIDTH-2))-1:3*(2**(WIDTH-2))])) fpga_lut_hi_hi (.I0(A[0]), .I1(A[1]), .I2(A[2]), .I3(A[3]), .I4(A[4]), .I5(A[5]), .O(_y[3]));
+      (* U_SET="_TECHMAP_REPLACE_", RLOC="X0Y0", BEL="F7AMUX" *)
+      MUXF7 fpga_lut_muxf7_hi (.O(_y[5]), .I0(_y[2]), .I1(_y[3]), .S(A[WIDTH-2]));
+
+      (* U_SET="_TECHMAP_REPLACE_", RLOC="X0Y0" *)
+      MUXF8 fpga_lut_muxf8 (.O(Y), .I0(_y[4]), .I1(_y[5]), .S(A[WIDTH-1]));
+    end else
+    if (WIDTH == 7) begin:lut7
+      wire [2-1:0] _y;
+      (* U_SET="_TECHMAP_REPLACE_", RLOC="X0Y0" *)
+      LUT6 #(.INIT(LUT[1*(2**(WIDTH-1))-1:0*(2**(WIDTH-1))])) fpga_lut_lo (.I0(A[0]), .I1(A[1]), .I2(A[2]), .I3(A[3]), .I4(A[4]), .I5(A[5]), .O(_y[0]));
+      (* U_SET="_TECHMAP_REPLACE_", RLOC="X0Y0" *)
+      LUT6 #(.INIT(LUT[2*(2**(WIDTH-1))-1:1*(2**(WIDTH-1))])) fpga_lut_hi (.I0(A[0]), .I1(A[1]), .I2(A[2]), .I3(A[3]), .I4(A[4]), .I5(A[5]), .O(_y[1]));
+      (* U_SET="_TECHMAP_REPLACE_", RLOC="X0Y0" *)
+      MUXF7 fpga_lut_muxf7 (.O(Y), .I0(_y[0]), .I1(_y[1]), .S(A[WIDTH-1]));
+    end else begin
+      wire _TECHMAP_FAIL_ = 1;
+    end
+  endgenerate
+endmodule
+
+
+module bufgctrl(i, s, ce, ignore, o);
+input [1:0] i;
+input [1:0] s;
+input [1:0] ce;
+input [1:0] ignore;
+output o;
+
+BUFGCTRL _TECHMAP_REPLACE_ (.I0(i[0]), .I1(i[1]),
+	.S0(s[0]), .S1(s[1]),
+	.CE0(ce[0]), .CE1(ce[1]),
+	.IGNORE0(ignore[0]), .IGNORE1(ignore[1]),
+	.O(o));
+
+endmodule
diff --git vtr_flow/misc/yosys.ys vtr_flow/misc/yosys.ys
new file mode 100644
index 0000000..672db21
--- /dev/null
+++ vtr_flow/misc/yosys.ys
@@ -0,0 +1,77 @@
+# XXX is replaced with filename by run_vtr_flow.pl
+read_verilog -nolatches XXX 
+
+select -assert-any A:top
+select -clear
+
+# These commands follow the generic `synth'
+# command script inside Yosys
+# The -libdir argument allows Yosys to search the current 
+# directory for any definitions to modules it doesn't know
+# about, such as hand-instantiated (not inferred) memories
+hierarchy -check -libdir .
+proc
+
+# Check that there are no combinational loops
+scc -select
+select -assert-none %
+select -clear
+
+opt
+wreduce
+# Do not transform $add/$mul ops to $alu and $macc cells
+#alumacc
+share
+opt
+fsm
+opt -fast
+memory -nomap
+opt_clean
+# But instead of using the `memory_map' command, 
+# we map any memories, multipliers, and adders into 
+# VTR primitives (e.g. single_port_ram)
+opt -full
+
+# Transform all async FFs into synchronous ones
+techmap -map +/adff2dff.v
+# Map multipliers, DSPs, and add/subtracts according to yosys_models.v
+techmap -map yosys_models.v */t:$mul */t:$mem */t:$sub */t:$add
+# Transform regular adders into Xilinx specific xadders
+# (i.e. utilising MUXCY and XORCY)
+techmap -map adder2xadder.v */t:adder
+memory_map
+# Taking care to remove any undefined muxes that
+# are introduced to promote resource sharing
+opt -full
+# Then techmap all other `complex' blocks into basic
+# (lookup table) logic
+techmap 
+opt -fast
+
+flatten
+# Perform technology-mapping using ABC
+tee -o /dev/stderr abc -dff -script +source,-x,ABCSCRIPT
+techmap -map yosys_models.v */t:$lut 
+opt -fast
+
+# We read the definitions for all the VTR primitives
+# as blackboxes
+read_verilog -lib xadder.v
+read_verilog -lib multiply.v
+read_verilog -lib lut7.v
+read_verilog -lib lut8.v
+read_verilog -lib -ignore_redef single_port_ram.v
+read_verilog -lib -ignore_redef dual_port_ram.v
+read_verilog -lib -ignore_redef bufgctrl.v
+
+# Lastly, check the hierarchy for any unknown modules,
+# and purge all modules (including blackboxes) that
+# aren't used
+hierarchy -check -purge_lib
+tee -o /dev/stdout stat
+
+# Then write it out as a blif file, remembering to call
+# the internal `$true'/`$false' signals vcc/gnd, but
+# switch `-impltf' doesn't output them
+# ZZZ will be replaced by run_vtr_flow.pl
+write_blif -true - vcc -false - gnd -undef - unconn -blackbox ZZZ 
diff --git vtr_flow/misc/yosys_models.v vtr_flow/misc/yosys_models.v
new file mode 100644
index 0000000..10ed19c
--- /dev/null
+++ vtr_flow/misc/yosys_models.v
@@ -0,0 +1,640 @@
+`define MEM_MINWIDTH 1
+`define MEM_MAXADDR PPP
+`define MEM_MAXDATA 36
+
+`define DSP_A_MAXWIDTH 25
+`define DSP_B_MAXWIDTH 18
+
+`define ADDER_MINWIDTH AAA
+
+`define MAX(a,b) (a > b ? a : b)
+`define MIN(a,b) (a < b ? a : b)
+
+module \$mem (RD_CLK, RD_ADDR, RD_DATA, WR_CLK, WR_EN, WR_ADDR, WR_DATA);
+	parameter MEMID = "";
+	parameter SIZE = 256;
+	parameter OFFSET = 0;
+	parameter ABITS = 8;
+	parameter WIDTH = 8;
+	parameter INIT = 0;
+	
+	parameter RD_PORTS = 1;
+	parameter RD_CLK_ENABLE = 1'b1;
+	parameter RD_CLK_POLARITY = 1'b1;
+	parameter RD_TRANSPARENT = 1'b1;
+	
+	parameter WR_PORTS = 1;
+	parameter WR_CLK_ENABLE = 1'b1;
+	parameter WR_CLK_POLARITY = 1'b1;
+	
+	input [RD_PORTS-1:0] RD_CLK;
+	input [RD_PORTS*ABITS-1:0] RD_ADDR;
+	output reg [RD_PORTS*WIDTH-1:0] RD_DATA;
+	
+	input [WR_PORTS-1:0] WR_CLK;
+	input [WR_PORTS*ABITS-1:0] WR_ADDR;
+	input [WR_PORTS*WIDTH-1:0] WR_DATA, WR_EN;
+	
+	wire [1023:0] _TECHMAP_DO_ = "proc; clean";
+	
+	parameter _TECHMAP_CONNMAP_RD_CLK_ = 0;
+	parameter _TECHMAP_CONNMAP_WR_CLK_ = 0;
+	parameter _TECHMAP_CONNMAP_RD_ADDR_ = 0;
+	parameter _TECHMAP_CONNMAP_WR_ADDR_ = 0;
+	parameter _TECHMAP_CONNMAP_WR_EN_ = 0;
+	parameter _TECHMAP_BITS_CONNMAP_ = 0;
+	//parameter _TECHMAP_CONNMAP_RD_PORTS_ = 0;
+	//parameter _TECHMAP_CONNMAP_WR_PORTS_ = 0;
+	
+	reg _TECHMAP_FAIL_;
+	initial begin
+		_TECHMAP_FAIL_ <= 0;
+	
+		// only map cells with only one read and one write port
+		if (RD_PORTS > 2 || WR_PORTS > 2)
+			_TECHMAP_FAIL_ <= 1;
+	
+		// we expect positive read clock and non-transparent reads
+		if (RD_TRANSPARENT || !RD_CLK_ENABLE || !RD_CLK_POLARITY)
+			_TECHMAP_FAIL_ <= 1;
+	
+		// we expect positive write clock
+		if (!WR_CLK_ENABLE || !WR_CLK_POLARITY)
+			_TECHMAP_FAIL_ <= 1;
+	
+		// read and write must be in same clock domain
+		if (_TECHMAP_CONNMAP_RD_CLK_ != _TECHMAP_CONNMAP_WR_CLK_)
+			_TECHMAP_FAIL_ <= 1;
+	
+		// we don't do small memories or memories with offsets
+		if (OFFSET != 0 || ABITS < `MEM_MINWIDTH || SIZE < 2**`MEM_MINWIDTH)
+			_TECHMAP_FAIL_ <= 1;
+	
+	end
+
+	genvar i;
+	for (i = 0; i < `MAX(RD_PORTS, WR_PORTS); i = i+1) begin
+		initial begin
+			// check each pair of read and write port are the same
+			if (RD_PORTS >= i && WR_PORTS >= i) begin
+				if (_TECHMAP_CONNMAP_RD_ADDR_[ABITS*_TECHMAP_BITS_CONNMAP_*(i+1)-1:ABITS*_TECHMAP_BITS_CONNMAP_*i] != _TECHMAP_CONNMAP_WR_ADDR_[ABITS*_TECHMAP_BITS_CONNMAP_*(i+1)-1:ABITS*_TECHMAP_BITS_CONNMAP_*i])
+					_TECHMAP_FAIL_ <= 1;
+			end
+		end
+		// check all bits of write enable are the same
+		if (i < WR_PORTS) begin
+			genvar j;
+			for (j = 1; j < WIDTH; j = j+1) begin
+				initial begin
+					if (_TECHMAP_CONNMAP_WR_EN_[(WIDTH*i+j+1)*_TECHMAP_BITS_CONNMAP_-1:(WIDTH*i+j)*_TECHMAP_BITS_CONNMAP_] != _TECHMAP_CONNMAP_WR_EN_[(WIDTH*i+1)*_TECHMAP_BITS_CONNMAP_-1:(WIDTH*i)*_TECHMAP_BITS_CONNMAP_])
+						_TECHMAP_FAIL_ <= 1;
+				end
+			end
+		end
+	end
+
+	
+	\$__mem_gen #(
+		.MEMID(MEMID), .SIZE(SIZE), .OFFSET(OFFSET), .ABITS(ABITS), .WIDTH(WIDTH),
+		.RD_PORTS(RD_PORTS), .RD_CLK_ENABLE(RD_CLK_ENABLE), .RD_CLK_POLARITY(RD_CLK_POLARITY), .RD_TRANSPARENT(RD_TRANSPARENT),
+		.WR_PORTS(WR_PORTS), .WR_CLK_ENABLE(WR_CLK_ENABLE), .WR_CLK_POLARITY(WR_CLK_POLARITY)
+	) _TECHMAP_REPLACE_ (
+		.RD_CLK(RD_CLK),
+		.RD_ADDR(RD_ADDR),
+		.RD_DATA(RD_DATA),
+		.WR_CLK(WR_CLK),
+		.WR_EN(WR_EN),
+		.WR_ADDR(WR_ADDR),
+		.WR_DATA(WR_DATA)
+	);
+endmodule
+
+module \$__mem_gen (RD_CLK, RD_ADDR, RD_DATA, WR_CLK, WR_EN, WR_ADDR, WR_DATA);
+	parameter MEMID = "";
+	parameter SIZE = 256;
+	parameter OFFSET = 0;
+	parameter ABITS = 8;
+	parameter WIDTH = 8;
+	
+	parameter RD_PORTS = 1;
+	parameter RD_CLK_ENABLE = 1'b1;
+	parameter RD_CLK_POLARITY = 1'b1;
+	parameter RD_TRANSPARENT = 1'b1;
+	
+	parameter WR_PORTS = 1;
+	parameter WR_CLK_ENABLE = 1'b1;
+	parameter WR_CLK_POLARITY = 1'b1;
+	
+	input [RD_PORTS-1:0] RD_CLK;
+	input [RD_PORTS*ABITS-1:0] RD_ADDR;
+	output reg [RD_PORTS*WIDTH-1:0] RD_DATA;
+	
+	input [WR_PORTS-1:0] WR_CLK;
+	input [WR_PORTS*ABITS-1:0] WR_ADDR;
+	input [WR_PORTS*WIDTH-1:0] WR_DATA, WR_EN;
+
+	wire [1023:0] _TECHMAP_DO_ = "proc; clean";
+
+	genvar i;
+	generate
+		if (ABITS > `MEM_MAXADDR) begin
+			wire [WIDTH-1:0] rd_data_hi, rd_data_lo;
+			wire [(ABITS-1)*RD_PORTS-1:0] rd_addr_new;
+			for (i = 0; i < RD_PORTS; i = i+1) begin
+				assign rd_addr_new[(ABITS-1)*(i+1)-1:(ABITS-1)*i] = RD_ADDR[ABITS*(i+1)-2:ABITS*i];
+			end
+			wire [(ABITS-1)*WR_PORTS-1:0] wr_addr_new;
+			wire [WR_PORTS-1:0] wr_en_new;
+			for (i = 0; i < WR_PORTS; i = i+1) begin
+				assign wr_addr_new[(ABITS-1)*(i+1)-1:(ABITS-1)*i] = WR_ADDR[ABITS*(i+1)-2:ABITS*i];
+				assign wr_en_new[i] = WR_EN[i] & WR_ADDR[ABITS*(i+1)-1];
+			end
+
+			if (SIZE > 2**(ABITS-1)) begin
+				\$__mem_gen #(
+					.MEMID(MEMID), .SIZE(SIZE - 2**(ABITS-1)), .OFFSET(OFFSET), .ABITS(ABITS-1), .WIDTH(WIDTH),
+					.RD_PORTS(RD_PORTS), .RD_CLK_ENABLE(RD_CLK_ENABLE), .RD_CLK_POLARITY(RD_CLK_POLARITY), .RD_TRANSPARENT(RD_TRANSPARENT),
+					.WR_PORTS(WR_PORTS), .WR_CLK_ENABLE(WR_CLK_ENABLE), .WR_CLK_POLARITY(WR_CLK_POLARITY)
+				) mem_hi (
+					.RD_CLK(RD_CLK),
+					.RD_ADDR(rd_addr_new),
+					.RD_DATA(rd_data_hi),
+					.WR_CLK(WR_CLK),
+					.WR_EN(wr_en_new),
+					.WR_ADDR(wr_addr_new),
+					.WR_DATA(WR_DATA)
+				);
+			end 
+			else begin
+				assign rd_data_hi = {{WIDTH}{1'bx}};
+			end
+
+			\$__mem_gen #(
+				.MEMID(MEMID), .SIZE(SIZE > 2**(ABITS-1) ? 2**(ABITS-1) : SIZE), .OFFSET(OFFSET), .ABITS(ABITS-1), .WIDTH(WIDTH),
+				.RD_PORTS(RD_PORTS), .RD_CLK_ENABLE(RD_CLK_ENABLE), .RD_CLK_POLARITY(RD_CLK_POLARITY), .RD_TRANSPARENT(RD_TRANSPARENT),
+				.WR_PORTS(WR_PORTS), .WR_CLK_ENABLE(WR_CLK_ENABLE), .WR_CLK_POLARITY(WR_CLK_POLARITY)
+			) mem_lo (
+				.RD_CLK(RD_CLK),
+				.RD_ADDR(rd_addr_new),
+				.RD_DATA(rd_data_lo),
+				.WR_CLK(WR_CLK),
+				.WR_EN(wr_en_new),
+				.WR_ADDR(wr_addr_new),
+				.WR_DATA(WR_DATA)
+			);
+
+			reg [RD_PORTS-1:0] delayed_abit;
+			for (i = 0; i < RD_PORTS; i = i+1) begin
+				always @(posedge RD_CLK[i])
+					delayed_abit[i] <= RD_ADDR[ABITS*(i+1)-1];
+				assign RD_DATA[WIDTH*(i+1)-1:WIDTH*i] = delayed_abit[i] ? rd_data_hi : rd_data_lo;
+			end
+		end 
+		else begin
+			for (i = 0; i < WIDTH; i=i+1) begin:slice
+				if (RD_PORTS <= 1 && WR_PORTS <= 1) 
+					single_port_ram mem (
+						.clk(RD_CLK[0]),
+						.addr({ {{`MEM_MAXADDR-ABITS}{1'bx}}, RD_ADDR[ABITS-1:0] }),
+						.data(WR_DATA[i]),
+						.out(RD_DATA[i]),
+						.we(WR_EN[0])
+					);
+				else if (RD_PORTS <= 2 && WR_PORTS <= 2) 
+					dual_port_ram mem (
+						.clk(RD_CLK[0]),
+						.addr1({ {{`MEM_MAXADDR-ABITS}{1'bx}}, RD_ADDR[ABITS-1:0] }),
+						.data1(WR_DATA[i]),
+						.out1(RD_DATA[i]),
+						.we1(WR_EN[0]),
+						.addr2({ {{`MEM_MAXADDR-ABITS}{1'bx}}, RD_ADDR[2*ABITS-1:ABITS] }),
+						.data2(WR_DATA[WIDTH+i]),
+						.out2(RD_DATA[WIDTH+i]),
+						.we2(WR_EN[WIDTH])
+					);
+			end
+		end
+	endgenerate
+endmodule
+
+(* techmap_celltype = "$mul" *)
+module mul_swap_ports (A, B, Y);
+parameter A_SIGNED = 0;
+parameter B_SIGNED = 0;
+parameter A_WIDTH = 1;
+parameter B_WIDTH = 1;
+parameter Y_WIDTH = 1;
+
+input [A_WIDTH-1:0] A;
+input [B_WIDTH-1:0] B;
+output [Y_WIDTH-1:0] Y;
+
+wire _TECHMAP_FAIL_ = A_WIDTH <= B_WIDTH;
+
+\$mul #(
+	.A_SIGNED(B_SIGNED),
+	.B_SIGNED(A_SIGNED),
+	.A_WIDTH(B_WIDTH),
+	.B_WIDTH(A_WIDTH),
+	.Y_WIDTH(Y_WIDTH)
+) _TECHMAP_REPLACE_ (
+	.A(B),
+	.B(A),
+	.Y(Y)
+);
+
+endmodule
+
+module \$mul (A, B, Y);
+	parameter A_SIGNED = 0;
+	parameter B_SIGNED = 0;
+	parameter A_WIDTH = 1;
+	parameter B_WIDTH = 1;
+	parameter Y_WIDTH = 1;
+
+	input [A_WIDTH-1:0] A;
+	input [B_WIDTH-1:0] B;
+	output [Y_WIDTH-1:0] Y;
+
+	wire [1023:0] _TECHMAP_DO_ = "proc; clean";
+
+	reg _TECHMAP_FAIL_;
+	initial begin
+		_TECHMAP_FAIL_ <= 0;
+
+		//if (A_SIGNED || B_SIGNED)
+		//	_TECHMAP_FAIL_ <= 1;
+
+		if (A_WIDTH < B_WIDTH)
+			_TECHMAP_FAIL_ <= 1;
+	end
+
+	generate
+		\$__mul_gen #(
+			.A_SIGNED(A_SIGNED),
+			.B_SIGNED(B_SIGNED),
+			.A_WIDTH(A_WIDTH),
+			.B_WIDTH(B_WIDTH),
+			.Y_WIDTH(Y_WIDTH)
+		) mul_slice (
+			.A(A),
+			.B(B),
+			.Y(Y[Y_WIDTH-1:0])
+		);
+	endgenerate
+endmodule
+
+module \$__mul_gen (A, B, Y);
+	parameter A_SIGNED = 0;
+	parameter B_SIGNED = 0;
+	parameter A_WIDTH = 1;
+	parameter B_WIDTH = 1;
+	parameter Y_WIDTH = 1;
+
+	input [A_WIDTH-1:0] A;
+	input [B_WIDTH-1:0] B;
+	output [Y_WIDTH-1:0] Y;
+
+	wire [1023:0] _TECHMAP_DO_ = "proc; clean";
+
+	generate
+		if (A_WIDTH > `DSP_A_MAXWIDTH) begin
+			localparam n_floored = A_WIDTH/`DSP_A_MAXWIDTH;
+			localparam n = n_floored + (n_floored*`DSP_A_MAXWIDTH < A_WIDTH ? 1 : 0);
+			wire [`DSP_A_MAXWIDTH+B_WIDTH-1:0] partial [n-1:1];
+			wire [Y_WIDTH-1:0] partial_sum [n-2:0];
+
+			\$__mul_gen #(
+				.A_SIGNED(A_SIGNED),
+				.B_SIGNED(B_SIGNED),
+				.A_WIDTH(`DSP_A_MAXWIDTH),
+				.B_WIDTH(B_WIDTH),
+				.Y_WIDTH(Y_WIDTH)
+			) mul_slice_first (
+				.A(A[`DSP_A_MAXWIDTH-1:0]),
+				.B(B),
+				.Y(partial_sum[0])
+			);
+
+			genvar i;
+			generate
+			for (i = 1; i < n-1; i=i+1) begin:slice
+				\$__mul_gen #(
+					.A_SIGNED(A_SIGNED),
+					.B_SIGNED(B_SIGNED),
+					.A_WIDTH(`DSP_A_MAXWIDTH),
+					.B_WIDTH(B_WIDTH),
+					.Y_WIDTH(Y_WIDTH)
+				) mul_slice (
+					.A(A[(i+1)*`DSP_A_MAXWIDTH-1:i*`DSP_A_MAXWIDTH]),
+					.B(B),
+					.Y(partial[i])
+				);
+				//assign partial_sum[i] = (partial[i] << i*`DSP_A_MAXWIDTH) + partial_sum[i-1];
+				assign partial_sum[i] = {
+					partial[i][B_WIDTH+`DSP_A_MAXWIDTH-1:`DSP_A_MAXWIDTH],
+					partial[i][`DSP_A_MAXWIDTH-1:0] + partial_sum[i-1][B_WIDTH+(i*`DSP_A_MAXWIDTH)-1:B_WIDTH+((i-1)*`DSP_A_MAXWIDTH)],
+					partial_sum[i-1][B_WIDTH+((i-1)*`DSP_A_MAXWIDTH):0]
+				};
+			end
+			endgenerate
+
+			\$__mul_gen #(
+				.A_SIGNED(A_SIGNED),
+				.B_SIGNED(B_SIGNED),
+				.A_WIDTH(A_WIDTH-(n-1)*`DSP_A_MAXWIDTH),
+				.B_WIDTH(B_WIDTH),
+				.Y_WIDTH(Y_WIDTH)
+			) mul_slice_last (
+				.A(A[A_WIDTH-1:(n-1)*`DSP_A_MAXWIDTH]),
+				.B(B),
+				.Y(partial[n-1])
+			);
+			//assign Y = (partial[n-1] << (n-1)*`DSP_A_MAXWIDTH) + partial_sum[n-2];
+			assign Y = {
+				partial[n-1][B_WIDTH+`DSP_A_MAXWIDTH-1:`DSP_A_MAXWIDTH],
+				partial[n-1][`DSP_A_MAXWIDTH-1:0] + partial_sum[n-2][B_WIDTH+((n-1)*`DSP_A_MAXWIDTH)-1:B_WIDTH+((n-2)*`DSP_A_MAXWIDTH)],
+				partial_sum[n-2][B_WIDTH+((n-2)*`DSP_A_MAXWIDTH):0]
+			};
+		end
+		else if (B_WIDTH > `DSP_B_MAXWIDTH) begin
+			localparam n_floored = B_WIDTH/`DSP_B_MAXWIDTH;
+			localparam n = n_floored + (n_floored*`DSP_B_MAXWIDTH < B_WIDTH ? 1 : 0);
+			wire [A_WIDTH+`DSP_B_MAXWIDTH-1:0] partial [n-1:1];
+			wire [Y_WIDTH-1:0] partial_sum [n-2:0];
+
+			\$__mul_gen #(
+				.A_SIGNED(A_SIGNED),
+				.B_SIGNED(B_SIGNED),
+				.A_WIDTH(A_WIDTH),
+				.B_WIDTH(`DSP_B_MAXWIDTH),
+				.Y_WIDTH(Y_WIDTH)
+			) mul_first (
+				.A(A),
+				.B(B[`DSP_B_MAXWIDTH-1:0]),
+				.Y(partial_sum[0])
+			);
+
+			genvar i;
+			generate
+			for (i = 1; i < n-1; i=i+1) begin:slice
+				\$__mul_gen #(
+					.A_SIGNED(A_SIGNED),
+					.B_SIGNED(B_SIGNED),
+					.A_WIDTH(A_WIDTH),
+					.B_WIDTH(`DSP_B_MAXWIDTH),
+					.Y_WIDTH(Y_WIDTH)
+				) mul (
+					.A(A),
+					.B(B[(i+1)*`DSP_B_MAXWIDTH-1:i*`DSP_B_MAXWIDTH]),
+					.Y(partial[i])
+				);
+				//assign partial_sum[i] = (partial[i] << i*`DSP_B_MAXWIDTH) + partial_sum[i-1];
+				assign partial_sum[i] = {
+					partial[i][A_WIDTH+`DSP_B_MAXWIDTH-1:`DSP_B_MAXWIDTH],
+					partial[i][`DSP_B_MAXWIDTH-1:0] + partial_sum[i-1][A_WIDTH+(i*`DSP_B_MAXWIDTH)-1:A_WIDTH+((i-1)*`DSP_B_MAXWIDTH)],
+					partial_sum[i-1][A_WIDTH+((i-1)*`DSP_B_MAXWIDTH):0]
+				};
+			end
+			endgenerate
+
+			\$__mul_gen #(
+				.A_SIGNED(A_SIGNED),
+				.B_SIGNED(B_SIGNED),
+				.A_WIDTH(A_WIDTH),
+				.B_WIDTH(B_WIDTH-(n-1)*`DSP_B_MAXWIDTH),
+				.Y_WIDTH(Y_WIDTH)
+			) mul_last (
+				.A(A),
+				.B(B[B_WIDTH-1:(n-1)*`DSP_B_MAXWIDTH]),
+				.Y(partial[n-1])
+			);
+			//assign Y = (partial[n-1] << (n-1)*`DSP_B_MAXWIDTH) + partial_sum[n-2];
+			assign Y = {
+				partial[n-1][A_WIDTH+`DSP_B_MAXWIDTH-1:`DSP_B_MAXWIDTH],
+				partial[n-1][`DSP_B_MAXWIDTH-1:0] + partial_sum[n-2][A_WIDTH+((n-1)*`DSP_B_MAXWIDTH)-1:A_WIDTH+((n-2)*`DSP_B_MAXWIDTH)],
+				partial_sum[n-2][A_WIDTH+((n-2)*`DSP_B_MAXWIDTH):0]
+			};
+		end
+		else begin 
+			wire [A_WIDTH+B_WIDTH-1:0] out;
+			wire [(`DSP_A_MAXWIDTH+`DSP_B_MAXWIDTH)-(A_WIDTH+B_WIDTH)-1:0] dummy;
+			wire Asign, Bsign;
+			assign Asign = (A_SIGNED ? A[A_WIDTH-1] : 1'b0);
+			assign Bsign = (B_SIGNED ? B[B_WIDTH-1] : 1'b0);
+			multiply _TECHMAP_REPLACE_ (
+				.a({ {{`DSP_A_MAXWIDTH-A_WIDTH}{Asign}}, A }),
+				.b({ {{`DSP_B_MAXWIDTH-B_WIDTH}{Bsign}}, B }),
+				.p({dummy, out})
+			);
+			if (Y_WIDTH < A_WIDTH+B_WIDTH)
+				assign Y = out[Y_WIDTH-1:0];
+			else begin
+				wire Ysign = (A_SIGNED || B_SIGNED ? out[A_WIDTH+BWIDTH-1] : 1'b0);
+				assign Y = { {{Y_WIDTH-(A_WIDTH+B_WIDTH)}{Ysign}}, out[A_WIDTH+B_WIDTH-1:0] };
+			end
+		end
+	endgenerate
+endmodule
+
+//(* techmap_celltype = "$add" *)
+//module add_opt (A, B, Y);
+//	parameter A_SIGNED = 0;
+//	parameter A_WIDTH = 1;
+//	parameter B_SIGNED = 0;
+//	parameter B_WIDTH = 1;
+//	parameter Y_WIDTH = 1;
+//
+//	input [A_WIDTH-1:0] A;
+//	input [B_WIDTH-1:0] B;
+//	output [Y_WIDTH-1:0] Y;
+//
+//	parameter _TECHMAP_CONSTMSK_A_ = 0;
+//	parameter _TECHMAP_CONSTVAL_A_ = 0;
+//	parameter _TECHMAP_CONSTMSK_B_ = 0;
+//	parameter _TECHMAP_CONSTVAL_B_ = 0;
+//
+//	if (A_WIDTH > 1 && B_WIDTH > 1 && Y_WIDTH > 1) begin
+//		localparam azero = (_TECHMAP_CONSTMSK_A_[0] === 1'b1 && _TECHMAP_CONSTVAL_A_[0] !== 1'b1);
+//		localparam bzero = (_TECHMAP_CONSTMSK_B_[0] === 1'b1 && _TECHMAP_CONSTVAL_B_[0] !== 1'b1);
+//
+//		if (azero || bzero) begin
+//			if (azero)
+//				assign Y[0] = B[0];
+//			else if (bzero)
+//				assign Y[0] = A[0];
+//			\$add #(.A_SIGNED(A_SIGNED), .A_WIDTH(A_WIDTH-1),
+//				.B_SIGNED(B_SIGNED), .B_WIDTH(B_WIDTH-1),
+//				.Y_WIDTH(Y_WIDTH-1)
+//			) _TECHMAP_REPLACE_ (
+//				.A(A[A_WIDTH-1:1]), .B(B[B_WIDTH-1:1]), .Y(Y[Y_WIDTH-1:1])
+//			);
+//		end
+//		else begin
+//			wire _TECHMAP_FAIL_ = 1;
+//		end
+//	end
+//	else begin
+//		wire _TECHMAP_FAIL_ = 1;
+//	end
+//
+//endmodule
+
+module \$add (A, B, Y);
+	parameter A_SIGNED = 0;
+	parameter A_WIDTH = 1;
+	parameter B_SIGNED = 0;
+	parameter B_WIDTH = 1;
+	parameter Y_WIDTH = 1;
+	
+	input [A_WIDTH-1:0] A;
+	input [B_WIDTH-1:0] B;
+	output [Y_WIDTH-1:0] Y;
+	
+	wire [1023:0] _TECHMAP_DO_ = "proc; clean";
+
+	reg _TECHMAP_FAIL_;
+	initial begin
+		_TECHMAP_FAIL_ <= 0;
+
+		//if (A_SIGNED || B_SIGNED)
+		//	_TECHMAP_FAIL_ <= 1;
+		//if (A_WIDTH < 1 || B_WIDTH < 1)
+		//	_TECHMAP_FAIL_ <= 1;
+		if (Y_WIDTH < `ADDER_MINWIDTH)
+			_TECHMAP_FAIL_ <= 1;
+		if (A_WIDTH < `ADDER_MINWIDTH && B_WIDTH < `ADDER_MINWIDTH)
+			_TECHMAP_FAIL_ <= 1;
+	end
+
+	localparam maxab = `MAX(A_WIDTH, B_WIDTH);
+	localparam width = `MIN(Y_WIDTH, maxab+1);
+	
+	generate
+		wire [maxab-1:0] _a;
+		wire [maxab-1:0] _b;
+		wire [width-1:0] _y;
+		wire [width:0] _c;
+		wire [width:0] dummy;
+		wire Asign, Bsign;
+
+		assign Asign = (A_SIGNED ? A[A_WIDTH-1] : 1'b0);
+		assign Bsign = (B_SIGNED ? B[B_WIDTH-1] : 1'b0);
+		assign _a = { {{maxab}{Asign}}, A };
+		assign _b = { {{maxab}{Bsign}}, B };
+	
+		adder add_first (.a(_a[0]), .b(_b[0]), .cin(1'bx), .cout(_c[1]), .sumout(_y[0]));
+		genvar i;
+		for (i = 1; i < width; i=i+1) begin : slice
+			if (i === maxab)
+				adder add_last (.a(1'b0), .b(1'b0), .cin(_c[i]), .cout(dummy[i+1]), .sumout(_y[i]));
+			else 
+				adder add (.a(_a[i]), .b(_b[i]), .cin(_c[i]), .cout(_c[i+1]), .sumout(_y[i]));
+		end
+
+		if (Y_WIDTH < maxab+1)
+			assign Y = _y[Y_WIDTH-1:0];
+		else begin
+			wire Ysign = (A_SIGNED || B_SIGNED ? _y[Y_WIDTH-1] : 1'b0);
+			assign Y = { {{Y_WIDTH-(maxab+1)}{_y[maxab+1-1]}}, _y[maxab+1-1:0] };
+		end
+	endgenerate
+endmodule
+
+module \$sub (A, B, Y);
+	parameter A_SIGNED = 0;
+	parameter A_WIDTH = 1;
+	parameter B_SIGNED = 0;
+	parameter B_WIDTH = 1;
+	parameter Y_WIDTH = 1;
+	input [A_WIDTH-1:0] A;
+	input [B_WIDTH-1:0] B;
+	output [Y_WIDTH-1:0] Y;
+	
+	wire [1023:0] _TECHMAP_DO_ = "proc; clean";
+
+	reg _TECHMAP_FAIL_;
+	initial begin
+		_TECHMAP_FAIL_ <= 0;
+
+		//if (A_SIGNED || B_SIGNED)
+		//	_TECHMAP_FAIL_ <= 1;
+		if (A_WIDTH < 1 || B_WIDTH < 1)
+			_TECHMAP_FAIL_ <= 1;
+		if (Y_WIDTH < `ADDER_MINWIDTH)
+			_TECHMAP_FAIL_ <= 1;
+		if (A_WIDTH < `ADDER_MINWIDTH && B_WIDTH < `ADDER_MINWIDTH)
+			_TECHMAP_FAIL_ <= 1;
+	end
+
+	localparam maxab = `MAX(A_WIDTH, B_WIDTH);
+	localparam width = `MIN(Y_WIDTH, maxab+1);
+	
+	generate
+		wire [maxab-1:0] _a;
+		wire [maxab-1:0] _b;
+		wire [width-1:0] _y;
+		wire [width:0] _c;
+		wire [width:0] dummy;
+		wire Asign, Bsign;
+
+		assign Asign = (A_SIGNED ? A[A_WIDTH-1] : 1'b0);
+		assign Bsign = (B_SIGNED ? B[B_WIDTH-1] : 1'b0);
+		assign _a = { {{maxab}{Asign}}, A };
+		assign _b = { {{maxab}{Bsign}}, B };
+	
+		// VPR requires that the first element of a carry chain have cin = 1'bx
+		// Therefore use sub_init to generate cout = 1'b1 for the
+		// actual first stage
+		adder sub_init (.a(1'b1), .b(~1'b0), .cin(1'bx), .cout(_c[0]), .sumout(dummy[0]));
+		adder sub_first (.a(_a[0]), .b(~_b[0]), .cin(_c[0]), .cout(_c[1]), .sumout(_y[0]));
+		genvar i;
+		for (i = 1; i < width; i=i+1) begin : slice
+			if (i === maxab)
+				adder sub_last (.a(1'b0), .b(~1'b0), .cin(_c[i]), .cout(dummy[i+1]), .sumout(_y[i]));
+			else 
+				adder sub (.a(_a[i]), .b(~_b[i]), .cin(_c[i]), .cout(_c[i+1]), .sumout(_y[i]));
+		end
+
+		if (Y_WIDTH < maxab+1)
+			assign Y = _y[Y_WIDTH-1:0];
+		else begin
+			wire Ysign = (A_SIGNED || B_SIGNED ? _y[Y_WIDTH-1] : 1'b0);
+			assign Y = { {{Y_WIDTH-(maxab+1)}{_y[maxab+1-1]}}, _y[maxab+1-1:0] };
+		end	endgenerate
+endmodule
+
+(* techmap_celltype = "$lut" *)
+module lut78tolut6 (A, Y);
+
+  parameter WIDTH = 0;
+  parameter LUT = 0;
+
+  input [WIDTH-1:0] A;
+  output Y;
+
+  generate
+    if (WIDTH == 8) begin:lut8
+      //wire [6-1:0] _y;
+      //\$lut #(.WIDTH(WIDTH-2), .LUT(LUT[1*(2**(WIDTH-2))-1 -: 2**(WIDTH-2)])) lo_lo (.A(A[5:0]), .Y(_y[0]));
+      //\$lut #(.WIDTH(WIDTH-2), .LUT(LUT[2*(2**(WIDTH-2))-1 -: 2**(WIDTH-2)])) lo_hi (.A(A[5:0]), .Y(_y[1]));
+      //MUXF7 muxf7_lo (.O(_y[4]), .I0(_y[0]), .I1(_y[1]), .S(A[WIDTH-2]));
+
+      //\$lut #(.WIDTH(WIDTH-2), .LUT(LUT[3*(2**(WIDTH-2))-1 -: 2**(WIDTH-2)])) hi_lo (.A(A[5:0]), .Y(_y[2]));
+      //\$lut #(.WIDTH(WIDTH-2), .LUT(LUT[4*(2**(WIDTH-2))-1 -: 2**(WIDTH-2)])) hi_hi (.A(A[5:0]), .Y(_y[3]));
+      //MUXF7 muxf7_hi (.O(_y[5]), .I0(_y[2]), .I1(_y[3]), .S(A[WIDTH-2]));
+
+      //MUXF8 muxf8 (.O(Y), .I0(_y[4]), .I1(_y[5]), .S(A[WIDTH-1]));
+      lut8 f8 (.\A6-1 (A[5:0]), .\B6-1 (A[5:0]), .\C6-1 (A[5:0]), .\D6-1 (A[5:0]), .AX(A[6]), .BX(A[7]), .CX(A[6]), .F8(Y));
+    end else
+    if (WIDTH == 7) begin:lut7
+      //wire [2-1:0] _y;
+      //\$lut #(.WIDTH(WIDTH-1), .LUT(LUT[1*(2**(WIDTH-1))-1 -: 2**(WIDTH-1)])) lo (.A(A[5:0]), .Y(_y[0]));
+      //\$lut #(.WIDTH(WIDTH-1), .LUT(LUT[2*(2**(WIDTH-1))-1 -: 2**(WIDTH-1)])) hi (.A(A[5:0]), .Y(_y[1]));
+      //MUXF7 muxf7 (.O(Y), .I0(_y[0]), .I1(_y[1]), .S(A[WIDTH-1]));
+      lut7 f7 (.\A6-1 (A[5:0]), .\B6-1 (A[5:0]), .AX(A[6]), .F7(Y));
+    end else begin
+      wire _TECHMAP_FAIL_ = 1;
+    end
+  endgenerate
+endmodule
diff --git vtr_flow/misc/yosys_xilinx.ys vtr_flow/misc/yosys_xilinx.ys
new file mode 100644
index 0000000..33f2f7c
--- /dev/null
+++ vtr_flow/misc/yosys_xilinx.ys
@@ -0,0 +1,87 @@
+# XXX is replaced with filename by run_vtr_flow.pl
+read_verilog -nolatches XXX 
+
+select -assert-any A:top
+select -clear
+
+# These commands follow the generic `synth'
+# command script inside Yosys
+# The -libdir argument allows Yosys to search the current 
+# directory for any definitions to modules it doesn't know
+# about, such as hand-instantiated (not inferred) memories
+hierarchy -check -libdir .
+proc
+
+scc -select
+select -assert-none %
+select -clear
+
+opt
+wreduce
+# Do not transform $add/$mul ops to $alu and $macc cells
+#alumacc
+share
+opt
+fsm
+opt -fast
+memory -nomap
+opt_clean
+# But instead of using the `memory_map' command, 
+# we map any memories, multipliers, and adders into 
+# VTR primitives (e.g. single_port_ram)
+#flatten
+opt -full
+#wreduce
+
+#write_ilang pre_techmap.ilang
+techmap -share_map adff2dff.v
+# Map just the multipliers 
+# (define XILINX to prevent $add (used when
+# decomposing multipliers) from being mapped
+# into .subckt adder)
+techmap -map yosys_models.v */t:$mul */t:$add */t:$sub
+techmap -map adder2xadder.v */t:adder
+# Then re-map .subckt multiply into DSP48E1
+techmap -map yosys_models_xilinx.v */t:$mem */t:xadder */t:multiply */t:bufgctrl
+memory_map
+#write_ilang post_techmap_xilinx.ilang
+#freduce
+#clean
+# Taking care to remove any undefined muxes that
+# are introduced to promote resource sharing
+opt -full
+# Then techmap all other `complex' blocks into basic
+# (lookup table) logic
+techmap 
+opt -fast
+
+flatten
+#abc -exe ABCEXE -nocleanup -dff -lut 6 -script +source,abc.rc;,resyn;,resyn2;,if,-K,6;,time;,print_stats;
+#tee -o /dev/stderr abc -nocleanup -dff -lut 6 -script +source,abc.rc;,resyn;,resyn2;,if,-K,6;,time;,print_stats;
+#tee -o /dev/stderr abc -nocleanup -dff -lut 8 -script +source,abc.rc;,resyn;,resyn2;,if,-K,8;,time;,print_stats;
+#tee -o /dev/stderr abc -lut 6 -nocleanup -dff
+#tee -o /dev/stderr abc -nocleanup -dff -lut 6 -script +strash;,ifraig,-v;,retime,-v;,strash;,dch,-vf;,if,-v;,print_stats;
+#tee -o /dev/stderr abc -dff -lut 6 -script +read_lut,ABCLUT;,strash;,ifraig,-v;,retime,-v,-M,3,-f;,retime,-v,-M,4;,strash;,dch,-vf;,if,-v,-W,5,-C,1024;,print_stats;
+tee -o /dev/stderr abc -dff -lut LUTSIZE -script +source,-x,ABCSCRIPT
+opt -fast
+
+# Re-map LUT8/7s
+techmap -map yosys_models_xilinx.v */t:$lut
+techmap -share_map xilinx/cells_map.v
+clean
+
+select -set xilinx_clocks A:top/t:FDRE %x:+FDRE[C] A:top/t:FDRE %d
+iopadmap -inpad BUFGP O:I @xilinx_clocks
+
+select -set xilinx_nonclocks A:top/w:* A:top/t:BUFGP %x:+BUFGP[I] %d
+select -list @xilinx_nonclocks
+iopadmap -bits -outpad OBUF I:O -inpad IBUF O:I @xilinx_nonclocks
+
+# Lastly, check the hierarchy for any unknown modules,
+# and purge all modules (including blackboxes) that
+# aren't used
+#hierarchy -check -purge_lib
+tee -o /dev/stdout stat
+
+#write_ilang pre_edif.ilang
+write_edif ZZZ.edif
diff --git vtr_flow/scripts/File/Which.pm vtr_flow/scripts/File/Which.pm
new file mode 100644
index 0000000..2066181
--- /dev/null
+++ vtr_flow/scripts/File/Which.pm
@@ -0,0 +1,225 @@
+package File::Which;
+
+use strict;
+
+require Exporter;
+
+@File::Which::ISA       = qw(Exporter);
+
+@File::Which::EXPORT    = qw(which);
+@File::Which::EXPORT_OK = qw(where);
+
+$File::Which::VERSION = '0.05';
+
+use File::Spec;
+
+my $Is_VMS    = ($^O eq 'VMS');
+my $Is_MacOS  = ($^O eq 'MacOS');
+my $Is_DOSish = (($^O eq 'MSWin32') or
+                ($^O eq 'dos')     or
+                ($^O eq 'os2'));
+
+# For Win32 systems, stores the extensions used for
+# executable files
+# For others, the empty string is used
+# because 'perl' . '' eq 'perl' => easier
+my @path_ext = ('');
+if ($Is_DOSish) {
+    if ($ENV{PATHEXT} and $Is_DOSish) {    # WinNT. PATHEXT might be set on Cygwin, but not used.
+        push @path_ext, split ';', $ENV{PATHEXT};
+    }
+    else {
+        push @path_ext, qw(.com .exe .bat); # Win9X or other: doesn't have PATHEXT, so needs hardcoded.
+    }
+}
+elsif ($Is_VMS) { 
+    push @path_ext, qw(.exe .com);
+}
+
+sub which {
+    my ($exec) = @_;
+
+    return undef unless $exec;
+
+    my $all = wantarray;
+    my @results = ();
+    
+    # check for aliases first
+    if ($Is_VMS) {
+        my $symbol = `SHOW SYMBOL $exec`;
+        chomp($symbol);
+        if (!$?) {
+            return $symbol unless $all;
+            push @results, $symbol;
+        }
+    }
+    if ($Is_MacOS) {
+        my @aliases = split /\,/, $ENV{Aliases};
+        foreach my $alias (@aliases) {
+            # This has not been tested!!
+            # PPT which says MPW-Perl cannot resolve `Alias $alias`,
+            # let's just hope it's fixed
+            if (lc($alias) eq lc($exec)) {
+                chomp(my $file = `Alias $alias`);
+                last unless $file;  # if it failed, just go on the normal way
+                return $file unless $all;
+                push @results, $file;
+                # we can stop this loop as if it finds more aliases matching,
+                # it'll just be the same result anyway
+                last;
+            }
+        }
+    }
+
+    my @path = File::Spec->path();
+    unshift @path, File::Spec->curdir if $Is_DOSish or $Is_VMS or $Is_MacOS;
+
+    for my $base (map { File::Spec->catfile($_, $exec) } @path) {
+       for my $ext (@path_ext) {
+            my $file = $base.$ext;
+# print STDERR "$file\n";
+
+            if ((-x $file or    # executable, normal case
+                 ($Is_MacOS ||  # MacOS doesn't mark as executable so we check -e
+                  ($Is_DOSish and grep { $file =~ /$_$/i } @path_ext[1..$#path_ext])
+                                # DOSish systems don't pass -x on non-exe/bat/com files.
+                                # so we check -e. However, we don't want to pass -e on files
+                                # that aren't in PATHEXT, like README.
+                 and -e _)
+                ) and !-d _)
+            {                   # and finally, we don't want dirs to pass (as they are -x)
+
+# print STDERR "-x: ", -x $file, " -e: ", -e _, " -d: ", -d _, "\n";
+
+                    return $file unless $all;
+                    push @results, $file;       # Make list to return later
+            }
+        }
+    }
+    
+    if($all) {
+        return @results;
+    } else {
+        return undef;
+    }
+}
+
+sub where {
+    my @res = which($_[0]); # force wantarray
+    return @res;
+}
+
+1;
+__END__
+
+=head1 NAME
+
+File::Which - Portable implementation of the `which' utility
+
+=head1 SYNOPSIS
+
+  use File::Which;                  # exports which()
+  use File::Which qw(which where);  # exports which() and where()
+  
+  my $exe_path = which('perldoc');
+  
+  my @paths = where('perl');
+  - Or -
+  my @paths = which('perl'); # an array forces search for all of them
+
+=head1 DESCRIPTION
+
+C<File::Which> was created to be able to get the paths to executable programs
+on systems under which the `which' program wasn't implemented in the shell.
+
+C<File::Which> searches the directories of the user's C<PATH> (as returned by
+C<File::Spec-E<gt>path()>), looking for executable files having the name specified
+as a parameter to C<which()>. Under Win32 systems, which do not have a notion of
+directly executable files, but uses special extensions such as C<.exe> and
+C<.bat> to identify them, C<File::Which> takes extra steps to assure that you
+will find the correct file (so for example, you might be searching for C<perl>,
+it'll try C<perl.exe>, C<perl.bat>, etc.)
+
+=head1 Steps Used on Win32, DOS, OS2 and VMS
+
+=head2 Windows NT
+
+Windows NT has a special environment variable called C<PATHEXT>, which is used
+by the shell to look for executable files. Usually, it will contain a list in
+the form C<.EXE;.BAT;.COM;.JS;.VBS> etc. If C<File::Which> finds such an
+environment variable, it parses the list and uses it as the different extensions.
+
+=head2 Windows 9x and other ancient Win/DOS/OS2
+
+This set of operating systems don't have the C<PATHEXT> variable, and usually
+you will find executable files there with the extensions C<.exe>, C<.bat> and
+(less likely) C<.com>. C<File::Which> uses this hardcoded list if it's running
+under Win32 but does not find a C<PATHEXT> variable.
+
+=head2 VMS
+
+Same case as Windows 9x: uses C<.exe> and C<.com> (in that order).
+
+=head1 Functions
+
+=head2 which($short_exe_name)
+
+Exported by default.
+
+C<$short_exe_name> is the name used in the shell to call the program (for
+example, C<perl>).
+
+If it finds an executable with the name you specified, C<which()> will return
+the absolute path leading to this executable (for example, C</usr/bin/perl> or
+C<C:\Perl\Bin\perl.exe>).
+
+If it does I<not> find the executable, it returns C<undef>.
+
+If C<which()> is called in list context, it will return I<all> the
+matches.
+
+=head2 where($short_exe_name)
+
+Not exported by default.
+
+Same as C<which($short_exe_name)> in array context. Same as the
+C<`where'> utility, will return an array containing all the path names
+matching C<$short_exe_name>.
+
+
+=head1 Bugs and Caveats
+
+Not tested on VMS or MacOS, although there is platform specific code
+for those. Anyone who haves a second would be very kind to send me a
+report of how it went.
+
+File::Spec adds the current directory to the front of PATH if on
+Win32, VMS or MacOS. I have no knowledge of those so don't know if the
+current directory is searced first or not. Could someone please tell
+me?
+
+=head1 Author
+
+Per Einar Ellefsen, E<lt>per.einar (at) skynet.beE<gt>
+
+Originated in I<modperl-2.0/lib/Apache/Build.pm>. Changed for use in DocSet
+(for the mod_perl site) and Win32-awareness by me, with slight modifications
+by Stas Bekman, then extracted to create C<File::Which>.
+
+Version 0.04 had some significant platform-related changes, taken from
+the Perl Power Tools C<`which'> implementation by Abigail with
+enhancements from Peter Prymmer. See
+http://www.perl.com/language/ppt/src/which/index.html for more
+information.
+
+=head1 License
+
+This library is free software; you can redistribute it and/or modify it under
+the same terms as Perl itself.
+
+=head1 See Also
+
+L<File::Spec>, L<which(1)>, Perl Power Tools:
+http://www.perl.com/language/ppt/index.html .
+
+=cut
diff --git vtr_flow/scripts/run_vtr_flow.pl vtr_flow/scripts/run_vtr_flow.pl
index a10c60d..0f7112c 100755
--- vtr_flow/scripts/run_vtr_flow.pl
+++ vtr_flow/scripts/run_vtr_flow.pl
@@ -28,6 +28,13 @@ use File::Spec;
 use POSIX;
 use File::Copy;
 use FindBin;
+use File::Which;
+use File::Basename;
+use Config;
+
+
+use Carp;
+$SIG{ __DIE__ } = sub { Carp::confess( @_ ) };
 
 use lib "$FindBin::Bin/perl_libs/XML-TreePP-0.41/lib";
 use XML::TreePP;
@@ -53,34 +60,44 @@ sub file_find_and_replace;
 sub xml_find_LUT_Kvalue;
 sub xml_find_mem_size;
 
-my $temp_dir = "./temp";
+my $temp_dir = "";
 
-my $stage_idx_odin   = 1;
-my $stage_idx_abc    = 2;
-my $stage_idx_ace    = 3;
-my $stage_idx_prevpr = 4;
-my $stage_idx_vpr    = 5;
+my $stage_idx_odin      = 1;
+my $stage_idx_abc       = 2;
+my $stage_idx_ace       = 3;
+my $stage_idx_prevpr    = 4;
+my $stage_idx_vpr       = 5;
+my $stage_idx_bitstream = 6;
 
 my $circuit_file_path      = expand_user_path( shift(@ARGV) );
 my $architecture_file_path = expand_user_path( shift(@ARGV) );
-my $sdc_file_path;
+my $sdc_file_path = "\"\"";
 
 my $token;
 my $ext;
 my $starting_stage          = stage_index("odin");
-my $ending_stage            = stage_index("vpr");
-my $keep_intermediate_files = 0;
+my $ending_stage            = stage_index("bitstream");
+my $keep_intermediate_files = 1;
 my $has_memory              = 1;
 my $timing_driven           = "on";
-my $min_chan_width          = -1; 
+my $min_chan_width          = 18; 
 my $lut_size                = -1;
 my $vpr_cluster_seed_type   = "";
 my $tech_file               = "";
 my $do_power                = 0;
 my $check_equivalent		= "off";
 my $gen_postsynthesis_netlist 	= "off";
-my $seed					= 1;
-my $min_hard_adder_size		= 1;
+my $seed			= 1;
+my $min_hard_adder_size		= 4;
+my @vpr_options             = qw(--allow_unrelated_clustering off);
+my $vpr_fix_pins            = "random";
+my $yosys_script            = "";
+my $yosys_script_default    = "yosys.ys";
+my $yosys_models            = "";
+my $yosys_models_default    = "yosys_models.v";
+my $yosys_abc_script        = "";
+my $yosys_abc_script_default = "abc_vtr.rc";
+my $abc_lut_file            = "abc_lut6.lut";
 
 while ( $token = shift(@ARGV) ) {
 	if ( $token eq "-sdc_file" ) {
@@ -131,6 +148,27 @@ while ( $token = shift(@ARGV) ) {
 	elsif ( $token eq "-min_hard_adder_size" ) {
 		$min_hard_adder_size = shift(@ARGV);
 	}
+	elsif ( $token eq "-yosys" ) {
+		$yosys_script = $yosys_script_default;
+	}
+	elsif ( $token eq "-yosys_script" ) {
+		$yosys_script = shift(@ARGV);
+	}
+	elsif ( $token eq "-yosys_models" ) {
+		$yosys_models = shift(@ARGV);
+	}
+	elsif ( $token eq "-yosys_abc_script" ) {
+		$yosys_abc_script = shift(@ARGV);
+	}
+	elsif ( $token eq "-abc_lut" ) {
+		$abc_lut_file = shift(@ARGV);
+	}
+	elsif ( $token eq "-vpr_options" ) {
+		push(@vpr_options, split(' ', shift(@ARGV)));
+	}
+	elsif ($token eq "-vpr_fix_pins") {
+		$vpr_fix_pins = shift(@ARGV);
+	}
 	else {
 		die "Error: Invalid argument ($token)\n";
 	}
@@ -163,8 +201,17 @@ if ( $vpr_cluster_seed_type eq "" ) {
 	}
 }
 
+# Test for file existance
+( -f $circuit_file_path )
+  or die "Circuit file not found ($circuit_file_path)";
+( -f $architecture_file_path )
+  or die "Architecture file not found ($architecture_file_path)";
+
+if ( $temp_dir eq "" ) {
+	$temp_dir = basename($architecture_file_path,".xml")."/".basename($circuit_file_path,".v");
+}
 if ( !-d $temp_dir ) {
-	system "mkdir $temp_dir";
+	system "mkdir -p $temp_dir";
 }
 -d $temp_dir or die "Could not make temporary directory ($temp_dir)\n";
 if ( !( $temp_dir =~ /.*\/$/ ) ) {
@@ -181,11 +228,6 @@ my $arch_param;
 my $cluster_size;
 my $inputs_per_cluster = -1;
 
-# Test for file existance
-( -f $circuit_file_path )
-  or die "Circuit file not found ($circuit_file_path)";
-( -f $architecture_file_path )
-  or die "Architecture file not found ($architecture_file_path)";
 
 if ( !-e $sdc_file_path ) {
 	# open( OUTPUT_FILE, ">$sdc_file_path" ); 
@@ -198,41 +240,112 @@ if ( $stage_idx_vpr >= $starting_stage and $stage_idx_vpr <= $ending_stage ) {
 	$vpr_path = "$vtr_flow_path/../vpr/vpr";
 	( -r $vpr_path or -r "${vpr_path}.exe" )
 	  or die "Cannot find vpr exectuable ($vpr_path)";
+
+  	if ($vpr_fix_pins ne "random") {
+		( -r $vpr_fix_pins ) or die "Cannot find $vpr_fix_pins!";
+		copy($vpr_fix_pins, $temp_dir);
+		$vpr_fix_pins = basename($vpr_fix_pins);
+	}
 }
 
 my $odin2_path;
 my $odin_config_file_name;
 my $odin_config_file_path;
+my $yosys_path;
+my $yosys_config_file_name;
+my $yosys_config_file_path;
+my $yosys_abc_script_file_path;
+
+my $models_file_path_default;
+my $models_file_path;
+my $abc_rc_path;
+my $yosys_abc_script_path;
+
 if (    $stage_idx_odin >= $starting_stage
 	and $stage_idx_odin <= $ending_stage )
 {
-	$odin2_path = "$vtr_flow_path/../ODIN_II/odin_II.exe";
-	( -e $odin2_path )
-	  or die "Cannot find ODIN_II executable ($odin2_path)";
+	if ($yosys_script eq "") {
+		$odin2_path = "$vtr_flow_path/../ODIN_II/odin_II.exe";
+		( -e $odin2_path )
+			or die "Cannot find ODIN_II executable ($odin2_path)";
+
+		$odin_config_file_name = "basic_odin_config_split.xml";
 
-	$odin_config_file_name = "basic_odin_config_split.xml";
+		$odin_config_file_path = "$vtr_flow_path/misc/$odin_config_file_name";
+		( -e $odin_config_file_path )
+			or die "Cannot find ODIN config template ($odin_config_file_path)";
 
-	$odin_config_file_path = "$vtr_flow_path/misc/$odin_config_file_name";
-	( -e $odin_config_file_path )
-	  or die "Cannot find ODIN config template ($odin_config_file_path)";
+		$odin_config_file_name = "odin_config.xml";
+		my $odin_config_file_path_new = "$temp_dir" . "odin_config.xml";
+		copy( $odin_config_file_path, $odin_config_file_path_new );
+		$odin_config_file_path = $odin_config_file_path_new;
+	}
+	else
+	{
+		$yosys_path = "$vtr_flow_path/../yosys/yosys";
+		( -e $yosys_path )
+			or die "Cannot find Yosys executable ($yosys_path)";
+
+		$yosys_config_file_name = $yosys_script;
+		$yosys_config_file_path = "$vtr_flow_path/misc/$yosys_config_file_name";
+		( -e $yosys_config_file_path )
+			or die "Cannot find Yosys script ($yosys_config_file_path)";
+
+		my $yosys_config_file_path_new = "$temp_dir" . "$yosys_config_file_name";
+		copy( $yosys_config_file_path, $yosys_config_file_path_new );
+		$yosys_config_file_path = $yosys_config_file_path_new;
+
+		my $tech_file_name;
+		$tech_file_name = "single_port_ram.v";
+		copy( "$vtr_flow_path/misc/$tech_file_name", "$temp_dir"."$tech_file_name" );
+		$tech_file_name = "dual_port_ram.v";
+		copy( "$vtr_flow_path/misc/$tech_file_name", "$temp_dir"."$tech_file_name" );
+		$tech_file_name = "adder.v";
+		copy( "$vtr_flow_path/misc/$tech_file_name", "$temp_dir"."$tech_file_name" );
+		$tech_file_name = "multiply.v";
+		copy( "$vtr_flow_path/misc/$tech_file_name", "$temp_dir"."$tech_file_name" );
+		$tech_file_name = "lut7.v";
+		copy( "$vtr_flow_path/misc/$tech_file_name", "$temp_dir"."$tech_file_name" );
+		$tech_file_name = "lut8.v";
+		copy( "$vtr_flow_path/misc/$tech_file_name", "$temp_dir"."$tech_file_name" );
+		$tech_file_name = "xadder.v";
+		copy( "$vtr_flow_path/misc/$tech_file_name", "$temp_dir"."$tech_file_name" );
+		$tech_file_name = "bufgctrl.v";
+		copy( "$vtr_flow_path/misc/$tech_file_name", "$temp_dir"."$tech_file_name" );
+		$tech_file_name = "adder2xadder.v";
+		copy( "$vtr_flow_path/misc/$tech_file_name", "$temp_dir"."$tech_file_name" );
+
+		my $models_file_name = $yosys_models_default;
+		$models_file_path_default = "$temp_dir"."$models_file_name";
+		copy( "$vtr_flow_path/misc/$models_file_name", "$models_file_path_default" );
+
+		$models_file_name = $yosys_models;
+		if ($models_file_name ne "") {
+			$models_file_path = "$temp_dir"."$models_file_name";
+			copy( "$vtr_flow_path/misc/$models_file_name", "$models_file_path" );
+		}
 
-	$odin_config_file_name = "odin_config.xml";
-	my $odin_config_file_path_new = "$temp_dir" . "odin_config.xml";
-	copy( $odin_config_file_path, $odin_config_file_path_new );
-	$odin_config_file_path = $odin_config_file_path_new;
+		if ($yosys_abc_script eq "") { 
+			$yosys_abc_script = $yosys_abc_script_default;
+		}
+		$yosys_abc_script_path = "$temp_dir"."$yosys_abc_script";
+		copy( "$vtr_flow_path/misc/$yosys_abc_script", $yosys_abc_script_path );
+	}
 }
 
 my $abc_path;
-my $abc_rc_path;
+$abc_rc_path = "$vtr_flow_path/../abc_with_bb_support/abc.rc";
+( -e $abc_rc_path ) or die "Cannot find ABC RC file ($abc_rc_path)";
+copy( $abc_rc_path, $temp_dir );
+
+my $abc_lut_path = "$vtr_flow_path/misc/$abc_lut_file";
+( -e $abc_lut_path ) or die "Cannot find ABC LUT file ($abc_lut_path)";
+copy( $abc_lut_path, $temp_dir );
+
+$abc_path = "$vtr_flow_path/../abc_with_bb_support/abc";
 if ( $stage_idx_abc >= $starting_stage and $stage_idx_abc <= $ending_stage ) {
-	$abc_path = "$vtr_flow_path/../abc_with_bb_support/abc";
 	( -e $abc_path or -e "${abc_path}.exe" )
 	  or die "Cannot find ABC executable ($abc_path)";
-
-	$abc_rc_path = "$vtr_flow_path/../abc_with_bb_support/abc.rc";
-	( -e $abc_rc_path ) or die "Cannot find ABC RC file ($abc_rc_path)";
-
-	copy( $abc_rc_path, $temp_dir );
 }
 
 my $ace_path;
@@ -242,6 +355,20 @@ if ( $stage_idx_ace >= $starting_stage and $stage_idx_ace <= $ending_stage and $
 	  or die "Cannot find ACE executable ($ace_path)";
 }
 
+
+my $bitstream_path = "$vtr_flow_path/../bnpr2xdl/bnpr2xdl";
+my ($xdl_path, $par_path, $trce_path, $bitgen_path);
+my $arch = basename($architecture_file_path,".xml");
+if ( $stage_idx_bitstream >= $starting_stage and $stage_idx_bitstream <= $ending_stage ) {
+	(-e $bitstream_path) or die "Warning: Cannot find $bitstream_path. Please run \"make\" again.";
+
+	$xdl_path = which("xdl") or die "Cannot find xdl exectuable on \$PATH\n";
+
+	$trce_path = which("trce") or die "Cannot find trce exectuable on \$PATH\n";
+
+	$bitgen_path = which("bitgen") or die "Cannot find bitgen exectuable on \$PATH\n";
+}
+
 # Get circuit name (everything up to the first '.' in the circuit file)
 my ( $vol, $path, $circuit_file_name ) =
   File::Spec->splitpath($circuit_file_path);
@@ -254,7 +381,7 @@ my $architecture_file_name = $1;
 
 $architecture_file_name =~ m/(.*).xml$/;
 my $architecture_name = $1;
-print "$architecture_name/$benchmark_name...";
+print "$architecture_name/$benchmark_name...\n";
 
 # Get Memory Size
 my $mem_size = -1;
@@ -267,14 +394,19 @@ my $tpp      = XML::TreePP->new();
 my $xml_tree = $tpp->parsefile($architecture_file_path);
 
 # Get lut size
-my $lut_size = xml_find_LUT_Kvalue($xml_tree);
 if ( $lut_size < 1 ) {
-	print "failed: cannot determine arch LUT k-value";
-	$error_code = 1;
+	$lut_size = xml_find_LUT_Kvalue($xml_tree);
+	if ( $lut_size < 1 ) {
+		print "failed: cannot determine arch LUT k-value";
+		$error_code = 1;
+	}
 }
+print "LUT size: $lut_size\n";
 
 # Get memory size
 $mem_size = xml_find_mem_size($xml_tree);
+print "MEM size: $mem_size\n";
+print "Min Hard Adder size: $min_hard_adder_size\n";
 
 my $odin_output_file_name =
   "$benchmark_name" . file_ext_for_stage($stage_idx_odin);
@@ -305,10 +437,11 @@ my $vpr_route_output_file_path = "$temp_dir$vpr_route_output_file_name";
 
 my $architecture_file_path_new = "$temp_dir$architecture_file_name";
 copy( $architecture_file_path, $architecture_file_path_new );
+my $architecture_file_path_orig = $architecture_file_path;
 $architecture_file_path = $architecture_file_path_new;
 
 my $circuit_file_path_new =
-  "$temp_dir$benchmark_name" . file_ext_for_stage( $starting_stage - 1 );
+  "$temp_dir$benchmark_name" . file_ext_for_stage(0);
 copy( $circuit_file_path, $circuit_file_path_new );
 $circuit_file_path = $circuit_file_path_new;
 
@@ -322,35 +455,74 @@ my $q         = "not_run";
 
 if ( $starting_stage <= $stage_idx_odin and !$error_code ) {
 
-	#system "sed 's/XXX/$benchmark_name.v/g' < $odin2_base_config > temp1.xml";
-	#system "sed 's/YYY/$arch_name/g' < temp1.xml > temp2.xml";
-	#system "sed 's/ZZZ/$odin_output_file_path/g' < temp2.xml > temp3.xml";
-	#system "sed 's/PPP/$mem_size/g' < temp3.xml > circuit_config.xml";
-
-	file_find_and_replace( $odin_config_file_path, "XXX", $circuit_file_name );
-	file_find_and_replace( $odin_config_file_path, "YYY",
-		$architecture_file_name );
-	file_find_and_replace( $odin_config_file_path, "ZZZ",
-		$odin_output_file_name );
-	file_find_and_replace( $odin_config_file_path, "PPP", $mem_size );
-	file_find_and_replace( $odin_config_file_path, "AAA", $min_hard_adder_size );
-
-	if ( !$error_code ) {
-		$q =
-		  &system_with_timeout( "$odin2_path", "odin.out", $timeout, $temp_dir,
-			"-c", $odin_config_file_name );
-
-		if ( -e $odin_output_file_path ) {
-			if ( !$keep_intermediate_files ) {
-				system "rm -f ${temp_dir}*.dot";
-				system "rm -f ${temp_dir}*.v";
-				system "rm -f $odin_config_file_path";
+	unlink "$odin_output_file_path";
+	if ($yosys_script eq "") {
+		#system "sed 's/XXX/$benchmark_name.v/g' < $odin2_base_config > temp1.xml";
+		#system "sed 's/YYY/$arch_name/g' < temp1.xml > temp2.xml";
+		#system "sed 's/ZZZ/$odin_output_file_path/g' < temp2.xml > temp3.xml";
+		#system "sed 's/PPP/$mem_size/g' < temp3.xml > circuit_config.xml";
+
+		file_find_and_replace( $odin_config_file_path, "XXX", $circuit_file_name );
+		file_find_and_replace( $odin_config_file_path, "YYY",
+			$architecture_file_name );
+		file_find_and_replace( $odin_config_file_path, "ZZZ",
+			$odin_output_file_name );
+		file_find_and_replace( $odin_config_file_path, "PPP", $mem_size );
+		file_find_and_replace( $odin_config_file_path, "AAA", $min_hard_adder_size );
+
+		if ( !$error_code ) {
+			$q =
+			&system_with_timeout( "$odin2_path", "odin.out", $timeout, $temp_dir,
+				"-c", $odin_config_file_name );
+
+			if ( -e $odin_output_file_path ) {
+				if ( !$keep_intermediate_files ) {
+					system "rm -f ${temp_dir}*.dot";
+					system "rm -f ${temp_dir}*.v";
+					system "rm -f $odin_config_file_path";
+				}
+			}
+			else {
+				print "failed: odin";
+				$error_code = 1;
 			}
 		}
-		else {
-			print "failed: odin";
-			$error_code = 1;
+	}
+	else {
+		file_find_and_replace( $yosys_config_file_path, "XXX", $circuit_file_name );
+		file_find_and_replace( $yosys_config_file_path, "ZZZ",
+			$odin_output_file_name );
+		#file_find_and_replace( $yosys_config_file_path, "LUTSIZE", $lut_size );
+		file_find_and_replace( $yosys_config_file_path, "ABCEXE", $abc_path );
+		file_find_and_replace( $yosys_config_file_path, "ABCSCRIPT", $yosys_abc_script );
+
+		file_find_and_replace( $yosys_abc_script_path, "ABCLUT", $abc_lut_file );
+
+		file_find_and_replace( $models_file_path_default, "PPP", $mem_size );
+		file_find_and_replace( $models_file_path_default, "AAA", $min_hard_adder_size );
+		if ($models_file_path ne "") {
+			file_find_and_replace( $models_file_path, "PPP", $mem_size );
+			file_find_and_replace( $models_file_path, "AAA", $min_hard_adder_size );
+		}
+
+		if ( !$error_code ) {
+			$q =
+			&system_with_timeout( "$yosys_path", "yosys.out", $timeout, $temp_dir,
+				"-v 2", $yosys_config_file_name );
+
+			if ( -e $odin_output_file_path ) {
+				if ( !$keep_intermediate_files ) {
+					system "rm -f ${temp_dir}*.dot";
+					system "rm -f ${temp_dir}*.v";
+					system "rm -f $odin_config_file_path";
+				}
+			}
+			else {
+				print "failed: yosys";
+				$error_code = 1;
+			}
 		}
+
 	}
 }
 
@@ -361,9 +533,53 @@ if (    $starting_stage <= $stage_idx_abc
 	and $ending_stage >= $stage_idx_abc
 	and !$error_code )
 {
-	$q = &system_with_timeout( $abc_path, "abc.out", $timeout, $temp_dir, "-c",
-		"read $odin_output_file_name; time; resyn; resyn2; if -K $lut_size; time; scleanup; time; scleanup; time; scleanup; time; scleanup; time; scleanup; time; scleanup; time; scleanup; time; scleanup; time; scleanup; time; write_hie $odin_output_file_name $abc_output_file_name; print_stats"
-	);
+	if ($yosys_script eq "") {
+		# EH: Replace all .subckt adder with .subckt xadder, 
+		# with XOR and AND pushed into soft-logic
+		my $abc_input_file_name = "$benchmark_name" . ".xadder" . file_ext_for_stage($stage_idx_odin);
+		my $abc_input_file_path = "$temp_dir$abc_input_file_name";
+
+		my $adder_model = <<'EOF';
+(\.model adder
+\.inputs\s+a(\[0\])?\s+b(\[0\])?\s+cin(\[0\])?
+\.outputs\s+cout(\[0\])?\s+sumout(\[0\])?)
+\.blackbox
+\.end
+EOF
+		my $xadder_model = <<'EOF';
+\1
+.names a\2 b\3 a_xor_b
+01 1
+10 1
+.names a\2 b\3 a_and_b
+11 1
+.subckt xadder a_xor_b=a_xor_b a_and_b=a_and_b cin=cin\4 cout=cout\5 sumout=sumout\6
+.end
+
+.model xadder
+.inputs a_xor_b a_and_b cin
+.outputs cout sumout
+.blackbox
+.end
+EOF
+		unlink "$abc_input_file_path";
+		copy( $odin_output_file_path, $abc_input_file_path );
+		&system_with_timeout("/usr/bin/perl", "perl.out", $timeout, $temp_dir, 
+			"-0777", "-p", "-i", "-e", "s/$adder_model/$xadder_model/smg", $abc_input_file_name);
+
+
+		unlink "$abc_output_file_path";
+		$q = &system_with_timeout( $abc_path, "abc.out", $timeout, $temp_dir, "-c",
+			"read $abc_input_file_name; read_lut $abc_lut_file; time; resyn; resyn2; if -K $lut_size; time; scleanup; time; scleanup; time; scleanup; time; scleanup; time; scleanup; time; scleanup; time; scleanup; time; scleanup; time; scleanup; time; print_stats; write_hie $abc_input_file_name $abc_output_file_name"
+		);
+	}
+	else
+	{
+		unlink "$abc_output_file_path";
+		$q = &system_with_timeout( $abc_path, "abc.out", $timeout, $temp_dir, "-c",
+			"read $odin_output_file_name; print_stats; write_hie $odin_output_file_name $abc_output_file_name"
+		);
+	}
 
 	if ( -e $abc_output_file_path ) {
 
@@ -420,7 +636,41 @@ if (    $starting_stage <= $stage_idx_prevpr
 		$prevpr_input_blif_path = $abc_output_file_path;
 	}
 	
-	copy($prevpr_input_blif_path, $prevpr_output_file_path);
+	if ($yosys_script eq "") {
+		# EH: Scan all .latch -es for clocks
+		# Add a BUFGCTRL for each clock found
+		open (my $fin, $prevpr_input_blif_path) or die ("Could not open $prevpr_input_blif_path");
+		open (my $fout, ">$prevpr_output_file_path") or die ("Could not open $prevpr_output_file_path");
+		my %clks;
+		while (my $line = <$fin>) {
+			chomp $line;
+			$line =~ m/(\s*)\.latch(\s+)([^ ]+)(\s+)([^ ]+)(\s+)([^ ]+)(\s+)([^ ]+)(\s+)([^ ]+)$/;
+			if ($9) {
+				$clks{$9} = 1;
+			}
+			foreach my $clk (keys %clks) {
+				$line =~ s/\Q$clk /${clk}_BUFG /g;
+			}
+			print $fout "$line\n";
+		}
+		close $fin;
+		if (keys %clks) {
+			print $fout "\n";
+			foreach my $clk (keys %clks) {
+				print $fout ".subckt bufgctrl i[0]=$clk i[1]=unconn s[0]=unconn s[1]=unconn ce[0]=unconn ce[1]=unconn ignore[0]=unconn ignore[1]=unconn o[0]=$clk"."_BUFG\n";
+			}
+			print $fout "\n";
+			print $fout ".model bufgctrl\n";
+			print $fout ".inputs i[0] i[1] s[0] s[1] ce[0] ce[1] ignore[0] ignore[1]\n";
+			print $fout ".outputs o[0]\n";
+			print $fout ".blackbox\n";
+			print $fout ".end\n";
+		}
+		close $fout;
+	}
+	else {
+		copy($prevpr_input_blif_path, $prevpr_output_file_path);
+	}
 
 	if ($prevpr_success) {
 		if ( !$keep_intermediate_files ) {
@@ -437,7 +687,16 @@ if (    $starting_stage <= $stage_idx_prevpr
 ################################## VPR ##########################################
 #################################################################################
 
-if ( $ending_stage >= $stage_idx_vpr and !$error_code ) {
+if ( $starting_stage <= $stage_idx_vpr 
+	and $ending_stage >= $stage_idx_vpr 
+	and !$error_code ) 
+{
+	(my $rrg_file_path = File::Spec->rel2abs($architecture_file_path_orig)) =~ s{\.[^.]+$}{.rrg.gz};
+	(-e "$rrg_file_path") or die("$rrg_file_path does not exist!");
+	unless(-e "$temp_dir/".basename($rrg_file_path)) {
+		symlink($rrg_file_path, "$temp_dir/".basename($rrg_file_path)) or die;
+	}
+
 	my @vpr_power_args;
 
 	if ($do_power) {
@@ -456,6 +715,7 @@ if ( $ending_stage >= $stage_idx_vpr and !$error_code ) {
 			"--cluster_seed_type",        "$vpr_cluster_seed_type",
 			"--sdc_file", 				  "$sdc_file_path",
 			"--seed",			 		  "$seed",
+			@vpr_options,
 			"--nodisp"
 		);
 		if ( $timing_driven eq "on" ) {
@@ -517,11 +777,16 @@ if ( $ending_stage >= $stage_idx_vpr and !$error_code ) {
 			"--nodisp",                   "--cluster_seed_type",
 			"$vpr_cluster_seed_type",     @vpr_power_args,
 			"--gen_postsynthesis_netlist", "$gen_postsynthesis_netlist",
-			"--sdc_file",				  "$sdc_file_path"
+			"--sdc_file",				  "$sdc_file_path",
+			"--seed",			"$seed",
+			"--fix_pins",			"$vpr_fix_pins",
+			@vpr_options
 		);
 	}
 	  					
-	if (-e $vpr_route_output_file_path and $q eq "success")
+	if (
+		-e $vpr_route_output_file_path and 
+		$q eq "success")
 	{
 		if($check_equivalent eq "on") {
 			if($abc_path eq "") {
@@ -590,8 +855,106 @@ close(RESULTS);
 #system "rm -f core.*";
 #system "rm -f gc.txt";
 
+#################################################################################
+################################## BITSTREAM ####################################
+#################################################################################
+
+if ($ending_stage >= $stage_idx_bitstream and ! $error_code)
+{
+	(my $pkg_file_path = File::Spec->rel2abs($architecture_file_path_orig)) =~ s{(_[^_/]+)?\.[^.]+$}{.pkg};
+	(-e "$pkg_file_path") or die("$pkg_file_path does not exist!");
+	unless (-e "$temp_dir/".basename($pkg_file_path)) {
+		symlink($pkg_file_path, "$temp_dir/".basename($pkg_file_path)) or die;
+	}
+
+	(my $tws_file_path = File::Spec->rel2abs($architecture_file_path_orig)) =~ s{\.[^.]+$}{.tws};
+	(-e "$tws_file_path") or die("$tws_file_path does not exist!");
+	unless(-e "$temp_dir/".basename($tws_file_path)) {
+		symlink($tws_file_path, "$temp_dir/".basename($tws_file_path)) or die;
+	}
+
+	my @bitgen_options;
+	if ($arch eq "xc7z020clg484") {
+		unless (-e "$temp_dir/xc7z020.db") {
+			symlink("$vtr_flow_path/arch/xilinx/xc7z020.db", "$temp_dir/xc7z020.db") or die;
+		}
+		unless (-e "$temp_dir/Zynq7000.db") {
+			symlink("$vtr_flow_path/arch/xilinx/Zynq7000.db", "$temp_dir/Zynq7000.db") or die;
+		}
+
+		push (@bitgen_options, qw(-g UnconstrainedPins:Allow));
+	}
+	elsif ($arch eq "xc6vlx240tff1156") {
+		unless (-e "$temp_dir/xc6vlx240t.db") {
+			symlink("$vtr_flow_path/arch/xilinx/xc6vlx240t.db", "$temp_dir/xc6vlx240t.db") or die;
+		}
+		unless (-e "$temp_dir/Virtex6.db") {
+			symlink("$vtr_flow_path/arch/xilinx/Virtex6.db", "$temp_dir/Virtex6.db") or die;
+		}
+		unless (-e "$temp_dir/xc6vlx240tff1156_include.xdl") {
+			symlink("$vtr_flow_path/arch/xilinx/xc6vlx240tff1156_include.xdl", "$temp_dir/xc6vlx240tff1156_include.xdl") or die;
+		}
+	}
+	else {
+		die($arch);
+	}
+
+	(-e "$prevpr_output_file_path") or die("$prevpr_output_file_path does not exist!");
+	(-e "$temp_dir$benchmark_name.net") or die("$temp_dir$benchmark_name.net does not exist!");
+	(-e "$temp_dir$benchmark_name.place") or die("$temp_dir$benchmark_name.place does not exist!");
+	(-e "$temp_dir$benchmark_name.route") or die("$temp_dir$benchmark_name.route does not exist!");
+
+	unlink "$temp_dir$benchmark_name".".xdl"; 
+	$q = &system_with_timeout($bitstream_path, 
+					"bitstream.out",
+					$timeout,
+					$temp_dir,
+					$arch,
+					$benchmark_name
+	);
+	(-e "$temp_dir$benchmark_name".".xdl") or die("$temp_dir$benchmark_name".".xdl does not exist!");
+
+	unlink "$temp_dir$benchmark_name".".ncd"; 
+	$q = &system_with_timeout(	
+			$xdl_path, 
+			"xdl2ncd.out",
+			$timeout,
+			$temp_dir,
+			"-force",
+			"-xdl2ncd",
+			"$benchmark_name".".xdl",
+			"$benchmark_name".".ncd"
+	);
+	
+	(-e "$temp_dir$benchmark_name".".ncd") or die("$temp_dir$benchmark_name".".ncd does not exist!");
+
+	$q = &system_with_timeout(
+			$trce_path, 
+			"trce.out",
+			$timeout,
+			$temp_dir,
+			"-v", "10",
+			"-a",
+			"$benchmark_name.ncd"
+			);
+
+	unlink "$temp_dir$benchmark_name.bit"; 
+	unlink "$temp_dir$benchmark_name.drc"; 
+	$q = &system_with_timeout(
+			$bitgen_path, 
+			"bitgen.out",
+			$timeout,
+			$temp_dir,
+			"-d",
+			@bitgen_options,
+			"-w", "$benchmark_name.ncd",
+			);
+
+	(-e "$temp_dir$benchmark_name.bit") or die("$temp_dir$benchmark_name.ncd does not exist!");
+}
+
 if ( !$error_code ) {
-	system "rm -f *.echo";
+	#system "rm -f *.echo";
 	print "OK";
 }
 print "\n";
@@ -618,7 +981,7 @@ sub system_with_timeout {
 		chdir $_[3];
 
 		
-		open( STDOUT, "> $_[1]" );
+		open( STDOUT, "| tee $_[1]" );
 		open( STDERR, ">&STDOUT" );
 		
 
@@ -634,7 +997,7 @@ sub system_with_timeout {
 		# like redirects so that perl will use execvp and $pid will actually be
 		# that of vpr so we can kill it later.
 		print "\n$_[0] @VPRARGS\n";
-		exec $_[0], @VPRARGS;
+		exec "/usr/bin/time", "-v", $_[0], @VPRARGS;
 	}
 	else {
 		my $timed_out = "false";
@@ -696,6 +1059,9 @@ sub stage_index {
 	if ( lc($stage_name) eq "vpr" ) {
 		return $stage_idx_vpr;
 	}
+	if ( lc($stage_name) eq "bitstream" ) {
+		return $stage_idx_bitstream;
+	}
 	return -1;
 }
 
@@ -867,7 +1233,7 @@ sub xml_find_mem_size {
 		return "";
 	}
 
-	my $memory_pb = xml_find_child_by_key_value ($pb_tree, "-name", "memory");
+	my $memory_pb = xml_find_child_by_key_value ($pb_tree, "-name", "RAMB36E1");
 	if ( $memory_pb eq "" ) {
 		return "";
 	}
diff --git vtr_flow/scripts/spice/buf/1.spz vtr_flow/scripts/spice/buf/1.spz
deleted file mode 100644
index 81291fb..0000000
--- vtr_flow/scripts/spice/buf/1.spz
+++ /dev/null
@@ -1,30 +0,0 @@
-.param rise = 'simt/500'
-
-
-Vdut Vdut 0 Vol
-Vdrive Vdrive 0 Vol
-Vref Vref 0 Vol
-
-Vin in 0 PULSE(0 Vol 'simt/4' 'rise' rise' 'simt/2' 'simt')
-
-X0 in mid1 Vdrive 0 inv nsize='1' psize='1*pnratio'
-X1 in x Vref 0 inv nsize='1' psize='1*pnratio'
-
-X2 mid1 mid2 Vdut 0 inv nsize='1' psize='1*pnratio'
-
-
-
-.TEMP tempr
-
-.OP
-.OPTIONS POST
-
-.tran 'simt/10000' 'simt'
-
-.measure tran Edut INTEG I(Vdut)
-.measure tran Edrive INTEG I(Vdrive)
-.measure tran Eref INTEG I(Vref)
-.measure tran E Param=('(-Edut-Edrive+Eref)*Vol')
-.measure tran power Param=('E/simt')
-
-.end
diff --git vtr_flow/scripts/spice/buf/16.spz vtr_flow/scripts/spice/buf/16.spz
deleted file mode 100644
index 601d897..0000000
--- vtr_flow/scripts/spice/buf/16.spz
+++ /dev/null
@@ -1,32 +0,0 @@
-.param rise = 'simt/500'
-
-
-Vdut Vdut 0 Vol
-Vdrive Vdrive 0 Vol
-Vref Vref 0 Vol
-
-Vin in 0 PULSE(0 Vol 'simt/4' 'rise' rise' 'simt/2' 'simt')
-
-X0 in mid1 Vdrive 0 inv nsize='1' psize='1*pnratio'
-X1 in x Vref 0 inv nsize='1' psize='1*pnratio'
-
-X2 mid1 mid2 Vdut 0 inv nsize='1' psize='1*pnratio'
-X3 mid2 mid3 Vdut 0 inv nsize='4' psize='4*pnratio'
-X4 mid3 out Vdut 0 inv nsize='16' psize='16*pnratio'
-
-
-
-.TEMP tempr
-
-.OP
-.OPTIONS POST
-
-.tran 'simt/10000' 'simt'
-
-.measure tran Edut INTEG I(Vdut)
-.measure tran Edrive INTEG I(Vdrive)
-.measure tran Eref INTEG I(Vref)
-.measure tran E Param=('(-Edut-Edrive+Eref)*Vol')
-.measure tran power Param=('E/simt')
-
-.end
diff --git vtr_flow/scripts/spice/buf/16_na.spz vtr_flow/scripts/spice/buf/16_na.spz
deleted file mode 100644
index fe26daa..0000000
--- vtr_flow/scripts/spice/buf/16_na.spz
+++ /dev/null
@@ -1,31 +0,0 @@
-.param rise = 'simt/500'
-
-Vdut Vdut 0 Vol
-Vdrive Vdrive 0 Vol
-Vref Vref 0 Vol
-
-Vin in 0 PULSE(0 Vol 'simt/4' 'rise' rise' 'simt/2' 'simt')
-
-X2 Vref mid2 Vdut 0 inv nsize='1' psize='1*pnratio'
-X3 mid2 mid3 Vdut 0 inv nsize='4' psize='4*pnratio'
-X4 mid3 out Vdut 0 inv nsize='16' psize='16*pnratio'
-
-
-
-.TEMP tempr
-
-.OP
-.OPTIONS POST
-
-.tran 'simt/10000' 'simt'
-
-.measure tran Edut INTEG I(Vdut)
-.measure tran Edrive INTEG I(Vdrive)
-.measure tran Eref INTEG I(Vref)
-.measure tran E Param=('(-Edut)*Vol')
-.measure tran power Param=('E/simt')
-
-
-
-
-.end
diff --git vtr_flow/scripts/spice/buf/1_na.spz vtr_flow/scripts/spice/buf/1_na.spz
deleted file mode 100644
index 375df97..0000000
--- vtr_flow/scripts/spice/buf/1_na.spz
+++ /dev/null
@@ -1,29 +0,0 @@
-.param rise = 'simt/500'
-
-Vdut Vdut 0 Vol
-Vdrive Vdrive 0 Vol
-Vref Vref 0 Vol
-
-Vin in 0 PULSE(0 Vol 'simt/4' 'rise' rise' 'simt/2' 'simt')
-
-X2 Vref mid2 Vdut 0 inv nsize='1' psize='1*pnratio'
-
-
-
-.TEMP tempr
-
-.OP
-.OPTIONS POST
-
-.tran 'simt/10000' 'simt'
-
-.measure tran Edut INTEG I(Vdut)
-.measure tran Edrive INTEG I(Vdrive)
-.measure tran Eref INTEG I(Vref)
-.measure tran E Param=('(-Edut)*Vol')
-.measure tran power Param=('E/simt')
-
-
-
-
-.end
diff --git vtr_flow/scripts/spice/buf/4.spz vtr_flow/scripts/spice/buf/4.spz
deleted file mode 100644
index 94593b9..0000000
--- vtr_flow/scripts/spice/buf/4.spz
+++ /dev/null
@@ -1,30 +0,0 @@
-.param rise = 'simt/500'
-
-
-Vdut Vdut 0 Vol
-Vdrive Vdrive 0 Vol
-Vref Vref 0 Vol
-
-Vin in 0 PULSE(0 Vol 'simt/4' 'rise' rise' 'simt/2' 'simt')
-
-X0 in mid1 Vdrive 0 inv nsize='1' psize='1*pnratio'
-X1 in x Vref 0 inv nsize='1' psize='1*pnratio'
-X2 mid1 mid2 Vdut 0 inv nsize='1' psize='1*pnratio'
-X3 mid2 out Vdut 0 inv nsize='4' psize='4*pnratio'
-
-
-
-.TEMP tempr
-
-.OP
-.OPTIONS POST
-
-.tran 'simt/10000' 'simt'
-
-.measure tran Edut INTEG I(Vdut)
-.measure tran Edrive INTEG I(Vdrive)
-.measure tran Eref INTEG I(Vref)
-.measure tran E Param=('(-Edut-Edrive+Eref)*Vol')
-.measure tran power Param=('E/simt')
-
-.end
diff --git vtr_flow/scripts/spice/buf/4_na.spz vtr_flow/scripts/spice/buf/4_na.spz
deleted file mode 100644
index c0aea9b..0000000
--- vtr_flow/scripts/spice/buf/4_na.spz
+++ /dev/null
@@ -1,30 +0,0 @@
-.param rise = 'simt/500'
-
-Vdut Vdut 0 Vol
-Vdrive Vdrive 0 Vol
-Vref Vref 0 Vol
-
-Vin in 0 PULSE(0 Vol 'simt/4' 'rise' rise' 'simt/2' 'simt')
-
-X2 Vref mid2 Vdut 0 inv nsize='1' psize='1*pnratio'
-X3 mid2 out Vdut 0 inv nsize='4' psize='4*pnratio'
-
-
-
-.TEMP tempr
-
-.OP
-.OPTIONS POST
-
-.tran 'simt/10000' 'simt'
-
-.measure tran Edut INTEG I(Vdut)
-.measure tran Edrive INTEG I(Vdrive)
-.measure tran Eref INTEG I(Vref)
-.measure tran E Param=('(-Edut)*Vol')
-.measure tran power Param=('E/simt')
-
-
-
-
-.end
diff --git vtr_flow/scripts/spice/buf/64.spz vtr_flow/scripts/spice/buf/64.spz
deleted file mode 100644
index a00f193..0000000
--- vtr_flow/scripts/spice/buf/64.spz
+++ /dev/null
@@ -1,36 +0,0 @@
-.param rise = 'simt/500'
-
-
-Vdut Vdut 0 Vol
-Vdrive Vdrive 0 Vol
-Vref Vref 0 Vol
-
-Vin in 0 PULSE(0 Vol 'simt/4' 'rise' rise' 'simt/2' 'simt')
-
-X0 in mid1 Vdrive 0 inv nsize='1' psize='1*pnratio'
-X1 in x Vref 0 inv nsize='1' psize='1*pnratio'
-
-X2 mid1 mid2 Vdut 0 inv nsize='1' psize='1*pnratio'
-X3 mid2 mid3 Vdut 0 inv nsize='4' psize='4*pnratio'
-X4 mid3 mid4 Vdut 0 inv nsize='16' psize='16*pnratio'
-X5 mid4 out Vdut 0 inv nsize='64' psize='64*pnratio'
-
-
-
-.TEMP tempr
-
-.OP
-.OPTIONS POST
-
-.tran 'simt/10000' 'simt'
-
-.measure tran Edut INTEG I(Vdut)
-.measure tran Edrive INTEG I(Vdrive)
-.measure tran Eref INTEG I(Vref)
-.measure tran E Param=('(-Edut-Edrive+Eref)*Vol')
-.measure tran power Param=('E/simt')
-
-
-
-
-.end
diff --git vtr_flow/scripts/spice/buf/64_na.spz vtr_flow/scripts/spice/buf/64_na.spz
deleted file mode 100644
index 47b0788..0000000
--- vtr_flow/scripts/spice/buf/64_na.spz
+++ /dev/null
@@ -1,32 +0,0 @@
-.param rise = 'simt/500'
-
-Vdut Vdut 0 Vol
-Vdrive Vdrive 0 Vol
-Vref Vref 0 Vol
-
-Vin in 0 PULSE(0 Vol 'simt/4' 'rise' rise' 'simt/2' 'simt')
-
-X2 Vref mid2 Vdut 0 inv nsize='1' psize='1*pnratio'
-X3 mid2 mid3 Vdut 0 inv nsize='4' psize='4*pnratio'
-X4 mid3 mid4 Vdut 0 inv nsize='16' psize='16*pnratio'
-X5 mid4 out Vdut 0 inv nsize='64' psize='64*pnratio'
-
-
-
-.TEMP tempr
-
-.OP
-.OPTIONS POST
-
-.tran 'simt/10000' 'simt'
-
-.measure tran Edut INTEG I(Vdut)
-.measure tran Edrive INTEG I(Vdrive)
-.measure tran Eref INTEG I(Vref)
-.measure tran E Param=('(-Edut)*Vol')
-.measure tran power Param=('E/simt')
-
-
-
-
-.end
diff --git vtr_flow/scripts/spice/buf_levr/1.spz vtr_flow/scripts/spice/buf_levr/1.spz
deleted file mode 100644
index 69ef89c..0000000
--- vtr_flow/scripts/spice/buf_levr/1.spz
+++ /dev/null
@@ -1,30 +0,0 @@
-.param rise = 'simt/500'
-
-
-Vdut Vdut 0 Vol
-Vdrive Vdrive 0 Vol
-Vref Vref 0 Vol
-
-Vin in 0 PULSE(0 Vol 'simt/4' 'rise' rise' 'simt/2' 'simt')
-
-X0 in mid1 Vdrive 0 inv nsize='1' psize='1*pnratio'
-X1 in x Vref 0 inv nsize='1' psize='1*pnratio'
-
-X2 mid1 mid2 Vdut 0 levr
-
-
-
-.TEMP tempr
-
-.OP
-.OPTIONS POST
-
-.tran 'simt/10000' 'simt'
-
-.measure tran Edut INTEG I(Vdut)
-.measure tran Edrive INTEG I(Vdrive)
-.measure tran Eref INTEG I(Vref)
-.measure tran E Param=('(-Edut-Edrive+Eref)*Vol')
-.measure tran power Param=('E/simt')
-
-.end
diff --git vtr_flow/scripts/spice/buf_levr/16.spz vtr_flow/scripts/spice/buf_levr/16.spz
deleted file mode 100644
index ec43733..0000000
--- vtr_flow/scripts/spice/buf_levr/16.spz
+++ /dev/null
@@ -1,32 +0,0 @@
-.param rise = 'simt/500'
-
-
-Vdut Vdut 0 Vol
-Vdrive Vdrive 0 Vol
-Vref Vref 0 Vol
-
-Vin in 0 PULSE(0 Vol 'simt/4' 'rise' rise' 'simt/2' 'simt')
-
-X0 in mid1 Vdrive 0 inv nsize='1' psize='1*pnratio'
-X1 in x Vref 0 inv nsize='1' psize='1*pnratio'
-
-X2 mid1 mid2 Vdut 0 levr
-X3 mid2 mid3 Vdut 0 inv nsize='4' psize='4*pnratio'
-X4 mid3 out Vdut 0 inv nsize='16' psize='16*pnratio'
-
-
-
-.TEMP tempr
-
-.OP
-.OPTIONS POST
-
-.tran 'simt/10000' 'simt'
-
-.measure tran Edut INTEG I(Vdut)
-.measure tran Edrive INTEG I(Vdrive)
-.measure tran Eref INTEG I(Vref)
-.measure tran E Param=('(-Edut-Edrive+Eref)*Vol')
-.measure tran power Param=('E/simt')
-
-.end
diff --git vtr_flow/scripts/spice/buf_levr/16_na.spz vtr_flow/scripts/spice/buf_levr/16_na.spz
deleted file mode 100644
index 4f9991d..0000000
--- vtr_flow/scripts/spice/buf_levr/16_na.spz
+++ /dev/null
@@ -1,31 +0,0 @@
-.param rise = 'simt/500'
-
-Vdut Vdut 0 Vol
-Vdrive Vdrive 0 Vol
-Vref Vref 0 Vol
-
-Vin in 0 PULSE(0 Vol 'simt/4' 'rise' rise' 'simt/2' 'simt')
-
-X2 Vref mid2 Vdut 0 levr
-X3 mid2 mid3 Vdut 0 inv nsize='4' psize='4*pnratio'
-X4 mid3 out Vdut 0 inv nsize='16' psize='16*pnratio'
-
-
-
-.TEMP tempr
-
-.OP
-.OPTIONS POST
-
-.tran 'simt/10000' 'simt'
-
-.measure tran Edut INTEG I(Vdut)
-.measure tran Edrive INTEG I(Vdrive)
-.measure tran Eref INTEG I(Vref)
-.measure tran E Param=('(-Edut)*Vol')
-.measure tran power Param=('E/simt')
-
-
-
-
-.end
diff --git vtr_flow/scripts/spice/buf_levr/1_na.spz vtr_flow/scripts/spice/buf_levr/1_na.spz
deleted file mode 100644
index 6d0a55a..0000000
--- vtr_flow/scripts/spice/buf_levr/1_na.spz
+++ /dev/null
@@ -1,29 +0,0 @@
-.param rise = 'simt/500'
-
-Vdut Vdut 0 Vol
-Vdrive Vdrive 0 Vol
-Vref Vref 0 Vol
-
-Vin in 0 PULSE(0 Vol 'simt/4' 'rise' rise' 'simt/2' 'simt')
-
-X2 Vref mid2 Vdut 0 levr
-
-
-
-.TEMP tempr
-
-.OP
-.OPTIONS POST
-
-.tran 'simt/10000' 'simt'
-
-.measure tran Edut INTEG I(Vdut)
-.measure tran Edrive INTEG I(Vdrive)
-.measure tran Eref INTEG I(Vref)
-.measure tran E Param=('(-Edut)*Vol')
-.measure tran power Param=('E/simt')
-
-
-
-
-.end
diff --git vtr_flow/scripts/spice/buf_levr/4.spz vtr_flow/scripts/spice/buf_levr/4.spz
deleted file mode 100644
index dcb02a2..0000000
--- vtr_flow/scripts/spice/buf_levr/4.spz
+++ /dev/null
@@ -1,30 +0,0 @@
-.param rise = 'simt/500'
-
-
-Vdut Vdut 0 Vol
-Vdrive Vdrive 0 Vol
-Vref Vref 0 Vol
-
-Vin in 0 PULSE(0 Vol 'simt/4' 'rise' rise' 'simt/2' 'simt')
-
-X0 in mid1 Vdrive 0 inv nsize='1' psize='1*pnratio'
-X1 in x Vref 0 inv nsize='1' psize='1*pnratio'
-X2 mid1 mid2 Vdut 0 levr
-X3 mid2 out Vdut 0 inv nsize='4' psize='4*pnratio'
-
-
-
-.TEMP tempr
-
-.OP
-.OPTIONS POST
-
-.tran 'simt/10000' 'simt'
-
-.measure tran Edut INTEG I(Vdut)
-.measure tran Edrive INTEG I(Vdrive)
-.measure tran Eref INTEG I(Vref)
-.measure tran E Param=('(-Edut-Edrive+Eref)*Vol')
-.measure tran power Param=('E/simt')
-
-.end
diff --git vtr_flow/scripts/spice/buf_levr/4_na.spz vtr_flow/scripts/spice/buf_levr/4_na.spz
deleted file mode 100644
index d51ea64..0000000
--- vtr_flow/scripts/spice/buf_levr/4_na.spz
+++ /dev/null
@@ -1,30 +0,0 @@
-.param rise = 'simt/500'
-
-Vdut Vdut 0 Vol
-Vdrive Vdrive 0 Vol
-Vref Vref 0 Vol
-
-Vin in 0 PULSE(0 Vol 'simt/4' 'rise' rise' 'simt/2' 'simt')
-
-X2 Vref mid2 Vdut 0 levr
-X3 mid2 out Vdut 0 inv nsize='4' psize='4*pnratio'
-
-
-
-.TEMP tempr
-
-.OP
-.OPTIONS POST
-
-.tran 'simt/10000' 'simt'
-
-.measure tran Edut INTEG I(Vdut)
-.measure tran Edrive INTEG I(Vdrive)
-.measure tran Eref INTEG I(Vref)
-.measure tran E Param=('(-Edut)*Vol')
-.measure tran power Param=('E/simt')
-
-
-
-
-.end
diff --git vtr_flow/scripts/spice/buf_levr/64.spz vtr_flow/scripts/spice/buf_levr/64.spz
deleted file mode 100644
index 956ddcd..0000000
--- vtr_flow/scripts/spice/buf_levr/64.spz
+++ /dev/null
@@ -1,36 +0,0 @@
-.param rise = 'simt/500'
-
-
-Vdut Vdut 0 Vol
-Vdrive Vdrive 0 Vol
-Vref Vref 0 Vol
-
-Vin in 0 PULSE(0 Vol 'simt/4' 'rise' rise' 'simt/2' 'simt')
-
-X0 in mid1 Vdrive 0 inv nsize='1' psize='1*pnratio'
-X1 in x Vref 0 inv nsize='1' psize='1*pnratio'
-
-X2 mid1 mid2 Vdut 0 levr
-X3 mid2 mid3 Vdut 0 inv nsize='4' psize='4*pnratio'
-X4 mid3 mid4 Vdut 0 inv nsize='16' psize='16*pnratio'
-X5 mid4 out Vdut 0 inv nsize='64' psize='64*pnratio'
-
-
-
-.TEMP tempr
-
-.OP
-.OPTIONS POST
-
-.tran 'simt/10000' 'simt'
-
-.measure tran Edut INTEG I(Vdut)
-.measure tran Edrive INTEG I(Vdrive)
-.measure tran Eref INTEG I(Vref)
-.measure tran E Param=('(-Edut-Edrive+Eref)*Vol')
-.measure tran power Param=('E/simt')
-
-
-
-
-.end
diff --git vtr_flow/scripts/spice/buf_levr/64_na.spz vtr_flow/scripts/spice/buf_levr/64_na.spz
deleted file mode 100644
index 41b3363..0000000
--- vtr_flow/scripts/spice/buf_levr/64_na.spz
+++ /dev/null
@@ -1,32 +0,0 @@
-.param rise = 'simt/500'
-
-Vdut Vdut 0 Vol
-Vdrive Vdrive 0 Vol
-Vref Vref 0 Vol
-
-Vin in 0 PULSE(0 Vol 'simt/4' 'rise' rise' 'simt/2' 'simt')
-
-X2 Vref mid2 Vdut 0 levr
-X3 mid2 mid3 Vdut 0 inv nsize='4' psize='4*pnratio'
-X4 mid3 mid4 Vdut 0 inv nsize='16' psize='16*pnratio'
-X5 mid4 out Vdut 0 inv nsize='64' psize='64*pnratio'
-
-
-
-.TEMP tempr
-
-.OP
-.OPTIONS POST
-
-.tran 'simt/10000' 'simt'
-
-.measure tran Edut INTEG I(Vdut)
-.measure tran Edrive INTEG I(Vdrive)
-.measure tran Eref INTEG I(Vref)
-.measure tran E Param=('(-Edut)*Vol')
-.measure tran power Param=('E/simt')
-
-
-
-
-.end
diff --git vtr_flow/scripts/spice/dff/1.spz vtr_flow/scripts/spice/dff/1.spz
deleted file mode 100644
index f2e610d..0000000
--- vtr_flow/scripts/spice/dff/1.spz
+++ /dev/null
@@ -1,47 +0,0 @@
-.param rise = 'simt/1000'
-
-Vdd Vdd 0 Vol
-Vd Vd 0 Vol
-Vdref Vdref 0 Vol
-Vclk Vclk 0 Vol
-Vclkref Vclkref 0 Vol
-Vclkn Vclkn 0 Vol
-Vclknref Vclknref 0 Vol
-
-Vdn Dn 0 PWL(0 Vol 'simt/8' Vol 'simt/8+rise' 0  '3*simt/8' 0 '3*simt/8+rise' Vol '5*simt/8' Vol '5*simt/8+rise' 0 '7*simt/8' 0 '7*simt/8+rise' Vol '11*simt/8' Vol '11*simt/8+rise' 0 '15*simt/8' 0 '15*simt/8+rise' Vol)
-Vclki clki 0 PULSE(0 Vol 'simt/4' 0n 0n 'simt/2' 'simt')
-Vclkni clkni 0 PULSE(Vol 0 'simt/4' 0n 0n 'simt/2' 'simt')
-
-X0 D Q clk clkn Vdd Gnd dff pnratio='pnratio'
-
-* D driver and reference driver
-X1 Dn D Vd 0 inv nsize=1 psize='pnratio'
-X1r Dn x1 Vdref 0 inv nsize=1 psize='pnratio' 
-
-X2 clkni clk Vclk 0 inv nsize=1 psize='pnratio'
-X2r clkni x2 Vclkref 0 inv nsize=1 psize='pnratio'
-
-X3 clki clkn Vclkn 0 inv nsize=1 psize='pnratio'
-X3r clki x3 Vclknref 0 inv nsize=1 psize='pnratio'
-
-.TEMP tempr
-
-.OP
-.OPTIONS POST
-
-.IC V(Q)=0
-
-.tran 'simt/1000' 'simt*2'
-
-.measure tran Ebuffers INTEG I(Vdd)
-.measure tran Ed INTEG I(Vd)
-.measure tran Edref INTEG I(Vdref)
-.measure tran Eclk INTEG I(Vclk)
-.measure tran Eclkref INTEG I(Vclkref)
-.measure tran Eclkn INTEG I(Vclkn)
-.measure tran Eclknref INTEG I(Vclknref)
-.measure tran E Param=('(-Ebuffers-Ed+Edref-Eclk+Eclkref-Eclkn+Eclknref)*Vol')
-.measure tran power Param=('E/simt/2')
-.end
-
-
diff --git vtr_flow/scripts/spice/dff/1_na.spz vtr_flow/scripts/spice/dff/1_na.spz
deleted file mode 100644
index 5dac840..0000000
--- vtr_flow/scripts/spice/dff/1_na.spz
+++ /dev/null
@@ -1,51 +0,0 @@
-.param rise = 'simt/1000'
-
-Vdd Vdd 0 Vol
-Vd D 0 Vol
-
-
-Vclkref Vclkref 0 Vol
-
-Vclknref Vclknref 0 Vol
-
-Vclk clk 0 Vol
-
-*Vclki clki 0 PULSE(0 Vol 'simt/4' 0n 0n 'simt/2' 'simt')
-*Vclkni clkni 0 PULSE(Vol 0 'simt/4' 0n 0n 'simt/2' 'simt')
-
-* Master loop
-X0 D m1b m1o clk 0 Vdd 0 mux2trans size=1 pnratio='pnratio'
-X1 m1o m2b Vdd 0 inv nsize=1 psize='pnratio'
-X2 m2b m1b Vdd 0 inv nsize=1 psize='pnratio'
-
-X3 m2a m2b m2o clk 0 Vdd 0 mux2trans size=1 pnratio='pnratio'
-X4 m2o Q Vdd 0 inv nsize=1 psize='pnratio'
-X5 Q m2a Vdd 0 inv nsize=1 psize='pnratio'
-
-
-.TEMP tempr
-
-.OP
-.OPTIONS POST
-
-.IC V(Q)='Vol'
-.IC V(m1o)='Vol'
-.IC V(m1b)='Vol'
-.IC V(m2b)=0
-.IC V(m1a)=0
-
-.tran 'simt/10000' 'simt*2'
-
-.measure tran Ebuffers INTEG I(Vdd)
-.measure tran Ed INTEG I(Vd)
-.measure tran Eclk INTEG I(Vclk)
-
-
-.measure tran Eclkref INTEG I(Vclkref)
-.measure tran Eclkn INTEG I(Vclkn)
-.measure tran Eclknref INTEG I(Vclknref)
-.measure tran E Param=('(-Ebuffers-Ed-Eclk)*Vol')
-.measure tran power Param=('E/simt/2')
-.end
-
-
diff --git vtr_flow/scripts/spice/lut/2.spz vtr_flow/scripts/spice/lut/2.spz
deleted file mode 100644
index dce047d..0000000
--- vtr_flow/scripts/spice/lut/2.spz
+++ /dev/null
@@ -1,45 +0,0 @@
-.param rise = 'simt/500'
-
-
-
-Vdd1 Vdd1 0 Vol
-Vdd2 Vdd2 0 Vol
-Vsram Vsram 0 Vol
-
-Vin1 in1 0 PULSE(0 Vol 0.3n 0n 0n 4n 10000n)
-Vin2 in2 0 PULSE(0 Vol 0.9n 0n 0n 4n 10000n)
-
-X1 in1 sel1mid Vdd1 0 inv nsize=1 psize='1*pnratio'
-X2 sel1mid sel1 Vdd1 0 inv nsize=2 psize='2*pnratio'
-X3 in1 sel1n Vdd1 0 inv nsize=2 psize='2*pnratio'
-
-X4 in2 sel2mid Vdd1 0 inv nsize=1 psize='1*pnratio'
-X5 sel2mid sel2 Vdd1 0 inv nsize=2 psize='2*pnratio'
-X6 in2 sel2n Vdd1 0 inv nsize=2 psize='2*pnratio'
-
-X7 sram1 sram0 mid2a sel2 sel2n mux2 size='nmos_size'
-X8 sram0 sram1 mid2b sel2 sel2n mux2 size='nmos_size'
-
-X9 mid2a mid2b mid1a sel1 sel1n mux2 size='nmos_size'
-
-X10 mid1a out Vdd2 0 levr
-
-Xs1 0 sram1 Vsram 0 inv nsize=2 psize='2*pnratio'
-Xs0 Vsram sram0 Vsram 0 inv nsize=2 psize='2*pnratio'
-
-
-
-.TEMP tempr
-
-.OP
-.OPTIONS POST
-
-.tran 'simt/10000' '2*simt'
-.measure tran Edrivers INTEG I(Vdd1) 
-.measure tran Elevl INTEG I(Vdd2)
-.measure tran Esram INTEG I(Vsram) 
-.measure tran E Param=('(-Edrivers-Elevl-Esram)*Vol')
-.measure tran power Param=('E/simt/2')
-
-
-.end
diff --git vtr_flow/scripts/spice/lut/2_na.spz vtr_flow/scripts/spice/lut/2_na.spz
deleted file mode 100644
index 67ccca2..0000000
--- vtr_flow/scripts/spice/lut/2_na.spz
+++ /dev/null
@@ -1,43 +0,0 @@
-.param rise = 'simt/500'
-
-
-
-Vdd1 Vdd1 0 Vol
-Vdd2 Vdd2 0 Vol
-Vsram sram1 0 Vol
-
-Vin1 in1 0 Vol
-Vin2 in2 0 Vol
-
-X1 in1 sel1mid Vdd1 0 inv nsize=1 psize='1*pnratio'
-X2 sel1mid sel1 Vdd1 0 inv nsize=2 psize='2*pnratio'
-X3 in1 sel1n Vdd1 0 inv nsize=2 psize='2*pnratio'
-
-X4 in2 sel2mid Vdd1 0 inv nsize=1 psize='1*pnratio'
-X5 sel2mid sel2 Vdd1 0 inv nsize=2 psize='2*pnratio'
-X6 in2 sel2n Vdd1 0 inv nsize=2 psize='2*pnratio'
-
-X7 sram1 0 mid2a sel2 sel2n mux2 size=1
-X8 0 sram1 mid2b sel2 sel2n mux2 size=1
-
-X9 mid2a mid2b mid1a sel1 sel1n mux2 size=1
-
-X10 mid1a out Vdd2 0 levr
-
-
-
-
-.TEMP tempr
-
-.OP
-.OPTIONS POST
-
-.tran 'simt/10000' '2*simt'
-.measure tran Edrivers INTEG I(Vdd1) 
-.measure tran Elevl INTEG I(Vdd2) 
-.measure tran Esram INTEG I(Vsram)
-.measure tran E Param=('(-Edrivers-Elevl-Esram)*Vol')
-.measure tran power Param=('E/simt/2')
-
-
-.end
diff --git vtr_flow/scripts/spice/lut/4.spz vtr_flow/scripts/spice/lut/4.spz
deleted file mode 100644
index 35174ec..0000000
--- vtr_flow/scripts/spice/lut/4.spz
+++ /dev/null
@@ -1,74 +0,0 @@
-.param rise = 'simt/500'
-
-
-Vdd1 Vdd1 0 Vol
-Vdd2 Vdd2 0 Vol
-Vsram Vsram 0 Vol
-
-Vin1 in1 0 PULSE(0 Vol 0.3n 0n 0n 4n 20n)
-Vin2 in2 0 PULSE(0 Vol 0.9n 0n 0n 4n 20n)
-Vin3 in3 0 PULSE(0 Vol 1.5n 0n 0n 4n 20n)
-Vin4 in4 0 PULSE(0 Vol 2.1n 0n 0n 4n 20n)
-
-X1 in1 sel1mid Vdd1 0 inv nsize=1 psize='1*pnratio'
-X2 sel1mid sel1 Vdd1 0 inv nsize=2 psize='2*pnratio'
-X3 in1 sel1n Vdd1 0 inv nsize=2 psize='2*pnratio'
-
-X4 in2 sel2mid Vdd1 0 inv nsize=1 psize='1*pnratio'
-X5 sel2mid sel2 Vdd1 0 inv nsize=2 psize='2*pnratio'
-X6 in2 sel2n Vdd1 0 inv nsize=2 psize='2*pnratio'
-
-X12 in3 sel3mid Vdd1 0 inv nsize=1 psize='1*pnratio'
-X13 sel3mid sel3 Vdd1 0 inv nsize=2 psize='2*pnratio'
-X14 in3 sel3n Vdd1 0 inv nsize=2 psize='2*pnratio'
-
-X19 in4 sel4mid Vdd1 0 inv nsize=1 psize='1*pnratio'
-X20 sel4mid sel4 Vdd1 0 inv nsize=2 psize='2*pnratio'
-X21 in4 sel4n Vdd1 0 inv nsize=2 psize='2*pnratio'
-
-X22 sram1 sram0 mid4a sel4 sel4n mux2 size='nmos_size'
-X23 sram0 sram1 mid4b sel4 sel4n mux2 size='nmos_size'
-X24 sram0 sram1 mid4c sel4 sel4n mux2 size='nmos_size'
-X25 sram1 sram0 mid4d sel4 sel4n mux2 size='nmos_size'
-X26 sram0 sram1 mid4e sel4 sel4n mux2 size='nmos_size'
-X27 sram1 sram0 mid4f sel4 sel4n mux2 size='nmos_size'
-X28 sram1 sram0 mid4g sel4 sel4n mux2 size='nmos_size'
-X29 sram0 sram1 mid4h sel4 sel4n mux2 size='nmos_size'
-
-
-X15 mid4a mid4b mid3a sel3 sel3n mux2 size='nmos_size'
-X16 mid4c mid4d mid3b sel3 sel3n mux2 size='nmos_size'
-X17 mid4e mid4f mid3c sel3 sel3n mux2 size='nmos_size'
-X18 mid4g mid4h mid3d sel3 sel3n mux2 size='nmos_size'
-
-X30 mid3a mid3alv Vdd2 0 levr
-X31 mid3b mid3blv Vdd2 0 levr
-X32 mid3c mid3clv Vdd2 0 levr
-X33 mid3d mid3dlv Vdd2 0 levr
-
-X7 mid3alv mid3blv mid2a sel2 sel2n mux2 size='nmos_size'
-X8 mid3clv mid3dlv mid2b sel2 sel2n mux2 size='nmos_size'
-
-X9 mid2a mid2b mid1a sel1 sel1n mux2 size='nmos_size'
-
-X10 mid1a out Vdd2 0 levr
-
-Xs1 0 sram1 Vsram 0 inv nsize=8 psize='8*pnratio'
-Xs0 Vsram sram0 Vsram 0 inv nsize=8 psize='8*pnratio'
-
-
-
-.TEMP tempr
-
-.OP
-.OPTIONS POST
-
-.tran 'simt/10000' '2*simt'
-.measure tran Edrivers INTEG I(Vdd1) 
-.measure tran Elevl INTEG I(Vdd2)
-.measure tran Esram INTEG I(Vsram) 
-.measure tran E Param=('(-Edrivers-Elevl-Esram)*Vol')
-.measure tran power Param=('E/simt/2')
-
-
-.end
diff --git vtr_flow/scripts/spice/lut/4_na.spz vtr_flow/scripts/spice/lut/4_na.spz
deleted file mode 100644
index 680243d..0000000
--- vtr_flow/scripts/spice/lut/4_na.spz
+++ /dev/null
@@ -1,74 +0,0 @@
-.param rise = 'simt/500'
-
-
-Vdd1 Vdd1 0 Vol
-Vdd2 Vdd2 0 Vol
-Vsram Vsram 0 Vol
-
-Vin1 in1 0 Vol
-Vin2 in2 0 Vol
-Vin3 in3 0 Vol
-Vin4 in4 0 Vol
-
-X1 in1 sel1mid Vdd1 0 inv nsize=1 psize='1*pnratio'
-X2 sel1mid sel1 Vdd1 0 inv nsize=2 psize='2*pnratio'
-X3 in1 sel1n Vdd1 0 inv nsize=2 psize='2*pnratio'
-
-X4 in2 sel2mid Vdd1 0 inv nsize=1 psize='1*pnratio'
-X5 sel2mid sel2 Vdd1 0 inv nsize=2 psize='2*pnratio'
-X6 in2 sel2n Vdd1 0 inv nsize=2 psize='2*pnratio'
-
-X12 in3 sel3mid Vdd1 0 inv nsize=1 psize='1*pnratio'
-X13 sel3mid sel3 Vdd1 0 inv nsize=2 psize='2*pnratio'
-X14 in3 sel3n Vdd1 0 inv nsize=2 psize='2*pnratio'
-
-X19 in4 sel4mid Vdd1 0 inv nsize=1 psize='1*pnratio'
-X20 sel4mid sel4 Vdd1 0 inv nsize=2 psize='2*pnratio'
-X21 in4 sel4n Vdd1 0 inv nsize=2 psize='2*pnratio'
-
-X22 sram1 sram0 mid4a sel4 sel4n mux2 size=1
-X23 sram0 sram1 mid4b sel4 sel4n mux2 size=1
-X24 sram0 sram1 mid4c sel4 sel4n mux2 size=1
-X25 sram1 sram0 mid4d sel4 sel4n mux2 size=1
-X26 sram0 sram1 mid4e sel4 sel4n mux2 size=1
-X27 sram1 sram0 mid4f sel4 sel4n mux2 size=1
-X28 sram1 sram0 mid4g sel4 sel4n mux2 size=1
-X29 sram0 sram1 mid4h sel4 sel4n mux2 size=1
-
-
-X15 mid4a mid4b mid3a sel3 sel3n mux2 size=1
-X16 mid4c mid4d mid3b sel3 sel3n mux2 size=1
-X17 mid4e mid4f mid3c sel3 sel3n mux2 size=1
-X18 mid4g mid4h mid3d sel3 sel3n mux2 size=1
-
-X30 mid3a mid3alv Vdd2 0 levr
-X31 mid3b mid3blv Vdd2 0 levr
-X32 mid3c mid3clv Vdd2 0 levr
-X33 mid3d mid3dlv Vdd2 0 levr
-
-X7 mid3alv mid3blv mid2a sel2 sel2n mux2 size=1
-X8 mid3clv mid3dlv mid2b sel2 sel2n mux2 size=1
-
-X9 mid2a mid2b mid1a sel1 sel1n mux2 size=1
-
-X10 mid1a out Vdd2 0 levr
-
-R0 sram1 Vsram 0
-R1 sram0 0 0
-
-
-
-.TEMP tempr
-
-.OP
-.OPTIONS POST
-
-.tran 'simt/10000' '2*simt'
-.measure tran Edrivers INTEG I(Vdd1) 
-.measure tran Elevl INTEG I(Vdd2) 
-.measure tran Esram INTEG I(Vsram)
-.measure tran E Param=('(-Edrivers-Elevl-Esram)*Vol')
-.measure tran power Param=('E/simt/2')
-
-
-.end
diff --git vtr_flow/scripts/spice/lut/6.spz vtr_flow/scripts/spice/lut/6.spz
deleted file mode 100644
index a9a01b8..0000000
--- vtr_flow/scripts/spice/lut/6.spz
+++ /dev/null
@@ -1,151 +0,0 @@
-.param rise = 'simt/500'
-
-
-Vdd1 Vdd1 0 Vol
-Vdd2 Vdd2 0 Vol
-Vsram Vsram 0 Vol
-
-Vin1 in1 0 PULSE(0 Vol 0.3n 0n 0n 4n 20n)
-Vin2 in2 0 PULSE(0 Vol 0.9n 0n 0n 4n 20n)
-Vin3 in3 0 PULSE(0 Vol 1.5n 0n 0n 4n 20n)
-Vin4 in4 0 PULSE(0 Vol 2.1n 0n 0n 4n 20n)
-Vin5 in5 0 PULSE(0 Vol 2.7n 0n 0n 4n 20n)
-Vin6 in6 0 PULSE(0 Vol 3.3n 0n 0n 4n 20n)
-
-X1 in1 sel1mid Vdd1 0 inv nsize=1 psize='1*pnratio'
-X2 sel1mid sel1 Vdd1 0 inv nsize=2 psize='2*pnratio'
-X3 in1 sel1n Vdd1 0 inv nsize=2 psize='2*pnratio'
-
-X4 in2 sel2mid Vdd1 0 inv nsize=1 psize='1*pnratio'
-X5 sel2mid sel2 Vdd1 0 inv nsize=2 psize='2*pnratio'
-X6 in2 sel2n Vdd1 0 inv nsize=2 psize='2*pnratio'
-
-X12 in3 sel3mid Vdd1 0 inv nsize=1 psize='1*pnratio'
-X13 sel3mid sel3 Vdd1 0 inv nsize=2 psize='2*pnratio'
-X14 in3 sel3n Vdd1 0 inv nsize=2 psize='2*pnratio'
-
-X19 in4 sel4mid Vdd1 0 inv nsize=1 psize='1*pnratio'
-X20 sel4mid sel4 Vdd1 0 inv nsize=2 psize='2*pnratio'
-X21 in4 sel4n Vdd1 0 inv nsize=2 psize='2*pnratio'
-
-X34 in5 sel5mid Vdd1 0 inv nsize=1 psize='1*pnratio'
-X35 sel5mid sel5 Vdd1 0 inv nsize=2 psize='2*pnratio'
-X36 in5 sel5n Vdd1 0 inv nsize=2 psize='2*pnratio'
-
-X105 in6 sel6mid Vdd1 0 inv nsize=1 psize='1*pnratio'
-X106 sel6mid sel6 Vdd1 0 inv nsize=2 psize='2*pnratio'
-X107 in6 sel6n Vdd1 0 inv nsize=2 psize='2*pnratio'
-
-X57 sram1 sram0 mid6a sel6 sel6n mux2 size='nmos_size'
-X58 sram0 sram1 mid6b sel6 sel6n mux2 size='nmos_size'
-X59 sram0 sram1 mid6c sel6 sel6n mux2 size='nmos_size'
-X60 sram1 sram0 mid6d sel6 sel6n mux2 size='nmos_size'
-X61 sram0 sram1 mid6e sel6 sel6n mux2 size='nmos_size'
-X62 sram1 sram0 mid6f sel6 sel6n mux2 size='nmos_size'
-X63 sram1 sram0 mid6g sel6 sel6n mux2 size='nmos_size'
-X64 sram0 sram1 mid6h sel6 sel6n mux2 size='nmos_size'
-X65 sram0 sram1 mid6i sel6 sel6n mux2 size='nmos_size'
-X66 sram1 sram0 mid6j sel6 sel6n mux2 size='nmos_size'
-X67 sram1 sram0 mid6k sel6 sel6n mux2 size='nmos_size'
-X68 sram0 sram1 mid6l sel6 sel6n mux2 size='nmos_size'
-X69 sram1 sram0 mid6m sel6 sel6n mux2 size='nmos_size'
-X70 sram0 sram1 mid6n sel6 sel6n mux2 size='nmos_size'
-X71 sram0 sram1 mid6o sel6 sel6n mux2 size='nmos_size'
-X72 sram1 sram0 mid6p sel6 sel6n mux2 size='nmos_size'
-X73 sram0 sram1 mid6q sel6 sel6n mux2 size='nmos_size'
-X74 sram1 sram0 mid6r sel6 sel6n mux2 size='nmos_size'
-X75 sram1 sram0 mid6s sel6 sel6n mux2 size='nmos_size'
-X76 sram0 sram1 mid6t sel6 sel6n mux2 size='nmos_size'
-X77 sram1 sram0 mid6u sel6 sel6n mux2 size='nmos_size'
-X78 sram0 sram1 mid6v sel6 sel6n mux2 size='nmos_size'
-X79 sram0 sram1 mid6w sel6 sel6n mux2 size='nmos_size'
-X80 sram1 sram0 mid6x sel6 sel6n mux2 size='nmos_size'
-X81 sram1 sram0 mid6y sel6 sel6n mux2 size='nmos_size'
-X82 sram0 sram1 mid6z sel6 sel6n mux2 size='nmos_size'
-X83 sram0 sram1 mid6za sel6 sel6n mux2 size='nmos_size'
-X84 sram1 sram0 mid6zb sel6 sel6n mux2 size='nmos_size'
-X85 sram0 sram1 mid6zc sel6 sel6n mux2 size='nmos_size'
-X86 sram1 sram0 mid6zd sel6 sel6n mux2 size='nmos_size'
-X87 sram1 sram0 mid6ze sel6 sel6n mux2 size='nmos_size'
-X88 sram0 sram1 mid6zf sel6 sel6n mux2 size='nmos_size'
-
-X37 mid6a mid6b mid5a sel5 sel5n mux2 size='nmos_size'
-X38 mid6c mid6d mid5b sel5 sel5n mux2 size='nmos_size'
-X39 mid6e mid6f mid5c sel5 sel5n mux2 size='nmos_size'
-X40 mid6g mid6h mid5d sel5 sel5n mux2 size='nmos_size'
-X41 mid6i mid6j mid5e sel5 sel5n mux2 size='nmos_size'
-X42 mid6k mid6l mid5f sel5 sel5n mux2 size='nmos_size'
-X43 mid6m mid6n mid5g sel5 sel5n mux2 size='nmos_size'
-X44 mid6o mid6p mid5h sel5 sel5n mux2 size='nmos_size'
-X45 mid6q mid6r mid5i sel5 sel5n mux2 size='nmos_size'
-X46 mid6s mid6t mid5j sel5 sel5n mux2 size='nmos_size'
-X47 mid6u mid6v mid5k sel5 sel5n mux2 size='nmos_size'
-X48 mid6w mid6x mid5l sel5 sel5n mux2 size='nmos_size'
-X49 mid6y mid6z mid5m sel5 sel5n mux2 size='nmos_size'
-X50 mid6za mid6zb mid5n sel5 sel5n mux2 size='nmos_size'
-X51 mid6zc mid6zd mid5o sel5 sel5n mux2 size='nmos_size'
-X52 mid6ze mid6zf mid5p sel5 sel5n mux2 size='nmos_size'
-
-X89  mid5a mid5alv Vdd2 0 levr
-X90  mid5b mid5blv Vdd2 0 levr
-X91  mid5c mid5clv Vdd2 0 levr
-X92  mid5d mid5dlv Vdd2 0 levr
-X93  mid5e mid5elv Vdd2 0 levr
-X94  mid5f mid5flv Vdd2 0 levr
-X95  mid5g mid5glv Vdd2 0 levr
-X96  mid5h mid5hlv Vdd2 0 levr
-X97  mid5i mid5ilv Vdd2 0 levr
-X98  mid5j mid5jlv Vdd2 0 levr
-X99  mid5k mid5klv Vdd2 0 levr
-X100 mid5l mid5llv Vdd2 0 levr
-X101 mid5m mid5mlv Vdd2 0 levr
-X102 mid5n mid5nlv Vdd2 0 levr
-X103 mid5o mid5olv Vdd2 0 levr
-X104 mid5p mid5plv Vdd2 0 levr
-
-X22 mid5alv mid5blv mid4a sel4 sel4n mux2 size='nmos_size'
-X23 mid5clv mid5dlv mid4b sel4 sel4n mux2 size='nmos_size'
-X24 mid5elv mid5flv mid4c sel4 sel4n mux2 size='nmos_size'
-X25 mid5glv mid5hlv mid4d sel4 sel4n mux2 size='nmos_size'
-X26 mid5ilv mid5jlv mid4e sel4 sel4n mux2 size='nmos_size'
-X27 mid5klv mid5llv mid4f sel4 sel4n mux2 size='nmos_size'
-X28 mid5mlv mid5nlv mid4g sel4 sel4n mux2 size='nmos_size'
-X29 mid5olv mid5plv mid4h sel4 sel4n mux2 size='nmos_size'
-
-
-X15 mid4a mid4b mid3a sel3 sel3n mux2 size='nmos_size'
-X16 mid4c mid4d mid3b sel3 sel3n mux2 size='nmos_size'
-X17 mid4e mid4f mid3c sel3 sel3n mux2 size='nmos_size'
-X18 mid4g mid4h mid3d sel3 sel3n mux2 size='nmos_size'
-
-X30 mid3a mid3alv Vdd2 0 levr
-X31 mid3b mid3blv Vdd2 0 levr
-X32 mid3c mid3clv Vdd2 0 levr
-X33 mid3d mid3dlv Vdd2 0 levr
-
-X7 mid3alv mid3blv mid2a sel2 sel2n mux2 size='nmos_size'
-X8 mid3clv mid3dlv mid2b sel2 sel2n mux2 size='nmos_size'
-
-X9 mid2a mid2b mid1a sel1 sel1n mux2 size='nmos_size'
-
-X10 mid1a out Vdd2 0 levr
-
-Xs1 0 sram1 Vsram 0 inv nsize=32 psize='32*pnratio'
-Xs0 Vsram sram0 Vsram 0 inv nsize=32 psize='32*pnratio'
-
-
-
-.TEMP tempr
-
-.OP
-.OPTIONS POST
-
-.tran 'simt/10000' '2*simt'
-.measure tran Edrivers INTEG I(Vdd1)
-.measure tran Elevl INTEG I(Vdd2) 
-.measure tran Esram INTEG I(Vsram) 
-.measure tran E Param=('(-Edrivers-Elevl-Esram)*Vol')
-.measure tran power Param=('E/simt/2')
-
-
-.end
diff --git vtr_flow/scripts/spice/lut/6_na.spz vtr_flow/scripts/spice/lut/6_na.spz
deleted file mode 100644
index c5b6298..0000000
--- vtr_flow/scripts/spice/lut/6_na.spz
+++ /dev/null
@@ -1,151 +0,0 @@
-.param rise = 'simt/500'
-
-
-Vdd1 Vdd1 0 Vol
-Vdd2 Vdd2 0 Vol
-Vsram Vsram 0 Vol
-
-Vin1 in1 0 Vol
-Vin2 in2 0 Vol
-Vin3 in3 0 Vol
-Vin4 in4 0 Vol
-Vin5 in5 0 Vol
-Vin6 in6 0 Vol
-
-X1 in1 sel1mid Vdd1 0 inv nsize=1 psize='1*pnratio'
-X2 sel1mid sel1 Vdd1 0 inv nsize=2 psize='2*pnratio'
-X3 in1 sel1n Vdd1 0 inv nsize=2 psize='2*pnratio'
-
-X4 in2 sel2mid Vdd1 0 inv nsize=1 psize='1*pnratio'
-X5 sel2mid sel2 Vdd1 0 inv nsize=2 psize='2*pnratio'
-X6 in2 sel2n Vdd1 0 inv nsize=2 psize='2*pnratio'
-
-X12 in3 sel3mid Vdd1 0 inv nsize=1 psize='1*pnratio'
-X13 sel3mid sel3 Vdd1 0 inv nsize=2 psize='2*pnratio'
-X14 in3 sel3n Vdd1 0 inv nsize=2 psize='2*pnratio'
-
-X19 in4 sel4mid Vdd1 0 inv nsize=1 psize='1*pnratio'
-X20 sel4mid sel4 Vdd1 0 inv nsize=2 psize='2*pnratio'
-X21 in4 sel4n Vdd1 0 inv nsize=2 psize='2*pnratio'
-
-X34 in5 sel5mid Vdd1 0 inv nsize=1 psize='1*pnratio'
-X35 sel5mid sel5 Vdd1 0 inv nsize=2 psize='2*pnratio'
-X36 in5 sel5n Vdd1 0 inv nsize=2 psize='2*pnratio'
-
-X105 in6 sel6mid Vdd1 0 inv nsize=1 psize='1*pnratio'
-X106 sel6mid sel6 Vdd1 0 inv nsize=2 psize='2*pnratio'
-X107 in6 sel6n Vdd1 0 inv nsize=2 psize='2*pnratio'
-
-X57 sram1 sram0 mid6a sel6 sel6n mux2 size=1
-X58 sram0 sram1 mid6b sel6 sel6n mux2 size=1
-X59 sram0 sram1 mid6c sel6 sel6n mux2 size=1
-X60 sram1 sram0 mid6d sel6 sel6n mux2 size=1
-X61 sram0 sram1 mid6e sel6 sel6n mux2 size=1
-X62 sram1 sram0 mid6f sel6 sel6n mux2 size=1
-X63 sram1 sram0 mid6g sel6 sel6n mux2 size=1
-X64 sram0 sram1 mid6h sel6 sel6n mux2 size=1
-X65 sram0 sram1 mid6i sel6 sel6n mux2 size=1
-X66 sram1 sram0 mid6j sel6 sel6n mux2 size=1
-X67 sram1 sram0 mid6k sel6 sel6n mux2 size=1
-X68 sram0 sram1 mid6l sel6 sel6n mux2 size=1
-X69 sram1 sram0 mid6m sel6 sel6n mux2 size=1
-X70 sram0 sram1 mid6n sel6 sel6n mux2 size=1
-X71 sram0 sram1 mid6o sel6 sel6n mux2 size=1
-X72 sram1 sram0 mid6p sel6 sel6n mux2 size=1
-X73 sram0 sram1 mid6q sel6 sel6n mux2 size=1
-X74 sram1 sram0 mid6r sel6 sel6n mux2 size=1
-X75 sram1 sram0 mid6s sel6 sel6n mux2 size=1
-X76 sram0 sram1 mid6t sel6 sel6n mux2 size=1
-X77 sram1 sram0 mid6u sel6 sel6n mux2 size=1
-X78 sram0 sram1 mid6v sel6 sel6n mux2 size=1
-X79 sram0 sram1 mid6w sel6 sel6n mux2 size=1
-X80 sram1 sram0 mid6x sel6 sel6n mux2 size=1
-X81 sram1 sram0 mid6y sel6 sel6n mux2 size=1
-X82 sram0 sram1 mid6z sel6 sel6n mux2 size=1
-X83 sram0 sram1 mid6za sel6 sel6n mux2 size=1
-X84 sram1 sram0 mid6zb sel6 sel6n mux2 size=1
-X85 sram0 sram1 mid6zc sel6 sel6n mux2 size=1
-X86 sram1 sram0 mid6zd sel6 sel6n mux2 size=1
-X87 sram1 sram0 mid6ze sel6 sel6n mux2 size=1
-X88 sram0 sram1 mid6zf sel6 sel6n mux2 size=1
-
-X37 mid6a mid6b mid5a sel5 sel5n mux2 size=1
-X38 mid6c mid6d mid5b sel5 sel5n mux2 size=1
-X39 mid6e mid6f mid5c sel5 sel5n mux2 size=1
-X40 mid6g mid6h mid5d sel5 sel5n mux2 size=1
-X41 mid6i mid6j mid5e sel5 sel5n mux2 size=1
-X42 mid6k mid6l mid5f sel5 sel5n mux2 size=1
-X43 mid6m mid6n mid5g sel5 sel5n mux2 size=1
-X44 mid6o mid6p mid5h sel5 sel5n mux2 size=1
-X45 mid6q mid6r mid5i sel5 sel5n mux2 size=1
-X46 mid6s mid6t mid5j sel5 sel5n mux2 size=1
-X47 mid6u mid6v mid5k sel5 sel5n mux2 size=1
-X48 mid6w mid6x mid5l sel5 sel5n mux2 size=1
-X49 mid6y mid6z mid5m sel5 sel5n mux2 size=1
-X50 mid6za mid6zb mid5n sel5 sel5n mux2 size=1
-X51 mid6zc mid6zd mid5o sel5 sel5n mux2 size=1
-X52 mid6ze mid6zf mid5p sel5 sel5n mux2 size=1
-
-X89  mid5a mid5alv Vdd2 0 levr
-X90  mid5b mid5blv Vdd2 0 levr
-X91  mid5c mid5clv Vdd2 0 levr
-X92  mid5d mid5dlv Vdd2 0 levr
-X93  mid5e mid5elv Vdd2 0 levr
-X94  mid5f mid5flv Vdd2 0 levr
-X95  mid5g mid5glv Vdd2 0 levr
-X96  mid5h mid5hlv Vdd2 0 levr
-X97  mid5i mid5ilv Vdd2 0 levr
-X98  mid5j mid5jlv Vdd2 0 levr
-X99  mid5k mid5klv Vdd2 0 levr
-X100 mid5l mid5llv Vdd2 0 levr
-X101 mid5m mid5mlv Vdd2 0 levr
-X102 mid5n mid5nlv Vdd2 0 levr
-X103 mid5o mid5olv Vdd2 0 levr
-X104 mid5p mid5plv Vdd2 0 levr
-
-X22 mid5alv mid5blv mid4a sel4 sel4n mux2 size=1
-X23 mid5clv mid5dlv mid4b sel4 sel4n mux2 size=1
-X24 mid5elv mid5flv mid4c sel4 sel4n mux2 size=1
-X25 mid5glv mid5hlv mid4d sel4 sel4n mux2 size=1
-X26 mid5ilv mid5jlv mid4e sel4 sel4n mux2 size=1
-X27 mid5klv mid5llv mid4f sel4 sel4n mux2 size=1
-X28 mid5mlv mid5nlv mid4g sel4 sel4n mux2 size=1
-X29 mid5olv mid5plv mid4h sel4 sel4n mux2 size=1
-
-
-X15 mid4a mid4b mid3a sel3 sel3n mux2 size=1
-X16 mid4c mid4d mid3b sel3 sel3n mux2 size=1
-X17 mid4e mid4f mid3c sel3 sel3n mux2 size=1
-X18 mid4g mid4h mid3d sel3 sel3n mux2 size=1
-
-X30 mid3a mid3alv Vdd2 0 levr
-X31 mid3b mid3blv Vdd2 0 levr
-X32 mid3c mid3clv Vdd2 0 levr
-X33 mid3d mid3dlv Vdd2 0 levr
-
-X7 mid3alv mid3blv mid2a sel2 sel2n mux2 size=1
-X8 mid3clv mid3dlv mid2b sel2 sel2n mux2 size=1
-
-X9 mid2a mid2b mid1a sel1 sel1n mux2 size=1
-
-X10 mid1a out Vdd2 0 levr
-
-R0 sram1 Vsram 0
-R1 sram0 0 0
-
-
-
-.TEMP tempr
-
-.OP
-.OPTIONS POST
-
-.tran 'simt/10000' '2*simt'
-.measure tran Edrivers INTEG I(Vdd1) 
-.measure tran Elevl INTEG I(Vdd2) 
-.measure tran Esram INTEG I(Vsram) 
-.measure tran E Param=('(-Edrivers-Elevl-Esram)*Vol')
-.measure tran power Param=('E/simt/2')
-
-
-.end
diff --git vtr_flow/scripts/spice/mux/16.spz vtr_flow/scripts/spice/mux/16.spz
deleted file mode 100644
index 04237c0..0000000
--- vtr_flow/scripts/spice/mux/16.spz
+++ /dev/null
@@ -1,36 +0,0 @@
-.param rise = 'simt/500'
-
-Vin in 0 PULSE(Vol 0 'simt/4' 'rise' 'rise' 'simt/2-rise' 'simt')
-Vdrive Vdrive 0 Vol
-Vref Vref 0 Vol
-Vsram sram1 0 Vol
-Vbuf Vbuf 0 Vol
-
-X0 in a Vdrive 0 inv nsize=10 psize='10*pnratio'
-Xref in x Vref 0 inv nsize=10 psize='10*pnratio'
-X1 a a a a mida sram1 0 0 0 mux4 size='nmos_size'
-X2 a a a a midb sram1 0 0 0 mux4 size='nmos_size'
-X3 a a a a midc sram1 0 0 0 mux4 size='nmos_size'
-X4 a a a a midd sram1 0 0 0 mux4 size='nmos_size'
-X5 mida midb midc midd out sram1 0 0 0 mux4 size='nmos_size'
-
-
-.TEMP tempr
-
-.OP
-.OPTIONS POST
-
-
-
-.tran 'simt/10000' 'simt'
-
-.measure tran Edrive integ I(Vdrive)
-.measure tran Eref integ I(Vref)
-.measure tran Esram integ I(Vsram)
-.measure tran Ebuf integ I(Vbuf)
-.measure tran E Param=('(-Edrive+Eref)*Vol')
-.measure tran power Param=('E/simt')
-
-
-.end
-
diff --git vtr_flow/scripts/spice/mux/16_na.spz vtr_flow/scripts/spice/mux/16_na.spz
deleted file mode 100644
index 17ca520..0000000
--- vtr_flow/scripts/spice/mux/16_na.spz
+++ /dev/null
@@ -1,34 +0,0 @@
-.param rise = 'simt/500'
-
-Vin in 0 PULSE(Vol 0 'simt/4' 'rise' 'rise' 'simt/2-rise' 'simt')
-Vdrive Vdrive 0 Vol
-Vref Vref 0 Vol
-Vsram sram1 0 Vol
-Vbuf Vbuf 0 Vol
-
-X1 Vdrive 0 0 0 mida sram1 0 0 0 mux4 size=1
-X2 0 0 0 0 midb sram1 0 0 0 mux4 size=1
-X3 0 0 0 0 midc sram1 0 0 0 mux4 size=1
-X4 0 0 0 0 midd sram1 0 0 0 mux4 size=1
-X5 mida midb midc midd out sram1 0 0 0 mux4 size=1
-
-
-.TEMP tempr
-
-.OP
-.OPTIONS POST
-
-
-
-.tran 'simt/10000' 'simt'
-
-.measure tran Edrive integ I(Vdrive)
-.measure tran Eref integ I(Vref)
-.measure tran Esram integ I(Vsram)
-.measure tran Ebuf integ I(Vbuf)
-.measure tran E Param=('(-Edrive)*Vol')
-.measure tran power Param=('E/simt')
-
-
-.end
-
diff --git vtr_flow/scripts/spice/mux/25.spz vtr_flow/scripts/spice/mux/25.spz
deleted file mode 100644
index b1c6be9..0000000
--- vtr_flow/scripts/spice/mux/25.spz
+++ /dev/null
@@ -1,37 +0,0 @@
-.param rise = 'simt/500'
-
-Vin in 0 PULSE(Vol 0 'simt/4' 'rise' 'rise' 'simt/2-rise' 'simt')
-Vdrive Vdrive 0 Vol
-Vref Vref 0 Vol
-Vsram sram1 0 Vol
-Vbuf Vbuf 0 Vol
-
-X0 in a Vdrive 0 inv nsize=10 psize='10*pnratio'
-Xref in x Vref 0 inv nsize=10 psize='10*pnratio'
-X1 a a a a a mida sram1 0 0 0 0 mux5 size='nmos_size'
-X2 a a a a a midb sram1 0 0 0 0 mux5 size='nmos_size'
-X3 a a a a a midc sram1 0 0 0 0 mux5 size='nmos_size'
-X4 a a a a a midd sram1 0 0 0 0 mux5 size='nmos_size'
-X5 a a a a a mide sram1 0 0 0 0 mux5 size='nmos_size'
-X6 mida midb midc midd mide out sram1 0 0 0 0 mux5 size='nmos_size'
-
-
-.TEMP tempr
-
-.OP
-.OPTIONS POST
-
-
-
-.tran 'simt/10000' 'simt'
-
-.measure tran Edrive integ I(Vdrive)
-.measure tran Eref integ I(Vref)
-.measure tran Esram integ I(Vsram)
-.measure tran Ebuf integ I(Vbuf)
-.measure tran E Param=('(-Edrive+Eref)*Vol')
-.measure tran power Param=('E/simt')
-
-
-.end
-
diff --git vtr_flow/scripts/spice/mux/25_na.spz vtr_flow/scripts/spice/mux/25_na.spz
deleted file mode 100644
index 6e27e43..0000000
--- vtr_flow/scripts/spice/mux/25_na.spz
+++ /dev/null
@@ -1,35 +0,0 @@
-.param rise = 'simt/500'
-
-Vin in 0 PULSE(Vol 0 'simt/4' 'rise' 'rise' 'simt/2-rise' 'simt')
-Vdrive Vdrive 0 Vol
-Vref Vref 0 Vol
-Vsram sram1 0 Vol
-Vbuf Vbuf 0 Vol
-
-X1 Vdrive 0 0 0 0 mida sram1 0 0 0 0 mux5 size=1
-X2 0 0 0 0 0 midb sram1 0 0 0 0 mux5 size=1
-X3 0 0 0 0 0 midc sram1 0 0 0 0 mux5 size=1
-X4 0 0 0 0 0 midd sram1 0 0 0 0 mux5 size=1
-X5 0 0 0 0 0 mide sram1 0 0 0 0 mux5 size=1
-X6 mida midb midc midd mide out sram1 0 0 0 0 mux5 size=1
-
-
-.TEMP tempr
-
-.OP
-.OPTIONS POST
-
-
-
-.tran 'simt/10000' 'simt'
-
-.measure tran Edrive integ I(Vdrive)
-.measure tran Eref integ I(Vref)
-.measure tran Esram integ I(Vsram)
-.measure tran Ebuf integ I(Vbuf)
-.measure tran E Param=('(-Edrive)*Vol')
-.measure tran power Param=('E/simt')
-
-
-.end
-
diff --git vtr_flow/scripts/spice/mux/4.spz vtr_flow/scripts/spice/mux/4.spz
deleted file mode 100644
index 4eddae5..0000000
--- vtr_flow/scripts/spice/mux/4.spz
+++ /dev/null
@@ -1,36 +0,0 @@
-.param rise = 'simt/500'
-
-Vin in 0 PULSE(Vol 0 'simt/4' 'rise' 'rise' 'simt/2-rise' 'simt')
-Vdrive Vdrive 0 Vol
-Vref Vref 0 Vol
-Vsram sram1 0 Vol
-Vbuf Vbuf 0 Vol
-
-X0 in a Vdrive 0 inv nsize=4 psize='4*pnratio'
-Xref in x Vref 0 inv nsize=4 psize='4*pnratio'
-
-X1 a a mida sram1 0 mux2 size='nmos_size'
-X2 a a midb sram1 0 mux2 size='nmos_size'
-X3 mida midb out sram1 0 mux2 size='nmos_size'
-
-
-
-.TEMP tempr
-
-.OP
-.OPTIONS POST
-
-
-
-.tran 'simt/10000' 'simt'
-
-.measure tran Edrive integ I(Vdrive)
-.measure tran Eref integ I(Vref)
-.measure tran Esram integ I(Vsram)
-.measure tran Ebuf integ I(Vbuf)
-.measure tran E Param=('(-Edrive+Eref)*Vol')
-.measure tran power Param=('E/simt')
-
-
-.end
-
diff --git vtr_flow/scripts/spice/mux/4_na.spz vtr_flow/scripts/spice/mux/4_na.spz
deleted file mode 100644
index 47c8c87..0000000
--- vtr_flow/scripts/spice/mux/4_na.spz
+++ /dev/null
@@ -1,33 +0,0 @@
-.param rise = 'simt/500'
-
-Vin in 0 PULSE(Vol 0 'simt/4' 'rise' 'rise' 'simt/2-rise' 'simt')
-Vdrive Vdrive 0 Vol
-Vref Vref 0 Vol
-Vsram sram1 0 Vol
-Vbuf Vbuf 0 Vol
-
-X1 Vdrive 0 mida sram1 0 mux2 size=1
-X2 0 0 midb sram1 0 mux2 size=1
-X3 mida midb out sram1 0 mux2 size=1
-
-
-
-.TEMP tempr
-
-.OP
-.OPTIONS POST
-
-
-
-.tran 'simt/10000' 'simt'
-
-.measure tran Edrive integ I(Vdrive)
-.measure tran Eref integ I(Vref)
-.measure tran Esram integ I(Vsram)
-.measure tran Ebuf integ I(Vbuf)
-.measure tran E Param=('(-Edrive)*Vol')
-.measure tran power Param=('E/simt')
-
-
-.end
-
diff --git vtr_flow/scripts/spice/mux/9.spz vtr_flow/scripts/spice/mux/9.spz
deleted file mode 100644
index 29c9c8e..0000000
--- vtr_flow/scripts/spice/mux/9.spz
+++ /dev/null
@@ -1,36 +0,0 @@
-.param rise = 'simt/500'
-
-Vin in 0 PULSE(Vol 0 'simt/4' 'rise' 'rise' 'simt/2-rise' 'simt')
-Vdrive Vdrive 0 Vol
-Vref Vref 0 Vol
-Vsram sram1 0 Vol
-Vbuf Vbuf 0 Vol
-
-X0 in a Vdrive 0 inv nsize=8 psize='8*pnratio'
-Xref in x Vref 0 inv nsize=8 psize='8*pnratio'
-X1 a a a mida sram1 0 0 mux3 size='nmos_size'
-X2 a a a midb sram1 0 0 mux3 size='nmos_size'
-X3 a a a midc sram1 0 0 mux3 size='nmos_size'
-X4 mida midb midc out sram1 0 0 mux3 size='nmos_size'
-
-
-
-.TEMP tempr
-
-.OP
-.OPTIONS POST
-
-
-
-.tran 'simt/10000' 'simt'
-
-.measure tran Edrive integ I(Vdrive)
-.measure tran Eref integ I(Vref)
-.measure tran Esram integ I(Vsram)
-.measure tran Ebuf integ I(Vbuf)
-.measure tran E Param=('(-Edrive+Eref)*Vol')
-.measure tran power Param=('E/simt')
-
-
-.end
-
diff --git vtr_flow/scripts/spice/mux/9_na.spz vtr_flow/scripts/spice/mux/9_na.spz
deleted file mode 100644
index a444343..0000000
--- vtr_flow/scripts/spice/mux/9_na.spz
+++ /dev/null
@@ -1,34 +0,0 @@
-.param rise = 'simt/500'
-
-Vin in 0 PULSE(Vol 0 'simt/4' 'rise' 'rise' 'simt/2-rise' 'simt')
-Vdrive Vdrive 0 Vol
-Vref Vref 0 Vol
-Vsram sram1 0 Vol
-Vbuf Vbuf 0 Vol
-
-X1 Vdrive 0 0 mida sram1 0 0 mux3 size=1
-X2 0 0 0 midb sram1 0 0 mux3 size=1
-X3 0 0 0 midc sram1 0 0 mux3 size=1
-X4 mida midb midc out sram1 0 0 mux3 size=1
-
-
-
-.TEMP tempr
-
-.OP
-.OPTIONS POST
-
-
-
-.tran 'simt/10000' 'simt'
-
-.measure tran Edrive integ I(Vdrive)
-.measure tran Eref integ I(Vref)
-.measure tran Esram integ I(Vsram)
-.measure tran Ebuf integ I(Vbuf)
-.measure tran E Param=('(-Edrive)*Vol')
-.measure tran power Param=('E/simt')
-
-
-.end
-
diff --git vtr_flow/scripts/spice/run_spice.py vtr_flow/scripts/spice/run_spice.py
deleted file mode 100644
index dda356e..0000000
--- vtr_flow/scripts/spice/run_spice.py
+++ /dev/null
@@ -1,115 +0,0 @@
-#!/usr/bin/python
-
-import sys
-import subprocess
-import os
-import os.path
-import re
-from subprocess import Popen, PIPE, STDOUT
-
-my_dir = ""
-
-if len(sys.argv) < 9:
-    print ("Usage: spice.py <tech_file> <tech_size> <Vdd> <P/N> <temp> <activity [hz]> <component_type> <size> <nmos_size>")
-    sys.exit();
-    
-my_dir = os.path.dirname(os.path.realpath(__file__));
-    
-tech_file = sys.argv[1]
-tech_file = os.path.abspath(tech_file)
-tech_size = sys.argv[2]
-Vdd = sys.argv[3]
-pn = sys.argv[4]
-temp = sys.argv[5]
-activity = sys.argv[6]
-type = sys.argv[7]
-size = sys.argv[8]
-
-do_nmos_size = False
-if len(sys.argv) > 9:
-    do_nmos_size = True
-    nmos_size = sys.argv[9]
-
-if (activity == "h"):
-    na = 0
-elif (activity == "z"):
-    na = 1
-else:
-    print("Invalid activity type\n");
-    sys.exit()
-    
-base_dir = os.path.join(my_dir)
-temp_dir = os.path.join(base_dir, "temp")
-
-
-if not os.path.exists(temp_dir):
-    os.mkdir(temp_dir)
-
-file_name = type + "_" + str(size) 
-
-if na:
-    file_path = os.path.join(temp_dir, file_name + "_na.sp")
-else:
-    file_path = os.path.join(temp_dir, file_name + ".sp")
-
-f = open(file_path, 'w')
-
-f.write ("Auto Spice\n")
-f.write (".include \"" + tech_file + "\n")
-
-f.write (".param tech = " + str(tech_size) + "e-9\n")
-f.write(".param tempr = " + temp + "\n")
-f.write(".param simt = 5n\n")
-
-
-f.write(".param Vol=" + Vdd + "\n")
-f.write(".param pnratio=" + pn + "\n")
-
-if do_nmos_size:
-    f.write(".param nmos_size=" + nmos_size + "\n")
-
-subckt_path = os.path.join(base_dir, "subckt")
-f.write(".include " + subckt_path + "/nmos_pmos.sp\n")
-f.write(".include " + subckt_path + "/mux2.sp\n")
-f.write(".include " + subckt_path + "/mux2trans.sp\n")
-f.write(".include " + subckt_path + "/mux3.sp\n")
-f.write(".include " + subckt_path + "/mux4.sp\n")
-f.write(".include " + subckt_path + "/mux5.sp\n")
-f.write(".include " + subckt_path + "/inv.sp\n")
-f.write(".include " + subckt_path + "/dff.sp\n")
-f.write(".include " + subckt_path + "/level_restorer.sp\n")
-
-if na:
-    read_file_path = os.path.join(base_dir, type, size + "_na.spz")
-else:
-    read_file_path = os.path.join(base_dir, type, size + ".spz")
-
-
-
-fr = open(read_file_path)
-f.write(fr.read())
-fr.close()
-f.close()
-
-cmd = "hspice " + file_path
-# print cmd 
-
-p = Popen(cmd, shell=True, stdout=PIPE, stderr=STDOUT, cwd=temp_dir)
-stdout, stderr = p.communicate()
-
-if re.search("error", stdout):
-    print "Error" 
-
-else:
-    m = re.search("^\s*power=\s*(\S*).*$", stdout, re.MULTILINE)
-    if (m):
-        print m.group(1)
-
-
-# f = open("~/spice_modeling/" + sys.argv[1] + ".spx")
-
-
-
-
-
-# hspice ~/spice_modeling/$1 2>&1 | grep -P "^\s+e=|\s+tech_size="
diff --git vtr_flow/scripts/spice/subckt/dff.sp vtr_flow/scripts/spice/subckt/dff.sp
deleted file mode 100644
index f099f85..0000000
--- vtr_flow/scripts/spice/subckt/dff.sp
+++ /dev/null
@@ -1,17 +0,0 @@
-* DFF
-
-*.subckt mux2trans in0 in1 out clk clkn Vdd Gnd size=1 pnratio=2
-*.subckt inv in out Vdd Gnd nsize=1 psize=2
-
-
-.subckt dff D Q clk clkn Vdd Gnd pnratio=2 size=1
-
-X0 D mux1in mux1out clk clkn Vdd Gnd mux2trans size='size' pnratio='pnratio'
-X1 mux1out mux2in Vdd Gnd inv nsize=1 psize='pnratio'
-X2 mux2in mux1in Vdd Gnd inv nsize=1 psize='pnratio'
-
-X3 Qn mux2in mux2out clk clkn Vdd Gnd mux2trans size='size' pnratio='pnratio'
-X4 mux2out Q Vdd Gnd inv nsize=1 psize='pnratio'
-X5 Q Qn Vdd Gnd inv nsize=1 psize='pnratio'
-
-.ends
\ No newline at end of file
diff --git vtr_flow/scripts/spice/subckt/inv.sp vtr_flow/scripts/spice/subckt/inv.sp
deleted file mode 100644
index 4217922..0000000
--- vtr_flow/scripts/spice/subckt/inv.sp
+++ /dev/null
@@ -1,15 +0,0 @@
-* Simple Inverter
-
-.subckt inv in out Vdd Gnd nsize=1 psize=2
-
-X0 out in Gnd Gnd nfet size='nsize'
-X1 out in Vdd Vdd pfet size='psize'
-
-.ends
-
-.subckt invd inp inn out Vdd Gnd nsize=1 psize=2
-
-X0 out inn Gnd Gnd nfet size='nsize'
-X1 out inp Vdd Vdd pfet size='psize'
-
-.ends
\ No newline at end of file
diff --git vtr_flow/scripts/spice/subckt/level_restorer.sp vtr_flow/scripts/spice/subckt/level_restorer.sp
deleted file mode 100644
index 72068e8..0000000
--- vtr_flow/scripts/spice/subckt/level_restorer.sp
+++ /dev/null
@@ -1,8 +0,0 @@
-* Level Restorer
-
-.subckt levr in out Vdd Gnd
-
-X0 in out Vdd Gnd inv nsize=2 psize=1
-X11 in out Vdd Vdd pfetz wsize=1 lsize=2
-
-.ends
\ No newline at end of file
diff --git vtr_flow/scripts/spice/subckt/mux2.sp vtr_flow/scripts/spice/subckt/mux2.sp
deleted file mode 100644
index 305021d..0000000
--- vtr_flow/scripts/spice/subckt/mux2.sp
+++ /dev/null
@@ -1,10 +0,0 @@
-* 2 input mux
-
-*.subckt nfet drain gate source size=1 
-
-.subckt mux2 in0 in1 out sel0 sel1 size=1 
-
-X0 in0 sel0 out 0 nfet size='size'
-X1 in1 sel1 out 0 nfet size='size'
-	
-.ends
diff --git vtr_flow/scripts/spice/subckt/mux2trans.sp vtr_flow/scripts/spice/subckt/mux2trans.sp
deleted file mode 100644
index 3a545e2..0000000
--- vtr_flow/scripts/spice/subckt/mux2trans.sp
+++ /dev/null
@@ -1,11 +0,0 @@
-* 2-Mux w/ Transmission Gates
-
-.subckt mux2trans in0 in1 out clk clkn Vdd Gnd size=1 pnratio=2
-
-X0 in0 clkn out Gnd nfet size='size'
-X1 out clk in0 Vdd pfet size='size*pnratio'
-
-X2 in1 clk out Gnd nfet size='size'
-X3 out clkn in1 Vdd pfet size='size*pnratio'
-
-.ends
\ No newline at end of file
diff --git vtr_flow/scripts/spice/subckt/mux3.sp vtr_flow/scripts/spice/subckt/mux3.sp
deleted file mode 100644
index bd205e5..0000000
--- vtr_flow/scripts/spice/subckt/mux3.sp
+++ /dev/null
@@ -1,11 +0,0 @@
-* 3 input mux
-
-*.subckt nfet drain gate source size=1 
-
-.subckt mux3 in0 in1 in2 out sel0 sel1 sel2 size=1 
-
-X0 in0 sel0 out 0 nfet size='size'
-X1 in1 sel1 out 0 nfet size='size'
-X2 in2 sel2 out 0 nfet size='size'
-	
-.ends
diff --git vtr_flow/scripts/spice/subckt/mux4.sp vtr_flow/scripts/spice/subckt/mux4.sp
deleted file mode 100644
index e01168b..0000000
--- vtr_flow/scripts/spice/subckt/mux4.sp
+++ /dev/null
@@ -1,12 +0,0 @@
-* 4 input mux
-
-*.subckt nfet drain gate source size=1 
-
-.subckt mux4 in0 in1 in2 in3 out sel0 sel1 sel2 sel3 size=1 
-
-X0 in0 sel0 out 0 nfet size='size'
-X1 in1 sel1 out 0 nfet size='size'
-X2 in2 sel2 out 0 nfet size='size'
-X3 in3 sel3 out 0 nfet size='size'
-	
-.ends
diff --git vtr_flow/scripts/spice/subckt/mux5.sp vtr_flow/scripts/spice/subckt/mux5.sp
deleted file mode 100644
index 3c6fe32..0000000
--- vtr_flow/scripts/spice/subckt/mux5.sp
+++ /dev/null
@@ -1,13 +0,0 @@
-* 4 input mux
-
-*.subckt nfet drain gate source size=1 
-
-.subckt mux5 in0 in1 in2 in3 in4 out sel0 sel1 sel2 sel3 sel4 size=1 
-
-X0 in0 sel0 out 0 nfet size='size'
-X1 in1 sel1 out 0 nfet size='size'
-X2 in2 sel2 out 0 nfet size='size'
-X3 in3 sel3 out 0 nfet size='size'
-X4 in4 sel4 out 0 nfet size='size'
-	
-.ends
diff --git vtr_flow/scripts/spice/subckt/nmos_pmos.sp vtr_flow/scripts/spice/subckt/nmos_pmos.sp
deleted file mode 100644
index ae4d3b6..0000000
--- vtr_flow/scripts/spice/subckt/nmos_pmos.sp
+++ /dev/null
@@ -1,21 +0,0 @@
-* NMOS/PMOS
-
-* Diffusion sizes:
-* Wdiff = size * 2.5 * tech
-* Ldiff = 2.25 * tech
-
-.subckt nfet drain gate source body size=1 
-	M1 drain gate source body nmos L='tech' W='2.5*size*tech' AS='size*2.5*tech*2.25*tech' AD='size*2.5*tech*2.25*tech' PS='2*2.25*tech+size*2.5*tech'  PD='2*2.25*tech+size*2.5*tech'	
-.ends
-
-.subckt pfet drain gate source body size=1 
-	M1 drain gate source body pmos L='tech' W='2.5*size*tech' AS='size*2.5*tech*2.25*tech' AD='size*2.5*tech*2.25*tech' PS='2*2.25*tech+size*2.5*tech'  PD='2*2.25*tech+size*2.5*tech'		
-.ends
-
-.subckt pfetz drain gate source body wsize=1 lsize=1
-	M1 drain gate source body pmos L='lsize*tech' W='2.5*wsize*tech' AS='wsize*2.5*tech*2.25*lsize*tech' AD='wsize*2.5*tech*2.25*lsize*tech' PS='2*2.25*lsize*tech+wsize*2.5*tech'  PD='2*2.25*lsize*tech+wsize*2.5*tech'	
-.ends
-
-.subckt nfetz drain gate source body wsize=1 lsize=1
-	M1 drain gate source body nmos L='lsize*tech' W='2.5*wsize*tech' AS='wsize*2.5*tech*2.25*lsize*tech' AD='wsize*2.5*tech*2.25*lsize*tech' PS='2*2.25*lsize*tech+wsize*2.5*tech'  PD='2*2.25*lsize*tech+wsize*2.5*tech'	
-.ends
\ No newline at end of file
diff --git vtr_flow/scripts/ucf2ioplace.py vtr_flow/scripts/ucf2ioplace.py
new file mode 100644
index 0000000..7c1df1a
--- /dev/null
+++ vtr_flow/scripts/ucf2ioplace.py
@@ -0,0 +1,63 @@
+#!/usr/bin/python
+
+import sys
+import re
+
+x2v = { '0': '0',
+        '1': '73',
+        }
+
+def main(argv):
+        if len(argv) != 2:
+                print "Usage ./ucf2ioplace.py <UCF file> <PKG file> > output.ioplace"
+                return
+
+        ucf = argv[0]
+        template = argv[1]
+
+        loc2vpr = {}
+        r = re.compile(r"pin IOB_X(\d+)Y(\d+) (.*)")
+        with open(template) as fp:
+                for line in fp:
+                        line = line.strip()
+                        m = r.match(line)
+                        if m:
+                            (x,y,loc) = m.groups()
+                            y = int(y)
+                            ymod2 = y%2
+                            loc2vpr[loc] = [x2v[x],str(y+ymod2),str(1-ymod2)]
+
+        print "# VPR pin constraints file generated from '%s' using '%s' as template" % (ucf,template)
+        print ""
+        print "##block name    x       y       subblk  block number"
+        print "#----------     --      --      ------  ------------"
+        print ""
+
+        notfound = 0
+        r = re.compile(r"^NET\s+\"([^\"]+)\".*LOC\s*=\s*\"([^\"]+)\".*;")
+        r2 = re.compile(r"(.*)[<\[](\d+)[\]>]")
+        with open(ucf) as fp:
+                for line in fp:
+                        m = r.match(line)
+                        if m:
+                                net,loc = m.group(1,2)
+                                # If this is a vector index, e.g. foo[3]
+                                # then transform to foo~3
+                                m2 = r2.match(net)
+                                if loc not in loc2vpr:
+                                        print >>sys.stderr, "WARNING: LOC=\"%s\" not found, ignoring!" % loc
+                                        notfound += 1
+                                        continue
+
+                                print '\t'.join( [net] + loc2vpr[loc] )
+                                print 'out:'+'\t'.join( [net] + loc2vpr[loc] )
+                                if m2:
+                                    net = m2.group(1) + "~" + m2.group(2)
+                                print 'top^'+'\t'.join( [net] + loc2vpr[loc] )
+                                print 'out:top^'+'\t'.join( [net] + loc2vpr[loc] )
+        if notfound:
+                print >>sys.stderr, "WARNING: %d LOCs not found in template!" % notfound
+                        
+
+if __name__ == "__main__":
+        main(sys.argv[1:])
diff --git xdlrc2vpr/Makefile xdlrc2vpr/Makefile
new file mode 100644
index 0000000..9ab81b9
--- /dev/null
+++ xdlrc2vpr/Makefile
@@ -0,0 +1,104 @@
+# Torc - Copyright 2011-2013 University of Southern California.  All Rights Reserved.
+# $HeadURL$
+# $Id$
+
+# This program is free software: you can redistribute it and/or modify it under the terms of the 
+# GNU General Public License as published by the Free Software Foundation, either version 3 of the 
+# License, or (at your option) any later version.
+# 
+# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
+# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See 
+# the GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License along with this program.  If 
+# not, see <http://www.gnu.org/licenses/>.
+
+# Instructions:
+# 1. Define SRC_DIR as an environment variable, or set SRC_DIR in this file as a path to the
+#    torc/trunk/src directory.
+# 2. Define the USER_EXAMPLE_EXEC variable in this file to be the name of your executable.
+# 3. Define the USER_EXAMPLE_OBJS variable in this file to be the list of object files for your 
+#    program.  The Torc object files will be included through the TORC_REAL_OBJS_FILE variable.
+# 4. Create your user example source code, including a main() function.
+# 5. Invoke 'make' to build the Torc objects as well as your user executable.
+
+SRC_DIR = $(abspath ../torc/src)
+TORC_DIR = $(SRC_DIR)/torc
+-include $(SRC_DIR)/Makefile.local
+include $(TORC_DIR)/Makefile.objects
+
+# LDFLAGS
+LDFLAGS = \
+	-L/usr/local/lib \
+	-dead_strip \
+	$(BOOST_LIB_DIR_OPTION) \
+	-lboost_filesystem \
+	-lboost_system \
+	-lboost_regex \
+	-lstdc++ \
+	-lm \
+	-lz \
+	$
+
+EXTRA_CCFLAGS = -std=c++11 \
+	-O3 -g \
+	-Wno-error=unused-local-typedefs \
+	-I../vpr/SRC/base \
+	-I../libarchfpga/include \
+	-I../printhandler/SRC/TIO_InputOutputHandlers \
+	$
+
+# User Example Objects
+USER_EXAMPLE_EXEC := xdlrc2vpr
+USER_EXAMPLE_OBJS := xdlrc2vpr.o
+
+# Local objects
+OBJS = \
+	$(USER_EXAMPLE_OBJS) \
+	$
+
+# Torc Real Objects File
+TORC_REAL_OBJS_FILE = TorcRealObjects
+
+# Local dependencies
+DEPS = $(OBJS:.o=.d)
+
+.PHONY: all
+
+# Make everything by default
+all: \
+	$(USER_EXAMPLE_EXEC) \
+	$
+
+# Dependency Include
+ifneq ($(MAKECMDGOALS), clean)
+ifneq ($(MAKECMDGOALS), clean_torc)
+-include $(DEPS)
+-include $(TORC_DEPS)
+endif
+endif
+
+# Create torc real objects file
+$(TORC_REAL_OBJS_FILE): $(TORC_REAL_OBJS)
+	@echo $(TORC_REAL_OBJS) > $(TORC_REAL_OBJS_FILE)
+
+# make the user example executable
+$(USER_EXAMPLE_EXEC): $(TORC_REAL_OBJS_FILE) $(USER_EXAMPLE_OBJS)
+	$(CC) \
+	@$(TORC_REAL_OBJS_FILE) \
+	$(USER_EXAMPLE_OBJS) \
+	$(CCFLAGS) \
+	$(LDFLAGS) \
+	-o $@
+
+# clean everything (builds on Makefile.targets clean)
+clean::
+	rm -f $(USER_EXAMPLE_EXEC)
+	rm -f $(TORC_REAL_OBJS_FILE)
+
+# Clean Torc Objects / Dependencies
+clean_torc:
+	rm -f $(TORC_REAL_OBJS_FILE) $(TORC_REAL_OBJS) $(TORC_DEPS)
+
+# Include Makefile.targets
+include $(TORC_DIR)/Makefile.targets
diff --git xdlrc2vpr/xdlrc2vpr.cpp xdlrc2vpr/xdlrc2vpr.cpp
new file mode 100644
index 0000000..3046a91
--- /dev/null
+++ xdlrc2vpr/xdlrc2vpr.cpp
@@ -0,0 +1,740 @@
+// Torc - Copyright 2011 University of Southern California.  All Rights Reserved.
+// $HeadURL: https://svn.east.isi.edu/torc/trunk/src/torc/architecture/DDB.cpp $
+// $Id: DDB.cpp 1436 2013-05-06 20:47:54Z nsteiner $
+
+// This program is free software: you can redistribute it and/or modify it under the terms of the 
+// GNU General Public License as published by the Free Software Foundation, either version 3 of the 
+// License, or (at your option) any later version.
+// 
+// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
+// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See 
+// the GNU General Public License for more details.
+// 
+// You should have received a copy of the GNU General Public License along with this program.  If 
+// not, see <http://www.gnu.org/licenses/>.
+
+// *******************************************************************************
+// EH: This file is an adaptation of ../torc/src/torc/architecture/VprExporter.cpp
+// *******************************************************************************
+
+#include "xdlrc2vpr.hpp"
+#include "torc/architecture/OutputStreamHelpers.hpp"
+#include <boost/algorithm/string.hpp>
+#include <boost/lexical_cast.hpp>
+#include <iostream>
+#include <fstream>
+#include <sstream>
+#include <zlib.h>
+
+namespace torc {
+namespace architecture {
+
+	using namespace std;
+	bool operator!=(const Tilewire& lhs, const Tilewire& rhs) {
+		return !(lhs == rhs);
+	}
+
+	const boost::regex Xdlrc2Vpr::re_clk 	= boost::regex("(HCLK|CMT|CLK|GCLK).*");
+	const boost::regex Xdlrc2Vpr::re_124 	= boost::regex("[NESW][NESWLR](\\d)BEG(_[NS])?\\d");
+	const boost::regex Xdlrc2Vpr::re_L 	= boost::regex("L(H|V|VB)(_L)?\\d+");
+	const boost::regex Xdlrc2Vpr::re_CLB	= boost::regex("CLBL[LM]_(M|LL|L)_[ABCD]([1-6]|Q|MUX)?");
+	const boost::regex Xdlrc2Vpr::re_BYP 	= boost::regex("BYP(_ALT)?\\d");
+	const boost::regex Xdlrc2Vpr::re_BOUNCE_NS = boost::regex("(BYP|FAN)_BOUNCE_[NS]3_\\d");
+	const boost::regex Xdlrc2Vpr::re_FAN 	= boost::regex("FAN(_ALT)?\\d");
+	const boost::regex Xdlrc2Vpr::re_BRAM_DI = boost::regex("BRAM_(FIFO36|FIFO18|RAMB18)_DIP?[AB]DIP?[LU]?\\d+");
+	const boost::regex Xdlrc2Vpr::re_BRAM_AD = boost::regex("BRAM_(FIFO36|FIFO18|RAMB18)_ADDR(ARD|BWR)ADDR[LU]?\\d+");
+	const boost::regex Xdlrc2Vpr::re_BRAM_WE = boost::regex("BRAM_(FIFO36|FIFO18|RAMB18)_WE(A|BWE)[LU]?\\d+");
+	const boost::regex Xdlrc2Vpr::re_DSP 	= boost::regex("DSP_[01]_(A|B)\\d+");
+
+	int Xdlrc2Vpr::getIswitch(const ExtendedWireInfo &ewiSrc, const Tilewire &twSnk) {
+		boost::cmatch what;
+		const bool srcIsClk = boost::regex_match(ewiSrc.mWireName, re_clk);
+		int iswitch = DEFAULT_SWITCH_INDEX;
+
+		TilewireVector tilewires;
+		mDDB.expandSegment(twSnk, tilewires);
+
+		bool snkIsClk = false;
+		for (const Tilewire &tw : tilewires) {
+			ExtendedWireInfo ewiSnk(mDDB, tw);
+
+			if (!include(ewiSnk))
+				continue;
+
+			const char *sinkWireName = ewiSnk.mWireName;
+			snkIsClk = snkIsClk || boost::regex_match(ewiSnk.mWireName, re_clk);
+
+			if (boost::regex_match(sinkWireName, what, re_124)) {
+				assert(!srcIsClk);
+				assert(iswitch == DEFAULT_SWITCH_INDEX);
+				string s(what[1]);
+
+				switch (s[0]) {
+					case '1': iswitch = L1_SWITCH_INDEX; break;
+					case '2': iswitch = L2_SWITCH_INDEX; break;
+					case '4': iswitch = L4_SWITCH_INDEX; break;
+					case '6': iswitch = L6_SWITCH_INDEX; break;
+					default: throw;
+				}
+			}
+			else if (boost::regex_match(sinkWireName, what, re_L)) {
+				assert(!srcIsClk);
+				string d(what[1]);
+				if (boost::starts_with(mDDB.getDeviceName(), "xc6")) {
+					assert(iswitch == DEFAULT_SWITCH_INDEX || iswitch == L16_SWITCH_INDEX);
+					iswitch = L16_SWITCH_INDEX;
+				}
+				else throw;
+			}
+			else if (boost::regex_match(sinkWireName, what, re_CLB)) {
+				assert(!srcIsClk);
+				assert(iswitch == DEFAULT_SWITCH_INDEX);
+				string s(what[2]);
+				switch (s[0]) {
+					case '1': iswitch = A1_SWITCH_INDEX; break;
+					case '2': iswitch = A2_SWITCH_INDEX; break;
+					case '3': iswitch = A3_SWITCH_INDEX; break;
+					case '4': iswitch = A4_SWITCH_INDEX; break;
+					case '5': iswitch = A5_SWITCH_INDEX; break;
+					case '6': iswitch = A6_SWITCH_INDEX; break;
+					case '\0':
+					case 'Q':
+					case 'M': iswitch = LUT_SWITCH_INDEX; break;
+					default: throw;
+				}
+			}
+			else if (boost::regex_match(sinkWireName, what, re_BYP)) {
+				assert(!srcIsClk);
+				assert(iswitch == DEFAULT_SWITCH_INDEX);
+				iswitch = BYP_SWITCH_INDEX;
+			}
+			else if (boost::regex_match(sinkWireName, what, re_BYP_B)) {
+				assert(!srcIsClk);
+				assert(iswitch == DEFAULT_SWITCH_INDEX || BYP_B_SWITCH_INDEX);
+				iswitch = BYP_B_SWITCH_INDEX;
+			}
+			else if (boost::regex_match(sinkWireName, what, re_FAN)) {
+				assert(!srcIsClk);
+				assert(iswitch == DEFAULT_SWITCH_INDEX);
+				iswitch = FAN_SWITCH_INDEX;
+			}
+			else if (boost::regex_match(sinkWireName, what, re_BRAM_DI)) {
+				assert(!srcIsClk);
+				assert(iswitch == DEFAULT_SWITCH_INDEX);
+				iswitch = BRAM_DI_SWITCH_INDEX;
+			}
+			else if (boost::regex_match(sinkWireName, what, re_BRAM_AD)) {
+				assert(!srcIsClk);
+				assert(iswitch == DEFAULT_SWITCH_INDEX);
+				iswitch = BRAM_AD_SWITCH_INDEX;
+			}
+			else if (boost::regex_match(sinkWireName, what, re_BRAM_WE)) {
+				assert(!srcIsClk);
+				assert(iswitch == DEFAULT_SWITCH_INDEX);
+				iswitch = BRAM_WE_SWITCH_INDEX;
+			}
+			else if (boost::regex_match(sinkWireName, what, re_DSP)) {
+				assert(!srcIsClk);
+				assert(iswitch == DEFAULT_SWITCH_INDEX);
+				string s(what[1]);
+				switch (s[0]) {
+					case 'A': iswitch = DSP_A_SWITCH_INDEX; break;
+					case 'B': iswitch = DSP_B_SWITCH_INDEX; break;
+					default: throw;
+				}
+			}
+		}
+		if (srcIsClk != snkIsClk) {
+			if (srcIsClk) {
+				assert(iswitch == DEFAULT_SWITCH_INDEX || iswitch == CLK2GEN_SWITCH_INDEX);
+				iswitch = CLK2GEN_SWITCH_INDEX;
+			}
+		}
+
+		return iswitch;
+	}
+
+	void Xdlrc2Vpr::operator()(void) {
+
+		//bool debug = true;
+
+		cout << mDDB;
+		cerr << "sizeof(short) = " << sizeof(short) << endl;
+		cerr << "sizeof(int) = " << sizeof(int) << endl;
+		cerr << "sizeof(float) = " << sizeof(float) << endl;
+		cerr << "sizeof(t_rr_type) = " << sizeof(t_rr_type) << endl;
+		cerr << "sizeof(void*) = " << sizeof(void*) << endl;
+		cerr << "sizeof(t_rr_node) = " << sizeof(t_rr_node) << endl;
+
+		const int num_vpr_nodes = rr_node.size();
+
+		TileCount tileCount = mTiles.getTileCount();
+		map<Tilewire,int> anchor2inode;
+		for(TileIndex tileIndex(0); tileIndex < tileCount; tileIndex++) {
+			// iterate over every wire in the tile
+			const TileInfo& tileInfo = mTiles.getTileInfo(tileIndex);
+			TileTypeIndex tileTypeIndex = tileInfo.getTypeIndex();
+			WireCount wireCount = mTiles.getWireCount(tileTypeIndex);
+			for(WireIndex wireIndex(0); wireIndex < wireCount; wireIndex++) {
+				// take a quick exit if we've already looked at this segment
+				Tilewire currentTilewire(tileIndex, wireIndex);
+
+				// look up the segment information for this tilewire
+				TilewireVector tilewires;
+				mDDB.expandSegment(currentTilewire, tilewires);
+				// if a segment is not real in this device, it won't have any tilewires
+				if (tilewires.empty()) continue;
+				// if this isn't the anchor, ignore it
+				if (currentTilewire != tilewires.front()) continue;
+
+				// determine whether to include this segment or not
+				auto tp = tilewires.cbegin(), te = tilewires.cend();
+				for (; tp < te; tp++) {
+					ExtendedWireInfo ewi(mDDB, *tp);
+					if (include(ewi))
+						break;
+				}
+				if (tp == te) continue;
+
+				bool b = anchor2inode.insert(make_pair(currentTilewire, num_nodes)).second;
+				assert(b);
+				++num_nodes;
+			}
+		}
+		cerr << "Found " << anchor2inode.size() << " total segments compared to expected "
+			<< mSegments.getTotalSegmentCount() << endl;
+
+		/* First, setup the nodes file pointer, writing into a separate file.
+		 * This is necessary and intentional because if we want to write node
+		 * AND switch data (both of which must be contiguous, and not interleaved) 
+		 * as we go along, we either need to store it all in memory and then 
+		 * write it all at the very end, or to write them into separate files.
+		 * A convenient property of gzip streams is that they can be concatenated
+		 * into a single file without penalty; thus we can concat the streams
+		 * into the format expected:   header_and_shim + nodes + edge_switch
+		 * NB: The Makefile is responsible for doing this 'cat'-ing! */
+		stringstream ss;
+		ss << mDDB.getDeviceName() << mPackageName << mPostfix << ".nodes.gz";
+		gzFile fpNodes = gzopen(ss.str().c_str(), "wb6");
+		ss.str("");
+		/* Second, setup the edge/switch data into a separate file */
+		ss << mDDB.getDeviceName() << mPackageName << mPostfix << ".edge_switch.gz";
+		gzFile fpEdgeSwitch = gzopen(ss.str().c_str(), "wb6");
+		gzwrite(fpEdgeSwitch, edge_switch.data(), edge_switch.size());
+		edge_switch.clear();
+		edge_switch.shrink_to_fit();
+
+		cerr << "Before: " << num_vpr_nodes << "/" << gztell(fpEdgeSwitch) << endl;
+
+		auto p = anchor2inode.cbegin();
+		auto e = anchor2inode.cend();
+		ArcVector arcVector;
+		TilewireVector tilewires;
+		vector<short> switches;
+		std::set<int> sinks;
+		ExtendedWireInfo ewi(mDDB);
+
+		ss.str("");
+		ss << mDDB.getDeviceName() << mPackageName << mPostfix << ".tws";
+		ofstream fInode2Tw(ss.str().c_str(), std::ios::binary);
+		//ss << ".txt";
+		//ofstream fInode2TwText(ss.str().c_str());
+		fInode2Tw.write(reinterpret_cast<const char*>(&num_vpr_nodes), sizeof(int));
+
+		while(p != e) {
+			t_rr_node vpr_rr_node;
+
+			// Set coordinates to maximum
+			vpr_rr_node.xlow = numeric_limits<decltype(vpr_rr_node.xlow)>::max();
+			vpr_rr_node.ylow = numeric_limits<decltype(vpr_rr_node.ylow)>::max();
+			vpr_rr_node.xhigh = numeric_limits<decltype(vpr_rr_node.xhigh)>::min();
+			vpr_rr_node.yhigh = numeric_limits<decltype(vpr_rr_node.yhigh)>::min();
+
+			// Set default cost index
+			vpr_rr_node.cost_index = DEFAULT_COST_INDEX;
+
+			// iterate over every segment wire to extract attributes
+			const Tilewire& twAnchor = p->first;
+			const int& inodeAnchor = p->second;
+			++p;
+			tilewires.clear();
+			mDDB.expandSegment(twAnchor, tilewires);
+			auto tp = tilewires.cbegin(), te = tilewires.cend();
+			for(; tp < te; ++tp) {
+				ewi = *tp;
+				if (!include(ewi))
+					continue;
+
+				short row, col;
+				std::tie(row,col) = ewi2rc(ewi);
+				vpr_rr_node.xlow = min(vpr_rr_node.xlow, col);
+				vpr_rr_node.ylow = min(vpr_rr_node.ylow, row);
+				vpr_rr_node.xhigh = max(vpr_rr_node.xhigh, col);
+				vpr_rr_node.yhigh = max(vpr_rr_node.yhigh, row);
+
+				// TODO: Function
+				// Compute cost_index
+				boost::match_results<const char*> what;
+				if (boost::regex_match(ewi.mWireName, re_clk)) {
+					if (vpr_rr_node.cost_index != CLOCK_COST_INDEX) {
+						assert(vpr_rr_node.cost_index == DEFAULT_COST_INDEX);
+						vpr_rr_node.cost_index = CLOCK_COST_INDEX;
+					}
+				} 
+				else if (boost::regex_match(ewi.mWireName, what, re_124)) {
+					string s(what[1]);
+					switch (s[0]) {
+						case '1': 
+							if (vpr_rr_node.cost_index != L1_COST_INDEX) {
+								assert(vpr_rr_node.cost_index == DEFAULT_COST_INDEX);
+								vpr_rr_node.cost_index = L1_COST_INDEX; 
+							}
+							break;
+						case '2': 
+							if (vpr_rr_node.cost_index != L2_COST_INDEX) {
+								assert(vpr_rr_node.cost_index == DEFAULT_COST_INDEX);
+								vpr_rr_node.cost_index = L2_COST_INDEX; 
+							}
+							break;
+						case '4': 
+							if (vpr_rr_node.cost_index != L4_COST_INDEX) {
+								assert(vpr_rr_node.cost_index == DEFAULT_COST_INDEX);
+								vpr_rr_node.cost_index = L4_COST_INDEX; 
+							}
+							break;
+						case '6': 
+							if (vpr_rr_node.cost_index != L6_COST_INDEX) {
+								assert(vpr_rr_node.cost_index == DEFAULT_COST_INDEX);
+								vpr_rr_node.cost_index = L6_COST_INDEX; 
+							}
+							break;
+						default: throw;
+					}
+					//break;
+				} 
+				else if (boost::regex_match(ewi.mWireName, what, re_L)) {
+					string d(what[1]);
+					if (boost::starts_with(mDDB.getDeviceName(), "xc6")) {
+						if (vpr_rr_node.cost_index != L16_COST_INDEX) {
+							assert(vpr_rr_node.cost_index == DEFAULT_COST_INDEX);
+							vpr_rr_node.cost_index = L16_COST_INDEX;
+						}
+					}
+					else throw;
+				}
+				// Treat BYP_BOUNCE_N3_\\d and FAN_BOUNCE_S3_\\d segments as a L1 wire
+				else if (boost::regex_match(ewi.mWireName, what, re_BOUNCE_NS)) {
+					if (vpr_rr_node.cost_index != L1_COST_INDEX) {
+						assert(vpr_rr_node.cost_index == DEFAULT_COST_INDEX);
+						vpr_rr_node.cost_index = L1_COST_INDEX; 
+					}
+				}
+			}
+			assert(vpr_rr_node.xlow != numeric_limits<decltype(vpr_rr_node.xlow)>::max());
+			assert(vpr_rr_node.xhigh != numeric_limits<decltype(vpr_rr_node.xhigh)>::max());
+			assert(vpr_rr_node.ylow != numeric_limits<decltype(vpr_rr_node.ylow)>::min());
+			assert(vpr_rr_node.yhigh != numeric_limits<decltype(vpr_rr_node.yhigh)>::min());
+
+			if (vpr_rr_node.cost_index == DEFAULT_COST_INDEX) {
+				static set<string> wires;
+				ewi = twAnchor;
+				if (!wires.count(ewi.mWireName)) {
+					cerr << "No cost index: " << ewi << endl;
+					wires.insert(ewi.mWireName);
+				}
+			}
+
+			// Horizontal wires (and 0-length wires?)
+			const int rowRange = vpr_rr_node.xhigh - vpr_rr_node.xlow;
+			const int colRange = vpr_rr_node.yhigh - vpr_rr_node.ylow;
+			if(rowRange >= colRange) { 
+				vpr_rr_node.type = CHANX; 
+			}
+			// Vertical wires
+			else /*if(node.mColRange == 0)*/ { 
+				vpr_rr_node.type = CHANY; 
+				vpr_rr_node.cost_index += INV_COST_INDEX_OFFSET;
+			}
+			// Diagonal wires
+			/*else { 
+				vpr_rr_node.type = CHANX;
+			}*/
+
+			ewi = twAnchor;
+
+#if 0
+			// ptc_num and net_num are not used during routing,
+			// claim them for wire/tile to help debugging
+			vpr_rr_node.ptc_num = twAnchor.getWireIndex();
+			vpr_rr_node.net_num = twAnchor.getTileIndex();
+#else
+			vpr_rr_node.ptc_num = vpr_rr_node.net_num = 0;
+#endif
+
+			// no intrinsic cost, and current occupancy is zero
+			vpr_rr_node.occ = 0;
+			// the capacity of every XDLRC wire is one
+			vpr_rr_node.capacity = 1;
+			// does VPR really use fanin information?  we can provide this if it's important
+			vpr_rr_node.fan_in = 0;
+			// ignore direction for now
+			vpr_rr_node.direction = (e_direction)-1;
+
+			vpr_rr_node.edges = reinterpret_cast<decltype(vpr_rr_node.edges)>
+				(gztell(fpEdgeSwitch));
+
+			// Compute edges
+			arcVector.clear();
+			mDDB.expandSegmentSinks(twAnchor, arcVector, DDB::eExpandDirectionNone, true, true, 
+				true, true);
+			auto ap = arcVector.cbegin(), ae = arcVector.cend();
+			sinks.clear();
+			while(ap < ae) {
+				const Arc& arc = *ap++;
+				const Tilewire& twSrc = arc.getSourceTilewire();
+				const Tilewire& twSink = arc.getSinkTilewire();
+
+				// Extract the anchor
+				tilewires.clear();
+				mDDB.expandSegment(twSink, tilewires);
+				auto it = anchor2inode.find(tilewires.front());
+				if (it == anchor2inode.end()) continue;
+				const int& inodeSink = it->second;
+
+				ExtendedWireInfo ewiSrc(mDDB, twSrc);
+				ExtendedWireInfo ewiSnk(mDDB, twSink);
+				static boost::cmatch what;
+				static boost::regex bufg_i("(CMT|CLK)_BUFG_BUFGCTRL\\d+_I0");
+				static boost::regex bufg_o("(CMT|CLK)_BUFG_BUFGCTRL\\d+_O");
+				if (boost::regex_match(ewiSrc.mWireName, bufg_i) && boost::regex_match(ewiSnk.mWireName, bufg_o))
+					continue;
+
+				if (sinks.find(inodeSink) == sinks.end()) {
+					gzwrite(fpEdgeSwitch, &inodeSink, sizeof(inodeSink));
+
+					short iswitch;
+					// For (BYP|FAN)_BOUNCE_[NS]3_\\d arcs, give it the
+					// same delay as a L1 wire
+					if (boost::regex_match(ewiSrc.mWireName, re_BOUNCE_NS)) {
+						iswitch = L1_SWITCH_INDEX;
+					}
+					else 
+						iswitch = getIswitch(ewiSrc, twSink);
+					switches.push_back(iswitch);
+
+
+					sinks.insert(inodeSink);
+				}
+			}
+
+			stitchInode(twAnchor, inodeAnchor, vpr_rr_node, fpEdgeSwitch, switches);
+
+			vpr_rr_node.num_edges = switches.size();
+
+			vpr_rr_node.switches = reinterpret_cast<short*>(gztell(fpEdgeSwitch));
+			gzwrite(fpEdgeSwitch, switches.data(), sizeof(short) * switches.size());
+			switches.clear();
+
+			// we have no resistance or capacitance data
+			vpr_rr_node.R = vpr_rr_node.C = 0;
+			// all I know is that most wires are not bidirectional
+			vpr_rr_node.direction = INC_DIRECTION; // what does INC_DIRECTION mean?
+			// all XDLRC wires have a single driver
+			vpr_rr_node.drivers = SINGLE;
+			// what exactly do the following two fields mean?
+			vpr_rr_node.num_wire_drivers = 0; // unless it's important to provide this
+			vpr_rr_node.num_opin_drivers = 0; // unless it's important to provide this
+			// VPR will use this to trace back after routing
+			vpr_rr_node.prev_node = vpr_rr_node.prev_edge = /*vpr_rr_node.net_num =*/ OPEN;
+			// we aren't populating graph or timing information
+			vpr_rr_node.pb_graph_pin = 0;
+			vpr_rr_node.tnode = 0;
+			// we currently provide no packing cost hints
+			vpr_rr_node.pack_intrinsic_cost = 0;
+			vpr_rr_node.z = 0;
+
+			/* Set prev_node for CLB LUT and X inputs, as well as BYP_B\\d */
+			static const boost::regex re_clblut("CLBL[LM]_(L|LL|M)_[ABCD][1-6]");
+			static const boost::regex re_clbx("CLBL[LM]_(L|LL|M)_[ABCD]X");
+			if (boost::regex_match(ewi.mWireName, re_clblut)
+					|| boost::regex_match(ewi.mWireName, re_clbx)
+					|| boost::regex_match(ewi.mWireName, re_BYP_B)) {
+				arcVector.clear();
+				mDDB.expandSegmentSources(twAnchor, arcVector, DDB::eExpandDirectionNone, true, true, 
+						true, true);
+				assert(arcVector.size() == 1);
+
+				const Arc& arc = arcVector.front();
+				const Tilewire& twSrc = arc.getSourceTilewire();
+
+				// Extract the anchor
+				tilewires.clear();
+				mDDB.expandSegment(twSrc, tilewires);
+				auto it = anchor2inode.find(tilewires.front());
+				assert(it != anchor2inode.end());
+				const int& inodeSrc = it->second;
+
+				vpr_rr_node.prev_node = inodeSrc;
+			}
+
+			gzwrite(fpNodes, &vpr_rr_node, sizeof(vpr_rr_node));
+
+			fInode2Tw.write(reinterpret_cast<const char*>(&twAnchor), sizeof(twAnchor));
+			//fInode2TwText << inodeAnchor << "," << twAnchor << std::endl;
+		}
+
+		fInode2Tw.close();
+		//fInode2TwText.close();
+
+		cerr << "After: " << num_nodes << "/" << gztell(fpEdgeSwitch) << endl;
+
+		/* Lastly, write the header and shim information into a third separate file;
+		 * The Makefile is responsible for */
+		ss.str("");
+		ss << mDDB.getDeviceName() << mPackageName << mPostfix << ".header_and_shim.gz";
+		gzFile fpHeaderShim = gzopen(ss.str().c_str(), "wb6");
+
+		int t;
+		// Write the size of the t_rr_node
+		t = sizeof(t_rr_node);
+		gzwrite(fpHeaderShim, &t, sizeof(int));
+		// Write the number of nodes
+		t = num_nodes;
+		gzwrite(fpHeaderShim, &t, sizeof(int));
+
+		// Process the deferred edge/switch data
+		for (const auto &it : inode2EdgeSwitch) {
+			const auto &inode = it.first;
+			const auto &edges = get<0>(it.second);
+			const auto &switches = get<1>(it.second);
+			assert(inode < num_vpr_nodes);
+			assert(edges.size() == switches.size());
+			rr_node[inode].num_edges = edges.size();
+			rr_node[inode].edges = reinterpret_cast<int*>(gztell(fpEdgeSwitch));
+			gzwrite(fpEdgeSwitch, edges.data(), edges.size() * sizeof(int));
+			rr_node[inode].switches = reinterpret_cast<short*>(gztell(fpEdgeSwitch));
+			gzwrite(fpEdgeSwitch, switches.data(), switches.size() * sizeof(short));
+		}
+
+		// Write the size of the edge switch data
+		t = gztell(fpEdgeSwitch);
+		gzwrite(fpHeaderShim, &t, sizeof(int));
+		// Write the VPR shim
+		gzwrite(fpHeaderShim, rr_node.data(), sizeof(t_rr_node)*rr_node.size());
+
+		gzclose(fpHeaderShim);
+		gzclose(fpNodes);
+		gzclose(fpEdgeSwitch);
+	}
+
+	void Xdlrc2Vpr::loadVpr(const string &fn) {
+		ifstream fs(fn, ifstream::binary);
+		if (!fs) {
+			std::cout << "loadVpr() failed: '" << fn << "' not found!" << std::endl;
+			exit(1);
+		}
+		int size, edgeLength;
+		fs.read(reinterpret_cast<char*>(&size), sizeof(int));
+		assert(size == sizeof(t_rr_node));
+		fs.read(reinterpret_cast<char*>(&num_nodes), sizeof(int));
+		fs.read(reinterpret_cast<char*>(&edgeLength), sizeof(int));
+		rr_node.resize(num_nodes);
+		edge_switch.resize(edgeLength);
+		type.resize(num_nodes);
+		fs.read(reinterpret_cast<char*>(rr_node.data()), sizeof(t_rr_node)*num_nodes);
+		fs.read(edge_switch.data(), edgeLength);
+		fs.read(reinterpret_cast<char*>(type.data()), sizeof(int)*num_nodes);
+
+		int edgeOffset = 0;
+		int inode = 0;
+		for (auto &n : rr_node) {
+			int num_edges = n.num_edges;
+			n.edges = reinterpret_cast<int*>(edgeOffset);
+			edgeOffset += sizeof(int)*num_edges;
+			n.switches = reinterpret_cast<short*>(edgeOffset);
+			edgeOffset += sizeof(short)*num_edges;
+			const bool inserted = ptc2inode.insert( std::make_pair(
+						std::make_tuple(type[inode], (int)n.xlow, (int)n.ylow, n.type, (int)n.ptc_num),
+						inode) ).second;
+			inode++;
+			n.prev_node = -1;
+			assert(inserted);
+		}
+		assert(edgeOffset == edgeLength);
+
+		fs.close();
+	}
+
+	void Xdlrc2Vpr::loadPtc2Name(const string &fn) {
+		ifstream fs(fn);
+		if (!fs) {
+			std::cout << "loadPtc2Name() failed: '" << fn << "' not found!" << std::endl;
+			exit(1);
+		}
+		fs.ignore(1024, '\n');
+
+		int pb_type, ptc;
+		std::string s_type, wirename;
+		const boost::regex re("CLBL[LM]_(L|M|LL)_[ABCD]6");
+
+		while (fs >> pb_type >> ptc >> s_type >> wirename) {
+			t_rr_type type;
+			if (s_type == "IPIN") type = IPIN;
+			else if (s_type == "OPIN") type = OPIN;
+			else throw;
+
+			if (!(wirename == "GND_WIRE" || wirename == "VCC_WIRE" || boost::regex_match(wirename, re))) {
+				assert(name2ptc.find(wirename) == name2ptc.end());
+			}
+			name2ptc.insert( std::make_pair( 
+						wirename,
+						std::make_tuple(pb_type,ptc,type) ));
+		}
+
+		fs.close();
+	}
+
+	string Xdlrc2Vpr::getStitchWirename(const Tilewire &tw) {
+		const ExtendedWireInfo ewi(mDDB, tw);
+		const string wirename(ewi.mWireName);
+		return wirename;
+	}
+
+	short Xdlrc2Vpr::getStitchY(const ExtendedWireInfo& ewi, const short& x, const short& y) {
+		const string wirename(ewi.mWireName);
+		
+		if (mDDB.getDeviceName() == "xc6vlx240t") {
+			if (boost::starts_with(ewi.mTileTypeName, "INT")
+					&& (wirename == "GND_WIRE" || wirename == "VCC_WIRE")) {
+
+				// Collapse all into root of hard block
+				switch(x) {
+					// DSP
+					case 8:
+					case 13:
+					case 28:
+					case 33:
+					case 65:
+					case 70:
+					case 85:
+					case 90:
+
+					// BRAM
+					case 5:
+					case 16:
+					case 25:
+					case 36:
+					case 62:
+					case 73:
+					case 82:
+					case 93:
+					case 101:
+						return ((y-1) / 5) * 5 + 1;
+				}
+			}
+		}
+
+
+		return y;
+	}
+
+	void Xdlrc2Vpr::stitchInode(const Tilewire& twAnchor, const int &inodeXilinx, 
+			t_rr_node &rrnXilinx, gzFile fpEdgeSwitch, std::vector<short>& switches) {
+		TilewireVector twVec;
+		mDDB.expandSegment(twAnchor, twVec);
+		assert(twVec.front() == twAnchor);
+		string wirename;
+
+		ExtendedWireInfo ewi(mDDB, twAnchor);
+		for (const Tilewire& tw : twVec) {
+			ewi = tw;
+			if (!include(ewi)) continue;
+			const string &w = getStitchWirename(tw);
+			auto it = name2ptc.equal_range(w);
+			if (it.first != it.second) {
+				assert(wirename.empty());
+				wirename = w;
+			}
+		}
+		if (wirename.empty()) return;
+		auto it = name2ptc.equal_range(wirename);
+
+		ewi = twAnchor;
+		const short& x = rrnXilinx.xlow;
+		const short& y = getStitchY(ewi, x, rrnXilinx.ylow);
+
+		// Go through all ptc-s
+		auto kt = it.first, ke = it.second;
+		bool found = false;
+		for (; kt != ke; ++kt) {
+			int pb_type, ptc;
+			t_rr_type type;
+			tie(pb_type,ptc,type) = kt->second;
+			// Find the inode
+			auto jt = ptc2inode.find( std::make_tuple(pb_type,x,y,type,ptc) );
+			if (jt == ptc2inode.end()) continue;
+
+			const int& inodeVpr = jt->second;
+			switch(type) {
+				case IPIN: 
+					gzwrite(fpEdgeSwitch, &inodeVpr, sizeof(inodeVpr));
+					switches.push_back(DEFAULT_SWITCH_INDEX);
+					++rrnXilinx.num_edges;
+
+					assert(rr_node[inodeVpr].prev_node == OPEN);
+					rr_node[inodeVpr].prev_node = inodeXilinx;
+					break;
+				case OPIN: 
+					{
+					assert(rr_node[inodeVpr].num_edges == 0);
+
+					auto lt = inode2EdgeSwitch.find(inodeVpr);
+					if (lt == inode2EdgeSwitch.end())
+						lt = inode2EdgeSwitch.insert(make_pair(inodeVpr,
+											make_tuple(vector<int>(), vector<short>())))
+							.first;
+
+					vector<int>& edges = get<0>(lt->second);
+					edges.push_back(inodeXilinx);
+
+					vector<short>& switches = get<1>(lt->second);
+					switches.push_back(DEFAULT_SWITCH_INDEX);
+					}
+					break; 
+				default: 
+					throw;
+			}
+			found = true;
+		}
+
+		if (!found) {
+			cerr << "For anchor " << ewi << ", did not find VPR node @"
+				<< " (" << x << "," << y << ")" << endl;
+		}
+	}
+
+} // namespace architecture
+} // namespace torc
+
+int main(int argc, char **argv)
+{
+	using namespace torc::architecture;
+	if (argc != 4) {
+		std::cout << "Usage: xdlrc2vpr <device+package> <width> <height>" << std::endl;
+		std::cout << "e.g. : xdlrc2vpr xc6vlx240tff1156 102 240" << std::endl;
+		return 1;
+	}
+	const boost::regex re("(xc.*)((ff|ffg|clg)\\d+)(_.*)?");
+	boost::cmatch what;
+	const bool rt = boost::regex_match(argv[1], what, re);
+	if (!rt) {
+		std::cout << "<device+package>: '" << argv[2] << "' does not regex: '" << re.str() << "'" << std::endl;
+		return 1;
+	}
+
+	DDB ddb(what[1],what[2]);
+	const int width = boost::lexical_cast<int>(argv[2]);
+	const int height = boost::lexical_cast<int>(argv[3]);
+	Xdlrc2Vpr x2v(ddb, what[2], what[4], width, height);
+	x2v();
+}
diff --git xdlrc2vpr/xdlrc2vpr.hpp xdlrc2vpr/xdlrc2vpr.hpp
new file mode 100644
index 0000000..2576ad1
--- /dev/null
+++ xdlrc2vpr/xdlrc2vpr.hpp
@@ -0,0 +1,187 @@
+// Torc - Copyright 2011 University of Southern California.  All Rights Reserved.
+// $HeadURL: https://svn.east.isi.edu/torc/trunk/src/torc/architecture/DDB.hpp $
+// $Id: DDB.hpp 1436 2013-05-06 20:47:54Z nsteiner $
+
+// This program is free software: you can redistribute it and/or modify it under the terms of the 
+// GNU General Public License as published by the Free Software Foundation, either version 3 of the 
+// License, or (at your option) any later version.
+// 
+// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
+// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See 
+// the GNU General Public License for more details.
+// 
+// You should have received a copy of the GNU General Public License along with this program.  If 
+// not, see <http://www.gnu.org/licenses/>.
+
+// *******************************************************************************
+// EH: This file is an adaptation of ../torc/src/torc/architecture/VprExporter.hpp
+// *******************************************************************************
+
+#ifndef TORC_ARCHITECTURE_VPREXPORTER_HPP
+#define TORC_ARCHITECTURE_VPREXPORTER_HPP
+
+#include <iostream>
+#include <fstream>
+#include "torc/architecture/DDB.hpp"
+#include "torc/architecture/XilinxDatabaseTypes.hpp"
+#include "torc/architecture/OutputStreamHelpers.hpp"
+#include "boost/lexical_cast.hpp"
+#include "boost/algorithm/string.hpp"
+#include "vpr_types.h"
+
+namespace torc {
+namespace architecture {
+
+	class Xdlrc2Vpr {
+	protected:
+		typedef std::fstream fstream; 
+		typedef std::string string; 
+		typedef std::vector<string> StringVector; 
+		typedef std::vector<uint32_t> Uint32Vector; 
+		typedef xilinx::WireFlags WireFlags; 
+		typedef xilinx::WireCount WireCount; 
+		typedef xilinx::WireIndex WireIndex; 
+		typedef xilinx::TileCount TileCount; 
+		typedef xilinx::TileIndex TileIndex; 
+		typedef xilinx::TileCol TileCol; 
+		typedef xilinx::TileRow TileRow; 
+		typedef xilinx::TileTypeIndex TileTypeIndex; 
+		
+		DDB& mDDB;
+		const Tiles& mTiles;
+		const Segments& mSegments;
+		const std::string mPackageName;
+
+		std::vector<t_rr_node> rr_node;
+		int num_nodes;
+		std::vector<char> edge_switch;
+		std::map<int, std::tuple< std::vector<int>, std::vector<short> > > inode2EdgeSwitch;
+		std::vector<int> type;
+		std::map<std::tuple<int,int,int,t_rr_type,int>, int> ptc2inode;
+		void loadVpr(const string &fn);
+
+		std::multimap<std::string, std::tuple<int,int,e_rr_type> > name2ptc;
+		void loadPtc2Name(const string &fn);
+
+		inline std::tuple<TileRow,TileCol> ewi2rc(const ExtendedWireInfo &ewi) 
+		{
+			static const boost::regex re("(.*)_X(\\d+)Y(\\d+)");
+			static boost::match_results<const char*> what;
+			boost::regex_match(ewi.mTileName, what, re);
+			const std::string tile(what[1]);
+			TileRow row(boost::lexical_cast<int>(what[3]));
+			TileCol col(boost::lexical_cast<int>(what[2]));
+
+			// Add one to the Y coordinate to align it with VPR
+			// (Row 0 in VPR land is the bottom row of I/Os,
+			// which are empty in VTB)
+
+			row += 1;
+
+			return std::make_tuple(row,col);
+		}
+
+		inline bool include(const ExtendedWireInfo &ewi)
+		{
+			TileRow row;
+			TileCol col;
+
+			if (!WireInfo::isOutput(ewi.mWireFlags) && !WireInfo::isInput(ewi.mWireFlags)) {
+				TilewireVector sources, sinks;
+				mDDB.expandTilewireSources(Tilewire(ewi.mTileIndex, ewi.mWireIndex), sources);
+				mDDB.expandTilewireSinks(Tilewire(ewi.mTileIndex, ewi.mWireIndex), sinks);
+				if (sources.size() == 0 && sinks.size() == 0)
+					return false;
+			}
+
+			std::tie(row,col) = ewi2rc(ewi);
+
+			if (row < 1 || row > mHeight+1) return false;
+			if (col < 0 || col > mWidth) return false;
+
+			const char *type = ewi.mTileTypeName;
+
+			/* Ignore HCLK_(INNER|OUTER)_IOI tiles
+			 * to prevent IOBs going directly onto the
+			 * BUFG network, and blowing up runtime... */
+			static const boost::regex re_hclk_ioi("HCLK_(INNER_|OUTER_)IOI3?");
+			if (boost::regex_match(type, re_hclk_ioi))
+				return false;
+
+			if (strncmp(type, "CLBLL", 5) && strncmp(type, "CLBLM", 5) && strncmp(type, "INT", 3)
+				&& strncmp(type, "BRAM", 4) && strncmp(type, "DSP", 3) 
+				&& strncmp(type, "LIOB", 4) && strncmp(type, "LIOB_FT", 7) && strncmp(type, "RIOB", 4) 
+				&& strcmp(type, "IOI") && strncmp(type, "LIOI", 4) && strncmp(type, "RIOI", 4)
+				&& strncmp(type, "HCLK", 4) && strncmp(type, "CMT", 3) && strncmp(type, "CLK", 3)
+				&& strncmp(type, "PSS", 3)
+				)
+			{
+				return false;
+			}
+			const char *wire = ewi.mWireName;
+			if (strcmp(wire, "HCLK_CLB_M_COUT") == 0
+				|| strcmp(wire, "HCLK_CLB_L_COUT") == 0
+				// Skip COUT -> CIN tilewire on segment
+				// (because it's in the tile below and messes up the CIN IPIN)
+				|| strcmp(wire, "CLBLM_L_COUT_N") == 0
+				|| strcmp(wire, "CLBLM_M_COUT_N") == 0
+				|| strcmp(wire, "CLBLL_L_COUT_N") == 0
+				|| strcmp(wire, "CLBLL_LL_COUT_N") == 0
+				//std::cerr << "Wrong wire: " << ewi << std::endl;
+
+				// Because for some reason, this wire (0@1488) 
+				// is on the same segment as EE2BEG0 (36@2605)
+				|| strcmp(wire, "CMT_FIFO_EEA2A0_0") == 0
+			   ) {
+				return false;
+			}
+
+			return true;
+		}
+
+		static const boost::regex re_clk;
+		static const boost::regex re_124;
+		static const boost::regex re_L;
+		static const boost::regex re_CLB;
+		static const boost::regex re_BYP;
+		boost::regex re_BYP_B;
+		static const boost::regex re_FAN;
+		static const boost::regex re_BOUNCE_NS;
+		static const boost::regex re_BRAM_DI;
+		static const boost::regex re_BRAM_AD;
+		static const boost::regex re_BRAM_WE;
+		static const boost::regex re_DSP;
+
+		int getIswitch(const ExtendedWireInfo &ewiSrc, const Tilewire &twSnk);
+
+		const std::string mPostfix;
+		const int mWidth, mHeight;
+
+		string getStitchWirename(const Tilewire &tw);
+		short getStitchY(const ExtendedWireInfo& ewi, const short& x, const short& y);
+		void stitchInode(const Tilewire& twAnchor, const int &inodeXilinx, 
+				t_rr_node &rrnXilinx, gzFile fpEdgeSwitch, std::vector<short>& switches);
+
+	public:
+		Xdlrc2Vpr(DDB& inDDB, const std::string &packageName, const std::string &postfix, const int width, const int height) : 
+			mDDB(inDDB), mTiles(mDDB.getTiles()), mSegments(mDDB.getSegments()), 
+			mPackageName(packageName), mPostfix(postfix), 
+			mWidth(width), mHeight(height)
+		{
+			const string &dev = mDDB.getDeviceName();
+			loadVpr(dev+packageName+postfix+".vpr");
+			loadPtc2Name(dev+".ptc2name");
+
+			if (boost::starts_with(mDDB.getDeviceName(), "xc6")) {
+				re_BYP_B = boost::regex("BYP_B\\d");
+			}
+			else throw;
+		}
+		void operator()(void);
+
+	};
+
+} // namespace architecture
+} // namespace torc
+
+#endif // TORC_ARCHITECTURE_VPREXPORTER_HPP
